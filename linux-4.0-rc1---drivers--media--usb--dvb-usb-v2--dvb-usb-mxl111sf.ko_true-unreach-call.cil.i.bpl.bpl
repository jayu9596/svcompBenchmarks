var $M.0: [ref]i32;

var $M.1: [ref]ref;

var $M.2: [ref]ref;

var $M.3: [ref]ref;

var $M.4: [ref]ref;

var $M.5: [ref]i24;

var $M.6: [ref]i8;

var $M.7: [ref]i8;

var $M.8: [ref]i8;

var $M.10: i32;

var $M.11: [ref]ref;

var $M.12: [ref]i16;

var $M.13: [ref]i8;

var $M.14: i32;

var $M.15: [ref]i8;

var $M.16: [ref]i8;

var $M.17: i8;

var $M.18: [ref]i8;

var $M.19: [ref]i16;

var $M.20: [ref]i16;

var $M.21: [ref]i16;

var $M.22: [ref]ref;

var $M.23: [ref]i8;

var $M.24: [ref]i8;

var $M.25: [ref]i8;

var $M.26: [ref]i8;

var $M.27: [ref]i8;

var $M.28: [ref]i8;

var $M.29: i8;

var $M.30: [ref]i8;

var $M.31: i32;

var $M.32: i32;

var $M.33: i32;

var $M.34: i32;

var $M.35: i32;

var $M.36: i32;

var $M.37: i32;

var $M.38: i32;

var $M.39: i32;

var $M.40: i32;

var $M.41: i32;

var $M.42: i32;

var $M.43: i32;

var $M.44: i32;

var $M.45: i32;

var $M.46: i32;

var $M.47: i32;

var $M.48: i32;

var $M.49: i32;

var $M.50: i16;

var $M.51: i32;

var $M.52: i32;

var $M.53: i32;

var $M.54: i32;

var $M.55: i32;

var $M.61: [ref]i16;

var $M.62: [ref]i16;

var $M.63: [ref]i16;

var $M.64: [ref]i16;

var $M.65: [ref]i16;

var $M.66: [ref]i8;

var $M.67: [ref]i8;

var $M.68: [ref]i8;

var $M.69: [ref]i8;

var $M.70: [ref]i8;

var $M.71: [ref]i8;

var $M.72: [ref]i8;

var $M.73: [ref]i64;

var $M.106: [ref]i8;

var $M.107: [ref]i16;

var $M.108: [ref]i8;

var $M.109: [ref]i32;

var $M.110: [ref]i32;

var $M.111: [ref]i32;

var $M.149: [ref]i8;

var $M.177: [ref]i8;

var $M.223: [ref]i8;

var $M.230: [ref]i8;

var $M.234: [ref]i8;

var $M.238: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 602932);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const dvb_usb_mxl111sf_debug: ref;

axiom dvb_usb_mxl111sf_debug == $sub.ref(0, 1028);

const ldv_linux_alloc_usb_lock_lock: ref;

axiom ldv_linux_alloc_usb_lock_lock == $sub.ref(0, 2056);

const ldv_linux_arch_io_iomem: ref;

axiom ldv_linux_arch_io_iomem == $sub.ref(0, 3084);

const ldv_linux_block_request_blk_rq: ref;

axiom ldv_linux_block_request_blk_rq == $sub.ref(0, 4112);

const ldv_linux_drivers_base_class_usb_gadget_class: ref;

axiom ldv_linux_drivers_base_class_usb_gadget_class == $sub.ref(0, 5140);

const ldv_linux_fs_char_dev_usb_gadget_chrdev: ref;

axiom ldv_linux_fs_char_dev_usb_gadget_chrdev == $sub.ref(0, 6168);

const ldv_linux_fs_sysfs_sysfs: ref;

axiom ldv_linux_fs_sysfs_sysfs == $sub.ref(0, 7196);

const ldv_linux_kernel_locking_rwlock_rlock: ref;

axiom ldv_linux_kernel_locking_rwlock_rlock == $sub.ref(0, 8224);

const ldv_linux_kernel_locking_rwlock_wlock: ref;

axiom ldv_linux_kernel_locking_rwlock_wlock == $sub.ref(0, 9252);

const ldv_linux_kernel_module_module_refcounter: ref;

axiom ldv_linux_kernel_module_module_refcounter == $sub.ref(0, 10280);

const ldv_linux_kernel_rcu_srcu_srcu_nested: ref;

axiom ldv_linux_kernel_rcu_srcu_srcu_nested == $sub.ref(0, 11308);

const ldv_linux_kernel_rcu_update_lock_bh_rcu_nested_bh: ref;

axiom ldv_linux_kernel_rcu_update_lock_bh_rcu_nested_bh == $sub.ref(0, 12336);

const ldv_linux_kernel_rcu_update_lock_sched_rcu_nested_sched: ref;

axiom ldv_linux_kernel_rcu_update_lock_sched_rcu_nested_sched == $sub.ref(0, 13364);

const ldv_linux_kernel_rcu_update_lock_rcu_nested: ref;

axiom ldv_linux_kernel_rcu_update_lock_rcu_nested == $sub.ref(0, 14392);

const ldv_linux_mmc_sdio_func_sdio_element: ref;

axiom ldv_linux_mmc_sdio_func_sdio_element == $sub.ref(0, 15418);

const ldv_linux_net_register_probe_state: ref;

axiom ldv_linux_net_register_probe_state == $sub.ref(0, 16446);

const rtnllocknumber: ref;

axiom rtnllocknumber == $sub.ref(0, 17474);

const locksocknumber: ref;

axiom locksocknumber == $sub.ref(0, 18502);

const ldv_linux_usb_coherent_coherent_state: ref;

axiom ldv_linux_usb_coherent_coherent_state == $sub.ref(0, 19530);

const LDV_LINUX_USB_DEV_USB_DEV_REF_COUNTS: ref;

axiom LDV_LINUX_USB_DEV_USB_DEV_REF_COUNTS == $sub.ref(0, 20558);

const ldv_linux_usb_gadget_usb_gadget: ref;

axiom ldv_linux_usb_gadget_usb_gadget == $sub.ref(0, 21586);

const ldv_linux_usb_register_probe_state: ref;

axiom ldv_linux_usb_register_probe_state == $sub.ref(0, 22614);

const ldv_linux_usb_urb_urb_state: ref;

axiom ldv_linux_usb_urb_urb_state == $sub.ref(0, 23642);

const LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_fe_lock_of_mxl111sf_state: ref;

axiom LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_fe_lock_of_mxl111sf_state == $sub.ref(0, 24667);

const LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_i2c_mutex_of_dvb_usb_device: ref;

axiom LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_i2c_mutex_of_dvb_usb_device == $sub.ref(0, 25692);

const LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_i_mutex_of_inode: ref;

axiom LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_i_mutex_of_inode == $sub.ref(0, 26717);

const LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_lock: ref;

axiom LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_lock == $sub.ref(0, 27742);

const LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_mutex_of_device: ref;

axiom LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_mutex_of_device == $sub.ref(0, 28767);

const {:count 35} __mod_usb__mxl111sf_id_table_device_table: ref;

axiom __mod_usb__mxl111sf_id_table_device_table == $sub.ref(0, 30911);

const ldv_thread_0: ref;

axiom ldv_thread_0 == $sub.ref(0, 31951);

const ldv_thread_1: ref;

axiom ldv_thread_1 == $sub.ref(0, 32991);

const ldv_thread_11: ref;

axiom ldv_thread_11 == $sub.ref(0, 34031);

const ldv_thread_2: ref;

axiom ldv_thread_2 == $sub.ref(0, 35071);

const ldv_thread_3: ref;

axiom ldv_thread_3 == $sub.ref(0, 36111);

const ldv_thread_4: ref;

axiom ldv_thread_4 == $sub.ref(0, 37151);

const ldv_thread_5: ref;

axiom ldv_thread_5 == $sub.ref(0, 38191);

const ldv_thread_6: ref;

axiom ldv_thread_6 == $sub.ref(0, 39231);

const ldv_thread_7: ref;

axiom ldv_thread_7 == $sub.ref(0, 40271);

const ldv_thread_8: ref;

axiom ldv_thread_8 == $sub.ref(0, 41311);

const ldv_linux_lib_idr_idr: ref;

axiom ldv_linux_lib_idr_idr == $sub.ref(0, 42339);

const ldv_linux_kernel_sched_completion_completion: ref;

axiom ldv_linux_kernel_sched_completion_completion == $sub.ref(0, 43367);

const ldv_linux_kernel_locking_spinlock_spin_tx_global_lock_of_net_device: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_tx_global_lock_of_net_device == $sub.ref(0, 44395);

const ldv_linux_kernel_locking_spinlock_spin_siglock_of_sighand_struct: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_siglock_of_sighand_struct == $sub.ref(0, 45423);

const ldv_linux_kernel_locking_spinlock_spin_ptl: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_ptl == $sub.ref(0, 46451);

const ldv_linux_kernel_locking_spinlock_spin_node_size_lock_of_pglist_data: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_node_size_lock_of_pglist_data == $sub.ref(0, 47479);

const ldv_linux_kernel_locking_spinlock_spin_lock_of_NOT_ARG_SIGN: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_lock_of_NOT_ARG_SIGN == $sub.ref(0, 48507);

const ldv_linux_kernel_locking_spinlock_spin_lock: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_lock == $sub.ref(0, 49535);

const ldv_linux_kernel_locking_spinlock_spin_i_lock_of_inode: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_i_lock_of_inode == $sub.ref(0, 50563);

const ldv_linux_kernel_locking_spinlock_spin_alloc_lock_of_task_struct: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_alloc_lock_of_task_struct == $sub.ref(0, 51591);

const ldv_linux_kernel_locking_spinlock_spin_addr_list_lock_of_net_device: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_addr_list_lock_of_net_device == $sub.ref(0, 52619);

const ldv_linux_kernel_locking_spinlock_spin__xmit_lock_of_netdev_queue: ref;

axiom ldv_linux_kernel_locking_spinlock_spin__xmit_lock_of_netdev_queue == $sub.ref(0, 53647);

const __ldv_in_interrupt_context: ref;

axiom __ldv_in_interrupt_context == $sub.ref(0, 54672);

const ldv_linux_block_queue_queue_state: ref;

axiom ldv_linux_block_queue_queue_state == $sub.ref(0, 55700);

const ldv_linux_block_genhd_disk_state: ref;

axiom ldv_linux_block_genhd_disk_state == $sub.ref(0, 56728);

const dvb_usb_mxl111sf_rfswitch: ref;

axiom dvb_usb_mxl111sf_rfswitch == $sub.ref(0, 57756);

const hauppauge_lg2161_1019_config: ref;

axiom hauppauge_lg2161_1019_config == $sub.ref(0, 58800);

const hauppauge_lg2161_1040_config: ref;

axiom hauppauge_lg2161_1040_config == $sub.ref(0, 59844);

const hauppauge_lg2161_1019_ep6_config: ref;

axiom hauppauge_lg2161_1019_ep6_config == $sub.ref(0, 60888);

const hauppauge_lg2161_1040_ep6_config: ref;

axiom hauppauge_lg2161_1040_ep6_config == $sub.ref(0, 61932);

const dvb_usb_mxl111sf_spi: ref;

axiom dvb_usb_mxl111sf_spi == $sub.ref(0, 62960);

const hauppauge_lg2160_config: ref;

axiom hauppauge_lg2160_config == $sub.ref(0, 64004);

const mxl_demod_config: ref;

axiom mxl_demod_config == $sub.ref(0, 65052);

const hauppauge_lgdt3305_config: ref;

axiom hauppauge_lgdt3305_config == $sub.ref(0, 66112);

const dvb_usb_mxl111sf_isoc: ref;

axiom dvb_usb_mxl111sf_isoc == $sub.ref(0, 67140);

const mxl_tuner_config: ref;

axiom mxl_tuner_config == $sub.ref(0, 68212);

const __constr_expr_33: ref;

axiom __constr_expr_33 == $sub.ref(0, 69260);

const __constr_expr_32: ref;

axiom __constr_expr_32 == $sub.ref(0, 70308);

const __constr_expr_31: ref;

axiom __constr_expr_31 == $sub.ref(0, 71356);

const __constr_expr_30: ref;

axiom __constr_expr_30 == $sub.ref(0, 72404);

const __constr_expr_29: ref;

axiom __constr_expr_29 == $sub.ref(0, 73452);

const mxl111sf_props_mercury_mh: ref;

axiom mxl111sf_props_mercury_mh == $sub.ref(0, 74748);

const __constr_expr_28: ref;

axiom __constr_expr_28 == $sub.ref(0, 75796);

const __constr_expr_27: ref;

axiom __constr_expr_27 == $sub.ref(0, 76844);

const __constr_expr_26: ref;

axiom __constr_expr_26 == $sub.ref(0, 77892);

const __constr_expr_25: ref;

axiom __constr_expr_25 == $sub.ref(0, 78940);

const __constr_expr_24: ref;

axiom __constr_expr_24 == $sub.ref(0, 79988);

const __constr_expr_23: ref;

axiom __constr_expr_23 == $sub.ref(0, 81036);

const __constr_expr_22: ref;

axiom __constr_expr_22 == $sub.ref(0, 82084);

const __constr_expr_21: ref;

axiom __constr_expr_21 == $sub.ref(0, 83132);

const __constr_expr_20: ref;

axiom __constr_expr_20 == $sub.ref(0, 84180);

const mxl111sf_props_mercury: ref;

axiom mxl111sf_props_mercury == $sub.ref(0, 85476);

const __constr_expr_19: ref;

axiom __constr_expr_19 == $sub.ref(0, 86524);

const __constr_expr_18: ref;

axiom __constr_expr_18 == $sub.ref(0, 87572);

const __constr_expr_17: ref;

axiom __constr_expr_17 == $sub.ref(0, 88620);

const __constr_expr_16: ref;

axiom __constr_expr_16 == $sub.ref(0, 89668);

const __constr_expr_15: ref;

axiom __constr_expr_15 == $sub.ref(0, 90716);

const __constr_expr_14: ref;

axiom __constr_expr_14 == $sub.ref(0, 91764);

const __constr_expr_13: ref;

axiom __constr_expr_13 == $sub.ref(0, 92812);

const __constr_expr_12: ref;

axiom __constr_expr_12 == $sub.ref(0, 93860);

const __constr_expr_11: ref;

axiom __constr_expr_11 == $sub.ref(0, 94908);

const __constr_expr_10: ref;

axiom __constr_expr_10 == $sub.ref(0, 95956);

const __constr_expr_9: ref;

axiom __constr_expr_9 == $sub.ref(0, 97004);

const __constr_expr_8: ref;

axiom __constr_expr_8 == $sub.ref(0, 98052);

const __constr_expr_7: ref;

axiom __constr_expr_7 == $sub.ref(0, 99100);

const __constr_expr_6: ref;

axiom __constr_expr_6 == $sub.ref(0, 100148);

const __constr_expr_5: ref;

axiom __constr_expr_5 == $sub.ref(0, 101196);

const mxl111sf_props_dvbt: ref;

axiom mxl111sf_props_dvbt == $sub.ref(0, 102492);

const __constr_expr_4: ref;

axiom __constr_expr_4 == $sub.ref(0, 103540);

const __constr_expr_3: ref;

axiom __constr_expr_3 == $sub.ref(0, 104588);

const mxl111sf_props_mh: ref;

axiom mxl111sf_props_mh == $sub.ref(0, 105884);

const __constr_expr_2: ref;

axiom __constr_expr_2 == $sub.ref(0, 106932);

const mxl111sf_props_atsc: ref;

axiom mxl111sf_props_atsc == $sub.ref(0, 108228);

const __constr_expr_1: ref;

axiom __constr_expr_1 == $sub.ref(0, 109276);

const mxl111sf_i2c_algo: ref;

axiom mxl111sf_i2c_algo == $sub.ref(0, 110340);

const {:count 8} adapter_nr: ref;

axiom adapter_nr == $sub.ref(0, 111380);

const mxl111sf_props_atsc_mh: ref;

axiom mxl111sf_props_atsc_mh == $sub.ref(0, 112676);

const __constr_expr_0: ref;

axiom __constr_expr_0 == $sub.ref(0, 113724);

const {:count 35} mxl111sf_id_table: ref;

axiom mxl111sf_id_table == $sub.ref(0, 115868);

const mxl111sf_usb_driver: ref;

axiom mxl111sf_usb_driver == $sub.ref(0, 117196);

const {:count 17} .str.2: ref;

axiom .str.2 == $sub.ref(0, 118237);

const {:count 23} .str.48: ref;

axiom .str.48 == $sub.ref(0, 119284);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 35} .str.107: ref;

axiom .str.107 == $sub.ref(0, 120343);

const {:count 40} .str.3: ref;

axiom .str.3 == $sub.ref(0, 121407);

const {:count 11} .str.90: ref;

axiom .str.90 == $sub.ref(0, 122442);

const {:count 28} .str.93: ref;

axiom .str.93 == $sub.ref(0, 123494);

const {:count 27} .str.94: ref;

axiom .str.94 == $sub.ref(0, 124545);

const {:count 28} .str.91: ref;

axiom .str.91 == $sub.ref(0, 125597);

const {:count 25} .str.92: ref;

axiom .str.92 == $sub.ref(0, 126646);

const {:count 26} .str.5: ref;

axiom .str.5 == $sub.ref(0, 127696);

const {:count 14} .str.61: ref;

axiom .str.61 == $sub.ref(0, 128734);

const {:count 53} .str.62: ref;

axiom .str.62 == $sub.ref(0, 129811);

const {:count 38} .str.63: ref;

axiom .str.63 == $sub.ref(0, 130873);

const {:count 48} .str.64: ref;

axiom .str.64 == $sub.ref(0, 131945);

const {:count 16} .str.65: ref;

axiom .str.65 == $sub.ref(0, 132985);

const {:count 11} .str.24: ref;

axiom .str.24 == $sub.ref(0, 134020);

const {:count 30} .str.41: ref;

axiom .str.41 == $sub.ref(0, 135074);

const {:count 19} .str.10: ref;

axiom .str.10 == $sub.ref(0, 136117);

const {:count 21} .str.11: ref;

axiom .str.11 == $sub.ref(0, 137162);

const {:count 40} .str.12: ref;

axiom .str.12 == $sub.ref(0, 138226);

const .str: ref;

axiom .str == $sub.ref(0, 139275);

const {:count 18} .str.1: ref;

axiom .str.1 == $sub.ref(0, 140317);

const {:count 26} .str.4: ref;

axiom .str.4 == $sub.ref(0, 141367);

const {:count 18} .str.6: ref;

axiom .str.6 == $sub.ref(0, 142409);

const {:count 32} .str.7: ref;

axiom .str.7 == $sub.ref(0, 143465);

const {:count 56} .str.8: ref;

axiom .str.8 == $sub.ref(0, 144545);

const {:count 21} .str.9: ref;

axiom .str.9 == $sub.ref(0, 145590);

const {:count 23} .str.66: ref;

axiom .str.66 == $sub.ref(0, 146637);

const {:count 9} .str.67: ref;

axiom .str.67 == $sub.ref(0, 147670);

const {:count 9} .str.68: ref;

axiom .str.68 == $sub.ref(0, 148703);

const {:count 15} .str.69: ref;

axiom .str.69 == $sub.ref(0, 149742);

const {:count 3} .str.70: ref;

axiom .str.70 == $sub.ref(0, 150769);

const {:count 7} .str.71: ref;

axiom .str.71 == $sub.ref(0, 151800);

const {:count 7} .str.72: ref;

axiom .str.72 == $sub.ref(0, 152831);

const {:count 17} .str.73: ref;

axiom .str.73 == $sub.ref(0, 153872);

const {:count 24} .str.74: ref;

axiom .str.74 == $sub.ref(0, 154920);

const {:count 32} .str.95: ref;

axiom .str.95 == $sub.ref(0, 155976);

const {:count 20} .str.96: ref;

axiom .str.96 == $sub.ref(0, 157020);

const {:count 28} .str.51: ref;

axiom .str.51 == $sub.ref(0, 158072);

const {:count 8} .str.52: ref;

axiom .str.52 == $sub.ref(0, 159104);

const {:count 20} .str.35: ref;

axiom .str.35 == $sub.ref(0, 160148);

const {:count 9} .str.17: ref;

axiom .str.17 == $sub.ref(0, 161181);

const {:count 26} .str.32: ref;

axiom .str.32 == $sub.ref(0, 162231);

const {:count 27} .str.15: ref;

axiom .str.15 == $sub.ref(0, 163282);

const {:count 28} .str.16: ref;

axiom .str.16 == $sub.ref(0, 164334);

const {:count 24} .str.13: ref;

axiom .str.13 == $sub.ref(0, 165382);

const {:count 69} .str.14: ref;

axiom .str.14 == $sub.ref(0, 166475);

const {:count 23} .str.33: ref;

axiom .str.33 == $sub.ref(0, 167522);

const {:count 20} .str.34: ref;

axiom .str.34 == $sub.ref(0, 168566);

const {:count 15} .str.30: ref;

axiom .str.30 == $sub.ref(0, 169605);

const {:count 23} .str.31: ref;

axiom .str.31 == $sub.ref(0, 170652);

const {:count 27} .str.27: ref;

axiom .str.27 == $sub.ref(0, 171703);

const {:count 28} .str.108: ref;

axiom .str.108 == $sub.ref(0, 172755);

const {:count 28} .str.75: ref;

axiom .str.75 == $sub.ref(0, 173807);

const {:count 23} .str.28: ref;

axiom .str.28 == $sub.ref(0, 174854);

const {:count 24} .str.29: ref;

axiom .str.29 == $sub.ref(0, 175902);

const {:count 22} .str.76: ref;

axiom .str.76 == $sub.ref(0, 176948);

const {:count 6} .str.77: ref;

axiom .str.77 == $sub.ref(0, 177978);

const {:count 22} .str.78: ref;

axiom .str.78 == $sub.ref(0, 179024);

const {:count 29} .str.79: ref;

axiom .str.79 == $sub.ref(0, 180077);

const {:count 53} .str.80: ref;

axiom .str.80 == $sub.ref(0, 181154);

const {:count 33} .str.97: ref;

axiom .str.97 == $sub.ref(0, 182211);

const {:count 4} .str.98: ref;

axiom .str.98 == $sub.ref(0, 183239);

const {:count 32} .str.103: ref;

axiom .str.103 == $sub.ref(0, 184295);

const {:count 22} .str.82: ref;

axiom .str.82 == $sub.ref(0, 185341);

const {:count 14} .str.104: ref;

axiom .str.104 == $sub.ref(0, 186379);

const {:count 21} .str.105: ref;

axiom .str.105 == $sub.ref(0, 187424);

const {:count 45} .str.106: ref;

axiom .str.106 == $sub.ref(0, 188493);

const {:count 40} .str.86: ref;

axiom .str.86 == $sub.ref(0, 189557);

const {:count 23} .str.88: ref;

axiom .str.88 == $sub.ref(0, 190604);

const {:count 22} .str.87: ref;

axiom .str.87 == $sub.ref(0, 191650);

const {:count 26} .str.46: ref;

axiom .str.46 == $sub.ref(0, 192700);

const {:count 15} .str.42: ref;

axiom .str.42 == $sub.ref(0, 193739);

const {:count 18} .str.43: ref;

axiom .str.43 == $sub.ref(0, 194781);

const {:count 53} .str.44: ref;

axiom .str.44 == $sub.ref(0, 195858);

const {:count 19} .str.151: ref;

axiom .str.151 == $sub.ref(0, 196901);

const {:count 24} .str.152: ref;

axiom .str.152 == $sub.ref(0, 197949);

const {:count 26} .str.153: ref;

axiom .str.153 == $sub.ref(0, 198999);

const {:count 23} .str.155: ref;

axiom .str.155 == $sub.ref(0, 200046);

const {:count 23} .str.154: ref;

axiom .str.154 == $sub.ref(0, 201093);

const {:count 17} .str.150: ref;

axiom .str.150 == $sub.ref(0, 202134);

const {:count 28} .str.45: ref;

axiom .str.45 == $sub.ref(0, 203186);

const {:count 28} .str.160: ref;

axiom .str.160 == $sub.ref(0, 204238);

const {:count 27} .str.159: ref;

axiom .str.159 == $sub.ref(0, 205289);

const {:count 29} .str.156: ref;

axiom .str.156 == $sub.ref(0, 206342);

const {:count 36} .str.157: ref;

axiom .str.157 == $sub.ref(0, 207402);

const {:count 26} .str.158: ref;

axiom .str.158 == $sub.ref(0, 208452);

const {:count 25} .str.25: ref;

axiom .str.25 == $sub.ref(0, 209501);

const {:count 13} .str.22: ref;

axiom .str.22 == $sub.ref(0, 210538);

const {:count 15} .str.23: ref;

axiom .str.23 == $sub.ref(0, 211577);

const {:count 11} .str.20: ref;

axiom .str.20 == $sub.ref(0, 212612);

const {:count 25} .str.21: ref;

axiom .str.21 == $sub.ref(0, 213661);

const {:count 26} .str.18: ref;

axiom .str.18 == $sub.ref(0, 214711);

const {:count 20} .str.19: ref;

axiom .str.19 == $sub.ref(0, 215755);

const {:count 22} .str.99: ref;

axiom .str.99 == $sub.ref(0, 216801);

const {:count 22} .str.100: ref;

axiom .str.100 == $sub.ref(0, 217847);

const {:count 29} .str.101: ref;

axiom .str.101 == $sub.ref(0, 218900);

const {:count 53} .str.102: ref;

axiom .str.102 == $sub.ref(0, 219977);

const {:count 34} .str.81: ref;

axiom .str.81 == $sub.ref(0, 221035);

const {:count 16} .str.83: ref;

axiom .str.83 == $sub.ref(0, 222075);

const {:count 23} .str.84: ref;

axiom .str.84 == $sub.ref(0, 223122);

const {:count 47} .str.85: ref;

axiom .str.85 == $sub.ref(0, 224193);

const {:count 18} .str.37: ref;

axiom .str.37 == $sub.ref(0, 225235);

const {:count 5} .str.39: ref;

axiom .str.39 == $sub.ref(0, 226264);

const {:count 5} .str.40: ref;

axiom .str.40 == $sub.ref(0, 227293);

const {:count 86} .str.38: ref;

axiom .str.38 == $sub.ref(0, 228403);

const {:count 25} .str.143: ref;

axiom .str.143 == $sub.ref(0, 229452);

const {:count 18} .str.149: ref;

axiom .str.149 == $sub.ref(0, 230494);

const {:count 17} .str.148: ref;

axiom .str.148 == $sub.ref(0, 231535);

const {:count 30} .str.147: ref;

axiom .str.147 == $sub.ref(0, 232589);

const {:count 18} .str.146: ref;

axiom .str.146 == $sub.ref(0, 233631);

const {:count 30} .str.145: ref;

axiom .str.145 == $sub.ref(0, 234685);

const {:count 19} .str.144: ref;

axiom .str.144 == $sub.ref(0, 235728);

const {:count 58} .str.123: ref;

axiom .str.123 == $sub.ref(0, 236810);

const {:count 25} .str.124: ref;

axiom .str.124 == $sub.ref(0, 237859);

const {:count 14} .str.125: ref;

axiom .str.125 == $sub.ref(0, 238897);

const {:count 38} .str.126: ref;

axiom .str.126 == $sub.ref(0, 239959);

const {:count 37} .str.127: ref;

axiom .str.127 == $sub.ref(0, 241020);

const {:count 28} .str.128: ref;

axiom .str.128 == $sub.ref(0, 242072);

const {:count 22} .str.129: ref;

axiom .str.129 == $sub.ref(0, 243118);

const {:count 38} .str.130: ref;

axiom .str.130 == $sub.ref(0, 244180);

const {:count 27} .str.131: ref;

axiom .str.131 == $sub.ref(0, 245231);

const {:count 28} .str.132: ref;

axiom .str.132 == $sub.ref(0, 246283);

const {:count 23} .str.133: ref;

axiom .str.133 == $sub.ref(0, 247330);

const {:count 20} .str.137: ref;

axiom .str.137 == $sub.ref(0, 248374);

const {:count 23} .str.138: ref;

axiom .str.138 == $sub.ref(0, 249421);

const {:count 13} .str.139: ref;

axiom .str.139 == $sub.ref(0, 250458);

const {:count 17} .str.140: ref;

axiom .str.140 == $sub.ref(0, 251499);

const {:count 24} .str.141: ref;

axiom .str.141 == $sub.ref(0, 252547);

const {:count 30} .str.142: ref;

axiom .str.142 == $sub.ref(0, 253601);

const {:count 22} .str.136: ref;

axiom .str.136 == $sub.ref(0, 254647);

const {:count 26} .str.135: ref;

axiom .str.135 == $sub.ref(0, 255697);

const {:count 23} .str.134: ref;

axiom .str.134 == $sub.ref(0, 256744);

const {:count 22} .str.49: ref;

axiom .str.49 == $sub.ref(0, 257790);

const {:count 32} .str.89: ref;

axiom .str.89 == $sub.ref(0, 258846);

const {:count 11} .str.50: ref;

axiom .str.50 == $sub.ref(0, 259881);

const {:count 30} .str.118: ref;

axiom .str.118 == $sub.ref(0, 260935);

const {:count 22} .str.53: ref;

axiom .str.53 == $sub.ref(0, 261981);

const {:count 32} .str.109: ref;

axiom .str.109 == $sub.ref(0, 263037);

const {:count 23} .str.54: ref;

axiom .str.54 == $sub.ref(0, 264084);

const {:count 11} .str.55: ref;

axiom .str.55 == $sub.ref(0, 265119);

const {:count 22} .str.56: ref;

axiom .str.56 == $sub.ref(0, 266165);

const {:count 18} .str.57: ref;

axiom .str.57 == $sub.ref(0, 267207);

const {:count 35} .str.113: ref;

axiom .str.113 == $sub.ref(0, 268266);

const {:count 32} .str.110: ref;

axiom .str.110 == $sub.ref(0, 269322);

const {:count 33} .str.111: ref;

axiom .str.111 == $sub.ref(0, 270379);

const {:count 36} .str.112: ref;

axiom .str.112 == $sub.ref(0, 271439);

const {:count 22} .str.58: ref;

axiom .str.58 == $sub.ref(0, 272485);

const {:count 17} .str.59: ref;

axiom .str.59 == $sub.ref(0, 273526);

const {:count 38} .str.117: ref;

axiom .str.117 == $sub.ref(0, 274588);

const {:count 35} .str.114: ref;

axiom .str.114 == $sub.ref(0, 275647);

const {:count 36} .str.115: ref;

axiom .str.115 == $sub.ref(0, 276707);

const {:count 32} .str.116: ref;

axiom .str.116 == $sub.ref(0, 277763);

const {:count 23} .str.60: ref;

axiom .str.60 == $sub.ref(0, 278810);

const {:count 49} .str.119: ref;

axiom .str.119 == $sub.ref(0, 279883);

const {:count 18} .str.120: ref;

axiom .str.120 == $sub.ref(0, 280925);

const {:count 9} .str.121: ref;

axiom .str.121 == $sub.ref(0, 281958);

const {:count 9} .str.122: ref;

axiom .str.122 == $sub.ref(0, 282991);

const {:count 21} .str.36: ref;

axiom .str.36 == $sub.ref(0, 284036);

const nr_cpu_ids: ref;

axiom nr_cpu_ids == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 26} .str.26: ref;

axiom .str.26 == $sub.ref(0, 285086);

const .str.47: ref;

axiom .str.47 == $sub.ref(0, 286111);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 287143);

const {:count 3} .str.1.330: ref;

axiom .str.1.330 == $sub.ref(0, 288170);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 289208);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 290236);

const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 291268);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const dvb_usbv2_probe: ref;

axiom dvb_usbv2_probe == $sub.ref(0, 292300);

procedure dvb_usbv2_probe($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dvb_usbv2_probe($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 0} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const dvb_usbv2_disconnect: ref;

axiom dvb_usbv2_disconnect == $sub.ref(0, 293332);

procedure dvb_usbv2_disconnect($p0: ref);
  free requires assertsPassed;



implementation dvb_usbv2_disconnect($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 0} true;
    return;
}



const dvb_usbv2_suspend: ref;

axiom dvb_usbv2_suspend == $sub.ref(0, 294364);

procedure dvb_usbv2_suspend($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation dvb_usbv2_suspend($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3, $i1);
    goto corral_source_split_6;

  corral_source_split_6:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 4} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const dvb_usbv2_resume: ref;

axiom dvb_usbv2_resume == $sub.ref(0, 295396);

procedure dvb_usbv2_resume($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dvb_usbv2_resume($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9;

  corral_source_split_9:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 6} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const mxl111sf_frontend_attach_atsc_mh: ref;

axiom mxl111sf_frontend_attach_atsc_mh == $sub.ref(0, 296428);

procedure mxl111sf_frontend_attach_atsc_mh($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr, $M.15, $M.18, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25;



implementation mxl111sf_frontend_attach_atsc_mh($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i24;
  var $i9: i24;
  var $i10: i24;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i64;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $i20: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 7} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p2, .str.2);
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p3, .str.97);
    goto corral_source_split_16;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p4, .str.3);
    goto corral_source_split_18;

  corral_source_split_18:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p5, .str.98);
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    $i8 := $load.i24($M.5, $p7);
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    $i9 := $and.i24($i8, $sub.i24(0, 262144));
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    $i10 := $or.i24($i9, 955);
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p7, $i10);
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p11, 0);
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.6, $p12);
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i64($i13);
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    $i15 := $and.i64($i14, 1);
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 8} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 9} {:cexpr "tmp"} boogie_si_record_i64($i16);
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} $i18 := mxl111sf_lgdt3305_frontend_attach($p0, 0);
    call {:si_unique_call 12} {:cexpr "ret"} boogie_si_record_i32($i18);
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i18, 0);
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} $i21 := mxl111sf_attach_demod($p0, 1);
    call {:si_unique_call 14} {:cexpr "ret"} boogie_si_record_i32($i21);
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i21, 0);
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 15} $i23 := mxl111sf_lg2160_frontend_attach($p0, 2);
    call {:si_unique_call 16} {:cexpr "ret"} boogie_si_record_i32($i23);
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i23, 0);
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i20 := $i23;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  $bb11:
    assume $i24 == 1;
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    $i20 := $i23;
    goto $bb6;

  $bb8:
    assume $i22 == 1;
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    $i20 := $i21;
    goto $bb6;

  $bb4:
    assume $i19 == 1;
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    $i20 := $i18;
    goto $bb6;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 10} __dynamic_pr_debug.ref.ref.ref($p1, .str.98, .str.97);
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mxl111sf_attach_tuner: ref;

axiom mxl111sf_attach_tuner == $sub.ref(0, 297460);

procedure mxl111sf_attach_tuner($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr;



implementation mxl111sf_attach_tuner($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i64;
  var $i6: i64;
  var $i7: i64;
  var $i8: i64;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i24;
  var $i20: i24;
  var $i21: i24;
  var $p22: ref;
  var $p23: ref;
  var $i24: i8;
  var $i25: i64;
  var $i26: i64;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $i30: i8;
  var $i31: i32;
  var $i32: i1;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $i37: i1;
  var $i38: i32;
  var $i39: i64;
  var $p40: ref;
  var $i41: i1;
  var $p44: ref;
  var $p42: ref;
  var $i46: i64;
  var $i47: i1;
  var $i48: i64;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i64;
  var $i55: i1;
  var $p56: ref;
  var $i58: i64;
  var $i59: i1;
  var $i61: i64;
  var $p63: ref;
  var $p64: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i64;
  var $p71: ref;
  var $p72: ref;
  var $p74: ref;
  var $i75: i32;
  var $i76: i8;
  var $i77: i32;
  var $i78: i1;
  var $i33: i32;
  var $i60: i32;
  var vslice_dummy_var_5: i32;
  var vslice_dummy_var_6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 17} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2400)), $mul.ref(320, 1));
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.7, $p3);
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i64($i4);
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    $i6 := $mul.i64($i5, 2400);
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    $i7 := $add.i64($i6, 2344);
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    $i8 := $sub.i64(0, $i7);
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref($i8, 7456)), $mul.ref(7448, 1));
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.7, $p10);
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p13, .str.2);
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p14, .str.76);
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p15, .str.3);
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p16, .str.77);
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    $i19 := $load.i24($M.5, $p18);
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    $i20 := $and.i24($i19, $sub.i24(0, 262144));
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    $i21 := $or.i24($i20, 873);
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p18, $i21);
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p22, 0);
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.6, $p23);
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i64($i24);
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    $i26 := $and.i64($i25, 1);
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    call {:si_unique_call 18} $i27 := ldv__builtin_expect($i26, 0);
    call {:si_unique_call 19} {:cexpr "tmp"} boogie_si_record_i64($i27);
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p12, $mul.ref(0, 368)), $mul.ref(264, 1));
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.7, $p29);
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i32($i30);
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    $i32 := $slt.i32(0, $i31);
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i60 := 0;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    $r := $i60;
    return;

  $bb4:
    assume $i32 == 1;
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    $i33 := 0;
    goto $bb7;

  $bb7:
    call $p34, $p35, $i36, $i37, $i38, $i39, $p40, $i41, $p44, $p42, $i46, $i47, $i48, $p50, $p51, $p52, $p53, $i54, $i55, $p56, $i58, $i59, $i61, $p63, $p64, $p67, $p68, $i69, $p71, $p72, $p74, $i75, $i76, $i77, $i78, $i33, vslice_dummy_var_5, vslice_dummy_var_6 := mxl111sf_attach_tuner_loop_$bb7($p0, $p12, $p29, $p34, $p35, $i36, $i37, $i38, $i39, $p40, $i41, $p44, $p42, $i46, $i47, $i48, $p50, $p51, $p52, $p53, $i54, $i55, $p56, $i58, $i59, $i61, $p63, $p64, $p67, $p68, $i69, $p71, $p72, $p74, $i75, $i76, $i77, $i78, $i33, vslice_dummy_var_5, vslice_dummy_var_6);
    goto $bb7_last;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 21} $p34 := __symbol_get(.str.78);
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p35);
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    $i37 := $ne.i64($i36, 0);
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    $i38 := $zext.i1.i32($i37);
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    $i39 := $sext.i32.i64($i38);
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    $p40 := $i2p.i64.ref($i39);
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    $i41 := $ne.ref($p40, $0.ref);
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i41 == 1);
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 22} vslice_dummy_var_5 := __request_module.i1.ref(1, .str.79);
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 23} $p44 := __symbol_get(.str.78);
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p42 := $p44;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p42);
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    $i47 := $ne.i64($i46, 0);
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i47 == 1);
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 25} vslice_dummy_var_6 := printk.ref(.str.80);
    assume {:verifier.code 0} true;
    $p56 := $0.ref;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    $i58 := $p2i.ref.i64($p56);
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    $i59 := $eq.i64($i58, 0);
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i61 := $sext.i32.i64($i33);
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2400)), $mul.ref(2328, 1)), $mul.ref($i61, 8));
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.7, $p63);
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($add.ref($p64, $mul.ref(0, 1584)), $mul.ref(0, 1)), $mul.ref(392, 1)), $mul.ref(256, 1));
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.7, $p67);
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    $i69 := $sext.i32.i64($i33);
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2400)), $mul.ref(2328, 1)), $mul.ref($i69, 8));
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.7, $p71);
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref($p72, $mul.ref(0, 1584)), $mul.ref(0, 1)), $mul.ref(272, 1));
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p74, $p68);
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    $i75 := $add.i32($i33, 1);
    call {:si_unique_call 27} {:cexpr "i"} boogie_si_record_i32($i75);
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    $i76 := $load.i8($M.7, $p29);
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    $i77 := $zext.i8.i32($i76);
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    $i78 := $slt.i32($i75, $i77);
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i78 == 1);
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb22:
    assume $i78 == 1;
    assume {:verifier.code 0} true;
    $i33 := $i75;
    goto $bb22_dummy;

  $bb18:
    assume $i59 == 1;
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    $i60 := $sub.i32(0, 5);
    goto $bb20;

  $bb12:
    assume $i47 == 1;
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    $i48 := $sext.i32.i64($i33);
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2400)), $mul.ref(2328, 1)), $mul.ref($i48, 8));
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.7, $p50);
    call {:si_unique_call 24} $p52 := devirtbounce($p42, $p51, $p12, mxl_tuner_config);
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p52);
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    $i54 := $p2i.ref.i64($p53);
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    $i55 := $eq.i64($i54, 0);
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p56 := $p52;
    goto $bb17;

  $bb14:
    assume $i55 == 1;
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 26} __symbol_put(.str.78);
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb9:
    assume $i41 == 1;
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    $p42 := $p40;
    goto $bb11;

  $bb1:
    assume $i28 == 1;
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    call {:si_unique_call 20} __dynamic_pr_debug.ref.ref.ref($p1, .str.77, .str.76);
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb22_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_101;
}



const mxl111sf_streaming_ctrl_atsc_mh: ref;

axiom mxl111sf_streaming_ctrl_atsc_mh == $sub.ref(0, 298492);

procedure mxl111sf_streaming_ctrl_atsc_mh($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, $M.15, $M.7;



implementation mxl111sf_streaming_ctrl_atsc_mh($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i24;
  var $i10: i24;
  var $i11: i24;
  var $p12: ref;
  var $p13: ref;
  var $i14: i8;
  var $i15: i64;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $i33: i32;
  var $i25: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 28} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 29} {:cexpr "mxl111sf_streaming_ctrl_atsc_mh:arg:onoff"} boogie_si_record_i32($i1);
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p3, .str.2);
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p4, .str.95);
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p5, .str.3);
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p6, .str.96);
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    $i9 := $load.i24($M.5, $p8);
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    $i10 := $and.i24($i9, $sub.i24(0, 262144));
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    $i11 := $or.i24($i10, 1189);
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p8, $i11);
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p12, 0);
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.6, $p13);
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i64($i14);
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    $i16 := $and.i64($i15, 1);
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 30} $i17 := ldv__builtin_expect($i16, 0);
    call {:si_unique_call 31} {:cexpr "tmp"} boogie_si_record_i64($i17);
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 1584)), $mul.ref(1576, 1));
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.8, $p21);
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 0);
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i23 == 1);
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 1584)), $mul.ref(1576, 1));
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.8, $p26);
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 1);
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i28 == 1);
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 1584)), $mul.ref(1576, 1));
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.8, $p30);
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i31, 2);
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i25 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    $r := $i25;
    return;

  $bb9:
    assume $i32 == 1;
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} $i33 := mxl111sf_ep5_streaming_ctrl($p0, $i1);
    call {:si_unique_call 38} {:cexpr "tmp___2"} boogie_si_record_i32($i33);
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    $i25 := $i33;
    goto $bb6;

  $bb7:
    assume $i28 == 1;
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} $i29 := mxl111sf_ep4_streaming_ctrl($p0, $i1);
    call {:si_unique_call 36} {:cexpr "tmp___1"} boogie_si_record_i32($i29);
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    $i25 := $i29;
    goto $bb6;

  $bb4:
    assume $i23 == 1;
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} $i24 := mxl111sf_ep6_streaming_ctrl($p0, $i1);
    call {:si_unique_call 34} {:cexpr "tmp___0"} boogie_si_record_i32($i24);
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    $i25 := $i24;
    goto $bb6;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 1584)), $mul.ref(1576, 1));
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.8, $p19);
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 32} __dynamic_pr_debug.ref.ref.ref.i32.i32($p2, .str.96, .str.95, $i20, $i1);
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mxl111sf_init: ref;

axiom mxl111sf_init == $sub.ref(0, 299524);

procedure mxl111sf_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.11, $M.12, $M.7, $CurrAddr, $M.15, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6;



implementation mxl111sf_init($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $i27: i1;
  var $i29: i32;
  var $i30: i1;
  var $i32: i32;
  var $i33: i1;
  var $i34: i32;
  var $i35: i1;
  var $i36: i32;
  var $i37: i32;
  var $i38: i1;
  var $i40: i1;
  var $p42: ref;
  var $p43: ref;
  var $i44: i8;
  var $i45: i32;
  var $i46: i1;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $i53: i1;
  var $i54: i32;
  var $i55: i1;
  var $i56: i32;
  var $i57: i32;
  var $i58: i1;
  var $i60: i1;
  var $p61: ref;
  var $p62: ref;
  var $i63: i8;
  var $i64: i32;
  var $i65: i1;
  var $p66: ref;
  var $p67: ref;
  var $p69: ref;
  var $p70: ref;
  var $p68: ref;
  var vslice_dummy_var_7: i32;
  var vslice_dummy_var_8: i32;
  var vslice_dummy_var_9: i32;
  var vslice_dummy_var_10: i32;
  var vslice_dummy_var_11: i32;
  var vslice_dummy_var_12: i32;
  var vslice_dummy_var_13: i32;
  var vslice_dummy_var_14: i32;
  var vslice_dummy_var_15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} $p1 := $alloc($mul.ref(256, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} $p2 := $alloc($mul.ref(1480, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 41} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 7456)), $mul.ref(7448, 1));
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.7, $p4);
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} $i7 := mxl1x1sf_get_chip_info($p6);
    call {:si_unique_call 43} {:cexpr "___ret"} boogie_si_record_i32($i7);
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i7, 0);
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    call {:si_unique_call 44} {:cexpr "__ret___0"} boogie_si_record_i32($i9);
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i9, 0);
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i32 := $i7;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    $i33 := $slt.i32($i32, 0);
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    $i34 := $zext.i1.i32($i33);
    call {:si_unique_call 53} {:cexpr "__ret___1"} boogie_si_record_i32($i34);
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i35 == 1);
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i34, 0);
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p6, $mul.ref(0, 368)), $mul.ref(104, 1));
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 56} __mutex_init($p42, .str.65, $p3);
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p6, $mul.ref(0, 368)), $mul.ref(15, 1));
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.7, $p43);
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i44);
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    $i46 := $ugt.i32($i45, 1);
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 7456)), $mul.ref(424, 1));
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p2, $mul.ref(0, 1480)), $mul.ref(24, 1));
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p49, $p48);
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p2, $mul.ref(0, 1480)), $mul.ref(2, 1));
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    $M.12 := $store.i16($M.12, $p50, 80);
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p1);
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 58} $i52 := tveeprom_read($p2, $p51, 256);
    call {:si_unique_call 59} {:cexpr "ret"} boogie_si_record_i32($i52);
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    $i53 := $slt.i32($i52, 0);
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    $i54 := $zext.i1.i32($i53);
    call {:si_unique_call 60} {:cexpr "__ret___2"} boogie_si_record_i32($i54);
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i54, 0);
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume !($i55 == 1);
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i60 := $ne.i32($i54, 0);
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p6, $mul.ref(0, 368)), $mul.ref(28, 1));
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(160, 1));
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    $i63 := $load.i8($M.13, $p62);
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    $i64 := $zext.i8.i32($i63);
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    $i65 := $eq.i32($i64, 132);
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i65 == 1);
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p1);
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($p69, $mul.ref(128, 1));
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    $p68 := $p70;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} tveeprom_hauppauge_analog($p2, $p61, $p68);
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb47:
    assume $i65 == 1;
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p1);
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($p66, $mul.ref(160, 1));
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    $p68 := $p67;
    goto $bb49;

  $bb43:
    assume $i60 == 1;
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb37:
    assume $i55 == 1;
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    $i56 := $M.10;
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    $i57 := $and.i32($i56, 16);
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    $i58 := $ne.i32($i57, 0);
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    assume !($i58 == 1);
    goto $bb39;

  $bb40:
    assume $i58 == 1;
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 61} vslice_dummy_var_15 := printk.ref.ref.i32.i32(.str.5, .str.61, $i52, 918);
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb34:
    assume $i46 == 1;
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} vslice_dummy_var_14 := mxl111sf_config_pin_mux_modes($p6, 7);
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb31:
    assume $i40 == 1;
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} vslice_dummy_var_13 := printk.ref(.str.63);
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb25:
    assume $i35 == 1;
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    $i36 := $M.10;
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    $i37 := $and.i32($i36, 16);
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i38 == 1);
    goto $bb27;

  $bb28:
    assume $i38 == 1;
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 54} vslice_dummy_var_12 := printk.ref.ref.i32.i32(.str.5, .str.61, $i32, 906);
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb7:
    assume $i15 == 1;
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    $i16 := $M.10;
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 47} $i19 := mxl1x1sf_get_chip_info($p6);
    call {:si_unique_call 48} {:cexpr "___ret"} boogie_si_record_i32($i19);
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i19, 0);
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    $i21 := $zext.i1.i32($i20);
    call {:si_unique_call 49} {:cexpr "__ret"} boogie_si_record_i32($i21);
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i21, 0);
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i27 == 1);
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    $i29 := $M.10;
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i32 := $i19;
    goto $bb24;

  $bb21:
    assume $i30 == 1;
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} vslice_dummy_var_11 := printk.ref.ref(.str.64, .str.61);
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb18:
    assume $i27 == 1;
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 51} vslice_dummy_var_10 := printk.ref(.str.63);
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb12:
    assume $i22 == 1;
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    $i23 := $M.10;
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    $i24 := $and.i32($i23, 16);
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb14;

  $bb15:
    assume $i25 == 1;
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} vslice_dummy_var_9 := printk.ref.ref.i32.i32(.str.5, .str.61, $i19, 905);
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb9:
    assume $i17 == 1;
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} vslice_dummy_var_8 := printk.ref.ref(.str.62, .str.61);
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    $i11 := $M.10;
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 16);
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb3;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 45} vslice_dummy_var_7 := printk.ref.ref.i32.i32(.str.5, .str.61, $i7, 905);
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const mxl111sf_get_stream_config_atsc_mh: ref;

axiom mxl111sf_get_stream_config_atsc_mh == $sub.ref(0, 300556);

procedure mxl111sf_get_stream_config_atsc_mh($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr;



implementation mxl111sf_get_stream_config_atsc_mh($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i24;
  var $i11: i24;
  var $i12: i24;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 63} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p4, .str.2);
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p5, .str.107);
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p6, .str.3);
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p7, .str.90);
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    $i10 := $load.i24($M.5, $p9);
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    $i11 := $and.i24($i10, $sub.i24(0, 262144));
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    $i12 := $or.i24($i11, 1163);
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p9, $i12);
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p13, 0);
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.6, $p14);
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i64($i15);
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    $i17 := $and.i64($i16, 1);
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 64} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 65} {:cexpr "tmp"} boogie_si_record_i64($i18);
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 1584)), $mul.ref(1576, 1));
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.8, $p22);
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i24 == 1);
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 1584)), $mul.ref(1576, 1));
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.8, $p27);
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 1);
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i29 == 1);
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 1584)), $mul.ref(1576, 1));
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.8, $p32);
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 2);
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb16:
    assume $i34 == 1;
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p1, 2);
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    $i35 := $M.14;
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i36 == 1);
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 72} mxl111sf_stream_config_bulk($p2, 5);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb18:
    assume $i36 == 1;
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 71} mxl111sf_stream_config_isoc($p2, 5, 96, 200);
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb10:
    assume $i29 == 1;
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p1, 0);
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    $i30 := $M.14;
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i31 == 1);
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 70} mxl111sf_stream_config_bulk($p2, 4);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb12:
    assume $i31 == 1;
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 69} mxl111sf_stream_config_isoc($p2, 4, 96, 564);
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb4:
    assume $i24 == 1;
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p1, 0);
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    $i25 := $M.14;
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i26 == 1);
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 68} mxl111sf_stream_config_bulk($p2, 6);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i26 == 1;
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 67} mxl111sf_stream_config_isoc($p2, 6, 24, 3072);
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 1584)), $mul.ref(1576, 1));
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.8, $p20);
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 66} __dynamic_pr_debug.ref.ref.ref.i32($p3, .str.90, .str.107, $i21);
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 301588);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 73} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 74} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __dynamic_pr_debug: ref;

axiom __dynamic_pr_debug == $sub.ref(0, 302620);

procedure __dynamic_pr_debug.ref.ref.ref($p0: ref, $p1: ref, p.2: ref);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.ref($p0: ref, $p1: ref, p.2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_pr_debug.ref.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: i32)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_pr_debug.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32)
{

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_pr_debug.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32)
{

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    return;
}



const mxl111sf_stream_config_isoc: ref;

axiom mxl111sf_stream_config_isoc == $sub.ref(0, 303652);

procedure mxl111sf_stream_config_isoc($p0: ref, $i1: i8, $i2: i32, $i3: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.8, $CurrAddr;



implementation mxl111sf_stream_config_isoc($p0: ref, $i1: i8, $i2: i32, $i3: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i24;
  var $i12: i24;
  var $i13: i24;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $i21: i32;
  var $i22: i32;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 75} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 76} {:cexpr "mxl111sf_stream_config_isoc:arg:endpoint"} boogie_si_record_i8($i1);
    call {:si_unique_call 77} {:cexpr "mxl111sf_stream_config_isoc:arg:framesperurb"} boogie_si_record_i32($i2);
    call {:si_unique_call 78} {:cexpr "mxl111sf_stream_config_isoc:arg:framesize"} boogie_si_record_i32($i3);
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p5, .str.2);
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p6, .str.91);
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p7, .str.3);
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p8, .str.92);
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    $i11 := $load.i24($M.5, $p10);
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    $i12 := $and.i24($i11, $sub.i24(0, 262144));
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    $i13 := $or.i24($i12, 1022);
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p10, $i13);
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p14, 0);
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.6, $p15);
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i64($i16);
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    $i18 := $and.i64($i17, 1);
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 79} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 80} {:cexpr "tmp"} boogie_si_record_i64($i19);
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p23, 2);
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p24, 5);
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p25, $i1);
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    $M.8 := $store.i32($M.8, $p28, $i2);
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    $M.8 := $store.i32($M.8, $p31, $i3);
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    $M.8 := $store.i32($M.8, $p34, 1);
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i1);
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    $i22 := $mul.i32($i2, $i3);
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 81} __dynamic_pr_debug.ref.ref.ref.i32.i32($p4, .str.92, .str.91, $i21, $i22);
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mxl111sf_stream_config_bulk: ref;

axiom mxl111sf_stream_config_bulk == $sub.ref(0, 304684);

procedure mxl111sf_stream_config_bulk($p0: ref, $i1: i8);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.8, $CurrAddr;



implementation mxl111sf_stream_config_bulk($p0: ref, $i1: i8)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i24;
  var $i10: i24;
  var $i11: i24;
  var $p12: ref;
  var $p13: ref;
  var $i14: i8;
  var $i15: i64;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $i19: i32;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 82} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 83} {:cexpr "mxl111sf_stream_config_bulk:arg:endpoint"} boogie_si_record_i8($i1);
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p3, .str.2);
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p4, .str.93);
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p5, .str.3);
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p6, .str.94);
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    $i9 := $load.i24($M.5, $p8);
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    $i10 := $and.i24($i9, $sub.i24(0, 262144));
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    $i11 := $or.i24($i10, 1011);
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p8, $i11);
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p12, 0);
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.6, $p13);
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i64($i14);
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    $i16 := $and.i64($i15, 1);
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 84} $i17 := ldv__builtin_expect($i16, 0);
    call {:si_unique_call 85} {:cexpr "tmp"} boogie_si_record_i64($i17);
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p20, 1);
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p21, 5);
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p22, $i1);
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    $M.8 := $store.i32($M.8, $p25, 8192);
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i1);
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 86} __dynamic_pr_debug.ref.ref.ref.i32($p2, .str.94, .str.93, $i19);
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mxl1x1sf_get_chip_info: ref;

axiom mxl1x1sf_get_chip_info == $sub.ref(0, 305716);

procedure mxl1x1sf_get_chip_info($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $M.15, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation mxl1x1sf_get_chip_info($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $i20: i1;
  var $i22: i8;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $i32: i1;
  var $i33: i8;
  var $p34: ref;
  var $i35: i8;
  var $i36: i32;
  var $i37: i1;
  var $i38: i8;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $i42: i8;
  var $i43: i32;
  var $i44: i1;
  var $i45: i8;
  var $i46: i32;
  var $i47: i1;
  var $i48: i8;
  var $i49: i32;
  var $i50: i1;
  var $p51: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p52: ref;
  var $i56: i8;
  var $i57: i32;
  var $i21: i32;
  var $i11: i32;
  var vslice_dummy_var_16: i32;
  var vslice_dummy_var_17: i32;
  var vslice_dummy_var_18: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 87} $p1 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 88} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(13, 1));
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.7, $p3);
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 89} $i12 := mxl111sf_read_reg($p0, $sub.i8(0, 4), $p1);
    call {:si_unique_call 90} {:cexpr "ret"} boogie_si_record_i32($i12);
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 0);
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i13);
    call {:si_unique_call 91} {:cexpr "__ret"} boogie_si_record_i32($i14);
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i14, 0);
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.7, $p1);
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(13, 1));
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p23, $i22);
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 93} $i24 := mxl111sf_read_reg($p0, $sub.i8(0, 6), $p2);
    call {:si_unique_call 94} {:cexpr "ret"} boogie_si_record_i32($i24);
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i24, 0);
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    $i26 := $zext.i1.i32($i25);
    call {:si_unique_call 95} {:cexpr "__ret___0"} boogie_si_record_i32($i26);
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i26, 0);
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.7, $p2);
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(14, 1));
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p34, $i33);
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.7, $p1);
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i35);
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i36, 97);
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.7, $p1);
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i38);
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i39, 99);
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p41 := .str.69;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    $i42 := $load.i8($M.7, $p2);
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i32($i42);
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i43, 54);
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i45 := $load.i8($M.7, $p2);
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i32($i45);
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i46, 8);
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $i48 := $load.i8($M.7, $p2);
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i32($i48);
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i49, 24);
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(15, 1));
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p55, 0);
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    $p52 := .str.73;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    $i56 := $load.i8($M.7, $p2);
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    $i57 := $zext.i8.i32($i56);
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 97} vslice_dummy_var_18 := printk.ref.ref.ref.i32(.str.74, $p41, $p52, $i57);
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    $i21 := $i24;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    $i11 := $i21;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb46:
    assume $i50 == 1;
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(15, 1));
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p54, 3);
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    $p52 := .str.72;
    goto $bb51;

  $bb42:
    assume $i47 == 1;
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(15, 1));
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p53, 2);
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    $p52 := .str.71;
    goto $bb51;

  $bb38:
    assume $i44 == 1;
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(15, 1));
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p51, 1);
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    $p52 := .str.70;
    goto $bb51;

  $bb31:
    assume $i40 == 1;
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p41 := .str.68;
    goto $bb36;

  $bb27:
    assume $i37 == 1;
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p41 := .str.67;
    goto $bb36;

  $bb24:
    assume $i32 == 1;
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    $i21 := $i24;
    goto $bb16;

  $bb18:
    assume $i27 == 1;
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    $i28 := $M.10;
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i28, 16);
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb20;

  $bb21:
    assume $i30 == 1;
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 96} vslice_dummy_var_17 := printk.ref.ref.i32.i32(.str.5, .str.66, $i24, 197);
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb14:
    assume $i20 == 1;
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    $i21 := $i12;
    goto $bb16;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    $i16 := $M.10;
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i16, 16);
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb10;

  $bb11:
    assume $i18 == 1;
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 92} vslice_dummy_var_16 := printk.ref.ref.i32.i32(.str.5, .str.66, $i12, 192);
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(14, 1));
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.7, $p7);
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb6;
}



const printk: ref;

axiom printk == $sub.ref(0, 306748);

procedure printk.ref.ref.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 1} true;
    call {:si_unique_call 98} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 99} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.ref.i32.i32.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: ref, p.4: i32, p.5: i32, p.6: i32, p.7: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.ref.i32.i32.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: ref, p.4: i32, p.5: i32, p.6: i32, p.7: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 1} true;
    call {:si_unique_call 100} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 101} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 1} true;
    call {:si_unique_call 102} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 103} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 1} true;
    call {:si_unique_call 104} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 105} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb4:
    assume {:verifier.code 1} true;
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 1} true;
    call {:si_unique_call 106} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 107} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb5:
    assume {:verifier.code 1} true;
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 1} true;
    call {:si_unique_call 108} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 109} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.i32.i32.ref.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: ref, p.6: i32, p.7: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.i32.i32.ref.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: ref, p.6: i32, p.7: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb6:
    assume {:verifier.code 1} true;
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 1} true;
    call {:si_unique_call 110} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 111} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref($p0: ref, p.1: ref, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref($p0: ref, p.1: ref, p.2: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb7:
    assume {:verifier.code 1} true;
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 1} true;
    call {:si_unique_call 112} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 113} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.i32.i32.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32, p.6: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.i32.i32.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32, p.6: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 1} true;
    call {:si_unique_call 114} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 115} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb9:
    assume {:verifier.code 1} true;
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 1} true;
    call {:si_unique_call 116} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 117} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.i32($p0: ref, p.1: i32, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i32($p0: ref, p.1: i32, p.2: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb10:
    assume {:verifier.code 1} true;
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 1} true;
    call {:si_unique_call 118} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 119} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb11:
    assume {:verifier.code 1} true;
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 1} true;
    call {:si_unique_call 120} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 121} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __mutex_init: ref;

axiom __mutex_init == $sub.ref(0, 307780);

procedure __mutex_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __mutex_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    return;
}



const mxl111sf_config_pin_mux_modes: ref;

axiom mxl111sf_config_pin_mux_modes == $sub.ref(0, 308812);

procedure mxl111sf_config_pin_mux_modes($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $M.15, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation mxl111sf_config_pin_mux_modes($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $i21: i1;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $i31: i1;
  var $i32: i32;
  var $i33: i1;
  var $i34: i32;
  var $i35: i1;
  var $i36: i32;
  var $i37: i32;
  var $i38: i1;
  var $i40: i1;
  var $i41: i32;
  var $i42: i1;
  var $i43: i32;
  var $i44: i1;
  var $i45: i32;
  var $i46: i32;
  var $i47: i1;
  var $i49: i1;
  var $i50: i32;
  var $i51: i1;
  var $i52: i32;
  var $i53: i1;
  var $i54: i32;
  var $i55: i32;
  var $i56: i1;
  var $i58: i1;
  var $i59: i32;
  var $i60: i1;
  var $i61: i32;
  var $i62: i1;
  var $i63: i32;
  var $i64: i32;
  var $i65: i1;
  var $i67: i1;
  var $i68: i32;
  var $i69: i1;
  var $i70: i32;
  var $i71: i1;
  var $i72: i32;
  var $i73: i32;
  var $i74: i1;
  var $i76: i1;
  var $i77: i32;
  var $i78: i1;
  var $i79: i32;
  var $i80: i1;
  var $i81: i32;
  var $i82: i32;
  var $i83: i1;
  var $i85: i1;
  var $i86: i1;
  var $i87: i1;
  var $i88: i1;
  var $i89: i1;
  var $i90: i1;
  var $i91: i1;
  var $i92: i1;
  var $i93: i1;
  var $i94: i1;
  var $i95: i1;
  var $i96: i8;
  var $i97: i32;
  var $i98: i32;
  var $i99: i8;
  var $i100: i8;
  var $i101: i32;
  var $i102: i32;
  var $i103: i8;
  var $i104: i8;
  var $i105: i32;
  var $i106: i32;
  var $i107: i8;
  var $i108: i8;
  var $i109: i32;
  var $i110: i32;
  var $i111: i8;
  var $i112: i8;
  var $i113: i32;
  var $i114: i32;
  var $i115: i8;
  var $i116: i8;
  var $i117: i32;
  var $i118: i32;
  var $i119: i8;
  var $i120: i8;
  var $i121: i32;
  var $i122: i32;
  var $i123: i8;
  var $i124: i8;
  var $i125: i32;
  var $i126: i32;
  var $i127: i8;
  var $i128: i8;
  var $i129: i32;
  var $i130: i32;
  var $i131: i8;
  var $i132: i8;
  var $i133: i32;
  var $i134: i32;
  var $i135: i8;
  var $i136: i8;
  var $i137: i32;
  var $i138: i32;
  var $i139: i8;
  var $i140: i8;
  var $i141: i32;
  var $i142: i32;
  var $i143: i8;
  var $i144: i8;
  var $i145: i32;
  var $i146: i32;
  var $i147: i8;
  var $i148: i8;
  var $i149: i32;
  var $i150: i32;
  var $i151: i8;
  var $i152: i8;
  var $i153: i32;
  var $i154: i32;
  var $i155: i8;
  var $i156: i8;
  var $i157: i32;
  var $i158: i32;
  var $i159: i8;
  var $i160: i8;
  var $i161: i32;
  var $i162: i32;
  var $i163: i8;
  var $i164: i8;
  var $i165: i32;
  var $i166: i32;
  var $i167: i8;
  var $i168: i8;
  var $i169: i32;
  var $i170: i32;
  var $i171: i8;
  var $i172: i8;
  var $i173: i32;
  var $i174: i32;
  var $i175: i8;
  var $i176: i8;
  var $i177: i32;
  var $i178: i32;
  var $i179: i8;
  var $i180: i8;
  var $i181: i32;
  var $i182: i32;
  var $i183: i8;
  var $i184: i8;
  var $i185: i32;
  var $i186: i32;
  var $i187: i8;
  var $i188: i8;
  var $i189: i32;
  var $i190: i32;
  var $i191: i8;
  var $i192: i8;
  var $i193: i32;
  var $i194: i32;
  var $i195: i8;
  var $i196: i8;
  var $i197: i32;
  var $i198: i32;
  var $i199: i8;
  var $i200: i8;
  var $i201: i32;
  var $i202: i32;
  var $i203: i8;
  var $i204: i8;
  var $i205: i32;
  var $i206: i32;
  var $i207: i8;
  var $i208: i8;
  var $i209: i32;
  var $i210: i32;
  var $i211: i8;
  var $i212: i8;
  var $i213: i32;
  var $i214: i32;
  var $i215: i8;
  var $i216: i8;
  var $i217: i32;
  var $i218: i32;
  var $i219: i8;
  var $i220: i8;
  var $i221: i32;
  var $i222: i32;
  var $i223: i8;
  var $i224: i8;
  var $i225: i32;
  var $i226: i32;
  var $i227: i8;
  var $i228: i8;
  var $i229: i32;
  var $i230: i32;
  var $i231: i8;
  var $i232: i8;
  var $i233: i32;
  var $i234: i32;
  var $i235: i8;
  var $i236: i8;
  var $i237: i32;
  var $i238: i32;
  var $i239: i8;
  var $i240: i8;
  var $i241: i32;
  var $i242: i32;
  var $i243: i8;
  var $i244: i8;
  var $i245: i32;
  var $i246: i32;
  var $i247: i8;
  var $i248: i8;
  var $i249: i32;
  var $i250: i32;
  var $i251: i8;
  var $i252: i8;
  var $i253: i32;
  var $i254: i32;
  var $i255: i8;
  var $i256: i8;
  var $i257: i32;
  var $i258: i32;
  var $i259: i8;
  var $i260: i8;
  var $i261: i32;
  var $i262: i32;
  var $i263: i8;
  var $i264: i8;
  var $i265: i32;
  var $i266: i32;
  var $i267: i8;
  var $i268: i8;
  var $i269: i32;
  var $i270: i32;
  var $i271: i8;
  var $i272: i8;
  var $i273: i32;
  var $i274: i32;
  var $i275: i8;
  var $i276: i8;
  var $i277: i32;
  var $i278: i32;
  var $i279: i8;
  var $i280: i8;
  var $i281: i32;
  var $i282: i32;
  var $i283: i8;
  var $i284: i8;
  var $i285: i32;
  var $i286: i32;
  var $i287: i8;
  var $i288: i8;
  var $i289: i32;
  var $i290: i32;
  var $i291: i8;
  var $i292: i8;
  var $i293: i32;
  var $i294: i32;
  var $i295: i8;
  var $i296: i8;
  var $i297: i32;
  var $i298: i32;
  var $i299: i8;
  var $i300: i8;
  var $i301: i32;
  var $i302: i32;
  var $i303: i8;
  var $i304: i8;
  var $i305: i32;
  var $i306: i32;
  var $i307: i8;
  var $i308: i8;
  var $i309: i32;
  var $i310: i32;
  var $i311: i8;
  var $i312: i8;
  var $i313: i32;
  var $i314: i32;
  var $i315: i8;
  var $i316: i8;
  var $i317: i32;
  var $i318: i32;
  var $i319: i8;
  var $i320: i8;
  var $i321: i32;
  var $i322: i32;
  var $i323: i8;
  var $i324: i8;
  var $i325: i32;
  var $i326: i32;
  var $i327: i8;
  var $i328: i8;
  var $i329: i32;
  var $i330: i32;
  var $i331: i8;
  var $i332: i8;
  var $i333: i32;
  var $i334: i32;
  var $i335: i8;
  var $i336: i8;
  var $i337: i32;
  var $i338: i32;
  var $i339: i8;
  var $i340: i8;
  var $i341: i32;
  var $i342: i32;
  var $i343: i8;
  var $i344: i8;
  var $i345: i32;
  var $i346: i32;
  var $i347: i8;
  var $i348: i8;
  var $i349: i32;
  var $i350: i32;
  var $i351: i8;
  var $i352: i8;
  var $i353: i32;
  var $i354: i32;
  var $i355: i8;
  var $i356: i8;
  var $i357: i32;
  var $i358: i32;
  var $i359: i8;
  var $i360: i8;
  var $i361: i32;
  var $i362: i32;
  var $i363: i8;
  var $i364: i8;
  var $i365: i32;
  var $i366: i32;
  var $i367: i8;
  var $i368: i8;
  var $i369: i32;
  var $i370: i32;
  var $i371: i8;
  var $i372: i8;
  var $i373: i32;
  var $i374: i32;
  var $i375: i8;
  var $i376: i8;
  var $i377: i32;
  var $i378: i32;
  var $i379: i8;
  var $i380: i8;
  var $i381: i32;
  var $i382: i32;
  var $i383: i8;
  var $i384: i8;
  var $i385: i32;
  var $i386: i32;
  var $i387: i8;
  var $i388: i8;
  var $i389: i32;
  var $i390: i32;
  var $i391: i8;
  var $i392: i8;
  var $i393: i32;
  var $i394: i32;
  var $i395: i8;
  var $i396: i8;
  var $i397: i32;
  var $i398: i32;
  var $i399: i8;
  var $i400: i8;
  var $i401: i32;
  var $i402: i32;
  var $i403: i8;
  var $i404: i8;
  var $i405: i32;
  var $i406: i32;
  var $i407: i8;
  var $i408: i8;
  var $i409: i32;
  var $i410: i32;
  var $i411: i8;
  var $i412: i8;
  var $i413: i32;
  var $i414: i32;
  var $i415: i8;
  var $i416: i8;
  var $i417: i32;
  var $i418: i32;
  var $i419: i8;
  var $i420: i8;
  var $i421: i32;
  var $i422: i32;
  var $i423: i8;
  var $i424: i8;
  var $i425: i32;
  var $i426: i32;
  var $i427: i8;
  var $i428: i8;
  var $i429: i32;
  var $i430: i32;
  var $i431: i8;
  var $i432: i8;
  var $i433: i32;
  var $i434: i32;
  var $i435: i8;
  var $i436: i8;
  var $i437: i32;
  var $i438: i32;
  var $i439: i8;
  var $i440: i8;
  var $i441: i32;
  var $i442: i32;
  var $i443: i8;
  var $i444: i8;
  var $i445: i32;
  var $i446: i32;
  var $i447: i8;
  var $i448: i8;
  var $i449: i32;
  var $i450: i32;
  var $i451: i8;
  var $i452: i8;
  var $i453: i32;
  var $i454: i32;
  var $i455: i8;
  var $i456: i8;
  var $i457: i32;
  var $i458: i32;
  var $i459: i8;
  var $i460: i8;
  var $i461: i32;
  var $i462: i32;
  var $i463: i8;
  var $i464: i8;
  var $i465: i32;
  var $i466: i32;
  var $i467: i8;
  var $i468: i8;
  var $i469: i32;
  var $i470: i32;
  var $i471: i8;
  var $i472: i8;
  var $i473: i32;
  var $i474: i32;
  var $i475: i8;
  var $i476: i8;
  var $i477: i32;
  var $i478: i32;
  var $i479: i8;
  var $i480: i8;
  var $i481: i32;
  var $i482: i32;
  var $i483: i8;
  var $i484: i8;
  var $i485: i32;
  var $i486: i32;
  var $i487: i8;
  var $i488: i8;
  var $i489: i32;
  var $i490: i32;
  var $i491: i8;
  var $i492: i8;
  var $i493: i32;
  var $i494: i32;
  var $i495: i8;
  var $i496: i8;
  var $i497: i32;
  var $i498: i32;
  var $i499: i8;
  var $i500: i8;
  var $i501: i32;
  var $i502: i32;
  var $i503: i8;
  var $i504: i8;
  var $i505: i32;
  var $i506: i32;
  var $i507: i8;
  var $i508: i8;
  var $i509: i32;
  var $i510: i32;
  var $i511: i8;
  var $i512: i8;
  var $i513: i32;
  var $i514: i32;
  var $i515: i8;
  var $i516: i8;
  var $i517: i32;
  var $i518: i32;
  var $i519: i8;
  var $i520: i8;
  var $i521: i32;
  var $i522: i32;
  var $i523: i8;
  var $i524: i8;
  var $i525: i32;
  var $i526: i32;
  var $i527: i8;
  var $i528: i8;
  var $i529: i32;
  var $i530: i32;
  var $i531: i8;
  var $i532: i8;
  var $i533: i32;
  var $i534: i32;
  var $i535: i8;
  var $i536: i8;
  var $i537: i32;
  var $i538: i32;
  var $i539: i8;
  var $i540: i8;
  var $i541: i32;
  var $i542: i32;
  var $i543: i8;
  var $i544: i8;
  var $i545: i32;
  var $i546: i32;
  var $i547: i8;
  var $i548: i8;
  var $i549: i32;
  var $i550: i32;
  var $i551: i8;
  var $i552: i8;
  var $i553: i32;
  var $i554: i32;
  var $i555: i8;
  var $i556: i8;
  var $i557: i32;
  var $i558: i32;
  var $i559: i8;
  var $i560: i8;
  var $i561: i32;
  var $i562: i32;
  var $i563: i8;
  var $i564: i8;
  var $i565: i32;
  var $i566: i32;
  var $i567: i8;
  var $i568: i8;
  var $i569: i32;
  var $i570: i32;
  var $i571: i8;
  var $i572: i8;
  var $i573: i32;
  var $i574: i32;
  var $i575: i8;
  var $i576: i8;
  var $i577: i32;
  var $i578: i32;
  var $i579: i8;
  var $i580: i8;
  var $i581: i32;
  var $i582: i32;
  var $i583: i8;
  var $i584: i8;
  var $i585: i32;
  var $i586: i32;
  var $i587: i8;
  var $i588: i8;
  var $i589: i32;
  var $i590: i32;
  var $i591: i8;
  var $i592: i8;
  var $i593: i32;
  var $i594: i32;
  var $i595: i8;
  var $i596: i8;
  var $i597: i32;
  var $i598: i32;
  var $i599: i8;
  var $i600: i8;
  var $i601: i32;
  var $i602: i32;
  var $i603: i8;
  var $i604: i8;
  var $i605: i32;
  var $i606: i32;
  var $i607: i8;
  var $i608: i8;
  var $i609: i32;
  var $i610: i32;
  var $i611: i8;
  var $i612: i8;
  var $i613: i32;
  var $i614: i32;
  var $i615: i8;
  var $i616: i8;
  var $i617: i32;
  var $i618: i8;
  var $i619: i32;
  var $i620: i1;
  var $i621: i32;
  var $i622: i1;
  var $i623: i32;
  var $i624: i32;
  var $i625: i1;
  var $i627: i1;
  var $i628: i8;
  var $i629: i32;
  var $i630: i8;
  var $i631: i32;
  var $i632: i1;
  var $i633: i32;
  var $i634: i1;
  var $i635: i32;
  var $i636: i32;
  var $i637: i1;
  var $i639: i1;
  var $i640: i8;
  var $i641: i32;
  var $i642: i8;
  var $i643: i32;
  var $i644: i1;
  var $i645: i32;
  var $i646: i1;
  var $i647: i32;
  var $i648: i32;
  var $i649: i1;
  var $i651: i1;
  var $i652: i8;
  var $i653: i32;
  var $i654: i8;
  var $i655: i32;
  var $i656: i1;
  var $i657: i32;
  var $i658: i1;
  var $i659: i32;
  var $i660: i32;
  var $i661: i1;
  var $i663: i1;
  var $i664: i8;
  var $i665: i32;
  var $i666: i8;
  var $i667: i32;
  var $i668: i1;
  var $i669: i32;
  var $i670: i1;
  var $i671: i32;
  var $i672: i32;
  var $i673: i1;
  var $i675: i1;
  var $i676: i8;
  var $i677: i32;
  var $i678: i8;
  var $i679: i32;
  var $i680: i1;
  var $i681: i32;
  var $i682: i1;
  var $i683: i32;
  var $i684: i32;
  var $i685: i1;
  var $i687: i1;
  var $i688: i8;
  var $i689: i32;
  var $i690: i8;
  var $i691: i32;
  var $i692: i1;
  var $i693: i32;
  var $i694: i1;
  var $i695: i32;
  var $i696: i32;
  var $i697: i1;
  var $i699: i1;
  var $i700: i8;
  var $i701: i32;
  var $i702: i8;
  var $i703: i32;
  var $i704: i1;
  var $i705: i32;
  var $i706: i1;
  var $i707: i32;
  var $i708: i32;
  var $i709: i1;
  var $i711: i1;
  var $i22: i32;
  var vslice_dummy_var_19: i32;
  var vslice_dummy_var_20: i32;
  var vslice_dummy_var_21: i32;
  var vslice_dummy_var_22: i32;
  var vslice_dummy_var_23: i32;
  var vslice_dummy_var_24: i32;
  var vslice_dummy_var_25: i32;
  var vslice_dummy_var_26: i32;
  var vslice_dummy_var_27: i32;
  var vslice_dummy_var_28: i32;
  var vslice_dummy_var_29: i32;
  var vslice_dummy_var_30: i32;
  var vslice_dummy_var_31: i32;
  var vslice_dummy_var_32: i32;
  var vslice_dummy_var_33: i32;
  var vslice_dummy_var_34: i32;
  var vslice_dummy_var_35: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 122} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 123} $p3 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 124} $p4 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 125} $p5 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 126} $p6 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 127} $p7 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 128} $p8 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 129} $p9 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 130} {:cexpr "mxl111sf_config_pin_mux_modes:arg:pin_mux_config"} boogie_si_record_i32($i1);
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    $i10 := $M.10;
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 132} $i13 := mxl111sf_read_reg($p0, 23, $p4);
    call {:si_unique_call 133} {:cexpr "ret"} boogie_si_record_i32($i13);
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i13, 0);
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i32($i14);
    call {:si_unique_call 134} {:cexpr "__ret"} boogie_si_record_i32($i15);
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i15, 0);
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 136} $i23 := mxl111sf_read_reg($p0, 24, $p5);
    call {:si_unique_call 137} {:cexpr "ret"} boogie_si_record_i32($i23);
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i23, 0);
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    $i25 := $zext.i1.i32($i24);
    call {:si_unique_call 138} {:cexpr "__ret___0"} boogie_si_record_i32($i25);
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i25, 0);
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 140} $i32 := mxl111sf_read_reg($p0, 18, $p2);
    call {:si_unique_call 141} {:cexpr "ret"} boogie_si_record_i32($i32);
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    $i33 := $slt.i32($i32, 0);
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    $i34 := $zext.i1.i32($i33);
    call {:si_unique_call 142} {:cexpr "__ret___1"} boogie_si_record_i32($i34);
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i35 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i34, 0);
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 144} $i41 := mxl111sf_read_reg($p0, 21, $p3);
    call {:si_unique_call 145} {:cexpr "ret"} boogie_si_record_i32($i41);
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $i42 := $slt.i32($i41, 0);
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    $i43 := $zext.i1.i32($i42);
    call {:si_unique_call 146} {:cexpr "__ret___2"} boogie_si_record_i32($i43);
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 0);
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i49 := $ne.i32($i43, 0);
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 148} $i50 := mxl111sf_read_reg($p0, $sub.i8(0, 126), $p7);
    call {:si_unique_call 149} {:cexpr "ret"} boogie_si_record_i32($i50);
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    $i51 := $slt.i32($i50, 0);
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    $i52 := $zext.i1.i32($i51);
    call {:si_unique_call 150} {:cexpr "__ret___3"} boogie_si_record_i32($i52);
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    assume !($i53 == 1);
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $i58 := $ne.i32($i52, 0);
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 152} $i59 := mxl111sf_read_reg($p0, $sub.i8(0, 124), $p8);
    call {:si_unique_call 153} {:cexpr "ret"} boogie_si_record_i32($i59);
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    $i60 := $slt.i32($i59, 0);
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    $i61 := $zext.i1.i32($i60);
    call {:si_unique_call 154} {:cexpr "__ret___4"} boogie_si_record_i32($i61);
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    $i62 := $ne.i32($i61, 0);
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb50, $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    assume !($i62 == 1);
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $i67 := $ne.i32($i61, 0);
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    assume {:branchcond $i67} true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} $i68 := mxl111sf_read_reg($p0, $sub.i8(0, 119), $p9);
    call {:si_unique_call 157} {:cexpr "ret"} boogie_si_record_i32($i68);
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    $i69 := $slt.i32($i68, 0);
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    $i70 := $zext.i1.i32($i69);
    call {:si_unique_call 158} {:cexpr "__ret___5"} boogie_si_record_i32($i70);
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    $i71 := $ne.i32($i70, 0);
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    assume {:branchcond $i71} true;
    goto $bb59, $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    assume !($i71 == 1);
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $i76 := $ne.i32($i70, 0);
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    assume {:branchcond $i76} true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} $i77 := mxl111sf_read_reg($p0, 61, $p6);
    call {:si_unique_call 161} {:cexpr "ret"} boogie_si_record_i32($i77);
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    $i78 := $slt.i32($i77, 0);
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    $i79 := $zext.i1.i32($i78);
    call {:si_unique_call 162} {:cexpr "__ret___6"} boogie_si_record_i32($i79);
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    $i80 := $ne.i32($i79, 0);
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    assume {:branchcond $i80} true;
    goto $bb68, $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    assume !($i80 == 1);
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $i85 := $ne.i32($i79, 0);
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    assume {:branchcond $i85} true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $i86 := $eq.i32($i1, 1);
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    assume {:branchcond $i86} true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $i87 := $eq.i32($i1, 2);
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    assume {:branchcond $i87} true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    $i88 := $eq.i32($i1, 3);
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    assume {:branchcond $i88} true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    $i89 := $eq.i32($i1, 4);
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    $i90 := $eq.i32($i1, 5);
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    assume {:branchcond $i90} true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    $i91 := $eq.i32($i1, 7);
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    assume {:branchcond $i91} true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    $i92 := $eq.i32($i1, 6);
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    assume {:branchcond $i92} true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    $i93 := $eq.i32($i1, 8);
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    assume {:branchcond $i93} true;
    goto $bb105, $bb106;

  $bb106:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    $i94 := $eq.i32($i1, 9);
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    assume {:branchcond $i94} true;
    goto $bb109, $bb110;

  $bb110:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    $i95 := $eq.i32($i1, 0);
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    assume {:branchcond $i95} true;
    goto $bb113, $bb114;

  $bb114:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    $i564 := $load.i8($M.7, $p4);
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    $i565 := $zext.i8.i32($i564);
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    $i566 := $or.i32($i565, 64);
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    $i567 := $trunc.i32.i8($i566);
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p4, $i567);
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    $i568 := $load.i8($M.7, $p5);
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $i569 := $zext.i8.i32($i568);
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    $i570 := $and.i32($i569, 254);
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    $i571 := $trunc.i32.i8($i570);
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p5, $i571);
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    $i572 := $load.i8($M.7, $p5);
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    $i573 := $zext.i8.i32($i572);
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    $i574 := $and.i32($i573, 253);
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    $i575 := $trunc.i32.i8($i574);
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p5, $i575);
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    $i576 := $load.i8($M.7, $p6);
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    $i577 := $zext.i8.i32($i576);
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    $i578 := $and.i32($i577, 127);
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    $i579 := $trunc.i32.i8($i578);
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p6, $i579);
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    $i580 := $load.i8($M.7, $p2);
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    $i581 := $zext.i8.i32($i580);
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    $i582 := $and.i32($i581, 251);
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    $i583 := $trunc.i32.i8($i582);
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p2, $i583);
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    $i584 := $load.i8($M.7, $p3);
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    $i585 := $zext.i8.i32($i584);
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    $i586 := $and.i32($i585, 191);
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    $i587 := $trunc.i32.i8($i586);
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p3, $i587);
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    $i588 := $load.i8($M.7, $p6);
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    $i589 := $zext.i8.i32($i588);
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    $i590 := $and.i32($i589, 239);
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    $i591 := $trunc.i32.i8($i590);
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p6, $i591);
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    $i592 := $load.i8($M.7, $p7);
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    $i593 := $zext.i8.i32($i592);
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    $i594 := $and.i32($i593, 239);
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    $i595 := $trunc.i32.i8($i594);
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p7, $i595);
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    $i596 := $load.i8($M.7, $p7);
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    $i597 := $zext.i8.i32($i596);
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    $i598 := $and.i32($i597, 127);
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    $i599 := $trunc.i32.i8($i598);
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p7, $i599);
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    $i600 := $load.i8($M.7, $p7);
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    $i601 := $zext.i8.i32($i600);
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    $i602 := $and.i32($i601, 191);
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    $i603 := $trunc.i32.i8($i602);
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p7, $i603);
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    $i604 := $load.i8($M.7, $p7);
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    $i605 := $zext.i8.i32($i604);
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    $i606 := $and.i32($i605, 223);
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    $i607 := $trunc.i32.i8($i606);
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p7, $i607);
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    $i608 := $load.i8($M.7, $p8);
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    $i609 := $zext.i8.i32($i608);
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    $i610 := $and.i32($i609, 15);
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    $i611 := $trunc.i32.i8($i610);
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p8, $i611);
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    $i612 := $load.i8($M.7, $p9);
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    $i613 := $zext.i8.i32($i612);
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    $i614 := $and.i32($i613, 15);
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    $i615 := $trunc.i32.i8($i614);
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p9, $i615);
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    $i616 := $load.i8($M.7, $p4);
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    $i617 := $zext.i8.i32($i616);
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    $i618 := $trunc.i32.i8($i617);
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 164} $i619 := mxl111sf_write_reg($p0, 23, $i618);
    call {:si_unique_call 165} {:cexpr "ret"} boogie_si_record_i32($i619);
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    $i620 := $slt.i32($i619, 0);
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    $i621 := $zext.i1.i32($i620);
    call {:si_unique_call 166} {:cexpr "__ret___7"} boogie_si_record_i32($i621);
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    $i622 := $ne.i32($i621, 0);
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    assume {:branchcond $i622} true;
    goto $bb120, $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    assume !($i622 == 1);
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    $i627 := $ne.i32($i621, 0);
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    assume {:branchcond $i627} true;
    goto $bb126, $bb127;

  $bb127:
    assume !($i627 == 1);
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    $i628 := $load.i8($M.7, $p5);
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    $i629 := $zext.i8.i32($i628);
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    $i630 := $trunc.i32.i8($i629);
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} $i631 := mxl111sf_write_reg($p0, 24, $i630);
    call {:si_unique_call 169} {:cexpr "ret"} boogie_si_record_i32($i631);
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    $i632 := $slt.i32($i631, 0);
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    $i633 := $zext.i1.i32($i632);
    call {:si_unique_call 170} {:cexpr "__ret___8"} boogie_si_record_i32($i633);
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    $i634 := $ne.i32($i633, 0);
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    assume {:branchcond $i634} true;
    goto $bb129, $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    assume !($i634 == 1);
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    $i639 := $ne.i32($i633, 0);
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    assume {:branchcond $i639} true;
    goto $bb135, $bb136;

  $bb136:
    assume !($i639 == 1);
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    $i640 := $load.i8($M.7, $p2);
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    $i641 := $zext.i8.i32($i640);
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    $i642 := $trunc.i32.i8($i641);
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 172} $i643 := mxl111sf_write_reg($p0, 18, $i642);
    call {:si_unique_call 173} {:cexpr "ret"} boogie_si_record_i32($i643);
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    $i644 := $slt.i32($i643, 0);
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    $i645 := $zext.i1.i32($i644);
    call {:si_unique_call 174} {:cexpr "__ret___9"} boogie_si_record_i32($i645);
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    $i646 := $ne.i32($i645, 0);
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    assume {:branchcond $i646} true;
    goto $bb138, $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    assume !($i646 == 1);
    goto $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    $i651 := $ne.i32($i645, 0);
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    assume {:branchcond $i651} true;
    goto $bb144, $bb145;

  $bb145:
    assume !($i651 == 1);
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    $i652 := $load.i8($M.7, $p3);
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    $i653 := $zext.i8.i32($i652);
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    $i654 := $trunc.i32.i8($i653);
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 176} $i655 := mxl111sf_write_reg($p0, 21, $i654);
    call {:si_unique_call 177} {:cexpr "ret"} boogie_si_record_i32($i655);
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    $i656 := $slt.i32($i655, 0);
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    $i657 := $zext.i1.i32($i656);
    call {:si_unique_call 178} {:cexpr "__ret___10"} boogie_si_record_i32($i657);
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    $i658 := $ne.i32($i657, 0);
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    assume {:branchcond $i658} true;
    goto $bb147, $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    assume !($i658 == 1);
    goto $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    $i663 := $ne.i32($i657, 0);
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    assume {:branchcond $i663} true;
    goto $bb153, $bb154;

  $bb154:
    assume !($i663 == 1);
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb155:
    assume {:verifier.code 0} true;
    $i664 := $load.i8($M.7, $p7);
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    $i665 := $zext.i8.i32($i664);
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    $i666 := $trunc.i32.i8($i665);
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 180} $i667 := mxl111sf_write_reg($p0, $sub.i8(0, 126), $i666);
    call {:si_unique_call 181} {:cexpr "ret"} boogie_si_record_i32($i667);
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    $i668 := $slt.i32($i667, 0);
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    $i669 := $zext.i1.i32($i668);
    call {:si_unique_call 182} {:cexpr "__ret___11"} boogie_si_record_i32($i669);
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    $i670 := $ne.i32($i669, 0);
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    assume {:branchcond $i670} true;
    goto $bb156, $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    assume !($i670 == 1);
    goto $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb161:
    assume {:verifier.code 0} true;
    $i675 := $ne.i32($i669, 0);
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    assume {:branchcond $i675} true;
    goto $bb162, $bb163;

  $bb163:
    assume !($i675 == 1);
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    $i676 := $load.i8($M.7, $p8);
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    $i677 := $zext.i8.i32($i676);
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    $i678 := $trunc.i32.i8($i677);
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 184} $i679 := mxl111sf_write_reg($p0, $sub.i8(0, 124), $i678);
    call {:si_unique_call 185} {:cexpr "ret"} boogie_si_record_i32($i679);
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    $i680 := $slt.i32($i679, 0);
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    $i681 := $zext.i1.i32($i680);
    call {:si_unique_call 186} {:cexpr "__ret___12"} boogie_si_record_i32($i681);
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    $i682 := $ne.i32($i681, 0);
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    assume {:branchcond $i682} true;
    goto $bb165, $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    assume !($i682 == 1);
    goto $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb170:
    assume {:verifier.code 0} true;
    $i687 := $ne.i32($i681, 0);
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    assume {:branchcond $i687} true;
    goto $bb171, $bb172;

  $bb172:
    assume !($i687 == 1);
    assume {:verifier.code 0} true;
    goto $bb173;

  $bb173:
    assume {:verifier.code 0} true;
    $i688 := $load.i8($M.7, $p9);
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    $i689 := $zext.i8.i32($i688);
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    $i690 := $trunc.i32.i8($i689);
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} $i691 := mxl111sf_write_reg($p0, $sub.i8(0, 119), $i690);
    call {:si_unique_call 189} {:cexpr "ret"} boogie_si_record_i32($i691);
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    $i692 := $slt.i32($i691, 0);
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    $i693 := $zext.i1.i32($i692);
    call {:si_unique_call 190} {:cexpr "__ret___13"} boogie_si_record_i32($i693);
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    $i694 := $ne.i32($i693, 0);
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    assume {:branchcond $i694} true;
    goto $bb174, $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    assume !($i694 == 1);
    goto $bb176;

  $bb176:
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb179:
    assume {:verifier.code 0} true;
    $i699 := $ne.i32($i693, 0);
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    assume {:branchcond $i699} true;
    goto $bb180, $bb181;

  $bb181:
    assume !($i699 == 1);
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb182:
    assume {:verifier.code 0} true;
    $i700 := $load.i8($M.7, $p6);
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    $i701 := $zext.i8.i32($i700);
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    $i702 := $trunc.i32.i8($i701);
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 192} $i703 := mxl111sf_write_reg($p0, 61, $i702);
    call {:si_unique_call 193} {:cexpr "ret"} boogie_si_record_i32($i703);
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    $i704 := $slt.i32($i703, 0);
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    $i705 := $zext.i1.i32($i704);
    call {:si_unique_call 194} {:cexpr "__ret___14"} boogie_si_record_i32($i705);
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    $i706 := $ne.i32($i705, 0);
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    assume {:branchcond $i706} true;
    goto $bb183, $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    assume !($i706 == 1);
    goto $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    $i711 := $ne.i32($i705, 0);
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    assume {:branchcond $i711} true;
    goto $bb189, $bb190;

  $bb190:
    assume !($i711 == 1);
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb191:
    assume {:verifier.code 0} true;
    $i22 := $i703;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    $r := $i22;
    return;

  $bb189:
    assume $i711 == 1;
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb183:
    assume $i706 == 1;
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    $i707 := $M.10;
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    $i708 := $and.i32($i707, 16);
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    $i709 := $ne.i32($i708, 0);
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    assume {:branchcond $i709} true;
    goto $bb186, $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    assume !($i709 == 1);
    goto $bb185;

  $bb186:
    assume $i709 == 1;
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 195} vslice_dummy_var_35 := printk.ref.ref.i32.i32(.str.5, .str.41, $i703, 553);
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb180:
    assume $i699 == 1;
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    $i22 := $i691;
    goto $bb12;

  $bb174:
    assume $i694 == 1;
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    $i695 := $M.10;
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    $i696 := $and.i32($i695, 16);
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    $i697 := $ne.i32($i696, 0);
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    assume {:branchcond $i697} true;
    goto $bb177, $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    assume !($i697 == 1);
    goto $bb176;

  $bb177:
    assume $i697 == 1;
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} vslice_dummy_var_34 := printk.ref.ref.i32.i32(.str.5, .str.41, $i691, 550);
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb171:
    assume $i687 == 1;
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    $i22 := $i679;
    goto $bb12;

  $bb165:
    assume $i682 == 1;
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    $i683 := $M.10;
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    $i684 := $and.i32($i683, 16);
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    $i685 := $ne.i32($i684, 0);
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    assume {:branchcond $i685} true;
    goto $bb168, $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    assume !($i685 == 1);
    goto $bb167;

  $bb168:
    assume $i685 == 1;
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 187} vslice_dummy_var_33 := printk.ref.ref.i32.i32(.str.5, .str.41, $i679, 547);
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb162:
    assume $i675 == 1;
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    $i22 := $i667;
    goto $bb12;

  $bb156:
    assume $i670 == 1;
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    $i671 := $M.10;
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    $i672 := $and.i32($i671, 16);
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    $i673 := $ne.i32($i672, 0);
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    assume {:branchcond $i673} true;
    goto $bb159, $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    assume !($i673 == 1);
    goto $bb158;

  $bb159:
    assume $i673 == 1;
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 183} vslice_dummy_var_32 := printk.ref.ref.i32.i32(.str.5, .str.41, $i667, 544);
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb153:
    assume $i663 == 1;
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    $i22 := $i655;
    goto $bb12;

  $bb147:
    assume $i658 == 1;
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    $i659 := $M.10;
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    $i660 := $and.i32($i659, 16);
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    $i661 := $ne.i32($i660, 0);
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    assume {:branchcond $i661} true;
    goto $bb150, $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    assume !($i661 == 1);
    goto $bb149;

  $bb150:
    assume $i661 == 1;
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 179} vslice_dummy_var_31 := printk.ref.ref.i32.i32(.str.5, .str.41, $i655, 541);
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb144:
    assume $i651 == 1;
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    $i22 := $i643;
    goto $bb12;

  $bb138:
    assume $i646 == 1;
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    $i647 := $M.10;
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    $i648 := $and.i32($i647, 16);
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    $i649 := $ne.i32($i648, 0);
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    assume {:branchcond $i649} true;
    goto $bb141, $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    assume !($i649 == 1);
    goto $bb140;

  $bb141:
    assume $i649 == 1;
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 175} vslice_dummy_var_30 := printk.ref.ref.i32.i32(.str.5, .str.41, $i643, 538);
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb135:
    assume $i639 == 1;
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    $i22 := $i631;
    goto $bb12;

  $bb129:
    assume $i634 == 1;
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    $i635 := $M.10;
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    $i636 := $and.i32($i635, 16);
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    $i637 := $ne.i32($i636, 0);
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    assume {:branchcond $i637} true;
    goto $bb132, $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    assume !($i637 == 1);
    goto $bb131;

  $bb132:
    assume $i637 == 1;
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 171} vslice_dummy_var_29 := printk.ref.ref.i32.i32(.str.5, .str.41, $i631, 535);
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb126:
    assume $i627 == 1;
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    $i22 := $i619;
    goto $bb12;

  $bb120:
    assume $i622 == 1;
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    $i623 := $M.10;
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    $i624 := $and.i32($i623, 16);
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    $i625 := $ne.i32($i624, 0);
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    assume {:branchcond $i625} true;
    goto $bb123, $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    assume !($i625 == 1);
    goto $bb122;

  $bb123:
    assume $i625 == 1;
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 167} vslice_dummy_var_28 := printk.ref.ref.i32.i32(.str.5, .str.41, $i619, 532);
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb113:
    assume $i95 == 1;
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb109:
    assume $i94 == 1;
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    $i512 := $load.i8($M.7, $p4);
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    $i513 := $zext.i8.i32($i512);
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    $i514 := $and.i32($i513, 191);
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    $i515 := $trunc.i32.i8($i514);
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p4, $i515);
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    $i516 := $load.i8($M.7, $p5);
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    $i517 := $zext.i8.i32($i516);
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    $i518 := $and.i32($i517, 254);
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    $i519 := $trunc.i32.i8($i518);
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p5, $i519);
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    $i520 := $load.i8($M.7, $p5);
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    $i521 := $zext.i8.i32($i520);
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    $i522 := $and.i32($i521, 253);
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    $i523 := $trunc.i32.i8($i522);
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p5, $i523);
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    $i524 := $load.i8($M.7, $p6);
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    $i525 := $zext.i8.i32($i524);
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    $i526 := $and.i32($i525, 127);
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    $i527 := $trunc.i32.i8($i526);
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p6, $i527);
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    $i528 := $load.i8($M.7, $p2);
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    $i529 := $zext.i8.i32($i528);
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    $i530 := $or.i32($i529, 4);
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    $i531 := $trunc.i32.i8($i530);
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p2, $i531);
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    $i532 := $load.i8($M.7, $p3);
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    $i533 := $zext.i8.i32($i532);
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    $i534 := $or.i32($i533, 64);
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    $i535 := $trunc.i32.i8($i534);
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p3, $i535);
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    $i536 := $load.i8($M.7, $p6);
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    $i537 := $zext.i8.i32($i536);
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    $i538 := $and.i32($i537, 239);
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    $i539 := $trunc.i32.i8($i538);
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p6, $i539);
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    $i540 := $load.i8($M.7, $p7);
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    $i541 := $zext.i8.i32($i540);
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    $i542 := $and.i32($i541, 239);
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    $i543 := $trunc.i32.i8($i542);
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p7, $i543);
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    $i544 := $load.i8($M.7, $p7);
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    $i545 := $zext.i8.i32($i544);
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    $i546 := $and.i32($i545, 127);
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    $i547 := $trunc.i32.i8($i546);
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p7, $i547);
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    $i548 := $load.i8($M.7, $p7);
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    $i549 := $zext.i8.i32($i548);
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    $i550 := $and.i32($i549, 191);
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    $i551 := $trunc.i32.i8($i550);
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p7, $i551);
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    $i552 := $load.i8($M.7, $p7);
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    $i553 := $zext.i8.i32($i552);
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    $i554 := $and.i32($i553, 223);
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    $i555 := $trunc.i32.i8($i554);
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p7, $i555);
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    $i556 := $load.i8($M.7, $p8);
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    $i557 := $zext.i8.i32($i556);
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    $i558 := $and.i32($i557, 15);
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    $i559 := $trunc.i32.i8($i558);
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p8, $i559);
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    $i560 := $load.i8($M.7, $p9);
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    $i561 := $zext.i8.i32($i560);
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    $i562 := $and.i32($i561, 15);
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    $i563 := $trunc.i32.i8($i562);
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p9, $i563);
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb105:
    assume $i93 == 1;
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    $i460 := $load.i8($M.7, $p4);
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    $i461 := $zext.i8.i32($i460);
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    $i462 := $and.i32($i461, 191);
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    $i463 := $trunc.i32.i8($i462);
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p4, $i463);
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    $i464 := $load.i8($M.7, $p5);
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    $i465 := $zext.i8.i32($i464);
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    $i466 := $or.i32($i465, 1);
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    $i467 := $trunc.i32.i8($i466);
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p5, $i467);
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    $i468 := $load.i8($M.7, $p5);
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    $i469 := $zext.i8.i32($i468);
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    $i470 := $and.i32($i469, 253);
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    $i471 := $trunc.i32.i8($i470);
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p5, $i471);
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    $i472 := $load.i8($M.7, $p6);
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    $i473 := $zext.i8.i32($i472);
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    $i474 := $and.i32($i473, 127);
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    $i475 := $trunc.i32.i8($i474);
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p6, $i475);
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    $i476 := $load.i8($M.7, $p2);
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    $i477 := $zext.i8.i32($i476);
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    $i478 := $and.i32($i477, 251);
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    $i479 := $trunc.i32.i8($i478);
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p2, $i479);
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    $i480 := $load.i8($M.7, $p3);
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    $i481 := $zext.i8.i32($i480);
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    $i482 := $and.i32($i481, 191);
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    $i483 := $trunc.i32.i8($i482);
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p3, $i483);
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    $i484 := $load.i8($M.7, $p6);
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    $i485 := $zext.i8.i32($i484);
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    $i486 := $and.i32($i485, 239);
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    $i487 := $trunc.i32.i8($i486);
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p6, $i487);
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    $i488 := $load.i8($M.7, $p7);
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    $i489 := $zext.i8.i32($i488);
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    $i490 := $and.i32($i489, 239);
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    $i491 := $trunc.i32.i8($i490);
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p7, $i491);
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    $i492 := $load.i8($M.7, $p7);
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    $i493 := $zext.i8.i32($i492);
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    $i494 := $and.i32($i493, 127);
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    $i495 := $trunc.i32.i8($i494);
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p7, $i495);
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    $i496 := $load.i8($M.7, $p7);
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    $i497 := $zext.i8.i32($i496);
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    $i498 := $and.i32($i497, 191);
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    $i499 := $trunc.i32.i8($i498);
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p7, $i499);
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    $i500 := $load.i8($M.7, $p7);
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    $i501 := $zext.i8.i32($i500);
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    $i502 := $and.i32($i501, 223);
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    $i503 := $trunc.i32.i8($i502);
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p7, $i503);
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    $i504 := $load.i8($M.7, $p8);
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    $i505 := $zext.i8.i32($i504);
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    $i506 := $and.i32($i505, 15);
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    $i507 := $trunc.i32.i8($i506);
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p8, $i507);
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    $i508 := $load.i8($M.7, $p9);
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    $i509 := $zext.i8.i32($i508);
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    $i510 := $and.i32($i509, 15);
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    $i511 := $trunc.i32.i8($i510);
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p9, $i511);
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb101:
    assume $i92 == 1;
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    $i408 := $load.i8($M.7, $p4);
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    $i409 := $zext.i8.i32($i408);
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    $i410 := $and.i32($i409, 191);
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    $i411 := $trunc.i32.i8($i410);
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p4, $i411);
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    $i412 := $load.i8($M.7, $p5);
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    $i413 := $zext.i8.i32($i412);
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    $i414 := $and.i32($i413, 254);
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    $i415 := $trunc.i32.i8($i414);
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p5, $i415);
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    $i416 := $load.i8($M.7, $p5);
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    $i417 := $zext.i8.i32($i416);
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    $i418 := $or.i32($i417, 2);
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    $i419 := $trunc.i32.i8($i418);
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p5, $i419);
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    $i420 := $load.i8($M.7, $p6);
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    $i421 := $zext.i8.i32($i420);
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    $i422 := $and.i32($i421, 127);
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    $i423 := $trunc.i32.i8($i422);
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p6, $i423);
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    $i424 := $load.i8($M.7, $p2);
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    $i425 := $zext.i8.i32($i424);
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    $i426 := $and.i32($i425, 251);
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    $i427 := $trunc.i32.i8($i426);
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p2, $i427);
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    $i428 := $load.i8($M.7, $p3);
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    $i429 := $zext.i8.i32($i428);
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    $i430 := $or.i32($i429, 64);
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    $i431 := $trunc.i32.i8($i430);
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p3, $i431);
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    $i432 := $load.i8($M.7, $p6);
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    $i433 := $zext.i8.i32($i432);
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    $i434 := $or.i32($i433, 16);
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    $i435 := $trunc.i32.i8($i434);
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p6, $i435);
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    $i436 := $load.i8($M.7, $p7);
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    $i437 := $zext.i8.i32($i436);
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    $i438 := $and.i32($i437, 239);
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    $i439 := $trunc.i32.i8($i438);
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p7, $i439);
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    $i440 := $load.i8($M.7, $p7);
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    $i441 := $zext.i8.i32($i440);
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    $i442 := $and.i32($i441, 127);
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    $i443 := $trunc.i32.i8($i442);
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p7, $i443);
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    $i444 := $load.i8($M.7, $p7);
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    $i445 := $zext.i8.i32($i444);
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    $i446 := $and.i32($i445, 191);
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    $i447 := $trunc.i32.i8($i446);
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p7, $i447);
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    $i448 := $load.i8($M.7, $p7);
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    $i449 := $zext.i8.i32($i448);
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    $i450 := $and.i32($i449, 223);
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    $i451 := $trunc.i32.i8($i450);
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p7, $i451);
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    $i452 := $load.i8($M.7, $p8);
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    $i453 := $zext.i8.i32($i452);
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    $i454 := $and.i32($i453, 15);
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    $i455 := $trunc.i32.i8($i454);
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p8, $i455);
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    $i456 := $load.i8($M.7, $p9);
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    $i457 := $zext.i8.i32($i456);
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    $i458 := $and.i32($i457, 15);
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    $i459 := $trunc.i32.i8($i458);
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p9, $i459);
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb97:
    assume $i91 == 1;
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    $i356 := $load.i8($M.7, $p4);
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    $i357 := $zext.i8.i32($i356);
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    $i358 := $and.i32($i357, 191);
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    $i359 := $trunc.i32.i8($i358);
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p4, $i359);
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    $i360 := $load.i8($M.7, $p5);
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    $i361 := $zext.i8.i32($i360);
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    $i362 := $and.i32($i361, 254);
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    $i363 := $trunc.i32.i8($i362);
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p5, $i363);
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    $i364 := $load.i8($M.7, $p5);
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    $i365 := $zext.i8.i32($i364);
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    $i366 := $or.i32($i365, 2);
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    $i367 := $trunc.i32.i8($i366);
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p5, $i367);
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    $i368 := $load.i8($M.7, $p6);
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    $i369 := $zext.i8.i32($i368);
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    $i370 := $or.i32($i369, 128);
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    $i371 := $trunc.i32.i8($i370);
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p6, $i371);
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    $i372 := $load.i8($M.7, $p2);
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    $i373 := $zext.i8.i32($i372);
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    $i374 := $and.i32($i373, 251);
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    $i375 := $trunc.i32.i8($i374);
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p2, $i375);
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    $i376 := $load.i8($M.7, $p3);
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    $i377 := $zext.i8.i32($i376);
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    $i378 := $or.i32($i377, 64);
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    $i379 := $trunc.i32.i8($i378);
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p3, $i379);
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    $i380 := $load.i8($M.7, $p6);
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    $i381 := $zext.i8.i32($i380);
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    $i382 := $or.i32($i381, 16);
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    $i383 := $trunc.i32.i8($i382);
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p6, $i383);
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    $i384 := $load.i8($M.7, $p7);
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    $i385 := $zext.i8.i32($i384);
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    $i386 := $and.i32($i385, 239);
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    $i387 := $trunc.i32.i8($i386);
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p7, $i387);
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    $i388 := $load.i8($M.7, $p7);
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    $i389 := $zext.i8.i32($i388);
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    $i390 := $and.i32($i389, 127);
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    $i391 := $trunc.i32.i8($i390);
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p7, $i391);
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    $i392 := $load.i8($M.7, $p7);
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    $i393 := $zext.i8.i32($i392);
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    $i394 := $and.i32($i393, 191);
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    $i395 := $trunc.i32.i8($i394);
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p7, $i395);
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    $i396 := $load.i8($M.7, $p7);
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    $i397 := $zext.i8.i32($i396);
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    $i398 := $and.i32($i397, 223);
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    $i399 := $trunc.i32.i8($i398);
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p7, $i399);
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    $i400 := $load.i8($M.7, $p8);
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    $i401 := $zext.i8.i32($i400);
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    $i402 := $and.i32($i401, 15);
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    $i403 := $trunc.i32.i8($i402);
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p8, $i403);
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    $i404 := $load.i8($M.7, $p9);
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    $i405 := $zext.i8.i32($i404);
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    $i406 := $and.i32($i405, 15);
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    $i407 := $trunc.i32.i8($i406);
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p9, $i407);
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb93:
    assume $i90 == 1;
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    $i304 := $load.i8($M.7, $p4);
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    $i305 := $zext.i8.i32($i304);
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    $i306 := $and.i32($i305, 191);
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    $i307 := $trunc.i32.i8($i306);
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p4, $i307);
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    $i308 := $load.i8($M.7, $p5);
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    $i309 := $zext.i8.i32($i308);
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    $i310 := $and.i32($i309, 254);
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    $i311 := $trunc.i32.i8($i310);
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p5, $i311);
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    $i312 := $load.i8($M.7, $p5);
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    $i313 := $zext.i8.i32($i312);
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    $i314 := $or.i32($i313, 2);
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    $i315 := $trunc.i32.i8($i314);
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p5, $i315);
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    $i316 := $load.i8($M.7, $p6);
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    $i317 := $zext.i8.i32($i316);
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    $i318 := $or.i32($i317, 128);
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    $i319 := $trunc.i32.i8($i318);
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p6, $i319);
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    $i320 := $load.i8($M.7, $p2);
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    $i321 := $zext.i8.i32($i320);
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    $i322 := $and.i32($i321, 251);
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    $i323 := $trunc.i32.i8($i322);
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p2, $i323);
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    $i324 := $load.i8($M.7, $p3);
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    $i325 := $zext.i8.i32($i324);
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    $i326 := $and.i32($i325, 191);
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    $i327 := $trunc.i32.i8($i326);
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p3, $i327);
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    $i328 := $load.i8($M.7, $p6);
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $i329 := $zext.i8.i32($i328);
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    $i330 := $and.i32($i329, 239);
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    $i331 := $trunc.i32.i8($i330);
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p6, $i331);
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    $i332 := $load.i8($M.7, $p7);
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    $i333 := $zext.i8.i32($i332);
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    $i334 := $and.i32($i333, 239);
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    $i335 := $trunc.i32.i8($i334);
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p7, $i335);
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    $i336 := $load.i8($M.7, $p7);
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    $i337 := $zext.i8.i32($i336);
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    $i338 := $and.i32($i337, 127);
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    $i339 := $trunc.i32.i8($i338);
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p7, $i339);
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    $i340 := $load.i8($M.7, $p7);
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    $i341 := $zext.i8.i32($i340);
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    $i342 := $and.i32($i341, 191);
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    $i343 := $trunc.i32.i8($i342);
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p7, $i343);
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    $i344 := $load.i8($M.7, $p7);
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    $i345 := $zext.i8.i32($i344);
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    $i346 := $and.i32($i345, 223);
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    $i347 := $trunc.i32.i8($i346);
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p7, $i347);
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    $i348 := $load.i8($M.7, $p8);
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    $i349 := $zext.i8.i32($i348);
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    $i350 := $and.i32($i349, 15);
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    $i351 := $trunc.i32.i8($i350);
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p8, $i351);
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    $i352 := $load.i8($M.7, $p9);
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    $i353 := $zext.i8.i32($i352);
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    $i354 := $and.i32($i353, 15);
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    $i355 := $trunc.i32.i8($i354);
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p9, $i355);
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb89:
    assume $i89 == 1;
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    $i252 := $load.i8($M.7, $p4);
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    $i253 := $zext.i8.i32($i252);
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    $i254 := $and.i32($i253, 191);
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    $i255 := $trunc.i32.i8($i254);
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p4, $i255);
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    $i256 := $load.i8($M.7, $p5);
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    $i257 := $zext.i8.i32($i256);
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    $i258 := $and.i32($i257, 254);
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    $i259 := $trunc.i32.i8($i258);
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p5, $i259);
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    $i260 := $load.i8($M.7, $p5);
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    $i261 := $zext.i8.i32($i260);
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    $i262 := $or.i32($i261, 2);
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    $i263 := $trunc.i32.i8($i262);
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p5, $i263);
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    $i264 := $load.i8($M.7, $p6);
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    $i265 := $zext.i8.i32($i264);
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    $i266 := $and.i32($i265, 127);
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    $i267 := $trunc.i32.i8($i266);
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p6, $i267);
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    $i268 := $load.i8($M.7, $p2);
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    $i269 := $zext.i8.i32($i268);
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    $i270 := $and.i32($i269, 251);
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    $i271 := $trunc.i32.i8($i270);
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p2, $i271);
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    $i272 := $load.i8($M.7, $p3);
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    $i273 := $zext.i8.i32($i272);
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    $i274 := $and.i32($i273, 191);
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    $i275 := $trunc.i32.i8($i274);
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p3, $i275);
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    $i276 := $load.i8($M.7, $p6);
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    $i277 := $zext.i8.i32($i276);
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    $i278 := $and.i32($i277, 239);
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    $i279 := $trunc.i32.i8($i278);
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p6, $i279);
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    $i280 := $load.i8($M.7, $p7);
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    $i281 := $zext.i8.i32($i280);
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    $i282 := $and.i32($i281, 239);
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    $i283 := $trunc.i32.i8($i282);
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p7, $i283);
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    $i284 := $load.i8($M.7, $p7);
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    $i285 := $zext.i8.i32($i284);
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    $i286 := $and.i32($i285, 127);
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    $i287 := $trunc.i32.i8($i286);
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p7, $i287);
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    $i288 := $load.i8($M.7, $p7);
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    $i289 := $zext.i8.i32($i288);
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    $i290 := $and.i32($i289, 191);
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    $i291 := $trunc.i32.i8($i290);
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p7, $i291);
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    $i292 := $load.i8($M.7, $p7);
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    $i293 := $zext.i8.i32($i292);
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    $i294 := $and.i32($i293, 223);
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    $i295 := $trunc.i32.i8($i294);
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p7, $i295);
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    $i296 := $load.i8($M.7, $p8);
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    $i297 := $zext.i8.i32($i296);
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    $i298 := $and.i32($i297, 15);
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    $i299 := $trunc.i32.i8($i298);
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p8, $i299);
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    $i300 := $load.i8($M.7, $p9);
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    $i301 := $zext.i8.i32($i300);
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    $i302 := $and.i32($i301, 15);
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    $i303 := $trunc.i32.i8($i302);
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p9, $i303);
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb85:
    assume $i88 == 1;
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    $i200 := $load.i8($M.7, $p4);
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    $i201 := $zext.i8.i32($i200);
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    $i202 := $and.i32($i201, 191);
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    $i203 := $trunc.i32.i8($i202);
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p4, $i203);
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    $i204 := $load.i8($M.7, $p5);
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    $i205 := $zext.i8.i32($i204);
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    $i206 := $and.i32($i205, 254);
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    $i207 := $trunc.i32.i8($i206);
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p5, $i207);
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    $i208 := $load.i8($M.7, $p5);
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    $i209 := $zext.i8.i32($i208);
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    $i210 := $and.i32($i209, 253);
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    $i211 := $trunc.i32.i8($i210);
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p5, $i211);
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    $i212 := $load.i8($M.7, $p6);
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    $i213 := $zext.i8.i32($i212);
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    $i214 := $and.i32($i213, 127);
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    $i215 := $trunc.i32.i8($i214);
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p6, $i215);
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    $i216 := $load.i8($M.7, $p2);
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    $i217 := $zext.i8.i32($i216);
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    $i218 := $and.i32($i217, 251);
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    $i219 := $trunc.i32.i8($i218);
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p2, $i219);
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    $i220 := $load.i8($M.7, $p3);
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    $i221 := $zext.i8.i32($i220);
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    $i222 := $and.i32($i221, 191);
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    $i223 := $trunc.i32.i8($i222);
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p3, $i223);
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    $i224 := $load.i8($M.7, $p6);
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    $i225 := $zext.i8.i32($i224);
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    $i226 := $and.i32($i225, 239);
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    $i227 := $trunc.i32.i8($i226);
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p6, $i227);
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    $i228 := $load.i8($M.7, $p7);
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    $i229 := $zext.i8.i32($i228);
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    $i230 := $and.i32($i229, 239);
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    $i231 := $trunc.i32.i8($i230);
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p7, $i231);
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    $i232 := $load.i8($M.7, $p7);
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    $i233 := $zext.i8.i32($i232);
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    $i234 := $and.i32($i233, 127);
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    $i235 := $trunc.i32.i8($i234);
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p7, $i235);
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    $i236 := $load.i8($M.7, $p7);
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    $i237 := $zext.i8.i32($i236);
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    $i238 := $and.i32($i237, 191);
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    $i239 := $trunc.i32.i8($i238);
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p7, $i239);
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    $i240 := $load.i8($M.7, $p7);
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    $i241 := $zext.i8.i32($i240);
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    $i242 := $and.i32($i241, 223);
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    $i243 := $trunc.i32.i8($i242);
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p7, $i243);
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    $i244 := $load.i8($M.7, $p8);
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    $i245 := $zext.i8.i32($i244);
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    $i246 := $and.i32($i245, 15);
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    $i247 := $trunc.i32.i8($i246);
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p8, $i247);
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    $i248 := $load.i8($M.7, $p9);
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    $i249 := $zext.i8.i32($i248);
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    $i250 := $and.i32($i249, 15);
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    $i251 := $trunc.i32.i8($i250);
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p9, $i251);
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb81:
    assume $i87 == 1;
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $i148 := $load.i8($M.7, $p4);
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    $i149 := $zext.i8.i32($i148);
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    $i150 := $or.i32($i149, 64);
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    $i151 := $trunc.i32.i8($i150);
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p4, $i151);
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    $i152 := $load.i8($M.7, $p5);
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    $i153 := $zext.i8.i32($i152);
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    $i154 := $and.i32($i153, 254);
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    $i155 := $trunc.i32.i8($i154);
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p5, $i155);
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    $i156 := $load.i8($M.7, $p5);
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    $i157 := $zext.i8.i32($i156);
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    $i158 := $or.i32($i157, 2);
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    $i159 := $trunc.i32.i8($i158);
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p5, $i159);
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    $i160 := $load.i8($M.7, $p6);
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    $i161 := $zext.i8.i32($i160);
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    $i162 := $and.i32($i161, 127);
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    $i163 := $trunc.i32.i8($i162);
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p6, $i163);
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    $i164 := $load.i8($M.7, $p2);
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    $i165 := $zext.i8.i32($i164);
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    $i166 := $and.i32($i165, 251);
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    $i167 := $trunc.i32.i8($i166);
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p2, $i167);
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    $i168 := $load.i8($M.7, $p3);
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    $i169 := $zext.i8.i32($i168);
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    $i170 := $and.i32($i169, 191);
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    $i171 := $trunc.i32.i8($i170);
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p3, $i171);
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    $i172 := $load.i8($M.7, $p6);
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    $i173 := $zext.i8.i32($i172);
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    $i174 := $and.i32($i173, 239);
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    $i175 := $trunc.i32.i8($i174);
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p6, $i175);
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    $i176 := $load.i8($M.7, $p7);
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    $i177 := $zext.i8.i32($i176);
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    $i178 := $or.i32($i177, 16);
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    $i179 := $trunc.i32.i8($i178);
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p7, $i179);
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    $i180 := $load.i8($M.7, $p7);
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    $i181 := $zext.i8.i32($i180);
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    $i182 := $or.i32($i181, 128);
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    $i183 := $trunc.i32.i8($i182);
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p7, $i183);
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    $i184 := $load.i8($M.7, $p7);
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    $i185 := $zext.i8.i32($i184);
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    $i186 := $or.i32($i185, 64);
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    $i187 := $trunc.i32.i8($i186);
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p7, $i187);
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    $i188 := $load.i8($M.7, $p7);
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    $i189 := $zext.i8.i32($i188);
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    $i190 := $or.i32($i189, 32);
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    $i191 := $trunc.i32.i8($i190);
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p7, $i191);
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    $i192 := $load.i8($M.7, $p8);
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    $i193 := $zext.i8.i32($i192);
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    $i194 := $or.i32($i193, 240);
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    $i195 := $trunc.i32.i8($i194);
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p8, $i195);
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    $i196 := $load.i8($M.7, $p9);
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    $i197 := $zext.i8.i32($i196);
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    $i198 := $or.i32($i197, 240);
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    $i199 := $trunc.i32.i8($i198);
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p9, $i199);
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb77:
    assume $i86 == 1;
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $i96 := $load.i8($M.7, $p4);
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    $i97 := $zext.i8.i32($i96);
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    $i98 := $or.i32($i97, 64);
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    $i99 := $trunc.i32.i8($i98);
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p4, $i99);
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    $i100 := $load.i8($M.7, $p5);
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    $i101 := $zext.i8.i32($i100);
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    $i102 := $or.i32($i101, 1);
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    $i103 := $trunc.i32.i8($i102);
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p5, $i103);
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    $i104 := $load.i8($M.7, $p5);
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    $i105 := $zext.i8.i32($i104);
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    $i106 := $and.i32($i105, 253);
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    $i107 := $trunc.i32.i8($i106);
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p5, $i107);
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    $i108 := $load.i8($M.7, $p6);
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    $i109 := $zext.i8.i32($i108);
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    $i110 := $and.i32($i109, 127);
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    $i111 := $trunc.i32.i8($i110);
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p6, $i111);
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    $i112 := $load.i8($M.7, $p2);
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    $i113 := $zext.i8.i32($i112);
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    $i114 := $and.i32($i113, 251);
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    $i115 := $trunc.i32.i8($i114);
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p2, $i115);
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    $i116 := $load.i8($M.7, $p3);
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    $i117 := $zext.i8.i32($i116);
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    $i118 := $and.i32($i117, 191);
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    $i119 := $trunc.i32.i8($i118);
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p3, $i119);
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    $i120 := $load.i8($M.7, $p6);
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    $i121 := $zext.i8.i32($i120);
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    $i122 := $and.i32($i121, 239);
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    $i123 := $trunc.i32.i8($i122);
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p6, $i123);
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    $i124 := $load.i8($M.7, $p7);
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    $i125 := $zext.i8.i32($i124);
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    $i126 := $or.i32($i125, 16);
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    $i127 := $trunc.i32.i8($i126);
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p7, $i127);
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    $i128 := $load.i8($M.7, $p7);
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    $i129 := $zext.i8.i32($i128);
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    $i130 := $or.i32($i129, 128);
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    $i131 := $trunc.i32.i8($i130);
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p7, $i131);
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    $i132 := $load.i8($M.7, $p7);
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    $i133 := $zext.i8.i32($i132);
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    $i134 := $or.i32($i133, 64);
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    $i135 := $trunc.i32.i8($i134);
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p7, $i135);
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    $i136 := $load.i8($M.7, $p7);
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    $i137 := $zext.i8.i32($i136);
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    $i138 := $or.i32($i137, 32);
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    $i139 := $trunc.i32.i8($i138);
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p7, $i139);
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    $i140 := $load.i8($M.7, $p8);
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    $i141 := $zext.i8.i32($i140);
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    $i142 := $or.i32($i141, 240);
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    $i143 := $trunc.i32.i8($i142);
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p8, $i143);
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    $i144 := $load.i8($M.7, $p9);
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    $i145 := $zext.i8.i32($i144);
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    $i146 := $or.i32($i145, 240);
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    $i147 := $trunc.i32.i8($i146);
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p9, $i147);
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb74:
    assume $i85 == 1;
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    $i22 := $i77;
    goto $bb12;

  $bb68:
    assume $i80 == 1;
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    $i81 := $M.10;
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    $i82 := $and.i32($i81, 16);
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    $i83 := $ne.i32($i82, 0);
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    assume {:branchcond $i83} true;
    goto $bb71, $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    assume !($i83 == 1);
    goto $bb70;

  $bb71:
    assume $i83 == 1;
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 163} vslice_dummy_var_27 := printk.ref.ref.i32.i32(.str.5, .str.41, $i77, 244);
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb65:
    assume $i76 == 1;
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    $i22 := $i68;
    goto $bb12;

  $bb59:
    assume $i71 == 1;
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    $i72 := $M.10;
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    $i73 := $and.i32($i72, 16);
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    $i74 := $ne.i32($i73, 0);
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    assume {:branchcond $i74} true;
    goto $bb62, $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    assume !($i74 == 1);
    goto $bb61;

  $bb62:
    assume $i74 == 1;
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} vslice_dummy_var_26 := printk.ref.ref.i32.i32(.str.5, .str.41, $i68, 241);
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb56:
    assume $i67 == 1;
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    $i22 := $i59;
    goto $bb12;

  $bb50:
    assume $i62 == 1;
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    $i63 := $M.10;
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    $i64 := $and.i32($i63, 16);
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    $i65 := $ne.i32($i64, 0);
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    assume !($i65 == 1);
    goto $bb52;

  $bb53:
    assume $i65 == 1;
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} vslice_dummy_var_25 := printk.ref.ref.i32.i32(.str.5, .str.41, $i59, 238);
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb47:
    assume $i58 == 1;
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    $i22 := $i50;
    goto $bb12;

  $bb41:
    assume $i53 == 1;
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    $i54 := $M.10;
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    $i55 := $and.i32($i54, 16);
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 0);
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    assume !($i56 == 1);
    goto $bb43;

  $bb44:
    assume $i56 == 1;
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 151} vslice_dummy_var_24 := printk.ref.ref.i32.i32(.str.5, .str.41, $i50, 235);
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb38:
    assume $i49 == 1;
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    $i22 := $i41;
    goto $bb12;

  $bb32:
    assume $i44 == 1;
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    $i45 := $M.10;
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    $i46 := $and.i32($i45, 16);
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i46, 0);
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i47 == 1);
    goto $bb34;

  $bb35:
    assume $i47 == 1;
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 147} vslice_dummy_var_23 := printk.ref.ref.i32.i32(.str.5, .str.41, $i41, 232);
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb29:
    assume $i40 == 1;
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    $i22 := $i32;
    goto $bb12;

  $bb23:
    assume $i35 == 1;
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    $i36 := $M.10;
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    $i37 := $and.i32($i36, 16);
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i38 == 1);
    goto $bb25;

  $bb26:
    assume $i38 == 1;
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 143} vslice_dummy_var_22 := printk.ref.ref.i32.i32(.str.5, .str.41, $i32, 229);
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb20:
    assume $i31 == 1;
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    $i22 := $i23;
    goto $bb12;

  $bb14:
    assume $i26 == 1;
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    $i27 := $M.10;
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    $i28 := $and.i32($i27, 16);
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_681;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb16;

  $bb17:
    assume $i29 == 1;
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 139} vslice_dummy_var_21 := printk.ref.ref.i32.i32(.str.5, .str.41, $i23, 226);
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb10:
    assume $i21 == 1;
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    $i22 := $i13;
    goto $bb12;

  $bb4:
    assume $i16 == 1;
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    $i17 := $M.10;
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    $i18 := $and.i32($i17, 16);
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb6;

  $bb7:
    assume $i19 == 1;
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 135} vslice_dummy_var_20 := printk.ref.ref.i32.i32(.str.5, .str.41, $i13, 223);
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 131} vslice_dummy_var_19 := printk.ref.ref.i32(.str.24, .str.41, $i1);
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const tveeprom_read: ref;

axiom tveeprom_read == $sub.ref(0, 309844);

procedure tveeprom_read($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation tveeprom_read($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 196} {:cexpr "tveeprom_read:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 1} true;
    call {:si_unique_call 197} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 198} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const tveeprom_hauppauge_analog: ref;

axiom tveeprom_hauppauge_analog == $sub.ref(0, 310876);

procedure tveeprom_hauppauge_analog($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation tveeprom_hauppauge_analog($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    return;
}



const mxl111sf_read_reg: ref;

axiom mxl111sf_read_reg == $sub.ref(0, 311908);

procedure mxl111sf_read_reg($p0: ref, $i1: i8, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.15, $M.7, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation mxl111sf_read_reg($p0: ref, $i1: i8, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $i20: i8;
  var $i21: i32;
  var $p24: ref;
  var $i25: i8;
  var $i26: i32;
  var $i27: i8;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $i31: i8;
  var $i33: i8;
  var $i34: i32;
  var $p35: ref;
  var $i36: i8;
  var $i37: i32;
  var $p38: ref;
  var $i39: i8;
  var $i40: i32;
  var $i32: i32;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i24;
  var $i49: i24;
  var $i50: i24;
  var $p51: ref;
  var $p52: ref;
  var $i53: i8;
  var $i54: i64;
  var $i55: i64;
  var $i56: i64;
  var $i57: i1;
  var $i58: i8;
  var $i59: i32;
  var $p60: ref;
  var $i61: i8;
  var $i62: i32;
  var $i23: i32;
  var vslice_dummy_var_36: i32;
  var vslice_dummy_var_37: i32;
  var vslice_dummy_var_38: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 199} $p3 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 200} $p4 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 201} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p3, $i1);
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(0, 1));
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.7, $p6);
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p4);
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 202} $i9 := mxl111sf_ctrl_msg($p7, $sub.i8(0, 86), $p3, 1, $p8, 2);
    call {:si_unique_call 203} {:cexpr "ret"} boogie_si_record_i32($i9);
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i9, 0);
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    call {:si_unique_call 204} {:cexpr "__ret"} boogie_si_record_i32($i11);
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i11, 0);
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p4, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.16, $p24);
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i25);
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.15, $p3);
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i27);
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i26, $i28);
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i29 == 1);
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.15, $p3);
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i33);
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p4, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.16, $p35);
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i36);
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p4, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.16, $p38);
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i39);
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 207} vslice_dummy_var_38 := printk.ref.i32.i32.i32(.str.8, $i34, $i37, $i40);
    assume {:verifier.code 0} true;
    $i32 := $sub.i32(0, 22);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p42, .str.2);
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p43, .str.6);
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p44, .str.3);
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p45, .str.9);
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    $i48 := $load.i24($M.5, $p47);
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    $i49 := $and.i24($i48, $sub.i24(0, 262144));
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    $i50 := $or.i24($i49, 108);
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p47, $i50);
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p51, 0);
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.6, $p52);
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    $i54 := $zext.i8.i64($i53);
    goto corral_source_split_1728;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    $i55 := $and.i64($i54, 1);
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 208} $i56 := ldv__builtin_expect($i55, 0);
    call {:si_unique_call 209} {:cexpr "tmp"} boogie_si_record_i64($i56);
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    $i57 := $ne.i64($i56, 0);
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    assume {:branchcond $i57} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i23 := $i32;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    $r := $i23;
    return;

  $bb17:
    assume $i57 == 1;
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    $i58 := $load.i8($M.15, $p3);
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    $i59 := $zext.i8.i32($i58);
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p4, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    $i61 := $load.i8($M.16, $p60);
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    $i62 := $zext.i8.i32($i61);
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 210} __dynamic_pr_debug.ref.ref.i32.i32($p5, .str.9, $i59, $i62);
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb14:
    assume $i29 == 1;
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p4, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.16, $p30);
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p2, $i31);
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    $i32 := $i9;
    goto $bb16;

  $bb7:
    assume $i17 == 1;
    goto corral_source_split_1676;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    $i18 := $M.10;
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i23 := $i9;
    goto $bb12;

  $bb9:
    assume $i19 == 1;
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.15, $p3);
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} vslice_dummy_var_37 := printk.ref.ref.i32(.str.7, .str.6, $i21);
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    $i13 := $M.10;
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, 16);
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb3;

  $bb4:
    assume $i15 == 1;
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 205} vslice_dummy_var_36 := printk.ref.ref.i32.i32(.str.5, .str.6, $i9, 95);
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const mxl111sf_write_reg: ref;

axiom mxl111sf_write_reg == $sub.ref(0, 312940);

procedure mxl111sf_write_reg($p0: ref, $i1: i8, $i2: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.15, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation mxl111sf_write_reg($p0: ref, $i1: i8, $i2: i8) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i24;
  var $i14: i24;
  var $i15: i24;
  var $p16: ref;
  var $p17: ref;
  var $i18: i8;
  var $i19: i64;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $i23: i32;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $i36: i1;
  var $i37: i32;
  var $i38: i32;
  var vslice_dummy_var_39: i32;
  var vslice_dummy_var_40: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 211} $p3 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 212} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 213} {:cexpr "mxl111sf_write_reg:arg:addr"} boogie_si_record_i8($i1);
    call {:si_unique_call 214} {:cexpr "mxl111sf_write_reg:arg:data"} boogie_si_record_i8($i2);
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p5, $i1);
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p6, $i2);
    goto corral_source_split_1745;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p7, .str.2);
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p8, .str.10);
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p9, .str.3);
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p10, .str.11);
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    $i13 := $load.i24($M.5, $p12);
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    $i14 := $and.i24($i13, $sub.i24(0, 262144));
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    $i15 := $or.i24($i14, 118);
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p12, $i15);
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p16, 0);
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.6, $p17);
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i64($i18);
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    $i20 := $and.i64($i19, 1);
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 215} $i21 := ldv__builtin_expect($i20, 0);
    call {:si_unique_call 216} {:cexpr "tmp"} boogie_si_record_i64($i21);
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(0, 1));
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.7, $p25);
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p3);
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 218} $i28 := mxl111sf_ctrl_msg($p26, 85, $p27, 2, $0.ref, 0);
    call {:si_unique_call 219} {:cexpr "ret"} boogie_si_record_i32($i28);
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i28, 0);
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    $i30 := $zext.i1.i32($i29);
    call {:si_unique_call 220} {:cexpr "__ret"} boogie_si_record_i32($i30);
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i30, 0);
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $r := $i28;
    return;

  $bb10:
    assume $i36 == 1;
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i1);
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i32($i2);
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 222} vslice_dummy_var_40 := printk.ref.i32.i32(.str.12, $i37, $i38);
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb4:
    assume $i31 == 1;
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    $i32 := $M.10;
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    $i33 := $and.i32($i32, 16);
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb6;

  $bb7:
    assume $i34 == 1;
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 221} vslice_dummy_var_39 := printk.ref.ref.i32.i32(.str.5, .str.10, $i28, 121);
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i22 == 1;
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i1);
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i2);
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 217} __dynamic_pr_debug.ref.ref.i32.i32($p4, .str.11, $i23, $i24);
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mxl111sf_ctrl_msg: ref;

axiom mxl111sf_ctrl_msg == $sub.ref(0, 313972);

procedure mxl111sf_ctrl_msg($p0: ref, $i1: i8, $p2: ref, $i3: i32, $p4: ref, $i5: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.15, $CurrAddr;



implementation mxl111sf_ctrl_msg($p0: ref, $i1: i8, $p2: ref, $i3: i32, $p4: ref, $i5: i32) returns ($r: i32)
{
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $i11: i1;
  var $i10: i1;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i24;
  var $i24: i24;
  var $i25: i24;
  var $p26: ref;
  var $p27: ref;
  var $i28: i8;
  var $i29: i64;
  var $i30: i64;
  var $i31: i64;
  var $i32: i1;
  var $p33: ref;
  var $i34: i32;
  var $i35: i64;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $i40: i1;
  var $p41: ref;
  var $i42: i16;
  var $i43: i32;
  var $i44: i32;
  var $i45: i16;
  var $i46: i32;
  var $p48: ref;
  var $i49: i16;
  var $i50: i32;
  var $i51: i32;
  var $i52: i16;
  var $i53: i16;
  var $i54: i32;
  var $i55: i16;
  var $i56: i32;
  var $i47: i32;
  var $i57: i1;
  var $i58: i32;
  var $i59: i1;
  var $i60: i32;
  var $i61: i32;
  var $i62: i1;
  var $i16: i32;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var vslice_dummy_var_41: i32;
  var vslice_dummy_var_42: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 223} $p6 := $alloc($mul.ref(64, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 224} $p7 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 225} {:cexpr "mxl111sf_ctrl_msg:arg:cmd"} boogie_si_record_i8($i1);
    call {:si_unique_call 226} {:cexpr "mxl111sf_ctrl_msg:arg:wlen"} boogie_si_record_i32($i3);
    call {:si_unique_call 227} {:cexpr "mxl111sf_ctrl_msg:arg:rlen"} boogie_si_record_i32($i5);
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p4);
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    $i10 := 1;
    assume {:branchcond $i9} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i9 == 1);
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i5, 0);
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    $i10 := $i11;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i10);
    call {:si_unique_call 228} {:cexpr "wo"} boogie_si_record_i32($i12);
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i3, 1);
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    $i14 := $ugt.i32($i13, 64);
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p17, .str.2);
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p18, .str.1);
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p19, .str.3);
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p20, .str.4);
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    $i23 := $load.i24($M.5, $p22);
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    $i24 := $and.i24($i23, $sub.i24(0, 262144));
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    $i25 := $or.i24($i24, 70);
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p22, $i25);
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p26, 0);
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.6, $p27);
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i64($i28);
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    $i30 := $and.i64($i29, 1);
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 230} $i31 := ldv__builtin_expect($i30, 0);
    call {:si_unique_call 231} {:cexpr "tmp"} boogie_si_record_i64($i31);
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, 0);
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p6);
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    $i34 := $add.i32($i3, 1);
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    $i35 := $sext.i32.i64($i34);
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.15;
    call {:si_unique_call 233} cmdloc_dummy_var_1 := $memset.i8(cmdloc_dummy_var_0, $p33, 0, $i35, $zext.i32.i64(16), 0 == 1);
    $M.15 := cmdloc_dummy_var_1;
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p6, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p36, $i1);
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p6);
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($p37, $mul.ref(1, 1));
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    $i39 := $sext.i32.i64($i3);
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_2 := $M.15;
    cmdloc_dummy_var_3 := $M.15;
    call {:si_unique_call 234} cmdloc_dummy_var_4 := $memcpy.i8(cmdloc_dummy_var_2, cmdloc_dummy_var_3, $p38, $p2, $i39, $zext.i32.i64(1), 0 == 1);
    $M.15 := cmdloc_dummy_var_4;
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i12, 0);
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i40 == 1);
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p6);
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    $i49 := $trunc.i32.i16($i3);
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    $i50 := $zext.i16.i32($i49);
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    $i51 := $add.i32($i50, 1);
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    $i52 := $trunc.i32.i16($i51);
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i32.i16($i5);
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    $i54 := $zext.i16.i32($i53);
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    $i55 := $trunc.i32.i16($i54);
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 237} $i56 := dvb_usbv2_generic_rw($p0, $p48, $i52, $p4, $i55);
    call {:si_unique_call 238} {:cexpr "tmp___1"} boogie_si_record_i32($i56);
    assume {:verifier.code 0} true;
    $i47 := $i56;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    $i57 := $slt.i32($i47, 0);
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    $i58 := $zext.i1.i32($i57);
    call {:si_unique_call 239} {:cexpr "__ret"} boogie_si_record_i32($i58);
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    $i59 := $ne.i32($i58, 0);
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i59 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i16 := $i47;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb14:
    assume $i59 == 1;
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    $i60 := $M.10;
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    $i61 := $and.i32($i60, 16);
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    $i62 := $ne.i32($i61, 0);
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i62 == 1);
    goto $bb16;

  $bb17:
    assume $i62 == 1;
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 240} vslice_dummy_var_42 := printk.ref.ref.i32.i32(.str.5, .str.1, $i47, 79);
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb11:
    assume $i40 == 1;
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p6);
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i32.i16($i3);
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    $i43 := $zext.i16.i32($i42);
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    $i44 := $add.i32($i43, 1);
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i32.i16($i44);
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 235} $i46 := dvb_usbv2_generic_write($p0, $p41, $i45);
    call {:si_unique_call 236} {:cexpr "tmp___0"} boogie_si_record_i32($i46);
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    $i47 := $i46;
    goto $bb13;

  $bb8:
    assume $i32 == 1;
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 232} __dynamic_pr_debug.ref.ref.ref.i32.i32($p7, .str.4, .str.1, $i3, $i5);
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 229} vslice_dummy_var_41 := printk.ref.ref.i32(.str, .str.1, $i3);
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 95);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb2;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 315004);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 316036);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const dvb_usbv2_generic_write: ref;

axiom dvb_usbv2_generic_write == $sub.ref(0, 317068);

procedure dvb_usbv2_generic_write($p0: ref, $p1: ref, $i2: i16) returns ($r: i32);
  free requires assertsPassed;



implementation dvb_usbv2_generic_write($p0: ref, $p1: ref, $i2: i16) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 241} {:cexpr "dvb_usbv2_generic_write:arg:arg2"} boogie_si_record_i16($i2);
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 1} true;
    call {:si_unique_call 242} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 243} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const dvb_usbv2_generic_rw: ref;

axiom dvb_usbv2_generic_rw == $sub.ref(0, 318100);

procedure dvb_usbv2_generic_rw($p0: ref, $p1: ref, $i2: i16, $p3: ref, $i4: i16) returns ($r: i32);
  free requires assertsPassed;



implementation dvb_usbv2_generic_rw($p0: ref, $p1: ref, $i2: i16, $p3: ref, $i4: i16) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 244} {:cexpr "dvb_usbv2_generic_rw:arg:arg2"} boogie_si_record_i16($i2);
    call {:si_unique_call 245} {:cexpr "dvb_usbv2_generic_rw:arg:arg4"} boogie_si_record_i16($i4);
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 1} true;
    call {:si_unique_call 246} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 247} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const mxl111sf_ep6_streaming_ctrl: ref;

axiom mxl111sf_ep6_streaming_ctrl == $sub.ref(0, 319132);

procedure mxl111sf_ep6_streaming_ctrl($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.15, $M.7, $CurrAddr;



implementation mxl111sf_ep6_streaming_ctrl($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i64;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i24;
  var $i37: i24;
  var $i38: i24;
  var $p39: ref;
  var $p40: ref;
  var $i41: i8;
  var $i42: i64;
  var $i43: i64;
  var $i44: i64;
  var $i45: i1;
  var $i46: i1;
  var $i47: i32;
  var $i48: i1;
  var $i49: i32;
  var $i50: i1;
  var $i51: i32;
  var $i52: i32;
  var $i53: i1;
  var $p55: ref;
  var $i56: i32;
  var $i57: i32;
  var $i58: i1;
  var $i59: i32;
  var $i60: i1;
  var $i61: i32;
  var $i62: i32;
  var $i63: i1;
  var $i65: i32;
  var vslice_dummy_var_43: i32;
  var vslice_dummy_var_44: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 248} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 249} {:cexpr "mxl111sf_ep6_streaming_ctrl:arg:onoff"} boogie_si_record_i32($i1);
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1584)), $mul.ref(784, 1));
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.8, $p3);
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 256)), $mul.ref(56, 1));
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.8, $p5);
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 1584)), $mul.ref(784, 1));
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.8, $p9);
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 256)), $mul.ref(56, 1));
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.8, $p11);
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 2400)), $mul.ref(320, 1));
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.8, $p14);
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i64($i15);
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    $i17 := $mul.i64($i16, 2400);
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    $i18 := $add.i64($i17, 2344);
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    $i19 := $sub.i64(0, $i18);
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p8, $mul.ref($i19, 7456)), $mul.ref(7448, 1));
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.8, $p21);
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 368)), $mul.ref(272, 1));
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 1584)), $mul.ref(1576, 1));
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.8, $p26);
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64($i27);
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p30, .str.2);
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p31, .str.75);
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p32, .str.3);
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p33, .str.52);
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    $i36 := $load.i24($M.5, $p35);
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    $i37 := $and.i24($i36, $sub.i24(0, 262144));
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    $i38 := $or.i24($i37, 349);
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p35, $i38);
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p39, 0);
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    $i41 := $load.i8($M.6, $p40);
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i64($i41);
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    $i43 := $and.i64($i42, 1);
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 250} $i44 := ldv__builtin_expect($i43, 0);
    call {:si_unique_call 251} {:cexpr "tmp"} boogie_si_record_i64($i44);
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    $i45 := $ne.i64($i44, 0);
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i1, 0);
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    $i65 := 0;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    $r := $i65;
    return;

  $bb4:
    assume $i46 == 1;
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 253} $i47 := mxl111sf_enable_usb_output($p23);
    call {:si_unique_call 254} {:cexpr "ret"} boogie_si_record_i32($i47);
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    $i48 := $slt.i32($i47, 0);
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    $i49 := $zext.i1.i32($i48);
    call {:si_unique_call 255} {:cexpr "__ret"} boogie_si_record_i32($i49);
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i49, 0);
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i50 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p25, $mul.ref($i28, 32)), $mul.ref(12, 1));
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.7, $p55);
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 257} $i57 := mxl111sf_config_mpeg_in($p23, 1, 1, $i56, 0, 0);
    call {:si_unique_call 258} {:cexpr "ret"} boogie_si_record_i32($i57);
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    $i58 := $slt.i32($i57, 0);
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    $i59 := $zext.i1.i32($i58);
    call {:si_unique_call 259} {:cexpr "__ret___0"} boogie_si_record_i32($i59);
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    $i60 := $ne.i32($i59, 0);
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i60 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i65 := $i57;
    goto $bb18;

  $bb12:
    assume $i60 == 1;
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    $i61 := $M.10;
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    $i62 := $and.i32($i61, 16);
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    $i63 := $ne.i32($i62, 0);
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i63 == 1);
    goto $bb14;

  $bb15:
    assume $i63 == 1;
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 260} vslice_dummy_var_44 := printk.ref.ref.i32.i32(.str.5, .str.75, $i57, 357);
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb6:
    assume $i50 == 1;
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    $i51 := $M.10;
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    $i52 := $and.i32($i51, 16);
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i53 == 1);
    goto $bb8;

  $bb9:
    assume $i53 == 1;
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 256} vslice_dummy_var_43 := printk.ref.ref.i32.i32(.str.5, .str.75, $i47, 353);
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb1:
    assume $i45 == 1;
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 252} __dynamic_pr_debug.ref.ref.ref.i32($p2, .str.52, .str.75, $i1);
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mxl111sf_ep4_streaming_ctrl: ref;

axiom mxl111sf_ep4_streaming_ctrl == $sub.ref(0, 320164);

procedure mxl111sf_ep4_streaming_ctrl($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, $M.7, $M.15;



implementation mxl111sf_ep4_streaming_ctrl($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i24;
  var $i31: i24;
  var $i32: i24;
  var $p33: ref;
  var $p34: ref;
  var $i35: i8;
  var $i36: i64;
  var $i37: i64;
  var $i38: i64;
  var $i39: i1;
  var $i40: i1;
  var $i41: i32;
  var $i42: i1;
  var $i43: i32;
  var $i44: i1;
  var $i45: i32;
  var $i46: i32;
  var $i47: i1;
  var $i49: i32;
  var vslice_dummy_var_45: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 261} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 262} {:cexpr "mxl111sf_ep4_streaming_ctrl:arg:onoff"} boogie_si_record_i32($i1);
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1584)), $mul.ref(784, 1));
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.8, $p3);
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 256)), $mul.ref(56, 1));
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.8, $p5);
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 1584)), $mul.ref(784, 1));
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.8, $p9);
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 256)), $mul.ref(56, 1));
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.8, $p11);
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 2400)), $mul.ref(320, 1));
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.8, $p14);
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i64($i15);
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    $i17 := $mul.i64($i16, 2400);
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    $i18 := $add.i64($i17, 2344);
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    $i19 := $sub.i64(0, $i18);
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p8, $mul.ref($i19, 7456)), $mul.ref(7448, 1));
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.8, $p21);
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p24, .str.2);
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p25, .str.108);
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p26, .str.3);
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p27, .str.52);
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    $i30 := $load.i24($M.5, $p29);
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    $i31 := $and.i24($i30, $sub.i24(0, 262144));
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    $i32 := $or.i24($i31, 399);
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p29, $i32);
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p33, 0);
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.6, $p34);
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i64($i35);
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    $i37 := $and.i64($i36, 1);
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 263} $i38 := ldv__builtin_expect($i37, 0);
    call {:si_unique_call 264} {:cexpr "tmp"} boogie_si_record_i64($i38);
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    $i39 := $ne.i64($i38, 0);
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i1, 0);
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    $i49 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    $r := $i49;
    return;

  $bb4:
    assume $i40 == 1;
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 266} $i41 := mxl111sf_enable_usb_output($p23);
    call {:si_unique_call 267} {:cexpr "ret"} boogie_si_record_i32($i41);
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    $i42 := $slt.i32($i41, 0);
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    $i43 := $zext.i1.i32($i42);
    call {:si_unique_call 268} {:cexpr "__ret"} boogie_si_record_i32($i43);
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 0);
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i49 := $i41;
    goto $bb12;

  $bb6:
    assume $i44 == 1;
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    $i45 := $M.10;
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    $i46 := $and.i32($i45, 16);
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i46, 0);
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i47 == 1);
    goto $bb8;

  $bb9:
    assume $i47 == 1;
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 269} vslice_dummy_var_45 := printk.ref.ref.i32.i32(.str.5, .str.108, $i41, 403);
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb1:
    assume $i39 == 1;
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 265} __dynamic_pr_debug.ref.ref.ref.i32($p2, .str.52, .str.108, $i1);
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mxl111sf_ep5_streaming_ctrl: ref;

axiom mxl111sf_ep5_streaming_ctrl == $sub.ref(0, 321196);

procedure mxl111sf_ep5_streaming_ctrl($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.15, $CurrAddr;



implementation mxl111sf_ep5_streaming_ctrl($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i24;
  var $i31: i24;
  var $i32: i24;
  var $p33: ref;
  var $p34: ref;
  var $i35: i8;
  var $i36: i64;
  var $i37: i64;
  var $i38: i64;
  var $i39: i1;
  var $i40: i1;
  var $i41: i32;
  var $i42: i1;
  var $i43: i32;
  var $i44: i1;
  var $i45: i32;
  var $i46: i32;
  var $i47: i1;
  var $i49: i32;
  var $i50: i1;
  var $i51: i32;
  var $i52: i1;
  var $i53: i32;
  var $i54: i32;
  var $i55: i1;
  var $i57: i32;
  var $i58: i1;
  var $i59: i32;
  var $i60: i1;
  var $i61: i32;
  var $i62: i32;
  var $i63: i1;
  var $i66: i32;
  var $i67: i1;
  var $i68: i32;
  var $i69: i1;
  var $i70: i32;
  var $i71: i32;
  var $i72: i1;
  var $i65: i32;
  var $p74: ref;
  var $i75: i8;
  var $i76: i32;
  var $i77: i1;
  var $i78: i32;
  var $i79: i32;
  var $i80: i1;
  var $i81: i32;
  var $i82: i1;
  var $i83: i32;
  var $i84: i32;
  var $i85: i1;
  var vslice_dummy_var_46: i32;
  var vslice_dummy_var_47: i32;
  var vslice_dummy_var_48: i32;
  var vslice_dummy_var_49: i32;
  var vslice_dummy_var_50: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 270} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 271} {:cexpr "mxl111sf_ep5_streaming_ctrl:arg:onoff"} boogie_si_record_i32($i1);
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1584)), $mul.ref(784, 1));
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.8, $p3);
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 256)), $mul.ref(56, 1));
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.8, $p5);
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 1584)), $mul.ref(784, 1));
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.8, $p9);
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 256)), $mul.ref(56, 1));
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.8, $p11);
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 2400)), $mul.ref(320, 1));
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.8, $p14);
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i64($i15);
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    $i17 := $mul.i64($i16, 2400);
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    $i18 := $add.i64($i17, 2344);
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    $i19 := $sub.i64(0, $i18);
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p8, $mul.ref($i19, 7456)), $mul.ref(7448, 1));
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.8, $p21);
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p24, .str.2);
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p25, .str.51);
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p26, .str.3);
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p27, .str.52);
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    $i30 := $load.i24($M.5, $p29);
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    $i31 := $and.i24($i30, $sub.i24(0, 262144));
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    $i32 := $or.i24($i31, 373);
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p29, $i32);
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p33, 0);
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.6, $p34);
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i64($i35);
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    $i37 := $and.i64($i36, 1);
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 272} $i38 := ldv__builtin_expect($i37, 0);
    call {:si_unique_call 273} {:cexpr "tmp"} boogie_si_record_i64($i38);
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    $i39 := $ne.i64($i38, 0);
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i1, 0);
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i40 == 1);
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 278} $i66 := mxl111sf_disable_i2s_port($p23);
    call {:si_unique_call 279} {:cexpr "ret"} boogie_si_record_i32($i66);
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    $i67 := $slt.i32($i66, 0);
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    $i68 := $zext.i1.i32($i67);
    call {:si_unique_call 280} {:cexpr "__ret___2"} boogie_si_record_i32($i68);
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    $i69 := $ne.i32($i68, 0);
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i69 == 1);
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i65 := $i66;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p23, $mul.ref(0, 368)), $mul.ref(15, 1));
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    $i75 := $load.i8($M.7, $p74);
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    $i76 := $zext.i8.i32($i75);
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    $i77 := $ugt.i32($i76, 1);
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    assume {:branchcond $i77} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    $i79 := $i65;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    $i80 := $slt.i32($i79, 0);
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    $i81 := $zext.i1.i32($i80);
    call {:si_unique_call 293} {:cexpr "__ret___3"} boogie_si_record_i32($i81);
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    $i82 := $ne.i32($i81, 0);
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    assume {:branchcond $i82} true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i82 == 1);
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $r := $i79;
    return;

  $bb34:
    assume $i82 == 1;
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    $i83 := $M.10;
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    $i84 := $and.i32($i83, 16);
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    $i85 := $ne.i32($i84, 0);
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    assume {:branchcond $i85} true;
    goto $bb37, $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume !($i85 == 1);
    goto $bb36;

  $bb37:
    assume $i85 == 1;
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 294} vslice_dummy_var_50 := printk.ref.ref.i32.i32(.str.5, .str.51, $i79, 389);
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb31:
    assume $i77 == 1;
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 291} $i78 := mxl111sf_config_spi($p23, $i1);
    call {:si_unique_call 292} {:cexpr "ret"} boogie_si_record_i32($i78);
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    $i79 := $i78;
    goto $bb33;

  $bb25:
    assume $i69 == 1;
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    $i70 := $M.10;
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    $i71 := $and.i32($i70, 16);
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    $i72 := $ne.i32($i71, 0);
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    assume {:branchcond $i72} true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i72 == 1);
    goto $bb27;

  $bb28:
    assume $i72 == 1;
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 290} vslice_dummy_var_49 := printk.ref.ref.i32.i32(.str.5, .str.51, $i66, 385);
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb4:
    assume $i40 == 1;
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} $i41 := mxl111sf_enable_usb_output($p23);
    call {:si_unique_call 276} {:cexpr "ret"} boogie_si_record_i32($i41);
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    $i42 := $slt.i32($i41, 0);
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    $i43 := $zext.i1.i32($i42);
    call {:si_unique_call 277} {:cexpr "__ret"} boogie_si_record_i32($i43);
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 0);
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} $i49 := mxl111sf_init_i2s_port($p23, $sub.i8(0, 56));
    call {:si_unique_call 283} {:cexpr "ret"} boogie_si_record_i32($i49);
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    $i50 := $slt.i32($i49, 0);
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    $i51 := $zext.i1.i32($i50);
    call {:si_unique_call 284} {:cexpr "__ret___0"} boogie_si_record_i32($i51);
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, 0);
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i52 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} $i57 := mxl111sf_config_i2s($p23, 0, 15);
    call {:si_unique_call 287} {:cexpr "ret"} boogie_si_record_i32($i57);
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    $i58 := $slt.i32($i57, 0);
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    $i59 := $zext.i1.i32($i58);
    call {:si_unique_call 288} {:cexpr "__ret___1"} boogie_si_record_i32($i59);
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    $i60 := $ne.i32($i59, 0);
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i60 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i65 := $i57;
    goto $bb24;

  $bb18:
    assume $i60 == 1;
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    $i61 := $M.10;
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    $i62 := $and.i32($i61, 16);
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    $i63 := $ne.i32($i62, 0);
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i63 == 1);
    goto $bb20;

  $bb21:
    assume $i63 == 1;
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 289} vslice_dummy_var_48 := printk.ref.ref.i32.i32(.str.5, .str.51, $i57, 382);
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb12:
    assume $i52 == 1;
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    $i53 := $M.10;
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    $i54 := $and.i32($i53, 16);
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i54, 0);
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i55 == 1);
    goto $bb14;

  $bb15:
    assume $i55 == 1;
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 285} vslice_dummy_var_47 := printk.ref.ref.i32.i32(.str.5, .str.51, $i49, 380);
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb6:
    assume $i44 == 1;
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    $i45 := $M.10;
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    $i46 := $and.i32($i45, 16);
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i46, 0);
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i47 == 1);
    goto $bb8;

  $bb9:
    assume $i47 == 1;
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 281} vslice_dummy_var_46 := printk.ref.ref.i32.i32(.str.5, .str.51, $i41, 377);
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb1:
    assume $i39 == 1;
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 274} __dynamic_pr_debug.ref.ref.ref.i32($p2, .str.52, .str.51, $i1);
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mxl111sf_enable_usb_output: ref;

axiom mxl111sf_enable_usb_output == $sub.ref(0, 322228);

procedure mxl111sf_enable_usb_output($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $M.15, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation mxl111sf_enable_usb_output($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i4: i32;
  var vslice_dummy_var_51: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    $i1 := $M.10;
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 296} $i4 := mxl111sf_write_reg_mask($p0, 23, 64, 0);
    call {:si_unique_call 297} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 295} vslice_dummy_var_51 := printk.ref.ref(.str.17, .str.27);
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mxl111sf_init_i2s_port: ref;

axiom mxl111sf_init_i2s_port == $sub.ref(0, 323260);

procedure mxl111sf_init_i2s_port($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $M.15, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation mxl111sf_init_i2s_port($p0: ref, $i1: i8) returns ($r: i32)
{
  var $p2: ref;
  var $p4: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $p12: ref;
  var $p14: ref;
  var $p16: ref;
  var $p18: ref;
  var $p20: ref;
  var $p22: ref;
  var $p24: ref;
  var $p26: ref;
  var $p28: ref;
  var $p30: ref;
  var $p32: ref;
  var $p34: ref;
  var $p36: ref;
  var $p38: ref;
  var $p40: ref;
  var $p42: ref;
  var $p44: ref;
  var $i45: i32;
  var $i46: i1;
  var $i47: i32;
  var $p49: ref;
  var $i50: i32;
  var $i51: i1;
  var $i52: i32;
  var $i53: i1;
  var $i54: i32;
  var $i55: i32;
  var $i56: i1;
  var $i58: i1;
  var $i60: i32;
  var $i61: i8;
  var $i62: i32;
  var $i63: i1;
  var $i64: i32;
  var $i65: i1;
  var $i66: i32;
  var $i67: i32;
  var $i68: i1;
  var $i59: i32;
  var vslice_dummy_var_52: i32;
  var vslice_dummy_var_53: i32;
  var vslice_dummy_var_54: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 298} $p2 := $alloc($mul.ref(21, $zext.i32.i64(1)));
    call {:si_unique_call 299} {:cexpr "mxl111sf_init_i2s_port:arg:sample_size"} boogie_si_record_i8($i1);
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 21)), $mul.ref(0, 3)), $mul.ref(0, 1));
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p4, 27);
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 21)), $mul.ref(0, 3)), $mul.ref(1, 1));
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p6, $sub.i8(0, 1));
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 21)), $mul.ref(0, 3)), $mul.ref(2, 1));
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p8, 30);
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 21)), $mul.ref(1, 3)), $mul.ref(0, 1));
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p10, 21);
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 21)), $mul.ref(1, 3)), $mul.ref(1, 1));
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p12, 96);
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 21)), $mul.ref(1, 3)), $mul.ref(2, 1));
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p14, 96);
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 21)), $mul.ref(2, 3)), $mul.ref(0, 1));
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p16, 23);
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 21)), $mul.ref(2, 3)), $mul.ref(1, 1));
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p18, $sub.i8(0, 32));
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 21)), $mul.ref(2, 3)), $mul.ref(2, 1));
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p20, 32);
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 21)), $mul.ref(3, 3)), $mul.ref(0, 1));
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p22, 0);
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 21)), $mul.ref(3, 3)), $mul.ref(1, 1));
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p24, $sub.i8(0, 1));
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 21)), $mul.ref(3, 3)), $mul.ref(2, 1));
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p26, 2);
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 21)), $mul.ref(4, 3)), $mul.ref(0, 1));
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p28, 38);
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 21)), $mul.ref(4, 3)), $mul.ref(1, 1));
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p30, 13);
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 21)), $mul.ref(4, 3)), $mul.ref(2, 1));
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p32, 13);
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 21)), $mul.ref(5, 3)), $mul.ref(0, 1));
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p34, 0);
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 21)), $mul.ref(5, 3)), $mul.ref(1, 1));
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p36, $sub.i8(0, 1));
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 21)), $mul.ref(5, 3)), $mul.ref(2, 1));
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p38, 0);
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 21)), $mul.ref(6, 3)), $mul.ref(0, 1));
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p40, 0);
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 21)), $mul.ref(6, 3)), $mul.ref(1, 1));
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p42, 0);
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 21)), $mul.ref(6, 3)), $mul.ref(2, 1));
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p44, 0);
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    $i45 := $M.10;
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p2);
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 301} $i50 := mxl111sf_ctrl_program_regs($p0, $p49);
    call {:si_unique_call 302} {:cexpr "ret"} boogie_si_record_i32($i50);
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    $i51 := $slt.i32($i50, 0);
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    $i52 := $zext.i1.i32($i51);
    call {:si_unique_call 303} {:cexpr "__ret"} boogie_si_record_i32($i52);
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i53 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i58 := $ne.i32($i52, 0);
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i60 := $zext.i8.i32($i1);
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    $i61 := $trunc.i32.i8($i60);
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 305} $i62 := mxl111sf_write_reg($p0, 22, $i61);
    call {:si_unique_call 306} {:cexpr "ret"} boogie_si_record_i32($i62);
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    $i63 := $slt.i32($i62, 0);
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    $i64 := $zext.i1.i32($i63);
    call {:si_unique_call 307} {:cexpr "__ret___0"} boogie_si_record_i32($i64);
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    $i65 := $ne.i32($i64, 0);
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i65 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i59 := $i62;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    $r := $i59;
    return;

  $bb14:
    assume $i65 == 1;
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    $i66 := $M.10;
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    $i67 := $and.i32($i66, 16);
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    $i68 := $ne.i32($i67, 0);
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    assume {:branchcond $i68} true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i68 == 1);
    goto $bb16;

  $bb17:
    assume $i68 == 1;
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} vslice_dummy_var_54 := printk.ref.ref.i32.i32(.str.5, .str.31, $i62, 227);
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb10:
    assume $i58 == 1;
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    $i59 := $i50;
    goto $bb12;

  $bb4:
    assume $i53 == 1;
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    $i54 := $M.10;
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    $i55 := $and.i32($i54, 16);
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 0);
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i56 == 1);
    goto $bb6;

  $bb7:
    assume $i56 == 1;
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 304} vslice_dummy_var_53 := printk.ref.ref.i32.i32(.str.5, .str.31, $i50, 223);
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i46 == 1;
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i1);
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 300} vslice_dummy_var_52 := printk.ref.ref.i32(.str.30, .str.31, $i47);
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mxl111sf_config_i2s: ref;

axiom mxl111sf_config_i2s == $sub.ref(0, 324292);

procedure mxl111sf_config_i2s($p0: ref, $i1: i8, $i2: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.15, $M.7, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation mxl111sf_config_i2s($p0: ref, $i1: i8, $i2: i8) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i32;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i17: i1;
  var $i19: i8;
  var $i20: i32;
  var $i21: i32;
  var $i22: i8;
  var $i23: i8;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $i27: i8;
  var $i28: i8;
  var $i29: i32;
  var $i30: i8;
  var $i31: i32;
  var $i32: i1;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i32;
  var $i37: i1;
  var $i39: i1;
  var $i40: i32;
  var $i41: i1;
  var $i42: i32;
  var $i43: i1;
  var $i44: i32;
  var $i45: i32;
  var $i46: i1;
  var $i48: i1;
  var $i49: i8;
  var $i50: i32;
  var $i51: i32;
  var $i52: i8;
  var $i53: i8;
  var $i54: i32;
  var $i55: i32;
  var $i56: i32;
  var $i57: i8;
  var $i58: i8;
  var $i59: i32;
  var $i60: i8;
  var $i61: i32;
  var $i62: i1;
  var $i63: i32;
  var $i64: i1;
  var $i65: i32;
  var $i66: i32;
  var $i67: i1;
  var $i18: i32;
  var vslice_dummy_var_55: i32;
  var vslice_dummy_var_56: i32;
  var vslice_dummy_var_57: i32;
  var vslice_dummy_var_58: i32;
  var vslice_dummy_var_59: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 309} $p3 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 310} {:cexpr "mxl111sf_config_i2s:arg:msb_start_pos"} boogie_si_record_i8($i1);
    call {:si_unique_call 311} {:cexpr "mxl111sf_config_i2s:arg:data_width"} boogie_si_record_i8($i2);
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    $i4 := $M.10;
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 313} $i9 := mxl111sf_read_reg($p0, 20, $p3);
    call {:si_unique_call 314} {:cexpr "ret"} boogie_si_record_i32($i9);
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i9, 0);
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    call {:si_unique_call 315} {:cexpr "__ret"} boogie_si_record_i32($i11);
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i11, 0);
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.7, $p3);
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    $i21 := $and.i32($i20, 224);
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i32.i8($i21);
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p3, $i22);
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.7, $p3);
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i1);
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    $i26 := $or.i32($i24, $i25);
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i32.i8($i26);
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p3, $i27);
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.7, $p3);
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i32.i8($i29);
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 317} $i31 := mxl111sf_write_reg($p0, 20, $i30);
    call {:si_unique_call 318} {:cexpr "ret"} boogie_si_record_i32($i31);
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    $i32 := $slt.i32($i31, 0);
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    $i33 := $zext.i1.i32($i32);
    call {:si_unique_call 319} {:cexpr "__ret___0"} boogie_si_record_i32($i33);
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i33, 0);
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 321} $i40 := mxl111sf_read_reg($p0, 21, $p3);
    call {:si_unique_call 322} {:cexpr "ret"} boogie_si_record_i32($i40);
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    $i41 := $slt.i32($i40, 0);
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    $i42 := $zext.i1.i32($i41);
    call {:si_unique_call 323} {:cexpr "__ret___1"} boogie_si_record_i32($i42);
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, 0);
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i43 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i42, 0);
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i49 := $load.i8($M.7, $p3);
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i32($i49);
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    $i51 := $and.i32($i50, 224);
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    $i52 := $trunc.i32.i8($i51);
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p3, $i52);
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.7, $p3);
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    $i54 := $zext.i8.i32($i53);
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    $i55 := $zext.i8.i32($i2);
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    $i56 := $or.i32($i54, $i55);
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    $i57 := $trunc.i32.i8($i56);
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p3, $i57);
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    $i58 := $load.i8($M.7, $p3);
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    $i59 := $zext.i8.i32($i58);
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    $i60 := $trunc.i32.i8($i59);
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 325} $i61 := mxl111sf_write_reg($p0, 21, $i60);
    call {:si_unique_call 326} {:cexpr "ret"} boogie_si_record_i32($i61);
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    $i62 := $slt.i32($i61, 0);
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    $i63 := $zext.i1.i32($i62);
    call {:si_unique_call 327} {:cexpr "__ret___2"} boogie_si_record_i32($i63);
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    $i64 := $ne.i32($i63, 0);
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    assume {:branchcond $i64} true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i64 == 1);
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i18 := $i61;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb32:
    assume $i64 == 1;
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    $i65 := $M.10;
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    $i66 := $and.i32($i65, 16);
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    $i67 := $ne.i32($i66, 0);
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    assume {:branchcond $i67} true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i67 == 1);
    goto $bb34;

  $bb35:
    assume $i67 == 1;
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 328} vslice_dummy_var_59 := printk.ref.ref.i32.i32(.str.5, .str.34, $i61, 269);
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb29:
    assume $i48 == 1;
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    $i18 := $i40;
    goto $bb12;

  $bb23:
    assume $i43 == 1;
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    $i44 := $M.10;
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    $i45 := $and.i32($i44, 16);
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb25;

  $bb26:
    assume $i46 == 1;
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} vslice_dummy_var_58 := printk.ref.ref.i32.i32(.str.5, .str.34, $i40, 263);
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb20:
    assume $i39 == 1;
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    $i18 := $i31;
    goto $bb12;

  $bb14:
    assume $i34 == 1;
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    $i35 := $M.10;
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    $i36 := $and.i32($i35, 16);
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb16;

  $bb17:
    assume $i37 == 1;
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 320} vslice_dummy_var_57 := printk.ref.ref.i32.i32(.str.5, .str.34, $i31, 259);
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb10:
    assume $i17 == 1;
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    $i18 := $i9;
    goto $bb12;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    $i13 := $M.10;
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, 16);
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb6;

  $bb7:
    assume $i15 == 1;
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 316} vslice_dummy_var_56 := printk.ref.ref.i32.i32(.str.5, .str.34, $i9, 253);
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i1);
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i2);
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 312} vslice_dummy_var_55 := printk.ref.ref.i32.i32(.str.33, .str.34, $i6, $i7);
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mxl111sf_disable_i2s_port: ref;

axiom mxl111sf_disable_i2s_port == $sub.ref(0, 325324);

procedure mxl111sf_disable_i2s_port($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $CurrAddr, $M.15, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6;



implementation mxl111sf_disable_i2s_port($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p3: ref;
  var $p5: ref;
  var $p7: ref;
  var $p9: ref;
  var $p11: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p17: ref;
  var $i18: i32;
  var vslice_dummy_var_60: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 329} $p1 := $alloc($mul.ref(6, $zext.i32.i64(1)));
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(0, 3)), $mul.ref(0, 1));
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p3, 21);
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(0, 3)), $mul.ref(1, 1));
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p5, 64);
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(0, 3)), $mul.ref(2, 1));
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p7, 0);
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(1, 3)), $mul.ref(0, 1));
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p9, 0);
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(1, 3)), $mul.ref(1, 1));
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p11, 0);
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(1, 3)), $mul.ref(2, 1));
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p13, 0);
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    $i14 := $M.10;
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p1);
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 331} $i18 := mxl111sf_ctrl_program_regs($p0, $p17);
    call {:si_unique_call 332} {:cexpr "tmp"} boogie_si_record_i32($i18);
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 330} vslice_dummy_var_60 := printk.ref.ref(.str.17, .str.32);
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mxl111sf_config_spi: ref;

axiom mxl111sf_config_spi == $sub.ref(0, 326356);

procedure mxl111sf_config_spi($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.15, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr;



implementation mxl111sf_config_spi($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $i14: i1;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i8;
  var $i27: i32;
  var $i28: i32;
  var $i29: i8;
  var $i30: i8;
  var $i31: i32;
  var $i32: i32;
  var $i33: i8;
  var $i34: i8;
  var $i35: i32;
  var $i36: i8;
  var $i37: i32;
  var $i38: i1;
  var $i39: i32;
  var $i40: i1;
  var $i41: i32;
  var $i42: i32;
  var $i43: i1;
  var $i45: i1;
  var $i46: i32;
  var $i47: i1;
  var $i48: i32;
  var $i49: i1;
  var $i50: i32;
  var $i51: i32;
  var $i52: i1;
  var $i15: i32;
  var vslice_dummy_var_61: i32;
  var vslice_dummy_var_62: i32;
  var vslice_dummy_var_63: i32;
  var vslice_dummy_var_64: i32;
  var vslice_dummy_var_65: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 333} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 334} {:cexpr "mxl111sf_config_spi:arg:onoff"} boogie_si_record_i32($i1);
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    $i3 := $M.10;
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} $i6 := mxl111sf_write_reg($p0, 0, 2);
    call {:si_unique_call 337} {:cexpr "ret"} boogie_si_record_i32($i6);
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i6, 0);
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    call {:si_unique_call 338} {:cexpr "__ret"} boogie_si_record_i32($i8);
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i8, 0);
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 340} $i16 := mxl111sf_read_reg($p0, $sub.i8(0, 23), $p2);
    call {:si_unique_call 341} {:cexpr "ret"} boogie_si_record_i32($i16);
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i16, 0);
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    $i18 := $zext.i1.i32($i17);
    call {:si_unique_call 342} {:cexpr "__ret___0"} boogie_si_record_i32($i18);
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i18, 0);
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i1, 0);
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i25 == 1);
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.7, $p2);
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i32($i30);
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    $i32 := $and.i32($i31, 251);
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i32.i8($i32);
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p2, $i33);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.7, $p2);
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i34);
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i32.i8($i35);
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} $i37 := mxl111sf_write_reg($p0, $sub.i8(0, 23), $i36);
    call {:si_unique_call 345} {:cexpr "ret"} boogie_si_record_i32($i37);
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    $i38 := $slt.i32($i37, 0);
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    $i39 := $zext.i1.i32($i38);
    call {:si_unique_call 346} {:cexpr "__ret___1"} boogie_si_record_i32($i39);
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i39, 0);
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} $i46 := mxl111sf_write_reg($p0, 0, 0);
    call {:si_unique_call 349} {:cexpr "ret"} boogie_si_record_i32($i46);
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    $i47 := $slt.i32($i46, 0);
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    $i48 := $zext.i1.i32($i47);
    call {:si_unique_call 350} {:cexpr "__ret___2"} boogie_si_record_i32($i48);
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    $i49 := $ne.i32($i48, 0);
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i49 == 1);
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i15 := $i46;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb35:
    assume $i49 == 1;
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    $i50 := $M.10;
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    $i51 := $and.i32($i50, 16);
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, 0);
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb38, $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume !($i52 == 1);
    goto $bb37;

  $bb38:
    assume $i52 == 1;
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 351} vslice_dummy_var_65 := printk.ref.ref.i32.i32(.str.5, .str.35, $i46, 299);
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb32:
    assume $i45 == 1;
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    $i15 := $i37;
    goto $bb12;

  $bb26:
    assume $i40 == 1;
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    $i41 := $M.10;
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    $i42 := $and.i32($i41, 16);
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, 0);
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i43 == 1);
    goto $bb28;

  $bb29:
    assume $i43 == 1;
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 347} vslice_dummy_var_64 := printk.ref.ref.i32.i32(.str.5, .str.35, $i37, 295);
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb23:
    assume $i25 == 1;
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.7, $p2);
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    $i28 := $or.i32($i27, 4);
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i32.i8($i28);
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p2, $i29);
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb20:
    assume $i24 == 1;
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    $i15 := $i16;
    goto $bb12;

  $bb14:
    assume $i19 == 1;
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    $i20 := $M.10;
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    $i21 := $and.i32($i20, 16);
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb16;

  $bb17:
    assume $i22 == 1;
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 343} vslice_dummy_var_63 := printk.ref.ref.i32.i32(.str.5, .str.35, $i16, 286);
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb10:
    assume $i14 == 1;
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    $i15 := $i6;
    goto $bb12;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    $i10 := $M.10;
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 16);
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb6;

  $bb7:
    assume $i12 == 1;
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} vslice_dummy_var_62 := printk.ref.ref.i32.i32(.str.5, .str.35, $i6, 282);
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} vslice_dummy_var_61 := printk.ref.ref.i32(.str.24, .str.35, $i1);
    goto corral_source_split_2392;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mxl111sf_ctrl_program_regs: ref;

axiom mxl111sf_ctrl_program_regs == $sub.ref(0, 327388);

procedure mxl111sf_ctrl_program_regs($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $M.15, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation mxl111sf_ctrl_program_regs($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i4: i64;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $i9: i8;
  var $i10: i64;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $i15: i8;
  var $i16: i64;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i8;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $i30: i1;
  var $i31: i32;
  var $i32: i32;
  var $i33: i64;
  var $p35: ref;
  var $i36: i8;
  var $i37: i32;
  var $i40: i32;
  var $i2: i32;
  var $i3: i32;
  var $i41: i64;
  var $p43: ref;
  var $i44: i8;
  var $i45: i32;
  var $i46: i64;
  var $p48: ref;
  var $i49: i8;
  var $i50: i32;
  var $i51: i32;
  var $i52: i64;
  var $p54: ref;
  var $i55: i8;
  var $i56: i32;
  var $i57: i32;
  var $i58: i1;
  var $i59: i32;
  var $i39: i32;
  var vslice_dummy_var_66: i32;
  var vslice_dummy_var_67: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    $i2, $i3 := 0, 0;
    goto $bb1;

  $bb1:
    call $i4, $p6, $i7, $i8, $i9, $i10, $p12, $i13, $i14, $i15, $i16, $p18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i30, $i31, $i32, $i40, $i2, $i3, $i41, $p43, $i44, $i45, $i46, $p48, $i49, $i50, $i51, $i52, $p54, $i55, $i56, $i57, $i58, $i59, vslice_dummy_var_66 := mxl111sf_ctrl_program_regs_loop_$bb1($p0, $p1, $i4, $p6, $i7, $i8, $i9, $i10, $p12, $i13, $i14, $i15, $i16, $p18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i30, $i31, $i32, $i40, $i2, $i3, $i41, $p43, $i44, $i45, $i46, $p48, $i49, $i50, $i51, $i52, $p54, $i55, $i56, $i57, $i58, $i59, vslice_dummy_var_66);
    goto $bb1_last;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    $i41 := $sext.i32.i64($i2);
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p1, $mul.ref($i41, 3)), $mul.ref(0, 1));
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.7, $p43);
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i44);
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    $i46 := $sext.i32.i64($i2);
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p1, $mul.ref($i46, 3)), $mul.ref(1, 1));
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    $i49 := $load.i8($M.7, $p48);
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i32($i49);
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    $i51 := $or.i32($i45, $i50);
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    $i52 := $sext.i32.i64($i2);
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p1, $mul.ref($i52, 3)), $mul.ref(2, 1));
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    $i55 := $load.i8($M.7, $p54);
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    $i56 := $zext.i8.i32($i55);
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    $i57 := $or.i32($i51, $i56);
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    $i58 := $ne.i32($i57, 0);
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    $i59 := $i3;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i39 := $i59;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    $r := $i39;
    return;

  $bb13:
    assume $i58 == 1;
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i2);
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref($i4, 3)), $mul.ref(0, 1));
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.7, $p6);
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i8($i8);
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i2);
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref($i10, 3)), $mul.ref(1, 1));
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.7, $p12);
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i32.i8($i14);
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i2);
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref($i16, 3)), $mul.ref(2, 1));
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.7, $p18);
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i32.i8($i20);
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 352} $i22 := mxl111sf_write_reg_mask($p0, $i9, $i15, $i21);
    call {:si_unique_call 353} {:cexpr "ret"} boogie_si_record_i32($i22);
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i22, 0);
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i32($i23);
    call {:si_unique_call 354} {:cexpr "__ret"} boogie_si_record_i32($i24);
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i24, 0);
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    $i31, $i32 := $i2, $i22;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i40 := $add.i32($i2, 1);
    call {:si_unique_call 357} {:cexpr "i"} boogie_si_record_i32($i40);
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    $i2, $i3 := $i40, $i22;
    goto corral_source_split_2543_dummy;

  $bb9:
    assume $i30 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    $i33 := $sext.i32.i64($i31);
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref($i33, 3)), $mul.ref(0, 1));
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.7, $p35);
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i36);
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 356} vslice_dummy_var_67 := printk.ref.i32.i32(.str.16, $i31, $i37);
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    $i39 := $i32;
    goto $bb11;

  $bb3:
    assume $i25 == 1;
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    $i26 := $M.10;
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    $i27 := $and.i32($i26, 16);
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb5;

  $bb6:
    assume $i28 == 1;
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 355} vslice_dummy_var_66 := printk.ref.ref.i32.i32(.str.5, .str.15, $i22, 171);
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_2543_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2480;
}



const mxl111sf_write_reg_mask: ref;

axiom mxl111sf_write_reg_mask == $sub.ref(0, 328420);

procedure mxl111sf_write_reg_mask($p0: ref, $i1: i8, $i2: i8, $i3: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $M.15, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation mxl111sf_write_reg_mask($p0: ref, $i1: i8, $i2: i8, $i3: i8) returns ($r: i32)
{
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i8;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i32;
  var $i20: i32;
  var $i22: i32;
  var $i23: i8;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $i32: i1;
  var $i34: i8;
  var $i35: i32;
  var $i36: i32;
  var $i37: i32;
  var $i38: i32;
  var $i39: i8;
  var $i40: i8;
  var $i41: i32;
  var $i42: i32;
  var $i43: i32;
  var $i44: i8;
  var $i45: i32;
  var $i46: i8;
  var $i47: i8;
  var $i48: i32;
  var $i49: i8;
  var $i50: i32;
  var $i51: i1;
  var $i52: i32;
  var $i53: i1;
  var $i54: i32;
  var $i55: i32;
  var $i56: i1;
  var $i33: i32;
  var vslice_dummy_var_68: i32;
  var vslice_dummy_var_69: i32;
  var vslice_dummy_var_70: i32;
  var vslice_dummy_var_71: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 358} $p4 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 359} {:cexpr "mxl111sf_write_reg_mask:arg:addr"} boogie_si_record_i8($i1);
    call {:si_unique_call 360} {:cexpr "mxl111sf_write_reg_mask:arg:mask"} boogie_si_record_i8($i2);
    call {:si_unique_call 361} {:cexpr "mxl111sf_write_reg_mask:arg:data"} boogie_si_record_i8($i3);
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p4, 0);
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i2);
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 255);
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.7, $p4);
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    $i35 := $sext.i8.i32($i34);
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    $i36 := $sext.i8.i32($i2);
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    $i37 := $xor.i32($i36, $sub.i32(0, 1));
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    $i38 := $and.i32($i35, $i37);
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i32.i8($i38);
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p4, $i39);
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.7, $p4);
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i32($i40);
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i3);
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    $i43 := $or.i32($i41, $i42);
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i32.i8($i43);
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p4, $i44);
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i1);
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i32.i8($i45);
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    $i47 := $load.i8($M.7, $p4);
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i32($i47);
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    $i49 := $trunc.i32.i8($i48);
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 371} $i50 := mxl111sf_write_reg($p0, $i46, $i49);
    call {:si_unique_call 372} {:cexpr "ret"} boogie_si_record_i32($i50);
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    $i51 := $slt.i32($i50, 0);
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    $i52 := $zext.i1.i32($i51);
    call {:si_unique_call 373} {:cexpr "__ret___1"} boogie_si_record_i32($i52);
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i53 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i33 := $i50;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    $r := $i33;
    return;

  $bb23:
    assume $i53 == 1;
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    $i54 := $M.10;
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    $i55 := $and.i32($i54, 16);
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 0);
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i56 == 1);
    goto $bb25;

  $bb26:
    assume $i56 == 1;
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 374} vslice_dummy_var_71 := printk.ref.ref.i32.i32(.str.5, .str.13, $i50, 151);
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i1);
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i8($i7);
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 362} $i9 := mxl111sf_read_reg($p0, $i8, $p4);
    call {:si_unique_call 363} {:cexpr "ret"} boogie_si_record_i32($i9);
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i9, 0);
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    call {:si_unique_call 364} {:cexpr "__ret"} boogie_si_record_i32($i11);
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i11, 0);
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i1);
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i32.i8($i22);
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 367} $i24 := mxl111sf_read_reg($p0, $i23, $p4);
    call {:si_unique_call 368} {:cexpr "ret"} boogie_si_record_i32($i24);
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i24, 0);
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    $i26 := $zext.i1.i32($i25);
    call {:si_unique_call 369} {:cexpr "__ret___0"} boogie_si_record_i32($i26);
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i26, 0);
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb18:
    assume $i32 == 1;
    goto corral_source_split_2593;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    $i33 := $i24;
    goto $bb20;

  $bb12:
    assume $i27 == 1;
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    $i28 := $M.10;
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i28, 16);
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb14;

  $bb15:
    assume $i30 == 1;
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 370} vslice_dummy_var_70 := printk.ref.ref.i32.i32(.str.5, .str.13, $i24, 144);
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb9:
    assume $i17 == 1;
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i1);
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i2);
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i3);
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 366} vslice_dummy_var_69 := printk.ref.i32.i32.i32(.str.14, $i18, $i19, $i20);
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb3:
    assume $i12 == 1;
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    $i13 := $M.10;
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, 16);
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb5;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 365} vslice_dummy_var_68 := printk.ref.ref.i32.i32(.str.5, .str.13, $i9, 138);
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    goto $bb8;
}



const mxl111sf_config_mpeg_in: ref;

axiom mxl111sf_config_mpeg_in == $sub.ref(0, 329452);

procedure mxl111sf_config_mpeg_in($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $i5: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.15, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr;



implementation mxl111sf_config_mpeg_in($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $i5: i32) returns ($r: i32)
{
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $i20: i1;
  var $i21: i8;
  var $i22: i32;
  var $i23: i32;
  var $i24: i8;
  var $i25: i8;
  var $i26: i32;
  var $i27: i32;
  var $i28: i8;
  var $i29: i8;
  var $i30: i32;
  var $i31: i8;
  var $i32: i32;
  var $i33: i1;
  var $i34: i32;
  var $i35: i1;
  var $i36: i32;
  var $i37: i32;
  var $i38: i1;
  var $i40: i32;
  var $i41: i1;
  var $i42: i32;
  var $i43: i1;
  var $i44: i32;
  var $i45: i32;
  var $i46: i1;
  var $i48: i1;
  var $i49: i8;
  var $i50: i32;
  var $i51: i32;
  var $i52: i8;
  var $i53: i8;
  var $i54: i32;
  var $i55: i32;
  var $i56: i8;
  var $i57: i8;
  var $i58: i32;
  var $i59: i32;
  var $i60: i8;
  var $i61: i8;
  var $i62: i32;
  var $i63: i32;
  var $i64: i8;
  var $i65: i32;
  var $i66: i1;
  var $i67: i32;
  var $i68: i1;
  var $i69: i32;
  var $i70: i32;
  var $i71: i1;
  var $i73: i1;
  var $i74: i8;
  var $i75: i32;
  var $i76: i32;
  var $i77: i8;
  var $i78: i8;
  var $i79: i32;
  var $i80: i32;
  var $i81: i8;
  var $i82: i8;
  var $i83: i32;
  var $i84: i8;
  var $i85: i32;
  var $i86: i1;
  var $i87: i32;
  var $i88: i1;
  var $i89: i32;
  var $i90: i32;
  var $i91: i1;
  var $i93: i1;
  var $i94: i8;
  var $i95: i32;
  var $i96: i32;
  var $i97: i8;
  var $i98: i8;
  var $i99: i32;
  var $i100: i32;
  var $i101: i8;
  var $i102: i1;
  var $i103: i8;
  var $i104: i32;
  var $i105: i32;
  var $i106: i8;
  var $i107: i8;
  var $i108: i32;
  var $i109: i32;
  var $i110: i8;
  var $i111: i8;
  var $i112: i32;
  var $i113: i8;
  var $i114: i32;
  var $i115: i1;
  var $i116: i32;
  var $i117: i1;
  var $i118: i32;
  var $i119: i32;
  var $i120: i1;
  var vslice_dummy_var_72: i32;
  var vslice_dummy_var_73: i32;
  var vslice_dummy_var_74: i32;
  var vslice_dummy_var_75: i32;
  var vslice_dummy_var_76: i32;
  var vslice_dummy_var_77: i32;
  var vslice_dummy_var_78: i32;
  var vslice_dummy_var_79: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 375} $p6 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} $p7 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 377} {:cexpr "mxl111sf_config_mpeg_in:arg:parallel_serial"} boogie_si_record_i32($i1);
    call {:si_unique_call 378} {:cexpr "mxl111sf_config_mpeg_in:arg:msb_lsb_1st"} boogie_si_record_i32($i2);
    call {:si_unique_call 379} {:cexpr "mxl111sf_config_mpeg_in:arg:clock_phase"} boogie_si_record_i32($i3);
    call {:si_unique_call 380} {:cexpr "mxl111sf_config_mpeg_in:arg:mpeg_valid_pol"} boogie_si_record_i32($i4);
    call {:si_unique_call 381} {:cexpr "mxl111sf_config_mpeg_in:arg:mpeg_sync_pol"} boogie_si_record_i32($i5);
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    $i8 := $M.10;
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 383} $i11 := mxl111sf_write_reg($p0, 27, 30);
    call {:si_unique_call 384} {:cexpr "ret"} boogie_si_record_i32($i11);
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i11, 0);
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i12);
    call {:si_unique_call 385} {:cexpr "__ret"} boogie_si_record_i32($i13);
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} vslice_dummy_var_74 := mxl111sf_read_reg($p0, 23, $p6);
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i3, 0);
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i20 == 1);
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.7, $p6);
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i25);
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    $i27 := $or.i32($i26, 32);
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i32.i8($i27);
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p6, $i28);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.7, $p6);
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i29);
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i32.i8($i30);
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 388} $i32 := mxl111sf_write_reg($p0, 23, $i31);
    call {:si_unique_call 389} {:cexpr "ret"} boogie_si_record_i32($i32);
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    $i33 := $slt.i32($i32, 0);
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    $i34 := $zext.i1.i32($i33);
    call {:si_unique_call 390} {:cexpr "__ret___0"} boogie_si_record_i32($i34);
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i35 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} $i40 := mxl111sf_read_reg($p0, 24, $p6);
    call {:si_unique_call 393} {:cexpr "ret"} boogie_si_record_i32($i40);
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    $i41 := $slt.i32($i40, 0);
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    $i42 := $zext.i1.i32($i41);
    call {:si_unique_call 394} {:cexpr "__ret___1"} boogie_si_record_i32($i42);
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, 0);
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i43 == 1);
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i1, 0);
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i48 == 1);
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    $i57 := $load.i8($M.7, $p6);
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    $i58 := $zext.i8.i32($i57);
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    $i59 := $and.i32($i58, 254);
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    $i60 := $trunc.i32.i8($i59);
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p6, $i60);
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    $i61 := $load.i8($M.7, $p6);
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    $i62 := $zext.i8.i32($i61);
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    $i63 := $or.i32($i62, 2);
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    $i64 := $trunc.i32.i8($i63);
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p6, $i64);
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 396} $i65 := mxl111sf_read_reg($p0, 25, $p7);
    call {:si_unique_call 397} {:cexpr "ret"} boogie_si_record_i32($i65);
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    $i66 := $slt.i32($i65, 0);
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    $i67 := $zext.i1.i32($i66);
    call {:si_unique_call 398} {:cexpr "__ret___2"} boogie_si_record_i32($i67);
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    $i68 := $ne.i32($i67, 0);
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    assume {:branchcond $i68} true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i68 == 1);
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i73 := $eq.i32($i2, 1);
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    assume {:branchcond $i73} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i73 == 1);
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    $i78 := $load.i8($M.7, $p7);
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    $i79 := $zext.i8.i32($i78);
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    $i80 := $and.i32($i79, 127);
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    $i81 := $trunc.i32.i8($i80);
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p7, $i81);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i82 := $load.i8($M.7, $p7);
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    $i83 := $zext.i8.i32($i82);
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    $i84 := $trunc.i32.i8($i83);
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 400} $i85 := mxl111sf_write_reg($p0, 25, $i84);
    call {:si_unique_call 401} {:cexpr "ret"} boogie_si_record_i32($i85);
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    $i86 := $slt.i32($i85, 0);
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    $i87 := $zext.i1.i32($i86);
    call {:si_unique_call 402} {:cexpr "__ret___3"} boogie_si_record_i32($i87);
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    $i88 := $ne.i32($i87, 0);
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    assume {:branchcond $i88} true;
    goto $bb37, $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume !($i88 == 1);
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i93 := $eq.i32($i5, 0);
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    assume {:branchcond $i93} true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i93 == 1);
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    $i98 := $load.i8($M.7, $p6);
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    $i99 := $zext.i8.i32($i98);
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    $i100 := $or.i32($i99, 4);
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    $i101 := $trunc.i32.i8($i100);
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p6, $i101);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $i102 := $eq.i32($i4, 0);
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    assume {:branchcond $i102} true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i102 == 1);
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    $i107 := $load.i8($M.7, $p6);
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    $i108 := $zext.i8.i32($i107);
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    $i109 := $or.i32($i108, 8);
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    $i110 := $trunc.i32.i8($i109);
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p6, $i110);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $i111 := $load.i8($M.7, $p6);
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    $i112 := $zext.i8.i32($i111);
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    $i113 := $trunc.i32.i8($i112);
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 404} $i114 := mxl111sf_write_reg($p0, 24, $i113);
    call {:si_unique_call 405} {:cexpr "ret"} boogie_si_record_i32($i114);
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    $i115 := $slt.i32($i114, 0);
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    $i116 := $zext.i1.i32($i115);
    call {:si_unique_call 406} {:cexpr "__ret___4"} boogie_si_record_i32($i116);
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    $i117 := $ne.i32($i116, 0);
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    assume {:branchcond $i117} true;
    goto $bb49, $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    assume !($i117 == 1);
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $r := $i114;
    return;

  $bb49:
    assume $i117 == 1;
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    $i118 := $M.10;
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    $i119 := $and.i32($i118, 16);
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    $i120 := $ne.i32($i119, 0);
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    assume {:branchcond $i120} true;
    goto $bb52, $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    assume !($i120 == 1);
    goto $bb51;

  $bb52:
    assume $i120 == 1;
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 407} vslice_dummy_var_79 := printk.ref.ref.i32.i32(.str.5, .str.29, $i114, 197);
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb46:
    assume $i102 == 1;
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    $i103 := $load.i8($M.7, $p6);
    goto corral_source_split_2780;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    $i104 := $zext.i8.i32($i103);
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    $i105 := $and.i32($i104, 247);
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    $i106 := $trunc.i32.i8($i105);
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p6, $i106);
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb43:
    assume $i93 == 1;
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    $i94 := $load.i8($M.7, $p6);
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    $i95 := $zext.i8.i32($i94);
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    $i96 := $and.i32($i95, 251);
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    $i97 := $trunc.i32.i8($i96);
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p6, $i97);
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb37:
    assume $i88 == 1;
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    $i89 := $M.10;
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    $i90 := $and.i32($i89, 16);
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    $i91 := $ne.i32($i90, 0);
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    assume {:branchcond $i91} true;
    goto $bb40, $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    assume !($i91 == 1);
    goto $bb39;

  $bb40:
    assume $i91 == 1;
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} vslice_dummy_var_78 := printk.ref.ref.i32.i32(.str.5, .str.29, $i85, 181);
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb34:
    assume $i73 == 1;
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    $i74 := $load.i8($M.7, $p7);
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    $i75 := $zext.i8.i32($i74);
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    $i76 := $or.i32($i75, 128);
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    $i77 := $trunc.i32.i8($i76);
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p7, $i77);
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb28:
    assume $i68 == 1;
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    $i69 := $M.10;
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    $i70 := $and.i32($i69, 16);
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    $i71 := $ne.i32($i70, 0);
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    assume {:branchcond $i71} true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i71 == 1);
    goto $bb30;

  $bb31:
    assume $i71 == 1;
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 399} vslice_dummy_var_77 := printk.ref.ref.i32.i32(.str.5, .str.29, $i65, 171);
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb25:
    assume $i48 == 1;
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    $i49 := $load.i8($M.7, $p6);
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i32($i49);
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    $i51 := $and.i32($i50, 253);
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    $i52 := $trunc.i32.i8($i51);
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p6, $i52);
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.7, $p6);
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    $i54 := $zext.i8.i32($i53);
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    $i55 := $or.i32($i54, 1);
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    $i56 := $trunc.i32.i8($i55);
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p6, $i56);
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb19:
    assume $i43 == 1;
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    $i44 := $M.10;
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    $i45 := $and.i32($i44, 16);
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb21;

  $bb22:
    assume $i46 == 1;
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 395} vslice_dummy_var_76 := printk.ref.ref.i32.i32(.str.5, .str.29, $i40, 150);
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb13:
    assume $i35 == 1;
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    $i36 := $M.10;
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    $i37 := $and.i32($i36, 16);
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i38 == 1);
    goto $bb15;

  $bb16:
    assume $i38 == 1;
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 391} vslice_dummy_var_75 := printk.ref.ref.i32.i32(.str.5, .str.29, $i32, 145);
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb10:
    assume $i20 == 1;
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.7, $p6);
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i21);
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    $i23 := $and.i32($i22, 223);
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i32.i8($i23);
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p6, $i24);
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    $i15 := $M.10;
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i15, 16);
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb6;

  $bb7:
    assume $i17 == 1;
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} vslice_dummy_var_73 := printk.ref.ref.i32.i32(.str.5, .str.29, $i11, 134);
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 382} vslice_dummy_var_72 := printk.ref.ref.i32.i32.i32.i32.i32(.str.28, .str.29, $i1, $i2, $i3, $i4, $i5);
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const __symbol_get: ref;

axiom __symbol_get == $sub.ref(0, 330484);

procedure __symbol_get($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation __symbol_get($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} $p1 := external_alloc();
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const __request_module: ref;

axiom __request_module == $sub.ref(0, 331516);

procedure __request_module.i1.ref($i0: i1, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __request_module.i1.ref($i0: i1, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 409} {:cexpr "__request_module:arg:arg0"} boogie_si_record_i1($i0);
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 1} true;
    call {:si_unique_call 410} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 411} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __symbol_put: ref;

axiom __symbol_put == $sub.ref(0, 332548);

procedure __symbol_put($p0: ref);
  free requires assertsPassed;



implementation __symbol_put($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 333580);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 1} true;
    call {:si_unique_call 412} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 413} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const mxl111sf_lgdt3305_frontend_attach: ref;

axiom mxl111sf_lgdt3305_frontend_attach == $sub.ref(0, 334612);

procedure mxl111sf_lgdt3305_frontend_attach($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.15, $CurrAddr, $M.18, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25;



implementation mxl111sf_lgdt3305_frontend_attach($p0: ref, $i1: i8) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var $i6: i64;
  var $i7: i64;
  var $i8: i64;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i24;
  var $i25: i24;
  var $i26: i24;
  var $p27: ref;
  var $p28: ref;
  var $i29: i8;
  var $i30: i64;
  var $i31: i64;
  var $i32: i64;
  var $i33: i1;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $i46: i32;
  var $i47: i1;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i32;
  var $i56: i1;
  var $i57: i32;
  var $i58: i1;
  var $i59: i32;
  var $i60: i32;
  var $i61: i1;
  var $i63: i1;
  var $i65: i32;
  var $i66: i1;
  var $i67: i32;
  var $i68: i1;
  var $i69: i32;
  var $i70: i32;
  var $i71: i1;
  var $i73: i1;
  var $p74: ref;
  var $i75: i32;
  var $i76: i32;
  var $i77: i1;
  var $i78: i32;
  var $i79: i1;
  var $i80: i32;
  var $i81: i32;
  var $i82: i1;
  var $i84: i1;
  var $i85: i32;
  var $i86: i1;
  var $i87: i32;
  var $i88: i1;
  var $i89: i32;
  var $i90: i32;
  var $i91: i1;
  var $i93: i1;
  var $i94: i32;
  var $i95: i1;
  var $i96: i32;
  var $i97: i1;
  var $i98: i32;
  var $i99: i32;
  var $i100: i1;
  var $i102: i1;
  var $i103: i32;
  var $i104: i1;
  var $i105: i32;
  var $i106: i1;
  var $i107: i32;
  var $i108: i32;
  var $i109: i1;
  var $i111: i1;
  var $p112: ref;
  var $i113: i32;
  var $i114: i32;
  var $i115: i1;
  var $i116: i32;
  var $i117: i1;
  var $i118: i32;
  var $i119: i32;
  var $i120: i1;
  var $i122: i1;
  var $p123: ref;
  var $p124: ref;
  var $i125: i64;
  var $i126: i1;
  var $i127: i32;
  var $i128: i64;
  var $p129: ref;
  var $i130: i1;
  var $p133: ref;
  var $p131: ref;
  var $i135: i64;
  var $i136: i1;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $i140: i64;
  var $i141: i1;
  var $p142: ref;
  var $i145: i32;
  var $i146: i64;
  var $p148: ref;
  var $i149: i32;
  var $i150: i64;
  var $p152: ref;
  var $p153: ref;
  var $i154: i64;
  var $i155: i1;
  var $p156: ref;
  var $i157: i8;
  var $i158: i32;
  var $i159: i32;
  var $i160: i8;
  var $p161: ref;
  var $i162: i32;
  var $i163: i64;
  var $p165: ref;
  var $p166: ref;
  var $p168: ref;
  var $p169: ref;
  var $p170: ref;
  var $i171: i32;
  var $i172: i64;
  var $p174: ref;
  var $p175: ref;
  var $p177: ref;
  var $i178: i32;
  var $i179: i64;
  var $p181: ref;
  var $p182: ref;
  var $p184: ref;
  var $p185: ref;
  var $p186: ref;
  var $i187: i32;
  var $i188: i64;
  var $p190: ref;
  var $p191: ref;
  var $p193: ref;
  var $i64: i32;
  var $i194: i32;
  var vslice_dummy_var_80: i32;
  var vslice_dummy_var_81: i32;
  var vslice_dummy_var_82: i32;
  var vslice_dummy_var_83: i32;
  var vslice_dummy_var_84: i32;
  var vslice_dummy_var_85: i32;
  var vslice_dummy_var_86: i32;
  var vslice_dummy_var_87: i32;
  var vslice_dummy_var_88: i32;
  var vslice_dummy_var_89: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 415} {:cexpr "mxl111sf_lgdt3305_frontend_attach:arg:fe_id"} boogie_si_record_i8($i1);
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 2400)), $mul.ref(320, 1));
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.7, $p4);
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i64($i5);
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i6, 2400);
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    $i8 := $add.i64($i7, 2344);
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    $i9 := $sub.i64(0, $i8);
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p3, $mul.ref($i9, 7456));
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref($i9, 7456)), $mul.ref(7448, 1));
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.7, $p11);
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 368)), $mul.ref(272, 1));
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i64($i1);
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p18, .str.2);
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p19, .str.81);
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p20, .str.3);
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p21, .str.77);
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    $i24 := $load.i24($M.5, $p23);
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    $i25 := $and.i24($i24, $sub.i24(0, 262144));
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    $i26 := $or.i24($i25, 429);
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p23, $i26);
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p27, 0);
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.6, $p28);
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i64($i29);
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    $i31 := $and.i64($i30, 1);
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} $i32 := ldv__builtin_expect($i31, 0);
    call {:si_unique_call 417} {:cexpr "tmp"} boogie_si_record_i64($i32);
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    $i33 := $ne.i64($i32, 0);
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p13, $mul.ref(0, 368)), $mul.ref(0, 1));
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p34, $p10);
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    $i35 := $M.14;
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    $i37 := (if $i36 == 1 then 2 else 1);
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p15, $mul.ref($i16, 32)), $mul.ref(0, 1));
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p38, $i37);
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p15, $mul.ref($i16, 32)), $mul.ref(0, 1));
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.7, $p39);
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p13, $mul.ref(0, 368)), $mul.ref(20, 1));
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p41, $i40);
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p3, $mul.ref($i9, 7456)), $mul.ref(40, 1));
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.7, $p42);
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p13, $mul.ref(0, 368)), $mul.ref(20, 1));
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.7, $p44);
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 419} $i46 := usb_set_interface($p43, 0, $i45);
    call {:si_unique_call 420} {:cexpr "tmp___0"} boogie_si_record_i32($i46);
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    $i47 := $slt.i32($i46, 0);
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p13, $mul.ref(0, 368)), $mul.ref(24, 1));
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p49, 2);
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p13, $mul.ref(0, 368)), $mul.ref(24, 1));
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.7, $p50);
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p15, $mul.ref($i16, 32)), $mul.ref(4, 1));
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p52, $i51);
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p15, $mul.ref($i16, 32)), $mul.ref(8, 1));
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p53, 0);
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p15, $mul.ref($i16, 32)), $mul.ref(12, 1));
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p54, 1);
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} $i55 := mxl1x1sf_soft_reset($p13);
    call {:si_unique_call 423} {:cexpr "ret"} boogie_si_record_i32($i55);
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    $i56 := $slt.i32($i55, 0);
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    $i57 := $zext.i1.i32($i56);
    call {:si_unique_call 424} {:cexpr "__ret"} boogie_si_record_i32($i57);
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    $i58 := $ne.i32($i57, 0);
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i58 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i63 := $ne.i32($i57, 0);
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 426} $i65 := mxl111sf_init_tuner_demod($p13);
    call {:si_unique_call 427} {:cexpr "ret"} boogie_si_record_i32($i65);
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    $i66 := $slt.i32($i65, 0);
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    $i67 := $zext.i1.i32($i66);
    call {:si_unique_call 428} {:cexpr "__ret___0"} boogie_si_record_i32($i67);
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    $i68 := $ne.i32($i67, 0);
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    assume {:branchcond $i68} true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i68 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i73 := $ne.i32($i67, 0);
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    assume {:branchcond $i73} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p15, $mul.ref($i16, 32)), $mul.ref(8, 1));
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    $i75 := $load.i32($M.7, $p74);
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} $i76 := mxl1x1sf_set_device_mode($p13, $i75);
    call {:si_unique_call 431} {:cexpr "ret"} boogie_si_record_i32($i76);
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    $i77 := $slt.i32($i76, 0);
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    $i78 := $zext.i1.i32($i77);
    call {:si_unique_call 432} {:cexpr "__ret___1"} boogie_si_record_i32($i78);
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    $i79 := $ne.i32($i78, 0);
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    assume {:branchcond $i79} true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i79 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i84 := $ne.i32($i78, 0);
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    assume {:branchcond $i84} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 434} $i85 := mxl111sf_enable_usb_output($p13);
    call {:si_unique_call 435} {:cexpr "ret"} boogie_si_record_i32($i85);
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    $i86 := $slt.i32($i85, 0);
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    $i87 := $zext.i1.i32($i86);
    call {:si_unique_call 436} {:cexpr "__ret___2"} boogie_si_record_i32($i87);
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    $i88 := $ne.i32($i87, 0);
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    assume {:branchcond $i88} true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i88 == 1);
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i93 := $ne.i32($i87, 0);
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    assume {:branchcond $i93} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} $i94 := mxl1x1sf_top_master_ctrl($p13, 1);
    call {:si_unique_call 439} {:cexpr "ret"} boogie_si_record_i32($i94);
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    $i95 := $slt.i32($i94, 0);
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    $i96 := $zext.i1.i32($i95);
    call {:si_unique_call 440} {:cexpr "__ret___3"} boogie_si_record_i32($i96);
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    $i97 := $ne.i32($i96, 0);
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    assume {:branchcond $i97} true;
    goto $bb44, $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    assume !($i97 == 1);
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $i102 := $ne.i32($i96, 0);
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    assume {:branchcond $i102} true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    call {:si_unique_call 442} $i103 := mxl111sf_init_port_expander($p13);
    call {:si_unique_call 443} {:cexpr "ret"} boogie_si_record_i32($i103);
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    $i104 := $slt.i32($i103, 0);
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    $i105 := $zext.i1.i32($i104);
    call {:si_unique_call 444} {:cexpr "__ret___4"} boogie_si_record_i32($i105);
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    $i106 := $ne.i32($i105, 0);
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    assume {:branchcond $i106} true;
    goto $bb53, $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    assume !($i106 == 1);
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $i111 := $ne.i32($i105, 0);
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    assume {:branchcond $i111} true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p13, $mul.ref(0, 368)), $mul.ref(24, 1));
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    $i113 := $load.i32($M.7, $p112);
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} $i114 := mxl111sf_gpio_mode_switch($p13, $i113);
    call {:si_unique_call 447} {:cexpr "ret"} boogie_si_record_i32($i114);
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    $i115 := $slt.i32($i114, 0);
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    $i116 := $zext.i1.i32($i115);
    call {:si_unique_call 448} {:cexpr "__ret___5"} boogie_si_record_i32($i116);
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    $i117 := $ne.i32($i116, 0);
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    assume {:branchcond $i117} true;
    goto $bb62, $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    assume !($i117 == 1);
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $i122 := $ne.i32($i116, 0);
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    assume {:branchcond $i122} true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    call {:si_unique_call 450} $p123 := __symbol_get(.str.83);
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    $p124 := $bitcast.ref.ref($p123);
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    $i125 := $p2i.ref.i64($p124);
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    $i126 := $ne.i64($i125, 0);
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    $i127 := $zext.i1.i32($i126);
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    $i128 := $sext.i32.i64($i127);
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    $p129 := $i2p.i64.ref($i128);
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    $i130 := $ne.ref($p129, $0.ref);
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    assume {:branchcond $i130} true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i130 == 1);
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 451} vslice_dummy_var_88 := __request_module.i1.ref(1, .str.84);
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} $p133 := __symbol_get(.str.83);
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p131 := $p133;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    $i135 := $p2i.ref.i64($p131);
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    $i136 := $ne.i64($i135, 0);
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    assume {:branchcond $i136} true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i136 == 1);
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 454} vslice_dummy_var_89 := printk.ref(.str.85);
    assume {:verifier.code 0} true;
    $p142 := $0.ref;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    $i145 := $zext.i8.i32($i1);
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    $i146 := $sext.i32.i64($i145);
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2400)), $mul.ref(2328, 1)), $mul.ref($i146, 8));
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p148, $p142);
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    $i149 := $zext.i8.i32($i1);
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    $i150 := $sext.i32.i64($i149);
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2400)), $mul.ref(2328, 1)), $mul.ref($i150, 8));
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    $p153 := $load.ref($M.7, $p152);
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    $i154 := $p2i.ref.i64($p153);
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    $i155 := $ne.i64($i154, 0);
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    assume {:branchcond $i155} true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $i64 := $sub.i32(0, 5);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    $i194 := $i64;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    $r := $i194;
    return;

  $bb80:
    assume $i155 == 1;
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p13, $mul.ref(0, 368)), $mul.ref(264, 1));
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    $i157 := $load.i8($M.7, $p156);
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    $i158 := $zext.i8.i32($i157);
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    $i159 := $add.i32($i158, 1);
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    $i160 := $trunc.i32.i8($i159);
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p13, $mul.ref(0, 368)), $mul.ref(264, 1));
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p161, $i160);
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    $i162 := $zext.i8.i32($i1);
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    $i163 := $sext.i32.i64($i162);
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2400)), $mul.ref(2328, 1)), $mul.ref($i163, 8));
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    $p166 := $load.ref($M.7, $p165);
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($add.ref($p166, $mul.ref(0, 1584)), $mul.ref(0, 1)), $mul.ref(192, 1));
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    $p169 := $load.ref($M.7, $p168);
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p15, $mul.ref($i16, 32)), $mul.ref(16, 1));
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p170, $p169);
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    $i171 := $zext.i8.i32($i1);
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    $i172 := $sext.i32.i64($i171);
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2400)), $mul.ref(2328, 1)), $mul.ref($i172, 8));
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    $p175 := $load.ref($M.7, $p174);
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($add.ref($p175, $mul.ref(0, 1584)), $mul.ref(0, 1)), $mul.ref(192, 1));
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p177, mxl111sf_adap_fe_init);
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    $i178 := $zext.i8.i32($i1);
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    $i179 := $sext.i32.i64($i178);
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2400)), $mul.ref(2328, 1)), $mul.ref($i179, 8));
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    $p182 := $load.ref($M.7, $p181);
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($add.ref($p182, $mul.ref(0, 1584)), $mul.ref(0, 1)), $mul.ref(200, 1));
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    $p185 := $load.ref($M.7, $p184);
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($p15, $mul.ref($i16, 32)), $mul.ref(24, 1));
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p186, $p185);
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    $i187 := $zext.i8.i32($i1);
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    $i188 := $sext.i32.i64($i187);
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2400)), $mul.ref(2328, 1)), $mul.ref($i188, 8));
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    $p191 := $load.ref($M.7, $p190);
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($add.ref($p191, $mul.ref(0, 1584)), $mul.ref(0, 1)), $mul.ref(200, 1));
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p193, mxl111sf_adap_fe_sleep);
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    $i194 := 0;
    goto $bb82;

  $bb74:
    assume $i136 == 1;
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p3, $mul.ref($i9, 7456)), $mul.ref(424, 1));
    call {:si_unique_call 453} $p138 := devirtbounce.1($p131, hauppauge_lgdt3305_config, $p137);
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    $p139 := $bitcast.ref.ref($p138);
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    $i140 := $p2i.ref.i64($p139);
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    $i141 := $eq.i64($i140, 0);
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    assume {:branchcond $i141} true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i141 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $p142 := $p138;
    goto $bb79;

  $bb76:
    assume $i141 == 1;
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 455} __symbol_put(.str.83);
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb71:
    assume $i130 == 1;
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    $p131 := $p129;
    goto $bb73;

  $bb68:
    assume $i122 == 1;
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    $i64 := $i114;
    goto $bb15;

  $bb62:
    assume $i117 == 1;
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    $i118 := $M.10;
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    $i119 := $and.i32($i118, 16);
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    $i120 := $ne.i32($i119, 0);
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    assume {:branchcond $i120} true;
    goto $bb65, $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    assume !($i120 == 1);
    goto $bb64;

  $bb65:
    assume $i120 == 1;
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 449} vslice_dummy_var_87 := printk.ref.ref.i32.i32(.str.5, .str.81, $i114, 466);
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb59:
    assume $i111 == 1;
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    $i64 := $i103;
    goto $bb15;

  $bb53:
    assume $i106 == 1;
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    $i107 := $M.10;
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    $i108 := $and.i32($i107, 16);
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    $i109 := $ne.i32($i108, 0);
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    assume {:branchcond $i109} true;
    goto $bb56, $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    assume !($i109 == 1);
    goto $bb55;

  $bb56:
    assume $i109 == 1;
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 445} vslice_dummy_var_86 := printk.ref.ref.i32.i32(.str.5, .str.81, $i103, 463);
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb50:
    assume $i102 == 1;
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    $i64 := $i94;
    goto $bb15;

  $bb44:
    assume $i97 == 1;
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    $i98 := $M.10;
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    $i99 := $and.i32($i98, 16);
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    $i100 := $ne.i32($i99, 0);
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    assume {:branchcond $i100} true;
    goto $bb47, $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    assume !($i100 == 1);
    goto $bb46;

  $bb47:
    assume $i100 == 1;
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 441} vslice_dummy_var_85 := printk.ref.ref.i32.i32(.str.5, .str.81, $i94, 459);
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb41:
    assume $i93 == 1;
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    $i64 := $i85;
    goto $bb15;

  $bb35:
    assume $i88 == 1;
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    $i89 := $M.10;
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    $i90 := $and.i32($i89, 16);
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    $i91 := $ne.i32($i90, 0);
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    assume {:branchcond $i91} true;
    goto $bb38, $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume !($i91 == 1);
    goto $bb37;

  $bb38:
    assume $i91 == 1;
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} vslice_dummy_var_84 := printk.ref.ref.i32.i32(.str.5, .str.81, $i85, 456);
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb32:
    assume $i84 == 1;
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    $i64 := $i76;
    goto $bb15;

  $bb26:
    assume $i79 == 1;
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    $i80 := $M.10;
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    $i81 := $and.i32($i80, 16);
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    $i82 := $ne.i32($i81, 0);
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    assume {:branchcond $i82} true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i82 == 1);
    goto $bb28;

  $bb29:
    assume $i82 == 1;
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} vslice_dummy_var_83 := printk.ref.ref.i32.i32(.str.5, .str.81, $i76, 452);
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb23:
    assume $i73 == 1;
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    $i64 := $i65;
    goto $bb15;

  $bb17:
    assume $i68 == 1;
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    $i69 := $M.10;
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    $i70 := $and.i32($i69, 16);
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    $i71 := $ne.i32($i70, 0);
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    assume {:branchcond $i71} true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i71 == 1);
    goto $bb19;

  $bb20:
    assume $i71 == 1;
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 429} vslice_dummy_var_82 := printk.ref.ref.i32.i32(.str.5, .str.81, $i65, 448);
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb13:
    assume $i63 == 1;
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    $i64 := $i55;
    goto $bb15;

  $bb7:
    assume $i58 == 1;
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    $i59 := $M.10;
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    $i60 := $and.i32($i59, 16);
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    $i61 := $ne.i32($i60, 0);
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i61 == 1);
    goto $bb9;

  $bb10:
    assume $i61 == 1;
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} vslice_dummy_var_81 := printk.ref.ref.i32.i32(.str.5, .str.81, $i55, 445);
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb4:
    assume $i47 == 1;
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} vslice_dummy_var_80 := printk.ref(.str.82);
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i33 == 1;
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 418} __dynamic_pr_debug.ref.ref.ref($p2, .str.77, .str.81);
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mxl111sf_attach_demod: ref;

axiom mxl111sf_attach_demod == $sub.ref(0, 335644);

procedure mxl111sf_attach_demod($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.15, $CurrAddr, $M.18, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25;



implementation mxl111sf_attach_demod($p0: ref, $i1: i8) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var $i6: i64;
  var $i7: i64;
  var $i8: i64;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i24;
  var $i25: i24;
  var $i26: i24;
  var $p27: ref;
  var $p28: ref;
  var $i29: i8;
  var $i30: i64;
  var $i31: i64;
  var $i32: i64;
  var $i33: i1;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $i46: i32;
  var $i47: i1;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i32;
  var $i56: i1;
  var $i57: i32;
  var $i58: i1;
  var $i59: i32;
  var $i60: i32;
  var $i61: i1;
  var $i63: i1;
  var $i65: i32;
  var $i66: i1;
  var $i67: i32;
  var $i68: i1;
  var $i69: i32;
  var $i70: i32;
  var $i71: i1;
  var $i73: i1;
  var $p74: ref;
  var $i75: i32;
  var $i76: i32;
  var $i77: i1;
  var $i78: i32;
  var $i79: i1;
  var $i80: i32;
  var $i81: i32;
  var $i82: i1;
  var $i84: i1;
  var $i85: i32;
  var $i86: i1;
  var $i87: i32;
  var $i88: i1;
  var $i89: i32;
  var $i90: i32;
  var $i91: i1;
  var $i93: i1;
  var $i94: i32;
  var $i95: i1;
  var $i96: i32;
  var $i97: i1;
  var $i98: i32;
  var $i99: i32;
  var $i100: i1;
  var $i102: i1;
  var $p104: ref;
  var $p105: ref;
  var $i106: i64;
  var $i107: i1;
  var $i108: i32;
  var $i109: i64;
  var $p110: ref;
  var $i111: i1;
  var $p114: ref;
  var $p112: ref;
  var $i116: i64;
  var $i117: i1;
  var $p118: ref;
  var $p119: ref;
  var $i120: i64;
  var $i121: i1;
  var $p122: ref;
  var $i125: i32;
  var $i126: i64;
  var $p128: ref;
  var $i129: i32;
  var $i130: i64;
  var $p132: ref;
  var $p133: ref;
  var $i134: i64;
  var $i135: i1;
  var $p136: ref;
  var $i137: i8;
  var $i138: i32;
  var $i139: i32;
  var $i140: i8;
  var $p141: ref;
  var $i142: i32;
  var $i143: i64;
  var $p145: ref;
  var $p146: ref;
  var $p148: ref;
  var $p149: ref;
  var $p150: ref;
  var $i151: i32;
  var $i152: i64;
  var $p154: ref;
  var $p155: ref;
  var $p157: ref;
  var $i158: i32;
  var $i159: i64;
  var $p161: ref;
  var $p162: ref;
  var $p164: ref;
  var $p165: ref;
  var $p166: ref;
  var $i167: i32;
  var $i168: i64;
  var $p170: ref;
  var $p171: ref;
  var $p173: ref;
  var $i64: i32;
  var $i174: i32;
  var vslice_dummy_var_90: i32;
  var vslice_dummy_var_91: i32;
  var vslice_dummy_var_92: i32;
  var vslice_dummy_var_93: i32;
  var vslice_dummy_var_94: i32;
  var vslice_dummy_var_95: i32;
  var vslice_dummy_var_96: i32;
  var vslice_dummy_var_97: i32;
  var vslice_dummy_var_98: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 456} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 457} {:cexpr "mxl111sf_attach_demod:arg:fe_id"} boogie_si_record_i8($i1);
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 2400)), $mul.ref(320, 1));
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.7, $p4);
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i64($i5);
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i6, 2400);
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    $i8 := $add.i64($i7, 2344);
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    $i9 := $sub.i64(0, $i8);
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p3, $mul.ref($i9, 7456));
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref($i9, 7456)), $mul.ref(7448, 1));
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.7, $p11);
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 368)), $mul.ref(272, 1));
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i64($i1);
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p18, .str.2);
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p19, .str.99);
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p20, .str.3);
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p21, .str.77);
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    $i24 := $load.i24($M.5, $p23);
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    $i25 := $and.i24($i24, $sub.i24(0, 262144));
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    $i26 := $or.i24($i25, 747);
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p23, $i26);
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p27, 0);
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.6, $p28);
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i64($i29);
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    $i31 := $and.i64($i30, 1);
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 458} $i32 := ldv__builtin_expect($i31, 0);
    call {:si_unique_call 459} {:cexpr "tmp"} boogie_si_record_i64($i32);
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    $i33 := $ne.i64($i32, 0);
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p13, $mul.ref(0, 368)), $mul.ref(0, 1));
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p34, $p10);
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    $i35 := $M.14;
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    $i37 := (if $i36 == 1 then 1 else 2);
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p15, $mul.ref($i16, 32)), $mul.ref(0, 1));
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p38, $i37);
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p15, $mul.ref($i16, 32)), $mul.ref(0, 1));
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.7, $p39);
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p13, $mul.ref(0, 368)), $mul.ref(20, 1));
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p41, $i40);
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p3, $mul.ref($i9, 7456)), $mul.ref(40, 1));
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.7, $p42);
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p13, $mul.ref(0, 368)), $mul.ref(20, 1));
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.7, $p44);
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 461} $i46 := usb_set_interface($p43, 0, $i45);
    call {:si_unique_call 462} {:cexpr "tmp___0"} boogie_si_record_i32($i46);
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    $i47 := $slt.i32($i46, 0);
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p13, $mul.ref(0, 368)), $mul.ref(24, 1));
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p49, 0);
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p13, $mul.ref(0, 368)), $mul.ref(24, 1));
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.7, $p50);
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p15, $mul.ref($i16, 32)), $mul.ref(4, 1));
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p52, $i51);
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p15, $mul.ref($i16, 32)), $mul.ref(8, 1));
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p53, 1);
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p15, $mul.ref($i16, 32)), $mul.ref(12, 1));
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p54, 1);
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 464} $i55 := mxl1x1sf_soft_reset($p13);
    call {:si_unique_call 465} {:cexpr "ret"} boogie_si_record_i32($i55);
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    $i56 := $slt.i32($i55, 0);
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    $i57 := $zext.i1.i32($i56);
    call {:si_unique_call 466} {:cexpr "__ret"} boogie_si_record_i32($i57);
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    $i58 := $ne.i32($i57, 0);
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i58 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i63 := $ne.i32($i57, 0);
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} $i65 := mxl111sf_init_tuner_demod($p13);
    call {:si_unique_call 469} {:cexpr "ret"} boogie_si_record_i32($i65);
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    $i66 := $slt.i32($i65, 0);
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    $i67 := $zext.i1.i32($i66);
    call {:si_unique_call 470} {:cexpr "__ret___0"} boogie_si_record_i32($i67);
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    $i68 := $ne.i32($i67, 0);
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    assume {:branchcond $i68} true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i68 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i73 := $ne.i32($i67, 0);
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    assume {:branchcond $i73} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p15, $mul.ref($i16, 32)), $mul.ref(8, 1));
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    $i75 := $load.i32($M.7, $p74);
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 472} $i76 := mxl1x1sf_set_device_mode($p13, $i75);
    call {:si_unique_call 473} {:cexpr "ret"} boogie_si_record_i32($i76);
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    $i77 := $slt.i32($i76, 0);
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    $i78 := $zext.i1.i32($i77);
    call {:si_unique_call 474} {:cexpr "__ret___1"} boogie_si_record_i32($i78);
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    $i79 := $ne.i32($i78, 0);
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    assume {:branchcond $i79} true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i79 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i84 := $ne.i32($i78, 0);
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    assume {:branchcond $i84} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 476} $i85 := mxl111sf_enable_usb_output($p13);
    call {:si_unique_call 477} {:cexpr "ret"} boogie_si_record_i32($i85);
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    $i86 := $slt.i32($i85, 0);
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    $i87 := $zext.i1.i32($i86);
    call {:si_unique_call 478} {:cexpr "__ret___2"} boogie_si_record_i32($i87);
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    $i88 := $ne.i32($i87, 0);
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    assume {:branchcond $i88} true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i88 == 1);
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i93 := $ne.i32($i87, 0);
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    assume {:branchcond $i93} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} $i94 := mxl1x1sf_top_master_ctrl($p13, 1);
    call {:si_unique_call 481} {:cexpr "ret"} boogie_si_record_i32($i94);
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    $i95 := $slt.i32($i94, 0);
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    $i96 := $zext.i1.i32($i95);
    call {:si_unique_call 482} {:cexpr "__ret___3"} boogie_si_record_i32($i96);
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    $i97 := $ne.i32($i96, 0);
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    assume {:branchcond $i97} true;
    goto $bb44, $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    assume !($i97 == 1);
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $i102 := $ne.i32($i96, 0);
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    assume {:branchcond $i102} true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    call {:si_unique_call 484} vslice_dummy_var_96 := mxl111sf_init_port_expander($p13);
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} $p104 := __symbol_get(.str.100);
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    $p105 := $bitcast.ref.ref($p104);
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    $i106 := $p2i.ref.i64($p105);
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    $i107 := $ne.i64($i106, 0);
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    $i108 := $zext.i1.i32($i107);
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    $i109 := $sext.i32.i64($i108);
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    $p110 := $i2p.i64.ref($i109);
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    $i111 := $ne.ref($p110, $0.ref);
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    assume {:branchcond $i111} true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i111 == 1);
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 486} vslice_dummy_var_97 := __request_module.i1.ref(1, .str.101);
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 487} $p114 := __symbol_get(.str.100);
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p112 := $p114;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    $i116 := $p2i.ref.i64($p112);
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    $i117 := $ne.i64($i116, 0);
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    assume {:branchcond $i117} true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i117 == 1);
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 489} vslice_dummy_var_98 := printk.ref(.str.102);
    assume {:verifier.code 0} true;
    $p122 := $0.ref;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    $i125 := $zext.i8.i32($i1);
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    $i126 := $sext.i32.i64($i125);
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2400)), $mul.ref(2328, 1)), $mul.ref($i126, 8));
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p128, $p122);
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    $i129 := $zext.i8.i32($i1);
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    $i130 := $sext.i32.i64($i129);
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2400)), $mul.ref(2328, 1)), $mul.ref($i130, 8));
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    $p133 := $load.ref($M.7, $p132);
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    $i134 := $p2i.ref.i64($p133);
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    $i135 := $ne.i64($i134, 0);
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $i64 := $sub.i32(0, 5);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    $i174 := $i64;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    $r := $i174;
    return;

  $bb62:
    assume $i135 == 1;
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p13, $mul.ref(0, 368)), $mul.ref(264, 1));
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    $i137 := $load.i8($M.7, $p136);
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    $i138 := $zext.i8.i32($i137);
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    $i139 := $add.i32($i138, 1);
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    $i140 := $trunc.i32.i8($i139);
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p13, $mul.ref(0, 368)), $mul.ref(264, 1));
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p141, $i140);
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    $i142 := $zext.i8.i32($i1);
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    $i143 := $sext.i32.i64($i142);
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2400)), $mul.ref(2328, 1)), $mul.ref($i143, 8));
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    $p146 := $load.ref($M.7, $p145);
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($add.ref($p146, $mul.ref(0, 1584)), $mul.ref(0, 1)), $mul.ref(192, 1));
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    $p149 := $load.ref($M.7, $p148);
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p15, $mul.ref($i16, 32)), $mul.ref(16, 1));
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p150, $p149);
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    $i151 := $zext.i8.i32($i1);
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    $i152 := $sext.i32.i64($i151);
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2400)), $mul.ref(2328, 1)), $mul.ref($i152, 8));
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    $p155 := $load.ref($M.7, $p154);
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($add.ref($p155, $mul.ref(0, 1584)), $mul.ref(0, 1)), $mul.ref(192, 1));
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p157, mxl111sf_adap_fe_init);
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    $i158 := $zext.i8.i32($i1);
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    $i159 := $sext.i32.i64($i158);
    goto corral_source_split_3327;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2400)), $mul.ref(2328, 1)), $mul.ref($i159, 8));
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    $p162 := $load.ref($M.7, $p161);
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($add.ref($p162, $mul.ref(0, 1584)), $mul.ref(0, 1)), $mul.ref(200, 1));
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    $p165 := $load.ref($M.7, $p164);
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p15, $mul.ref($i16, 32)), $mul.ref(24, 1));
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p166, $p165);
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    $i167 := $zext.i8.i32($i1);
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    $i168 := $sext.i32.i64($i167);
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2400)), $mul.ref(2328, 1)), $mul.ref($i168, 8));
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    $p171 := $load.ref($M.7, $p170);
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($add.ref($p171, $mul.ref(0, 1584)), $mul.ref(0, 1)), $mul.ref(200, 1));
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p173, mxl111sf_adap_fe_sleep);
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    $i174 := 0;
    goto $bb64;

  $bb56:
    assume $i117 == 1;
    call {:si_unique_call 488} $p118 := devirtbounce.2($p112, $p13, mxl_demod_config);
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    $p119 := $bitcast.ref.ref($p118);
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    $i120 := $p2i.ref.i64($p119);
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    $i121 := $eq.i64($i120, 0);
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    assume {:branchcond $i121} true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i121 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $p122 := $p118;
    goto $bb61;

  $bb58:
    assume $i121 == 1;
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 490} __symbol_put(.str.100);
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb53:
    assume $i111 == 1;
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    $p112 := $p110;
    goto $bb55;

  $bb50:
    assume $i102 == 1;
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    $i64 := $i94;
    goto $bb15;

  $bb44:
    assume $i97 == 1;
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    $i98 := $M.10;
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    $i99 := $and.i32($i98, 16);
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    $i100 := $ne.i32($i99, 0);
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    assume {:branchcond $i100} true;
    goto $bb47, $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    assume !($i100 == 1);
    goto $bb46;

  $bb47:
    assume $i100 == 1;
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 483} vslice_dummy_var_95 := printk.ref.ref.i32.i32(.str.5, .str.99, $i94, 777);
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb41:
    assume $i93 == 1;
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    $i64 := $i85;
    goto $bb15;

  $bb35:
    assume $i88 == 1;
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    $i89 := $M.10;
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    $i90 := $and.i32($i89, 16);
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    $i91 := $ne.i32($i90, 0);
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    assume {:branchcond $i91} true;
    goto $bb38, $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume !($i91 == 1);
    goto $bb37;

  $bb38:
    assume $i91 == 1;
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 479} vslice_dummy_var_94 := printk.ref.ref.i32.i32(.str.5, .str.99, $i85, 774);
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb32:
    assume $i84 == 1;
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    $i64 := $i76;
    goto $bb15;

  $bb26:
    assume $i79 == 1;
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    $i80 := $M.10;
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    $i81 := $and.i32($i80, 16);
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    $i82 := $ne.i32($i81, 0);
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    assume {:branchcond $i82} true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i82 == 1);
    goto $bb28;

  $bb29:
    assume $i82 == 1;
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 475} vslice_dummy_var_93 := printk.ref.ref.i32.i32(.str.5, .str.99, $i76, 770);
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb23:
    assume $i73 == 1;
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    $i64 := $i65;
    goto $bb15;

  $bb17:
    assume $i68 == 1;
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    $i69 := $M.10;
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    $i70 := $and.i32($i69, 16);
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    $i71 := $ne.i32($i70, 0);
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    assume {:branchcond $i71} true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i71 == 1);
    goto $bb19;

  $bb20:
    assume $i71 == 1;
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 471} vslice_dummy_var_92 := printk.ref.ref.i32.i32(.str.5, .str.99, $i65, 766);
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb13:
    assume $i63 == 1;
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    $i64 := $i55;
    goto $bb15;

  $bb7:
    assume $i58 == 1;
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    $i59 := $M.10;
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    $i60 := $and.i32($i59, 16);
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    $i61 := $ne.i32($i60, 0);
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i61 == 1);
    goto $bb9;

  $bb10:
    assume $i61 == 1;
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 467} vslice_dummy_var_91 := printk.ref.ref.i32.i32(.str.5, .str.99, $i55, 763);
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb4:
    assume $i47 == 1;
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} vslice_dummy_var_90 := printk.ref(.str.82);
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i33 == 1;
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 460} __dynamic_pr_debug.ref.ref.ref($p2, .str.77, .str.99);
    goto corral_source_split_3139;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mxl111sf_lg2160_frontend_attach: ref;

axiom mxl111sf_lg2160_frontend_attach == $sub.ref(0, 336676);

procedure mxl111sf_lg2160_frontend_attach($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.15, $CurrAddr, $M.18, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25;



implementation mxl111sf_lg2160_frontend_attach($p0: ref, $i1: i8) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var $i6: i64;
  var $i7: i64;
  var $i8: i64;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i24;
  var $i25: i24;
  var $i26: i24;
  var $p27: ref;
  var $p28: ref;
  var $i29: i8;
  var $i30: i64;
  var $i31: i64;
  var $i32: i64;
  var $i33: i1;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $i46: i32;
  var $i47: i1;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i32;
  var $i56: i1;
  var $i57: i32;
  var $i58: i1;
  var $i59: i32;
  var $i60: i32;
  var $i61: i1;
  var $i63: i1;
  var $i65: i32;
  var $i66: i1;
  var $i67: i32;
  var $i68: i1;
  var $i69: i32;
  var $i70: i32;
  var $i71: i1;
  var $i73: i1;
  var $p74: ref;
  var $i75: i32;
  var $i76: i32;
  var $i77: i1;
  var $i78: i32;
  var $i79: i1;
  var $i80: i32;
  var $i81: i32;
  var $i82: i1;
  var $i84: i1;
  var $i85: i32;
  var $i86: i1;
  var $i87: i32;
  var $i88: i1;
  var $i89: i32;
  var $i90: i32;
  var $i91: i1;
  var $i93: i1;
  var $i94: i32;
  var $i95: i1;
  var $i96: i32;
  var $i97: i1;
  var $i98: i32;
  var $i99: i32;
  var $i100: i1;
  var $i102: i1;
  var $i103: i32;
  var $i104: i1;
  var $i105: i32;
  var $i106: i1;
  var $i107: i32;
  var $i108: i32;
  var $i109: i1;
  var $i111: i1;
  var $p112: ref;
  var $i113: i32;
  var $i114: i32;
  var $i115: i1;
  var $i116: i32;
  var $i117: i1;
  var $i118: i32;
  var $i119: i32;
  var $i120: i1;
  var $i122: i1;
  var $i123: i32;
  var $i124: i1;
  var $i125: i32;
  var $i126: i1;
  var $i127: i32;
  var $i128: i32;
  var $i129: i1;
  var $i131: i1;
  var $i132: i32;
  var $i133: i1;
  var $i135: i32;
  var $i136: i1;
  var $i137: i32;
  var $i138: i1;
  var $i139: i32;
  var $i140: i32;
  var $i141: i1;
  var $i143: i1;
  var $i145: i32;
  var $i146: i1;
  var $i148: i32;
  var $i149: i1;
  var $i150: i32;
  var $i151: i1;
  var $i152: i32;
  var $i153: i32;
  var $i154: i1;
  var $i156: i1;
  var $p157: ref;
  var $p158: ref;
  var $i159: i64;
  var $i160: i1;
  var $i161: i32;
  var $i162: i64;
  var $p163: ref;
  var $i164: i1;
  var $p167: ref;
  var $p165: ref;
  var $i169: i64;
  var $i170: i1;
  var $p171: ref;
  var $p172: ref;
  var $p173: ref;
  var $i174: i64;
  var $i175: i1;
  var $p176: ref;
  var $i179: i32;
  var $i180: i64;
  var $p182: ref;
  var $i183: i32;
  var $i184: i64;
  var $p186: ref;
  var $p187: ref;
  var $i188: i64;
  var $i189: i1;
  var $p190: ref;
  var $i191: i8;
  var $i192: i32;
  var $i193: i32;
  var $i194: i8;
  var $p195: ref;
  var $i196: i32;
  var $i197: i64;
  var $p199: ref;
  var $p200: ref;
  var $p202: ref;
  var $p203: ref;
  var $p204: ref;
  var $i205: i32;
  var $i206: i64;
  var $p208: ref;
  var $p209: ref;
  var $p211: ref;
  var $i212: i32;
  var $i213: i64;
  var $p215: ref;
  var $p216: ref;
  var $p218: ref;
  var $p219: ref;
  var $p220: ref;
  var $i221: i32;
  var $i222: i64;
  var $p224: ref;
  var $p225: ref;
  var $p227: ref;
  var $i64: i32;
  var $i228: i32;
  var vslice_dummy_var_99: i32;
  var vslice_dummy_var_100: i32;
  var vslice_dummy_var_101: i32;
  var vslice_dummy_var_102: i32;
  var vslice_dummy_var_103: i32;
  var vslice_dummy_var_104: i32;
  var vslice_dummy_var_105: i32;
  var vslice_dummy_var_106: i32;
  var vslice_dummy_var_107: i32;
  var vslice_dummy_var_108: i32;
  var vslice_dummy_var_109: i32;
  var vslice_dummy_var_110: i32;
  var vslice_dummy_var_111: i32;
  var vslice_dummy_var_112: i32;
  var vslice_dummy_var_113: i32;
  var vslice_dummy_var_114: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 491} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 492} {:cexpr "mxl111sf_lg2160_frontend_attach:arg:fe_id"} boogie_si_record_i8($i1);
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 2400)), $mul.ref(320, 1));
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.7, $p4);
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i64($i5);
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i6, 2400);
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    $i8 := $add.i64($i7, 2344);
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    $i9 := $sub.i64(0, $i8);
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p3, $mul.ref($i9, 7456));
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref($i9, 7456)), $mul.ref(7448, 1));
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.7, $p11);
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 368)), $mul.ref(272, 1));
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i64($i1);
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p18, .str.2);
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p19, .str.103);
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p20, .str.3);
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p21, .str.77);
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    $i24 := $load.i24($M.5, $p23);
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    $i25 := $and.i24($i24, $sub.i24(0, 262144));
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    $i26 := $or.i24($i25, 500);
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p23, $i26);
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p27, 0);
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.6, $p28);
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i64($i29);
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    $i31 := $and.i64($i30, 1);
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 493} $i32 := ldv__builtin_expect($i31, 0);
    call {:si_unique_call 494} {:cexpr "tmp"} boogie_si_record_i64($i32);
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    $i33 := $ne.i64($i32, 0);
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p13, $mul.ref(0, 368)), $mul.ref(0, 1));
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p34, $p10);
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $i35 := $M.14;
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    $i37 := (if $i36 == 1 then 2 else 1);
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p15, $mul.ref($i16, 32)), $mul.ref(0, 1));
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p38, $i37);
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p15, $mul.ref($i16, 32)), $mul.ref(0, 1));
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.7, $p39);
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p13, $mul.ref(0, 368)), $mul.ref(20, 1));
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p41, $i40);
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p3, $mul.ref($i9, 7456)), $mul.ref(40, 1));
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.7, $p42);
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p13, $mul.ref(0, 368)), $mul.ref(20, 1));
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.7, $p44);
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} $i46 := usb_set_interface($p43, 0, $i45);
    call {:si_unique_call 497} {:cexpr "tmp___0"} boogie_si_record_i32($i46);
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    $i47 := $slt.i32($i46, 0);
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p13, $mul.ref(0, 368)), $mul.ref(24, 1));
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p49, 1);
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p13, $mul.ref(0, 368)), $mul.ref(24, 1));
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.7, $p50);
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p15, $mul.ref($i16, 32)), $mul.ref(4, 1));
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p52, $i51);
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p15, $mul.ref($i16, 32)), $mul.ref(8, 1));
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p53, 0);
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p15, $mul.ref($i16, 32)), $mul.ref(12, 1));
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p54, 1);
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} $i55 := mxl1x1sf_soft_reset($p13);
    call {:si_unique_call 500} {:cexpr "ret"} boogie_si_record_i32($i55);
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    $i56 := $slt.i32($i55, 0);
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    $i57 := $zext.i1.i32($i56);
    call {:si_unique_call 501} {:cexpr "__ret"} boogie_si_record_i32($i57);
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    $i58 := $ne.i32($i57, 0);
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i58 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i63 := $ne.i32($i57, 0);
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} $i65 := mxl111sf_init_tuner_demod($p13);
    call {:si_unique_call 504} {:cexpr "ret"} boogie_si_record_i32($i65);
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    $i66 := $slt.i32($i65, 0);
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    $i67 := $zext.i1.i32($i66);
    call {:si_unique_call 505} {:cexpr "__ret___0"} boogie_si_record_i32($i67);
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    $i68 := $ne.i32($i67, 0);
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    assume {:branchcond $i68} true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i68 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i73 := $ne.i32($i67, 0);
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    assume {:branchcond $i73} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p15, $mul.ref($i16, 32)), $mul.ref(8, 1));
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    $i75 := $load.i32($M.7, $p74);
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} $i76 := mxl1x1sf_set_device_mode($p13, $i75);
    call {:si_unique_call 508} {:cexpr "ret"} boogie_si_record_i32($i76);
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    $i77 := $slt.i32($i76, 0);
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    $i78 := $zext.i1.i32($i77);
    call {:si_unique_call 509} {:cexpr "__ret___1"} boogie_si_record_i32($i78);
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    $i79 := $ne.i32($i78, 0);
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    assume {:branchcond $i79} true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i79 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i84 := $ne.i32($i78, 0);
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    assume {:branchcond $i84} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} $i85 := mxl111sf_enable_usb_output($p13);
    call {:si_unique_call 512} {:cexpr "ret"} boogie_si_record_i32($i85);
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    $i86 := $slt.i32($i85, 0);
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    $i87 := $zext.i1.i32($i86);
    call {:si_unique_call 513} {:cexpr "__ret___2"} boogie_si_record_i32($i87);
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    $i88 := $ne.i32($i87, 0);
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    assume {:branchcond $i88} true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i88 == 1);
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i93 := $ne.i32($i87, 0);
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    assume {:branchcond $i93} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} $i94 := mxl1x1sf_top_master_ctrl($p13, 1);
    call {:si_unique_call 516} {:cexpr "ret"} boogie_si_record_i32($i94);
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    $i95 := $slt.i32($i94, 0);
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    $i96 := $zext.i1.i32($i95);
    call {:si_unique_call 517} {:cexpr "__ret___3"} boogie_si_record_i32($i96);
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    $i97 := $ne.i32($i96, 0);
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    assume {:branchcond $i97} true;
    goto $bb44, $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    assume !($i97 == 1);
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $i102 := $ne.i32($i96, 0);
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    assume {:branchcond $i102} true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} $i103 := mxl111sf_init_port_expander($p13);
    call {:si_unique_call 520} {:cexpr "ret"} boogie_si_record_i32($i103);
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    $i104 := $slt.i32($i103, 0);
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    $i105 := $zext.i1.i32($i104);
    call {:si_unique_call 521} {:cexpr "__ret___4"} boogie_si_record_i32($i105);
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    $i106 := $ne.i32($i105, 0);
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    assume {:branchcond $i106} true;
    goto $bb53, $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    assume !($i106 == 1);
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $i111 := $ne.i32($i105, 0);
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    assume {:branchcond $i111} true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p13, $mul.ref(0, 368)), $mul.ref(24, 1));
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    $i113 := $load.i32($M.7, $p112);
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 523} $i114 := mxl111sf_gpio_mode_switch($p13, $i113);
    call {:si_unique_call 524} {:cexpr "ret"} boogie_si_record_i32($i114);
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    $i115 := $slt.i32($i114, 0);
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    $i116 := $zext.i1.i32($i115);
    call {:si_unique_call 525} {:cexpr "__ret___5"} boogie_si_record_i32($i116);
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    $i117 := $ne.i32($i116, 0);
    goto corral_source_split_3527;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    assume {:branchcond $i117} true;
    goto $bb62, $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    assume !($i117 == 1);
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $i122 := $ne.i32($i116, 0);
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    assume {:branchcond $i122} true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    call {:si_unique_call 527} $i123 := mxl1x1sf_get_chip_info($p13);
    call {:si_unique_call 528} {:cexpr "___ret"} boogie_si_record_i32($i123);
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    $i124 := $slt.i32($i123, 0);
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    $i125 := $zext.i1.i32($i124);
    call {:si_unique_call 529} {:cexpr "__ret___7"} boogie_si_record_i32($i125);
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    $i126 := $ne.i32($i125, 0);
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    assume {:branchcond $i126} true;
    goto $bb71, $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    assume !($i126 == 1);
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $i131 := $ne.i32($i125, 0);
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    assume {:branchcond $i131} true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i131 == 1);
    assume {:verifier.code 0} true;
    $i148 := $i123;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    $i149 := $slt.i32($i148, 0);
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    $i150 := $zext.i1.i32($i149);
    call {:si_unique_call 538} {:cexpr "__ret___8"} boogie_si_record_i32($i150);
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    $i151 := $ne.i32($i150, 0);
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    assume {:branchcond $i151} true;
    goto $bb95, $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    assume !($i151 == 1);
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    $i156 := $ne.i32($i150, 0);
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    assume {:branchcond $i156} true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i156 == 1);
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} $p157 := __symbol_get(.str.104);
    goto corral_source_split_3605;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    $p158 := $bitcast.ref.ref($p157);
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    $i159 := $p2i.ref.i64($p158);
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    $i160 := $ne.i64($i159, 0);
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    $i161 := $zext.i1.i32($i160);
    goto corral_source_split_3609;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    $i162 := $sext.i32.i64($i161);
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    $p163 := $i2p.i64.ref($i162);
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    $i164 := $ne.ref($p163, $0.ref);
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    assume {:branchcond $i164} true;
    goto $bb104, $bb105;

  $bb105:
    assume !($i164 == 1);
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} vslice_dummy_var_113 := __request_module.i1.ref(1, .str.105);
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} $p167 := __symbol_get(.str.104);
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p165 := $p167;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    $i169 := $p2i.ref.i64($p165);
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    $i170 := $ne.i64($i169, 0);
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    assume {:branchcond $i170} true;
    goto $bb107, $bb108;

  $bb108:
    assume !($i170 == 1);
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} vslice_dummy_var_114 := printk.ref(.str.106);
    assume {:verifier.code 0} true;
    $p176 := $0.ref;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    $i179 := $zext.i8.i32($i1);
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    $i180 := $sext.i32.i64($i179);
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2400)), $mul.ref(2328, 1)), $mul.ref($i180, 8));
    goto corral_source_split_3639;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p182, $p176);
    goto corral_source_split_3640;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    $i183 := $zext.i8.i32($i1);
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    $i184 := $sext.i32.i64($i183);
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2400)), $mul.ref(2328, 1)), $mul.ref($i184, 8));
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    $p187 := $load.ref($M.7, $p186);
    goto corral_source_split_3644;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    $i188 := $p2i.ref.i64($p187);
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    $i189 := $ne.i64($i188, 0);
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    assume {:branchcond $i189} true;
    goto $bb113, $bb114;

  $bb114:
    assume !($i189 == 1);
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    $i64 := $sub.i32(0, 5);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    $i228 := $i64;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    $r := $i228;
    return;

  $bb113:
    assume $i189 == 1;
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($p13, $mul.ref(0, 368)), $mul.ref(264, 1));
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    $i191 := $load.i8($M.7, $p190);
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    $i192 := $zext.i8.i32($i191);
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    $i193 := $add.i32($i192, 1);
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    $i194 := $trunc.i32.i8($i193);
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($p13, $mul.ref(0, 368)), $mul.ref(264, 1));
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p195, $i194);
    goto corral_source_split_3655;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    $i196 := $zext.i8.i32($i1);
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    $i197 := $sext.i32.i64($i196);
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2400)), $mul.ref(2328, 1)), $mul.ref($i197, 8));
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    $p200 := $load.ref($M.7, $p199);
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($add.ref($p200, $mul.ref(0, 1584)), $mul.ref(0, 1)), $mul.ref(192, 1));
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    $p203 := $load.ref($M.7, $p202);
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($p15, $mul.ref($i16, 32)), $mul.ref(16, 1));
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p204, $p203);
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    $i205 := $zext.i8.i32($i1);
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    $i206 := $sext.i32.i64($i205);
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2400)), $mul.ref(2328, 1)), $mul.ref($i206, 8));
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    $p209 := $load.ref($M.7, $p208);
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($add.ref($p209, $mul.ref(0, 1584)), $mul.ref(0, 1)), $mul.ref(192, 1));
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p211, mxl111sf_adap_fe_init);
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    $i212 := $zext.i8.i32($i1);
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    $i213 := $sext.i32.i64($i212);
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2400)), $mul.ref(2328, 1)), $mul.ref($i213, 8));
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    $p216 := $load.ref($M.7, $p215);
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($add.ref($p216, $mul.ref(0, 1584)), $mul.ref(0, 1)), $mul.ref(200, 1));
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    $p219 := $load.ref($M.7, $p218);
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($p15, $mul.ref($i16, 32)), $mul.ref(24, 1));
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p220, $p219);
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    $i221 := $zext.i8.i32($i1);
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    $i222 := $sext.i32.i64($i221);
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2400)), $mul.ref(2328, 1)), $mul.ref($i222, 8));
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    $p225 := $load.ref($M.7, $p224);
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    $p227 := $add.ref($add.ref($add.ref($p225, $mul.ref(0, 1584)), $mul.ref(0, 1)), $mul.ref(200, 1));
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p227, mxl111sf_adap_fe_sleep);
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    $i228 := 0;
    goto $bb115;

  $bb107:
    assume $i170 == 1;
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p3, $mul.ref($i9, 7456)), $mul.ref(424, 1));
    call {:si_unique_call 543} $p172 := devirtbounce.3($p165, hauppauge_lg2160_config, $p171);
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    $p173 := $bitcast.ref.ref($p172);
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    $i174 := $p2i.ref.i64($p173);
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    $i175 := $eq.i64($i174, 0);
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    assume {:branchcond $i175} true;
    goto $bb109, $bb110;

  $bb110:
    assume !($i175 == 1);
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    $p176 := $p172;
    goto $bb112;

  $bb109:
    assume $i175 == 1;
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 545} __symbol_put(.str.104);
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb104:
    assume $i164 == 1;
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    $p165 := $p163;
    goto $bb106;

  $bb101:
    assume $i156 == 1;
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    $i64 := $i148;
    goto $bb15;

  $bb95:
    assume $i151 == 1;
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    $i152 := $M.10;
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    $i153 := $and.i32($i152, 16);
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    $i154 := $ne.i32($i153, 0);
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    assume {:branchcond $i154} true;
    goto $bb98, $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    assume !($i154 == 1);
    goto $bb97;

  $bb98:
    assume $i154 == 1;
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} vslice_dummy_var_112 := printk.ref.ref.i32.i32(.str.5, .str.103, $i148, 541);
    goto corral_source_split_3599;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb77:
    assume $i131 == 1;
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    $i132 := $M.10;
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    $i133 := $ne.i32($i132, 0);
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    assume {:branchcond $i133} true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i133 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    call {:si_unique_call 532} $i135 := mxl1x1sf_get_chip_info($p13);
    call {:si_unique_call 533} {:cexpr "___ret"} boogie_si_record_i32($i135);
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    $i136 := $slt.i32($i135, 0);
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    $i137 := $zext.i1.i32($i136);
    call {:si_unique_call 534} {:cexpr "__ret___6"} boogie_si_record_i32($i137);
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    $i138 := $ne.i32($i137, 0);
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    assume {:branchcond $i138} true;
    goto $bb82, $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    assume !($i138 == 1);
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    $i143 := $ne.i32($i137, 0);
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    assume {:branchcond $i143} true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i143 == 1);
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    $i145 := $M.10;
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    $i146 := $ne.i32($i145, 0);
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    assume {:branchcond $i146} true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i146 == 1);
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    $i148 := $i135;
    goto $bb94;

  $bb91:
    assume $i146 == 1;
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 537} vslice_dummy_var_111 := printk.ref.ref(.str.64, .str.103);
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb88:
    assume $i143 == 1;
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 536} vslice_dummy_var_110 := printk.ref(.str.63);
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb82:
    assume $i138 == 1;
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    $i139 := $M.10;
    goto corral_source_split_3569;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    $i140 := $and.i32($i139, 16);
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    $i141 := $ne.i32($i140, 0);
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    assume {:branchcond $i141} true;
    goto $bb85, $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    assume !($i141 == 1);
    goto $bb84;

  $bb85:
    assume $i141 == 1;
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} vslice_dummy_var_109 := printk.ref.ref.i32.i32(.str.5, .str.103, $i135, 540);
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb79:
    assume $i133 == 1;
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 531} vslice_dummy_var_108 := printk.ref.ref(.str.62, .str.103);
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb71:
    assume $i126 == 1;
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    $i127 := $M.10;
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    $i128 := $and.i32($i127, 16);
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    $i129 := $ne.i32($i128, 0);
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    assume !($i129 == 1);
    goto $bb73;

  $bb74:
    assume $i129 == 1;
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 530} vslice_dummy_var_107 := printk.ref.ref.i32.i32(.str.5, .str.103, $i123, 540);
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb68:
    assume $i122 == 1;
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    $i64 := $i114;
    goto $bb15;

  $bb62:
    assume $i117 == 1;
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    $i118 := $M.10;
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    $i119 := $and.i32($i118, 16);
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    $i120 := $ne.i32($i119, 0);
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    assume {:branchcond $i120} true;
    goto $bb65, $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    assume !($i120 == 1);
    goto $bb64;

  $bb65:
    assume $i120 == 1;
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 526} vslice_dummy_var_106 := printk.ref.ref.i32.i32(.str.5, .str.103, $i114, 537);
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb59:
    assume $i111 == 1;
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    $i64 := $i103;
    goto $bb15;

  $bb53:
    assume $i106 == 1;
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    $i107 := $M.10;
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    $i108 := $and.i32($i107, 16);
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    $i109 := $ne.i32($i108, 0);
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    assume {:branchcond $i109} true;
    goto $bb56, $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    assume !($i109 == 1);
    goto $bb55;

  $bb56:
    assume $i109 == 1;
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 522} vslice_dummy_var_105 := printk.ref.ref.i32.i32(.str.5, .str.103, $i103, 534);
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb50:
    assume $i102 == 1;
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    $i64 := $i94;
    goto $bb15;

  $bb44:
    assume $i97 == 1;
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    $i98 := $M.10;
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    $i99 := $and.i32($i98, 16);
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    $i100 := $ne.i32($i99, 0);
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    assume {:branchcond $i100} true;
    goto $bb47, $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    assume !($i100 == 1);
    goto $bb46;

  $bb47:
    assume $i100 == 1;
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 518} vslice_dummy_var_104 := printk.ref.ref.i32.i32(.str.5, .str.103, $i94, 530);
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb41:
    assume $i93 == 1;
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    $i64 := $i85;
    goto $bb15;

  $bb35:
    assume $i88 == 1;
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    $i89 := $M.10;
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    $i90 := $and.i32($i89, 16);
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    $i91 := $ne.i32($i90, 0);
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    assume {:branchcond $i91} true;
    goto $bb38, $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume !($i91 == 1);
    goto $bb37;

  $bb38:
    assume $i91 == 1;
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} vslice_dummy_var_103 := printk.ref.ref.i32.i32(.str.5, .str.103, $i85, 527);
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb32:
    assume $i84 == 1;
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    $i64 := $i76;
    goto $bb15;

  $bb26:
    assume $i79 == 1;
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    $i80 := $M.10;
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    $i81 := $and.i32($i80, 16);
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    $i82 := $ne.i32($i81, 0);
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    assume {:branchcond $i82} true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i82 == 1);
    goto $bb28;

  $bb29:
    assume $i82 == 1;
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 510} vslice_dummy_var_102 := printk.ref.ref.i32.i32(.str.5, .str.103, $i76, 523);
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb23:
    assume $i73 == 1;
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    $i64 := $i65;
    goto $bb15;

  $bb17:
    assume $i68 == 1;
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    $i69 := $M.10;
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    $i70 := $and.i32($i69, 16);
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    $i71 := $ne.i32($i70, 0);
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    assume {:branchcond $i71} true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i71 == 1);
    goto $bb19;

  $bb20:
    assume $i71 == 1;
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 506} vslice_dummy_var_101 := printk.ref.ref.i32.i32(.str.5, .str.103, $i65, 519);
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb13:
    assume $i63 == 1;
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    $i64 := $i55;
    goto $bb15;

  $bb7:
    assume $i58 == 1;
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    $i59 := $M.10;
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    $i60 := $and.i32($i59, 16);
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    $i61 := $ne.i32($i60, 0);
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i61 == 1);
    goto $bb9;

  $bb10:
    assume $i61 == 1;
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 502} vslice_dummy_var_100 := printk.ref.ref.i32.i32(.str.5, .str.103, $i55, 516);
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb4:
    assume $i47 == 1;
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 498} vslice_dummy_var_99 := printk.ref(.str.82);
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i33 == 1;
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 495} __dynamic_pr_debug.ref.ref.ref($p2, .str.77, .str.103);
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const usb_set_interface: ref;

axiom usb_set_interface == $sub.ref(0, 337708);

procedure usb_set_interface($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation usb_set_interface($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 546} {:cexpr "usb_set_interface:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 547} {:cexpr "usb_set_interface:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 1} true;
    call {:si_unique_call 548} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 549} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const mxl1x1sf_soft_reset: ref;

axiom mxl1x1sf_soft_reset == $sub.ref(0, 338740);

procedure mxl1x1sf_soft_reset($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.15, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation mxl1x1sf_soft_reset($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $i12: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $i13: i32;
  var vslice_dummy_var_115: i32;
  var vslice_dummy_var_116: i32;
  var vslice_dummy_var_117: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    $i1 := $M.10;
    goto corral_source_split_3691;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_3692;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 551} $i4 := mxl111sf_write_reg($p0, $sub.i8(0, 1), 0);
    call {:si_unique_call 552} {:cexpr "ret"} boogie_si_record_i32($i4);
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i4, 0);
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    call {:si_unique_call 553} {:cexpr "__ret"} boogie_si_record_i32($i6);
    goto corral_source_split_3699;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i6, 0);
    goto corral_source_split_3710;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 555} $i14 := mxl111sf_write_reg($p0, 2, 1);
    call {:si_unique_call 556} {:cexpr "ret"} boogie_si_record_i32($i14);
    goto corral_source_split_3716;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i14, 0);
    goto corral_source_split_3717;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    call {:si_unique_call 557} {:cexpr "__ret___0"} boogie_si_record_i32($i16);
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i13 := $i14;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb14:
    assume $i17 == 1;
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    $i18 := $M.10;
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i18, 16);
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_3724;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb16;

  $bb17:
    assume $i20 == 1;
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 558} vslice_dummy_var_117 := printk.ref.ref.i32.i32(.str.5, .str.19, $i14, 64);
    goto corral_source_split_3727;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb10:
    assume $i12 == 1;
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    $i13 := $i4;
    goto $bb12;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    $i8 := $M.10;
    goto corral_source_split_3703;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 16);
    goto corral_source_split_3704;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb6;

  $bb7:
    assume $i10 == 1;
    goto corral_source_split_3707;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} vslice_dummy_var_116 := printk.ref.ref.i32.i32(.str.5, .str.19, $i4, 61);
    goto corral_source_split_3708;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} vslice_dummy_var_115 := printk.ref.ref(.str.17, .str.19);
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mxl111sf_init_tuner_demod: ref;

axiom mxl111sf_init_tuner_demod == $sub.ref(0, 339772);

procedure mxl111sf_init_tuner_demod($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $M.15, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation mxl111sf_init_tuner_demod($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p3: ref;
  var $p5: ref;
  var $p7: ref;
  var $p9: ref;
  var $p11: ref;
  var $p13: ref;
  var $p15: ref;
  var $p17: ref;
  var $p19: ref;
  var $p21: ref;
  var $p23: ref;
  var $p25: ref;
  var $p27: ref;
  var $p29: ref;
  var $p31: ref;
  var $p33: ref;
  var $p35: ref;
  var $p37: ref;
  var $p39: ref;
  var $p41: ref;
  var $p43: ref;
  var $p45: ref;
  var $p47: ref;
  var $p49: ref;
  var $p51: ref;
  var $p53: ref;
  var $p55: ref;
  var $p57: ref;
  var $p59: ref;
  var $p61: ref;
  var $p63: ref;
  var $p65: ref;
  var $p67: ref;
  var $p69: ref;
  var $p71: ref;
  var $p73: ref;
  var $p75: ref;
  var $p77: ref;
  var $p79: ref;
  var $p81: ref;
  var $p83: ref;
  var $p85: ref;
  var $p87: ref;
  var $p89: ref;
  var $p91: ref;
  var $p93: ref;
  var $p95: ref;
  var $p97: ref;
  var $p99: ref;
  var $p101: ref;
  var $p103: ref;
  var $p105: ref;
  var $p107: ref;
  var $p109: ref;
  var $p111: ref;
  var $p113: ref;
  var $p115: ref;
  var $p117: ref;
  var $p119: ref;
  var $p121: ref;
  var $p123: ref;
  var $p125: ref;
  var $p127: ref;
  var $i128: i32;
  var $i129: i1;
  var $p131: ref;
  var $i132: i32;
  var vslice_dummy_var_118: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 559} $p1 := $alloc($mul.ref(63, $zext.i32.i64(1)));
    goto corral_source_split_3729;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(0, 3)), $mul.ref(0, 1));
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p3, 7);
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(0, 3)), $mul.ref(1, 1));
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p5, $sub.i8(0, 1));
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(0, 3)), $mul.ref(2, 1));
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p7, 12);
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(1, 3)), $mul.ref(0, 1));
    goto corral_source_split_3736;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p9, 88);
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(1, 3)), $mul.ref(1, 1));
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p11, $sub.i8(0, 1));
    goto corral_source_split_3739;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(1, 3)), $mul.ref(2, 1));
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p13, $sub.i8(0, 99));
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(2, 3)), $mul.ref(0, 1));
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p15, 9);
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(2, 3)), $mul.ref(1, 1));
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p17, $sub.i8(0, 1));
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(2, 3)), $mul.ref(2, 1));
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p19, 0);
    goto corral_source_split_3747;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(3, 3)), $mul.ref(0, 1));
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p21, 6);
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(3, 3)), $mul.ref(1, 1));
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p23, $sub.i8(0, 1));
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(3, 3)), $mul.ref(2, 1));
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p25, 6);
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(4, 3)), $mul.ref(0, 1));
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p27, $sub.i8(0, 56));
    goto corral_source_split_3755;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(4, 3)), $mul.ref(1, 1));
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p29, $sub.i8(0, 1));
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(4, 3)), $mul.ref(2, 1));
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p31, 64);
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(5, 3)), $mul.ref(0, 1));
    goto corral_source_split_3760;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p33, $sub.i8(0, 115));
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(5, 3)), $mul.ref(1, 1));
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p35, 1);
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(5, 3)), $mul.ref(2, 1));
    goto corral_source_split_3764;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p37, 1);
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(6, 3)), $mul.ref(0, 1));
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p39, 50);
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(6, 3)), $mul.ref(1, 1));
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p41, $sub.i8(0, 1));
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(6, 3)), $mul.ref(2, 1));
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p43, $sub.i8(0, 84));
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(7, 3)), $mul.ref(0, 1));
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p45, 66);
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(7, 3)), $mul.ref(1, 1));
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p47, $sub.i8(0, 1));
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(7, 3)), $mul.ref(2, 1));
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p49, 67);
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(8, 3)), $mul.ref(0, 1));
    goto corral_source_split_3778;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p51, 116);
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(8, 3)), $mul.ref(1, 1));
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p53, $sub.i8(0, 1));
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(8, 3)), $mul.ref(2, 1));
    goto corral_source_split_3782;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p55, $sub.i8(0, 60));
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(9, 3)), $mul.ref(0, 1));
    goto corral_source_split_3784;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p57, 113);
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(9, 3)), $mul.ref(1, 1));
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p59, $sub.i8(0, 1));
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(9, 3)), $mul.ref(2, 1));
    goto corral_source_split_3788;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p61, $sub.i8(0, 26));
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(10, 3)), $mul.ref(0, 1));
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p63, $sub.i8(0, 125));
    goto corral_source_split_3791;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(10, 3)), $mul.ref(1, 1));
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p65, $sub.i8(0, 1));
    goto corral_source_split_3793;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(10, 3)), $mul.ref(2, 1));
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p67, 100);
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(11, 3)), $mul.ref(0, 1));
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p69, $sub.i8(0, 123));
    goto corral_source_split_3797;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(11, 3)), $mul.ref(1, 1));
    goto corral_source_split_3798;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p71, $sub.i8(0, 1));
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(11, 3)), $mul.ref(2, 1));
    goto corral_source_split_3800;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p73, 100);
    goto corral_source_split_3801;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(12, 3)), $mul.ref(0, 1));
    goto corral_source_split_3802;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p75, $sub.i8(0, 120));
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(12, 3)), $mul.ref(1, 1));
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p77, $sub.i8(0, 1));
    goto corral_source_split_3805;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(12, 3)), $mul.ref(2, 1));
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p79, $sub.i8(0, 16));
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(13, 3)), $mul.ref(0, 1));
    goto corral_source_split_3808;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p81, 111);
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(13, 3)), $mul.ref(1, 1));
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p83, $sub.i8(0, 16));
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(13, 3)), $mul.ref(2, 1));
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p85, $sub.i8(0, 80));
    goto corral_source_split_3813;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(14, 3)), $mul.ref(0, 1));
    goto corral_source_split_3814;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p87, 0);
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(14, 3)), $mul.ref(1, 1));
    goto corral_source_split_3816;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p89, $sub.i8(0, 1));
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(14, 3)), $mul.ref(2, 1));
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p91, 1);
    goto corral_source_split_3819;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(15, 3)), $mul.ref(0, 1));
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p93, $sub.i8(0, 127));
    goto corral_source_split_3821;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(15, 3)), $mul.ref(1, 1));
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p95, $sub.i8(0, 1));
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(15, 3)), $mul.ref(2, 1));
    goto corral_source_split_3824;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p97, 17);
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(16, 3)), $mul.ref(0, 1));
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p99, $sub.i8(0, 12));
    goto corral_source_split_3827;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(16, 3)), $mul.ref(1, 1));
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p101, $sub.i8(0, 1));
    goto corral_source_split_3829;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(16, 3)), $mul.ref(2, 1));
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p103, 7);
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(17, 3)), $mul.ref(0, 1));
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p105, $sub.i8(0, 44));
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(17, 3)), $mul.ref(1, 1));
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p107, 31);
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(17, 3)), $mul.ref(2, 1));
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p109, 15);
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(18, 3)), $mul.ref(0, 1));
    goto corral_source_split_3838;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p111, $sub.i8(0, 42));
    goto corral_source_split_3839;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(18, 3)), $mul.ref(1, 1));
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p113, $sub.i8(0, 1));
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(18, 3)), $mul.ref(2, 1));
    goto corral_source_split_3842;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p115, 12);
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(19, 3)), $mul.ref(0, 1));
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p117, 0);
    goto corral_source_split_3845;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(19, 3)), $mul.ref(1, 1));
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p119, $sub.i8(0, 1));
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(19, 3)), $mul.ref(2, 1));
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p121, 0);
    goto corral_source_split_3849;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(20, 3)), $mul.ref(0, 1));
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p123, 0);
    goto corral_source_split_3851;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(20, 3)), $mul.ref(1, 1));
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p125, 0);
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(20, 3)), $mul.ref(2, 1));
    goto corral_source_split_3854;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p127, 0);
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    $i128 := $M.10;
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    $i129 := $ne.i32($i128, 0);
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i129 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p131 := $bitcast.ref.ref($p1);
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 561} $i132 := mxl111sf_ctrl_program_regs($p0, $p131);
    call {:si_unique_call 562} {:cexpr "tmp"} boogie_si_record_i32($i132);
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    $r := $i132;
    return;

  $bb1:
    assume $i129 == 1;
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 560} vslice_dummy_var_118 := printk.ref.ref(.str.17, .str.18);
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mxl1x1sf_set_device_mode: ref;

axiom mxl1x1sf_set_device_mode == $sub.ref(0, 340804);

procedure mxl1x1sf_set_device_mode($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.15, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr;



implementation mxl1x1sf_set_device_mode($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i1;
  var $p5: ref;
  var $i7: i1;
  var $i8: i32;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $i18: i1;
  var $i20: i1;
  var $i21: i32;
  var $i22: i8;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $i31: i1;
  var $p32: ref;
  var $i19: i32;
  var vslice_dummy_var_119: i32;
  var vslice_dummy_var_120: i32;
  var vslice_dummy_var_121: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 563} {:cexpr "mxl1x1sf_set_device_mode:arg:mode"} boogie_si_record_i32($i1);
    goto corral_source_split_3865;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    $i2 := $M.10;
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i1, 1);
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i8($i8);
    goto corral_source_split_3876;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 565} $i10 := mxl111sf_write_reg($p0, 3, $i9);
    call {:si_unique_call 566} {:cexpr "ret"} boogie_si_record_i32($i10);
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i10, 0);
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    call {:si_unique_call 567} {:cexpr "__ret"} boogie_si_record_i32($i12);
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_3880;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i12, 0);
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i1, 1);
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    $i21 := (if $i20 == 1 then 0 else 64);
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i32.i8($i21);
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 569} $i23 := mxl111sf_write_reg_mask($p0, 125, 64, $i22);
    call {:si_unique_call 570} {:cexpr "ret"} boogie_si_record_i32($i23);
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i23, 0);
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    $i25 := $zext.i1.i32($i24);
    call {:si_unique_call 571} {:cexpr "__ret___0"} boogie_si_record_i32($i25);
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i25, 0);
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(16, 1));
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p32, $i1);
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    $i19 := $i23;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  $bb20:
    assume $i31 == 1;
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    $i19 := $i23;
    goto $bb12;

  $bb14:
    assume $i26 == 1;
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    $i27 := $M.10;
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    $i28 := $and.i32($i27, 16);
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb16;

  $bb17:
    assume $i29 == 1;
    goto corral_source_split_3909;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 572} vslice_dummy_var_121 := printk.ref.ref.i32.i32(.str.5, .str.21, $i23, 88);
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb10:
    assume $i18 == 1;
    goto corral_source_split_3892;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    $i19 := $i10;
    goto $bb12;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_3882;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    $i14 := $M.10;
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i14, 16);
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb6;

  $bb7:
    assume $i16 == 1;
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 568} vslice_dummy_var_120 := printk.ref.ref.i32.i32(.str.5, .str.21, $i10, 79);
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i1, 1);
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    $p5 := (if $i4 == 1 then .str.22 else .str.23);
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 564} vslice_dummy_var_119 := printk.ref.ref.ref(.str.20, .str.21, $p5);
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mxl1x1sf_top_master_ctrl: ref;

axiom mxl1x1sf_top_master_ctrl == $sub.ref(0, 341836);

procedure mxl1x1sf_top_master_ctrl($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.15, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation mxl1x1sf_top_master_ctrl($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i8;
  var $i8: i32;
  var vslice_dummy_var_122: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 573} {:cexpr "mxl1x1sf_top_master_ctrl:arg:onoff"} boogie_si_record_i32($i1);
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    $i2 := $M.10;
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i1, 0);
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i8($i6);
    goto corral_source_split_3928;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 575} $i8 := mxl111sf_write_reg($p0, 1, $i7);
    call {:si_unique_call 576} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_3929;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} vslice_dummy_var_122 := printk.ref.ref.i32(.str.24, .str.25, $i1);
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mxl111sf_init_port_expander: ref;

axiom mxl111sf_init_port_expander == $sub.ref(0, 342868);

procedure mxl111sf_init_port_expander($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.18, $M.19, $M.20, $M.21, $M.22, $M.7, $M.23, $M.24, $M.25, $CurrAddr, $M.15, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6;



implementation mxl111sf_init_port_expander($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i8;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $i16: i32;
  var $i18: i32;
  var $i17: i32;
  var vslice_dummy_var_123: i32;
  var vslice_dummy_var_124: i32;
  var vslice_dummy_var_125: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    $i1 := $M.10;
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(12, 1));
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.7, $p4);
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(8, 1));
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.7, $p9);
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 1);
    goto corral_source_split_3948;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(8, 1));
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.7, $p12);
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 0);
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 583} vslice_dummy_var_125 := printk.ref.ref(.str.44, .str.45);
    goto corral_source_split_3962;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 579} $i16 := pca9534_init_port_expander($p0);
    call {:si_unique_call 580} {:cexpr "tmp"} boogie_si_record_i32($i16);
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    $i17 := $i16;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_3964;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb11:
    assume $i14 == 1;
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 581} $i18 := mxl111sf_hw_gpio_initialize($p0);
    call {:si_unique_call 582} {:cexpr "tmp___0"} boogie_si_record_i32($i18);
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    $i17 := $i18;
    goto $bb16;

  $bb7:
    assume $i11 == 1;
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 578} vslice_dummy_var_124 := mxl111sf_probe_port_expander($p0);
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 577} vslice_dummy_var_123 := printk.ref.ref(.str.17, .str.45);
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mxl111sf_gpio_mode_switch: ref;

axiom mxl111sf_gpio_mode_switch == $sub.ref(0, 343900);

procedure mxl111sf_gpio_mode_switch($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.18, $M.19, $M.20, $M.21, $M.22, $M.7, $M.23, $M.24, $M.25, $CurrAddr, $M.15, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6;



implementation mxl111sf_gpio_mode_switch($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var vslice_dummy_var_126: i32;
  var vslice_dummy_var_127: i32;
  var vslice_dummy_var_128: i32;
  var vslice_dummy_var_129: i32;
  var vslice_dummy_var_130: i32;
  var vslice_dummy_var_131: i32;
  var vslice_dummy_var_132: i32;
  var vslice_dummy_var_133: i32;
  var vslice_dummy_var_134: i32;
  var vslice_dummy_var_135: i32;
  var vslice_dummy_var_136: i32;
  var vslice_dummy_var_137: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 584} {:cexpr "mxl111sf_gpio_mode_switch:arg:mode"} boogie_si_record_i32($i1);
    goto corral_source_split_3966;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    $i2 := $M.10;
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_3968;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i1, 1);
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i1, 2);
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 602} vslice_dummy_var_137 := mxl111sf_init_port_expander($p0);
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb8:
    assume $i6 == 1;
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 594} vslice_dummy_var_132 := mxl111sf_set_gpio($p0, 6, 0);
    goto corral_source_split_3990;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 595} vslice_dummy_var_133 := mxl111sf_set_gpio($p0, 7, 0);
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 596} msleep(50);
    goto corral_source_split_3992;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 597} vslice_dummy_var_134 := mxl111sf_set_gpio($p0, 5, 1);
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 598} msleep(50);
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 599} vslice_dummy_var_135 := mxl111sf_set_gpio($p0, 4, 1);
    goto corral_source_split_3995;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 600} msleep(50);
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 601} vslice_dummy_var_136 := mxl111sf_set_gpio($p0, 3, 1);
    goto corral_source_split_3997;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 586} vslice_dummy_var_127 := mxl111sf_set_gpio($p0, 4, 0);
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} vslice_dummy_var_128 := mxl111sf_set_gpio($p0, 5, 0);
    goto corral_source_split_3978;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 588} msleep(50);
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} vslice_dummy_var_129 := mxl111sf_set_gpio($p0, 7, 1);
    goto corral_source_split_3980;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 590} msleep(50);
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} vslice_dummy_var_130 := mxl111sf_set_gpio($p0, 6, 1);
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 592} msleep(50);
    goto corral_source_split_3983;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 593} vslice_dummy_var_131 := mxl111sf_set_gpio($p0, 3, 0);
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 585} vslice_dummy_var_126 := printk.ref.ref.i32(.str.24, .str.46, $i1);
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mxl111sf_adap_fe_init: ref;

axiom mxl111sf_adap_fe_init == $sub.ref(0, 344932);

procedure mxl111sf_adap_fe_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.15, $M.18, $M.19, $M.20, $M.21, $M.22, $M.11, $M.12, $CurrAddr, $M.17, $M.23, $M.24, $M.25, assertsPassed;



implementation mxl111sf_adap_fe_init($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i8;
  var $i15: i64;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i8;
  var $i33: i64;
  var $i34: i64;
  var $i35: i64;
  var $i36: i64;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $i45: i64;
  var $p47: ref;
  var $i48: i8;
  var $i49: i32;
  var $i50: i1;
  var $i51: i32;
  var $i52: i1;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i24;
  var $i61: i24;
  var $i62: i24;
  var $p63: ref;
  var $p64: ref;
  var $i65: i8;
  var $i66: i64;
  var $i67: i64;
  var $i68: i64;
  var $i69: i1;
  var $p70: ref;
  var $p71: ref;
  var $i72: i32;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $i77: i32;
  var $i78: i32;
  var $i79: i1;
  var $i81: i32;
  var $i82: i1;
  var $i83: i32;
  var $i84: i1;
  var $i85: i32;
  var $i86: i32;
  var $i87: i1;
  var $i89: i32;
  var $i90: i1;
  var $i91: i32;
  var $i92: i1;
  var $i93: i32;
  var $i94: i32;
  var $i95: i1;
  var $p97: ref;
  var $i98: i32;
  var $i99: i32;
  var $i100: i1;
  var $i101: i32;
  var $i102: i1;
  var $i103: i32;
  var $i104: i32;
  var $i105: i1;
  var $i108: i1;
  var $i109: i32;
  var $i110: i1;
  var $i111: i32;
  var $i112: i32;
  var $i113: i1;
  var $i116: i1;
  var $i117: i32;
  var $i118: i1;
  var $i119: i32;
  var $i120: i32;
  var $i121: i1;
  var $p123: ref;
  var $i124: i32;
  var $i125: i1;
  var $p126: ref;
  var $i127: i8;
  var $i128: i32;
  var $i129: i1;
  var $i131: i1;
  var $i132: i32;
  var $i133: i1;
  var $i134: i32;
  var $i135: i32;
  var $i136: i1;
  var $i138: i32;
  var $i139: i1;
  var $i140: i32;
  var $i141: i1;
  var $i142: i32;
  var $i143: i32;
  var $i144: i1;
  var $i146: i1;
  var $p147: ref;
  var $i148: i32;
  var $p149: ref;
  var $p150: ref;
  var $i151: i32;
  var $i152: i32;
  var $i153: i1;
  var $i154: i32;
  var $i155: i1;
  var $i156: i32;
  var $i157: i32;
  var $i158: i1;
  var $p160: ref;
  var $p161: ref;
  var $i162: i64;
  var $i163: i1;
  var $p164: ref;
  var $p165: ref;
  var $i166: i32;
  var $i167: i32;
  var $i168: i32;
  var vslice_dummy_var_138: i32;
  var vslice_dummy_var_139: i32;
  var vslice_dummy_var_140: i32;
  var vslice_dummy_var_141: i32;
  var vslice_dummy_var_142: i32;
  var vslice_dummy_var_143: i32;
  var vslice_dummy_var_144: i32;
  var vslice_dummy_var_145: i32;
  var vslice_dummy_var_146: i32;
  var vslice_dummy_var_147: i32;
  var vslice_dummy_var_148: i32;
  var vslice_dummy_var_149: i32;
  var vslice_dummy_var_150: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 603} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1584)), $mul.ref(784, 1));
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.7, $p2);
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 256)), $mul.ref(56, 1));
    goto corral_source_split_4004;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.7, $p4);
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1584)), $mul.ref(784, 1));
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.7, $p8);
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 256)), $mul.ref(56, 1));
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.7, $p10);
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 2400)), $mul.ref(320, 1));
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.7, $p13);
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i64($i14);
    goto corral_source_split_4015;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    $i16 := $mul.i64($i15, 2400);
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    $i17 := $add.i64($i16, 2344);
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    $i18 := $sub.i64(0, $i17);
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 1584)), $mul.ref(784, 1));
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.7, $p20);
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 256)), $mul.ref(56, 1));
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.7, $p22);
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_4024;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 1584)), $mul.ref(784, 1));
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.7, $p26);
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 256)), $mul.ref(56, 1));
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.7, $p28);
    goto corral_source_split_4029;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 2400)), $mul.ref(320, 1));
    goto corral_source_split_4031;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.7, $p31);
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i64($i32);
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    $i34 := $mul.i64($i33, 2400);
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    $i35 := $add.i64($i34, 2344);
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    $i36 := $sub.i64(0, $i35);
    goto corral_source_split_4036;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p25, $mul.ref($i36, 7456)), $mul.ref(7448, 1));
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.7, $p38);
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_4040;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p40, $mul.ref(0, 368)), $mul.ref(272, 1));
    goto corral_source_split_4041;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 1584)), $mul.ref(1576, 1));
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.7, $p43);
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    $i45 := $sext.i32.i64($i44);
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p40, $mul.ref(0, 368)), $mul.ref(13, 1));
    goto corral_source_split_4047;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    $i48 := $load.i8($M.7, $p47);
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i32($i48);
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i49, 0);
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p54, .str.2);
    goto corral_source_split_4060;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p55, .str.87);
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4063;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p56, .str.3);
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p57, .str.77);
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4067;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p58);
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    $i60 := $load.i24($M.5, $p59);
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    $i61 := $and.i24($i60, $sub.i24(0, 262144));
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    $i62 := $or.i24($i61, 275);
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p59, $i62);
    goto corral_source_split_4072;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p63, 0);
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4075;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    $i65 := $load.i8($M.6, $p64);
    goto corral_source_split_4076;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    $i66 := $zext.i8.i64($i65);
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    $i67 := $and.i64($i66, 1);
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 605} $i68 := ldv__builtin_expect($i67, 0);
    call {:si_unique_call 606} {:cexpr "tmp"} boogie_si_record_i64($i68);
    goto corral_source_split_4079;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    $i69 := $ne.i64($i68, 0);
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p40, $mul.ref(0, 368)), $mul.ref(104, 1));
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 608} ldv_mutex_lock_121($p70);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p42, $mul.ref($i45, 32)), $mul.ref(0, 1));
    goto corral_source_split_4087;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.7, $p71);
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p40, $mul.ref(0, 368)), $mul.ref(20, 1));
    goto corral_source_split_4089;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p73, $i72);
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p7, $mul.ref($i18, 7456)), $mul.ref(40, 1));
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.7, $p74);
    goto corral_source_split_4092;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p40, $mul.ref(0, 368)), $mul.ref(20, 1));
    goto corral_source_split_4093;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.7, $p76);
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 609} $i78 := usb_set_interface($p75, 0, $i77);
    call {:si_unique_call 610} {:cexpr "tmp___0"} boogie_si_record_i32($i78);
    goto corral_source_split_4095;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    $i79 := $slt.i32($i78, 0);
    goto corral_source_split_4096;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    assume {:branchcond $i79} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} $i81 := mxl1x1sf_soft_reset($p40);
    call {:si_unique_call 613} {:cexpr "err"} boogie_si_record_i32($i81);
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    $i82 := $slt.i32($i81, 0);
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    $i83 := $zext.i1.i32($i82);
    call {:si_unique_call 614} {:cexpr "__ret"} boogie_si_record_i32($i83);
    goto corral_source_split_4103;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    $i84 := $ne.i32($i83, 0);
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    assume {:branchcond $i84} true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i84 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 616} $i89 := mxl111sf_init_tuner_demod($p40);
    call {:si_unique_call 617} {:cexpr "err"} boogie_si_record_i32($i89);
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    $i90 := $slt.i32($i89, 0);
    goto corral_source_split_4115;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    $i91 := $zext.i1.i32($i90);
    call {:si_unique_call 618} {:cexpr "__ret___0"} boogie_si_record_i32($i91);
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    $i92 := $ne.i32($i91, 0);
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    assume {:branchcond $i92} true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i92 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p42, $mul.ref($i45, 32)), $mul.ref(8, 1));
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    $i98 := $load.i32($M.7, $p97);
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 620} $i99 := mxl1x1sf_set_device_mode($p40, $i98);
    call {:si_unique_call 621} {:cexpr "err"} boogie_si_record_i32($i99);
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    $i100 := $slt.i32($i99, 0);
    goto corral_source_split_4130;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    $i101 := $zext.i1.i32($i100);
    call {:si_unique_call 622} {:cexpr "__ret___1"} boogie_si_record_i32($i101);
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    $i102 := $ne.i32($i101, 0);
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    assume {:branchcond $i102} true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i102 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 624} vslice_dummy_var_143 := mxl111sf_enable_usb_output($p40);
    goto corral_source_split_4142;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    $i108 := $slt.i32($i99, 0);
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    $i109 := $zext.i1.i32($i108);
    call {:si_unique_call 625} {:cexpr "__ret___2"} boogie_si_record_i32($i109);
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    $i110 := $ne.i32($i109, 0);
    goto corral_source_split_4145;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    assume {:branchcond $i110} true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i110 == 1);
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 627} vslice_dummy_var_145 := mxl1x1sf_top_master_ctrl($p40, 1);
    goto corral_source_split_4155;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    $i116 := $slt.i32($i99, 0);
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    $i117 := $zext.i1.i32($i116);
    call {:si_unique_call 628} {:cexpr "__ret___3"} boogie_si_record_i32($i117);
    goto corral_source_split_4157;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    $i118 := $ne.i32($i117, 0);
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    assume {:branchcond $i118} true;
    goto $bb38, $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume !($i118 == 1);
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p42, $mul.ref($i45, 32)), $mul.ref(4, 1));
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    $i124 := $load.i32($M.7, $p123);
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    $i125 := $ne.i32($i124, 0);
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    assume {:branchcond $i125} true;
    goto $bb44, $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    assume !($i125 == 1);
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 633} $i138 := mxl111sf_init_port_expander($p40);
    call {:si_unique_call 634} {:cexpr "err"} boogie_si_record_i32($i138);
    goto corral_source_split_4192;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    $i139 := $slt.i32($i138, 0);
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    $i140 := $zext.i1.i32($i139);
    call {:si_unique_call 635} {:cexpr "__ret___6"} boogie_si_record_i32($i140);
    goto corral_source_split_4194;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    $i141 := $ne.i32($i140, 0);
    goto corral_source_split_4195;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    assume {:branchcond $i141} true;
    goto $bb56, $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    assume !($i141 == 1);
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $i146 := $eq.i32($i140, 0);
    goto corral_source_split_4205;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    assume {:branchcond $i146} true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i146 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p42, $mul.ref($i45, 32)), $mul.ref(16, 1));
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    $p161 := $load.ref($M.7, $p160);
    goto corral_source_split_4230;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    $i162 := $p2i.ref.i64($p161);
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    $i163 := $ne.i64($i162, 0);
    goto corral_source_split_4232;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    assume {:branchcond $i163} true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i163 == 1);
    assume {:verifier.code 0} true;
    $i167 := 0;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    goto corral_source_split_4238;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    $i168 := $i167;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    $r := $i168;
    return;

  $bb71:
    assume $i163 == 1;
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p42, $mul.ref($i45, 32)), $mul.ref(16, 1));
    goto corral_source_split_4235;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    $p165 := $load.ref($M.7, $p164);
    call {:si_unique_call 642} $i166 := devirtbounce.4($p165, $p0);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    call {:si_unique_call 643} {:cexpr "tmp___1"} boogie_si_record_i32($i166);
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    $i167 := $i166;
    goto $bb73;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb62:
    assume $i146 == 1;
    goto corral_source_split_4207;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p42, $mul.ref($i45, 32)), $mul.ref(4, 1));
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    $i148 := $load.i32($M.7, $p147);
    goto corral_source_split_4209;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p40, $mul.ref(0, 368)), $mul.ref(24, 1));
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p149, $i148);
    goto corral_source_split_4211;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p40, $mul.ref(0, 368)), $mul.ref(24, 1));
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    $i151 := $load.i32($M.7, $p150);
    goto corral_source_split_4213;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} $i152 := mxl111sf_gpio_mode_switch($p40, $i151);
    call {:si_unique_call 638} {:cexpr "err"} boogie_si_record_i32($i152);
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    $i153 := $slt.i32($i152, 0);
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    $i154 := $zext.i1.i32($i153);
    call {:si_unique_call 639} {:cexpr "__ret___5"} boogie_si_record_i32($i154);
    goto corral_source_split_4216;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    $i155 := $ne.i32($i154, 0);
    goto corral_source_split_4217;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    assume {:branchcond $i155} true;
    goto $bb64, $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    assume !($i155 == 1);
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    call {:si_unique_call 641} msleep(100);
    goto corral_source_split_4227;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb64:
    assume $i155 == 1;
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    $i156 := $M.10;
    goto corral_source_split_4220;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    $i157 := $and.i32($i156, 16);
    goto corral_source_split_4221;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    $i158 := $ne.i32($i157, 0);
    goto corral_source_split_4222;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    assume {:branchcond $i158} true;
    goto $bb67, $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    assume !($i158 == 1);
    goto $bb66;

  $bb67:
    assume $i158 == 1;
    goto corral_source_split_4224;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 640} vslice_dummy_var_150 := printk.ref.ref.i32.i32(.str.5, .str.87, $i152, 306);
    goto corral_source_split_4225;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb56:
    assume $i141 == 1;
    goto corral_source_split_4197;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    $i142 := $M.10;
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    $i143 := $and.i32($i142, 16);
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    $i144 := $ne.i32($i143, 0);
    goto corral_source_split_4200;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    assume !($i144 == 1);
    goto $bb58;

  $bb59:
    assume $i144 == 1;
    goto corral_source_split_4202;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 636} vslice_dummy_var_149 := printk.ref.ref.i32.i32(.str.5, .str.87, $i138, 303);
    goto corral_source_split_4203;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb44:
    assume $i125 == 1;
    goto corral_source_split_4172;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p40, $mul.ref(0, 368)), $mul.ref(15, 1));
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    $i127 := $load.i8($M.7, $p126);
    goto corral_source_split_4174;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    $i128 := $zext.i8.i32($i127);
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    $i129 := $ugt.i32($i128, 1);
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    assume !($i129 == 1);
    goto $bb46;

  $bb47:
    assume $i129 == 1;
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 630} vslice_dummy_var_147 := mxl111sf_config_pin_mux_modes($p40, 7);
    goto corral_source_split_4179;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    $i131 := $slt.i32($i99, 0);
    goto corral_source_split_4180;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    $i132 := $zext.i1.i32($i131);
    call {:si_unique_call 631} {:cexpr "__ret___4"} boogie_si_record_i32($i132);
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    $i133 := $ne.i32($i132, 0);
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    assume {:branchcond $i133} true;
    goto $bb49, $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    assume !($i133 == 1);
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb49:
    assume $i133 == 1;
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    $i134 := $M.10;
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    $i135 := $and.i32($i134, 16);
    goto corral_source_split_4186;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    $i136 := $ne.i32($i135, 0);
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    assume {:branchcond $i136} true;
    goto $bb52, $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    assume !($i136 == 1);
    goto $bb51;

  $bb52:
    assume $i136 == 1;
    goto corral_source_split_4189;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} vslice_dummy_var_148 := printk.ref.ref.i32.i32(.str.5, .str.87, $i99, 300);
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb38:
    assume $i118 == 1;
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    $i119 := $M.10;
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    $i120 := $and.i32($i119, 16);
    goto corral_source_split_4162;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    $i121 := $ne.i32($i120, 0);
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    assume {:branchcond $i121} true;
    goto $bb41, $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    assume !($i121 == 1);
    goto $bb40;

  $bb41:
    assume $i121 == 1;
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 629} vslice_dummy_var_146 := printk.ref.ref.i32.i32(.str.5, .str.87, $i99, 294);
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb32:
    assume $i110 == 1;
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    $i111 := $M.10;
    goto corral_source_split_4148;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    $i112 := $and.i32($i111, 16);
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    $i113 := $ne.i32($i112, 0);
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    assume {:branchcond $i113} true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i113 == 1);
    goto $bb34;

  $bb35:
    assume $i113 == 1;
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 626} vslice_dummy_var_144 := printk.ref.ref.i32.i32(.str.5, .str.87, $i99, 292);
    goto corral_source_split_4153;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb26:
    assume $i102 == 1;
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    $i103 := $M.10;
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    $i104 := $and.i32($i103, 16);
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    $i105 := $ne.i32($i104, 0);
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    assume {:branchcond $i105} true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i105 == 1);
    goto $bb28;

  $bb29:
    assume $i105 == 1;
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 623} vslice_dummy_var_142 := printk.ref.ref.i32.i32(.str.5, .str.87, $i99, 290);
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb20:
    assume $i92 == 1;
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    $i93 := $M.10;
    goto corral_source_split_4120;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    $i94 := $and.i32($i93, 16);
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    $i95 := $ne.i32($i94, 0);
    goto corral_source_split_4122;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    assume {:branchcond $i95} true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i95 == 1);
    goto $bb22;

  $bb23:
    assume $i95 == 1;
    goto corral_source_split_4124;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 619} vslice_dummy_var_141 := printk.ref.ref.i32.i32(.str.5, .str.87, $i89, 287);
    goto corral_source_split_4125;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb14:
    assume $i84 == 1;
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    $i85 := $M.10;
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    $i86 := $and.i32($i85, 16);
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    $i87 := $ne.i32($i86, 0);
    goto corral_source_split_4109;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    assume {:branchcond $i87} true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i87 == 1);
    goto $bb16;

  $bb17:
    assume $i87 == 1;
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 615} vslice_dummy_var_140 := printk.ref.ref.i32.i32(.str.5, .str.87, $i81, 285);
    goto corral_source_split_4112;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb11:
    assume $i79 == 1;
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 611} vslice_dummy_var_139 := printk.ref(.str.82);
    goto corral_source_split_4099;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_1:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i69 == 1;
    goto corral_source_split_4082;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 607} __dynamic_pr_debug.ref.ref.ref($p1, .str.77, .str.87);
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb1:
    assume $i50 == 1;
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    $i51 := $M.10;
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, 0);
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i168 := $sub.i32(0, 19);
    goto $bb74;

  $bb3:
    assume $i52 == 1;
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 604} vslice_dummy_var_138 := printk.ref.ref(.str.86, .str.87);
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const mxl111sf_adap_fe_sleep: ref;

axiom mxl111sf_adap_fe_sleep == $sub.ref(0, 345964);

procedure mxl111sf_adap_fe_sleep($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.11, $M.12, $M.15, $CurrAddr, $M.18, $M.19, $M.20, $M.21, $M.22, $M.17, $M.23, $M.24, $M.25, assertsPassed;



implementation mxl111sf_adap_fe_sleep($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i8;
  var $i15: i64;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i64;
  var $p29: ref;
  var $i30: i8;
  var $i31: i32;
  var $i32: i1;
  var $i33: i32;
  var $i34: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i24;
  var $i43: i24;
  var $i44: i24;
  var $p45: ref;
  var $p46: ref;
  var $i47: i8;
  var $i48: i64;
  var $i49: i64;
  var $i50: i64;
  var $i51: i1;
  var $p52: ref;
  var $p53: ref;
  var $i54: i64;
  var $i55: i1;
  var $p56: ref;
  var $p57: ref;
  var $i58: i32;
  var $i59: i32;
  var $p60: ref;
  var $i61: i32;
  var vslice_dummy_var_151: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 644} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1584)), $mul.ref(784, 1));
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.7, $p2);
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 256)), $mul.ref(56, 1));
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.7, $p4);
    goto corral_source_split_4246;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_4248;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1584)), $mul.ref(784, 1));
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.7, $p8);
    goto corral_source_split_4250;

  corral_source_split_4250:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 256)), $mul.ref(56, 1));
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.7, $p10);
    goto corral_source_split_4252;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_4253;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 2400)), $mul.ref(320, 1));
    goto corral_source_split_4254;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.7, $p13);
    goto corral_source_split_4255;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i64($i14);
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    $i16 := $mul.i64($i15, 2400);
    goto corral_source_split_4257;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    $i17 := $add.i64($i16, 2344);
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    $i18 := $sub.i64(0, $i17);
    goto corral_source_split_4259;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    goto corral_source_split_4260;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p7, $mul.ref($i18, 7456)), $mul.ref(7448, 1));
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.7, $p20);
    goto corral_source_split_4262;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 368)), $mul.ref(272, 1));
    goto corral_source_split_4264;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_4265;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 1584)), $mul.ref(1576, 1));
    goto corral_source_split_4266;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.7, $p25);
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i26);
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    goto corral_source_split_4269;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p22, $mul.ref(0, 368)), $mul.ref(13, 1));
    goto corral_source_split_4270;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.7, $p29);
    goto corral_source_split_4271;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i32($i30);
    goto corral_source_split_4272;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i31, 0);
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p36, .str.2);
    goto corral_source_split_4283;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p37, .str.88);
    goto corral_source_split_4285;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4286;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p38, .str.3);
    goto corral_source_split_4287;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p39, .str.77);
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4290;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_4291;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    $i42 := $load.i24($M.5, $p41);
    goto corral_source_split_4292;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    $i43 := $and.i24($i42, $sub.i24(0, 262144));
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    $i44 := $or.i24($i43, 331);
    goto corral_source_split_4294;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p41, $i44);
    goto corral_source_split_4295;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p45, 0);
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4298;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    $i47 := $load.i8($M.6, $p46);
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i64($i47);
    goto corral_source_split_4300;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    $i49 := $and.i64($i48, 1);
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} $i50 := ldv__builtin_expect($i49, 0);
    call {:si_unique_call 647} {:cexpr "tmp"} boogie_si_record_i64($i50);
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    $i51 := $ne.i64($i50, 0);
    goto corral_source_split_4303;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    assume {:branchcond $i51} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p24, $mul.ref($i27, 32)), $mul.ref(24, 1));
    goto corral_source_split_4308;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.7, $p52);
    goto corral_source_split_4309;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    $i54 := $p2i.ref.i64($p53);
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    $i55 := $ne.i64($i54, 0);
    goto corral_source_split_4311;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    $i59 := 0;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_4317;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p22, $mul.ref(0, 368)), $mul.ref(104, 1));
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} ldv_mutex_unlock_122($p60);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    goto corral_source_split_4319;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    $i61 := $i59;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    $r := $i61;
    return;

  SeqInstr_10:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i55 == 1;
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p24, $mul.ref($i27, 32)), $mul.ref(24, 1));
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.7, $p56);
    call {:si_unique_call 649} $i58 := devirtbounce.4($p57, $p0);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    call {:si_unique_call 650} {:cexpr "tmp___0"} boogie_si_record_i32($i58);
    goto corral_source_split_4315;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    $i59 := $i58;
    goto $bb13;

  SeqInstr_7:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i51 == 1;
    goto corral_source_split_4305;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 648} __dynamic_pr_debug.ref.ref.ref($p1, .str.77, .str.88);
    goto corral_source_split_4306;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb1:
    assume $i32 == 1;
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    $i33 := $M.10;
    goto corral_source_split_4276;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_4277;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i61 := $sub.i32(0, 19);
    goto $bb14;

  $bb3:
    assume $i34 == 1;
    goto corral_source_split_4279;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} vslice_dummy_var_151 := printk.ref.ref(.str.86, .str.88);
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const ldv_mutex_unlock_122: ref;

axiom ldv_mutex_unlock_122 == $sub.ref(0, 346996);

procedure ldv_mutex_unlock_122($p0: ref);
  free requires assertsPassed;
  modifies $M.17, assertsPassed;



implementation ldv_mutex_unlock_122($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4323;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} ldv_linux_kernel_locking_mutex_mutex_unlock_fe_lock_of_mxl111sf_state($p0);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_13:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_locking_mutex_mutex_unlock_fe_lock_of_mxl111sf_state: ref;

axiom ldv_linux_kernel_locking_mutex_mutex_unlock_fe_lock_of_mxl111sf_state == $sub.ref(0, 348028);

procedure ldv_linux_kernel_locking_mutex_mutex_unlock_fe_lock_of_mxl111sf_state($p0: ref);
  free requires assertsPassed;
  modifies $M.17, assertsPassed;



implementation ldv_linux_kernel_locking_mutex_mutex_unlock_fe_lock_of_mxl111sf_state($p0: ref)
{
  var $i1: i8;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    $i1 := $M.17;
    goto corral_source_split_4327;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i8.i1($i1);
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_4329;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 653} ldv_assert_linux_kernel_locking_mutex__one_thread_double_unlock($i3);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    $M.17 := 0;
    call {:si_unique_call 654} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_fe_lock_of_mxl111sf_state"} boogie_si_record_i8(0);
    goto corral_source_split_4331;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_16:
    assume !assertsPassed;
    return;
}



const ldv_assert_linux_kernel_locking_mutex__one_thread_double_unlock: ref;

axiom ldv_assert_linux_kernel_locking_mutex__one_thread_double_unlock == $sub.ref(0, 349060);

procedure ldv_assert_linux_kernel_locking_mutex__one_thread_double_unlock($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_locking_mutex__one_thread_double_unlock($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 655} {:cexpr "ldv_assert_linux_kernel_locking_mutex__one_thread_double_unlock:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_4333;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_4334;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 1} true;
    call {:si_unique_call 656} __VERIFIER_error();
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    goto corral_source_split_4337;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_19:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_mutex_lock_121: ref;

axiom ldv_mutex_lock_121 == $sub.ref(0, 350092);

procedure ldv_mutex_lock_121($p0: ref);
  free requires assertsPassed;
  modifies $M.17, assertsPassed;



implementation ldv_mutex_lock_121($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4339;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 657} ldv_linux_kernel_locking_mutex_mutex_lock_fe_lock_of_mxl111sf_state($p0);
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    goto corral_source_split_4340;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_22:
    assume !assertsPassed;
    return;
}



const msleep: ref;

axiom msleep == $sub.ref(0, 351124);

procedure msleep($i0: i32);
  free requires assertsPassed;



implementation msleep($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 658} {:cexpr "msleep:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_4342;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    return;
}



const ldv_linux_kernel_locking_mutex_mutex_lock_fe_lock_of_mxl111sf_state: ref;

axiom ldv_linux_kernel_locking_mutex_mutex_lock_fe_lock_of_mxl111sf_state == $sub.ref(0, 352156);

procedure ldv_linux_kernel_locking_mutex_mutex_lock_fe_lock_of_mxl111sf_state($p0: ref);
  free requires assertsPassed;
  modifies $M.17, assertsPassed;



implementation ldv_linux_kernel_locking_mutex_mutex_lock_fe_lock_of_mxl111sf_state($p0: ref)
{
  var $i1: i8;
  var $i2: i1;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4344;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    $i1 := $M.17;
    goto corral_source_split_4345;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i8.i1($i1);
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    $i3 := $xor.i1($i2, 1);
    goto corral_source_split_4347;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_4348;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 659} ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock($i4);
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    goto corral_source_split_4349;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    $M.17 := 1;
    call {:si_unique_call 660} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_fe_lock_of_mxl111sf_state"} boogie_si_record_i8(1);
    goto corral_source_split_4350;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_25:
    assume !assertsPassed;
    return;
}



const ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock: ref;

axiom ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock == $sub.ref(0, 353188);

procedure ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 661} {:cexpr "ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_4352;

  corral_source_split_4352:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_4353;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_4355;

  corral_source_split_4355:
    assume {:verifier.code 1} true;
    call {:si_unique_call 662} __VERIFIER_error();
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    goto corral_source_split_4356;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_28:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mxl111sf_set_gpio: ref;

axiom mxl111sf_set_gpio == $sub.ref(0, 354220);

procedure mxl111sf_set_gpio($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.18, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $CurrAddr, $M.15, $M.7, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6;



implementation mxl111sf_set_gpio($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i13: i32;
  var $i15: i32;
  var $i14: i32;
  var vslice_dummy_var_152: i32;
  var vslice_dummy_var_153: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 663} {:cexpr "mxl111sf_set_gpio:arg:gpio"} boogie_si_record_i32($i1);
    call {:si_unique_call 664} {:cexpr "mxl111sf_set_gpio:arg:val"} boogie_si_record_i32($i2);
    goto corral_source_split_4358;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    $i3 := $M.10;
    goto corral_source_split_4359;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_4360;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(8, 1));
    goto corral_source_split_4365;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.7, $p6);
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 1);
    goto corral_source_split_4367;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(8, 1));
    goto corral_source_split_4373;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.7, $p9);
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_4375;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 670} vslice_dummy_var_153 := printk.ref.ref(.str.44, .str.43);
    goto corral_source_split_4381;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} $i13 := pca9534_set_gpio($p0, $i1, $i2);
    call {:si_unique_call 667} {:cexpr "tmp"} boogie_si_record_i32($i13);
    goto corral_source_split_4371;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    $i14 := $i13;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_4383;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb8:
    assume $i11 == 1;
    goto corral_source_split_4377;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 668} $i15 := mxl111sf_hw_set_gpio($p0, $i1, $i2);
    call {:si_unique_call 669} {:cexpr "tmp___0"} boogie_si_record_i32($i15);
    goto corral_source_split_4379;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    $i14 := $i15;
    goto $bb13;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_4369;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_4362;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 665} vslice_dummy_var_152 := printk.ref.ref.i32.i32(.str.42, .str.43, $i1, $i2);
    goto corral_source_split_4363;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pca9534_set_gpio: ref;

axiom pca9534_set_gpio == $sub.ref(0, 355252);

procedure pca9534_set_gpio($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.18, $M.19, $M.20, $M.21, $M.22, $CurrAddr;



implementation pca9534_set_gpio($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $p11: ref;
  var $p13: ref;
  var $p16: ref;
  var $p18: ref;
  var $p20: ref;
  var $p22: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p34: ref;
  var $i35: i8;
  var $p36: ref;
  var $p37: ref;
  var $i38: i8;
  var $i39: i32;
  var $i40: i32;
  var $i41: i8;
  var $i42: i32;
  var $i43: i32;
  var $i44: i32;
  var $i45: i8;
  var $p46: ref;
  var $p47: ref;
  var $i48: i8;
  var $i49: i32;
  var $i50: i1;
  var $i51: i32;
  var $i52: i32;
  var $i53: i8;
  var $i54: i32;
  var $i55: i32;
  var $i56: i8;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var vslice_dummy_var_154: i32;
  var vslice_dummy_var_155: i32;
  var vslice_dummy_var_156: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 671} $p3 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 672} $p4 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 673} $p5 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    call {:si_unique_call 674} {:cexpr "pca9534_set_gpio:arg:gpio"} boogie_si_record_i32($i1);
    call {:si_unique_call 675} {:cexpr "pca9534_set_gpio:arg:val"} boogie_si_record_i32($i2);
    goto corral_source_split_4385;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_4386;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    $M.18 := $store.i8($M.18, $p6, 1);
    goto corral_source_split_4387;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_4388;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    $M.18 := $store.i8($M.18, $p7, 0);
    goto corral_source_split_4389;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    $M.18 := $store.i8($M.18, $p4, 0);
    goto corral_source_split_4390;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4391;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    $M.19 := $store.i16($M.19, $p9, 32);
    goto corral_source_split_4392;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    $M.20 := $store.i16($M.20, $p11, 0);
    goto corral_source_split_4394;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_4395;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    $M.21 := $store.i16($M.21, $p13, 1);
    goto corral_source_split_4396;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    goto corral_source_split_4397;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    $M.22 := $store.ref($M.22, $p16, $p3);
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(1, 16)), $mul.ref(0, 1));
    goto corral_source_split_4400;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    $M.19 := $store.i16($M.19, $p18, 32);
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(1, 16)), $mul.ref(2, 1));
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    $M.20 := $store.i16($M.20, $p20, 1);
    goto corral_source_split_4403;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(1, 16)), $mul.ref(4, 1));
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    $M.21 := $store.i16($M.21, $p22, 1);
    goto corral_source_split_4405;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(1, 16)), $mul.ref(8, 1));
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    $M.22 := $store.ref($M.22, $p24, $p4);
    goto corral_source_split_4407;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    $i25 := $M.10;
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(0, 1));
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.7, $p28);
    goto corral_source_split_4415;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 7456)), $mul.ref(424, 1));
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p5);
    goto corral_source_split_4417;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 677} vslice_dummy_var_155 := i2c_transfer($p30, $p31, 2);
    goto corral_source_split_4418;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_4419;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    $M.21 := $store.i16($M.21, $p34, 2);
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.18, $p4);
    goto corral_source_split_4421;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_4422;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    $M.18 := $store.i8($M.18, $p36, $i35);
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.18, $p37);
    goto corral_source_split_4425;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    $i39 := $sext.i8.i32($i38);
    goto corral_source_split_4426;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    $i40 := $shl.i32(1, $i1);
    goto corral_source_split_4427;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i32.i8($i40);
    goto corral_source_split_4428;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    $i42 := $sext.i8.i32($i41);
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    $i43 := $xor.i32($i42, $sub.i32(0, 1));
    goto corral_source_split_4430;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    $i44 := $and.i32($i39, $i43);
    goto corral_source_split_4431;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i32.i8($i44);
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_4433;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    $M.18 := $store.i8($M.18, $p46, $i45);
    goto corral_source_split_4434;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    $i48 := $load.i8($M.18, $p47);
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    $i49 := $sext.i8.i32($i48);
    goto corral_source_split_4437;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i2, 0);
    goto corral_source_split_4438;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    $i51 := $zext.i1.i32($i50);
    goto corral_source_split_4439;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    $i52 := $shl.i32($i51, $i1);
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i32.i8($i52);
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    $i54 := $sext.i8.i32($i53);
    goto corral_source_split_4442;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    $i55 := $or.i32($i49, $i54);
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    $i56 := $trunc.i32.i8($i55);
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    $M.18 := $store.i8($M.18, $p57, $i56);
    goto corral_source_split_4446;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(0, 1));
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.7, $p58);
    goto corral_source_split_4448;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p59, $mul.ref(0, 7456)), $mul.ref(424, 1));
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p5);
    goto corral_source_split_4450;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 678} vslice_dummy_var_156 := i2c_transfer($p60, $p61, 1);
    goto corral_source_split_4451;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i26 == 1;
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 676} vslice_dummy_var_154 := printk.ref.ref.i32.i32(.str.42, .str.150, $i1, $i2);
    goto corral_source_split_4412;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mxl111sf_hw_set_gpio: ref;

axiom mxl111sf_hw_set_gpio == $sub.ref(0, 356284);

procedure mxl111sf_hw_set_gpio($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.23, $M.24, $M.25, $M.15, $M.7, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation mxl111sf_hw_set_gpio($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} {:cexpr "mxl111sf_hw_set_gpio:arg:gpio"} boogie_si_record_i32($i1);
    call {:si_unique_call 680} {:cexpr "mxl111sf_hw_set_gpio:arg:val"} boogie_si_record_i32($i2);
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} $i3 := mxl111sf_hw_do_set_gpio($p0, $i1, 1, $i2);
    call {:si_unique_call 682} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const mxl111sf_hw_do_set_gpio: ref;

axiom mxl111sf_hw_do_set_gpio == $sub.ref(0, 357316);

procedure mxl111sf_hw_do_set_gpio($p0: ref, $i1: i32, $i2: i32, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.23, $M.24, $M.25, $M.15, $M.7, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation mxl111sf_hw_do_set_gpio($p0: ref, $i1: i32, $i2: i32, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $i5: i8;
  var $p6: ref;
  var $i7: i8;
  var $p8: ref;
  var $i9: i8;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i14: i32;
  var vslice_dummy_var_157: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 683} $p4 := $alloc($mul.ref(3, $zext.i32.i64(1)));
    call {:si_unique_call 684} {:cexpr "mxl111sf_hw_do_set_gpio:arg:gpio"} boogie_si_record_i32($i1);
    call {:si_unique_call 685} {:cexpr "mxl111sf_hw_do_set_gpio:arg:direction"} boogie_si_record_i32($i2);
    call {:si_unique_call 686} {:cexpr "mxl111sf_hw_do_set_gpio:arg:val"} boogie_si_record_i32($i3);
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i32.i8($i1);
    goto corral_source_split_4457;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 3)), $mul.ref(0, 1));
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    $M.23 := $store.i8($M.23, $p6, $i5);
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i8($i2);
    goto corral_source_split_4460;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 3)), $mul.ref(1, 1));
    goto corral_source_split_4461;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    $M.24 := $store.i8($M.24, $p8, $i7);
    goto corral_source_split_4462;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i8($i3);
    goto corral_source_split_4463;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 3)), $mul.ref(2, 1));
    goto corral_source_split_4464;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    $M.25 := $store.i8($M.25, $p10, $i9);
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    $i11 := $M.10;
    goto corral_source_split_4466;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_4467;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} $i14 := mxl111sf_config_gpio_pins($p0, $p4);
    call {:si_unique_call 689} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_4472;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 687} vslice_dummy_var_157 := printk.ref.ref.i32.i32.i32(.str.151, .str.152, $i1, $i2, $i3);
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mxl111sf_config_gpio_pins: ref;

axiom mxl111sf_config_gpio_pins == $sub.ref(0, 358348);

procedure mxl111sf_config_gpio_pins($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.15, $M.7, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.25, $CurrAddr;



implementation mxl111sf_config_gpio_pins($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $i18: i8;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i8;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i8;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $i34: i8;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $i38: i8;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $i42: i8;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $i46: i8;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $i50: i8;
  var $i51: i32;
  var $i52: i1;
  var $p53: ref;
  var $i54: i8;
  var $i55: i32;
  var $i56: i1;
  var $i57: i32;
  var $i58: i1;
  var $i59: i32;
  var $i60: i1;
  var $i61: i32;
  var $i62: i32;
  var $i63: i1;
  var $i65: i1;
  var $i67: i8;
  var $i68: i32;
  var $p69: ref;
  var $i70: i8;
  var $i71: i32;
  var $i72: i32;
  var $i73: i32;
  var $i74: i8;
  var $i75: i32;
  var $i76: i32;
  var $i77: i32;
  var $i78: i8;
  var $i79: i8;
  var $i80: i32;
  var $p81: ref;
  var $i82: i8;
  var $i83: i32;
  var $p84: ref;
  var $i85: i8;
  var $i86: i32;
  var $i87: i32;
  var $i88: i32;
  var $i89: i8;
  var $i90: i32;
  var $i91: i32;
  var $i92: i8;
  var $i93: i8;
  var $i94: i32;
  var $i95: i8;
  var $i96: i32;
  var $i97: i1;
  var $i98: i32;
  var $i99: i1;
  var $i100: i32;
  var $i101: i32;
  var $i102: i1;
  var $i104: i1;
  var $i105: i32;
  var $i106: i1;
  var $i107: i32;
  var $i108: i1;
  var $i109: i32;
  var $i110: i32;
  var $i111: i1;
  var $i113: i1;
  var $i114: i8;
  var $i115: i32;
  var $p116: ref;
  var $i117: i8;
  var $i118: i32;
  var $i119: i32;
  var $i120: i8;
  var $i121: i32;
  var $i122: i32;
  var $i123: i32;
  var $i124: i8;
  var $i125: i8;
  var $i126: i32;
  var $p127: ref;
  var $i128: i8;
  var $i129: i32;
  var $p130: ref;
  var $i131: i8;
  var $i132: i32;
  var $i133: i32;
  var $i134: i8;
  var $i135: i32;
  var $i136: i32;
  var $i137: i8;
  var $i138: i8;
  var $i139: i32;
  var $i140: i8;
  var $i141: i32;
  var $i142: i1;
  var $i143: i32;
  var $i144: i1;
  var $i145: i32;
  var $i146: i32;
  var $i147: i1;
  var $i149: i1;
  var $i150: i32;
  var $i151: i1;
  var $i152: i32;
  var $i153: i1;
  var $i154: i32;
  var $i155: i32;
  var $i156: i1;
  var $i158: i1;
  var $i159: i8;
  var $i160: i32;
  var $p161: ref;
  var $i162: i8;
  var $i163: i32;
  var $i164: i32;
  var $i165: i32;
  var $i166: i8;
  var $i167: i32;
  var $i168: i32;
  var $i169: i32;
  var $i170: i8;
  var $i171: i8;
  var $i172: i32;
  var $p173: ref;
  var $i174: i8;
  var $i175: i32;
  var $p176: ref;
  var $i177: i8;
  var $i178: i32;
  var $i179: i32;
  var $i180: i32;
  var $i181: i8;
  var $i182: i32;
  var $i183: i32;
  var $i184: i8;
  var $i185: i8;
  var $i186: i32;
  var $i187: i8;
  var $i188: i32;
  var $i189: i1;
  var $i190: i32;
  var $i191: i1;
  var $i192: i32;
  var $i193: i32;
  var $i194: i1;
  var $i196: i1;
  var $p198: ref;
  var $i199: i8;
  var $i200: i32;
  var $i201: i1;
  var $p202: ref;
  var $i203: i8;
  var $i204: i32;
  var $i205: i8;
  var $p206: ref;
  var $i207: i8;
  var $i208: i32;
  var $i209: i8;
  var $i210: i32;
  var $p212: ref;
  var $i213: i8;
  var $i214: i32;
  var $i215: i8;
  var $p216: ref;
  var $i217: i32;
  var $i211: i32;
  var $i218: i1;
  var $i219: i32;
  var $i220: i1;
  var $i221: i32;
  var $i222: i32;
  var $i223: i1;
  var $i66: i32;
  var $i197: i32;
  var vslice_dummy_var_158: i32;
  var vslice_dummy_var_159: i32;
  var vslice_dummy_var_160: i32;
  var vslice_dummy_var_161: i32;
  var vslice_dummy_var_162: i32;
  var vslice_dummy_var_163: i32;
  var vslice_dummy_var_164: i32;
  var vslice_dummy_var_165: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 690} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    $i3 := $M.10;
    goto corral_source_split_4475;

  corral_source_split_4475:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 16);
    goto corral_source_split_4476;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_4477;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 3)), $mul.ref(0, 1));
    goto corral_source_split_4488;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.23, $p13);
    goto corral_source_split_4489;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_4490;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 0);
    goto corral_source_split_4491;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 3)), $mul.ref(0, 1));
    goto corral_source_split_4495;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.23, $p17);
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_4497;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 1);
    goto corral_source_split_4498;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 3)), $mul.ref(0, 1));
    goto corral_source_split_4502;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.23, $p21);
    goto corral_source_split_4503;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 2);
    goto corral_source_split_4505;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 3)), $mul.ref(0, 1));
    goto corral_source_split_4509;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.23, $p25);
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    goto corral_source_split_4511;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 3);
    goto corral_source_split_4512;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 3)), $mul.ref(0, 1));
    goto corral_source_split_4521;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.23, $p29);
    goto corral_source_split_4522;

  corral_source_split_4522:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i32($i30);
    goto corral_source_split_4523;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i31, 4);
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 3)), $mul.ref(0, 1));
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.23, $p33);
    goto corral_source_split_4529;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i34);
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i35, 5);
    goto corral_source_split_4531;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 3)), $mul.ref(0, 1));
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.23, $p37);
    goto corral_source_split_4536;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i38);
    goto corral_source_split_4537;

  corral_source_split_4537:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i39, 6);
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p1, $mul.ref(0, 3)), $mul.ref(0, 1));
    goto corral_source_split_4542;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    $i42 := $load.i8($M.23, $p41);
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i32($i42);
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i43, 7);
    goto corral_source_split_4545;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p1, $mul.ref(0, 3)), $mul.ref(0, 1));
    goto corral_source_split_4554;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.23, $p45);
    goto corral_source_split_4555;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i46);
    goto corral_source_split_4556;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i47, 8);
    goto corral_source_split_4557;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p1, $mul.ref(0, 3)), $mul.ref(0, 1));
    goto corral_source_split_4561;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    $i50 := $load.i8($M.23, $p49);
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    $i51 := $zext.i8.i32($i50);
    goto corral_source_split_4563;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i51, 9);
    goto corral_source_split_4564;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p1, $mul.ref(0, 3)), $mul.ref(0, 1));
    goto corral_source_split_4568;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    $i54 := $load.i8($M.23, $p53);
    goto corral_source_split_4569;

  corral_source_split_4569:
    assume {:verifier.code 0} true;
    $i55 := $zext.i8.i32($i54);
    goto corral_source_split_4570;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    $i56 := $eq.i32($i55, 10);
    goto corral_source_split_4571;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $i197 := $sub.i32(0, 22);
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    goto corral_source_split_4765;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    $r := $i197;
    return;

  $bb44:
    assume $i56 == 1;
    goto corral_source_split_4573;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 698} $i150 := mxl111sf_read_reg($p0, $sub.i8(0, 126), $p2);
    call {:si_unique_call 699} {:cexpr "ret"} boogie_si_record_i32($i150);
    goto corral_source_split_4575;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    $i151 := $slt.i32($i150, 0);
    goto corral_source_split_4576;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    $i152 := $zext.i1.i32($i151);
    call {:si_unique_call 700} {:cexpr "__ret___3"} boogie_si_record_i32($i152);
    goto corral_source_split_4577;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    $i153 := $ne.i32($i152, 0);
    goto corral_source_split_4578;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    assume {:branchcond $i153} true;
    goto $bb87, $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    assume !($i153 == 1);
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    $i158 := $ne.i32($i152, 0);
    goto corral_source_split_4713;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    assume {:branchcond $i158} true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i158 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    $i159 := $load.i8($M.7, $p2);
    goto corral_source_split_4717;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    $i160 := $sext.i8.i32($i159);
    goto corral_source_split_4718;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p1, $mul.ref(0, 3)), $mul.ref(0, 1));
    goto corral_source_split_4719;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    $i162 := $load.i8($M.23, $p161);
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    $i163 := $zext.i8.i32($i162);
    goto corral_source_split_4721;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    $i164 := $add.i32($i163, $sub.i32(0, 3));
    goto corral_source_split_4722;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    $i165 := $shl.i32(1, $i164);
    goto corral_source_split_4723;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    $i166 := $trunc.i32.i8($i165);
    goto corral_source_split_4724;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    $i167 := $sext.i8.i32($i166);
    goto corral_source_split_4725;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    $i168 := $xor.i32($i167, $sub.i32(0, 1));
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    $i169 := $and.i32($i160, $i168);
    goto corral_source_split_4727;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    $i170 := $trunc.i32.i8($i169);
    goto corral_source_split_4728;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p2, $i170);
    goto corral_source_split_4729;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    $i171 := $load.i8($M.7, $p2);
    goto corral_source_split_4730;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    $i172 := $sext.i8.i32($i171);
    goto corral_source_split_4731;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p1, $mul.ref(0, 3)), $mul.ref(1, 1));
    goto corral_source_split_4732;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    $i174 := $load.i8($M.24, $p173);
    goto corral_source_split_4733;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    $i175 := $zext.i8.i32($i174);
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p1, $mul.ref(0, 3)), $mul.ref(0, 1));
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    $i177 := $load.i8($M.23, $p176);
    goto corral_source_split_4736;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    $i178 := $zext.i8.i32($i177);
    goto corral_source_split_4737;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    $i179 := $add.i32($i178, $sub.i32(0, 3));
    goto corral_source_split_4738;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    $i180 := $shl.i32($i175, $i179);
    goto corral_source_split_4739;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    $i181 := $trunc.i32.i8($i180);
    goto corral_source_split_4740;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    $i182 := $sext.i8.i32($i181);
    goto corral_source_split_4741;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    $i183 := $or.i32($i172, $i182);
    goto corral_source_split_4742;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    $i184 := $trunc.i32.i8($i183);
    goto corral_source_split_4743;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p2, $i184);
    goto corral_source_split_4744;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    $i185 := $load.i8($M.7, $p2);
    goto corral_source_split_4745;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    $i186 := $zext.i8.i32($i185);
    goto corral_source_split_4746;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    $i187 := $trunc.i32.i8($i186);
    goto corral_source_split_4747;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 712} $i188 := mxl111sf_write_reg($p0, $sub.i8(0, 126), $i187);
    call {:si_unique_call 713} {:cexpr "ret"} boogie_si_record_i32($i188);
    goto corral_source_split_4748;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    $i189 := $slt.i32($i188, 0);
    goto corral_source_split_4749;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    $i190 := $zext.i1.i32($i189);
    call {:si_unique_call 714} {:cexpr "__ret___4"} boogie_si_record_i32($i190);
    goto corral_source_split_4750;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    $i191 := $ne.i32($i190, 0);
    goto corral_source_split_4751;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    assume {:branchcond $i191} true;
    goto $bb96, $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    assume !($i191 == 1);
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    $i196 := $ne.i32($i190, 0);
    goto corral_source_split_4761;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    assume {:branchcond $i196} true;
    goto $bb102, $bb103;

  $bb103:
    assume !($i196 == 1);
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($p1, $mul.ref(0, 3)), $mul.ref(1, 1));
    goto corral_source_split_4642;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    $i199 := $load.i8($M.24, $p198);
    goto corral_source_split_4643;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    $i200 := $zext.i8.i32($i199);
    goto corral_source_split_4644;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    $i201 := $eq.i32($i200, 1);
    goto corral_source_split_4645;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    assume {:branchcond $i201} true;
    goto $bb107, $bb108;

  $bb108:
    assume !($i201 == 1);
    goto corral_source_split_4778;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($p1, $mul.ref(0, 3)), $mul.ref(0, 1));
    goto corral_source_split_4779;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    $i213 := $load.i8($M.23, $p212);
    goto corral_source_split_4780;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    $i214 := $zext.i8.i32($i213);
    goto corral_source_split_4781;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    $i215 := $trunc.i32.i8($i214);
    goto corral_source_split_4782;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($p1, $mul.ref(0, 3)), $mul.ref(2, 1));
    goto corral_source_split_4783;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 718} $i217 := mxl111sf_get_gpi_state($p0, $i215, $p216);
    call {:si_unique_call 719} {:cexpr "tmp___1"} boogie_si_record_i32($i217);
    assume {:verifier.code 0} true;
    $i211 := $i217;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    goto corral_source_split_4785;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    $i218 := $slt.i32($i211, 0);
    goto corral_source_split_4786;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    $i219 := $zext.i1.i32($i218);
    call {:si_unique_call 720} {:cexpr "__ret___5"} boogie_si_record_i32($i219);
    goto corral_source_split_4787;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    $i220 := $ne.i32($i219, 0);
    goto corral_source_split_4788;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    assume {:branchcond $i220} true;
    goto $bb110, $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    assume !($i220 == 1);
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    $i66 := $i211;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto corral_source_split_4592;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    $i197 := $i66;
    goto $bb105;

  $bb110:
    assume $i220 == 1;
    goto corral_source_split_4790;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    $i221 := $M.10;
    goto corral_source_split_4791;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    $i222 := $and.i32($i221, 16);
    goto corral_source_split_4792;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    $i223 := $ne.i32($i222, 0);
    goto corral_source_split_4793;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    assume {:branchcond $i223} true;
    goto $bb113, $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    assume !($i223 == 1);
    goto $bb112;

  $bb113:
    assume $i223 == 1;
    goto corral_source_split_4795;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} vslice_dummy_var_165 := printk.ref.ref.i32.i32(.str.5, .str.153, $i211, 173);
    goto corral_source_split_4796;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb107:
    assume $i201 == 1;
    goto corral_source_split_4767;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($p1, $mul.ref(0, 3)), $mul.ref(0, 1));
    goto corral_source_split_4768;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    $i203 := $load.i8($M.23, $p202);
    goto corral_source_split_4769;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    $i204 := $zext.i8.i32($i203);
    goto corral_source_split_4770;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    $i205 := $trunc.i32.i8($i204);
    goto corral_source_split_4771;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($p1, $mul.ref(0, 3)), $mul.ref(2, 1));
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    $i207 := $load.i8($M.25, $p206);
    goto corral_source_split_4773;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    $i208 := $zext.i8.i32($i207);
    goto corral_source_split_4774;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    $i209 := $trunc.i32.i8($i208);
    goto corral_source_split_4775;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 716} $i210 := mxl111sf_set_gpo_state($p0, $i205, $i209);
    call {:si_unique_call 717} {:cexpr "tmp___0"} boogie_si_record_i32($i210);
    goto corral_source_split_4776;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    $i211 := $i210;
    goto $bb109;

  $bb102:
    assume $i196 == 1;
    goto corral_source_split_4763;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    $i66 := $i188;
    goto $bb57;

  $bb96:
    assume $i191 == 1;
    goto corral_source_split_4753;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    $i192 := $M.10;
    goto corral_source_split_4754;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    $i193 := $and.i32($i192, 16);
    goto corral_source_split_4755;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    $i194 := $ne.i32($i193, 0);
    goto corral_source_split_4756;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    assume {:branchcond $i194} true;
    goto $bb99, $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    assume !($i194 == 1);
    goto $bb98;

  $bb99:
    assume $i194 == 1;
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 715} vslice_dummy_var_164 := printk.ref.ref.i32.i32(.str.5, .str.153, $i188, 161);
    goto corral_source_split_4759;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb93:
    assume $i158 == 1;
    goto corral_source_split_4715;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    $i66 := $i150;
    goto $bb57;

  $bb87:
    assume $i153 == 1;
    goto corral_source_split_4705;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    $i154 := $M.10;
    goto corral_source_split_4706;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    $i155 := $and.i32($i154, 16);
    goto corral_source_split_4707;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    $i156 := $ne.i32($i155, 0);
    goto corral_source_split_4708;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    assume {:branchcond $i156} true;
    goto $bb90, $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    assume !($i156 == 1);
    goto $bb89;

  $bb90:
    assume $i156 == 1;
    goto corral_source_split_4710;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 711} vslice_dummy_var_163 := printk.ref.ref.i32.i32(.str.5, .str.153, $i150, 156);
    goto corral_source_split_4711;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb40:
    assume $i52 == 1;
    goto corral_source_split_4566;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb36:
    assume $i48 == 1;
    goto corral_source_split_4559;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb32:
    assume $i44 == 1;
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 695} $i105 := mxl111sf_read_reg($p0, $sub.i8(0, 119), $p2);
    call {:si_unique_call 696} {:cexpr "ret"} boogie_si_record_i32($i105);
    goto corral_source_split_4549;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    $i106 := $slt.i32($i105, 0);
    goto corral_source_split_4550;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    $i107 := $zext.i1.i32($i106);
    call {:si_unique_call 697} {:cexpr "__ret___1"} boogie_si_record_i32($i107);
    goto corral_source_split_4551;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    $i108 := $ne.i32($i107, 0);
    goto corral_source_split_4552;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    assume {:branchcond $i108} true;
    goto $bb69, $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    assume !($i108 == 1);
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $i113 := $ne.i32($i107, 0);
    goto corral_source_split_4655;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    assume {:branchcond $i113} true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $i114 := $load.i8($M.7, $p2);
    goto corral_source_split_4659;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    $i115 := $sext.i8.i32($i114);
    goto corral_source_split_4660;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p1, $mul.ref(0, 3)), $mul.ref(0, 1));
    goto corral_source_split_4661;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    $i117 := $load.i8($M.23, $p116);
    goto corral_source_split_4662;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    $i118 := $zext.i8.i32($i117);
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    $i119 := $shl.i32(1, $i118);
    goto corral_source_split_4664;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    $i120 := $trunc.i32.i8($i119);
    goto corral_source_split_4665;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    $i121 := $sext.i8.i32($i120);
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    $i122 := $xor.i32($i121, $sub.i32(0, 1));
    goto corral_source_split_4667;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    $i123 := $and.i32($i115, $i122);
    goto corral_source_split_4668;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    $i124 := $trunc.i32.i8($i123);
    goto corral_source_split_4669;

  corral_source_split_4669:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p2, $i124);
    goto corral_source_split_4670;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    $i125 := $load.i8($M.7, $p2);
    goto corral_source_split_4671;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    $i126 := $sext.i8.i32($i125);
    goto corral_source_split_4672;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p1, $mul.ref(0, 3)), $mul.ref(1, 1));
    goto corral_source_split_4673;

  corral_source_split_4673:
    assume {:verifier.code 0} true;
    $i128 := $load.i8($M.24, $p127);
    goto corral_source_split_4674;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    $i129 := $zext.i8.i32($i128);
    goto corral_source_split_4675;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p1, $mul.ref(0, 3)), $mul.ref(0, 1));
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    $i131 := $load.i8($M.23, $p130);
    goto corral_source_split_4677;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    $i132 := $zext.i8.i32($i131);
    goto corral_source_split_4678;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    $i133 := $shl.i32($i129, $i132);
    goto corral_source_split_4679;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    $i134 := $trunc.i32.i8($i133);
    goto corral_source_split_4680;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    $i135 := $sext.i8.i32($i134);
    goto corral_source_split_4681;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    $i136 := $or.i32($i126, $i135);
    goto corral_source_split_4682;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    $i137 := $trunc.i32.i8($i136);
    goto corral_source_split_4683;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p2, $i137);
    goto corral_source_split_4684;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    $i138 := $load.i8($M.7, $p2);
    goto corral_source_split_4685;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    $i139 := $zext.i8.i32($i138);
    goto corral_source_split_4686;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    $i140 := $trunc.i32.i8($i139);
    goto corral_source_split_4687;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 707} $i141 := mxl111sf_write_reg($p0, $sub.i8(0, 119), $i140);
    call {:si_unique_call 708} {:cexpr "ret"} boogie_si_record_i32($i141);
    goto corral_source_split_4688;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    $i142 := $slt.i32($i141, 0);
    goto corral_source_split_4689;

  corral_source_split_4689:
    assume {:verifier.code 0} true;
    $i143 := $zext.i1.i32($i142);
    call {:si_unique_call 709} {:cexpr "__ret___2"} boogie_si_record_i32($i143);
    goto corral_source_split_4690;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    $i144 := $ne.i32($i143, 0);
    goto corral_source_split_4691;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    assume !($i144 == 1);
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $i149 := $ne.i32($i143, 0);
    goto corral_source_split_4701;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    assume {:branchcond $i149} true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i149 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb84:
    assume $i149 == 1;
    goto corral_source_split_4703;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    $i66 := $i141;
    goto $bb57;

  $bb78:
    assume $i144 == 1;
    goto corral_source_split_4693;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    $i145 := $M.10;
    goto corral_source_split_4694;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    $i146 := $and.i32($i145, 16);
    goto corral_source_split_4695;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    $i147 := $ne.i32($i146, 0);
    goto corral_source_split_4696;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    assume {:branchcond $i147} true;
    goto $bb81, $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    assume !($i147 == 1);
    goto $bb80;

  $bb81:
    assume $i147 == 1;
    goto corral_source_split_4698;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 710} vslice_dummy_var_162 := printk.ref.ref.i32.i32(.str.5, .str.153, $i141, 149);
    goto corral_source_split_4699;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb75:
    assume $i113 == 1;
    goto corral_source_split_4657;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    $i66 := $i105;
    goto $bb57;

  $bb69:
    assume $i108 == 1;
    goto corral_source_split_4647;

  corral_source_split_4647:
    assume {:verifier.code 0} true;
    $i109 := $M.10;
    goto corral_source_split_4648;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    $i110 := $and.i32($i109, 16);
    goto corral_source_split_4649;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    $i111 := $ne.i32($i110, 0);
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    assume {:branchcond $i111} true;
    goto $bb72, $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    assume !($i111 == 1);
    goto $bb71;

  $bb72:
    assume $i111 == 1;
    goto corral_source_split_4652;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 706} vslice_dummy_var_161 := printk.ref.ref.i32.i32(.str.5, .str.153, $i105, 144);
    goto corral_source_split_4653;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb28:
    assume $i40 == 1;
    goto corral_source_split_4540;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb24:
    assume $i36 == 1;
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb20:
    assume $i32 == 1;
    goto corral_source_split_4526;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb16:
    assume $i28 == 1;
    goto corral_source_split_4514;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 692} $i57 := mxl111sf_read_reg($p0, $sub.i8(0, 124), $p2);
    call {:si_unique_call 693} {:cexpr "ret"} boogie_si_record_i32($i57);
    goto corral_source_split_4516;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    $i58 := $slt.i32($i57, 0);
    goto corral_source_split_4517;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    $i59 := $zext.i1.i32($i58);
    call {:si_unique_call 694} {:cexpr "__ret"} boogie_si_record_i32($i59);
    goto corral_source_split_4518;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    $i60 := $ne.i32($i59, 0);
    goto corral_source_split_4519;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb49, $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    assume !($i60 == 1);
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $i65 := $ne.i32($i59, 0);
    goto corral_source_split_4588;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $i67 := $load.i8($M.7, $p2);
    goto corral_source_split_4594;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    $i68 := $sext.i8.i32($i67);
    goto corral_source_split_4595;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p1, $mul.ref(0, 3)), $mul.ref(0, 1));
    goto corral_source_split_4596;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    $i70 := $load.i8($M.23, $p69);
    goto corral_source_split_4597;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    $i71 := $zext.i8.i32($i70);
    goto corral_source_split_4598;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    $i72 := $add.i32($i71, 4);
    goto corral_source_split_4599;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    $i73 := $shl.i32(1, $i72);
    goto corral_source_split_4600;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    $i74 := $trunc.i32.i8($i73);
    goto corral_source_split_4601;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    $i75 := $sext.i8.i32($i74);
    goto corral_source_split_4602;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    $i76 := $xor.i32($i75, $sub.i32(0, 1));
    goto corral_source_split_4603;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    $i77 := $and.i32($i68, $i76);
    goto corral_source_split_4604;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    $i78 := $trunc.i32.i8($i77);
    goto corral_source_split_4605;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p2, $i78);
    goto corral_source_split_4606;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    $i79 := $load.i8($M.7, $p2);
    goto corral_source_split_4607;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    $i80 := $sext.i8.i32($i79);
    goto corral_source_split_4608;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p1, $mul.ref(0, 3)), $mul.ref(1, 1));
    goto corral_source_split_4609;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    $i82 := $load.i8($M.24, $p81);
    goto corral_source_split_4610;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    $i83 := $zext.i8.i32($i82);
    goto corral_source_split_4611;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p1, $mul.ref(0, 3)), $mul.ref(0, 1));
    goto corral_source_split_4612;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    $i85 := $load.i8($M.23, $p84);
    goto corral_source_split_4613;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    $i86 := $zext.i8.i32($i85);
    goto corral_source_split_4614;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    $i87 := $add.i32($i86, 4);
    goto corral_source_split_4615;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    $i88 := $shl.i32($i83, $i87);
    goto corral_source_split_4616;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    $i89 := $trunc.i32.i8($i88);
    goto corral_source_split_4617;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    $i90 := $sext.i8.i32($i89);
    goto corral_source_split_4618;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    $i91 := $or.i32($i80, $i90);
    goto corral_source_split_4619;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    $i92 := $trunc.i32.i8($i91);
    goto corral_source_split_4620;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p2, $i92);
    goto corral_source_split_4621;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    $i93 := $load.i8($M.7, $p2);
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    $i94 := $zext.i8.i32($i93);
    goto corral_source_split_4623;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    $i95 := $trunc.i32.i8($i94);
    goto corral_source_split_4624;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 702} $i96 := mxl111sf_write_reg($p0, $sub.i8(0, 124), $i95);
    call {:si_unique_call 703} {:cexpr "ret"} boogie_si_record_i32($i96);
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    $i97 := $slt.i32($i96, 0);
    goto corral_source_split_4626;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    $i98 := $zext.i1.i32($i97);
    call {:si_unique_call 704} {:cexpr "__ret___0"} boogie_si_record_i32($i98);
    goto corral_source_split_4627;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    $i99 := $ne.i32($i98, 0);
    goto corral_source_split_4628;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    assume {:branchcond $i99} true;
    goto $bb59, $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    assume !($i99 == 1);
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $i104 := $ne.i32($i98, 0);
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    assume {:branchcond $i104} true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb65:
    assume $i104 == 1;
    goto corral_source_split_4640;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    $i66 := $i96;
    goto $bb57;

  $bb59:
    assume $i99 == 1;
    goto corral_source_split_4630;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    $i100 := $M.10;
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    $i101 := $and.i32($i100, 16);
    goto corral_source_split_4632;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    $i102 := $ne.i32($i101, 0);
    goto corral_source_split_4633;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    assume {:branchcond $i102} true;
    goto $bb62, $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    assume !($i102 == 1);
    goto $bb61;

  $bb62:
    assume $i102 == 1;
    goto corral_source_split_4635;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 705} vslice_dummy_var_160 := printk.ref.ref.i32.i32(.str.5, .str.153, $i96, 136);
    goto corral_source_split_4636;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb55:
    assume $i65 == 1;
    goto corral_source_split_4590;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    $i66 := $i57;
    goto $bb57;

  $bb49:
    assume $i60 == 1;
    goto corral_source_split_4580;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    $i61 := $M.10;
    goto corral_source_split_4581;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    $i62 := $and.i32($i61, 16);
    goto corral_source_split_4582;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    $i63 := $ne.i32($i62, 0);
    goto corral_source_split_4583;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    assume !($i63 == 1);
    goto $bb51;

  $bb52:
    assume $i63 == 1;
    goto corral_source_split_4585;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 701} vslice_dummy_var_159 := printk.ref.ref.i32.i32(.str.5, .str.153, $i57, 131);
    goto corral_source_split_4586;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb12:
    assume $i24 == 1;
    goto corral_source_split_4507;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb8:
    assume $i20 == 1;
    goto corral_source_split_4500;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb4:
    assume $i16 == 1;
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 3)), $mul.ref(0, 1));
    goto corral_source_split_4480;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.23, $p6);
    goto corral_source_split_4481;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_4482;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 3)), $mul.ref(1, 1));
    goto corral_source_split_4483;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.24, $p9);
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_4485;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} vslice_dummy_var_158 := printk.ref.ref.i32.i32(.str.42, .str.153, $i8, $i11);
    goto corral_source_split_4486;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mxl111sf_set_gpo_state: ref;

axiom mxl111sf_set_gpo_state == $sub.ref(0, 359380);

procedure mxl111sf_set_gpo_state($p0: ref, $i1: i8, $i2: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.15, $M.7, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation mxl111sf_set_gpo_state($p0: ref, $i1: i8, $i2: i8) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $i21: i1;
  var $i23: i8;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i8;
  var $i29: i32;
  var $i30: i32;
  var $i31: i32;
  var $i32: i8;
  var $i33: i8;
  var $i34: i32;
  var $i35: i32;
  var $i36: i32;
  var $i37: i32;
  var $i38: i32;
  var $i39: i8;
  var $i40: i32;
  var $i41: i32;
  var $i42: i8;
  var $i43: i8;
  var $i44: i32;
  var $i45: i8;
  var $i46: i32;
  var $i47: i1;
  var $i48: i32;
  var $i49: i1;
  var $i50: i32;
  var $i51: i32;
  var $i52: i1;
  var $i54: i1;
  var $i56: i32;
  var $i57: i1;
  var $i58: i32;
  var $i59: i1;
  var $i60: i32;
  var $i61: i32;
  var $i62: i8;
  var $i63: i8;
  var $i64: i32;
  var $i65: i1;
  var $i66: i32;
  var $i67: i1;
  var $i68: i32;
  var $i69: i32;
  var $i70: i1;
  var $i72: i1;
  var $i73: i8;
  var $i74: i32;
  var $i75: i32;
  var $i76: i32;
  var $i77: i32;
  var $i78: i8;
  var $i79: i32;
  var $i80: i32;
  var $i81: i32;
  var $i82: i8;
  var $i83: i8;
  var $i84: i32;
  var $i85: i32;
  var $i86: i32;
  var $i87: i32;
  var $i88: i32;
  var $i89: i8;
  var $i90: i32;
  var $i91: i32;
  var $i92: i8;
  var $i93: i8;
  var $i94: i32;
  var $i95: i8;
  var $i96: i32;
  var $i97: i1;
  var $i98: i32;
  var $i99: i1;
  var $i100: i32;
  var $i101: i32;
  var $i102: i1;
  var $i104: i1;
  var $i105: i32;
  var $i55: i32;
  var $i22: i32;
  var vslice_dummy_var_166: i32;
  var vslice_dummy_var_167: i32;
  var vslice_dummy_var_168: i32;
  var vslice_dummy_var_169: i32;
  var vslice_dummy_var_170: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 722} $p3 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 723} {:cexpr "mxl111sf_set_gpo_state:arg:pin"} boogie_si_record_i8($i1);
    call {:si_unique_call 724} {:cexpr "mxl111sf_set_gpo_state:arg:val"} boogie_si_record_i8($i2);
    goto corral_source_split_4798;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    $i4 := $M.10;
    goto corral_source_split_4799;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 16);
    goto corral_source_split_4800;

  corral_source_split_4800:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_4801;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i1);
    goto corral_source_split_4808;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32($i10, 1);
    goto corral_source_split_4809;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    $i12 := $ule.i32($i11, 6);
    goto corral_source_split_4810;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    goto corral_source_split_4818;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    $i56 := $zext.i8.i32($i1);
    goto corral_source_split_4819;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    $i57 := $ule.i32($i56, 10);
    goto corral_source_split_4820;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    assume {:branchcond $i57} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    $i105 := $sub.i32(0, 22);
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i55 := $i105;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_4878;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    $i22 := $i55;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_4834;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    $r := $i22;
    return;

  $bb26:
    assume $i57 == 1;
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    $i58 := $zext.i8.i32($i1);
    goto corral_source_split_4881;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    $i59 := $eq.i32($i58, 0);
    goto corral_source_split_4882;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    $i63 := $i1;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_4889;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 735} $i64 := mxl111sf_read_reg($p0, 48, $p3);
    call {:si_unique_call 736} {:cexpr "ret"} boogie_si_record_i32($i64);
    goto corral_source_split_4890;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    $i65 := $slt.i32($i64, 0);
    goto corral_source_split_4891;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    $i66 := $zext.i1.i32($i65);
    call {:si_unique_call 737} {:cexpr "__ret___1"} boogie_si_record_i32($i66);
    goto corral_source_split_4892;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    $i67 := $ne.i32($i66, 0);
    goto corral_source_split_4893;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    assume {:branchcond $i67} true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i67 == 1);
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i72 := $ne.i32($i66, 0);
    goto corral_source_split_4903;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    assume {:branchcond $i72} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i73 := $load.i8($M.7, $p3);
    goto corral_source_split_4907;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    $i74 := $sext.i8.i32($i73);
    goto corral_source_split_4908;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    $i75 := $zext.i8.i32($i63);
    goto corral_source_split_4909;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    $i76 := $add.i32($i75, $sub.i32(0, 3));
    goto corral_source_split_4910;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    $i77 := $shl.i32(1, $i76);
    goto corral_source_split_4911;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    $i78 := $trunc.i32.i8($i77);
    goto corral_source_split_4912;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    $i79 := $sext.i8.i32($i78);
    goto corral_source_split_4913;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    $i80 := $xor.i32($i79, $sub.i32(0, 1));
    goto corral_source_split_4914;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    $i81 := $and.i32($i74, $i80);
    goto corral_source_split_4915;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    $i82 := $trunc.i32.i8($i81);
    goto corral_source_split_4916;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p3, $i82);
    goto corral_source_split_4917;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    $i83 := $load.i8($M.7, $p3);
    goto corral_source_split_4918;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    $i84 := $sext.i8.i32($i83);
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    $i85 := $zext.i8.i32($i2);
    goto corral_source_split_4920;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    $i86 := $zext.i8.i32($i63);
    goto corral_source_split_4921;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    $i87 := $add.i32($i86, $sub.i32(0, 3));
    goto corral_source_split_4922;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    $i88 := $shl.i32($i85, $i87);
    goto corral_source_split_4923;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    $i89 := $trunc.i32.i8($i88);
    goto corral_source_split_4924;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    $i90 := $sext.i8.i32($i89);
    goto corral_source_split_4925;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    $i91 := $or.i32($i84, $i90);
    goto corral_source_split_4926;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    $i92 := $trunc.i32.i8($i91);
    goto corral_source_split_4927;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p3, $i92);
    goto corral_source_split_4928;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    $i93 := $load.i8($M.7, $p3);
    goto corral_source_split_4929;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    $i94 := $zext.i8.i32($i93);
    goto corral_source_split_4930;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    $i95 := $trunc.i32.i8($i94);
    goto corral_source_split_4931;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 739} $i96 := mxl111sf_write_reg($p0, 48, $i95);
    call {:si_unique_call 740} {:cexpr "ret"} boogie_si_record_i32($i96);
    goto corral_source_split_4932;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    $i97 := $slt.i32($i96, 0);
    goto corral_source_split_4933;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    $i98 := $zext.i1.i32($i97);
    call {:si_unique_call 741} {:cexpr "__ret___2"} boogie_si_record_i32($i98);
    goto corral_source_split_4934;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    $i99 := $ne.i32($i98, 0);
    goto corral_source_split_4935;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    assume {:branchcond $i99} true;
    goto $bb40, $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    assume !($i99 == 1);
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $i104 := $ne.i32($i98, 0);
    goto corral_source_split_4945;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    assume {:branchcond $i104} true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $i105 := $i96;
    goto $bb49;

  $bb46:
    assume $i104 == 1;
    goto corral_source_split_4947;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    $i22 := $i96;
    goto $bb14;

  $bb40:
    assume $i99 == 1;
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    $i100 := $M.10;
    goto corral_source_split_4938;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    $i101 := $and.i32($i100, 16);
    goto corral_source_split_4939;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    $i102 := $ne.i32($i101, 0);
    goto corral_source_split_4940;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    assume {:branchcond $i102} true;
    goto $bb43, $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    assume !($i102 == 1);
    goto $bb42;

  $bb43:
    assume $i102 == 1;
    goto corral_source_split_4942;

  corral_source_split_4942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 742} vslice_dummy_var_170 := printk.ref.ref.i32.i32(.str.5, .str.154, $i96, 60);
    goto corral_source_split_4943;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb37:
    assume $i72 == 1;
    goto corral_source_split_4905;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    $i22 := $i64;
    goto $bb14;

  $bb31:
    assume $i67 == 1;
    goto corral_source_split_4895;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    $i68 := $M.10;
    goto corral_source_split_4896;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    $i69 := $and.i32($i68, 16);
    goto corral_source_split_4897;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    $i70 := $ne.i32($i69, 0);
    goto corral_source_split_4898;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i70 == 1);
    goto $bb33;

  $bb34:
    assume $i70 == 1;
    goto corral_source_split_4900;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 738} vslice_dummy_var_169 := printk.ref.ref.i32.i32(.str.5, .str.154, $i64, 55);
    goto corral_source_split_4901;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb28:
    assume $i59 == 1;
    goto corral_source_split_4884;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    $i60 := $zext.i8.i32($i1);
    goto corral_source_split_4885;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    $i61 := $add.i32($i60, 7);
    goto corral_source_split_4886;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    $i62 := $trunc.i32.i8($i61);
    call {:si_unique_call 734} {:cexpr "pin"} boogie_si_record_i8($i62);
    goto corral_source_split_4887;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    $i63 := $i62;
    goto $bb30;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_4812;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 726} $i13 := mxl111sf_read_reg($p0, 25, $p3);
    call {:si_unique_call 727} {:cexpr "ret"} boogie_si_record_i32($i13);
    goto corral_source_split_4813;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i13, 0);
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i32($i14);
    call {:si_unique_call 728} {:cexpr "__ret"} boogie_si_record_i32($i15);
    goto corral_source_split_4815;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_4816;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i15, 0);
    goto corral_source_split_4830;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.7, $p3);
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    $i24 := $sext.i8.i32($i23);
    goto corral_source_split_4837;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i1);
    goto corral_source_split_4838;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, $sub.i32(0, 1));
    goto corral_source_split_4839;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    $i27 := $shl.i32(1, $i26);
    goto corral_source_split_4840;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i32.i8($i27);
    goto corral_source_split_4841;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    $i29 := $sext.i8.i32($i28);
    goto corral_source_split_4842;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    $i30 := $xor.i32($i29, $sub.i32(0, 1));
    goto corral_source_split_4843;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    $i31 := $and.i32($i24, $i30);
    goto corral_source_split_4844;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i32.i8($i31);
    goto corral_source_split_4845;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p3, $i32);
    goto corral_source_split_4846;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.7, $p3);
    goto corral_source_split_4847;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    $i34 := $sext.i8.i32($i33);
    goto corral_source_split_4848;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i2);
    goto corral_source_split_4849;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i1);
    goto corral_source_split_4850;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    $i37 := $add.i32($i36, $sub.i32(0, 1));
    goto corral_source_split_4851;

  corral_source_split_4851:
    assume {:verifier.code 0} true;
    $i38 := $shl.i32($i35, $i37);
    goto corral_source_split_4852;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i32.i8($i38);
    goto corral_source_split_4853;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    $i40 := $sext.i8.i32($i39);
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    $i41 := $or.i32($i34, $i40);
    goto corral_source_split_4855;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i32.i8($i41);
    goto corral_source_split_4856;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p3, $i42);
    goto corral_source_split_4857;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    $i43 := $load.i8($M.7, $p3);
    goto corral_source_split_4858;

  corral_source_split_4858:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i32($i43);
    goto corral_source_split_4859;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i32.i8($i44);
    goto corral_source_split_4860;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 730} $i46 := mxl111sf_write_reg($p0, 25, $i45);
    call {:si_unique_call 731} {:cexpr "ret"} boogie_si_record_i32($i46);
    goto corral_source_split_4861;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    $i47 := $slt.i32($i46, 0);
    goto corral_source_split_4862;

  corral_source_split_4862:
    assume {:verifier.code 0} true;
    $i48 := $zext.i1.i32($i47);
    call {:si_unique_call 732} {:cexpr "__ret___0"} boogie_si_record_i32($i48);
    goto corral_source_split_4863;

  corral_source_split_4863:
    assume {:verifier.code 0} true;
    $i49 := $ne.i32($i48, 0);
    goto corral_source_split_4864;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i49 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i48, 0);
    goto corral_source_split_4874;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i55 := $i46;
    goto $bb25;

  $bb22:
    assume $i54 == 1;
    goto corral_source_split_4876;

  corral_source_split_4876:
    assume {:verifier.code 0} true;
    $i22 := $i46;
    goto $bb14;

  $bb16:
    assume $i49 == 1;
    goto corral_source_split_4866;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    $i50 := $M.10;
    goto corral_source_split_4867;

  corral_source_split_4867:
    assume {:verifier.code 0} true;
    $i51 := $and.i32($i50, 16);
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, 0);
    goto corral_source_split_4869;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i52 == 1);
    goto $bb18;

  $bb19:
    assume $i52 == 1;
    goto corral_source_split_4871;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 733} vslice_dummy_var_168 := printk.ref.ref.i32.i32(.str.5, .str.154, $i46, 49);
    goto corral_source_split_4872;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb12:
    assume $i21 == 1;
    goto corral_source_split_4832;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    $i22 := $i13;
    goto $bb14;

  $bb6:
    assume $i16 == 1;
    goto corral_source_split_4822;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    $i17 := $M.10;
    goto corral_source_split_4823;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    $i18 := $and.i32($i17, 16);
    goto corral_source_split_4824;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_4825;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb8;

  $bb9:
    assume $i19 == 1;
    goto corral_source_split_4827;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 729} vslice_dummy_var_167 := printk.ref.ref.i32.i32(.str.5, .str.154, $i13, 44);
    goto corral_source_split_4828;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_4803;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i1);
    goto corral_source_split_4804;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i2);
    goto corral_source_split_4805;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 725} vslice_dummy_var_166 := printk.ref.ref.i32.i32(.str.42, .str.154, $i7, $i8);
    goto corral_source_split_4806;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mxl111sf_get_gpi_state: ref;

axiom mxl111sf_get_gpi_state == $sub.ref(0, 360412);

procedure mxl111sf_get_gpi_state($p0: ref, $i1: i8, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.25, $M.15, $M.7, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation mxl111sf_get_gpi_state($p0: ref, $i1: i8, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var $i33: i1;
  var $i34: i32;
  var $i35: i32;
  var $i36: i1;
  var $i38: i1;
  var $i40: i8;
  var $i41: i32;
  var $i42: i32;
  var $i43: i32;
  var $i44: i32;
  var $i45: i8;
  var $i46: i32;
  var $i47: i32;
  var $i48: i8;
  var $i50: i32;
  var $i51: i1;
  var $i52: i32;
  var $i53: i1;
  var $i54: i32;
  var $i55: i32;
  var $i56: i1;
  var $i58: i1;
  var $i59: i8;
  var $i60: i32;
  var $i61: i32;
  var $i62: i32;
  var $i63: i8;
  var $i64: i32;
  var $i65: i32;
  var $i66: i8;
  var $i67: i32;
  var $i68: i1;
  var $i69: i32;
  var $i70: i1;
  var $i71: i32;
  var $i72: i32;
  var $i73: i1;
  var $i75: i1;
  var $i76: i8;
  var $i77: i32;
  var $i78: i32;
  var $i79: i32;
  var $i80: i32;
  var $i81: i8;
  var $i82: i32;
  var $i83: i32;
  var $i84: i8;
  var $i49: i32;
  var $i39: i32;
  var $i85: i32;
  var vslice_dummy_var_171: i32;
  var vslice_dummy_var_172: i32;
  var vslice_dummy_var_173: i32;
  var vslice_dummy_var_174: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 743} $p3 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 744} {:cexpr "mxl111sf_get_gpi_state:arg:pin"} boogie_si_record_i8($i1);
    goto corral_source_split_4949;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    $i4 := $M.10;
    goto corral_source_split_4950;

  corral_source_split_4950:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_4951;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.25 := $store.i8($M.25, $p2, 0);
    goto corral_source_split_4957;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i1);
    goto corral_source_split_4958;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_4959;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i1);
    goto corral_source_split_4963;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 1);
    goto corral_source_split_4964;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i1);
    goto corral_source_split_4968;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 2);
    goto corral_source_split_4969;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i1);
    goto corral_source_split_4973;

  corral_source_split_4973:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 3);
    goto corral_source_split_4974;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i1);
    goto corral_source_split_4983;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 4);
    goto corral_source_split_4984;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i1);
    goto corral_source_split_4988;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 5);
    goto corral_source_split_4989;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i1);
    goto corral_source_split_4993;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 6);
    goto corral_source_split_4994;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i1);
    goto corral_source_split_4998;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 7);
    goto corral_source_split_4999;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i1);
    goto corral_source_split_5008;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 8);
    goto corral_source_split_5009;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i1);
    goto corral_source_split_5013;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 9);
    goto corral_source_split_5014;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i1);
    goto corral_source_split_5018;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 10);
    goto corral_source_split_5019;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $i85 := $sub.i32(0, 22);
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    goto corral_source_split_5100;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    $r := $i85;
    return;

  $bb44:
    assume $i29 == 1;
    goto corral_source_split_5021;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 752} $i67 := mxl111sf_read_reg($p0, 34, $p3);
    call {:si_unique_call 753} {:cexpr "ret"} boogie_si_record_i32($i67);
    goto corral_source_split_5023;

  corral_source_split_5023:
    assume {:verifier.code 0} true;
    $i68 := $slt.i32($i67, 0);
    goto corral_source_split_5024;

  corral_source_split_5024:
    assume {:verifier.code 0} true;
    $i69 := $zext.i1.i32($i68);
    call {:si_unique_call 754} {:cexpr "__ret___1"} boogie_si_record_i32($i69);
    goto corral_source_split_5025;

  corral_source_split_5025:
    assume {:verifier.code 0} true;
    $i70 := $ne.i32($i69, 0);
    goto corral_source_split_5026;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    assume !($i70 == 1);
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $i75 := $ne.i32($i69, 0);
    goto corral_source_split_5085;

  corral_source_split_5085:
    assume {:verifier.code 0} true;
    assume {:branchcond $i75} true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $i76 := $load.i8($M.7, $p3);
    goto corral_source_split_5089;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    $i77 := $zext.i8.i32($i76);
    goto corral_source_split_5090;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    $i78 := $zext.i8.i32($i1);
    goto corral_source_split_5091;

  corral_source_split_5091:
    assume {:verifier.code 0} true;
    $i79 := $add.i32($i78, $sub.i32(0, 3));
    goto corral_source_split_5092;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    $i80 := $ashr.i32($i77, $i79);
    goto corral_source_split_5093;

  corral_source_split_5093:
    assume {:verifier.code 0} true;
    $i81 := $trunc.i32.i8($i80);
    goto corral_source_split_5094;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    $i82 := $zext.i8.i32($i81);
    goto corral_source_split_5095;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    $i83 := $and.i32($i82, 1);
    goto corral_source_split_5096;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    $i84 := $trunc.i32.i8($i83);
    goto corral_source_split_5097;

  corral_source_split_5097:
    assume {:verifier.code 0} true;
    $M.25 := $store.i8($M.25, $p2, $i84);
    goto corral_source_split_5098;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    $i49 := $i67;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto corral_source_split_5053;

  corral_source_split_5053:
    assume {:verifier.code 0} true;
    $i39 := $i49;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto corral_source_split_5040;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    $i85 := $i39;
    goto $bb78;

  $bb75:
    assume $i75 == 1;
    goto corral_source_split_5087;

  corral_source_split_5087:
    assume {:verifier.code 0} true;
    $i39 := $i67;
    goto $bb57;

  $bb69:
    assume $i70 == 1;
    goto corral_source_split_5077;

  corral_source_split_5077:
    assume {:verifier.code 0} true;
    $i71 := $M.10;
    goto corral_source_split_5078;

  corral_source_split_5078:
    assume {:verifier.code 0} true;
    $i72 := $and.i32($i71, 16);
    goto corral_source_split_5079;

  corral_source_split_5079:
    assume {:verifier.code 0} true;
    $i73 := $ne.i32($i72, 0);
    goto corral_source_split_5080;

  corral_source_split_5080:
    assume {:verifier.code 0} true;
    assume {:branchcond $i73} true;
    goto $bb72, $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    assume !($i73 == 1);
    goto $bb71;

  $bb72:
    assume $i73 == 1;
    goto corral_source_split_5082;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 757} vslice_dummy_var_174 := printk.ref.ref.i32.i32(.str.5, .str.155, $i67, 100);
    goto corral_source_split_5083;

  corral_source_split_5083:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb40:
    assume $i27 == 1;
    goto corral_source_split_5016;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb36:
    assume $i25 == 1;
    goto corral_source_split_5011;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb32:
    assume $i23 == 1;
    goto corral_source_split_5001;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 749} $i50 := mxl111sf_read_reg($p0, 47, $p3);
    call {:si_unique_call 750} {:cexpr "ret"} boogie_si_record_i32($i50);
    goto corral_source_split_5003;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    $i51 := $slt.i32($i50, 0);
    goto corral_source_split_5004;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    $i52 := $zext.i1.i32($i51);
    call {:si_unique_call 751} {:cexpr "__ret___0"} boogie_si_record_i32($i52);
    goto corral_source_split_5005;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_5006;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    assume !($i53 == 1);
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $i58 := $ne.i32($i52, 0);
    goto corral_source_split_5063;

  corral_source_split_5063:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $i59 := $load.i8($M.7, $p3);
    goto corral_source_split_5067;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    $i60 := $zext.i8.i32($i59);
    goto corral_source_split_5068;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    $i61 := $zext.i8.i32($i1);
    goto corral_source_split_5069;

  corral_source_split_5069:
    assume {:verifier.code 0} true;
    $i62 := $ashr.i32($i60, $i61);
    goto corral_source_split_5070;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    $i63 := $trunc.i32.i8($i62);
    goto corral_source_split_5071;

  corral_source_split_5071:
    assume {:verifier.code 0} true;
    $i64 := $zext.i8.i32($i63);
    goto corral_source_split_5072;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    $i65 := $and.i32($i64, 1);
    goto corral_source_split_5073;

  corral_source_split_5073:
    assume {:verifier.code 0} true;
    $i66 := $trunc.i32.i8($i65);
    goto corral_source_split_5074;

  corral_source_split_5074:
    assume {:verifier.code 0} true;
    $M.25 := $store.i8($M.25, $p2, $i66);
    goto corral_source_split_5075;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    $i49 := $i50;
    goto $bb59;

  $bb66:
    assume $i58 == 1;
    goto corral_source_split_5065;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    $i39 := $i50;
    goto $bb57;

  $bb60:
    assume $i53 == 1;
    goto corral_source_split_5055;

  corral_source_split_5055:
    assume {:verifier.code 0} true;
    $i54 := $M.10;
    goto corral_source_split_5056;

  corral_source_split_5056:
    assume {:verifier.code 0} true;
    $i55 := $and.i32($i54, 16);
    goto corral_source_split_5057;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 0);
    goto corral_source_split_5058;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    assume !($i56 == 1);
    goto $bb62;

  $bb63:
    assume $i56 == 1;
    goto corral_source_split_5060;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} vslice_dummy_var_173 := printk.ref.ref.i32.i32(.str.5, .str.155, $i50, 92);
    goto corral_source_split_5061;

  corral_source_split_5061:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb28:
    assume $i21 == 1;
    goto corral_source_split_4996;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb24:
    assume $i19 == 1;
    goto corral_source_split_4991;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb20:
    assume $i17 == 1;
    goto corral_source_split_4986;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb16:
    assume $i15 == 1;
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 746} $i30 := mxl111sf_read_reg($p0, 35, $p3);
    call {:si_unique_call 747} {:cexpr "ret"} boogie_si_record_i32($i30);
    goto corral_source_split_4978;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    $i31 := $slt.i32($i30, 0);
    goto corral_source_split_4979;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    $i32 := $zext.i1.i32($i31);
    call {:si_unique_call 748} {:cexpr "__ret"} boogie_si_record_i32($i32);
    goto corral_source_split_4980;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_4981;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i32, 0);
    goto corral_source_split_5036;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.7, $p3);
    goto corral_source_split_5042;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i32($i40);
    goto corral_source_split_5043;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i1);
    goto corral_source_split_5044;

  corral_source_split_5044:
    assume {:verifier.code 0} true;
    $i43 := $add.i32($i42, 4);
    goto corral_source_split_5045;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    $i44 := $ashr.i32($i41, $i43);
    goto corral_source_split_5046;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i32.i8($i44);
    goto corral_source_split_5047;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i32($i45);
    goto corral_source_split_5048;

  corral_source_split_5048:
    assume {:verifier.code 0} true;
    $i47 := $and.i32($i46, 1);
    goto corral_source_split_5049;

  corral_source_split_5049:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i32.i8($i47);
    goto corral_source_split_5050;

  corral_source_split_5050:
    assume {:verifier.code 0} true;
    $M.25 := $store.i8($M.25, $p2, $i48);
    goto corral_source_split_5051;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    $i49 := $i30;
    goto $bb59;

  $bb55:
    assume $i38 == 1;
    goto corral_source_split_5038;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    $i39 := $i30;
    goto $bb57;

  $bb49:
    assume $i33 == 1;
    goto corral_source_split_5028;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    $i34 := $M.10;
    goto corral_source_split_5029;

  corral_source_split_5029:
    assume {:verifier.code 0} true;
    $i35 := $and.i32($i34, 16);
    goto corral_source_split_5030;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_5031;

  corral_source_split_5031:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb52, $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb51;

  $bb52:
    assume $i36 == 1;
    goto corral_source_split_5033;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 755} vslice_dummy_var_172 := printk.ref.ref.i32.i32(.str.5, .str.155, $i30, 83);
    goto corral_source_split_5034;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb12:
    assume $i13 == 1;
    goto corral_source_split_4971;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb8:
    assume $i11 == 1;
    goto corral_source_split_4966;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_4961;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_4953;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i1);
    goto corral_source_split_4954;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 745} vslice_dummy_var_171 := printk.ref.ref.i32(.str.30, .str.155, $i6);
    goto corral_source_split_4955;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const i2c_transfer: ref;

axiom i2c_transfer == $sub.ref(0, 361444);

procedure i2c_transfer($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation i2c_transfer($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 758} {:cexpr "i2c_transfer:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_5102;

  corral_source_split_5102:
    assume {:verifier.code 1} true;
    call {:si_unique_call 759} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 760} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_5103;

  corral_source_split_5103:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const mxl111sf_probe_port_expander: ref;

axiom mxl111sf_probe_port_expander == $sub.ref(0, 362476);

procedure mxl111sf_probe_port_expander($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.18, $M.19, $M.20, $M.21, $M.22, $M.7, $CurrAddr;



implementation mxl111sf_probe_port_expander($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $p7: ref;
  var $p9: ref;
  var $p11: ref;
  var $p13: ref;
  var $p15: ref;
  var $p17: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p24: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $p34: ref;
  var $i35: i16;
  var $i36: i8;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $i42: i8;
  var $i43: i32;
  var $p46: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $i54: i1;
  var $p56: ref;
  var $i57: i16;
  var $i58: i8;
  var $p59: ref;
  var $p60: ref;
  var $i61: i32;
  var $i62: i1;
  var $p63: ref;
  var $i64: i8;
  var $i65: i32;
  var $p67: ref;
  var $p68: ref;
  var $i69: i32;
  var $i70: i1;
  var vslice_dummy_var_175: i32;
  var vslice_dummy_var_176: i32;
  var vslice_dummy_var_177: i32;
  var vslice_dummy_var_178: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 761} $p1 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 763} $p3 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    goto corral_source_split_5105;

  corral_source_split_5105:
    assume {:verifier.code 0} true;
    $M.18 := $store.i8($M.18, $p1, 1);
    goto corral_source_split_5106;

  corral_source_split_5106:
    assume {:verifier.code 0} true;
    $M.18 := $store.i8($M.18, $p2, 0);
    goto corral_source_split_5107;

  corral_source_split_5107:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5108;

  corral_source_split_5108:
    assume {:verifier.code 0} true;
    $M.19 := $store.i16($M.19, $p5, 0);
    goto corral_source_split_5109;

  corral_source_split_5109:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_5110;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    $M.20 := $store.i16($M.20, $p7, 0);
    goto corral_source_split_5111;

  corral_source_split_5111:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_5112;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    $M.21 := $store.i16($M.21, $p9, 1);
    goto corral_source_split_5113;

  corral_source_split_5113:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5114;

  corral_source_split_5114:
    assume {:verifier.code 0} true;
    $M.22 := $store.ref($M.22, $p11, $p1);
    goto corral_source_split_5115;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(1, 16)), $mul.ref(0, 1));
    goto corral_source_split_5116;

  corral_source_split_5116:
    assume {:verifier.code 0} true;
    $M.19 := $store.i16($M.19, $p13, 0);
    goto corral_source_split_5117;

  corral_source_split_5117:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(1, 16)), $mul.ref(2, 1));
    goto corral_source_split_5118;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    $M.20 := $store.i16($M.20, $p15, 1);
    goto corral_source_split_5119;

  corral_source_split_5119:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(1, 16)), $mul.ref(4, 1));
    goto corral_source_split_5120;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    $M.21 := $store.i16($M.21, $p17, 1);
    goto corral_source_split_5121;

  corral_source_split_5121:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(1, 16)), $mul.ref(8, 1));
    goto corral_source_split_5122;

  corral_source_split_5122:
    assume {:verifier.code 0} true;
    $M.22 := $store.ref($M.22, $p19, $p2);
    goto corral_source_split_5123;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    $i20 := $M.10;
    goto corral_source_split_5124;

  corral_source_split_5124:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_5125;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5130;

  corral_source_split_5130:
    assume {:verifier.code 0} true;
    $M.19 := $store.i16($M.19, $p24, 56);
    goto corral_source_split_5131;

  corral_source_split_5131:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(1, 16)), $mul.ref(0, 1));
    goto corral_source_split_5132;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    $M.19 := $store.i16($M.19, $p26, 56);
    goto corral_source_split_5133;

  corral_source_split_5133:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(0, 1));
    goto corral_source_split_5134;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.7, $p27);
    goto corral_source_split_5135;

  corral_source_split_5135:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 7456)), $mul.ref(424, 1));
    goto corral_source_split_5136;

  corral_source_split_5136:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p3);
    goto corral_source_split_5137;

  corral_source_split_5137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 765} $i31 := i2c_transfer($p29, $p30, 2);
    call {:si_unique_call 766} {:cexpr "ret"} boogie_si_record_i32($i31);
    goto corral_source_split_5138;

  corral_source_split_5138:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i31, 2);
    goto corral_source_split_5139;

  corral_source_split_5139:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5158;

  corral_source_split_5158:
    assume {:verifier.code 0} true;
    $M.19 := $store.i16($M.19, $p46, 32);
    goto corral_source_split_5159;

  corral_source_split_5159:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(1, 16)), $mul.ref(0, 1));
    goto corral_source_split_5160;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    $M.19 := $store.i16($M.19, $p48, 32);
    goto corral_source_split_5161;

  corral_source_split_5161:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(0, 1));
    goto corral_source_split_5162;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.7, $p49);
    goto corral_source_split_5163;

  corral_source_split_5163:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p50, $mul.ref(0, 7456)), $mul.ref(424, 1));
    goto corral_source_split_5164;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p3);
    goto corral_source_split_5165;

  corral_source_split_5165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 768} $i53 := i2c_transfer($p51, $p52, 2);
    call {:si_unique_call 769} {:cexpr "ret"} boogie_si_record_i32($i53);
    goto corral_source_split_5166;

  corral_source_split_5166:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i53, 2);
    goto corral_source_split_5167;

  corral_source_split_5167:
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(12, 1));
    goto corral_source_split_5186;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p67, $sub.i8(0, 1));
    goto corral_source_split_5187;

  corral_source_split_5187:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(8, 1));
    goto corral_source_split_5188;

  corral_source_split_5188:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p68, 0);
    goto corral_source_split_5189;

  corral_source_split_5189:
    assume {:verifier.code 0} true;
    $i69 := $M.10;
    goto corral_source_split_5190;

  corral_source_split_5190:
    assume {:verifier.code 0} true;
    $i70 := $ne.i32($i69, 0);
    goto corral_source_split_5191;

  corral_source_split_5191:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb17:
    assume $i70 == 1;
    goto corral_source_split_5193;

  corral_source_split_5193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 771} vslice_dummy_var_178 := printk.ref.ref(.str.158, .str.156);
    goto corral_source_split_5194;

  corral_source_split_5194:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb11:
    assume $i54 == 1;
    goto corral_source_split_5169;

  corral_source_split_5169:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5170;

  corral_source_split_5170:
    assume {:verifier.code 0} true;
    $i57 := $load.i16($M.19, $p56);
    goto corral_source_split_5171;

  corral_source_split_5171:
    assume {:verifier.code 0} true;
    $i58 := $trunc.i16.i8($i57);
    goto corral_source_split_5172;

  corral_source_split_5172:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(12, 1));
    goto corral_source_split_5173;

  corral_source_split_5173:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p59, $i58);
    goto corral_source_split_5174;

  corral_source_split_5174:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(8, 1));
    goto corral_source_split_5175;

  corral_source_split_5175:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p60, 1);
    goto corral_source_split_5176;

  corral_source_split_5176:
    assume {:verifier.code 0} true;
    $i61 := $M.10;
    goto corral_source_split_5177;

  corral_source_split_5177:
    assume {:verifier.code 0} true;
    $i62 := $ne.i32($i61, 0);
    goto corral_source_split_5178;

  corral_source_split_5178:
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb13:
    assume $i62 == 1;
    goto corral_source_split_5180;

  corral_source_split_5180:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(12, 1));
    goto corral_source_split_5181;

  corral_source_split_5181:
    assume {:verifier.code 0} true;
    $i64 := $load.i8($M.7, $p63);
    goto corral_source_split_5182;

  corral_source_split_5182:
    assume {:verifier.code 0} true;
    $i65 := $zext.i8.i32($i64);
    goto corral_source_split_5183;

  corral_source_split_5183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 770} vslice_dummy_var_177 := printk.ref.ref.i32(.str.157, .str.156, $i65);
    goto corral_source_split_5184;

  corral_source_split_5184:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb4:
    assume $i32 == 1;
    goto corral_source_split_5141;

  corral_source_split_5141:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5142;

  corral_source_split_5142:
    assume {:verifier.code 0} true;
    $i35 := $load.i16($M.19, $p34);
    goto corral_source_split_5143;

  corral_source_split_5143:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i16.i8($i35);
    goto corral_source_split_5144;

  corral_source_split_5144:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(12, 1));
    goto corral_source_split_5145;

  corral_source_split_5145:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p37, $i36);
    goto corral_source_split_5146;

  corral_source_split_5146:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(8, 1));
    goto corral_source_split_5147;

  corral_source_split_5147:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p38, 1);
    goto corral_source_split_5148;

  corral_source_split_5148:
    assume {:verifier.code 0} true;
    $i39 := $M.10;
    goto corral_source_split_5149;

  corral_source_split_5149:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_5150;

  corral_source_split_5150:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i40 == 1;
    goto corral_source_split_5152;

  corral_source_split_5152:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(12, 1));
    goto corral_source_split_5153;

  corral_source_split_5153:
    assume {:verifier.code 0} true;
    $i42 := $load.i8($M.7, $p41);
    goto corral_source_split_5154;

  corral_source_split_5154:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i32($i42);
    goto corral_source_split_5155;

  corral_source_split_5155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 767} vslice_dummy_var_176 := printk.ref.ref.i32(.str.157, .str.156, $i43);
    goto corral_source_split_5156;

  corral_source_split_5156:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb1:
    assume $i21 == 1;
    goto corral_source_split_5127;

  corral_source_split_5127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} vslice_dummy_var_175 := printk.ref.ref(.str.17, .str.156);
    goto corral_source_split_5128;

  corral_source_split_5128:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pca9534_init_port_expander: ref;

axiom pca9534_init_port_expander == $sub.ref(0, 363508);

procedure pca9534_init_port_expander($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.18, $M.19, $M.20, $M.21, $M.22, $CurrAddr;



implementation pca9534_init_port_expander($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var vslice_dummy_var_179: i32;
  var vslice_dummy_var_180: i32;
  var vslice_dummy_var_181: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 772} $p1 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 773} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_5196;

  corral_source_split_5196:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_5197;

  corral_source_split_5197:
    assume {:verifier.code 0} true;
    $M.18 := $store.i8($M.18, $p3, 1);
    goto corral_source_split_5198;

  corral_source_split_5198:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_5199;

  corral_source_split_5199:
    assume {:verifier.code 0} true;
    $M.18 := $store.i8($M.18, $p4, 7);
    goto corral_source_split_5200;

  corral_source_split_5200:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5201;

  corral_source_split_5201:
    assume {:verifier.code 0} true;
    $M.19 := $store.i16($M.19, $p5, 32);
    goto corral_source_split_5202;

  corral_source_split_5202:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_5203;

  corral_source_split_5203:
    assume {:verifier.code 0} true;
    $M.20 := $store.i16($M.20, $p6, 0);
    goto corral_source_split_5204;

  corral_source_split_5204:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_5205;

  corral_source_split_5205:
    assume {:verifier.code 0} true;
    $M.21 := $store.i16($M.21, $p7, 2);
    goto corral_source_split_5206;

  corral_source_split_5206:
    assume {:verifier.code 0} true;
    goto corral_source_split_5207;

  corral_source_split_5207:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5208;

  corral_source_split_5208:
    assume {:verifier.code 0} true;
    $M.22 := $store.ref($M.22, $p9, $p1);
    goto corral_source_split_5209;

  corral_source_split_5209:
    assume {:verifier.code 0} true;
    $i10 := $M.10;
    goto corral_source_split_5210;

  corral_source_split_5210:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_5211;

  corral_source_split_5211:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(0, 1));
    goto corral_source_split_5216;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.7, $p13);
    goto corral_source_split_5217;

  corral_source_split_5217:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 7456)), $mul.ref(424, 1));
    goto corral_source_split_5218;

  corral_source_split_5218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 775} vslice_dummy_var_180 := i2c_transfer($p15, $p2, 1);
    goto corral_source_split_5219;

  corral_source_split_5219:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_5220;

  corral_source_split_5220:
    assume {:verifier.code 0} true;
    $M.18 := $store.i8($M.18, $p17, 3);
    goto corral_source_split_5221;

  corral_source_split_5221:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_5222;

  corral_source_split_5222:
    assume {:verifier.code 0} true;
    $M.18 := $store.i8($M.18, $p18, 0);
    goto corral_source_split_5223;

  corral_source_split_5223:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(0, 1));
    goto corral_source_split_5224;

  corral_source_split_5224:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.7, $p19);
    goto corral_source_split_5225;

  corral_source_split_5225:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 7456)), $mul.ref(424, 1));
    goto corral_source_split_5226;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 776} vslice_dummy_var_181 := i2c_transfer($p21, $p2, 1);
    goto corral_source_split_5227;

  corral_source_split_5227:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_5213;

  corral_source_split_5213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 774} vslice_dummy_var_179 := printk.ref.ref(.str.17, .str.159);
    goto corral_source_split_5214;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mxl111sf_hw_gpio_initialize: ref;

axiom mxl111sf_hw_gpio_initialize == $sub.ref(0, 364540);

procedure mxl111sf_hw_gpio_initialize($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.23, $M.24, $M.25, $M.15, $M.7, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation mxl111sf_hw_gpio_initialize($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i10: i32;
  var $i11: i32;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i22: i32;
  var $i23: i1;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $i12: i32;
  var $i31: i1;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var vslice_dummy_var_182: i32;
  var vslice_dummy_var_183: i32;
  var vslice_dummy_var_184: i32;
  var vslice_dummy_var_185: i32;
  var vslice_dummy_var_186: i32;
  var vslice_dummy_var_187: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5229;

  corral_source_split_5229:
    assume {:verifier.code 0} true;
    $i1 := $M.10;
    goto corral_source_split_5230;

  corral_source_split_5230:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_5231;

  corral_source_split_5231:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 778} $i4 := mxl111sf_hw_set_gpio($p0, 3, 0);
    call {:si_unique_call 779} {:cexpr "ret"} boogie_si_record_i32($i4);
    goto corral_source_split_5236;

  corral_source_split_5236:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i4, 0);
    goto corral_source_split_5237;

  corral_source_split_5237:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i10 := $i4;
    assume true;
    goto $bb12, $bb14;

  $bb14:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 781} $i13 := mxl111sf_hw_set_gpio($p0, 4, 0);
    goto corral_source_split_5251;

  corral_source_split_5251:
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i13, 0);
    goto corral_source_split_5252;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i10 := $i13;
    assume {:branchcond $i14} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 783} $i19 := mxl111sf_hw_set_gpio($p0, 5, 0);
    goto corral_source_split_5262;

  corral_source_split_5262:
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i19, 0);
    goto corral_source_split_5263;

  corral_source_split_5263:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i10 := $i19;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 785} $i25 := mxl111sf_hw_set_gpio($p0, 6, 0);
    goto corral_source_split_5273;

  corral_source_split_5273:
    assume {:verifier.code 0} true;
    $i26 := $slt.i32($i25, 0);
    goto corral_source_split_5274;

  corral_source_split_5274:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb39, $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i10 := $i25;
    assume {:branchcond $i26} true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    call {:si_unique_call 787} $i12 := mxl111sf_hw_set_gpio($p0, 7, 0);
    goto corral_source_split_5284;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    $i31 := $slt.i32($i12, 0);
    goto corral_source_split_5285;

  corral_source_split_5285:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb49, $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $i10 := $i12;
    assume {:branchcond $i31} true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i11 := $i12;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_5249;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb55:
    assume {:verifier.code 0} true;
    assume $i31 == 1;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_5247;

  corral_source_split_5247:
    assume {:verifier.code 0} true;
    $i11 := $i10;
    goto $bb15;

  $bb49:
    assume $i31 == 1;
    goto corral_source_split_5287;

  corral_source_split_5287:
    assume {:verifier.code 0} true;
    $i32 := $M.10;
    goto corral_source_split_5288;

  corral_source_split_5288:
    assume {:verifier.code 0} true;
    $i33 := $and.i32($i32, 16);
    goto corral_source_split_5289;

  corral_source_split_5289:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_5290;

  corral_source_split_5290:
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb52, $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb51;

  $bb52:
    assume $i34 == 1;
    goto corral_source_split_5292;

  corral_source_split_5292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 788} vslice_dummy_var_187 := printk.ref.ref.i32.i32(.str.5, .str.160, $i12, 575);
    goto corral_source_split_5293;

  corral_source_split_5293:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb45:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb13;

  $bb39:
    assume $i26 == 1;
    goto corral_source_split_5276;

  corral_source_split_5276:
    assume {:verifier.code 0} true;
    $i27 := $M.10;
    goto corral_source_split_5277;

  corral_source_split_5277:
    assume {:verifier.code 0} true;
    $i28 := $and.i32($i27, 16);
    goto corral_source_split_5278;

  corral_source_split_5278:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_5279;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb42, $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb41;

  $bb42:
    assume $i29 == 1;
    goto corral_source_split_5281;

  corral_source_split_5281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 786} vslice_dummy_var_186 := printk.ref.ref.i32.i32(.str.5, .str.160, $i25, 575);
    goto corral_source_split_5282;

  corral_source_split_5282:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb35:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb13;

  $bb29:
    assume $i20 == 1;
    goto corral_source_split_5265;

  corral_source_split_5265:
    assume {:verifier.code 0} true;
    $i21 := $M.10;
    goto corral_source_split_5266;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    $i22 := $and.i32($i21, 16);
    goto corral_source_split_5267;

  corral_source_split_5267:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_5268;

  corral_source_split_5268:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb31;

  $bb32:
    assume $i23 == 1;
    goto corral_source_split_5270;

  corral_source_split_5270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} vslice_dummy_var_185 := printk.ref.ref.i32.i32(.str.5, .str.160, $i19, 575);
    goto corral_source_split_5271;

  corral_source_split_5271:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb13;

  $bb19:
    assume $i14 == 1;
    goto corral_source_split_5254;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    $i15 := $M.10;
    goto corral_source_split_5255;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i15, 16);
    goto corral_source_split_5256;

  corral_source_split_5256:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_5257;

  corral_source_split_5257:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb21;

  $bb22:
    assume $i17 == 1;
    goto corral_source_split_5259;

  corral_source_split_5259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} vslice_dummy_var_184 := printk.ref.ref.i32.i32(.str.5, .str.160, $i13, 575);
    goto corral_source_split_5260;

  corral_source_split_5260:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb13;

  $bb6:
    assume $i5 == 1;
    goto corral_source_split_5239;

  corral_source_split_5239:
    assume {:verifier.code 0} true;
    $i6 := $M.10;
    goto corral_source_split_5240;

  corral_source_split_5240:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 16);
    goto corral_source_split_5241;

  corral_source_split_5241:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_5242;

  corral_source_split_5242:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb9:
    assume $i8 == 1;
    goto corral_source_split_5244;

  corral_source_split_5244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 780} vslice_dummy_var_183 := printk.ref.ref.i32.i32(.str.5, .str.160, $i4, 575);
    goto corral_source_split_5245;

  corral_source_split_5245:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5233;

  corral_source_split_5233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} vslice_dummy_var_182 := printk.ref.ref(.str.17, .str.160);
    goto corral_source_split_5234;

  corral_source_split_5234:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mxl111sf_i2c_xfer: ref;

axiom mxl111sf_i2c_xfer == $sub.ref(0, 365572);

procedure mxl111sf_i2c_xfer($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.15, $M.27, $M.8, $M.29, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.28, $M.7, assertsPassed, $CurrAddr;



implementation mxl111sf_i2c_xfer($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i17: i1;
  var $i20: i1;
  var $i21: i64;
  var $p22: ref;
  var $i23: i32;
  var $i25: i64;
  var $p26: ref;
  var $i27: i32;
  var $i24: i32;
  var $i28: i1;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $i32: i32;
  var $i33: i1;
  var $i35: i1;
  var $i36: i32;
  var $i37: i32;
  var $i38: i32;
  var $i39: i32;
  var $i40: i1;
  var $i41: i32;
  var $i42: i64;
  var $p44: ref;
  var $i45: i16;
  var $i46: i32;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $i50: i64;
  var $p52: ref;
  var $i53: i16;
  var $i54: i32;
  var $i55: i64;
  var $p57: ref;
  var $i58: i16;
  var $i59: i32;
  var $i62: i32;
  var $i63: i1;
  var $i19: i32;
  var $i64: i32;
  var $i18: i32;
  var $i61: i32;
  var $p65: ref;
  var $i66: i1;
  var $i67: i32;
  var $i16: i32;
  var vslice_dummy_var_188: i32;
  var vslice_dummy_var_189: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 789} {:cexpr "mxl111sf_i2c_xfer:arg:num"} boogie_si_record_i32($i2);
    goto corral_source_split_5295;

  corral_source_split_5295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 790} $p3 := i2c_get_adapdata($p0);
    goto corral_source_split_5296;

  corral_source_split_5296:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_5297;

  corral_source_split_5297:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 7456)), $mul.ref(7448, 1));
    goto corral_source_split_5298;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.8, $p5);
    goto corral_source_split_5299;

  corral_source_split_5299:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_5300;

  corral_source_split_5300:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 368)), $mul.ref(15, 1));
    goto corral_source_split_5301;

  corral_source_split_5301:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.7, $p8);
    goto corral_source_split_5302;

  corral_source_split_5302:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_5303;

  corral_source_split_5303:
    assume {:verifier.code 0} true;
    $i11 := $ugt.i32($i10, 1);
    goto corral_source_split_5304;

  corral_source_split_5304:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    call {:si_unique_call 791} {:cexpr "hwi2c"} boogie_si_record_i32($i12);
    goto corral_source_split_5305;

  corral_source_split_5305:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 7456)), $mul.ref(264, 1));
    goto corral_source_split_5306;

  corral_source_split_5306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 792} $i14 := ldv_mutex_lock_interruptible_121($p13);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    call {:si_unique_call 793} {:cexpr "tmp___0"} boogie_si_record_i32($i14);
    goto corral_source_split_5307;

  corral_source_split_5307:
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i14, 0);
    goto corral_source_split_5308;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i17 := $slt.i32(0, $i2);
    goto corral_source_split_5314;

  corral_source_split_5314:
    assume {:verifier.code 0} true;
    $i18 := 0;
    assume {:branchcond $i17} true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i61 := $i18;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_5373;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p4, $mul.ref(0, 7456)), $mul.ref(264, 1));
    goto corral_source_split_5374;

  corral_source_split_5374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 801} ldv_mutex_unlock_122___0($p65);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    goto corral_source_split_5375;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    $i66 := $eq.i32($i61, $i2);
    goto corral_source_split_5376;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    assume {:branchcond $i66} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i66 == 1);
    goto corral_source_split_5385;

  corral_source_split_5385:
    assume {:verifier.code 0} true;
    $i67 := $sub.i32(0, 121);
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_5387;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    $i16 := $i67;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5312;

  corral_source_split_5312:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb29:
    assume $i66 == 1;
    goto corral_source_split_5383;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    $i67 := $i2;
    goto $bb31;

  SeqInstr_34:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i17 == 1;
    goto corral_source_split_5316;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb8;

  $bb8:
    call $i20, $i21, $p22, $i23, $i25, $p26, $i27, $i24, $i28, $i29, $i30, $i31, $i32, $i33, $i35, $i36, $i37, $i62, $i63, $i19, $i64, vslice_dummy_var_188 := mxl111sf_i2c_xfer_loop_$bb8($p1, $i2, $p7, $i12, $i20, $i21, $p22, $i23, $i25, $p26, $i27, $i24, $i28, $i29, $i30, $i31, $i32, $i33, $i35, $i36, $i37, $i62, $i63, $i19, $i64, vslice_dummy_var_188);
    goto $bb8_last;

  corral_source_split_5318:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i12, 0);
    goto corral_source_split_5320;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i20 == 1);
    goto corral_source_split_5327;

  corral_source_split_5327:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i19);
    goto corral_source_split_5328;

  corral_source_split_5328:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($p1, $mul.ref($i25, 16));
    goto corral_source_split_5329;

  corral_source_split_5329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 796} $i27 := mxl111sf_i2c_sw_xfer_msg($p7, $p26);
    call {:si_unique_call 797} {:cexpr "tmp___2"} boogie_si_record_i32($i27);
    assume {:verifier.code 0} true;
    $i24 := $i27;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_5331;

  corral_source_split_5331:
    assume {:verifier.code 0} true;
    $i28 := $slt.i32($i24, 0);
    goto corral_source_split_5332;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    $i29 := $zext.i1.i32($i28);
    call {:si_unique_call 798} {:cexpr "__ret"} boogie_si_record_i32($i29);
    goto corral_source_split_5333;

  corral_source_split_5333:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_5334;

  corral_source_split_5334:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i29, 0);
    goto corral_source_split_5344;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    $i36, $i37 := $i19, $i24;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i62 := $add.i32($i19, 1);
    call {:si_unique_call 802} {:cexpr "i"} boogie_si_record_i32($i62);
    goto corral_source_split_5378;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    $i63 := $slt.i32($i62, $i2);
    goto corral_source_split_5379;

  corral_source_split_5379:
    assume {:verifier.code 0} true;
    $i64 := $i62;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_5381;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    $i18 := $i64;
    goto $bb7;

  $bb26:
    assume $i63 == 1;
    assume {:verifier.code 0} true;
    $i19 := $i62;
    goto $bb26_dummy;

  $bb19:
    assume $i35 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5346;

  corral_source_split_5346:
    assume {:verifier.code 0} true;
    $i38 := $M.10;
    goto corral_source_split_5347;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    $i39 := $and.i32($i38, 16);
    goto corral_source_split_5348;

  corral_source_split_5348:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_5349;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i61 := $i36;
    goto $bb24;

  $bb21:
    assume $i40 == 1;
    goto corral_source_split_5351;

  corral_source_split_5351:
    assume {:verifier.code 0} true;
    $i41 := $add.i32($i36, 1);
    goto corral_source_split_5352;

  corral_source_split_5352:
    assume {:verifier.code 0} true;
    $i42 := $sext.i32.i64($i36);
    goto corral_source_split_5353;

  corral_source_split_5353:
    assume {:verifier.code 0} true;
    goto corral_source_split_5354;

  corral_source_split_5354:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p1, $mul.ref($i42, 16)), $mul.ref(2, 1));
    goto corral_source_split_5355;

  corral_source_split_5355:
    assume {:verifier.code 0} true;
    $i45 := $load.i16($M.8, $p44);
    goto corral_source_split_5356;

  corral_source_split_5356:
    assume {:verifier.code 0} true;
    $i46 := $zext.i16.i32($i45);
    goto corral_source_split_5357;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    $i47 := $and.i32($i46, 1);
    goto corral_source_split_5358;

  corral_source_split_5358:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_5359;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    $p49 := (if $i48 == 1 then .str.39 else .str.40);
    goto corral_source_split_5360;

  corral_source_split_5360:
    assume {:verifier.code 0} true;
    $i50 := $sext.i32.i64($i36);
    goto corral_source_split_5361;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    goto corral_source_split_5362;

  corral_source_split_5362:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p1, $mul.ref($i50, 16)), $mul.ref(4, 1));
    goto corral_source_split_5363;

  corral_source_split_5363:
    assume {:verifier.code 0} true;
    $i53 := $load.i16($M.8, $p52);
    goto corral_source_split_5364;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    $i54 := $zext.i16.i32($i53);
    goto corral_source_split_5365;

  corral_source_split_5365:
    assume {:verifier.code 0} true;
    $i55 := $sext.i32.i64($i36);
    goto corral_source_split_5366;

  corral_source_split_5366:
    assume {:verifier.code 0} true;
    goto corral_source_split_5367;

  corral_source_split_5367:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p1, $mul.ref($i55, 16)), $mul.ref(0, 1));
    goto corral_source_split_5368;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    $i58 := $load.i16($M.8, $p57);
    goto corral_source_split_5369;

  corral_source_split_5369:
    assume {:verifier.code 0} true;
    $i59 := $zext.i16.i32($i58);
    goto corral_source_split_5370;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} vslice_dummy_var_189 := printk.ref.ref.i32.i32.i32.ref.i32.i32(.str.38, .str.37, $i37, $i41, $i2, $p49, $i54, $i59);
    goto corral_source_split_5371;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb13:
    assume $i30 == 1;
    goto corral_source_split_5336;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    $i31 := $M.10;
    goto corral_source_split_5337;

  corral_source_split_5337:
    assume {:verifier.code 0} true;
    $i32 := $and.i32($i31, 16);
    goto corral_source_split_5338;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_5339;

  corral_source_split_5339:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb15;

  $bb16:
    assume $i33 == 1;
    goto corral_source_split_5341;

  corral_source_split_5341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 799} vslice_dummy_var_188 := printk.ref.ref.i32.i32(.str.5, .str.37, $i24, 829);
    goto corral_source_split_5342;

  corral_source_split_5342:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb10:
    assume $i20 == 1;
    goto corral_source_split_5322;

  corral_source_split_5322:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i19);
    goto corral_source_split_5323;

  corral_source_split_5323:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p1, $mul.ref($i21, 16));
    goto corral_source_split_5324;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 794} $i23 := mxl111sf_i2c_hw_xfer_msg($p7, $p22);
    call {:si_unique_call 795} {:cexpr "tmp___1"} boogie_si_record_i32($i23);
    goto corral_source_split_5325;

  corral_source_split_5325:
    assume {:verifier.code 0} true;
    $i24 := $i23;
    goto $bb12;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_5310;

  corral_source_split_5310:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 11);
    goto $bb3;

  SeqInstr_31:
    assume !assertsPassed;
    return;

  $bb26_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5318;
}



const mxl111sf_i2c_func: ref;

axiom mxl111sf_i2c_func == $sub.ref(0, 366604);

procedure mxl111sf_i2c_func($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation mxl111sf_i2c_func($p0: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5389;

  corral_source_split_5389:
    assume {:verifier.code 0} true;
    $r := 1;
    return;
}



const i2c_get_adapdata: ref;

axiom i2c_get_adapdata == $sub.ref(0, 367636);

procedure i2c_get_adapdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation i2c_get_adapdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5391;

  corral_source_split_5391:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1928)), $mul.ref(176, 1));
    goto corral_source_split_5392;

  corral_source_split_5392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 803} $p2 := dev_get_drvdata($p1);
    goto corral_source_split_5393;

  corral_source_split_5393:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_mutex_lock_interruptible_121: ref;

axiom ldv_mutex_lock_interruptible_121 == $sub.ref(0, 368668);

procedure ldv_mutex_lock_interruptible_121($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.29, assertsPassed;



implementation ldv_mutex_lock_interruptible_121($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5395;

  corral_source_split_5395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 804} $i1 := ldv_linux_kernel_locking_mutex_mutex_lock_interruptible_or_killable_i2c_mutex_of_dvb_usb_device($p0);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    call {:si_unique_call 805} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_5396;

  corral_source_split_5396:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;

  SeqInstr_37:
    assume !assertsPassed;
    return;
}



const mxl111sf_i2c_hw_xfer_msg: ref;

axiom mxl111sf_i2c_hw_xfer_msg == $sub.ref(0, 369700);

procedure mxl111sf_i2c_hw_xfer_msg($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.15, $M.27, $M.8, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.28, $CurrAddr;



implementation mxl111sf_i2c_hw_xfer_msg($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i16;
  var $i11: i32;
  var $p12: ref;
  var $i13: i16;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $i18: i16;
  var $i19: i32;
  var $i20: i32;
  var $p21: ref;
  var $i22: i16;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $i27: i16;
  var $i28: i32;
  var $i29: i32;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $p48: ref;
  var $i49: i16;
  var $i50: i32;
  var $i51: i32;
  var $i52: i1;
  var $p53: ref;
  var $i54: i16;
  var $i55: i32;
  var $i56: i1;
  var $i57: i32;
  var $i58: i32;
  var $i59: i1;
  var $p60: ref;
  var $i61: i16;
  var $i62: i32;
  var $p63: ref;
  var $p64: ref;
  var $i65: i8;
  var $i66: i32;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i16;
  var $i74: i8;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $i79: i32;
  var $i80: i8;
  var $i81: i32;
  var $i82: i1;
  var $i83: i32;
  var $i84: i32;
  var $i85: i1;
  var $p86: ref;
  var $i87: i16;
  var $i88: i32;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p94: ref;
  var $i95: i16;
  var $i96: i32;
  var $i97: i32;
  var $i98: i16;
  var $p99: ref;
  var $i100: i16;
  var $i101: i32;
  var $i102: i32;
  var $i103: i16;
  var $i104: i32;
  var $i105: i32;
  var $i106: i1;
  var $i107: i32;
  var $i108: i32;
  var $i110: i32;
  var $i111: i1;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $i118: i32;
  var $i119: i32;
  var $i120: i64;
  var $p121: ref;
  var $i122: i8;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $i126: i32;
  var $i127: i8;
  var $i128: i32;
  var $i129: i1;
  var $i130: i32;
  var $i131: i32;
  var $i132: i1;
  var $p133: ref;
  var $i134: i16;
  var $i135: i32;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $i140: i32;
  var $i141: i32;
  var $i142: i16;
  var $i143: i32;
  var $i144: i1;
  var $i114: i16;
  var $i145: i16;
  var $i146: i32;
  var $i112: i16;
  var $i113: i32;
  var $i147: i32;
  var $i148: i1;
  var $p149: ref;
  var $p150: ref;
  var $p151: ref;
  var $i152: i32;
  var $i153: i1;
  var $i155: i32;
  var $i156: i32;
  var $i157: i64;
  var $p158: ref;
  var $p159: ref;
  var $p160: ref;
  var $i161: i32;
  var $i162: i32;
  var $i163: i32;
  var $i164: i64;
  var $p165: ref;
  var $i166: i8;
  var $i167: i32;
  var $i168: i32;
  var $i169: i64;
  var $p170: ref;
  var $i171: i32;
  var $i172: i32;
  var $i173: i1;
  var $i174: i32;
  var $p175: ref;
  var $p176: ref;
  var $i177: i32;
  var $i178: i32;
  var $i179: i32;
  var $i180: i64;
  var $p181: ref;
  var $i182: i8;
  var $i183: i32;
  var $i185: i32;
  var $i186: i32;
  var $i187: i64;
  var $p188: ref;
  var $i189: i32;
  var $i190: i1;
  var $i154: i32;
  var $p191: ref;
  var $i192: i32;
  var $i193: i8;
  var $i194: i32;
  var $i195: i1;
  var $i196: i32;
  var $i197: i32;
  var $i198: i1;
  var $p199: ref;
  var $i200: i16;
  var $i201: i32;
  var $p203: ref;
  var $p204: ref;
  var $p205: ref;
  var $i206: i32;
  var $p207: ref;
  var $p208: ref;
  var $p209: ref;
  var $i210: i32;
  var $p211: ref;
  var $i212: i16;
  var $i213: i32;
  var $i214: i32;
  var $i215: i1;
  var $p216: ref;
  var $i217: i16;
  var $i218: i32;
  var $i219: i1;
  var $i220: i32;
  var $i221: i32;
  var $i222: i1;
  var $p223: ref;
  var $i224: i16;
  var $i225: i32;
  var $p227: ref;
  var $p228: ref;
  var $p229: ref;
  var $p230: ref;
  var $p231: ref;
  var $i232: i16;
  var $i233: i8;
  var $p234: ref;
  var $p235: ref;
  var $p236: ref;
  var $p237: ref;
  var $i238: i16;
  var $i239: i8;
  var $p240: ref;
  var $p241: ref;
  var $p242: ref;
  var $p243: ref;
  var $i244: i32;
  var $i245: i8;
  var $i246: i32;
  var $i247: i1;
  var $i248: i32;
  var $i249: i32;
  var $i250: i1;
  var $p251: ref;
  var $i252: i16;
  var $i253: i32;
  var $p255: ref;
  var $p256: ref;
  var $p257: ref;
  var $p258: ref;
  var $i259: i16;
  var $i260: i32;
  var $i261: i32;
  var $i262: i16;
  var $p263: ref;
  var $i264: i16;
  var $i265: i32;
  var $i266: i32;
  var $i267: i16;
  var $i268: i32;
  var $i269: i32;
  var $i270: i1;
  var $i271: i32;
  var $i272: i32;
  var $p274: ref;
  var $p275: ref;
  var $i276: i32;
  var $i277: i1;
  var $p279: ref;
  var $p280: ref;
  var $p281: ref;
  var $p282: ref;
  var $p283: ref;
  var $i284: i32;
  var $i285: i8;
  var $i286: i32;
  var $i287: i1;
  var $i288: i32;
  var $i289: i32;
  var $i290: i1;
  var $p291: ref;
  var $i292: i16;
  var $i293: i32;
  var $p295: ref;
  var $p296: ref;
  var $p297: ref;
  var $i299: i32;
  var $i300: i32;
  var $i301: i64;
  var $p302: ref;
  var $i303: i8;
  var $i304: i64;
  var $p305: ref;
  var $i306: i64;
  var $p307: ref;
  var $i308: i8;
  var $i309: i32;
  var $i310: i1;
  var $i311: i1;
  var $i312: i32;
  var $i313: i32;
  var $i314: i1;
  var $i316: i32;
  var $i317: i32;
  var $i318: i64;
  var $p319: ref;
  var $i320: i8;
  var $p321: ref;
  var $p322: ref;
  var $i323: i32;
  var $i324: i32;
  var $i325: i32;
  var $i326: i64;
  var $p327: ref;
  var $i328: i8;
  var $i329: i32;
  var $i330: i32;
  var $i331: i32;
  var $i332: i8;
  var $p333: ref;
  var $i334: i32;
  var $i335: i8;
  var $i336: i32;
  var $i337: i1;
  var $i338: i32;
  var $i339: i32;
  var $i340: i32;
  var $i341: i1;
  var $i343: i64;
  var $p344: ref;
  var $i345: i8;
  var $p346: ref;
  var $p347: ref;
  var $i348: i32;
  var $i349: i32;
  var $i350: i32;
  var $i351: i32;
  var $i352: i32;
  var $i353: i64;
  var $p354: ref;
  var $i355: i32;
  var $i356: i32;
  var $i357: i1;
  var $p358: ref;
  var $p359: ref;
  var $i360: i32;
  var $i361: i32;
  var $i362: i32;
  var $i363: i32;
  var $i364: i64;
  var $p365: ref;
  var $i366: i8;
  var $i367: i32;
  var $i368: i32;
  var $i369: i32;
  var $i370: i32;
  var $i371: i32;
  var $i373: i32;
  var $i374: i32;
  var $i375: i1;
  var $p376: ref;
  var $p377: ref;
  var $i378: i32;
  var $i379: i32;
  var $i380: i32;
  var $i381: i32;
  var $i382: i32;
  var $i383: i64;
  var $p384: ref;
  var $i385: i8;
  var $i386: i32;
  var $i387: i64;
  var $p388: ref;
  var $i389: i8;
  var $i390: i32;
  var $i392: i32;
  var $i393: i1;
  var $i342: i32;
  var $i395: i32;
  var $i396: i32;
  var $i397: i1;
  var $i400: i32;
  var $i401: i32;
  var $i402: i64;
  var $p403: ref;
  var $i404: i8;
  var $p405: ref;
  var $p406: ref;
  var $i407: i32;
  var $i408: i32;
  var $i409: i32;
  var $i410: i64;
  var $p411: ref;
  var $i399: i32;
  var $i413: i32;
  var $i414: i32;
  var $i415: i64;
  var $p416: ref;
  var $i417: i8;
  var $p418: ref;
  var $p419: ref;
  var $i420: i32;
  var $i421: i32;
  var $i422: i32;
  var $i423: i64;
  var $p424: ref;
  var $i412: i32;
  var $i425: i32;
  var $i426: i1;
  var $i298: i32;
  var $i394: i16;
  var $i427: i32;
  var $i428: i32;
  var $i429: i16;
  var $i430: i32;
  var $i431: i1;
  var $i278: i16;
  var $i432: i32;
  var $i433: i1;
  var $p434: ref;
  var $p435: ref;
  var $p436: ref;
  var $i437: i32;
  var $i438: i1;
  var $i440: i32;
  var $i441: i32;
  var $i442: i64;
  var $p443: ref;
  var $i444: i32;
  var $i445: i32;
  var $i446: i64;
  var $p447: ref;
  var $i448: i32;
  var $i449: i32;
  var $i450: i64;
  var $p451: ref;
  var $i452: i32;
  var $i453: i1;
  var $i439: i32;
  var $p454: ref;
  var $p455: ref;
  var $i456: i32;
  var $i457: i8;
  var $i458: i32;
  var $i459: i1;
  var $i460: i32;
  var $i461: i32;
  var $i462: i1;
  var $p463: ref;
  var $i464: i16;
  var $i465: i32;
  var $p467: ref;
  var $p468: ref;
  var $p469: ref;
  var $i470: i32;
  var $i471: i1;
  var $i473: i32;
  var $i474: i32;
  var $i475: i64;
  var $p476: ref;
  var $i477: i8;
  var $p478: ref;
  var $p479: ref;
  var $i480: i32;
  var $i481: i32;
  var $i482: i32;
  var $i483: i64;
  var $p484: ref;
  var $i485: i32;
  var $i486: i32;
  var $i487: i1;
  var $i488: i32;
  var $i489: i32;
  var $i490: i64;
  var $p491: ref;
  var $i492: i8;
  var $i493: i32;
  var $i494: i32;
  var $i495: i32;
  var $i496: i64;
  var $p497: ref;
  var $i498: i8;
  var $i499: i32;
  var $i501: i32;
  var $i502: i1;
  var $i472: i32;
  var $p503: ref;
  var $p504: ref;
  var $p505: ref;
  var $p506: ref;
  var $p507: ref;
  var $p508: ref;
  var $p509: ref;
  var $i510: i32;
  var $p511: ref;
  var $p512: ref;
  var $p513: ref;
  var $i514: i32;
  var $i93: i32;
  var $p515: ref;
  var $p516: ref;
  var $p517: ref;
  var $p518: ref;
  var $p520: ref;
  var $p521: ref;
  var $p522: ref;
  var $p523: ref;
  var $p524: ref;
  var $p525: ref;
  var $p526: ref;
  var $p527: ref;
  var $p529: ref;
  var $p530: ref;
  var $p531: ref;
  var $p532: ref;
  var $p533: ref;
  var $p534: ref;
  var $p535: ref;
  var $p536: ref;
  var $p537: ref;
  var $p538: ref;
  var $p539: ref;
  var $p541: ref;
  var $p542: ref;
  var $p543: ref;
  var $p544: ref;
  var $p545: ref;
  var $p546: ref;
  var $p547: ref;
  var $p548: ref;
  var $p549: ref;
  var $p550: ref;
  var $p551: ref;
  var $p552: ref;
  var $p553: ref;
  var $p554: ref;
  var $p555: ref;
  var $p556: ref;
  var $p557: ref;
  var $p558: ref;
  var $p559: ref;
  var $p560: ref;
  var $p561: ref;
  var $p562: ref;
  var $p563: ref;
  var $p564: ref;
  var $p565: ref;
  var $p566: ref;
  var $p567: ref;
  var $p568: ref;
  var $p569: ref;
  var $p570: ref;
  var $p571: ref;
  var $p572: ref;
  var $p573: ref;
  var $p574: ref;
  var $p575: ref;
  var $p576: ref;
  var $p577: ref;
  var $p578: ref;
  var $p579: ref;
  var $p580: ref;
  var $p581: ref;
  var $p582: ref;
  var $p583: ref;
  var $p584: ref;
  var $p585: ref;
  var $p586: ref;
  var $p587: ref;
  var $p588: ref;
  var $p589: ref;
  var $p590: ref;
  var $p591: ref;
  var $p592: ref;
  var $p593: ref;
  var $p594: ref;
  var $p595: ref;
  var $p596: ref;
  var $p597: ref;
  var $p598: ref;
  var $p599: ref;
  var $p600: ref;
  var $p601: ref;
  var $p602: ref;
  var $p603: ref;
  var $p604: ref;
  var $p605: ref;
  var $p606: ref;
  var $p607: ref;
  var $p608: ref;
  var $p609: ref;
  var $p610: ref;
  var $p611: ref;
  var $p612: ref;
  var $p613: ref;
  var $p614: ref;
  var $i615: i32;
  var $i616: i32;
  var $i617: i32;
  var $i618: i64;
  var $p619: ref;
  var $i620: i8;
  var $p621: ref;
  var $p622: ref;
  var $p623: ref;
  var $p624: ref;
  var $p625: ref;
  var $i626: i32;
  var $i627: i32;
  var $i628: i32;
  var $i629: i64;
  var $p630: ref;
  var $i631: i8;
  var $p632: ref;
  var $p633: ref;
  var $p634: ref;
  var $p635: ref;
  var $p636: ref;
  var $i637: i32;
  var $i638: i32;
  var $i639: i32;
  var $i640: i64;
  var $p641: ref;
  var $i642: i8;
  var $p643: ref;
  var $p644: ref;
  var $p645: ref;
  var $p646: ref;
  var $p647: ref;
  var $i648: i32;
  var $i649: i32;
  var $i650: i32;
  var $i651: i64;
  var $p652: ref;
  var $i653: i8;
  var $p654: ref;
  var $p655: ref;
  var $p656: ref;
  var $p657: ref;
  var $p658: ref;
  var $i659: i32;
  var $i660: i32;
  var $i661: i32;
  var $i662: i64;
  var $p663: ref;
  var $i664: i8;
  var $p665: ref;
  var $p666: ref;
  var $p667: ref;
  var $p668: ref;
  var $p669: ref;
  var $i670: i32;
  var $i671: i32;
  var $i672: i32;
  var $i673: i64;
  var $p674: ref;
  var $i675: i8;
  var $p676: ref;
  var $p677: ref;
  var $p678: ref;
  var $p679: ref;
  var $p680: ref;
  var $i681: i32;
  var $i682: i32;
  var $i683: i32;
  var $i684: i64;
  var $p685: ref;
  var $i686: i8;
  var $p687: ref;
  var $p688: ref;
  var $p689: ref;
  var $p690: ref;
  var $p691: ref;
  var $p692: ref;
  var $p693: ref;
  var $p694: ref;
  var $p695: ref;
  var $p696: ref;
  var $p697: ref;
  var $p698: ref;
  var $p699: ref;
  var $p700: ref;
  var $p701: ref;
  var $p702: ref;
  var $p703: ref;
  var $p704: ref;
  var $p705: ref;
  var $p706: ref;
  var $p707: ref;
  var $p708: ref;
  var $p709: ref;
  var $p710: ref;
  var $p711: ref;
  var $p712: ref;
  var $p713: ref;
  var vslice_dummy_var_190: i32;
  var vslice_dummy_var_191: i32;
  var vslice_dummy_var_192: i32;
  var vslice_dummy_var_193: i32;
  var vslice_dummy_var_194: i32;
  var vslice_dummy_var_195: i32;
  var vslice_dummy_var_196: i32;
  var vslice_dummy_var_197: i32;
  var vslice_dummy_var_198: i32;
  var vslice_dummy_var_199: i32;
  var vslice_dummy_var_200: i32;
  var vslice_dummy_var_201: i32;
  var vslice_dummy_var_202: i32;
  var vslice_dummy_var_203: i32;
  var vslice_dummy_var_204: i32;
  var vslice_dummy_var_205: i32;
  var vslice_dummy_var_206: i32;
  var vslice_dummy_var_207: i32;
  var vslice_dummy_var_208: i32;
  var vslice_dummy_var_209: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 806} $p2 := $alloc($mul.ref(26, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 807} $p3 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 808} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 809} $p5 := $alloc($mul.ref(26, $zext.i32.i64(1)));
    goto corral_source_split_5398;

  corral_source_split_5398:
    assume {:verifier.code 0} true;
    $i6 := $M.10;
    goto corral_source_split_5399;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 4);
    goto corral_source_split_5400;

  corral_source_split_5400:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_5401;

  corral_source_split_5401:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(0, 1));
    goto corral_source_split_5437;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p31, $sub.i8(0, 2));
    goto corral_source_split_5438;

  corral_source_split_5438:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p689 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(1, 1));
    goto corral_source_split_5440;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p689, $sub.i8(0, 2));
    goto corral_source_split_5441;

  corral_source_split_5441:
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb238:
    assume {:verifier.code 0} true;
    $p690 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(2, 1));
    goto corral_source_split_6496;

  corral_source_split_6496:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p690, $sub.i8(0, 2));
    goto corral_source_split_6497;

  corral_source_split_6497:
    assume {:verifier.code 0} true;
    goto $bb239;

  $bb239:
    assume {:verifier.code 0} true;
    $p691 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(3, 1));
    goto corral_source_split_6499;

  corral_source_split_6499:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p691, $sub.i8(0, 2));
    goto corral_source_split_6500;

  corral_source_split_6500:
    assume {:verifier.code 0} true;
    goto $bb240;

  $bb240:
    assume {:verifier.code 0} true;
    $p692 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(4, 1));
    goto corral_source_split_6502;

  corral_source_split_6502:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p692, $sub.i8(0, 2));
    goto corral_source_split_6503;

  corral_source_split_6503:
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb241:
    assume {:verifier.code 0} true;
    $p693 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(5, 1));
    goto corral_source_split_6505;

  corral_source_split_6505:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p693, $sub.i8(0, 2));
    goto corral_source_split_6506;

  corral_source_split_6506:
    assume {:verifier.code 0} true;
    goto $bb242;

  $bb242:
    assume {:verifier.code 0} true;
    $p694 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(6, 1));
    goto corral_source_split_6508;

  corral_source_split_6508:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p694, $sub.i8(0, 2));
    goto corral_source_split_6509;

  corral_source_split_6509:
    assume {:verifier.code 0} true;
    goto $bb243;

  $bb243:
    assume {:verifier.code 0} true;
    $p695 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(7, 1));
    goto corral_source_split_6511;

  corral_source_split_6511:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p695, $sub.i8(0, 2));
    goto corral_source_split_6512;

  corral_source_split_6512:
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb244:
    assume {:verifier.code 0} true;
    $p696 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(8, 1));
    goto corral_source_split_6514;

  corral_source_split_6514:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p696, $sub.i8(0, 2));
    goto corral_source_split_6515;

  corral_source_split_6515:
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb245:
    assume {:verifier.code 0} true;
    $p697 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(9, 1));
    goto corral_source_split_6517;

  corral_source_split_6517:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p697, $sub.i8(0, 2));
    goto corral_source_split_6518;

  corral_source_split_6518:
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb246:
    assume {:verifier.code 0} true;
    $p698 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(10, 1));
    goto corral_source_split_6520;

  corral_source_split_6520:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p698, $sub.i8(0, 2));
    goto corral_source_split_6521;

  corral_source_split_6521:
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb247:
    assume {:verifier.code 0} true;
    $p699 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(11, 1));
    goto corral_source_split_6523;

  corral_source_split_6523:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p699, $sub.i8(0, 2));
    goto corral_source_split_6524;

  corral_source_split_6524:
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb248:
    assume {:verifier.code 0} true;
    $p700 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(12, 1));
    goto corral_source_split_6526;

  corral_source_split_6526:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p700, $sub.i8(0, 2));
    goto corral_source_split_6527;

  corral_source_split_6527:
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb249:
    assume {:verifier.code 0} true;
    $p701 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(13, 1));
    goto corral_source_split_6529;

  corral_source_split_6529:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p701, $sub.i8(0, 2));
    goto corral_source_split_6530;

  corral_source_split_6530:
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb250:
    assume {:verifier.code 0} true;
    $p702 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(14, 1));
    goto corral_source_split_6532;

  corral_source_split_6532:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p702, $sub.i8(0, 2));
    goto corral_source_split_6533;

  corral_source_split_6533:
    assume {:verifier.code 0} true;
    goto $bb251;

  $bb251:
    assume {:verifier.code 0} true;
    $p703 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(15, 1));
    goto corral_source_split_6535;

  corral_source_split_6535:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p703, $sub.i8(0, 2));
    goto corral_source_split_6536;

  corral_source_split_6536:
    assume {:verifier.code 0} true;
    goto $bb252;

  $bb252:
    assume {:verifier.code 0} true;
    $p704 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(16, 1));
    goto corral_source_split_6538;

  corral_source_split_6538:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p704, $sub.i8(0, 2));
    goto corral_source_split_6539;

  corral_source_split_6539:
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb253:
    assume {:verifier.code 0} true;
    $p705 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(17, 1));
    goto corral_source_split_6541;

  corral_source_split_6541:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p705, $sub.i8(0, 2));
    goto corral_source_split_6542;

  corral_source_split_6542:
    assume {:verifier.code 0} true;
    goto $bb254;

  $bb254:
    assume {:verifier.code 0} true;
    $p706 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(18, 1));
    goto corral_source_split_6544;

  corral_source_split_6544:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p706, $sub.i8(0, 2));
    goto corral_source_split_6545;

  corral_source_split_6545:
    assume {:verifier.code 0} true;
    goto $bb255;

  $bb255:
    assume {:verifier.code 0} true;
    $p707 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(19, 1));
    goto corral_source_split_6547;

  corral_source_split_6547:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p707, $sub.i8(0, 2));
    goto corral_source_split_6548;

  corral_source_split_6548:
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb256:
    assume {:verifier.code 0} true;
    $p708 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(20, 1));
    goto corral_source_split_6550;

  corral_source_split_6550:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p708, $sub.i8(0, 2));
    goto corral_source_split_6551;

  corral_source_split_6551:
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb257:
    assume {:verifier.code 0} true;
    $p709 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(21, 1));
    goto corral_source_split_6553;

  corral_source_split_6553:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p709, $sub.i8(0, 2));
    goto corral_source_split_6554;

  corral_source_split_6554:
    assume {:verifier.code 0} true;
    goto $bb258;

  $bb258:
    assume {:verifier.code 0} true;
    $p710 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(22, 1));
    goto corral_source_split_6556;

  corral_source_split_6556:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p710, $sub.i8(0, 2));
    goto corral_source_split_6557;

  corral_source_split_6557:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb259:
    assume {:verifier.code 0} true;
    $p711 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(23, 1));
    goto corral_source_split_6559;

  corral_source_split_6559:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p711, $sub.i8(0, 2));
    goto corral_source_split_6560;

  corral_source_split_6560:
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb260:
    assume {:verifier.code 0} true;
    $p712 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(24, 1));
    goto corral_source_split_6562;

  corral_source_split_6562:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p712, $sub.i8(0, 2));
    goto corral_source_split_6563;

  corral_source_split_6563:
    assume {:verifier.code 0} true;
    goto $bb261;

  $bb261:
    assume {:verifier.code 0} true;
    $p713 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(25, 1));
    goto corral_source_split_6565;

  corral_source_split_6565:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p713, $sub.i8(0, 2));
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(0, 1));
    goto corral_source_split_5443;

  corral_source_split_5443:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p32, $sub.i8(0, 103));
    goto corral_source_split_5444;

  corral_source_split_5444:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(1, 1));
    goto corral_source_split_5445;

  corral_source_split_5445:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p33, 0);
    goto corral_source_split_5446;

  corral_source_split_5446:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(2, 1));
    goto corral_source_split_5447;

  corral_source_split_5447:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p34, 48);
    goto corral_source_split_5448;

  corral_source_split_5448:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(3, 1));
    goto corral_source_split_5449;

  corral_source_split_5449:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p35, $sub.i8(0, 128));
    goto corral_source_split_5450;

  corral_source_split_5450:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(4, 1));
    goto corral_source_split_5451;

  corral_source_split_5451:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p36, 0);
    goto corral_source_split_5452;

  corral_source_split_5452:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(5, 1));
    goto corral_source_split_5453;

  corral_source_split_5453:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p37, 48);
    goto corral_source_split_5454;

  corral_source_split_5454:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(6, 1));
    goto corral_source_split_5455;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p38, $sub.i8(0, 127));
    goto corral_source_split_5456;

  corral_source_split_5456:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(7, 1));
    goto corral_source_split_5457;

  corral_source_split_5457:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p39, 0);
    goto corral_source_split_5458;

  corral_source_split_5458:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(8, 1));
    goto corral_source_split_5459;

  corral_source_split_5459:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p40, 20);
    goto corral_source_split_5460;

  corral_source_split_5460:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(9, 1));
    goto corral_source_split_5461;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p41, $sub.i8(0, 1));
    goto corral_source_split_5462;

  corral_source_split_5462:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(10, 1));
    goto corral_source_split_5463;

  corral_source_split_5463:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p42, 0);
    goto corral_source_split_5464;

  corral_source_split_5464:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(11, 1));
    goto corral_source_split_5465;

  corral_source_split_5465:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p43, 36);
    goto corral_source_split_5466;

  corral_source_split_5466:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(12, 1));
    goto corral_source_split_5467;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p44, $sub.i8(0, 9));
    goto corral_source_split_5468;

  corral_source_split_5468:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(13, 1));
    goto corral_source_split_5469;

  corral_source_split_5469:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p45, 0);
    goto corral_source_split_5470;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p2);
    goto corral_source_split_5471;

  corral_source_split_5471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 811} $i47 := mxl111sf_i2c_send_data($p0, 0, $p46);
    call {:si_unique_call 812} {:cexpr "ret"} boogie_si_record_i32($i47);
    goto corral_source_split_5472;

  corral_source_split_5472:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_5473;

  corral_source_split_5473:
    assume {:verifier.code 0} true;
    $i49 := $load.i16($M.8, $p48);
    goto corral_source_split_5474;

  corral_source_split_5474:
    assume {:verifier.code 0} true;
    $i50 := $zext.i16.i32($i49);
    goto corral_source_split_5475;

  corral_source_split_5475:
    assume {:verifier.code 0} true;
    $i51 := $and.i32($i50, 1);
    goto corral_source_split_5476;

  corral_source_split_5476:
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i51, 0);
    goto corral_source_split_5477;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i52 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i210 := $i47;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    goto corral_source_split_5775;

  corral_source_split_5775:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_5776;

  corral_source_split_5776:
    assume {:verifier.code 0} true;
    $i212 := $load.i16($M.8, $p211);
    goto corral_source_split_5777;

  corral_source_split_5777:
    assume {:verifier.code 0} true;
    $i213 := $zext.i16.i32($i212);
    goto corral_source_split_5778;

  corral_source_split_5778:
    assume {:verifier.code 0} true;
    $i214 := $and.i32($i213, 1);
    goto corral_source_split_5779;

  corral_source_split_5779:
    assume {:verifier.code 0} true;
    $i215 := $ne.i32($i214, 0);
    goto corral_source_split_5780;

  corral_source_split_5780:
    assume {:verifier.code 0} true;
    assume {:branchcond $i215} true;
    goto $bb75, $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    assume !($i215 == 1);
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $i514 := $i210;
    goto $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    goto corral_source_split_6222;

  corral_source_split_6222:
    assume {:verifier.code 0} true;
    $i93 := $i514;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_5541;

  corral_source_split_5541:
    assume {:verifier.code 0} true;
    $p515 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(0, 1));
    goto corral_source_split_5542;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p515, $sub.i8(0, 103));
    goto corral_source_split_5543;

  corral_source_split_5543:
    assume {:verifier.code 0} true;
    $p516 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(1, 1));
    goto corral_source_split_5544;

  corral_source_split_5544:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p516, 0);
    goto corral_source_split_5545;

  corral_source_split_5545:
    assume {:verifier.code 0} true;
    $p517 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(5, 1));
    goto corral_source_split_5546;

  corral_source_split_5546:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p517, $sub.i8(0, 2));
    goto corral_source_split_5547;

  corral_source_split_5547:
    assume {:verifier.code 0} true;
    $p518 := $bitcast.ref.ref($p2);
    goto corral_source_split_5548;

  corral_source_split_5548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 819} vslice_dummy_var_193 := mxl111sf_i2c_send_data($p0, 0, $p518);
    goto corral_source_split_5549;

  corral_source_split_5549:
    assume {:verifier.code 0} true;
    $p520 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(2, 1));
    goto corral_source_split_5550;

  corral_source_split_5550:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p520, 0);
    goto corral_source_split_5551;

  corral_source_split_5551:
    assume {:verifier.code 0} true;
    $p521 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(3, 1));
    goto corral_source_split_5552;

  corral_source_split_5552:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p521, $sub.i8(0, 33));
    goto corral_source_split_5553;

  corral_source_split_5553:
    assume {:verifier.code 0} true;
    $p522 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(4, 1));
    goto corral_source_split_5554;

  corral_source_split_5554:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p522, 3);
    goto corral_source_split_5555;

  corral_source_split_5555:
    assume {:verifier.code 0} true;
    $p523 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(5, 1));
    goto corral_source_split_5556;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p523, 48);
    goto corral_source_split_5557;

  corral_source_split_5557:
    assume {:verifier.code 0} true;
    $p524 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(6, 1));
    goto corral_source_split_5558;

  corral_source_split_5558:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p524, 0);
    goto corral_source_split_5559;

  corral_source_split_5559:
    assume {:verifier.code 0} true;
    $p525 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(7, 1));
    goto corral_source_split_5560;

  corral_source_split_5560:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p525, 0);
    goto corral_source_split_5561;

  corral_source_split_5561:
    assume {:verifier.code 0} true;
    $p526 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(8, 1));
    goto corral_source_split_5562;

  corral_source_split_5562:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p526, $sub.i8(0, 2));
    goto corral_source_split_5563;

  corral_source_split_5563:
    assume {:verifier.code 0} true;
    $p527 := $bitcast.ref.ref($p2);
    goto corral_source_split_5564;

  corral_source_split_5564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 820} vslice_dummy_var_194 := mxl111sf_i2c_send_data($p0, 0, $p527);
    goto corral_source_split_5565;

  corral_source_split_5565:
    assume {:verifier.code 0} true;
    $p529 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(2, 1));
    goto corral_source_split_5566;

  corral_source_split_5566:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p529, 48);
    goto corral_source_split_5567;

  corral_source_split_5567:
    assume {:verifier.code 0} true;
    $p530 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(3, 1));
    goto corral_source_split_5568;

  corral_source_split_5568:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p530, $sub.i8(0, 127));
    goto corral_source_split_5569;

  corral_source_split_5569:
    assume {:verifier.code 0} true;
    $p531 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(4, 1));
    goto corral_source_split_5570;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p531, 0);
    goto corral_source_split_5571;

  corral_source_split_5571:
    assume {:verifier.code 0} true;
    $p532 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(5, 1));
    goto corral_source_split_5572;

  corral_source_split_5572:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p532, 48);
    goto corral_source_split_5573;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    $p533 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(6, 1));
    goto corral_source_split_5574;

  corral_source_split_5574:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p533, 0);
    goto corral_source_split_5575;

  corral_source_split_5575:
    assume {:verifier.code 0} true;
    $p534 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(7, 1));
    goto corral_source_split_5576;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p534, 0);
    goto corral_source_split_5577;

  corral_source_split_5577:
    assume {:verifier.code 0} true;
    $p535 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(8, 1));
    goto corral_source_split_5578;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p535, 48);
    goto corral_source_split_5579;

  corral_source_split_5579:
    assume {:verifier.code 0} true;
    $p536 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(9, 1));
    goto corral_source_split_5580;

  corral_source_split_5580:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p536, 0);
    goto corral_source_split_5581;

  corral_source_split_5581:
    assume {:verifier.code 0} true;
    $p537 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(10, 1));
    goto corral_source_split_5582;

  corral_source_split_5582:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p537, 0);
    goto corral_source_split_5583;

  corral_source_split_5583:
    assume {:verifier.code 0} true;
    $p538 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(11, 1));
    goto corral_source_split_5584;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p538, $sub.i8(0, 2));
    goto corral_source_split_5585;

  corral_source_split_5585:
    assume {:verifier.code 0} true;
    $p539 := $bitcast.ref.ref($p2);
    goto corral_source_split_5586;

  corral_source_split_5586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 821} vslice_dummy_var_195 := mxl111sf_i2c_send_data($p0, 0, $p539);
    goto corral_source_split_5587;

  corral_source_split_5587:
    assume {:verifier.code 0} true;
    $r := $i93;
    return;

  $bb75:
    assume $i215 == 1;
    goto corral_source_split_5782;

  corral_source_split_5782:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_5783;

  corral_source_split_5783:
    assume {:verifier.code 0} true;
    $i217 := $load.i16($M.8, $p216);
    goto corral_source_split_5784;

  corral_source_split_5784:
    assume {:verifier.code 0} true;
    $i218 := $zext.i16.i32($i217);
    goto corral_source_split_5785;

  corral_source_split_5785:
    assume {:verifier.code 0} true;
    $i219 := $ne.i32($i218, 0);
    goto corral_source_split_5786;

  corral_source_split_5786:
    assume {:verifier.code 0} true;
    assume {:branchcond $i219} true;
    goto $bb78, $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    assume !($i219 == 1);
    goto $bb77;

  $bb78:
    assume $i219 == 1;
    goto corral_source_split_5788;

  corral_source_split_5788:
    assume {:verifier.code 0} true;
    $i220 := $M.10;
    goto corral_source_split_5789;

  corral_source_split_5789:
    assume {:verifier.code 0} true;
    $i221 := $and.i32($i220, 4);
    goto corral_source_split_5790;

  corral_source_split_5790:
    assume {:verifier.code 0} true;
    $i222 := $ne.i32($i221, 0);
    goto corral_source_split_5791;

  corral_source_split_5791:
    assume {:verifier.code 0} true;
    assume {:branchcond $i222} true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i222 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    $p227 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(2, 1));
    goto corral_source_split_5799;

  corral_source_split_5799:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p227, 0);
    goto corral_source_split_5800;

  corral_source_split_5800:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(3, 1));
    goto corral_source_split_5801;

  corral_source_split_5801:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p228, $sub.i8(0, 33));
    goto corral_source_split_5802;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(4, 1));
    goto corral_source_split_5803;

  corral_source_split_5803:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p229, 3);
    goto corral_source_split_5804;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    $p230 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(5, 1));
    goto corral_source_split_5805;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p230, 20);
    goto corral_source_split_5806;

  corral_source_split_5806:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_5807;

  corral_source_split_5807:
    assume {:verifier.code 0} true;
    $i232 := $load.i16($M.8, $p231);
    goto corral_source_split_5808;

  corral_source_split_5808:
    assume {:verifier.code 0} true;
    $i233 := $trunc.i16.i8($i232);
    goto corral_source_split_5809;

  corral_source_split_5809:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(6, 1));
    goto corral_source_split_5810;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p234, $i233);
    goto corral_source_split_5811;

  corral_source_split_5811:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(7, 1));
    goto corral_source_split_5812;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p235, 0);
    goto corral_source_split_5813;

  corral_source_split_5813:
    assume {:verifier.code 0} true;
    $p236 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(8, 1));
    goto corral_source_split_5814;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p236, 8);
    goto corral_source_split_5815;

  corral_source_split_5815:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5816;

  corral_source_split_5816:
    assume {:verifier.code 0} true;
    $i238 := $load.i16($M.8, $p237);
    goto corral_source_split_5817;

  corral_source_split_5817:
    assume {:verifier.code 0} true;
    $i239 := $trunc.i16.i8($i238);
    goto corral_source_split_5818;

  corral_source_split_5818:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(9, 1));
    goto corral_source_split_5819;

  corral_source_split_5819:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p240, $i239);
    goto corral_source_split_5820;

  corral_source_split_5820:
    assume {:verifier.code 0} true;
    $p241 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(10, 1));
    goto corral_source_split_5821;

  corral_source_split_5821:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p241, 0);
    goto corral_source_split_5822;

  corral_source_split_5822:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(11, 1));
    goto corral_source_split_5823;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p242, $sub.i8(0, 2));
    goto corral_source_split_5824;

  corral_source_split_5824:
    assume {:verifier.code 0} true;
    $p243 := $bitcast.ref.ref($p2);
    goto corral_source_split_5825;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 839} $i244 := mxl111sf_i2c_send_data($p0, 0, $p243);
    call {:si_unique_call 840} {:cexpr "ret"} boogie_si_record_i32($i244);
    goto corral_source_split_5826;

  corral_source_split_5826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 841} $i245 := mxl111sf_i2c_check_status($p0);
    call {:si_unique_call 842} {:cexpr "tmp___2"} boogie_si_record_i8($i245);
    goto corral_source_split_5827;

  corral_source_split_5827:
    assume {:verifier.code 0} true;
    $i246 := $zext.i8.i32($i245);
    goto corral_source_split_5828;

  corral_source_split_5828:
    assume {:verifier.code 0} true;
    $i247 := $eq.i32($i246, 1);
    goto corral_source_split_5829;

  corral_source_split_5829:
    assume {:verifier.code 0} true;
    assume {:branchcond $i247} true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i247 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    $p258 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_5849;

  corral_source_split_5849:
    assume {:verifier.code 0} true;
    $i259 := $load.i16($M.8, $p258);
    goto corral_source_split_5850;

  corral_source_split_5850:
    assume {:verifier.code 0} true;
    $i260 := $zext.i16.i32($i259);
    goto corral_source_split_5851;

  corral_source_split_5851:
    assume {:verifier.code 0} true;
    $i261 := $udiv.i32($i260, 8);
    goto corral_source_split_5852;

  corral_source_split_5852:
    assume {:verifier.code 0} true;
    $i262 := $trunc.i32.i16($i261);
    call {:si_unique_call 844} {:cexpr "block_len"} boogie_si_record_i16($i262);
    goto corral_source_split_5853;

  corral_source_split_5853:
    assume {:verifier.code 0} true;
    $p263 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_5854;

  corral_source_split_5854:
    assume {:verifier.code 0} true;
    $i264 := $load.i16($M.8, $p263);
    goto corral_source_split_5855;

  corral_source_split_5855:
    assume {:verifier.code 0} true;
    $i265 := $zext.i16.i32($i264);
    goto corral_source_split_5856;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    $i266 := $and.i32($i265, 7);
    goto corral_source_split_5857;

  corral_source_split_5857:
    assume {:verifier.code 0} true;
    $i267 := $trunc.i32.i16($i266);
    call {:si_unique_call 845} {:cexpr "left_over_len"} boogie_si_record_i16($i267);
    goto corral_source_split_5858;

  corral_source_split_5858:
    assume {:verifier.code 0} true;
    $i268 := $M.10;
    goto corral_source_split_5859;

  corral_source_split_5859:
    assume {:verifier.code 0} true;
    $i269 := $and.i32($i268, 4);
    goto corral_source_split_5860;

  corral_source_split_5860:
    assume {:verifier.code 0} true;
    $i270 := $ne.i32($i269, 0);
    goto corral_source_split_5861;

  corral_source_split_5861:
    assume {:verifier.code 0} true;
    assume {:branchcond $i270} true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i270 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    $p274 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(0, 1));
    goto corral_source_split_5868;

  corral_source_split_5868:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p274, $sub.i8(0, 35));
    goto corral_source_split_5869;

  corral_source_split_5869:
    assume {:verifier.code 0} true;
    $p275 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(1, 1));
    goto corral_source_split_5870;

  corral_source_split_5870:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p275, 0);
    goto corral_source_split_5871;

  corral_source_split_5871:
    assume {:verifier.code 0} true;
    $i276 := $zext.i16.i32($i262);
    goto corral_source_split_5872;

  corral_source_split_5872:
    assume {:verifier.code 0} true;
    $i277 := $slt.i32(0, $i276);
    goto corral_source_split_5873;

  corral_source_split_5873:
    assume {:verifier.code 0} true;
    assume {:branchcond $i277} true;
    goto $bb92, $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    assume !($i277 == 1);
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    $i432 := $zext.i16.i32($i267);
    goto corral_source_split_6090;

  corral_source_split_6090:
    assume {:verifier.code 0} true;
    $i433 := $ne.i32($i432, 0);
    goto corral_source_split_6091;

  corral_source_split_6091:
    assume {:verifier.code 0} true;
    assume {:branchcond $i433} true;
    goto $bb145, $bb146;

  $bb146:
    assume !($i433 == 1);
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb176:
    assume {:verifier.code 0} true;
    $p503 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(0, 1));
    goto corral_source_split_6201;

  corral_source_split_6201:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p503, $sub.i8(0, 103));
    goto corral_source_split_6202;

  corral_source_split_6202:
    assume {:verifier.code 0} true;
    $p504 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(1, 1));
    goto corral_source_split_6203;

  corral_source_split_6203:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p504, 0);
    goto corral_source_split_6204;

  corral_source_split_6204:
    assume {:verifier.code 0} true;
    $p505 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(2, 1));
    goto corral_source_split_6205;

  corral_source_split_6205:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p505, 0);
    goto corral_source_split_6206;

  corral_source_split_6206:
    assume {:verifier.code 0} true;
    $p506 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(3, 1));
    goto corral_source_split_6207;

  corral_source_split_6207:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p506, 23);
    goto corral_source_split_6208;

  corral_source_split_6208:
    assume {:verifier.code 0} true;
    $p507 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(4, 1));
    goto corral_source_split_6209;

  corral_source_split_6209:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p507, 3);
    goto corral_source_split_6210;

  corral_source_split_6210:
    assume {:verifier.code 0} true;
    $p508 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(5, 1));
    goto corral_source_split_6211;

  corral_source_split_6211:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p508, $sub.i8(0, 2));
    goto corral_source_split_6212;

  corral_source_split_6212:
    assume {:verifier.code 0} true;
    $p509 := $bitcast.ref.ref($p2);
    goto corral_source_split_6213;

  corral_source_split_6213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 870} $i510 := mxl111sf_i2c_send_data($p0, 0, $p509);
    call {:si_unique_call 871} {:cexpr "ret"} boogie_si_record_i32($i510);
    goto corral_source_split_6214;

  corral_source_split_6214:
    assume {:verifier.code 0} true;
    $p511 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(2, 1));
    goto corral_source_split_6215;

  corral_source_split_6215:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p511, 0);
    goto corral_source_split_6216;

  corral_source_split_6216:
    assume {:verifier.code 0} true;
    $p512 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(3, 1));
    goto corral_source_split_6217;

  corral_source_split_6217:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p512, $sub.i8(0, 57));
    goto corral_source_split_6218;

  corral_source_split_6218:
    assume {:verifier.code 0} true;
    $p513 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(4, 1));
    goto corral_source_split_6219;

  corral_source_split_6219:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p513, 3);
    goto corral_source_split_6220;

  corral_source_split_6220:
    assume {:verifier.code 0} true;
    $i514 := $i510;
    goto $bb177;

  $bb145:
    assume $i433 == 1;
    goto corral_source_split_6093;

  corral_source_split_6093:
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    $p434 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(0, 1));
    goto corral_source_split_6095;

  corral_source_split_6095:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p434, $sub.i8(0, 2));
    goto corral_source_split_6096;

  corral_source_split_6096:
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    $p541 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(1, 1));
    goto corral_source_split_6098;

  corral_source_split_6098:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p541, $sub.i8(0, 2));
    goto corral_source_split_6099;

  corral_source_split_6099:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    $p542 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(2, 1));
    goto corral_source_split_6224;

  corral_source_split_6224:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p542, $sub.i8(0, 2));
    goto corral_source_split_6225;

  corral_source_split_6225:
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb179:
    assume {:verifier.code 0} true;
    $p543 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(3, 1));
    goto corral_source_split_6227;

  corral_source_split_6227:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p543, $sub.i8(0, 2));
    goto corral_source_split_6228;

  corral_source_split_6228:
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    $p544 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(4, 1));
    goto corral_source_split_6230;

  corral_source_split_6230:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p544, $sub.i8(0, 2));
    goto corral_source_split_6231;

  corral_source_split_6231:
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb181:
    assume {:verifier.code 0} true;
    $p545 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(5, 1));
    goto corral_source_split_6233;

  corral_source_split_6233:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p545, $sub.i8(0, 2));
    goto corral_source_split_6234;

  corral_source_split_6234:
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb182:
    assume {:verifier.code 0} true;
    $p546 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(6, 1));
    goto corral_source_split_6236;

  corral_source_split_6236:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p546, $sub.i8(0, 2));
    goto corral_source_split_6237;

  corral_source_split_6237:
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb183:
    assume {:verifier.code 0} true;
    $p547 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(7, 1));
    goto corral_source_split_6239;

  corral_source_split_6239:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p547, $sub.i8(0, 2));
    goto corral_source_split_6240;

  corral_source_split_6240:
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    $p548 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(8, 1));
    goto corral_source_split_6242;

  corral_source_split_6242:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p548, $sub.i8(0, 2));
    goto corral_source_split_6243;

  corral_source_split_6243:
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    $p549 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(9, 1));
    goto corral_source_split_6245;

  corral_source_split_6245:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p549, $sub.i8(0, 2));
    goto corral_source_split_6246;

  corral_source_split_6246:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    $p550 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(10, 1));
    goto corral_source_split_6248;

  corral_source_split_6248:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p550, $sub.i8(0, 2));
    goto corral_source_split_6249;

  corral_source_split_6249:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    $p551 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(11, 1));
    goto corral_source_split_6251;

  corral_source_split_6251:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p551, $sub.i8(0, 2));
    goto corral_source_split_6252;

  corral_source_split_6252:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    $p552 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(12, 1));
    goto corral_source_split_6254;

  corral_source_split_6254:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p552, $sub.i8(0, 2));
    goto corral_source_split_6255;

  corral_source_split_6255:
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb189:
    assume {:verifier.code 0} true;
    $p553 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(13, 1));
    goto corral_source_split_6257;

  corral_source_split_6257:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p553, $sub.i8(0, 2));
    goto corral_source_split_6258;

  corral_source_split_6258:
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb190:
    assume {:verifier.code 0} true;
    $p554 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(14, 1));
    goto corral_source_split_6260;

  corral_source_split_6260:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p554, $sub.i8(0, 2));
    goto corral_source_split_6261;

  corral_source_split_6261:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb191:
    assume {:verifier.code 0} true;
    $p555 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(15, 1));
    goto corral_source_split_6263;

  corral_source_split_6263:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p555, $sub.i8(0, 2));
    goto corral_source_split_6264;

  corral_source_split_6264:
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb192:
    assume {:verifier.code 0} true;
    $p556 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(16, 1));
    goto corral_source_split_6266;

  corral_source_split_6266:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p556, $sub.i8(0, 2));
    goto corral_source_split_6267;

  corral_source_split_6267:
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb193:
    assume {:verifier.code 0} true;
    $p557 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(17, 1));
    goto corral_source_split_6269;

  corral_source_split_6269:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p557, $sub.i8(0, 2));
    goto corral_source_split_6270;

  corral_source_split_6270:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb194:
    assume {:verifier.code 0} true;
    $p558 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(18, 1));
    goto corral_source_split_6272;

  corral_source_split_6272:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p558, $sub.i8(0, 2));
    goto corral_source_split_6273;

  corral_source_split_6273:
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb195:
    assume {:verifier.code 0} true;
    $p559 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(19, 1));
    goto corral_source_split_6275;

  corral_source_split_6275:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p559, $sub.i8(0, 2));
    goto corral_source_split_6276;

  corral_source_split_6276:
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb196:
    assume {:verifier.code 0} true;
    $p560 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(20, 1));
    goto corral_source_split_6278;

  corral_source_split_6278:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p560, $sub.i8(0, 2));
    goto corral_source_split_6279;

  corral_source_split_6279:
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb197:
    assume {:verifier.code 0} true;
    $p561 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(21, 1));
    goto corral_source_split_6281;

  corral_source_split_6281:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p561, $sub.i8(0, 2));
    goto corral_source_split_6282;

  corral_source_split_6282:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    $p562 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(22, 1));
    goto corral_source_split_6284;

  corral_source_split_6284:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p562, $sub.i8(0, 2));
    goto corral_source_split_6285;

  corral_source_split_6285:
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb199:
    assume {:verifier.code 0} true;
    $p563 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(23, 1));
    goto corral_source_split_6287;

  corral_source_split_6287:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p563, $sub.i8(0, 2));
    goto corral_source_split_6288;

  corral_source_split_6288:
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb200:
    assume {:verifier.code 0} true;
    $p564 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(24, 1));
    goto corral_source_split_6290;

  corral_source_split_6290:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p564, $sub.i8(0, 2));
    goto corral_source_split_6291;

  corral_source_split_6291:
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb201:
    assume {:verifier.code 0} true;
    $p565 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(25, 1));
    goto corral_source_split_6293;

  corral_source_split_6293:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p565, $sub.i8(0, 2));
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    $p435 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(0, 1));
    goto corral_source_split_6101;

  corral_source_split_6101:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p435, $sub.i8(0, 35));
    goto corral_source_split_6102;

  corral_source_split_6102:
    assume {:verifier.code 0} true;
    $p436 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(1, 1));
    goto corral_source_split_6103;

  corral_source_split_6103:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p436, 0);
    goto corral_source_split_6104;

  corral_source_split_6104:
    assume {:verifier.code 0} true;
    $i437 := $zext.i16.i32($i267);
    goto corral_source_split_6105;

  corral_source_split_6105:
    assume {:verifier.code 0} true;
    $i438 := $slt.i32(0, $i437);
    goto corral_source_split_6106;

  corral_source_split_6106:
    assume {:verifier.code 0} true;
    assume {:branchcond $i438} true;
    goto $bb151, $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    assume !($i438 == 1);
    goto $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    $p454 := $bitcast.ref.ref($p2);
    goto corral_source_split_6132;

  corral_source_split_6132:
    assume {:verifier.code 0} true;
    $p455 := $bitcast.ref.ref($p3);
    goto corral_source_split_6133;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 863} $i456 := mxl111sf_i2c_get_data($p0, 0, $p454, $p455);
    call {:si_unique_call 864} {:cexpr "ret"} boogie_si_record_i32($i456);
    goto corral_source_split_6134;

  corral_source_split_6134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 865} $i457 := mxl111sf_i2c_check_status($p0);
    call {:si_unique_call 866} {:cexpr "tmp___5"} boogie_si_record_i8($i457);
    goto corral_source_split_6135;

  corral_source_split_6135:
    assume {:verifier.code 0} true;
    $i458 := $zext.i8.i32($i457);
    goto corral_source_split_6136;

  corral_source_split_6136:
    assume {:verifier.code 0} true;
    $i459 := $eq.i32($i458, 1);
    goto corral_source_split_6137;

  corral_source_split_6137:
    assume {:verifier.code 0} true;
    assume {:branchcond $i459} true;
    goto $bb159, $bb160;

  $bb160:
    assume !($i459 == 1);
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    $i470 := $zext.i16.i32($i267);
    goto corral_source_split_6157;

  corral_source_split_6157:
    assume {:verifier.code 0} true;
    $i471 := $slt.i32(0, $i470);
    goto corral_source_split_6158;

  corral_source_split_6158:
    assume {:verifier.code 0} true;
    assume {:branchcond $i471} true;
    goto $bb165, $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    assume !($i471 == 1);
    goto $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb165:
    assume $i471 == 1;
    goto corral_source_split_6160;

  corral_source_split_6160:
    assume {:verifier.code 0} true;
    $i472 := 0;
    goto $bb168;

  $bb168:
    call $i473, $i474, $i475, $p476, $i477, $p478, $p479, $i480, $i481, $i482, $i483, $p484, $i485, $i486, $i487, $i488, $i489, $i490, $p491, $i492, $i493, $i494, $i495, $i496, $p497, $i498, $i499, $i501, $i502, $i472, vslice_dummy_var_209 := mxl111sf_i2c_hw_xfer_msg_loop_$bb168($p1, $p3, $i262, $i470, $i473, $i474, $i475, $p476, $i477, $p478, $p479, $i480, $i481, $i482, $i483, $p484, $i485, $i486, $i487, $i488, $i489, $i490, $p491, $i492, $i493, $i494, $i495, $i496, $p497, $i498, $i499, $i501, $i502, $i472, vslice_dummy_var_209);
    goto $bb168_last;

  corral_source_split_6162:
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    $i473 := $mul.i32($i472, 3);
    goto corral_source_split_6164;

  corral_source_split_6164:
    assume {:verifier.code 0} true;
    $i474 := $add.i32($i473, 1);
    goto corral_source_split_6165;

  corral_source_split_6165:
    assume {:verifier.code 0} true;
    $i475 := $sext.i32.i64($i474);
    goto corral_source_split_6166;

  corral_source_split_6166:
    assume {:verifier.code 0} true;
    $p476 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref($i475, 1));
    goto corral_source_split_6167;

  corral_source_split_6167:
    assume {:verifier.code 0} true;
    $i477 := $load.i8($M.26, $p476);
    goto corral_source_split_6168;

  corral_source_split_6168:
    assume {:verifier.code 0} true;
    $p478 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6169;

  corral_source_split_6169:
    assume {:verifier.code 0} true;
    $p479 := $load.ref($M.8, $p478);
    goto corral_source_split_6170;

  corral_source_split_6170:
    assume {:verifier.code 0} true;
    $i480 := $zext.i16.i32($i262);
    goto corral_source_split_6171;

  corral_source_split_6171:
    assume {:verifier.code 0} true;
    $i481 := $mul.i32($i480, 8);
    goto corral_source_split_6172;

  corral_source_split_6172:
    assume {:verifier.code 0} true;
    $i482 := $add.i32($i481, $i472);
    goto corral_source_split_6173;

  corral_source_split_6173:
    assume {:verifier.code 0} true;
    $i483 := $sext.i32.i64($i482);
    goto corral_source_split_6174;

  corral_source_split_6174:
    assume {:verifier.code 0} true;
    $p484 := $add.ref($p479, $mul.ref($i483, 1));
    goto corral_source_split_6175;

  corral_source_split_6175:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p484, $i477);
    goto corral_source_split_6176;

  corral_source_split_6176:
    assume {:verifier.code 0} true;
    $i485 := $M.10;
    goto corral_source_split_6177;

  corral_source_split_6177:
    assume {:verifier.code 0} true;
    $i486 := $and.i32($i485, 4);
    goto corral_source_split_6178;

  corral_source_split_6178:
    assume {:verifier.code 0} true;
    $i487 := $ne.i32($i486, 0);
    goto corral_source_split_6179;

  corral_source_split_6179:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb170, $bb171;

  $bb171:
    assume !($i487 == 1);
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb172:
    assume {:verifier.code 0} true;
    $i501 := $add.i32($i472, 1);
    call {:si_unique_call 869} {:cexpr "i"} boogie_si_record_i32($i501);
    goto corral_source_split_6196;

  corral_source_split_6196:
    assume {:verifier.code 0} true;
    $i502 := $slt.i32($i501, $i470);
    goto corral_source_split_6197;

  corral_source_split_6197:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb173, $bb174;

  $bb174:
    assume !($i502 == 1);
    goto corral_source_split_6199;

  corral_source_split_6199:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb173:
    assume $i502 == 1;
    assume {:verifier.code 0} true;
    $i472 := $i501;
    goto $bb173_dummy;

  $bb170:
    assume $i487 == 1;
    goto corral_source_split_6181;

  corral_source_split_6181:
    assume {:verifier.code 0} true;
    $i488 := $mul.i32($i472, 3);
    goto corral_source_split_6182;

  corral_source_split_6182:
    assume {:verifier.code 0} true;
    $i489 := $add.i32($i488, 1);
    goto corral_source_split_6183;

  corral_source_split_6183:
    assume {:verifier.code 0} true;
    $i490 := $sext.i32.i64($i489);
    goto corral_source_split_6184;

  corral_source_split_6184:
    assume {:verifier.code 0} true;
    $p491 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref($i490, 1));
    goto corral_source_split_6185;

  corral_source_split_6185:
    assume {:verifier.code 0} true;
    $i492 := $load.i8($M.26, $p491);
    goto corral_source_split_6186;

  corral_source_split_6186:
    assume {:verifier.code 0} true;
    $i493 := $zext.i8.i32($i492);
    goto corral_source_split_6187;

  corral_source_split_6187:
    assume {:verifier.code 0} true;
    $i494 := $mul.i32($i472, 3);
    goto corral_source_split_6188;

  corral_source_split_6188:
    assume {:verifier.code 0} true;
    $i495 := $add.i32($i494, 2);
    goto corral_source_split_6189;

  corral_source_split_6189:
    assume {:verifier.code 0} true;
    $i496 := $sext.i32.i64($i495);
    goto corral_source_split_6190;

  corral_source_split_6190:
    assume {:verifier.code 0} true;
    $p497 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref($i496, 1));
    goto corral_source_split_6191;

  corral_source_split_6191:
    assume {:verifier.code 0} true;
    $i498 := $load.i8($M.26, $p497);
    goto corral_source_split_6192;

  corral_source_split_6192:
    assume {:verifier.code 0} true;
    $i499 := $zext.i8.i32($i498);
    goto corral_source_split_6193;

  corral_source_split_6193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 868} vslice_dummy_var_209 := printk.ref.ref.i32.i32(.str.132, .str.124, $i493, $i499);
    goto corral_source_split_6194;

  corral_source_split_6194:
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb159:
    assume $i459 == 1;
    goto corral_source_split_6139;

  corral_source_split_6139:
    assume {:verifier.code 0} true;
    $i460 := $M.10;
    goto corral_source_split_6140;

  corral_source_split_6140:
    assume {:verifier.code 0} true;
    $i461 := $and.i32($i460, 4);
    goto corral_source_split_6141;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    $i462 := $ne.i32($i461, 0);
    goto corral_source_split_6142;

  corral_source_split_6142:
    assume {:verifier.code 0} true;
    assume {:branchcond $i462} true;
    goto $bb161, $bb162;

  $bb162:
    assume !($i462 == 1);
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    $p467 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(2, 1));
    goto corral_source_split_6150;

  corral_source_split_6150:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p467, 0);
    goto corral_source_split_6151;

  corral_source_split_6151:
    assume {:verifier.code 0} true;
    $p468 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(3, 1));
    goto corral_source_split_6152;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p468, $sub.i8(0, 57));
    goto corral_source_split_6153;

  corral_source_split_6153:
    assume {:verifier.code 0} true;
    $p469 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(4, 1));
    goto corral_source_split_6154;

  corral_source_split_6154:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p469, 3);
    goto corral_source_split_6155;

  corral_source_split_6155:
    assume {:verifier.code 0} true;
    $i93 := $sub.i32(0, 5);
    goto $bb27;

  $bb161:
    assume $i462 == 1;
    goto corral_source_split_6144;

  corral_source_split_6144:
    assume {:verifier.code 0} true;
    $p463 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6145;

  corral_source_split_6145:
    assume {:verifier.code 0} true;
    $i464 := $load.i16($M.8, $p463);
    goto corral_source_split_6146;

  corral_source_split_6146:
    assume {:verifier.code 0} true;
    $i465 := $zext.i16.i32($i464);
    goto corral_source_split_6147;

  corral_source_split_6147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 867} vslice_dummy_var_208 := printk.ref.ref.i32(.str.130, .str.124, $i465);
    goto corral_source_split_6148;

  corral_source_split_6148:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb151:
    assume $i438 == 1;
    goto corral_source_split_6108;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    $i439 := 0;
    goto $bb154;

  $bb154:
    call $i440, $i441, $i442, $p443, $i444, $i445, $i446, $p447, $i448, $i449, $i450, $p451, $i452, $i453, $i439 := mxl111sf_i2c_hw_xfer_msg_loop_$bb154($p2, $i437, $i440, $i441, $i442, $p443, $i444, $i445, $i446, $p447, $i448, $i449, $i450, $p451, $i452, $i453, $i439);
    goto $bb154_last;

  corral_source_split_6110:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb155:
    assume {:verifier.code 0} true;
    $i440 := $mul.i32($i439, 3);
    goto corral_source_split_6112;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    $i441 := $add.i32($i440, 2);
    goto corral_source_split_6113;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    $i442 := $sext.i32.i64($i441);
    goto corral_source_split_6114;

  corral_source_split_6114:
    assume {:verifier.code 0} true;
    $p443 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref($i442, 1));
    goto corral_source_split_6115;

  corral_source_split_6115:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p443, 12);
    goto corral_source_split_6116;

  corral_source_split_6116:
    assume {:verifier.code 0} true;
    $i444 := $add.i32($i439, 1);
    goto corral_source_split_6117;

  corral_source_split_6117:
    assume {:verifier.code 0} true;
    $i445 := $mul.i32($i444, 3);
    goto corral_source_split_6118;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    $i446 := $sext.i32.i64($i445);
    goto corral_source_split_6119;

  corral_source_split_6119:
    assume {:verifier.code 0} true;
    $p447 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref($i446, 1));
    goto corral_source_split_6120;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p447, 0);
    goto corral_source_split_6121;

  corral_source_split_6121:
    assume {:verifier.code 0} true;
    $i448 := $mul.i32($i439, 3);
    goto corral_source_split_6122;

  corral_source_split_6122:
    assume {:verifier.code 0} true;
    $i449 := $add.i32($i448, 4);
    goto corral_source_split_6123;

  corral_source_split_6123:
    assume {:verifier.code 0} true;
    $i450 := $sext.i32.i64($i449);
    goto corral_source_split_6124;

  corral_source_split_6124:
    assume {:verifier.code 0} true;
    $p451 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref($i450, 1));
    goto corral_source_split_6125;

  corral_source_split_6125:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p451, 0);
    goto corral_source_split_6126;

  corral_source_split_6126:
    assume {:verifier.code 0} true;
    $i452 := $add.i32($i439, 1);
    call {:si_unique_call 862} {:cexpr "i"} boogie_si_record_i32($i452);
    goto corral_source_split_6127;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    $i453 := $slt.i32($i452, $i437);
    goto corral_source_split_6128;

  corral_source_split_6128:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb156, $bb157;

  $bb157:
    assume !($i453 == 1);
    goto corral_source_split_6130;

  corral_source_split_6130:
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb156:
    assume $i453 == 1;
    assume {:verifier.code 0} true;
    $i439 := $i452;
    goto $bb156_dummy;

  $bb92:
    assume $i277 == 1;
    goto corral_source_split_5875;

  corral_source_split_5875:
    assume {:verifier.code 0} true;
    $i278 := 0;
    goto $bb95;

  $bb95:
    call $p279, $p280, $p281, $p282, $p283, $i284, $i285, $i286, $i287, $i299, $i300, $i301, $p302, $i303, $i304, $p305, $i306, $p307, $i308, $i309, $i310, $i311, $i312, $i313, $i314, $i316, $i317, $i318, $p319, $i320, $p321, $p322, $i323, $i324, $i325, $i326, $p327, $i328, $i329, $i330, $i331, $i332, $p333, $i334, $i335, $i336, $i337, $i338, $i339, $i340, $i341, $i343, $p344, $i345, $p346, $p347, $i348, $i349, $i350, $i351, $i352, $i353, $p354, $i355, $i356, $i357, $p358, $p359, $i360, $i361, $i362, $i363, $i364, $p365, $i366, $i367, $i368, $i369, $i370, $i371, $i373, $i374, $i375, $p376, $p377, $i378, $i379, $i380, $i381, $i382, $i383, $p384, $i385, $i386, $i387, $p388, $i389, $i390, $i392, $i393, $i342, $i395, $i396, $i397, $i400, $i401, $i402, $p403, $i404, $p405, $p406, $i407, $i408, $i409, $i410, $p411, $i399, $i413, $i414, $i415, $p416, $i417, $p418, $p419, $i420, $i421, $i422, $i423, $p424, $i412, $i425, $i426, $i298, $i394, $i427, $i428, $i429, $i430, $i431, $i278, $p566, $p567, $p568, $p569, $p570, $p571, $p572, $p573, $p574, $p575, $p576, $p577, $p578, $p579, $p580, $p581, $p582, $p583, $p584, $p585, $p586, vslice_dummy_var_204, vslice_dummy_var_205, vslice_dummy_var_206, vslice_dummy_var_207 := mxl111sf_i2c_hw_xfer_msg_loop_$bb95($p0, $p1, $p2, $p3, $p4, $p5, $i276, $p279, $p280, $p281, $p282, $p283, $i284, $i285, $i286, $i287, $i299, $i300, $i301, $p302, $i303, $i304, $p305, $i306, $p307, $i308, $i309, $i310, $i311, $i312, $i313, $i314, $i316, $i317, $i318, $p319, $i320, $p321, $p322, $i323, $i324, $i325, $i326, $p327, $i328, $i329, $i330, $i331, $i332, $p333, $i334, $i335, $i336, $i337, $i338, $i339, $i340, $i341, $i343, $p344, $i345, $p346, $p347, $i348, $i349, $i350, $i351, $i352, $i353, $p354, $i355, $i356, $i357, $p358, $p359, $i360, $i361, $i362, $i363, $i364, $p365, $i366, $i367, $i368, $i369, $i370, $i371, $i373, $i374, $i375, $p376, $p377, $i378, $i379, $i380, $i381, $i382, $i383, $p384, $i385, $i386, $i387, $p388, $i389, $i390, $i392, $i393, $i342, $i395, $i396, $i397, $i400, $i401, $i402, $p403, $i404, $p405, $p406, $i407, $i408, $i409, $i410, $p411, $i399, $i413, $i414, $i415, $p416, $i417, $p418, $p419, $i420, $i421, $i422, $i423, $p424, $i412, $i425, $i426, $i298, $i394, $i427, $i428, $i429, $i430, $i431, $i278, $p566, $p567, $p568, $p569, $p570, $p571, $p572, $p573, $p574, $p575, $p576, $p577, $p578, $p579, $p580, $p581, $p582, $p583, $p584, $p585, $p586, vslice_dummy_var_204, vslice_dummy_var_205, vslice_dummy_var_206, vslice_dummy_var_207);
    goto $bb95_last;

  corral_source_split_5877:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    $p279 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(2, 1));
    goto corral_source_split_5879;

  corral_source_split_5879:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p279, 12);
    goto corral_source_split_5880;

  corral_source_split_5880:
    assume {:verifier.code 0} true;
    $p280 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(3, 1));
    goto corral_source_split_5881;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p280, 0);
    goto corral_source_split_5882;

  corral_source_split_5882:
    assume {:verifier.code 0} true;
    $p281 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(4, 1));
    goto corral_source_split_5883;

  corral_source_split_5883:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p281, 0);
    goto corral_source_split_5884;

  corral_source_split_5884:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    $p566 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(5, 1));
    goto corral_source_split_5886;

  corral_source_split_5886:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p566, 12);
    goto corral_source_split_5887;

  corral_source_split_5887:
    assume {:verifier.code 0} true;
    $p567 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(6, 1));
    goto corral_source_split_5888;

  corral_source_split_5888:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p567, 0);
    goto corral_source_split_5889;

  corral_source_split_5889:
    assume {:verifier.code 0} true;
    $p568 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(7, 1));
    goto corral_source_split_5890;

  corral_source_split_5890:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p568, 0);
    goto corral_source_split_5891;

  corral_source_split_5891:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb202:
    assume {:verifier.code 0} true;
    $p569 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(8, 1));
    goto corral_source_split_6295;

  corral_source_split_6295:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p569, 12);
    goto corral_source_split_6296;

  corral_source_split_6296:
    assume {:verifier.code 0} true;
    $p570 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(9, 1));
    goto corral_source_split_6297;

  corral_source_split_6297:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p570, 0);
    goto corral_source_split_6298;

  corral_source_split_6298:
    assume {:verifier.code 0} true;
    $p571 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(10, 1));
    goto corral_source_split_6299;

  corral_source_split_6299:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p571, 0);
    goto corral_source_split_6300;

  corral_source_split_6300:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb203:
    assume {:verifier.code 0} true;
    $p572 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(11, 1));
    goto corral_source_split_6302;

  corral_source_split_6302:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p572, 12);
    goto corral_source_split_6303;

  corral_source_split_6303:
    assume {:verifier.code 0} true;
    $p573 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(12, 1));
    goto corral_source_split_6304;

  corral_source_split_6304:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p573, 0);
    goto corral_source_split_6305;

  corral_source_split_6305:
    assume {:verifier.code 0} true;
    $p574 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(13, 1));
    goto corral_source_split_6306;

  corral_source_split_6306:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p574, 0);
    goto corral_source_split_6307;

  corral_source_split_6307:
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb204:
    assume {:verifier.code 0} true;
    $p575 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(14, 1));
    goto corral_source_split_6309;

  corral_source_split_6309:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p575, 12);
    goto corral_source_split_6310;

  corral_source_split_6310:
    assume {:verifier.code 0} true;
    $p576 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(15, 1));
    goto corral_source_split_6311;

  corral_source_split_6311:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p576, 0);
    goto corral_source_split_6312;

  corral_source_split_6312:
    assume {:verifier.code 0} true;
    $p577 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(16, 1));
    goto corral_source_split_6313;

  corral_source_split_6313:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p577, 0);
    goto corral_source_split_6314;

  corral_source_split_6314:
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb205:
    assume {:verifier.code 0} true;
    $p578 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(17, 1));
    goto corral_source_split_6316;

  corral_source_split_6316:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p578, 12);
    goto corral_source_split_6317;

  corral_source_split_6317:
    assume {:verifier.code 0} true;
    $p579 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(18, 1));
    goto corral_source_split_6318;

  corral_source_split_6318:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p579, 0);
    goto corral_source_split_6319;

  corral_source_split_6319:
    assume {:verifier.code 0} true;
    $p580 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(19, 1));
    goto corral_source_split_6320;

  corral_source_split_6320:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p580, 0);
    goto corral_source_split_6321;

  corral_source_split_6321:
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb206:
    assume {:verifier.code 0} true;
    $p581 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(20, 1));
    goto corral_source_split_6323;

  corral_source_split_6323:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p581, 12);
    goto corral_source_split_6324;

  corral_source_split_6324:
    assume {:verifier.code 0} true;
    $p582 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(21, 1));
    goto corral_source_split_6325;

  corral_source_split_6325:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p582, 0);
    goto corral_source_split_6326;

  corral_source_split_6326:
    assume {:verifier.code 0} true;
    $p583 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(22, 1));
    goto corral_source_split_6327;

  corral_source_split_6327:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p583, 0);
    goto corral_source_split_6328;

  corral_source_split_6328:
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb207:
    assume {:verifier.code 0} true;
    $p584 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(23, 1));
    goto corral_source_split_6330;

  corral_source_split_6330:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p584, 12);
    goto corral_source_split_6331;

  corral_source_split_6331:
    assume {:verifier.code 0} true;
    $p585 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(24, 1));
    goto corral_source_split_6332;

  corral_source_split_6332:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p585, 0);
    goto corral_source_split_6333;

  corral_source_split_6333:
    assume {:verifier.code 0} true;
    $p586 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(25, 1));
    goto corral_source_split_6334;

  corral_source_split_6334:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p586, 0);
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    $p282 := $bitcast.ref.ref($p2);
    goto corral_source_split_5893;

  corral_source_split_5893:
    assume {:verifier.code 0} true;
    $p283 := $bitcast.ref.ref($p3);
    goto corral_source_split_5894;

  corral_source_split_5894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 847} $i284 := mxl111sf_i2c_get_data($p0, 0, $p282, $p283);
    call {:si_unique_call 848} {:cexpr "ret"} boogie_si_record_i32($i284);
    goto corral_source_split_5895;

  corral_source_split_5895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 849} $i285 := mxl111sf_i2c_check_status($p0);
    call {:si_unique_call 850} {:cexpr "tmp___3"} boogie_si_record_i8($i285);
    goto corral_source_split_5896;

  corral_source_split_5896:
    assume {:verifier.code 0} true;
    $i286 := $zext.i8.i32($i285);
    goto corral_source_split_5897;

  corral_source_split_5897:
    assume {:verifier.code 0} true;
    $i287 := $eq.i32($i286, 1);
    goto corral_source_split_5898;

  corral_source_split_5898:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i287 == 1);
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    $i298 := 0;
    goto $bb107;

  $bb107:
    call $i299, $i300, $i301, $p302, $i303, $i304, $p305, $i306, $p307, $i308, $i309, $i310, $i311, $i312, $i313, $i314, $i316, $i317, $i318, $p319, $i320, $p321, $p322, $i323, $i324, $i325, $i326, $p327, $i328, $i329, $i330, $i331, $i332, $p333, $i334, $i335, $i336, $i337, $i338, $i395, $i396, $i397, $i400, $i401, $i402, $p403, $i404, $p405, $p406, $i407, $i408, $i409, $i410, $p411, $i399, $i413, $i414, $i415, $p416, $i417, $p418, $p419, $i420, $i421, $i422, $i423, $p424, $i412, $i425, $i426, $i298, vslice_dummy_var_204, vslice_dummy_var_207 := mxl111sf_i2c_hw_xfer_msg_loop_$bb107($p0, $p1, $p3, $p4, $p5, $i299, $i300, $i301, $p302, $i303, $i304, $p305, $i306, $p307, $i308, $i309, $i310, $i311, $i312, $i313, $i314, $i316, $i317, $i318, $p319, $i320, $p321, $p322, $i323, $i324, $i325, $i326, $p327, $i328, $i329, $i330, $i331, $i332, $p333, $i334, $i335, $i336, $i337, $i338, $i395, $i396, $i397, $i400, $i401, $i402, $p403, $i404, $p405, $p406, $i407, $i408, $i409, $i410, $p411, $i399, $i413, $i414, $i415, $p416, $i417, $p418, $p419, $i420, $i421, $i422, $i423, $p424, $i412, $i425, $i426, $i298, $i278, vslice_dummy_var_204, vslice_dummy_var_207);
    goto $bb107_last;

  corral_source_split_5918:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    $i299 := $mul.i32($i298, 3);
    goto corral_source_split_5920;

  corral_source_split_5920:
    assume {:verifier.code 0} true;
    $i300 := $add.i32($i299, 2);
    goto corral_source_split_5921;

  corral_source_split_5921:
    assume {:verifier.code 0} true;
    $i301 := $sext.i32.i64($i300);
    goto corral_source_split_5922;

  corral_source_split_5922:
    assume {:verifier.code 0} true;
    $p302 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref($i301, 1));
    goto corral_source_split_5923;

  corral_source_split_5923:
    assume {:verifier.code 0} true;
    $i303 := $load.i8($M.26, $p302);
    goto corral_source_split_5924;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    $i304 := $sext.i32.i64($i298);
    goto corral_source_split_5925;

  corral_source_split_5925:
    assume {:verifier.code 0} true;
    $p305 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref($i304, 1));
    goto corral_source_split_5926;

  corral_source_split_5926:
    assume {:verifier.code 0} true;
    $M.27 := $store.i8($M.27, $p305, $i303);
    goto corral_source_split_5927;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    $i306 := $sext.i32.i64($i298);
    goto corral_source_split_5928;

  corral_source_split_5928:
    assume {:verifier.code 0} true;
    $p307 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref($i306, 1));
    goto corral_source_split_5929;

  corral_source_split_5929:
    assume {:verifier.code 0} true;
    $i308 := $load.i8($M.27, $p307);
    goto corral_source_split_5930;

  corral_source_split_5930:
    assume {:verifier.code 0} true;
    $i309 := $zext.i8.i32($i308);
    goto corral_source_split_5931;

  corral_source_split_5931:
    assume {:verifier.code 0} true;
    $i310 := $eq.i32($i309, 4);
    goto corral_source_split_5932;

  corral_source_split_5932:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb109, $bb110;

  $bb110:
    assume !($i310 == 1);
    goto corral_source_split_5937;

  corral_source_split_5937:
    assume {:verifier.code 0} true;
    $i413 := $mul.i32($i298, 3);
    goto corral_source_split_5938;

  corral_source_split_5938:
    assume {:verifier.code 0} true;
    $i414 := $add.i32($i413, 1);
    goto corral_source_split_5939;

  corral_source_split_5939:
    assume {:verifier.code 0} true;
    $i415 := $sext.i32.i64($i414);
    goto corral_source_split_5940;

  corral_source_split_5940:
    assume {:verifier.code 0} true;
    $p416 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref($i415, 1));
    goto corral_source_split_5941;

  corral_source_split_5941:
    assume {:verifier.code 0} true;
    $i417 := $load.i8($M.26, $p416);
    goto corral_source_split_5942;

  corral_source_split_5942:
    assume {:verifier.code 0} true;
    $p418 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5943;

  corral_source_split_5943:
    assume {:verifier.code 0} true;
    $p419 := $load.ref($M.8, $p418);
    goto corral_source_split_5944;

  corral_source_split_5944:
    assume {:verifier.code 0} true;
    $i420 := $zext.i16.i32($i278);
    goto corral_source_split_5945;

  corral_source_split_5945:
    assume {:verifier.code 0} true;
    $i421 := $mul.i32($i420, 8);
    goto corral_source_split_5946;

  corral_source_split_5946:
    assume {:verifier.code 0} true;
    $i422 := $add.i32($i421, $i298);
    goto corral_source_split_5947;

  corral_source_split_5947:
    assume {:verifier.code 0} true;
    $i423 := $sext.i32.i64($i422);
    goto corral_source_split_5948;

  corral_source_split_5948:
    assume {:verifier.code 0} true;
    $p424 := $add.ref($p419, $mul.ref($i423, 1));
    goto corral_source_split_5949;

  corral_source_split_5949:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p424, $i417);
    assume {:verifier.code 0} true;
    $i412 := $i298;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    goto corral_source_split_6084;

  corral_source_split_6084:
    assume {:verifier.code 0} true;
    $i425 := $add.i32($i412, 1);
    call {:si_unique_call 861} {:cexpr "i"} boogie_si_record_i32($i425);
    goto corral_source_split_6085;

  corral_source_split_6085:
    assume {:verifier.code 0} true;
    $i426 := $sle.i32($i425, 7);
    goto corral_source_split_6086;

  corral_source_split_6086:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb139, $bb140;

  $bb140:
    assume !($i426 == 1);
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    $i394 := $i278;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    goto corral_source_split_6072;

  corral_source_split_6072:
    assume {:verifier.code 0} true;
    $i427 := $zext.i16.i32($i394);
    goto corral_source_split_6073;

  corral_source_split_6073:
    assume {:verifier.code 0} true;
    $i428 := $add.i32($i427, 1);
    goto corral_source_split_6074;

  corral_source_split_6074:
    assume {:verifier.code 0} true;
    $i429 := $trunc.i32.i16($i428);
    call {:si_unique_call 859} {:cexpr "index"} boogie_si_record_i16($i429);
    goto corral_source_split_6075;

  corral_source_split_6075:
    assume {:verifier.code 0} true;
    $i430 := $zext.i16.i32($i429);
    goto corral_source_split_6076;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    $i431 := $slt.i32($i430, $i276);
    goto corral_source_split_6077;

  corral_source_split_6077:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb142, $bb143;

  $bb143:
    assume !($i431 == 1);
    goto corral_source_split_6088;

  corral_source_split_6088:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb142:
    assume $i431 == 1;
    assume {:verifier.code 0} true;
    $i278 := $i429;
    goto $bb142_dummy;

  $bb139:
    assume $i426 == 1;
    assume {:verifier.code 0} true;
    $i298 := $i425;
    goto $bb139_dummy;

  $bb109:
    assume $i310 == 1;
    goto corral_source_split_5934;

  corral_source_split_5934:
    assume {:verifier.code 0} true;
    $i311 := $sle.i32($i298, 6);
    goto corral_source_split_5935;

  corral_source_split_5935:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb111, $bb112;

  $bb112:
    assume !($i311 == 1);
    goto corral_source_split_5956;

  corral_source_split_5956:
    assume {:verifier.code 0} true;
    $i400 := $mul.i32($i298, 3);
    goto corral_source_split_5957;

  corral_source_split_5957:
    assume {:verifier.code 0} true;
    $i401 := $add.i32($i400, 1);
    goto corral_source_split_5958;

  corral_source_split_5958:
    assume {:verifier.code 0} true;
    $i402 := $sext.i32.i64($i401);
    goto corral_source_split_5959;

  corral_source_split_5959:
    assume {:verifier.code 0} true;
    $p403 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref($i402, 1));
    goto corral_source_split_5960;

  corral_source_split_5960:
    assume {:verifier.code 0} true;
    $i404 := $load.i8($M.26, $p403);
    goto corral_source_split_5961;

  corral_source_split_5961:
    assume {:verifier.code 0} true;
    $p405 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5962;

  corral_source_split_5962:
    assume {:verifier.code 0} true;
    $p406 := $load.ref($M.8, $p405);
    goto corral_source_split_5963;

  corral_source_split_5963:
    assume {:verifier.code 0} true;
    $i407 := $zext.i16.i32($i278);
    goto corral_source_split_5964;

  corral_source_split_5964:
    assume {:verifier.code 0} true;
    $i408 := $mul.i32($i407, 8);
    goto corral_source_split_5965;

  corral_source_split_5965:
    assume {:verifier.code 0} true;
    $i409 := $add.i32($i408, $i298);
    goto corral_source_split_5966;

  corral_source_split_5966:
    assume {:verifier.code 0} true;
    $i410 := $sext.i32.i64($i409);
    goto corral_source_split_5967;

  corral_source_split_5967:
    assume {:verifier.code 0} true;
    $p411 := $add.ref($p406, $mul.ref($i410, 1));
    goto corral_source_split_5968;

  corral_source_split_5968:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p411, $i404);
    assume {:verifier.code 0} true;
    $i399 := $i298;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    goto corral_source_split_6082;

  corral_source_split_6082:
    assume {:verifier.code 0} true;
    $i412 := $i399;
    goto $bb138;

  $bb111:
    assume $i311 == 1;
    goto corral_source_split_5951;

  corral_source_split_5951:
    assume {:verifier.code 0} true;
    $i312 := $M.10;
    goto corral_source_split_5952;

  corral_source_split_5952:
    assume {:verifier.code 0} true;
    $i313 := $and.i32($i312, 4);
    goto corral_source_split_5953;

  corral_source_split_5953:
    assume {:verifier.code 0} true;
    $i314 := $ne.i32($i313, 0);
    goto corral_source_split_5954;

  corral_source_split_5954:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb113, $bb114;

  $bb114:
    assume !($i314 == 1);
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    $i316 := $mul.i32($i298, 3);
    goto corral_source_split_5973;

  corral_source_split_5973:
    assume {:verifier.code 0} true;
    $i317 := $add.i32($i316, 1);
    goto corral_source_split_5974;

  corral_source_split_5974:
    assume {:verifier.code 0} true;
    $i318 := $sext.i32.i64($i317);
    goto corral_source_split_5975;

  corral_source_split_5975:
    assume {:verifier.code 0} true;
    $p319 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref($i318, 1));
    goto corral_source_split_5976;

  corral_source_split_5976:
    assume {:verifier.code 0} true;
    $i320 := $load.i8($M.26, $p319);
    goto corral_source_split_5977;

  corral_source_split_5977:
    assume {:verifier.code 0} true;
    $p321 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5978;

  corral_source_split_5978:
    assume {:verifier.code 0} true;
    $p322 := $load.ref($M.8, $p321);
    goto corral_source_split_5979;

  corral_source_split_5979:
    assume {:verifier.code 0} true;
    $i323 := $zext.i16.i32($i278);
    goto corral_source_split_5980;

  corral_source_split_5980:
    assume {:verifier.code 0} true;
    $i324 := $mul.i32($i323, 8);
    goto corral_source_split_5981;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    $i325 := $add.i32($i324, $i298);
    goto corral_source_split_5982;

  corral_source_split_5982:
    assume {:verifier.code 0} true;
    $i326 := $sext.i32.i64($i325);
    goto corral_source_split_5983;

  corral_source_split_5983:
    assume {:verifier.code 0} true;
    $p327 := $add.ref($p322, $mul.ref($i326, 1));
    goto corral_source_split_5984;

  corral_source_split_5984:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p327, $i320);
    goto corral_source_split_5985;

  corral_source_split_5985:
    assume {:verifier.code 0} true;
    $i328 := $trunc.i32.i8($i298);
    goto corral_source_split_5986;

  corral_source_split_5986:
    assume {:verifier.code 0} true;
    $i329 := $zext.i8.i32($i328);
    goto corral_source_split_5987;

  corral_source_split_5987:
    assume {:verifier.code 0} true;
    $i330 := $xor.i32($i329, $sub.i32(0, 1));
    goto corral_source_split_5988;

  corral_source_split_5988:
    assume {:verifier.code 0} true;
    $i331 := $add.i32($i330, 8);
    goto corral_source_split_5989;

  corral_source_split_5989:
    assume {:verifier.code 0} true;
    $i332 := $trunc.i32.i8($i331);
    goto corral_source_split_5990;

  corral_source_split_5990:
    assume {:verifier.code 0} true;
    $p333 := $bitcast.ref.ref($p5);
    goto corral_source_split_5991;

  corral_source_split_5991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 853} $i334 := mxl111sf_i2c_readagain($p0, $i332, $p333);
    call {:si_unique_call 854} {:cexpr "tmp___4"} boogie_si_record_i32($i334);
    goto corral_source_split_5992;

  corral_source_split_5992:
    assume {:verifier.code 0} true;
    $i335 := $trunc.i32.i8($i334);
    call {:si_unique_call 855} {:cexpr "ret_status"} boogie_si_record_i8($i335);
    goto corral_source_split_5993;

  corral_source_split_5993:
    assume {:verifier.code 0} true;
    $i336 := $zext.i8.i32($i335);
    goto corral_source_split_5994;

  corral_source_split_5994:
    assume {:verifier.code 0} true;
    $i337 := $eq.i32($i336, 1);
    goto corral_source_split_5995;

  corral_source_split_5995:
    assume {:verifier.code 0} true;
    $i338 := $i298;
    assume true;
    goto $bb116, $bb117;

  $bb117:
    assume !($i337 == 1);
    goto corral_source_split_6002;

  corral_source_split_6002:
    assume {:verifier.code 0} true;
    $i395 := $M.10;
    goto corral_source_split_6003;

  corral_source_split_6003:
    assume {:verifier.code 0} true;
    $i396 := $and.i32($i395, 4);
    goto corral_source_split_6004;

  corral_source_split_6004:
    assume {:verifier.code 0} true;
    $i397 := $ne.i32($i396, 0);
    goto corral_source_split_6005;

  corral_source_split_6005:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb133, $bb134;

  $bb134:
    assume !($i397 == 1);
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    $i399 := $i298;
    goto $bb137;

  $bb133:
    assume $i397 == 1;
    goto corral_source_split_6079;

  corral_source_split_6079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 860} vslice_dummy_var_207 := printk.ref.ref(.str.133, .str.124);
    goto corral_source_split_6080;

  corral_source_split_6080:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb116:
    assume $i337 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_5997;

  corral_source_split_5997:
    assume {:verifier.code 0} true;
    $i339 := $xor.i32($i338, $sub.i32(0, 1));
    goto corral_source_split_5998;

  corral_source_split_5998:
    assume {:verifier.code 0} true;
    $i340 := $add.i32($i339, 8);
    goto corral_source_split_5999;

  corral_source_split_5999:
    assume {:verifier.code 0} true;
    $i341 := $slt.i32(0, $i340);
    goto corral_source_split_6000;

  corral_source_split_6000:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb118, $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    assume !($i341 == 1);
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    $i394 := $i278;
    goto $bb132;

  $bb118:
    assume $i341 == 1;
    goto corral_source_split_6007;

  corral_source_split_6007:
    assume {:verifier.code 0} true;
    $i342 := 0;
    goto $bb121;

  $bb121:
    call $i343, $p344, $i345, $p346, $p347, $i348, $i349, $i350, $i351, $i352, $i353, $p354, $i355, $i356, $i357, $p358, $p359, $i360, $i361, $i362, $i363, $i364, $p365, $i366, $i367, $i368, $i369, $i370, $i371, $i373, $i374, $i375, $p376, $p377, $i378, $i379, $i380, $i381, $i382, $i383, $p384, $i385, $i386, $i387, $p388, $i389, $i390, $i392, $i393, $i342, vslice_dummy_var_205, vslice_dummy_var_206 := mxl111sf_i2c_hw_xfer_msg_loop_$bb121($p1, $p5, $i338, $i340, $i343, $p344, $i345, $p346, $p347, $i348, $i349, $i350, $i351, $i352, $i353, $p354, $i355, $i356, $i357, $p358, $p359, $i360, $i361, $i362, $i363, $i364, $p365, $i366, $i367, $i368, $i369, $i370, $i371, $i373, $i374, $i375, $p376, $p377, $i378, $i379, $i380, $i381, $i382, $i383, $p384, $i385, $i386, $i387, $p388, $i389, $i390, $i392, $i393, $i342, $i278, vslice_dummy_var_205, vslice_dummy_var_206);
    goto $bb121_last;

  corral_source_split_6009:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    $i343 := $sext.i32.i64($i342);
    goto corral_source_split_6011;

  corral_source_split_6011:
    assume {:verifier.code 0} true;
    $p344 := $add.ref($add.ref($p5, $mul.ref(0, 26)), $mul.ref($i343, 1));
    goto corral_source_split_6012;

  corral_source_split_6012:
    assume {:verifier.code 0} true;
    $i345 := $load.i8($M.28, $p344);
    goto corral_source_split_6013;

  corral_source_split_6013:
    assume {:verifier.code 0} true;
    $p346 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6014;

  corral_source_split_6014:
    assume {:verifier.code 0} true;
    $p347 := $load.ref($M.8, $p346);
    goto corral_source_split_6015;

  corral_source_split_6015:
    assume {:verifier.code 0} true;
    $i348 := $zext.i16.i32($i278);
    goto corral_source_split_6016;

  corral_source_split_6016:
    assume {:verifier.code 0} true;
    $i349 := $mul.i32($i348, 8);
    goto corral_source_split_6017;

  corral_source_split_6017:
    assume {:verifier.code 0} true;
    $i350 := $add.i32($i342, $i338);
    goto corral_source_split_6018;

  corral_source_split_6018:
    assume {:verifier.code 0} true;
    $i351 := $add.i32($i350, 1);
    goto corral_source_split_6019;

  corral_source_split_6019:
    assume {:verifier.code 0} true;
    $i352 := $add.i32($i349, $i351);
    goto corral_source_split_6020;

  corral_source_split_6020:
    assume {:verifier.code 0} true;
    $i353 := $sext.i32.i64($i352);
    goto corral_source_split_6021;

  corral_source_split_6021:
    assume {:verifier.code 0} true;
    $p354 := $add.ref($p347, $mul.ref($i353, 1));
    goto corral_source_split_6022;

  corral_source_split_6022:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p354, $i345);
    goto corral_source_split_6023;

  corral_source_split_6023:
    assume {:verifier.code 0} true;
    $i355 := $M.10;
    goto corral_source_split_6024;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    $i356 := $and.i32($i355, 4);
    goto corral_source_split_6025;

  corral_source_split_6025:
    assume {:verifier.code 0} true;
    $i357 := $ne.i32($i356, 0);
    goto corral_source_split_6026;

  corral_source_split_6026:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb123, $bb124;

  $bb124:
    assume !($i357 == 1);
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    $i373 := $M.10;
    goto corral_source_split_6045;

  corral_source_split_6045:
    assume {:verifier.code 0} true;
    $i374 := $and.i32($i373, 4);
    goto corral_source_split_6046;

  corral_source_split_6046:
    assume {:verifier.code 0} true;
    $i375 := $ne.i32($i374, 0);
    goto corral_source_split_6047;

  corral_source_split_6047:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb126, $bb127;

  $bb127:
    assume !($i375 == 1);
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    $i392 := $add.i32($i342, 1);
    call {:si_unique_call 858} {:cexpr "k"} boogie_si_record_i32($i392);
    goto corral_source_split_6067;

  corral_source_split_6067:
    assume {:verifier.code 0} true;
    $i393 := $slt.i32($i392, $i340);
    goto corral_source_split_6068;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb129, $bb130;

  $bb130:
    assume !($i393 == 1);
    goto corral_source_split_6070;

  corral_source_split_6070:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb129:
    assume $i393 == 1;
    assume {:verifier.code 0} true;
    $i342 := $i392;
    goto $bb129_dummy;

  $bb126:
    assume $i375 == 1;
    goto corral_source_split_6049;

  corral_source_split_6049:
    assume {:verifier.code 0} true;
    $p376 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6050;

  corral_source_split_6050:
    assume {:verifier.code 0} true;
    $p377 := $load.ref($M.8, $p376);
    goto corral_source_split_6051;

  corral_source_split_6051:
    assume {:verifier.code 0} true;
    $i378 := $zext.i16.i32($i278);
    goto corral_source_split_6052;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    $i379 := $mul.i32($i378, 8);
    goto corral_source_split_6053;

  corral_source_split_6053:
    assume {:verifier.code 0} true;
    $i380 := $add.i32($i342, $i338);
    goto corral_source_split_6054;

  corral_source_split_6054:
    assume {:verifier.code 0} true;
    $i381 := $add.i32($i380, 1);
    goto corral_source_split_6055;

  corral_source_split_6055:
    assume {:verifier.code 0} true;
    $i382 := $add.i32($i379, $i381);
    goto corral_source_split_6056;

  corral_source_split_6056:
    assume {:verifier.code 0} true;
    $i383 := $sext.i32.i64($i382);
    goto corral_source_split_6057;

  corral_source_split_6057:
    assume {:verifier.code 0} true;
    $p384 := $add.ref($p377, $mul.ref($i383, 1));
    goto corral_source_split_6058;

  corral_source_split_6058:
    assume {:verifier.code 0} true;
    $i385 := $load.i8($M.8, $p384);
    goto corral_source_split_6059;

  corral_source_split_6059:
    assume {:verifier.code 0} true;
    $i386 := $zext.i8.i32($i385);
    goto corral_source_split_6060;

  corral_source_split_6060:
    assume {:verifier.code 0} true;
    $i387 := $sext.i32.i64($i342);
    goto corral_source_split_6061;

  corral_source_split_6061:
    assume {:verifier.code 0} true;
    $p388 := $add.ref($add.ref($p5, $mul.ref(0, 26)), $mul.ref($i387, 1));
    goto corral_source_split_6062;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    $i389 := $load.i8($M.28, $p388);
    goto corral_source_split_6063;

  corral_source_split_6063:
    assume {:verifier.code 0} true;
    $i390 := $zext.i8.i32($i389);
    goto corral_source_split_6064;

  corral_source_split_6064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 857} vslice_dummy_var_206 := printk.ref.ref.i32.i32(.str.132, .str.124, $i386, $i390);
    goto corral_source_split_6065;

  corral_source_split_6065:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb123:
    assume $i357 == 1;
    goto corral_source_split_6028;

  corral_source_split_6028:
    assume {:verifier.code 0} true;
    $p358 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6029;

  corral_source_split_6029:
    assume {:verifier.code 0} true;
    $p359 := $load.ref($M.8, $p358);
    goto corral_source_split_6030;

  corral_source_split_6030:
    assume {:verifier.code 0} true;
    $i360 := $zext.i16.i32($i278);
    goto corral_source_split_6031;

  corral_source_split_6031:
    assume {:verifier.code 0} true;
    $i361 := $mul.i32($i360, 8);
    goto corral_source_split_6032;

  corral_source_split_6032:
    assume {:verifier.code 0} true;
    $i362 := $add.i32($i342, $i338);
    goto corral_source_split_6033;

  corral_source_split_6033:
    assume {:verifier.code 0} true;
    $i363 := $add.i32($i361, $i362);
    goto corral_source_split_6034;

  corral_source_split_6034:
    assume {:verifier.code 0} true;
    $i364 := $sext.i32.i64($i363);
    goto corral_source_split_6035;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    $p365 := $add.ref($p359, $mul.ref($i364, 1));
    goto corral_source_split_6036;

  corral_source_split_6036:
    assume {:verifier.code 0} true;
    $i366 := $load.i8($M.8, $p365);
    goto corral_source_split_6037;

  corral_source_split_6037:
    assume {:verifier.code 0} true;
    $i367 := $zext.i8.i32($i366);
    goto corral_source_split_6038;

  corral_source_split_6038:
    assume {:verifier.code 0} true;
    $i368 := $zext.i16.i32($i278);
    goto corral_source_split_6039;

  corral_source_split_6039:
    assume {:verifier.code 0} true;
    $i369 := $mul.i32($i368, 8);
    goto corral_source_split_6040;

  corral_source_split_6040:
    assume {:verifier.code 0} true;
    $i370 := $add.i32($i342, $i338);
    goto corral_source_split_6041;

  corral_source_split_6041:
    assume {:verifier.code 0} true;
    $i371 := $add.i32($i369, $i370);
    goto corral_source_split_6042;

  corral_source_split_6042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 856} vslice_dummy_var_205 := printk.ref.ref.i32.i32(.str.132, .str.124, $i367, $i371);
    goto corral_source_split_6043;

  corral_source_split_6043:
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb113:
    assume $i314 == 1;
    goto corral_source_split_5970;

  corral_source_split_5970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 852} vslice_dummy_var_204 := printk.ref.ref.i32(.str.131, .str.124, $i298);
    goto corral_source_split_5971;

  corral_source_split_5971:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb101:
    assume $i287 == 1;
    goto corral_source_split_5900;

  corral_source_split_5900:
    assume {:verifier.code 0} true;
    $i288 := $M.10;
    goto corral_source_split_5901;

  corral_source_split_5901:
    assume {:verifier.code 0} true;
    $i289 := $and.i32($i288, 4);
    goto corral_source_split_5902;

  corral_source_split_5902:
    assume {:verifier.code 0} true;
    $i290 := $ne.i32($i289, 0);
    goto corral_source_split_5903;

  corral_source_split_5903:
    assume {:verifier.code 0} true;
    assume {:branchcond $i290} true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i290 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    $p295 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(2, 1));
    goto corral_source_split_5911;

  corral_source_split_5911:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p295, 0);
    goto corral_source_split_5912;

  corral_source_split_5912:
    assume {:verifier.code 0} true;
    $p296 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(3, 1));
    goto corral_source_split_5913;

  corral_source_split_5913:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p296, $sub.i8(0, 57));
    goto corral_source_split_5914;

  corral_source_split_5914:
    assume {:verifier.code 0} true;
    $p297 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(4, 1));
    goto corral_source_split_5915;

  corral_source_split_5915:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p297, 3);
    goto corral_source_split_5916;

  corral_source_split_5916:
    assume {:verifier.code 0} true;
    $i93 := $sub.i32(0, 5);
    goto $bb27;

  $bb103:
    assume $i290 == 1;
    goto corral_source_split_5905;

  corral_source_split_5905:
    assume {:verifier.code 0} true;
    $p291 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5906;

  corral_source_split_5906:
    assume {:verifier.code 0} true;
    $i292 := $load.i16($M.8, $p291);
    goto corral_source_split_5907;

  corral_source_split_5907:
    assume {:verifier.code 0} true;
    $i293 := $zext.i16.i32($i292);
    goto corral_source_split_5908;

  corral_source_split_5908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 851} vslice_dummy_var_203 := printk.ref.ref.i32(.str.130, .str.124, $i293);
    goto corral_source_split_5909;

  corral_source_split_5909:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb89:
    assume $i270 == 1;
    goto corral_source_split_5863;

  corral_source_split_5863:
    assume {:verifier.code 0} true;
    $i271 := $zext.i16.i32($i262);
    goto corral_source_split_5864;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    $i272 := $zext.i16.i32($i267);
    goto corral_source_split_5865;

  corral_source_split_5865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 846} vslice_dummy_var_202 := printk.ref.ref.i32.i32(.str.127, .str.124, $i271, $i272);
    goto corral_source_split_5866;

  corral_source_split_5866:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb83:
    assume $i247 == 1;
    goto corral_source_split_5831;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    $i248 := $M.10;
    goto corral_source_split_5832;

  corral_source_split_5832:
    assume {:verifier.code 0} true;
    $i249 := $and.i32($i248, 4);
    goto corral_source_split_5833;

  corral_source_split_5833:
    assume {:verifier.code 0} true;
    $i250 := $ne.i32($i249, 0);
    goto corral_source_split_5834;

  corral_source_split_5834:
    assume {:verifier.code 0} true;
    assume {:branchcond $i250} true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i250 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    $p255 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(2, 1));
    goto corral_source_split_5842;

  corral_source_split_5842:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p255, 0);
    goto corral_source_split_5843;

  corral_source_split_5843:
    assume {:verifier.code 0} true;
    $p256 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(3, 1));
    goto corral_source_split_5844;

  corral_source_split_5844:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p256, $sub.i8(0, 57));
    goto corral_source_split_5845;

  corral_source_split_5845:
    assume {:verifier.code 0} true;
    $p257 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(4, 1));
    goto corral_source_split_5846;

  corral_source_split_5846:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p257, 3);
    goto corral_source_split_5847;

  corral_source_split_5847:
    assume {:verifier.code 0} true;
    $i93 := $sub.i32(0, 5);
    goto $bb27;

  $bb85:
    assume $i250 == 1;
    goto corral_source_split_5836;

  corral_source_split_5836:
    assume {:verifier.code 0} true;
    $p251 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5837;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    $i252 := $load.i16($M.8, $p251);
    goto corral_source_split_5838;

  corral_source_split_5838:
    assume {:verifier.code 0} true;
    $i253 := $zext.i16.i32($i252);
    goto corral_source_split_5839;

  corral_source_split_5839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 843} vslice_dummy_var_201 := printk.ref.ref.i32(.str.130, .str.124, $i253);
    goto corral_source_split_5840;

  corral_source_split_5840:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb80:
    assume $i222 == 1;
    goto corral_source_split_5793;

  corral_source_split_5793:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_5794;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    $i224 := $load.i16($M.8, $p223);
    goto corral_source_split_5795;

  corral_source_split_5795:
    assume {:verifier.code 0} true;
    $i225 := $zext.i16.i32($i224);
    goto corral_source_split_5796;

  corral_source_split_5796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 838} vslice_dummy_var_200 := printk.ref.ref.i32(.str.129, .str.124, $i225);
    goto corral_source_split_5797;

  corral_source_split_5797:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb14:
    assume $i52 == 1;
    goto corral_source_split_5479;

  corral_source_split_5479:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_5480;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    $i54 := $load.i16($M.8, $p53);
    goto corral_source_split_5481;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    $i55 := $zext.i16.i32($i54);
    goto corral_source_split_5482;

  corral_source_split_5482:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 0);
    goto corral_source_split_5483;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i56 == 1);
    goto $bb16;

  $bb17:
    assume $i56 == 1;
    goto corral_source_split_5485;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    $i57 := $M.10;
    goto corral_source_split_5486;

  corral_source_split_5486:
    assume {:verifier.code 0} true;
    $i58 := $and.i32($i57, 4);
    goto corral_source_split_5487;

  corral_source_split_5487:
    assume {:verifier.code 0} true;
    $i59 := $ne.i32($i58, 0);
    goto corral_source_split_5488;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(2, 1));
    goto corral_source_split_5500;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p68, 0);
    goto corral_source_split_5501;

  corral_source_split_5501:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(3, 1));
    goto corral_source_split_5502;

  corral_source_split_5502:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p69, 94);
    goto corral_source_split_5503;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(4, 1));
    goto corral_source_split_5504;

  corral_source_split_5504:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p70, 3);
    goto corral_source_split_5505;

  corral_source_split_5505:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(5, 1));
    goto corral_source_split_5506;

  corral_source_split_5506:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p71, 8);
    goto corral_source_split_5507;

  corral_source_split_5507:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5508;

  corral_source_split_5508:
    assume {:verifier.code 0} true;
    $i73 := $load.i16($M.8, $p72);
    goto corral_source_split_5509;

  corral_source_split_5509:
    assume {:verifier.code 0} true;
    $i74 := $trunc.i16.i8($i73);
    goto corral_source_split_5510;

  corral_source_split_5510:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(6, 1));
    goto corral_source_split_5511;

  corral_source_split_5511:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p75, $i74);
    goto corral_source_split_5512;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(7, 1));
    goto corral_source_split_5513;

  corral_source_split_5513:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p76, 0);
    goto corral_source_split_5514;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(8, 1));
    goto corral_source_split_5515;

  corral_source_split_5515:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p77, $sub.i8(0, 2));
    goto corral_source_split_5516;

  corral_source_split_5516:
    assume {:verifier.code 0} true;
    $p78 := $bitcast.ref.ref($p2);
    goto corral_source_split_5517;

  corral_source_split_5517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 814} $i79 := mxl111sf_i2c_send_data($p0, 0, $p78);
    call {:si_unique_call 815} {:cexpr "ret"} boogie_si_record_i32($i79);
    goto corral_source_split_5518;

  corral_source_split_5518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 816} $i80 := mxl111sf_i2c_check_status($p0);
    call {:si_unique_call 817} {:cexpr "tmp"} boogie_si_record_i8($i80);
    goto corral_source_split_5519;

  corral_source_split_5519:
    assume {:verifier.code 0} true;
    $i81 := $zext.i8.i32($i80);
    goto corral_source_split_5520;

  corral_source_split_5520:
    assume {:verifier.code 0} true;
    $i82 := $eq.i32($i81, 1);
    goto corral_source_split_5521;

  corral_source_split_5521:
    assume {:verifier.code 0} true;
    assume {:branchcond $i82} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_5589;

  corral_source_split_5589:
    assume {:verifier.code 0} true;
    $i95 := $load.i16($M.8, $p94);
    goto corral_source_split_5590;

  corral_source_split_5590:
    assume {:verifier.code 0} true;
    $i96 := $zext.i16.i32($i95);
    goto corral_source_split_5591;

  corral_source_split_5591:
    assume {:verifier.code 0} true;
    $i97 := $udiv.i32($i96, 8);
    goto corral_source_split_5592;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    $i98 := $trunc.i32.i16($i97);
    call {:si_unique_call 822} {:cexpr "block_len"} boogie_si_record_i16($i98);
    goto corral_source_split_5593;

  corral_source_split_5593:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_5594;

  corral_source_split_5594:
    assume {:verifier.code 0} true;
    $i100 := $load.i16($M.8, $p99);
    goto corral_source_split_5595;

  corral_source_split_5595:
    assume {:verifier.code 0} true;
    $i101 := $zext.i16.i32($i100);
    goto corral_source_split_5596;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    $i102 := $and.i32($i101, 7);
    goto corral_source_split_5597;

  corral_source_split_5597:
    assume {:verifier.code 0} true;
    $i103 := $trunc.i32.i16($i102);
    call {:si_unique_call 823} {:cexpr "left_over_len"} boogie_si_record_i16($i103);
    goto corral_source_split_5598;

  corral_source_split_5598:
    assume {:verifier.code 0} true;
    $i104 := $M.10;
    goto corral_source_split_5599;

  corral_source_split_5599:
    assume {:verifier.code 0} true;
    $i105 := $and.i32($i104, 4);
    goto corral_source_split_5600;

  corral_source_split_5600:
    assume {:verifier.code 0} true;
    $i106 := $ne.i32($i105, 0);
    goto corral_source_split_5601;

  corral_source_split_5601:
    assume {:verifier.code 0} true;
    assume {:branchcond $i106} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i110 := $zext.i16.i32($i98);
    goto corral_source_split_5608;

  corral_source_split_5608:
    assume {:verifier.code 0} true;
    $i111 := $slt.i32(0, $i110);
    goto corral_source_split_5609;

  corral_source_split_5609:
    assume {:verifier.code 0} true;
    $i112, $i113 := 0, $i79;
    assume {:branchcond $i111} true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i111 == 1);
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $i147 := $zext.i16.i32($i103);
    goto corral_source_split_5676;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    $i148 := $ne.i32($i147, 0);
    goto corral_source_split_5677;

  corral_source_split_5677:
    assume {:verifier.code 0} true;
    assume {:branchcond $i148} true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i148 == 1);
    assume {:verifier.code 0} true;
    $i206 := $i113;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    goto corral_source_split_5767;

  corral_source_split_5767:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(2, 1));
    goto corral_source_split_5768;

  corral_source_split_5768:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p207, 0);
    goto corral_source_split_5769;

  corral_source_split_5769:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(3, 1));
    goto corral_source_split_5770;

  corral_source_split_5770:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p208, 78);
    goto corral_source_split_5771;

  corral_source_split_5771:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(4, 1));
    goto corral_source_split_5772;

  corral_source_split_5772:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p209, 3);
    goto corral_source_split_5773;

  corral_source_split_5773:
    assume {:verifier.code 0} true;
    $i210 := $i206;
    goto $bb74;

  $bb50:
    assume $i148 == 1;
    goto corral_source_split_5679;

  corral_source_split_5679:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(0, 1));
    goto corral_source_split_5681;

  corral_source_split_5681:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p149, $sub.i8(0, 2));
    goto corral_source_split_5682;

  corral_source_split_5682:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $p587 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(1, 1));
    goto corral_source_split_5684;

  corral_source_split_5684:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p587, $sub.i8(0, 2));
    goto corral_source_split_5685;

  corral_source_split_5685:
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb208:
    assume {:verifier.code 0} true;
    $p588 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(2, 1));
    goto corral_source_split_6336;

  corral_source_split_6336:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p588, $sub.i8(0, 2));
    goto corral_source_split_6337;

  corral_source_split_6337:
    assume {:verifier.code 0} true;
    goto $bb209;

  $bb209:
    assume {:verifier.code 0} true;
    $p589 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(3, 1));
    goto corral_source_split_6339;

  corral_source_split_6339:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p589, $sub.i8(0, 2));
    goto corral_source_split_6340;

  corral_source_split_6340:
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb210:
    assume {:verifier.code 0} true;
    $p590 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(4, 1));
    goto corral_source_split_6342;

  corral_source_split_6342:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p590, $sub.i8(0, 2));
    goto corral_source_split_6343;

  corral_source_split_6343:
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb211:
    assume {:verifier.code 0} true;
    $p591 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(5, 1));
    goto corral_source_split_6345;

  corral_source_split_6345:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p591, $sub.i8(0, 2));
    goto corral_source_split_6346;

  corral_source_split_6346:
    assume {:verifier.code 0} true;
    goto $bb212;

  $bb212:
    assume {:verifier.code 0} true;
    $p592 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(6, 1));
    goto corral_source_split_6348;

  corral_source_split_6348:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p592, $sub.i8(0, 2));
    goto corral_source_split_6349;

  corral_source_split_6349:
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb213:
    assume {:verifier.code 0} true;
    $p593 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(7, 1));
    goto corral_source_split_6351;

  corral_source_split_6351:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p593, $sub.i8(0, 2));
    goto corral_source_split_6352;

  corral_source_split_6352:
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb214:
    assume {:verifier.code 0} true;
    $p594 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(8, 1));
    goto corral_source_split_6354;

  corral_source_split_6354:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p594, $sub.i8(0, 2));
    goto corral_source_split_6355;

  corral_source_split_6355:
    assume {:verifier.code 0} true;
    goto $bb215;

  $bb215:
    assume {:verifier.code 0} true;
    $p595 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(9, 1));
    goto corral_source_split_6357;

  corral_source_split_6357:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p595, $sub.i8(0, 2));
    goto corral_source_split_6358;

  corral_source_split_6358:
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb216:
    assume {:verifier.code 0} true;
    $p596 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(10, 1));
    goto corral_source_split_6360;

  corral_source_split_6360:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p596, $sub.i8(0, 2));
    goto corral_source_split_6361;

  corral_source_split_6361:
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb217:
    assume {:verifier.code 0} true;
    $p597 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(11, 1));
    goto corral_source_split_6363;

  corral_source_split_6363:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p597, $sub.i8(0, 2));
    goto corral_source_split_6364;

  corral_source_split_6364:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb218:
    assume {:verifier.code 0} true;
    $p598 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(12, 1));
    goto corral_source_split_6366;

  corral_source_split_6366:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p598, $sub.i8(0, 2));
    goto corral_source_split_6367;

  corral_source_split_6367:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb219:
    assume {:verifier.code 0} true;
    $p599 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(13, 1));
    goto corral_source_split_6369;

  corral_source_split_6369:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p599, $sub.i8(0, 2));
    goto corral_source_split_6370;

  corral_source_split_6370:
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb220:
    assume {:verifier.code 0} true;
    $p600 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(14, 1));
    goto corral_source_split_6372;

  corral_source_split_6372:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p600, $sub.i8(0, 2));
    goto corral_source_split_6373;

  corral_source_split_6373:
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb221:
    assume {:verifier.code 0} true;
    $p601 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(15, 1));
    goto corral_source_split_6375;

  corral_source_split_6375:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p601, $sub.i8(0, 2));
    goto corral_source_split_6376;

  corral_source_split_6376:
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb222:
    assume {:verifier.code 0} true;
    $p602 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(16, 1));
    goto corral_source_split_6378;

  corral_source_split_6378:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p602, $sub.i8(0, 2));
    goto corral_source_split_6379;

  corral_source_split_6379:
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb223:
    assume {:verifier.code 0} true;
    $p603 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(17, 1));
    goto corral_source_split_6381;

  corral_source_split_6381:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p603, $sub.i8(0, 2));
    goto corral_source_split_6382;

  corral_source_split_6382:
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb224:
    assume {:verifier.code 0} true;
    $p604 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(18, 1));
    goto corral_source_split_6384;

  corral_source_split_6384:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p604, $sub.i8(0, 2));
    goto corral_source_split_6385;

  corral_source_split_6385:
    assume {:verifier.code 0} true;
    goto $bb225;

  $bb225:
    assume {:verifier.code 0} true;
    $p605 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(19, 1));
    goto corral_source_split_6387;

  corral_source_split_6387:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p605, $sub.i8(0, 2));
    goto corral_source_split_6388;

  corral_source_split_6388:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb226:
    assume {:verifier.code 0} true;
    $p606 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(20, 1));
    goto corral_source_split_6390;

  corral_source_split_6390:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p606, $sub.i8(0, 2));
    goto corral_source_split_6391;

  corral_source_split_6391:
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb227:
    assume {:verifier.code 0} true;
    $p607 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(21, 1));
    goto corral_source_split_6393;

  corral_source_split_6393:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p607, $sub.i8(0, 2));
    goto corral_source_split_6394;

  corral_source_split_6394:
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb228:
    assume {:verifier.code 0} true;
    $p608 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(22, 1));
    goto corral_source_split_6396;

  corral_source_split_6396:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p608, $sub.i8(0, 2));
    goto corral_source_split_6397;

  corral_source_split_6397:
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb229:
    assume {:verifier.code 0} true;
    $p609 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(23, 1));
    goto corral_source_split_6399;

  corral_source_split_6399:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p609, $sub.i8(0, 2));
    goto corral_source_split_6400;

  corral_source_split_6400:
    assume {:verifier.code 0} true;
    goto $bb230;

  $bb230:
    assume {:verifier.code 0} true;
    $p610 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(24, 1));
    goto corral_source_split_6402;

  corral_source_split_6402:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p610, $sub.i8(0, 2));
    goto corral_source_split_6403;

  corral_source_split_6403:
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb231:
    assume {:verifier.code 0} true;
    $p611 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(25, 1));
    goto corral_source_split_6405;

  corral_source_split_6405:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p611, $sub.i8(0, 2));
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(0, 1));
    goto corral_source_split_5687;

  corral_source_split_5687:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p150, $sub.i8(0, 103));
    goto corral_source_split_5688;

  corral_source_split_5688:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(1, 1));
    goto corral_source_split_5689;

  corral_source_split_5689:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p151, 0);
    goto corral_source_split_5690;

  corral_source_split_5690:
    assume {:verifier.code 0} true;
    $i152 := $zext.i16.i32($i103);
    goto corral_source_split_5691;

  corral_source_split_5691:
    assume {:verifier.code 0} true;
    $i153 := $slt.i32(0, $i152);
    goto corral_source_split_5692;

  corral_source_split_5692:
    assume {:verifier.code 0} true;
    assume {:branchcond $i153} true;
    goto $bb56, $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    assume !($i153 == 1);
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $p191 := $bitcast.ref.ref($p2);
    goto corral_source_split_5743;

  corral_source_split_5743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} $i192 := mxl111sf_i2c_send_data($p0, 0, $p191);
    call {:si_unique_call 834} {:cexpr "ret"} boogie_si_record_i32($i192);
    goto corral_source_split_5744;

  corral_source_split_5744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} $i193 := mxl111sf_i2c_check_status($p0);
    call {:si_unique_call 836} {:cexpr "tmp___1"} boogie_si_record_i8($i193);
    goto corral_source_split_5745;

  corral_source_split_5745:
    assume {:verifier.code 0} true;
    $i194 := $zext.i8.i32($i193);
    goto corral_source_split_5746;

  corral_source_split_5746:
    assume {:verifier.code 0} true;
    $i195 := $eq.i32($i194, 1);
    goto corral_source_split_5747;

  corral_source_split_5747:
    assume {:verifier.code 0} true;
    assume {:branchcond $i195} true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i195 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $i206 := $i192;
    goto $bb73;

  $bb67:
    assume $i195 == 1;
    goto corral_source_split_5749;

  corral_source_split_5749:
    assume {:verifier.code 0} true;
    $i196 := $M.10;
    goto corral_source_split_5750;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    $i197 := $and.i32($i196, 4);
    goto corral_source_split_5751;

  corral_source_split_5751:
    assume {:verifier.code 0} true;
    $i198 := $ne.i32($i197, 0);
    goto corral_source_split_5752;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    assume {:branchcond $i198} true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i198 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(2, 1));
    goto corral_source_split_5760;

  corral_source_split_5760:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p203, 0);
    goto corral_source_split_5761;

  corral_source_split_5761:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(3, 1));
    goto corral_source_split_5762;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p204, 78);
    goto corral_source_split_5763;

  corral_source_split_5763:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(4, 1));
    goto corral_source_split_5764;

  corral_source_split_5764:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p205, 3);
    goto corral_source_split_5765;

  corral_source_split_5765:
    assume {:verifier.code 0} true;
    $i93 := $sub.i32(0, 5);
    goto $bb27;

  $bb69:
    assume $i198 == 1;
    goto corral_source_split_5754;

  corral_source_split_5754:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5755;

  corral_source_split_5755:
    assume {:verifier.code 0} true;
    $i200 := $load.i16($M.8, $p199);
    goto corral_source_split_5756;

  corral_source_split_5756:
    assume {:verifier.code 0} true;
    $i201 := $zext.i16.i32($i200);
    goto corral_source_split_5757;

  corral_source_split_5757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 837} vslice_dummy_var_199 := printk.ref.ref.i32(.str.126, .str.124, $i201);
    goto corral_source_split_5758;

  corral_source_split_5758:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb56:
    assume $i153 == 1;
    goto corral_source_split_5694;

  corral_source_split_5694:
    assume {:verifier.code 0} true;
    $i154 := 0;
    goto $bb59;

  $bb59:
    call $i155, $i156, $i157, $p158, $p159, $p160, $i161, $i162, $i163, $i164, $p165, $i166, $i167, $i168, $i169, $p170, $i171, $i172, $i173, $i174, $p175, $p176, $i177, $i178, $i179, $i180, $p181, $i182, $i183, $i185, $i186, $i187, $p188, $i189, $i190, $i154, vslice_dummy_var_198 := mxl111sf_i2c_hw_xfer_msg_loop_$bb59($p1, $p2, $i112, $i152, $i155, $i156, $i157, $p158, $p159, $p160, $i161, $i162, $i163, $i164, $p165, $i166, $i167, $i168, $i169, $p170, $i171, $i172, $i173, $i174, $p175, $p176, $i177, $i178, $i179, $i180, $p181, $i182, $i183, $i185, $i186, $i187, $p188, $i189, $i190, $i154, vslice_dummy_var_198);
    goto $bb59_last;

  corral_source_split_5696:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $i155 := $mul.i32($i154, 3);
    goto corral_source_split_5698;

  corral_source_split_5698:
    assume {:verifier.code 0} true;
    $i156 := $add.i32($i155, 2);
    goto corral_source_split_5699;

  corral_source_split_5699:
    assume {:verifier.code 0} true;
    $i157 := $sext.i32.i64($i156);
    goto corral_source_split_5700;

  corral_source_split_5700:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref($i157, 1));
    goto corral_source_split_5701;

  corral_source_split_5701:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p158, 12);
    goto corral_source_split_5702;

  corral_source_split_5702:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5703;

  corral_source_split_5703:
    assume {:verifier.code 0} true;
    $p160 := $load.ref($M.8, $p159);
    goto corral_source_split_5704;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    $i161 := $zext.i16.i32($i112);
    goto corral_source_split_5705;

  corral_source_split_5705:
    assume {:verifier.code 0} true;
    $i162 := $mul.i32($i161, 8);
    goto corral_source_split_5706;

  corral_source_split_5706:
    assume {:verifier.code 0} true;
    $i163 := $add.i32($i162, $i154);
    goto corral_source_split_5707;

  corral_source_split_5707:
    assume {:verifier.code 0} true;
    $i164 := $sext.i32.i64($i163);
    goto corral_source_split_5708;

  corral_source_split_5708:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($p160, $mul.ref($i164, 1));
    goto corral_source_split_5709;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    $i166 := $load.i8($M.8, $p165);
    goto corral_source_split_5710;

  corral_source_split_5710:
    assume {:verifier.code 0} true;
    $i167 := $add.i32($i154, 1);
    goto corral_source_split_5711;

  corral_source_split_5711:
    assume {:verifier.code 0} true;
    $i168 := $mul.i32($i167, 3);
    goto corral_source_split_5712;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    $i169 := $sext.i32.i64($i168);
    goto corral_source_split_5713;

  corral_source_split_5713:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref($i169, 1));
    goto corral_source_split_5714;

  corral_source_split_5714:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p170, $i166);
    goto corral_source_split_5715;

  corral_source_split_5715:
    assume {:verifier.code 0} true;
    $i171 := $M.10;
    goto corral_source_split_5716;

  corral_source_split_5716:
    assume {:verifier.code 0} true;
    $i172 := $and.i32($i171, 4);
    goto corral_source_split_5717;

  corral_source_split_5717:
    assume {:verifier.code 0} true;
    $i173 := $ne.i32($i172, 0);
    goto corral_source_split_5718;

  corral_source_split_5718:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i173 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $i185 := $mul.i32($i154, 3);
    goto corral_source_split_5733;

  corral_source_split_5733:
    assume {:verifier.code 0} true;
    $i186 := $add.i32($i185, 4);
    goto corral_source_split_5734;

  corral_source_split_5734:
    assume {:verifier.code 0} true;
    $i187 := $sext.i32.i64($i186);
    goto corral_source_split_5735;

  corral_source_split_5735:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref($i187, 1));
    goto corral_source_split_5736;

  corral_source_split_5736:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p188, 0);
    goto corral_source_split_5737;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    $i189 := $add.i32($i154, 1);
    call {:si_unique_call 832} {:cexpr "i"} boogie_si_record_i32($i189);
    goto corral_source_split_5738;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    $i190 := $slt.i32($i189, $i152);
    goto corral_source_split_5739;

  corral_source_split_5739:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i190 == 1);
    goto corral_source_split_5741;

  corral_source_split_5741:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb64:
    assume $i190 == 1;
    assume {:verifier.code 0} true;
    $i154 := $i189;
    goto $bb64_dummy;

  $bb61:
    assume $i173 == 1;
    goto corral_source_split_5720;

  corral_source_split_5720:
    assume {:verifier.code 0} true;
    $i174 := $zext.i16.i32($i112);
    goto corral_source_split_5721;

  corral_source_split_5721:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5722;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    $p176 := $load.ref($M.8, $p175);
    goto corral_source_split_5723;

  corral_source_split_5723:
    assume {:verifier.code 0} true;
    $i177 := $zext.i16.i32($i112);
    goto corral_source_split_5724;

  corral_source_split_5724:
    assume {:verifier.code 0} true;
    $i178 := $mul.i32($i177, 8);
    goto corral_source_split_5725;

  corral_source_split_5725:
    assume {:verifier.code 0} true;
    $i179 := $add.i32($i178, $i154);
    goto corral_source_split_5726;

  corral_source_split_5726:
    assume {:verifier.code 0} true;
    $i180 := $sext.i32.i64($i179);
    goto corral_source_split_5727;

  corral_source_split_5727:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($p176, $mul.ref($i180, 1));
    goto corral_source_split_5728;

  corral_source_split_5728:
    assume {:verifier.code 0} true;
    $i182 := $load.i8($M.8, $p181);
    goto corral_source_split_5729;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    $i183 := $zext.i8.i32($i182);
    goto corral_source_split_5730;

  corral_source_split_5730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 831} vslice_dummy_var_198 := printk.ref.ref.i32.i32.i32(.str.128, .str.124, $i174, $i154, $i183);
    goto corral_source_split_5731;

  corral_source_split_5731:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb32:
    assume $i111 == 1;
    goto corral_source_split_5611;

  corral_source_split_5611:
    assume {:verifier.code 0} true;
    $i114 := 0;
    goto $bb35;

  $bb35:
    call $p115, $p116, $p117, $i118, $i119, $i120, $p121, $i122, $p123, $p124, $p125, $i126, $i127, $i128, $i129, $i140, $i141, $i142, $i143, $i144, $i114, $i145, $i146, $p612, $p613, $p614, $i615, $i616, $i617, $i618, $p619, $i620, $p621, $p622, $p623, $p624, $p625, $i626, $i627, $i628, $i629, $p630, $i631, $p632, $p633, $p634, $p635, $p636, $i637, $i638, $i639, $i640, $p641, $i642, $p643, $p644, $p645, $p646, $p647, $i648, $i649, $i650, $i651, $p652, $i653, $p654, $p655, $p656, $p657, $p658, $i659, $i660, $i661, $i662, $p663, $i664, $p665, $p666, $p667, $p668, $p669, $i670, $i671, $i672, $i673, $p674, $i675, $p676, $p677, $p678, $p679, $p680, $i681, $i682, $i683, $i684, $p685, $i686, $p687, $p688 := mxl111sf_i2c_hw_xfer_msg_loop_$bb35($p0, $p1, $p2, $i110, $p115, $p116, $p117, $i118, $i119, $i120, $p121, $i122, $p123, $p124, $p125, $i126, $i127, $i128, $i129, $i140, $i141, $i142, $i143, $i144, $i114, $i145, $i146, $p612, $p613, $p614, $i615, $i616, $i617, $i618, $p619, $i620, $p621, $p622, $p623, $p624, $p625, $i626, $i627, $i628, $i629, $p630, $i631, $p632, $p633, $p634, $p635, $p636, $i637, $i638, $i639, $i640, $p641, $i642, $p643, $p644, $p645, $p646, $p647, $i648, $i649, $i650, $i651, $p652, $i653, $p654, $p655, $p656, $p657, $p658, $i659, $i660, $i661, $i662, $p663, $i664, $p665, $p666, $p667, $p668, $p669, $i670, $i671, $i672, $i673, $p674, $i675, $p676, $p677, $p678, $p679, $p680, $i681, $i682, $i683, $i684, $p685, $i686, $p687, $p688);
    goto $bb35_last;

  corral_source_split_5613:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(2, 1));
    goto corral_source_split_5615;

  corral_source_split_5615:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p115, 12);
    goto corral_source_split_5616;

  corral_source_split_5616:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5617;

  corral_source_split_5617:
    assume {:verifier.code 0} true;
    $p117 := $load.ref($M.8, $p116);
    goto corral_source_split_5618;

  corral_source_split_5618:
    assume {:verifier.code 0} true;
    $i118 := $zext.i16.i32($i114);
    goto corral_source_split_5619;

  corral_source_split_5619:
    assume {:verifier.code 0} true;
    $i119 := $mul.i32($i118, 8);
    goto corral_source_split_5620;

  corral_source_split_5620:
    assume {:verifier.code 0} true;
    $i120 := $sext.i32.i64($i119);
    goto corral_source_split_5621;

  corral_source_split_5621:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($p117, $mul.ref($i120, 1));
    goto corral_source_split_5622;

  corral_source_split_5622:
    assume {:verifier.code 0} true;
    $i122 := $load.i8($M.8, $p121);
    goto corral_source_split_5623;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(3, 1));
    goto corral_source_split_5624;

  corral_source_split_5624:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p123, $i122);
    goto corral_source_split_5625;

  corral_source_split_5625:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(4, 1));
    goto corral_source_split_5626;

  corral_source_split_5626:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p124, 0);
    goto corral_source_split_5627;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p612 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(5, 1));
    goto corral_source_split_5629;

  corral_source_split_5629:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p612, 12);
    goto corral_source_split_5630;

  corral_source_split_5630:
    assume {:verifier.code 0} true;
    $p613 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5631;

  corral_source_split_5631:
    assume {:verifier.code 0} true;
    $p614 := $load.ref($M.8, $p613);
    goto corral_source_split_5632;

  corral_source_split_5632:
    assume {:verifier.code 0} true;
    $i615 := $zext.i16.i32($i114);
    goto corral_source_split_5633;

  corral_source_split_5633:
    assume {:verifier.code 0} true;
    $i616 := $mul.i32($i615, 8);
    goto corral_source_split_5634;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    $i617 := $add.i32($i616, 1);
    goto corral_source_split_5635;

  corral_source_split_5635:
    assume {:verifier.code 0} true;
    $i618 := $sext.i32.i64($i617);
    goto corral_source_split_5636;

  corral_source_split_5636:
    assume {:verifier.code 0} true;
    $p619 := $add.ref($p614, $mul.ref($i618, 1));
    goto corral_source_split_5637;

  corral_source_split_5637:
    assume {:verifier.code 0} true;
    $i620 := $load.i8($M.8, $p619);
    goto corral_source_split_5638;

  corral_source_split_5638:
    assume {:verifier.code 0} true;
    $p621 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(6, 1));
    goto corral_source_split_5639;

  corral_source_split_5639:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p621, $i620);
    goto corral_source_split_5640;

  corral_source_split_5640:
    assume {:verifier.code 0} true;
    $p622 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(7, 1));
    goto corral_source_split_5641;

  corral_source_split_5641:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p622, 0);
    goto corral_source_split_5642;

  corral_source_split_5642:
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb232:
    assume {:verifier.code 0} true;
    $p623 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(8, 1));
    goto corral_source_split_6407;

  corral_source_split_6407:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p623, 12);
    goto corral_source_split_6408;

  corral_source_split_6408:
    assume {:verifier.code 0} true;
    $p624 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6409;

  corral_source_split_6409:
    assume {:verifier.code 0} true;
    $p625 := $load.ref($M.8, $p624);
    goto corral_source_split_6410;

  corral_source_split_6410:
    assume {:verifier.code 0} true;
    $i626 := $zext.i16.i32($i114);
    goto corral_source_split_6411;

  corral_source_split_6411:
    assume {:verifier.code 0} true;
    $i627 := $mul.i32($i626, 8);
    goto corral_source_split_6412;

  corral_source_split_6412:
    assume {:verifier.code 0} true;
    $i628 := $add.i32($i627, 2);
    goto corral_source_split_6413;

  corral_source_split_6413:
    assume {:verifier.code 0} true;
    $i629 := $sext.i32.i64($i628);
    goto corral_source_split_6414;

  corral_source_split_6414:
    assume {:verifier.code 0} true;
    $p630 := $add.ref($p625, $mul.ref($i629, 1));
    goto corral_source_split_6415;

  corral_source_split_6415:
    assume {:verifier.code 0} true;
    $i631 := $load.i8($M.8, $p630);
    goto corral_source_split_6416;

  corral_source_split_6416:
    assume {:verifier.code 0} true;
    $p632 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(9, 1));
    goto corral_source_split_6417;

  corral_source_split_6417:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p632, $i631);
    goto corral_source_split_6418;

  corral_source_split_6418:
    assume {:verifier.code 0} true;
    $p633 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(10, 1));
    goto corral_source_split_6419;

  corral_source_split_6419:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p633, 0);
    goto corral_source_split_6420;

  corral_source_split_6420:
    assume {:verifier.code 0} true;
    goto $bb233;

  $bb233:
    assume {:verifier.code 0} true;
    $p634 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(11, 1));
    goto corral_source_split_6422;

  corral_source_split_6422:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p634, 12);
    goto corral_source_split_6423;

  corral_source_split_6423:
    assume {:verifier.code 0} true;
    $p635 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6424;

  corral_source_split_6424:
    assume {:verifier.code 0} true;
    $p636 := $load.ref($M.8, $p635);
    goto corral_source_split_6425;

  corral_source_split_6425:
    assume {:verifier.code 0} true;
    $i637 := $zext.i16.i32($i114);
    goto corral_source_split_6426;

  corral_source_split_6426:
    assume {:verifier.code 0} true;
    $i638 := $mul.i32($i637, 8);
    goto corral_source_split_6427;

  corral_source_split_6427:
    assume {:verifier.code 0} true;
    $i639 := $add.i32($i638, 3);
    goto corral_source_split_6428;

  corral_source_split_6428:
    assume {:verifier.code 0} true;
    $i640 := $sext.i32.i64($i639);
    goto corral_source_split_6429;

  corral_source_split_6429:
    assume {:verifier.code 0} true;
    $p641 := $add.ref($p636, $mul.ref($i640, 1));
    goto corral_source_split_6430;

  corral_source_split_6430:
    assume {:verifier.code 0} true;
    $i642 := $load.i8($M.8, $p641);
    goto corral_source_split_6431;

  corral_source_split_6431:
    assume {:verifier.code 0} true;
    $p643 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(12, 1));
    goto corral_source_split_6432;

  corral_source_split_6432:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p643, $i642);
    goto corral_source_split_6433;

  corral_source_split_6433:
    assume {:verifier.code 0} true;
    $p644 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(13, 1));
    goto corral_source_split_6434;

  corral_source_split_6434:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p644, 0);
    goto corral_source_split_6435;

  corral_source_split_6435:
    assume {:verifier.code 0} true;
    goto $bb234;

  $bb234:
    assume {:verifier.code 0} true;
    $p645 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(14, 1));
    goto corral_source_split_6437;

  corral_source_split_6437:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p645, 12);
    goto corral_source_split_6438;

  corral_source_split_6438:
    assume {:verifier.code 0} true;
    $p646 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6439;

  corral_source_split_6439:
    assume {:verifier.code 0} true;
    $p647 := $load.ref($M.8, $p646);
    goto corral_source_split_6440;

  corral_source_split_6440:
    assume {:verifier.code 0} true;
    $i648 := $zext.i16.i32($i114);
    goto corral_source_split_6441;

  corral_source_split_6441:
    assume {:verifier.code 0} true;
    $i649 := $mul.i32($i648, 8);
    goto corral_source_split_6442;

  corral_source_split_6442:
    assume {:verifier.code 0} true;
    $i650 := $add.i32($i649, 4);
    goto corral_source_split_6443;

  corral_source_split_6443:
    assume {:verifier.code 0} true;
    $i651 := $sext.i32.i64($i650);
    goto corral_source_split_6444;

  corral_source_split_6444:
    assume {:verifier.code 0} true;
    $p652 := $add.ref($p647, $mul.ref($i651, 1));
    goto corral_source_split_6445;

  corral_source_split_6445:
    assume {:verifier.code 0} true;
    $i653 := $load.i8($M.8, $p652);
    goto corral_source_split_6446;

  corral_source_split_6446:
    assume {:verifier.code 0} true;
    $p654 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(15, 1));
    goto corral_source_split_6447;

  corral_source_split_6447:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p654, $i653);
    goto corral_source_split_6448;

  corral_source_split_6448:
    assume {:verifier.code 0} true;
    $p655 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(16, 1));
    goto corral_source_split_6449;

  corral_source_split_6449:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p655, 0);
    goto corral_source_split_6450;

  corral_source_split_6450:
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb235:
    assume {:verifier.code 0} true;
    $p656 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(17, 1));
    goto corral_source_split_6452;

  corral_source_split_6452:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p656, 12);
    goto corral_source_split_6453;

  corral_source_split_6453:
    assume {:verifier.code 0} true;
    $p657 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6454;

  corral_source_split_6454:
    assume {:verifier.code 0} true;
    $p658 := $load.ref($M.8, $p657);
    goto corral_source_split_6455;

  corral_source_split_6455:
    assume {:verifier.code 0} true;
    $i659 := $zext.i16.i32($i114);
    goto corral_source_split_6456;

  corral_source_split_6456:
    assume {:verifier.code 0} true;
    $i660 := $mul.i32($i659, 8);
    goto corral_source_split_6457;

  corral_source_split_6457:
    assume {:verifier.code 0} true;
    $i661 := $add.i32($i660, 5);
    goto corral_source_split_6458;

  corral_source_split_6458:
    assume {:verifier.code 0} true;
    $i662 := $sext.i32.i64($i661);
    goto corral_source_split_6459;

  corral_source_split_6459:
    assume {:verifier.code 0} true;
    $p663 := $add.ref($p658, $mul.ref($i662, 1));
    goto corral_source_split_6460;

  corral_source_split_6460:
    assume {:verifier.code 0} true;
    $i664 := $load.i8($M.8, $p663);
    goto corral_source_split_6461;

  corral_source_split_6461:
    assume {:verifier.code 0} true;
    $p665 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(18, 1));
    goto corral_source_split_6462;

  corral_source_split_6462:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p665, $i664);
    goto corral_source_split_6463;

  corral_source_split_6463:
    assume {:verifier.code 0} true;
    $p666 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(19, 1));
    goto corral_source_split_6464;

  corral_source_split_6464:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p666, 0);
    goto corral_source_split_6465;

  corral_source_split_6465:
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb236:
    assume {:verifier.code 0} true;
    $p667 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(20, 1));
    goto corral_source_split_6467;

  corral_source_split_6467:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p667, 12);
    goto corral_source_split_6468;

  corral_source_split_6468:
    assume {:verifier.code 0} true;
    $p668 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6469;

  corral_source_split_6469:
    assume {:verifier.code 0} true;
    $p669 := $load.ref($M.8, $p668);
    goto corral_source_split_6470;

  corral_source_split_6470:
    assume {:verifier.code 0} true;
    $i670 := $zext.i16.i32($i114);
    goto corral_source_split_6471;

  corral_source_split_6471:
    assume {:verifier.code 0} true;
    $i671 := $mul.i32($i670, 8);
    goto corral_source_split_6472;

  corral_source_split_6472:
    assume {:verifier.code 0} true;
    $i672 := $add.i32($i671, 6);
    goto corral_source_split_6473;

  corral_source_split_6473:
    assume {:verifier.code 0} true;
    $i673 := $sext.i32.i64($i672);
    goto corral_source_split_6474;

  corral_source_split_6474:
    assume {:verifier.code 0} true;
    $p674 := $add.ref($p669, $mul.ref($i673, 1));
    goto corral_source_split_6475;

  corral_source_split_6475:
    assume {:verifier.code 0} true;
    $i675 := $load.i8($M.8, $p674);
    goto corral_source_split_6476;

  corral_source_split_6476:
    assume {:verifier.code 0} true;
    $p676 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(21, 1));
    goto corral_source_split_6477;

  corral_source_split_6477:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p676, $i675);
    goto corral_source_split_6478;

  corral_source_split_6478:
    assume {:verifier.code 0} true;
    $p677 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(22, 1));
    goto corral_source_split_6479;

  corral_source_split_6479:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p677, 0);
    goto corral_source_split_6480;

  corral_source_split_6480:
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb237:
    assume {:verifier.code 0} true;
    $p678 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(23, 1));
    goto corral_source_split_6482;

  corral_source_split_6482:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p678, 12);
    goto corral_source_split_6483;

  corral_source_split_6483:
    assume {:verifier.code 0} true;
    $p679 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6484;

  corral_source_split_6484:
    assume {:verifier.code 0} true;
    $p680 := $load.ref($M.8, $p679);
    goto corral_source_split_6485;

  corral_source_split_6485:
    assume {:verifier.code 0} true;
    $i681 := $zext.i16.i32($i114);
    goto corral_source_split_6486;

  corral_source_split_6486:
    assume {:verifier.code 0} true;
    $i682 := $mul.i32($i681, 8);
    goto corral_source_split_6487;

  corral_source_split_6487:
    assume {:verifier.code 0} true;
    $i683 := $add.i32($i682, 7);
    goto corral_source_split_6488;

  corral_source_split_6488:
    assume {:verifier.code 0} true;
    $i684 := $sext.i32.i64($i683);
    goto corral_source_split_6489;

  corral_source_split_6489:
    assume {:verifier.code 0} true;
    $p685 := $add.ref($p680, $mul.ref($i684, 1));
    goto corral_source_split_6490;

  corral_source_split_6490:
    assume {:verifier.code 0} true;
    $i686 := $load.i8($M.8, $p685);
    goto corral_source_split_6491;

  corral_source_split_6491:
    assume {:verifier.code 0} true;
    $p687 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(24, 1));
    goto corral_source_split_6492;

  corral_source_split_6492:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p687, $i686);
    goto corral_source_split_6493;

  corral_source_split_6493:
    assume {:verifier.code 0} true;
    $p688 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(25, 1));
    goto corral_source_split_6494;

  corral_source_split_6494:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p688, 0);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p125 := $bitcast.ref.ref($p2);
    goto corral_source_split_5644;

  corral_source_split_5644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 825} $i126 := mxl111sf_i2c_send_data($p0, 0, $p125);
    call {:si_unique_call 826} {:cexpr "ret"} boogie_si_record_i32($i126);
    goto corral_source_split_5645;

  corral_source_split_5645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 827} $i127 := mxl111sf_i2c_check_status($p0);
    call {:si_unique_call 828} {:cexpr "tmp___0"} boogie_si_record_i8($i127);
    goto corral_source_split_5646;

  corral_source_split_5646:
    assume {:verifier.code 0} true;
    $i128 := $zext.i8.i32($i127);
    goto corral_source_split_5647;

  corral_source_split_5647:
    assume {:verifier.code 0} true;
    $i129 := $eq.i32($i128, 1);
    goto corral_source_split_5648;

  corral_source_split_5648:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i129 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $i140 := $zext.i16.i32($i114);
    goto corral_source_split_5668;

  corral_source_split_5668:
    assume {:verifier.code 0} true;
    $i141 := $add.i32($i140, 1);
    goto corral_source_split_5669;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    $i142 := $trunc.i32.i16($i141);
    call {:si_unique_call 830} {:cexpr "index"} boogie_si_record_i16($i142);
    goto corral_source_split_5670;

  corral_source_split_5670:
    assume {:verifier.code 0} true;
    $i143 := $zext.i16.i32($i142);
    goto corral_source_split_5671;

  corral_source_split_5671:
    assume {:verifier.code 0} true;
    $i144 := $slt.i32($i143, $i110);
    goto corral_source_split_5672;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    $i145, $i146 := $i142, $i126;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i144 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5674;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    $i112, $i113 := $i145, $i146;
    goto $bb34;

  $bb47:
    assume $i144 == 1;
    assume {:verifier.code 0} true;
    $i114 := $i142;
    goto $bb47_dummy;

  $bb41:
    assume $i129 == 1;
    goto corral_source_split_5650;

  corral_source_split_5650:
    assume {:verifier.code 0} true;
    $i130 := $M.10;
    goto corral_source_split_5651;

  corral_source_split_5651:
    assume {:verifier.code 0} true;
    $i131 := $and.i32($i130, 4);
    goto corral_source_split_5652;

  corral_source_split_5652:
    assume {:verifier.code 0} true;
    $i132 := $ne.i32($i131, 0);
    goto corral_source_split_5653;

  corral_source_split_5653:
    assume {:verifier.code 0} true;
    assume {:branchcond $i132} true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i132 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(2, 1));
    goto corral_source_split_5661;

  corral_source_split_5661:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p137, 0);
    goto corral_source_split_5662;

  corral_source_split_5662:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(3, 1));
    goto corral_source_split_5663;

  corral_source_split_5663:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p138, 78);
    goto corral_source_split_5664;

  corral_source_split_5664:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(4, 1));
    goto corral_source_split_5665;

  corral_source_split_5665:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p139, 3);
    goto corral_source_split_5666;

  corral_source_split_5666:
    assume {:verifier.code 0} true;
    $i93 := $sub.i32(0, 5);
    goto $bb27;

  $bb43:
    assume $i132 == 1;
    goto corral_source_split_5655;

  corral_source_split_5655:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5656;

  corral_source_split_5656:
    assume {:verifier.code 0} true;
    $i134 := $load.i16($M.8, $p133);
    goto corral_source_split_5657;

  corral_source_split_5657:
    assume {:verifier.code 0} true;
    $i135 := $zext.i16.i32($i134);
    goto corral_source_split_5658;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 829} vslice_dummy_var_197 := printk.ref.ref.i32(.str.126, .str.124, $i135);
    goto corral_source_split_5659;

  corral_source_split_5659:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb29:
    assume $i106 == 1;
    goto corral_source_split_5603;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    $i107 := $zext.i16.i32($i98);
    goto corral_source_split_5604;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    $i108 := $zext.i16.i32($i103);
    goto corral_source_split_5605;

  corral_source_split_5605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 824} vslice_dummy_var_196 := printk.ref.ref.i32.i32(.str.127, .str.124, $i107, $i108);
    goto corral_source_split_5606;

  corral_source_split_5606:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb22:
    assume $i82 == 1;
    goto corral_source_split_5523;

  corral_source_split_5523:
    assume {:verifier.code 0} true;
    $i83 := $M.10;
    goto corral_source_split_5524;

  corral_source_split_5524:
    assume {:verifier.code 0} true;
    $i84 := $and.i32($i83, 4);
    goto corral_source_split_5525;

  corral_source_split_5525:
    assume {:verifier.code 0} true;
    $i85 := $ne.i32($i84, 0);
    goto corral_source_split_5526;

  corral_source_split_5526:
    assume {:verifier.code 0} true;
    assume {:branchcond $i85} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(2, 1));
    goto corral_source_split_5534;

  corral_source_split_5534:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p90, 0);
    goto corral_source_split_5535;

  corral_source_split_5535:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(3, 1));
    goto corral_source_split_5536;

  corral_source_split_5536:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p91, 78);
    goto corral_source_split_5537;

  corral_source_split_5537:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(4, 1));
    goto corral_source_split_5538;

  corral_source_split_5538:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p92, 3);
    goto corral_source_split_5539;

  corral_source_split_5539:
    assume {:verifier.code 0} true;
    $i93 := $sub.i32(0, 5);
    goto $bb27;

  $bb24:
    assume $i85 == 1;
    goto corral_source_split_5528;

  corral_source_split_5528:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5529;

  corral_source_split_5529:
    assume {:verifier.code 0} true;
    $i87 := $load.i16($M.8, $p86);
    goto corral_source_split_5530;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    $i88 := $zext.i16.i32($i87);
    goto corral_source_split_5531;

  corral_source_split_5531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 818} vslice_dummy_var_192 := printk.ref.ref.i32(.str.126, .str.124, $i88);
    goto corral_source_split_5532;

  corral_source_split_5532:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb19:
    assume $i59 == 1;
    goto corral_source_split_5490;

  corral_source_split_5490:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_5491;

  corral_source_split_5491:
    assume {:verifier.code 0} true;
    $i61 := $load.i16($M.8, $p60);
    goto corral_source_split_5492;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    $i62 := $zext.i16.i32($i61);
    goto corral_source_split_5493;

  corral_source_split_5493:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5494;

  corral_source_split_5494:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.8, $p63);
    goto corral_source_split_5495;

  corral_source_split_5495:
    assume {:verifier.code 0} true;
    $i65 := $load.i8($M.8, $p64);
    goto corral_source_split_5496;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    $i66 := $zext.i8.i32($i65);
    goto corral_source_split_5497;

  corral_source_split_5497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 813} vslice_dummy_var_191 := printk.ref.ref.i32.i32(.str.125, .str.124, $i62, $i66);
    goto corral_source_split_5498;

  corral_source_split_5498:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_5403;

  corral_source_split_5403:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5404;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    $i10 := $load.i16($M.8, $p9);
    goto corral_source_split_5405;

  corral_source_split_5405:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i10);
    goto corral_source_split_5406;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_5407;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    $i13 := $load.i16($M.8, $p12);
    goto corral_source_split_5408;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i13);
    goto corral_source_split_5409;

  corral_source_split_5409:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i14, 1);
    goto corral_source_split_5410;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_5411;

  corral_source_split_5411:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i16 == 1);
    goto corral_source_split_5418;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    $i20 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_5420;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_5421;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    $i22 := $load.i16($M.8, $p21);
    goto corral_source_split_5422;

  corral_source_split_5422:
    assume {:verifier.code 0} true;
    $i23 := $zext.i16.i32($i22);
    goto corral_source_split_5423;

  corral_source_split_5423:
    assume {:verifier.code 0} true;
    $i24 := $and.i32($i23, 1);
    goto corral_source_split_5424;

  corral_source_split_5424:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 0);
    goto corral_source_split_5425;

  corral_source_split_5425:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i25 == 1);
    goto corral_source_split_5432;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    $i29 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_5434;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} vslice_dummy_var_190 := printk.ref.ref.i32.i32.i32(.str.123, .str.124, $i11, $i20, $i29);
    goto corral_source_split_5435;

  corral_source_split_5435:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i25 == 1;
    goto corral_source_split_5427;

  corral_source_split_5427:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_5428;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    $i27 := $load.i16($M.8, $p26);
    goto corral_source_split_5429;

  corral_source_split_5429:
    assume {:verifier.code 0} true;
    $i28 := $zext.i16.i32($i27);
    goto corral_source_split_5430;

  corral_source_split_5430:
    assume {:verifier.code 0} true;
    $i29 := $i28;
    goto $bb8;

  $bb3:
    assume $i16 == 1;
    goto corral_source_split_5413;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_5414;

  corral_source_split_5414:
    assume {:verifier.code 0} true;
    $i18 := $load.i16($M.8, $p17);
    goto corral_source_split_5415;

  corral_source_split_5415:
    assume {:verifier.code 0} true;
    $i19 := $zext.i16.i32($i18);
    goto corral_source_split_5416;

  corral_source_split_5416:
    assume {:verifier.code 0} true;
    $i20 := $i19;
    goto $bb5;

  $bb173_dummy:
    assume false;
    return;

  $bb168_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6162;

  $bb156_dummy:
    assume false;
    return;

  $bb154_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6110;

  $bb129_dummy:
    assume false;
    return;

  $bb121_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6009;

  $bb139_dummy:
    assume false;
    return;

  $bb107_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5918;

  $bb142_dummy:
    assume false;
    return;

  $bb95_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5877;

  $bb64_dummy:
    assume false;
    return;

  $bb59_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5696;

  $bb47_dummy:
    assume false;
    return;

  $bb35_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5613;
}



const mxl111sf_i2c_sw_xfer_msg: ref;

axiom mxl111sf_i2c_sw_xfer_msg == $sub.ref(0, 370732);

procedure mxl111sf_i2c_sw_xfer_msg($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.15, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr;



implementation mxl111sf_i2c_sw_xfer_msg($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $i7: i16;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $i19: i1;
  var $p21: ref;
  var $i22: i16;
  var $i23: i32;
  var $i24: i32;
  var $i25: i8;
  var $i26: i32;
  var $i27: i32;
  var $i28: i8;
  var $i29: i32;
  var $i30: i8;
  var $i31: i32;
  var $i32: i1;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i32;
  var $i37: i1;
  var $i39: i1;
  var $p41: ref;
  var $i42: i16;
  var $i43: i32;
  var $i44: i1;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var $p49: ref;
  var $i50: i32;
  var $i51: i1;
  var $i52: i32;
  var $i53: i1;
  var $i54: i32;
  var $i55: i32;
  var $i56: i1;
  var $i58: i1;
  var $i59: i32;
  var $p61: ref;
  var $i62: i16;
  var $i63: i32;
  var $i64: i32;
  var $i65: i1;
  var $i67: i32;
  var $i68: i16;
  var $i69: i32;
  var $i70: i1;
  var $i45: i32;
  var $i72: i32;
  var $i73: i1;
  var $i74: i32;
  var $i75: i1;
  var $i76: i32;
  var $i77: i32;
  var $i78: i1;
  var $i80: i1;
  var $i82: i32;
  var $i83: i1;
  var $i84: i32;
  var $i85: i1;
  var $i86: i32;
  var $i87: i32;
  var $i88: i1;
  var $i90: i1;
  var $p91: ref;
  var $i92: i16;
  var $i93: i32;
  var $i94: i32;
  var $i95: i8;
  var $i96: i32;
  var $i97: i8;
  var $i98: i32;
  var $i99: i1;
  var $i100: i32;
  var $i101: i1;
  var $i102: i32;
  var $i103: i32;
  var $i104: i1;
  var $i106: i1;
  var $p108: ref;
  var $i109: i16;
  var $i110: i32;
  var $i111: i1;
  var $p114: ref;
  var $p115: ref;
  var $i116: i64;
  var $p117: ref;
  var $i118: i8;
  var $i119: i32;
  var $i120: i8;
  var $i121: i32;
  var $i122: i1;
  var $i123: i32;
  var $i124: i1;
  var $i125: i32;
  var $i126: i32;
  var $i127: i1;
  var $i129: i1;
  var $i130: i32;
  var $i132: i32;
  var $i133: i16;
  var $i134: i32;
  var $i135: i1;
  var $i113: i32;
  var $i136: i32;
  var $i112: i32;
  var $i81: i32;
  var $i20: i32;
  var vslice_dummy_var_210: i32;
  var vslice_dummy_var_211: i32;
  var vslice_dummy_var_212: i32;
  var vslice_dummy_var_213: i32;
  var vslice_dummy_var_214: i32;
  var vslice_dummy_var_215: i32;
  var vslice_dummy_var_216: i32;
  var vslice_dummy_var_217: i32;
  var vslice_dummy_var_218: i32;
  var vslice_dummy_var_219: i32;
  var vslice_dummy_var_220: i32;
  var vslice_dummy_var_221: i32;
  var vslice_dummy_var_222: i32;
  var vslice_dummy_var_223: i32;
  var vslice_dummy_var_224: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6567;

  corral_source_split_6567:
    assume {:verifier.code 0} true;
    $i2 := $M.10;
    goto corral_source_split_6568;

  corral_source_split_6568:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 4);
    goto corral_source_split_6569;

  corral_source_split_6569:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_6570;

  corral_source_split_6570:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_6575;

  corral_source_split_6575:
    assume {:verifier.code 0} true;
    $i7 := $load.i16($M.8, $p6);
    goto corral_source_split_6576;

  corral_source_split_6576:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i32($i7);
    goto corral_source_split_6577;

  corral_source_split_6577:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 1);
    goto corral_source_split_6578;

  corral_source_split_6578:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_6579;

  corral_source_split_6579:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    goto corral_source_split_6587;

  corral_source_split_6587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 876} $i82 := mxl111sf_i2c_start($p0);
    call {:si_unique_call 877} {:cexpr "ret"} boogie_si_record_i32($i82);
    goto corral_source_split_6588;

  corral_source_split_6588:
    assume {:verifier.code 0} true;
    $i83 := $slt.i32($i82, 0);
    goto corral_source_split_6589;

  corral_source_split_6589:
    assume {:verifier.code 0} true;
    $i84 := $zext.i1.i32($i83);
    call {:si_unique_call 878} {:cexpr "__ret___3"} boogie_si_record_i32($i84);
    goto corral_source_split_6590;

  corral_source_split_6590:
    assume {:verifier.code 0} true;
    $i85 := $ne.i32($i84, 0);
    goto corral_source_split_6591;

  corral_source_split_6591:
    assume {:verifier.code 0} true;
    assume {:branchcond $i85} true;
    goto $bb55, $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    assume !($i85 == 1);
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $i90 := $ne.i32($i84, 0);
    goto corral_source_split_6710;

  corral_source_split_6710:
    assume {:verifier.code 0} true;
    assume {:branchcond $i90} true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6714;

  corral_source_split_6714:
    assume {:verifier.code 0} true;
    $i92 := $load.i16($M.8, $p91);
    goto corral_source_split_6715;

  corral_source_split_6715:
    assume {:verifier.code 0} true;
    $i93 := $zext.i16.i32($i92);
    goto corral_source_split_6716;

  corral_source_split_6716:
    assume {:verifier.code 0} true;
    $i94 := $shl.i32($i93, 1);
    goto corral_source_split_6717;

  corral_source_split_6717:
    assume {:verifier.code 0} true;
    $i95 := $trunc.i32.i8($i94);
    goto corral_source_split_6718;

  corral_source_split_6718:
    assume {:verifier.code 0} true;
    $i96 := $zext.i8.i32($i95);
    goto corral_source_split_6719;

  corral_source_split_6719:
    assume {:verifier.code 0} true;
    $i97 := $trunc.i32.i8($i96);
    goto corral_source_split_6720;

  corral_source_split_6720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 898} $i98 := mxl111sf_i2c_bitbang_sendbyte($p0, $i97);
    call {:si_unique_call 899} {:cexpr "ret"} boogie_si_record_i32($i98);
    goto corral_source_split_6721;

  corral_source_split_6721:
    assume {:verifier.code 0} true;
    $i99 := $slt.i32($i98, 0);
    goto corral_source_split_6722;

  corral_source_split_6722:
    assume {:verifier.code 0} true;
    $i100 := $zext.i1.i32($i99);
    call {:si_unique_call 900} {:cexpr "__ret___4"} boogie_si_record_i32($i100);
    goto corral_source_split_6723;

  corral_source_split_6723:
    assume {:verifier.code 0} true;
    $i101 := $ne.i32($i100, 0);
    goto corral_source_split_6724;

  corral_source_split_6724:
    assume {:verifier.code 0} true;
    assume {:branchcond $i101} true;
    goto $bb64, $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    assume !($i101 == 1);
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    $i106 := $ne.i32($i100, 0);
    goto corral_source_split_6734;

  corral_source_split_6734:
    assume {:verifier.code 0} true;
    assume {:branchcond $i106} true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_6739;

  corral_source_split_6739:
    assume {:verifier.code 0} true;
    $i109 := $load.i16($M.8, $p108);
    goto corral_source_split_6740;

  corral_source_split_6740:
    assume {:verifier.code 0} true;
    $i110 := $zext.i16.i32($i109);
    goto corral_source_split_6741;

  corral_source_split_6741:
    assume {:verifier.code 0} true;
    $i111 := $slt.i32(0, $i110);
    goto corral_source_split_6742;

  corral_source_split_6742:
    assume {:verifier.code 0} true;
    $i112 := $i98;
    assume {:branchcond $i111} true;
    goto $bb73, $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    assume !($i111 == 1);
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    call {:si_unique_call 909} vslice_dummy_var_224 := mxl111sf_i2c_stop($p0);
    assume {:verifier.code 0} true;
    $i81 := $i112;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto corral_source_split_6700;

  corral_source_split_6700:
    assume {:verifier.code 0} true;
    $i20 := $i81;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_6605;

  corral_source_split_6605:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  $bb73:
    assume $i111 == 1;
    goto corral_source_split_6744;

  corral_source_split_6744:
    assume {:verifier.code 0} true;
    $i113 := 0;
    goto $bb76;

  $bb76:
    call $p114, $p115, $i116, $p117, $i118, $i119, $i120, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $i129, $i130, $i132, $i133, $i134, $i135, $i113, $i136, vslice_dummy_var_222 := mxl111sf_i2c_sw_xfer_msg_loop_$bb76($p0, $p1, $p108, $p114, $p115, $i116, $p117, $i118, $i119, $i120, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $i129, $i130, $i132, $i133, $i134, $i135, $i113, $i136, vslice_dummy_var_222);
    goto $bb76_last;

  corral_source_split_6746:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6748;

  corral_source_split_6748:
    assume {:verifier.code 0} true;
    $p115 := $load.ref($M.8, $p114);
    goto corral_source_split_6749;

  corral_source_split_6749:
    assume {:verifier.code 0} true;
    $i116 := $sext.i32.i64($i113);
    goto corral_source_split_6750;

  corral_source_split_6750:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($p115, $mul.ref($i116, 1));
    goto corral_source_split_6751;

  corral_source_split_6751:
    assume {:verifier.code 0} true;
    $i118 := $load.i8($M.8, $p117);
    goto corral_source_split_6752;

  corral_source_split_6752:
    assume {:verifier.code 0} true;
    $i119 := $zext.i8.i32($i118);
    goto corral_source_split_6753;

  corral_source_split_6753:
    assume {:verifier.code 0} true;
    $i120 := $trunc.i32.i8($i119);
    goto corral_source_split_6754;

  corral_source_split_6754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 903} $i121 := mxl111sf_i2c_bitbang_sendbyte($p0, $i120);
    call {:si_unique_call 904} {:cexpr "ret"} boogie_si_record_i32($i121);
    goto corral_source_split_6755;

  corral_source_split_6755:
    assume {:verifier.code 0} true;
    $i122 := $slt.i32($i121, 0);
    goto corral_source_split_6756;

  corral_source_split_6756:
    assume {:verifier.code 0} true;
    $i123 := $zext.i1.i32($i122);
    call {:si_unique_call 905} {:cexpr "__ret___5"} boogie_si_record_i32($i123);
    goto corral_source_split_6757;

  corral_source_split_6757:
    assume {:verifier.code 0} true;
    $i124 := $ne.i32($i123, 0);
    goto corral_source_split_6758;

  corral_source_split_6758:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    assume !($i124 == 1);
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $i129 := $ne.i32($i123, 0);
    goto corral_source_split_6768;

  corral_source_split_6768:
    assume {:verifier.code 0} true;
    $i130 := $i121;
    assume true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i129 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $i132 := $add.i32($i113, 1);
    call {:si_unique_call 908} {:cexpr "i"} boogie_si_record_i32($i132);
    goto corral_source_split_6773;

  corral_source_split_6773:
    assume {:verifier.code 0} true;
    $i133 := $load.i16($M.8, $p108);
    goto corral_source_split_6774;

  corral_source_split_6774:
    assume {:verifier.code 0} true;
    $i134 := $zext.i16.i32($i133);
    goto corral_source_split_6775;

  corral_source_split_6775:
    assume {:verifier.code 0} true;
    $i135 := $slt.i32($i132, $i134);
    goto corral_source_split_6776;

  corral_source_split_6776:
    assume {:verifier.code 0} true;
    $i136 := $i121;
    assume true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i135 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_6778;

  corral_source_split_6778:
    assume {:verifier.code 0} true;
    $i112 := $i136;
    goto $bb75;

  $bb87:
    assume $i135 == 1;
    assume {:verifier.code 0} true;
    $i113 := $i132;
    goto $bb87_dummy;

  $bb84:
    assume $i129 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_6770;

  corral_source_split_6770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 907} vslice_dummy_var_223 := mxl111sf_i2c_stop($p0);
    goto corral_source_split_6771;

  corral_source_split_6771:
    assume {:verifier.code 0} true;
    $i20 := $i130;
    goto $bb14;

  $bb78:
    assume $i124 == 1;
    goto corral_source_split_6760;

  corral_source_split_6760:
    assume {:verifier.code 0} true;
    $i125 := $M.10;
    goto corral_source_split_6761;

  corral_source_split_6761:
    assume {:verifier.code 0} true;
    $i126 := $and.i32($i125, 16);
    goto corral_source_split_6762;

  corral_source_split_6762:
    assume {:verifier.code 0} true;
    $i127 := $ne.i32($i126, 0);
    goto corral_source_split_6763;

  corral_source_split_6763:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    assume !($i127 == 1);
    goto $bb80;

  $bb81:
    assume $i127 == 1;
    goto corral_source_split_6765;

  corral_source_split_6765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 906} vslice_dummy_var_222 := printk.ref.ref.i32.i32(.str.5, .str.143, $i121, 292);
    goto corral_source_split_6766;

  corral_source_split_6766:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb70:
    assume $i106 == 1;
    goto corral_source_split_6736;

  corral_source_split_6736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 902} vslice_dummy_var_221 := mxl111sf_i2c_stop($p0);
    goto corral_source_split_6737;

  corral_source_split_6737:
    assume {:verifier.code 0} true;
    $i20 := $i98;
    goto $bb14;

  $bb64:
    assume $i101 == 1;
    goto corral_source_split_6726;

  corral_source_split_6726:
    assume {:verifier.code 0} true;
    $i102 := $M.10;
    goto corral_source_split_6727;

  corral_source_split_6727:
    assume {:verifier.code 0} true;
    $i103 := $and.i32($i102, 16);
    goto corral_source_split_6728;

  corral_source_split_6728:
    assume {:verifier.code 0} true;
    $i104 := $ne.i32($i103, 0);
    goto corral_source_split_6729;

  corral_source_split_6729:
    assume {:verifier.code 0} true;
    assume {:branchcond $i104} true;
    goto $bb67, $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    assume !($i104 == 1);
    goto $bb66;

  $bb67:
    assume $i104 == 1;
    goto corral_source_split_6731;

  corral_source_split_6731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 901} vslice_dummy_var_220 := printk.ref.ref.i32.i32(.str.5, .str.143, $i98, 284);
    goto corral_source_split_6732;

  corral_source_split_6732:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb61:
    assume $i90 == 1;
    goto corral_source_split_6712;

  corral_source_split_6712:
    assume {:verifier.code 0} true;
    $i20 := $i82;
    goto $bb14;

  $bb55:
    assume $i85 == 1;
    goto corral_source_split_6702;

  corral_source_split_6702:
    assume {:verifier.code 0} true;
    $i86 := $M.10;
    goto corral_source_split_6703;

  corral_source_split_6703:
    assume {:verifier.code 0} true;
    $i87 := $and.i32($i86, 16);
    goto corral_source_split_6704;

  corral_source_split_6704:
    assume {:verifier.code 0} true;
    $i88 := $ne.i32($i87, 0);
    goto corral_source_split_6705;

  corral_source_split_6705:
    assume {:verifier.code 0} true;
    assume {:branchcond $i88} true;
    goto $bb58, $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    assume !($i88 == 1);
    goto $bb57;

  $bb58:
    assume $i88 == 1;
    goto corral_source_split_6707;

  corral_source_split_6707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 897} vslice_dummy_var_219 := printk.ref.ref.i32.i32(.str.5, .str.143, $i82, 279);
    goto corral_source_split_6708;

  corral_source_split_6708:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_6581;

  corral_source_split_6581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 873} $i11 := mxl111sf_i2c_start($p0);
    call {:si_unique_call 874} {:cexpr "ret"} boogie_si_record_i32($i11);
    goto corral_source_split_6582;

  corral_source_split_6582:
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i11, 0);
    goto corral_source_split_6583;

  corral_source_split_6583:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i12);
    call {:si_unique_call 875} {:cexpr "__ret"} boogie_si_record_i32($i13);
    goto corral_source_split_6584;

  corral_source_split_6584:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_6585;

  corral_source_split_6585:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i13, 0);
    goto corral_source_split_6601;

  corral_source_split_6601:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6607;

  corral_source_split_6607:
    assume {:verifier.code 0} true;
    $i22 := $load.i16($M.8, $p21);
    goto corral_source_split_6608;

  corral_source_split_6608:
    assume {:verifier.code 0} true;
    $i23 := $zext.i16.i32($i22);
    goto corral_source_split_6609;

  corral_source_split_6609:
    assume {:verifier.code 0} true;
    $i24 := $shl.i32($i23, 1);
    goto corral_source_split_6610;

  corral_source_split_6610:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i32.i8($i24);
    goto corral_source_split_6611;

  corral_source_split_6611:
    assume {:verifier.code 0} true;
    $i26 := $sext.i8.i32($i25);
    goto corral_source_split_6612;

  corral_source_split_6612:
    assume {:verifier.code 0} true;
    $i27 := $or.i32($i26, 1);
    goto corral_source_split_6613;

  corral_source_split_6613:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i32.i8($i27);
    goto corral_source_split_6614;

  corral_source_split_6614:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    goto corral_source_split_6615;

  corral_source_split_6615:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i32.i8($i29);
    goto corral_source_split_6616;

  corral_source_split_6616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 880} $i31 := mxl111sf_i2c_bitbang_sendbyte($p0, $i30);
    call {:si_unique_call 881} {:cexpr "ret"} boogie_si_record_i32($i31);
    goto corral_source_split_6617;

  corral_source_split_6617:
    assume {:verifier.code 0} true;
    $i32 := $slt.i32($i31, 0);
    goto corral_source_split_6618;

  corral_source_split_6618:
    assume {:verifier.code 0} true;
    $i33 := $zext.i1.i32($i32);
    call {:si_unique_call 882} {:cexpr "__ret___0"} boogie_si_record_i32($i33);
    goto corral_source_split_6619;

  corral_source_split_6619:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_6620;

  corral_source_split_6620:
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i33, 0);
    goto corral_source_split_6630;

  corral_source_split_6630:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_6635;

  corral_source_split_6635:
    assume {:verifier.code 0} true;
    $i42 := $load.i16($M.8, $p41);
    goto corral_source_split_6636;

  corral_source_split_6636:
    assume {:verifier.code 0} true;
    $i43 := $zext.i16.i32($i42);
    goto corral_source_split_6637;

  corral_source_split_6637:
    assume {:verifier.code 0} true;
    $i44 := $slt.i32(0, $i43);
    goto corral_source_split_6638;

  corral_source_split_6638:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 892} vslice_dummy_var_217 := mxl111sf_i2c_nack($p0);
    goto corral_source_split_6682;

  corral_source_split_6682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 893} $i72 := mxl111sf_i2c_stop($p0);
    call {:si_unique_call 894} {:cexpr "ret"} boogie_si_record_i32($i72);
    goto corral_source_split_6683;

  corral_source_split_6683:
    assume {:verifier.code 0} true;
    $i73 := $slt.i32($i72, 0);
    goto corral_source_split_6684;

  corral_source_split_6684:
    assume {:verifier.code 0} true;
    $i74 := $zext.i1.i32($i73);
    call {:si_unique_call 895} {:cexpr "__ret___2"} boogie_si_record_i32($i74);
    goto corral_source_split_6685;

  corral_source_split_6685:
    assume {:verifier.code 0} true;
    $i75 := $ne.i32($i74, 0);
    goto corral_source_split_6686;

  corral_source_split_6686:
    assume {:verifier.code 0} true;
    assume {:branchcond $i75} true;
    goto $bb45, $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    assume !($i75 == 1);
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i80 := $ne.i32($i74, 0);
    goto corral_source_split_6696;

  corral_source_split_6696:
    assume {:verifier.code 0} true;
    assume {:branchcond $i80} true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $i81 := $i72;
    goto $bb54;

  $bb51:
    assume $i80 == 1;
    goto corral_source_split_6698;

  corral_source_split_6698:
    assume {:verifier.code 0} true;
    $i20 := $i72;
    goto $bb14;

  $bb45:
    assume $i75 == 1;
    goto corral_source_split_6688;

  corral_source_split_6688:
    assume {:verifier.code 0} true;
    $i76 := $M.10;
    goto corral_source_split_6689;

  corral_source_split_6689:
    assume {:verifier.code 0} true;
    $i77 := $and.i32($i76, 16);
    goto corral_source_split_6690;

  corral_source_split_6690:
    assume {:verifier.code 0} true;
    $i78 := $ne.i32($i77, 0);
    goto corral_source_split_6691;

  corral_source_split_6691:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    assume !($i78 == 1);
    goto $bb47;

  $bb48:
    assume $i78 == 1;
    goto corral_source_split_6693;

  corral_source_split_6693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 896} vslice_dummy_var_218 := printk.ref.ref.i32.i32(.str.5, .str.143, $i72, 273);
    goto corral_source_split_6694;

  corral_source_split_6694:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb25:
    assume $i44 == 1;
    goto corral_source_split_6640;

  corral_source_split_6640:
    assume {:verifier.code 0} true;
    $i45 := 0;
    goto $bb28;

  $bb28:
    call $p46, $p47, $i48, $p49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i58, $i59, $p61, $i62, $i63, $i64, $i65, $i67, $i68, $i69, $i70, $i45, vslice_dummy_var_214, vslice_dummy_var_216 := mxl111sf_i2c_sw_xfer_msg_loop_$bb28($p0, $p1, $p41, $p46, $p47, $i48, $p49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i58, $i59, $p61, $i62, $i63, $i64, $i65, $i67, $i68, $i69, $i70, $i45, vslice_dummy_var_214, vslice_dummy_var_216);
    goto $bb28_last;

  corral_source_split_6642:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6644;

  corral_source_split_6644:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.8, $p46);
    goto corral_source_split_6645;

  corral_source_split_6645:
    assume {:verifier.code 0} true;
    $i48 := $sext.i32.i64($i45);
    goto corral_source_split_6646;

  corral_source_split_6646:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($p47, $mul.ref($i48, 1));
    goto corral_source_split_6647;

  corral_source_split_6647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 885} $i50 := mxl111sf_i2c_bitbang_recvbyte($p0, $p49);
    call {:si_unique_call 886} {:cexpr "ret"} boogie_si_record_i32($i50);
    goto corral_source_split_6648;

  corral_source_split_6648:
    assume {:verifier.code 0} true;
    $i51 := $slt.i32($i50, 0);
    goto corral_source_split_6649;

  corral_source_split_6649:
    assume {:verifier.code 0} true;
    $i52 := $zext.i1.i32($i51);
    call {:si_unique_call 887} {:cexpr "__ret___1"} boogie_si_record_i32($i52);
    goto corral_source_split_6650;

  corral_source_split_6650:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_6651;

  corral_source_split_6651:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i53 == 1);
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i58 := $ne.i32($i52, 0);
    goto corral_source_split_6661;

  corral_source_split_6661:
    assume {:verifier.code 0} true;
    $i59 := $i50;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_6666;

  corral_source_split_6666:
    assume {:verifier.code 0} true;
    $i62 := $load.i16($M.8, $p61);
    goto corral_source_split_6667;

  corral_source_split_6667:
    assume {:verifier.code 0} true;
    $i63 := $zext.i16.i32($i62);
    goto corral_source_split_6668;

  corral_source_split_6668:
    assume {:verifier.code 0} true;
    $i64 := $add.i32($i63, $sub.i32(0, 1));
    goto corral_source_split_6669;

  corral_source_split_6669:
    assume {:verifier.code 0} true;
    $i65 := $slt.i32($i45, $i64);
    goto corral_source_split_6670;

  corral_source_split_6670:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i67 := $add.i32($i45, 1);
    call {:si_unique_call 891} {:cexpr "i"} boogie_si_record_i32($i67);
    goto corral_source_split_6675;

  corral_source_split_6675:
    assume {:verifier.code 0} true;
    $i68 := $load.i16($M.8, $p41);
    goto corral_source_split_6676;

  corral_source_split_6676:
    assume {:verifier.code 0} true;
    $i69 := $zext.i16.i32($i68);
    goto corral_source_split_6677;

  corral_source_split_6677:
    assume {:verifier.code 0} true;
    $i70 := $slt.i32($i67, $i69);
    goto corral_source_split_6678;

  corral_source_split_6678:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i70 == 1);
    goto corral_source_split_6680;

  corral_source_split_6680:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb42:
    assume $i70 == 1;
    assume {:verifier.code 0} true;
    $i45 := $i67;
    goto $bb42_dummy;

  $bb39:
    assume $i65 == 1;
    goto corral_source_split_6672;

  corral_source_split_6672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} vslice_dummy_var_216 := mxl111sf_i2c_ack($p0);
    goto corral_source_split_6673;

  corral_source_split_6673:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb36:
    assume $i58 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_6663;

  corral_source_split_6663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 889} vslice_dummy_var_215 := mxl111sf_i2c_stop($p0);
    goto corral_source_split_6664;

  corral_source_split_6664:
    assume {:verifier.code 0} true;
    $i20 := $i59;
    goto $bb14;

  $bb30:
    assume $i53 == 1;
    goto corral_source_split_6653;

  corral_source_split_6653:
    assume {:verifier.code 0} true;
    $i54 := $M.10;
    goto corral_source_split_6654;

  corral_source_split_6654:
    assume {:verifier.code 0} true;
    $i55 := $and.i32($i54, 16);
    goto corral_source_split_6655;

  corral_source_split_6655:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 0);
    goto corral_source_split_6656;

  corral_source_split_6656:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i56 == 1);
    goto $bb32;

  $bb33:
    assume $i56 == 1;
    goto corral_source_split_6658;

  corral_source_split_6658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 888} vslice_dummy_var_214 := printk.ref.ref.i32.i32(.str.5, .str.143, $i50, 261);
    goto corral_source_split_6659;

  corral_source_split_6659:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb22:
    assume $i39 == 1;
    goto corral_source_split_6632;

  corral_source_split_6632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 884} vslice_dummy_var_213 := mxl111sf_i2c_stop($p0);
    goto corral_source_split_6633;

  corral_source_split_6633:
    assume {:verifier.code 0} true;
    $i20 := $i31;
    goto $bb14;

  $bb16:
    assume $i34 == 1;
    goto corral_source_split_6622;

  corral_source_split_6622:
    assume {:verifier.code 0} true;
    $i35 := $M.10;
    goto corral_source_split_6623;

  corral_source_split_6623:
    assume {:verifier.code 0} true;
    $i36 := $and.i32($i35, 16);
    goto corral_source_split_6624;

  corral_source_split_6624:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_6625;

  corral_source_split_6625:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb18;

  $bb19:
    assume $i37 == 1;
    goto corral_source_split_6627;

  corral_source_split_6627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 883} vslice_dummy_var_212 := printk.ref.ref.i32.i32(.str.5, .str.143, $i31, 253);
    goto corral_source_split_6628;

  corral_source_split_6628:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb12:
    assume $i19 == 1;
    goto corral_source_split_6603;

  corral_source_split_6603:
    assume {:verifier.code 0} true;
    $i20 := $i11;
    goto $bb14;

  $bb6:
    assume $i14 == 1;
    goto corral_source_split_6593;

  corral_source_split_6593:
    assume {:verifier.code 0} true;
    $i15 := $M.10;
    goto corral_source_split_6594;

  corral_source_split_6594:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i15, 16);
    goto corral_source_split_6595;

  corral_source_split_6595:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_6596;

  corral_source_split_6596:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb9:
    assume $i17 == 1;
    goto corral_source_split_6598;

  corral_source_split_6598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 879} vslice_dummy_var_211 := printk.ref.ref.i32.i32(.str.5, .str.143, $i11, 248);
    goto corral_source_split_6599;

  corral_source_split_6599:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_6572;

  corral_source_split_6572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 872} vslice_dummy_var_210 := printk.ref.ref(.str.17, .str.143);
    goto corral_source_split_6573;

  corral_source_split_6573:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb87_dummy:
    assume false;
    return;

  $bb76_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6746;

  $bb42_dummy:
    assume false;
    return;

  $bb28_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6642;
}



const ldv_mutex_unlock_122___0: ref;

axiom ldv_mutex_unlock_122___0 == $sub.ref(0, 371764);

procedure ldv_mutex_unlock_122___0($p0: ref);
  free requires assertsPassed;
  modifies $M.29, assertsPassed;



implementation ldv_mutex_unlock_122___0($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6780;

  corral_source_split_6780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 910} ldv_linux_kernel_locking_mutex_mutex_unlock_i2c_mutex_of_dvb_usb_device($p0);
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    goto corral_source_split_6781;

  corral_source_split_6781:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_40:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_locking_mutex_mutex_unlock_i2c_mutex_of_dvb_usb_device: ref;

axiom ldv_linux_kernel_locking_mutex_mutex_unlock_i2c_mutex_of_dvb_usb_device == $sub.ref(0, 372796);

procedure ldv_linux_kernel_locking_mutex_mutex_unlock_i2c_mutex_of_dvb_usb_device($p0: ref);
  free requires assertsPassed;
  modifies $M.29, assertsPassed;



implementation ldv_linux_kernel_locking_mutex_mutex_unlock_i2c_mutex_of_dvb_usb_device($p0: ref)
{
  var $i1: i8;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6783;

  corral_source_split_6783:
    assume {:verifier.code 0} true;
    $i1 := $M.29;
    goto corral_source_split_6784;

  corral_source_split_6784:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i8.i1($i1);
    goto corral_source_split_6785;

  corral_source_split_6785:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_6786;

  corral_source_split_6786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 911} ldv_assert_linux_kernel_locking_mutex__one_thread_double_unlock($i3);
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    goto corral_source_split_6787;

  corral_source_split_6787:
    assume {:verifier.code 0} true;
    $M.29 := 0;
    call {:si_unique_call 912} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_i2c_mutex_of_dvb_usb_device"} boogie_si_record_i8(0);
    goto corral_source_split_6788;

  corral_source_split_6788:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_43:
    assume !assertsPassed;
    return;
}



const mxl111sf_i2c_start: ref;

axiom mxl111sf_i2c_start == $sub.ref(0, 373828);

procedure mxl111sf_i2c_start($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.15, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation mxl111sf_i2c_start($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i13: i1;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $i23: i1;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $i14: i32;
  var vslice_dummy_var_225: i32;
  var vslice_dummy_var_226: i32;
  var vslice_dummy_var_227: i32;
  var vslice_dummy_var_228: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6790;

  corral_source_split_6790:
    assume {:verifier.code 0} true;
    $i1 := $M.10;
    goto corral_source_split_6791;

  corral_source_split_6791:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, 4);
    goto corral_source_split_6792;

  corral_source_split_6792:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_6793;

  corral_source_split_6793:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 914} $i5 := mxl111sf_write_reg($p0, 26, 30);
    call {:si_unique_call 915} {:cexpr "ret"} boogie_si_record_i32($i5);
    goto corral_source_split_6798;

  corral_source_split_6798:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 0);
    goto corral_source_split_6799;

  corral_source_split_6799:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    call {:si_unique_call 916} {:cexpr "__ret"} boogie_si_record_i32($i7);
    goto corral_source_split_6800;

  corral_source_split_6800:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_6801;

  corral_source_split_6801:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i7, 0);
    goto corral_source_split_6811;

  corral_source_split_6811:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 918} $i15 := mxl111sf_write_reg($p0, 26, 22);
    call {:si_unique_call 919} {:cexpr "ret"} boogie_si_record_i32($i15);
    goto corral_source_split_6817;

  corral_source_split_6817:
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i15, 0);
    goto corral_source_split_6818;

  corral_source_split_6818:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i32($i16);
    call {:si_unique_call 920} {:cexpr "__ret___0"} boogie_si_record_i32($i17);
    goto corral_source_split_6819;

  corral_source_split_6819:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_6820;

  corral_source_split_6820:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i17, 0);
    goto corral_source_split_6830;

  corral_source_split_6830:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 922} $i24 := mxl111sf_write_reg($p0, 26, 18);
    call {:si_unique_call 923} {:cexpr "ret"} boogie_si_record_i32($i24);
    goto corral_source_split_6834;

  corral_source_split_6834:
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i24, 0);
    goto corral_source_split_6835;

  corral_source_split_6835:
    assume {:verifier.code 0} true;
    $i26 := $zext.i1.i32($i25);
    call {:si_unique_call 924} {:cexpr "__ret___1"} boogie_si_record_i32($i26);
    goto corral_source_split_6836;

  corral_source_split_6836:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_6837;

  corral_source_split_6837:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i14 := $i24;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_6815;

  corral_source_split_6815:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb23:
    assume $i27 == 1;
    goto corral_source_split_6839;

  corral_source_split_6839:
    assume {:verifier.code 0} true;
    $i28 := $M.10;
    goto corral_source_split_6840;

  corral_source_split_6840:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i28, 16);
    goto corral_source_split_6841;

  corral_source_split_6841:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_6842;

  corral_source_split_6842:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb25;

  $bb26:
    assume $i30 == 1;
    goto corral_source_split_6844;

  corral_source_split_6844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 925} vslice_dummy_var_228 := printk.ref.ref.i32.i32(.str.5, .str.144, $i24, 155);
    goto corral_source_split_6845;

  corral_source_split_6845:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb20:
    assume $i23 == 1;
    goto corral_source_split_6832;

  corral_source_split_6832:
    assume {:verifier.code 0} true;
    $i14 := $i15;
    goto $bb12;

  $bb14:
    assume $i18 == 1;
    goto corral_source_split_6822;

  corral_source_split_6822:
    assume {:verifier.code 0} true;
    $i19 := $M.10;
    goto corral_source_split_6823;

  corral_source_split_6823:
    assume {:verifier.code 0} true;
    $i20 := $and.i32($i19, 16);
    goto corral_source_split_6824;

  corral_source_split_6824:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_6825;

  corral_source_split_6825:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb16;

  $bb17:
    assume $i21 == 1;
    goto corral_source_split_6827;

  corral_source_split_6827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 921} vslice_dummy_var_227 := printk.ref.ref.i32.i32(.str.5, .str.144, $i15, 150);
    goto corral_source_split_6828;

  corral_source_split_6828:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb10:
    assume $i13 == 1;
    goto corral_source_split_6813;

  corral_source_split_6813:
    assume {:verifier.code 0} true;
    $i14 := $i5;
    goto $bb12;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_6803;

  corral_source_split_6803:
    assume {:verifier.code 0} true;
    $i9 := $M.10;
    goto corral_source_split_6804;

  corral_source_split_6804:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 16);
    goto corral_source_split_6805;

  corral_source_split_6805:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_6806;

  corral_source_split_6806:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb6;

  $bb7:
    assume $i11 == 1;
    goto corral_source_split_6808;

  corral_source_split_6808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 917} vslice_dummy_var_226 := printk.ref.ref.i32.i32(.str.5, .str.144, $i5, 145);
    goto corral_source_split_6809;

  corral_source_split_6809:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_6795;

  corral_source_split_6795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 913} vslice_dummy_var_225 := printk.ref.ref(.str.17, .str.144);
    goto corral_source_split_6796;

  corral_source_split_6796:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mxl111sf_i2c_bitbang_sendbyte: ref;

axiom mxl111sf_i2c_bitbang_sendbyte == $sub.ref(0, 374860);

procedure mxl111sf_i2c_bitbang_sendbyte($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $M.15, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation mxl111sf_i2c_bitbang_sendbyte($p0: ref, $i1: i8) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $i16: i1;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i22: i8;
  var $i23: i8;
  var $i24: i32;
  var $i25: i32;
  var $i26: i8;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $i30: i32;
  var $i31: i1;
  var $i33: i32;
  var $i34: i8;
  var $i35: i32;
  var $i36: i32;
  var $i37: i8;
  var $i38: i32;
  var $i39: i1;
  var $i40: i32;
  var $i41: i32;
  var $i42: i1;
  var $i44: i32;
  var $i45: i8;
  var $i46: i32;
  var $i47: i32;
  var $i48: i8;
  var $i49: i32;
  var $i50: i1;
  var $i51: i32;
  var $i52: i32;
  var $i53: i1;
  var $i55: i32;
  var $i56: i32;
  var $i57: i32;
  var $i58: i1;
  var $i59: i32;
  var $i60: i1;
  var $i61: i32;
  var $i62: i1;
  var $i63: i32;
  var $i64: i32;
  var $i65: i1;
  var $i67: i1;
  var $i68: i32;
  var $i69: i1;
  var $i70: i32;
  var $i71: i1;
  var $i72: i32;
  var $i73: i32;
  var $i74: i1;
  var $i76: i1;
  var $i77: i32;
  var $i78: i1;
  var $i79: i32;
  var $i80: i1;
  var $i81: i32;
  var $i82: i32;
  var $i83: i1;
  var $i85: i1;
  var $i86: i32;
  var $i87: i1;
  var $i88: i32;
  var $i89: i1;
  var $i90: i32;
  var $i91: i32;
  var $i92: i1;
  var $i94: i1;
  var $i95: i8;
  var $i96: i32;
  var $i97: i32;
  var $i98: i1;
  var $i99: i32;
  var $i17: i32;
  var $i100: i32;
  var $i101: i32;
  var $i102: i1;
  var $i103: i32;
  var $i104: i8;
  var $i105: i8;
  var $i106: i32;
  var $i107: i32;
  var $i108: i8;
  var $i109: i32;
  var $i110: i1;
  var $i111: i32;
  var $i112: i32;
  var $i113: i1;
  var $i115: i8;
  var $i116: i32;
  var $i117: i32;
  var $i118: i8;
  var $i119: i32;
  var $i120: i1;
  var $i121: i32;
  var $i122: i32;
  var $i123: i1;
  var $i125: i8;
  var $i126: i32;
  var $i127: i32;
  var $i128: i8;
  var $i129: i32;
  var $i130: i1;
  var $i131: i32;
  var $i132: i32;
  var $i133: i1;
  var $i135: i32;
  var $i136: i32;
  var $i137: i1;
  var $i138: i32;
  var $i139: i8;
  var $i140: i8;
  var $i141: i32;
  var $i142: i32;
  var $i143: i8;
  var $i144: i32;
  var $i145: i1;
  var $i146: i32;
  var $i147: i32;
  var $i148: i1;
  var $i150: i8;
  var $i151: i32;
  var $i152: i32;
  var $i153: i8;
  var $i154: i32;
  var $i155: i1;
  var $i156: i32;
  var $i157: i32;
  var $i158: i1;
  var $i160: i8;
  var $i161: i32;
  var $i162: i32;
  var $i163: i8;
  var $i164: i32;
  var $i165: i1;
  var $i166: i32;
  var $i167: i32;
  var $i168: i1;
  var $i170: i32;
  var $i171: i32;
  var $i172: i1;
  var $i173: i32;
  var $i174: i8;
  var $i175: i8;
  var $i176: i32;
  var $i177: i32;
  var $i178: i8;
  var $i179: i32;
  var $i180: i1;
  var $i181: i32;
  var $i182: i32;
  var $i183: i1;
  var $i185: i8;
  var $i186: i32;
  var $i187: i32;
  var $i188: i8;
  var $i189: i32;
  var $i190: i1;
  var $i191: i32;
  var $i192: i32;
  var $i193: i1;
  var $i195: i8;
  var $i196: i32;
  var $i197: i32;
  var $i198: i8;
  var $i199: i32;
  var $i200: i1;
  var $i201: i32;
  var $i202: i32;
  var $i203: i1;
  var $i205: i32;
  var $i206: i32;
  var $i207: i1;
  var $i208: i32;
  var $i209: i8;
  var $i210: i8;
  var $i211: i32;
  var $i212: i32;
  var $i213: i8;
  var $i214: i32;
  var $i215: i1;
  var $i216: i32;
  var $i217: i32;
  var $i218: i1;
  var $i220: i8;
  var $i221: i32;
  var $i222: i32;
  var $i223: i8;
  var $i224: i32;
  var $i225: i1;
  var $i226: i32;
  var $i227: i32;
  var $i228: i1;
  var $i230: i8;
  var $i231: i32;
  var $i232: i32;
  var $i233: i8;
  var $i234: i32;
  var $i235: i1;
  var $i236: i32;
  var $i237: i32;
  var $i238: i1;
  var $i240: i32;
  var $i241: i32;
  var $i242: i1;
  var $i243: i32;
  var $i244: i8;
  var $i245: i8;
  var $i246: i32;
  var $i247: i32;
  var $i248: i8;
  var $i249: i32;
  var $i250: i1;
  var $i251: i32;
  var $i252: i32;
  var $i253: i1;
  var $i255: i8;
  var $i256: i32;
  var $i257: i32;
  var $i258: i8;
  var $i259: i32;
  var $i260: i1;
  var $i261: i32;
  var $i262: i32;
  var $i263: i1;
  var $i265: i8;
  var $i266: i32;
  var $i267: i32;
  var $i268: i8;
  var $i269: i32;
  var $i270: i1;
  var $i271: i32;
  var $i272: i32;
  var $i273: i1;
  var $i275: i32;
  var $i276: i32;
  var $i277: i1;
  var $i278: i32;
  var $i279: i8;
  var $i280: i8;
  var $i281: i32;
  var $i282: i32;
  var $i283: i8;
  var $i284: i32;
  var $i285: i1;
  var $i286: i32;
  var $i287: i32;
  var $i288: i1;
  var $i290: i8;
  var $i291: i32;
  var $i292: i32;
  var $i293: i8;
  var $i294: i32;
  var $i295: i1;
  var $i296: i32;
  var $i297: i32;
  var $i298: i1;
  var $i300: i8;
  var $i301: i32;
  var $i302: i32;
  var $i303: i8;
  var $i304: i32;
  var $i305: i1;
  var $i306: i32;
  var $i307: i32;
  var $i308: i1;
  var $i310: i32;
  var $i311: i32;
  var $i312: i1;
  var $i313: i32;
  var $i314: i8;
  var $i315: i8;
  var $i316: i32;
  var $i317: i32;
  var $i318: i8;
  var $i319: i32;
  var $i320: i1;
  var $i321: i32;
  var $i322: i32;
  var $i323: i1;
  var $i325: i8;
  var $i326: i32;
  var $i327: i32;
  var $i328: i8;
  var $i329: i32;
  var $i330: i1;
  var $i331: i32;
  var $i332: i32;
  var $i333: i1;
  var $i335: i8;
  var $i336: i32;
  var $i337: i32;
  var $i338: i8;
  var $i339: i32;
  var $i340: i1;
  var $i341: i32;
  var $i342: i32;
  var $i343: i1;
  var vslice_dummy_var_229: i32;
  var vslice_dummy_var_230: i32;
  var vslice_dummy_var_231: i32;
  var vslice_dummy_var_232: i32;
  var vslice_dummy_var_233: i32;
  var vslice_dummy_var_234: i32;
  var vslice_dummy_var_235: i32;
  var vslice_dummy_var_236: i32;
  var vslice_dummy_var_237: i32;
  var vslice_dummy_var_238: i32;
  var vslice_dummy_var_239: i32;
  var vslice_dummy_var_240: i32;
  var vslice_dummy_var_241: i32;
  var vslice_dummy_var_242: i32;
  var vslice_dummy_var_243: i32;
  var vslice_dummy_var_244: i32;
  var vslice_dummy_var_245: i32;
  var vslice_dummy_var_246: i32;
  var vslice_dummy_var_247: i32;
  var vslice_dummy_var_248: i32;
  var vslice_dummy_var_249: i32;
  var vslice_dummy_var_250: i32;
  var vslice_dummy_var_251: i32;
  var vslice_dummy_var_252: i32;
  var vslice_dummy_var_253: i32;
  var vslice_dummy_var_254: i32;
  var vslice_dummy_var_255: i32;
  var vslice_dummy_var_256: i32;
  var vslice_dummy_var_257: i32;
  var vslice_dummy_var_258: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 926} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 927} {:cexpr "mxl111sf_i2c_bitbang_sendbyte:arg:byte"} boogie_si_record_i8($i1);
    goto corral_source_split_6847;

  corral_source_split_6847:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p2, 0);
    goto corral_source_split_6848;

  corral_source_split_6848:
    assume {:verifier.code 0} true;
    $i3 := $M.10;
    goto corral_source_split_6849;

  corral_source_split_6849:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 4);
    goto corral_source_split_6850;

  corral_source_split_6850:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_6851;

  corral_source_split_6851:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 929} $i8 := mxl111sf_read_reg($p0, 47, $p2);
    call {:si_unique_call 930} {:cexpr "ret"} boogie_si_record_i32($i8);
    goto corral_source_split_6857;

  corral_source_split_6857:
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i8, 0);
    goto corral_source_split_6858;

  corral_source_split_6858:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    call {:si_unique_call 931} {:cexpr "__ret"} boogie_si_record_i32($i10);
    goto corral_source_split_6859;

  corral_source_split_6859:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_6860;

  corral_source_split_6860:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i10, 0);
    goto corral_source_split_6870;

  corral_source_split_6870:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i1);
    goto corral_source_split_6876;

  corral_source_split_6876:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i18, 128);
    goto corral_source_split_6877;

  corral_source_split_6877:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_6878;

  corral_source_split_6878:
    assume {:verifier.code 0} true;
    $i21 := (if $i20 == 1 then 8 else 0);
    goto corral_source_split_6879;

  corral_source_split_6879:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i32.i8($i21);
    goto corral_source_split_6880;

  corral_source_split_6880:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p2, $i22);
    goto corral_source_split_6881;

  corral_source_split_6881:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.7, $p2);
    goto corral_source_split_6882;

  corral_source_split_6882:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    goto corral_source_split_6883;

  corral_source_split_6883:
    assume {:verifier.code 0} true;
    $i25 := $or.i32($i24, 18);
    goto corral_source_split_6884;

  corral_source_split_6884:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i32.i8($i25);
    goto corral_source_split_6885;

  corral_source_split_6885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 933} $i27 := mxl111sf_write_reg($p0, 26, $i26);
    call {:si_unique_call 934} {:cexpr "ret"} boogie_si_record_i32($i27);
    goto corral_source_split_6886;

  corral_source_split_6886:
    assume {:verifier.code 0} true;
    $i28 := $slt.i32($i27, 0);
    goto corral_source_split_6887;

  corral_source_split_6887:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i33 := $i27;
    assume true;
    goto $bb22, $bb24;

  $bb24:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.7, $p2);
    goto corral_source_split_6899;

  corral_source_split_6899:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i34);
    goto corral_source_split_6900;

  corral_source_split_6900:
    assume {:verifier.code 0} true;
    $i36 := $or.i32($i35, 22);
    goto corral_source_split_6901;

  corral_source_split_6901:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i32.i8($i36);
    goto corral_source_split_6902;

  corral_source_split_6902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 936} $i38 := mxl111sf_write_reg($p0, 26, $i37);
    call {:si_unique_call 937} {:cexpr "ret"} boogie_si_record_i32($i38);
    goto corral_source_split_6903;

  corral_source_split_6903:
    assume {:verifier.code 0} true;
    $i39 := $slt.i32($i38, 0);
    goto corral_source_split_6904;

  corral_source_split_6904:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i39 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i44 := $i38;
    assume {:branchcond $i39} true;
    goto $bb32, $bb34;

  $bb34:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i45 := $load.i8($M.7, $p2);
    goto corral_source_split_6916;

  corral_source_split_6916:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i32($i45);
    goto corral_source_split_6917;

  corral_source_split_6917:
    assume {:verifier.code 0} true;
    $i47 := $or.i32($i46, 18);
    goto corral_source_split_6918;

  corral_source_split_6918:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i32.i8($i47);
    goto corral_source_split_6919;

  corral_source_split_6919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 939} $i49 := mxl111sf_write_reg($p0, 26, $i48);
    call {:si_unique_call 940} {:cexpr "ret"} boogie_si_record_i32($i49);
    goto corral_source_split_6920;

  corral_source_split_6920:
    assume {:verifier.code 0} true;
    $i50 := $slt.i32($i49, 0);
    goto corral_source_split_6921;

  corral_source_split_6921:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb36, $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume !($i50 == 1);
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i55 := $i49;
    assume {:branchcond $i50} true;
    goto $bb42, $bb44;

  $bb44:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $i100 := $zext.i8.i32($i1);
    goto corral_source_split_6933;

  corral_source_split_6933:
    assume {:verifier.code 0} true;
    $i101 := $and.i32($i100, 64);
    goto corral_source_split_6934;

  corral_source_split_6934:
    assume {:verifier.code 0} true;
    $i102 := $ne.i32($i101, 0);
    goto corral_source_split_6935;

  corral_source_split_6935:
    assume {:verifier.code 0} true;
    $i103 := (if $i102 == 1 then 8 else 0);
    goto corral_source_split_6936;

  corral_source_split_6936:
    assume {:verifier.code 0} true;
    $i104 := $trunc.i32.i8($i103);
    goto corral_source_split_6937;

  corral_source_split_6937:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p2, $i104);
    goto corral_source_split_6938;

  corral_source_split_6938:
    assume {:verifier.code 0} true;
    $i105 := $load.i8($M.7, $p2);
    goto corral_source_split_6939;

  corral_source_split_6939:
    assume {:verifier.code 0} true;
    $i106 := $zext.i8.i32($i105);
    goto corral_source_split_6940;

  corral_source_split_6940:
    assume {:verifier.code 0} true;
    $i107 := $or.i32($i106, 18);
    goto corral_source_split_6941;

  corral_source_split_6941:
    assume {:verifier.code 0} true;
    $i108 := $trunc.i32.i8($i107);
    goto corral_source_split_6942;

  corral_source_split_6942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 942} $i109 := mxl111sf_write_reg($p0, 26, $i108);
    goto corral_source_split_6943;

  corral_source_split_6943:
    assume {:verifier.code 0} true;
    $i110 := $slt.i32($i109, 0);
    goto corral_source_split_6944;

  corral_source_split_6944:
    assume {:verifier.code 0} true;
    assume {:branchcond $i110} true;
    goto $bb90, $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    assume !($i110 == 1);
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    $i33 := $i109;
    assume {:branchcond $i110} true;
    goto $bb96, $bb97;

  $bb97:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    $i115 := $load.i8($M.7, $p2);
    goto corral_source_split_7036;

  corral_source_split_7036:
    assume {:verifier.code 0} true;
    $i116 := $zext.i8.i32($i115);
    goto corral_source_split_7037;

  corral_source_split_7037:
    assume {:verifier.code 0} true;
    $i117 := $or.i32($i116, 22);
    goto corral_source_split_7038;

  corral_source_split_7038:
    assume {:verifier.code 0} true;
    $i118 := $trunc.i32.i8($i117);
    goto corral_source_split_7039;

  corral_source_split_7039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 960} $i119 := mxl111sf_write_reg($p0, 26, $i118);
    goto corral_source_split_7040;

  corral_source_split_7040:
    assume {:verifier.code 0} true;
    $i120 := $slt.i32($i119, 0);
    goto corral_source_split_7041;

  corral_source_split_7041:
    assume {:verifier.code 0} true;
    assume {:branchcond $i120} true;
    goto $bb99, $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    assume !($i120 == 1);
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    $i44 := $i119;
    assume {:branchcond $i120} true;
    goto $bb105, $bb106;

  $bb106:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    $i125 := $load.i8($M.7, $p2);
    goto corral_source_split_7051;

  corral_source_split_7051:
    assume {:verifier.code 0} true;
    $i126 := $zext.i8.i32($i125);
    goto corral_source_split_7052;

  corral_source_split_7052:
    assume {:verifier.code 0} true;
    $i127 := $or.i32($i126, 18);
    goto corral_source_split_7053;

  corral_source_split_7053:
    assume {:verifier.code 0} true;
    $i128 := $trunc.i32.i8($i127);
    goto corral_source_split_7054;

  corral_source_split_7054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 962} $i129 := mxl111sf_write_reg($p0, 26, $i128);
    goto corral_source_split_7055;

  corral_source_split_7055:
    assume {:verifier.code 0} true;
    $i130 := $slt.i32($i129, 0);
    goto corral_source_split_7056;

  corral_source_split_7056:
    assume {:verifier.code 0} true;
    assume {:branchcond $i130} true;
    goto $bb108, $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    assume !($i130 == 1);
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    $i55 := $i129;
    assume {:branchcond $i130} true;
    goto $bb114, $bb115;

  $bb115:
    assume !($i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    $i135 := $zext.i8.i32($i1);
    goto corral_source_split_7066;

  corral_source_split_7066:
    assume {:verifier.code 0} true;
    $i136 := $and.i32($i135, 32);
    goto corral_source_split_7067;

  corral_source_split_7067:
    assume {:verifier.code 0} true;
    $i137 := $ne.i32($i136, 0);
    goto corral_source_split_7068;

  corral_source_split_7068:
    assume {:verifier.code 0} true;
    $i138 := (if $i137 == 1 then 8 else 0);
    goto corral_source_split_7069;

  corral_source_split_7069:
    assume {:verifier.code 0} true;
    $i139 := $trunc.i32.i8($i138);
    goto corral_source_split_7070;

  corral_source_split_7070:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p2, $i139);
    goto corral_source_split_7071;

  corral_source_split_7071:
    assume {:verifier.code 0} true;
    $i140 := $load.i8($M.7, $p2);
    goto corral_source_split_7072;

  corral_source_split_7072:
    assume {:verifier.code 0} true;
    $i141 := $zext.i8.i32($i140);
    goto corral_source_split_7073;

  corral_source_split_7073:
    assume {:verifier.code 0} true;
    $i142 := $or.i32($i141, 18);
    goto corral_source_split_7074;

  corral_source_split_7074:
    assume {:verifier.code 0} true;
    $i143 := $trunc.i32.i8($i142);
    goto corral_source_split_7075;

  corral_source_split_7075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 964} $i144 := mxl111sf_write_reg($p0, 26, $i143);
    goto corral_source_split_7076;

  corral_source_split_7076:
    assume {:verifier.code 0} true;
    $i145 := $slt.i32($i144, 0);
    goto corral_source_split_7077;

  corral_source_split_7077:
    assume {:verifier.code 0} true;
    assume {:branchcond $i145} true;
    goto $bb118, $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    assume !($i145 == 1);
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    $i33 := $i144;
    assume {:branchcond $i145} true;
    goto $bb124, $bb125;

  $bb125:
    assume !($i145 == 1);
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    $i150 := $load.i8($M.7, $p2);
    goto corral_source_split_7087;

  corral_source_split_7087:
    assume {:verifier.code 0} true;
    $i151 := $zext.i8.i32($i150);
    goto corral_source_split_7088;

  corral_source_split_7088:
    assume {:verifier.code 0} true;
    $i152 := $or.i32($i151, 22);
    goto corral_source_split_7089;

  corral_source_split_7089:
    assume {:verifier.code 0} true;
    $i153 := $trunc.i32.i8($i152);
    goto corral_source_split_7090;

  corral_source_split_7090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 966} $i154 := mxl111sf_write_reg($p0, 26, $i153);
    goto corral_source_split_7091;

  corral_source_split_7091:
    assume {:verifier.code 0} true;
    $i155 := $slt.i32($i154, 0);
    goto corral_source_split_7092;

  corral_source_split_7092:
    assume {:verifier.code 0} true;
    assume {:branchcond $i155} true;
    goto $bb127, $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    assume !($i155 == 1);
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    $i44 := $i154;
    assume {:branchcond $i155} true;
    goto $bb133, $bb134;

  $bb134:
    assume !($i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    $i160 := $load.i8($M.7, $p2);
    goto corral_source_split_7102;

  corral_source_split_7102:
    assume {:verifier.code 0} true;
    $i161 := $zext.i8.i32($i160);
    goto corral_source_split_7103;

  corral_source_split_7103:
    assume {:verifier.code 0} true;
    $i162 := $or.i32($i161, 18);
    goto corral_source_split_7104;

  corral_source_split_7104:
    assume {:verifier.code 0} true;
    $i163 := $trunc.i32.i8($i162);
    goto corral_source_split_7105;

  corral_source_split_7105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 968} $i164 := mxl111sf_write_reg($p0, 26, $i163);
    goto corral_source_split_7106;

  corral_source_split_7106:
    assume {:verifier.code 0} true;
    $i165 := $slt.i32($i164, 0);
    goto corral_source_split_7107;

  corral_source_split_7107:
    assume {:verifier.code 0} true;
    assume {:branchcond $i165} true;
    goto $bb136, $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    assume !($i165 == 1);
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    $i55 := $i164;
    assume {:branchcond $i165} true;
    goto $bb142, $bb143;

  $bb143:
    assume !($i165 == 1);
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    $i170 := $zext.i8.i32($i1);
    goto corral_source_split_7117;

  corral_source_split_7117:
    assume {:verifier.code 0} true;
    $i171 := $and.i32($i170, 16);
    goto corral_source_split_7118;

  corral_source_split_7118:
    assume {:verifier.code 0} true;
    $i172 := $ne.i32($i171, 0);
    goto corral_source_split_7119;

  corral_source_split_7119:
    assume {:verifier.code 0} true;
    $i173 := (if $i172 == 1 then 8 else 0);
    goto corral_source_split_7120;

  corral_source_split_7120:
    assume {:verifier.code 0} true;
    $i174 := $trunc.i32.i8($i173);
    goto corral_source_split_7121;

  corral_source_split_7121:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p2, $i174);
    goto corral_source_split_7122;

  corral_source_split_7122:
    assume {:verifier.code 0} true;
    $i175 := $load.i8($M.7, $p2);
    goto corral_source_split_7123;

  corral_source_split_7123:
    assume {:verifier.code 0} true;
    $i176 := $zext.i8.i32($i175);
    goto corral_source_split_7124;

  corral_source_split_7124:
    assume {:verifier.code 0} true;
    $i177 := $or.i32($i176, 18);
    goto corral_source_split_7125;

  corral_source_split_7125:
    assume {:verifier.code 0} true;
    $i178 := $trunc.i32.i8($i177);
    goto corral_source_split_7126;

  corral_source_split_7126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 970} $i179 := mxl111sf_write_reg($p0, 26, $i178);
    goto corral_source_split_7127;

  corral_source_split_7127:
    assume {:verifier.code 0} true;
    $i180 := $slt.i32($i179, 0);
    goto corral_source_split_7128;

  corral_source_split_7128:
    assume {:verifier.code 0} true;
    assume {:branchcond $i180} true;
    goto $bb146, $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    assume !($i180 == 1);
    goto $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    $i33 := $i179;
    assume {:branchcond $i180} true;
    goto $bb152, $bb153;

  $bb153:
    assume !($i180 == 1);
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    $i185 := $load.i8($M.7, $p2);
    goto corral_source_split_7138;

  corral_source_split_7138:
    assume {:verifier.code 0} true;
    $i186 := $zext.i8.i32($i185);
    goto corral_source_split_7139;

  corral_source_split_7139:
    assume {:verifier.code 0} true;
    $i187 := $or.i32($i186, 22);
    goto corral_source_split_7140;

  corral_source_split_7140:
    assume {:verifier.code 0} true;
    $i188 := $trunc.i32.i8($i187);
    goto corral_source_split_7141;

  corral_source_split_7141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 972} $i189 := mxl111sf_write_reg($p0, 26, $i188);
    goto corral_source_split_7142;

  corral_source_split_7142:
    assume {:verifier.code 0} true;
    $i190 := $slt.i32($i189, 0);
    goto corral_source_split_7143;

  corral_source_split_7143:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb155, $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    assume !($i190 == 1);
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    $i44 := $i189;
    assume true;
    goto $bb161, $bb162;

  $bb162:
    assume !($i190 == 1);
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    $i195 := $load.i8($M.7, $p2);
    goto corral_source_split_7153;

  corral_source_split_7153:
    assume {:verifier.code 0} true;
    $i196 := $zext.i8.i32($i195);
    goto corral_source_split_7154;

  corral_source_split_7154:
    assume {:verifier.code 0} true;
    $i197 := $or.i32($i196, 18);
    goto corral_source_split_7155;

  corral_source_split_7155:
    assume {:verifier.code 0} true;
    $i198 := $trunc.i32.i8($i197);
    goto corral_source_split_7156;

  corral_source_split_7156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 974} $i199 := mxl111sf_write_reg($p0, 26, $i198);
    goto corral_source_split_7157;

  corral_source_split_7157:
    assume {:verifier.code 0} true;
    $i200 := $slt.i32($i199, 0);
    goto corral_source_split_7158;

  corral_source_split_7158:
    assume {:verifier.code 0} true;
    assume {:branchcond $i200} true;
    goto $bb164, $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    assume !($i200 == 1);
    goto $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    $i55 := $i199;
    assume {:branchcond $i200} true;
    goto $bb170, $bb171;

  $bb171:
    assume !($i200 == 1);
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb172:
    assume {:verifier.code 0} true;
    goto $bb173;

  $bb173:
    assume {:verifier.code 0} true;
    $i205 := $zext.i8.i32($i1);
    goto corral_source_split_7168;

  corral_source_split_7168:
    assume {:verifier.code 0} true;
    $i206 := $and.i32($i205, 8);
    goto corral_source_split_7169;

  corral_source_split_7169:
    assume {:verifier.code 0} true;
    $i207 := $ne.i32($i206, 0);
    goto corral_source_split_7170;

  corral_source_split_7170:
    assume {:verifier.code 0} true;
    $i208 := (if $i207 == 1 then 8 else 0);
    goto corral_source_split_7171;

  corral_source_split_7171:
    assume {:verifier.code 0} true;
    $i209 := $trunc.i32.i8($i208);
    goto corral_source_split_7172;

  corral_source_split_7172:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p2, $i209);
    goto corral_source_split_7173;

  corral_source_split_7173:
    assume {:verifier.code 0} true;
    $i210 := $load.i8($M.7, $p2);
    goto corral_source_split_7174;

  corral_source_split_7174:
    assume {:verifier.code 0} true;
    $i211 := $zext.i8.i32($i210);
    goto corral_source_split_7175;

  corral_source_split_7175:
    assume {:verifier.code 0} true;
    $i212 := $or.i32($i211, 18);
    goto corral_source_split_7176;

  corral_source_split_7176:
    assume {:verifier.code 0} true;
    $i213 := $trunc.i32.i8($i212);
    goto corral_source_split_7177;

  corral_source_split_7177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 976} $i214 := mxl111sf_write_reg($p0, 26, $i213);
    goto corral_source_split_7178;

  corral_source_split_7178:
    assume {:verifier.code 0} true;
    $i215 := $slt.i32($i214, 0);
    goto corral_source_split_7179;

  corral_source_split_7179:
    assume {:verifier.code 0} true;
    assume {:branchcond $i215} true;
    goto $bb174, $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    assume !($i215 == 1);
    goto $bb176;

  $bb176:
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb179:
    assume {:verifier.code 0} true;
    $i33 := $i214;
    assume {:branchcond $i215} true;
    goto $bb180, $bb181;

  $bb181:
    assume !($i215 == 1);
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb182:
    assume {:verifier.code 0} true;
    $i220 := $load.i8($M.7, $p2);
    goto corral_source_split_7189;

  corral_source_split_7189:
    assume {:verifier.code 0} true;
    $i221 := $zext.i8.i32($i220);
    goto corral_source_split_7190;

  corral_source_split_7190:
    assume {:verifier.code 0} true;
    $i222 := $or.i32($i221, 22);
    goto corral_source_split_7191;

  corral_source_split_7191:
    assume {:verifier.code 0} true;
    $i223 := $trunc.i32.i8($i222);
    goto corral_source_split_7192;

  corral_source_split_7192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 978} $i224 := mxl111sf_write_reg($p0, 26, $i223);
    goto corral_source_split_7193;

  corral_source_split_7193:
    assume {:verifier.code 0} true;
    $i225 := $slt.i32($i224, 0);
    goto corral_source_split_7194;

  corral_source_split_7194:
    assume {:verifier.code 0} true;
    assume {:branchcond $i225} true;
    goto $bb183, $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    assume !($i225 == 1);
    goto $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    $i44 := $i224;
    assume {:branchcond $i225} true;
    goto $bb189, $bb190;

  $bb190:
    assume !($i225 == 1);
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb191:
    assume {:verifier.code 0} true;
    $i230 := $load.i8($M.7, $p2);
    goto corral_source_split_7204;

  corral_source_split_7204:
    assume {:verifier.code 0} true;
    $i231 := $zext.i8.i32($i230);
    goto corral_source_split_7205;

  corral_source_split_7205:
    assume {:verifier.code 0} true;
    $i232 := $or.i32($i231, 18);
    goto corral_source_split_7206;

  corral_source_split_7206:
    assume {:verifier.code 0} true;
    $i233 := $trunc.i32.i8($i232);
    goto corral_source_split_7207;

  corral_source_split_7207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 980} $i234 := mxl111sf_write_reg($p0, 26, $i233);
    goto corral_source_split_7208;

  corral_source_split_7208:
    assume {:verifier.code 0} true;
    $i235 := $slt.i32($i234, 0);
    goto corral_source_split_7209;

  corral_source_split_7209:
    assume {:verifier.code 0} true;
    assume {:branchcond $i235} true;
    goto $bb192, $bb193;

  $bb193:
    assume {:verifier.code 0} true;
    assume !($i235 == 1);
    goto $bb194;

  $bb194:
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb197:
    assume {:verifier.code 0} true;
    $i55 := $i234;
    assume {:branchcond $i235} true;
    goto $bb198, $bb199;

  $bb199:
    assume !($i235 == 1);
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb200:
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb201:
    assume {:verifier.code 0} true;
    $i240 := $zext.i8.i32($i1);
    goto corral_source_split_7219;

  corral_source_split_7219:
    assume {:verifier.code 0} true;
    $i241 := $and.i32($i240, 4);
    goto corral_source_split_7220;

  corral_source_split_7220:
    assume {:verifier.code 0} true;
    $i242 := $ne.i32($i241, 0);
    goto corral_source_split_7221;

  corral_source_split_7221:
    assume {:verifier.code 0} true;
    $i243 := (if $i242 == 1 then 8 else 0);
    goto corral_source_split_7222;

  corral_source_split_7222:
    assume {:verifier.code 0} true;
    $i244 := $trunc.i32.i8($i243);
    goto corral_source_split_7223;

  corral_source_split_7223:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p2, $i244);
    goto corral_source_split_7224;

  corral_source_split_7224:
    assume {:verifier.code 0} true;
    $i245 := $load.i8($M.7, $p2);
    goto corral_source_split_7225;

  corral_source_split_7225:
    assume {:verifier.code 0} true;
    $i246 := $zext.i8.i32($i245);
    goto corral_source_split_7226;

  corral_source_split_7226:
    assume {:verifier.code 0} true;
    $i247 := $or.i32($i246, 18);
    goto corral_source_split_7227;

  corral_source_split_7227:
    assume {:verifier.code 0} true;
    $i248 := $trunc.i32.i8($i247);
    goto corral_source_split_7228;

  corral_source_split_7228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 982} $i249 := mxl111sf_write_reg($p0, 26, $i248);
    goto corral_source_split_7229;

  corral_source_split_7229:
    assume {:verifier.code 0} true;
    $i250 := $slt.i32($i249, 0);
    goto corral_source_split_7230;

  corral_source_split_7230:
    assume {:verifier.code 0} true;
    assume {:branchcond $i250} true;
    goto $bb202, $bb203;

  $bb203:
    assume {:verifier.code 0} true;
    assume !($i250 == 1);
    goto $bb204;

  $bb204:
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb207:
    assume {:verifier.code 0} true;
    $i33 := $i249;
    assume {:branchcond $i250} true;
    goto $bb208, $bb209;

  $bb209:
    assume !($i250 == 1);
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb210:
    assume {:verifier.code 0} true;
    $i255 := $load.i8($M.7, $p2);
    goto corral_source_split_7240;

  corral_source_split_7240:
    assume {:verifier.code 0} true;
    $i256 := $zext.i8.i32($i255);
    goto corral_source_split_7241;

  corral_source_split_7241:
    assume {:verifier.code 0} true;
    $i257 := $or.i32($i256, 22);
    goto corral_source_split_7242;

  corral_source_split_7242:
    assume {:verifier.code 0} true;
    $i258 := $trunc.i32.i8($i257);
    goto corral_source_split_7243;

  corral_source_split_7243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 984} $i259 := mxl111sf_write_reg($p0, 26, $i258);
    goto corral_source_split_7244;

  corral_source_split_7244:
    assume {:verifier.code 0} true;
    $i260 := $slt.i32($i259, 0);
    goto corral_source_split_7245;

  corral_source_split_7245:
    assume {:verifier.code 0} true;
    assume {:branchcond $i260} true;
    goto $bb211, $bb212;

  $bb212:
    assume {:verifier.code 0} true;
    assume !($i260 == 1);
    goto $bb213;

  $bb213:
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb216:
    assume {:verifier.code 0} true;
    $i44 := $i259;
    assume {:branchcond $i260} true;
    goto $bb217, $bb218;

  $bb218:
    assume !($i260 == 1);
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb219:
    assume {:verifier.code 0} true;
    $i265 := $load.i8($M.7, $p2);
    goto corral_source_split_7255;

  corral_source_split_7255:
    assume {:verifier.code 0} true;
    $i266 := $zext.i8.i32($i265);
    goto corral_source_split_7256;

  corral_source_split_7256:
    assume {:verifier.code 0} true;
    $i267 := $or.i32($i266, 18);
    goto corral_source_split_7257;

  corral_source_split_7257:
    assume {:verifier.code 0} true;
    $i268 := $trunc.i32.i8($i267);
    goto corral_source_split_7258;

  corral_source_split_7258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 986} $i269 := mxl111sf_write_reg($p0, 26, $i268);
    goto corral_source_split_7259;

  corral_source_split_7259:
    assume {:verifier.code 0} true;
    $i270 := $slt.i32($i269, 0);
    goto corral_source_split_7260;

  corral_source_split_7260:
    assume {:verifier.code 0} true;
    assume {:branchcond $i270} true;
    goto $bb220, $bb221;

  $bb221:
    assume {:verifier.code 0} true;
    assume !($i270 == 1);
    goto $bb222;

  $bb222:
    assume {:verifier.code 0} true;
    goto $bb225;

  $bb225:
    assume {:verifier.code 0} true;
    $i55 := $i269;
    assume {:branchcond $i270} true;
    goto $bb226, $bb227;

  $bb227:
    assume !($i270 == 1);
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb228:
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb229:
    assume {:verifier.code 0} true;
    $i275 := $zext.i8.i32($i1);
    goto corral_source_split_7270;

  corral_source_split_7270:
    assume {:verifier.code 0} true;
    $i276 := $and.i32($i275, 2);
    goto corral_source_split_7271;

  corral_source_split_7271:
    assume {:verifier.code 0} true;
    $i277 := $ne.i32($i276, 0);
    goto corral_source_split_7272;

  corral_source_split_7272:
    assume {:verifier.code 0} true;
    $i278 := (if $i277 == 1 then 8 else 0);
    goto corral_source_split_7273;

  corral_source_split_7273:
    assume {:verifier.code 0} true;
    $i279 := $trunc.i32.i8($i278);
    goto corral_source_split_7274;

  corral_source_split_7274:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p2, $i279);
    goto corral_source_split_7275;

  corral_source_split_7275:
    assume {:verifier.code 0} true;
    $i280 := $load.i8($M.7, $p2);
    goto corral_source_split_7276;

  corral_source_split_7276:
    assume {:verifier.code 0} true;
    $i281 := $zext.i8.i32($i280);
    goto corral_source_split_7277;

  corral_source_split_7277:
    assume {:verifier.code 0} true;
    $i282 := $or.i32($i281, 18);
    goto corral_source_split_7278;

  corral_source_split_7278:
    assume {:verifier.code 0} true;
    $i283 := $trunc.i32.i8($i282);
    goto corral_source_split_7279;

  corral_source_split_7279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 988} $i284 := mxl111sf_write_reg($p0, 26, $i283);
    goto corral_source_split_7280;

  corral_source_split_7280:
    assume {:verifier.code 0} true;
    $i285 := $slt.i32($i284, 0);
    goto corral_source_split_7281;

  corral_source_split_7281:
    assume {:verifier.code 0} true;
    assume {:branchcond $i285} true;
    goto $bb230, $bb231;

  $bb231:
    assume {:verifier.code 0} true;
    assume !($i285 == 1);
    goto $bb232;

  $bb232:
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb235:
    assume {:verifier.code 0} true;
    $i33 := $i284;
    assume {:branchcond $i285} true;
    goto $bb236, $bb237;

  $bb237:
    assume !($i285 == 1);
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb238:
    assume {:verifier.code 0} true;
    $i290 := $load.i8($M.7, $p2);
    goto corral_source_split_7291;

  corral_source_split_7291:
    assume {:verifier.code 0} true;
    $i291 := $zext.i8.i32($i290);
    goto corral_source_split_7292;

  corral_source_split_7292:
    assume {:verifier.code 0} true;
    $i292 := $or.i32($i291, 22);
    goto corral_source_split_7293;

  corral_source_split_7293:
    assume {:verifier.code 0} true;
    $i293 := $trunc.i32.i8($i292);
    goto corral_source_split_7294;

  corral_source_split_7294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 990} $i294 := mxl111sf_write_reg($p0, 26, $i293);
    goto corral_source_split_7295;

  corral_source_split_7295:
    assume {:verifier.code 0} true;
    $i295 := $slt.i32($i294, 0);
    goto corral_source_split_7296;

  corral_source_split_7296:
    assume {:verifier.code 0} true;
    assume {:branchcond $i295} true;
    goto $bb239, $bb240;

  $bb240:
    assume {:verifier.code 0} true;
    assume !($i295 == 1);
    goto $bb241;

  $bb241:
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb244:
    assume {:verifier.code 0} true;
    $i44 := $i294;
    assume {:branchcond $i295} true;
    goto $bb245, $bb246;

  $bb246:
    assume !($i295 == 1);
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb247:
    assume {:verifier.code 0} true;
    $i300 := $load.i8($M.7, $p2);
    goto corral_source_split_7306;

  corral_source_split_7306:
    assume {:verifier.code 0} true;
    $i301 := $zext.i8.i32($i300);
    goto corral_source_split_7307;

  corral_source_split_7307:
    assume {:verifier.code 0} true;
    $i302 := $or.i32($i301, 18);
    goto corral_source_split_7308;

  corral_source_split_7308:
    assume {:verifier.code 0} true;
    $i303 := $trunc.i32.i8($i302);
    goto corral_source_split_7309;

  corral_source_split_7309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 992} $i304 := mxl111sf_write_reg($p0, 26, $i303);
    goto corral_source_split_7310;

  corral_source_split_7310:
    assume {:verifier.code 0} true;
    $i305 := $slt.i32($i304, 0);
    goto corral_source_split_7311;

  corral_source_split_7311:
    assume {:verifier.code 0} true;
    assume {:branchcond $i305} true;
    goto $bb248, $bb249;

  $bb249:
    assume {:verifier.code 0} true;
    assume !($i305 == 1);
    goto $bb250;

  $bb250:
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb253:
    assume {:verifier.code 0} true;
    $i55 := $i304;
    assume {:branchcond $i305} true;
    goto $bb254, $bb255;

  $bb255:
    assume !($i305 == 1);
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb256:
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb257:
    assume {:verifier.code 0} true;
    $i310 := $zext.i8.i32($i1);
    goto corral_source_split_7321;

  corral_source_split_7321:
    assume {:verifier.code 0} true;
    $i311 := $and.i32($i310, 1);
    goto corral_source_split_7322;

  corral_source_split_7322:
    assume {:verifier.code 0} true;
    $i312 := $ne.i32($i311, 0);
    goto corral_source_split_7323;

  corral_source_split_7323:
    assume {:verifier.code 0} true;
    $i313 := (if $i312 == 1 then 8 else 0);
    goto corral_source_split_7324;

  corral_source_split_7324:
    assume {:verifier.code 0} true;
    $i314 := $trunc.i32.i8($i313);
    goto corral_source_split_7325;

  corral_source_split_7325:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p2, $i314);
    goto corral_source_split_7326;

  corral_source_split_7326:
    assume {:verifier.code 0} true;
    $i315 := $load.i8($M.7, $p2);
    goto corral_source_split_7327;

  corral_source_split_7327:
    assume {:verifier.code 0} true;
    $i316 := $zext.i8.i32($i315);
    goto corral_source_split_7328;

  corral_source_split_7328:
    assume {:verifier.code 0} true;
    $i317 := $or.i32($i316, 18);
    goto corral_source_split_7329;

  corral_source_split_7329:
    assume {:verifier.code 0} true;
    $i318 := $trunc.i32.i8($i317);
    goto corral_source_split_7330;

  corral_source_split_7330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 994} $i319 := mxl111sf_write_reg($p0, 26, $i318);
    goto corral_source_split_7331;

  corral_source_split_7331:
    assume {:verifier.code 0} true;
    $i320 := $slt.i32($i319, 0);
    goto corral_source_split_7332;

  corral_source_split_7332:
    assume {:verifier.code 0} true;
    assume {:branchcond $i320} true;
    goto $bb258, $bb259;

  $bb259:
    assume {:verifier.code 0} true;
    assume !($i320 == 1);
    goto $bb260;

  $bb260:
    assume {:verifier.code 0} true;
    goto $bb263;

  $bb263:
    assume {:verifier.code 0} true;
    $i33 := $i319;
    assume {:branchcond $i320} true;
    goto $bb264, $bb265;

  $bb265:
    assume !($i320 == 1);
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb266:
    assume {:verifier.code 0} true;
    $i325 := $load.i8($M.7, $p2);
    goto corral_source_split_7342;

  corral_source_split_7342:
    assume {:verifier.code 0} true;
    $i326 := $zext.i8.i32($i325);
    goto corral_source_split_7343;

  corral_source_split_7343:
    assume {:verifier.code 0} true;
    $i327 := $or.i32($i326, 22);
    goto corral_source_split_7344;

  corral_source_split_7344:
    assume {:verifier.code 0} true;
    $i328 := $trunc.i32.i8($i327);
    goto corral_source_split_7345;

  corral_source_split_7345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 996} $i329 := mxl111sf_write_reg($p0, 26, $i328);
    goto corral_source_split_7346;

  corral_source_split_7346:
    assume {:verifier.code 0} true;
    $i330 := $slt.i32($i329, 0);
    goto corral_source_split_7347;

  corral_source_split_7347:
    assume {:verifier.code 0} true;
    assume {:branchcond $i330} true;
    goto $bb267, $bb268;

  $bb268:
    assume {:verifier.code 0} true;
    assume !($i330 == 1);
    goto $bb269;

  $bb269:
    assume {:verifier.code 0} true;
    goto $bb272;

  $bb272:
    assume {:verifier.code 0} true;
    $i44 := $i329;
    assume {:branchcond $i330} true;
    goto $bb273, $bb274;

  $bb274:
    assume !($i330 == 1);
    assume {:verifier.code 0} true;
    goto $bb275;

  $bb275:
    assume {:verifier.code 0} true;
    $i335 := $load.i8($M.7, $p2);
    goto corral_source_split_7357;

  corral_source_split_7357:
    assume {:verifier.code 0} true;
    $i336 := $zext.i8.i32($i335);
    goto corral_source_split_7358;

  corral_source_split_7358:
    assume {:verifier.code 0} true;
    $i337 := $or.i32($i336, 18);
    goto corral_source_split_7359;

  corral_source_split_7359:
    assume {:verifier.code 0} true;
    $i338 := $trunc.i32.i8($i337);
    goto corral_source_split_7360;

  corral_source_split_7360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 998} $i339 := mxl111sf_write_reg($p0, 26, $i338);
    goto corral_source_split_7361;

  corral_source_split_7361:
    assume {:verifier.code 0} true;
    $i340 := $slt.i32($i339, 0);
    goto corral_source_split_7362;

  corral_source_split_7362:
    assume {:verifier.code 0} true;
    assume {:branchcond $i340} true;
    goto $bb276, $bb277;

  $bb277:
    assume {:verifier.code 0} true;
    assume !($i340 == 1);
    goto $bb278;

  $bb278:
    assume {:verifier.code 0} true;
    goto $bb281;

  $bb281:
    assume {:verifier.code 0} true;
    $i55 := $i339;
    assume {:branchcond $i340} true;
    goto $bb282, $bb283;

  $bb283:
    assume !($i340 == 1);
    assume {:verifier.code 0} true;
    goto $bb284;

  $bb284:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i56 := $zext.i8.i32($i1);
    goto corral_source_split_6946;

  corral_source_split_6946:
    assume {:verifier.code 0} true;
    $i57 := $and.i32($i56, 1);
    goto corral_source_split_6947;

  corral_source_split_6947:
    assume {:verifier.code 0} true;
    $i58 := $eq.i32($i57, 0);
    goto corral_source_split_6948;

  corral_source_split_6948:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    call {:si_unique_call 947} $i68 := mxl111sf_write_reg($p0, 26, 30);
    call {:si_unique_call 948} {:cexpr "ret"} boogie_si_record_i32($i68);
    goto corral_source_split_6968;

  corral_source_split_6968:
    assume {:verifier.code 0} true;
    $i69 := $slt.i32($i68, 0);
    goto corral_source_split_6969;

  corral_source_split_6969:
    assume {:verifier.code 0} true;
    $i70 := $zext.i1.i32($i69);
    call {:si_unique_call 949} {:cexpr "__ret___4"} boogie_si_record_i32($i70);
    goto corral_source_split_6970;

  corral_source_split_6970:
    assume {:verifier.code 0} true;
    $i71 := $ne.i32($i70, 0);
    goto corral_source_split_6971;

  corral_source_split_6971:
    assume {:verifier.code 0} true;
    assume {:branchcond $i71} true;
    goto $bb60, $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    assume !($i71 == 1);
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $i76 := $ne.i32($i70, 0);
    goto corral_source_split_6981;

  corral_source_split_6981:
    assume {:verifier.code 0} true;
    assume {:branchcond $i76} true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    call {:si_unique_call 951} $i77 := mxl111sf_read_reg($p0, 47, $p2);
    call {:si_unique_call 952} {:cexpr "ret"} boogie_si_record_i32($i77);
    goto corral_source_split_6985;

  corral_source_split_6985:
    assume {:verifier.code 0} true;
    $i78 := $slt.i32($i77, 0);
    goto corral_source_split_6986;

  corral_source_split_6986:
    assume {:verifier.code 0} true;
    $i79 := $zext.i1.i32($i78);
    call {:si_unique_call 953} {:cexpr "__ret___5"} boogie_si_record_i32($i79);
    goto corral_source_split_6987;

  corral_source_split_6987:
    assume {:verifier.code 0} true;
    $i80 := $ne.i32($i79, 0);
    goto corral_source_split_6988;

  corral_source_split_6988:
    assume {:verifier.code 0} true;
    assume {:branchcond $i80} true;
    goto $bb69, $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    assume !($i80 == 1);
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $i85 := $ne.i32($i79, 0);
    goto corral_source_split_6998;

  corral_source_split_6998:
    assume {:verifier.code 0} true;
    assume {:branchcond $i85} true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    call {:si_unique_call 955} $i86 := mxl111sf_write_reg($p0, 26, 26);
    call {:si_unique_call 956} {:cexpr "ret"} boogie_si_record_i32($i86);
    goto corral_source_split_7002;

  corral_source_split_7002:
    assume {:verifier.code 0} true;
    $i87 := $slt.i32($i86, 0);
    goto corral_source_split_7003;

  corral_source_split_7003:
    assume {:verifier.code 0} true;
    $i88 := $zext.i1.i32($i87);
    call {:si_unique_call 957} {:cexpr "__ret___6"} boogie_si_record_i32($i88);
    goto corral_source_split_7004;

  corral_source_split_7004:
    assume {:verifier.code 0} true;
    $i89 := $ne.i32($i88, 0);
    goto corral_source_split_7005;

  corral_source_split_7005:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    assume !($i89 == 1);
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $i94 := $ne.i32($i88, 0);
    goto corral_source_split_7015;

  corral_source_split_7015:
    assume {:verifier.code 0} true;
    assume {:branchcond $i94} true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $i95 := $load.i8($M.7, $p2);
    goto corral_source_split_7019;

  corral_source_split_7019:
    assume {:verifier.code 0} true;
    $i96 := $zext.i8.i32($i95);
    goto corral_source_split_7020;

  corral_source_split_7020:
    assume {:verifier.code 0} true;
    $i97 := $and.i32($i96, 4);
    goto corral_source_split_7021;

  corral_source_split_7021:
    assume {:verifier.code 0} true;
    $i98 := $ne.i32($i97, 0);
    goto corral_source_split_7022;

  corral_source_split_7022:
    assume {:verifier.code 0} true;
    assume {:branchcond $i98} true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    $i99 := $i86;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    goto corral_source_split_7026;

  corral_source_split_7026:
    assume {:verifier.code 0} true;
    $i17 := $i99;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_6874;

  corral_source_split_6874:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb87:
    assume $i98 == 1;
    goto corral_source_split_7024;

  corral_source_split_7024:
    assume {:verifier.code 0} true;
    $i99 := $sub.i32(0, 5);
    goto $bb89;

  $bb84:
    assume $i94 == 1;
    goto corral_source_split_7017;

  corral_source_split_7017:
    assume {:verifier.code 0} true;
    $i17 := $i86;
    goto $bb12;

  $bb78:
    assume $i89 == 1;
    goto corral_source_split_7007;

  corral_source_split_7007:
    assume {:verifier.code 0} true;
    $i90 := $M.10;
    goto corral_source_split_7008;

  corral_source_split_7008:
    assume {:verifier.code 0} true;
    $i91 := $and.i32($i90, 16);
    goto corral_source_split_7009;

  corral_source_split_7009:
    assume {:verifier.code 0} true;
    $i92 := $ne.i32($i91, 0);
    goto corral_source_split_7010;

  corral_source_split_7010:
    assume {:verifier.code 0} true;
    assume {:branchcond $i92} true;
    goto $bb81, $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    assume !($i92 == 1);
    goto $bb80;

  $bb81:
    assume $i92 == 1;
    goto corral_source_split_7012;

  corral_source_split_7012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 958} vslice_dummy_var_237 := printk.ref.ref.i32.i32(.str.5, .str.145, $i86, 88);
    goto corral_source_split_7013;

  corral_source_split_7013:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb75:
    assume $i85 == 1;
    goto corral_source_split_7000;

  corral_source_split_7000:
    assume {:verifier.code 0} true;
    $i17 := $i77;
    goto $bb12;

  $bb69:
    assume $i80 == 1;
    goto corral_source_split_6990;

  corral_source_split_6990:
    assume {:verifier.code 0} true;
    $i81 := $M.10;
    goto corral_source_split_6991;

  corral_source_split_6991:
    assume {:verifier.code 0} true;
    $i82 := $and.i32($i81, 16);
    goto corral_source_split_6992;

  corral_source_split_6992:
    assume {:verifier.code 0} true;
    $i83 := $ne.i32($i82, 0);
    goto corral_source_split_6993;

  corral_source_split_6993:
    assume {:verifier.code 0} true;
    assume {:branchcond $i83} true;
    goto $bb72, $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    assume !($i83 == 1);
    goto $bb71;

  $bb72:
    assume $i83 == 1;
    goto corral_source_split_6995;

  corral_source_split_6995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 954} vslice_dummy_var_236 := printk.ref.ref.i32.i32(.str.5, .str.145, $i77, 82);
    goto corral_source_split_6996;

  corral_source_split_6996:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb66:
    assume $i76 == 1;
    goto corral_source_split_6983;

  corral_source_split_6983:
    assume {:verifier.code 0} true;
    $i17 := $i68;
    goto $bb12;

  $bb60:
    assume $i71 == 1;
    goto corral_source_split_6973;

  corral_source_split_6973:
    assume {:verifier.code 0} true;
    $i72 := $M.10;
    goto corral_source_split_6974;

  corral_source_split_6974:
    assume {:verifier.code 0} true;
    $i73 := $and.i32($i72, 16);
    goto corral_source_split_6975;

  corral_source_split_6975:
    assume {:verifier.code 0} true;
    $i74 := $ne.i32($i73, 0);
    goto corral_source_split_6976;

  corral_source_split_6976:
    assume {:verifier.code 0} true;
    assume {:branchcond $i74} true;
    goto $bb63, $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    assume !($i74 == 1);
    goto $bb62;

  $bb63:
    assume $i74 == 1;
    goto corral_source_split_6978;

  corral_source_split_6978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 950} vslice_dummy_var_235 := printk.ref.ref.i32.i32(.str.5, .str.145, $i68, 78);
    goto corral_source_split_6979;

  corral_source_split_6979:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb48:
    assume $i58 == 1;
    goto corral_source_split_6950;

  corral_source_split_6950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 943} $i59 := mxl111sf_write_reg($p0, 26, 26);
    call {:si_unique_call 944} {:cexpr "ret"} boogie_si_record_i32($i59);
    goto corral_source_split_6951;

  corral_source_split_6951:
    assume {:verifier.code 0} true;
    $i60 := $slt.i32($i59, 0);
    goto corral_source_split_6952;

  corral_source_split_6952:
    assume {:verifier.code 0} true;
    $i61 := $zext.i1.i32($i60);
    call {:si_unique_call 945} {:cexpr "__ret___3"} boogie_si_record_i32($i61);
    goto corral_source_split_6953;

  corral_source_split_6953:
    assume {:verifier.code 0} true;
    $i62 := $ne.i32($i61, 0);
    goto corral_source_split_6954;

  corral_source_split_6954:
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb50, $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    assume !($i62 == 1);
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $i67 := $ne.i32($i61, 0);
    goto corral_source_split_6964;

  corral_source_split_6964:
    assume {:verifier.code 0} true;
    assume {:branchcond $i67} true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb56:
    assume $i67 == 1;
    goto corral_source_split_6966;

  corral_source_split_6966:
    assume {:verifier.code 0} true;
    $i17 := $i59;
    goto $bb12;

  $bb50:
    assume $i62 == 1;
    goto corral_source_split_6956;

  corral_source_split_6956:
    assume {:verifier.code 0} true;
    $i63 := $M.10;
    goto corral_source_split_6957;

  corral_source_split_6957:
    assume {:verifier.code 0} true;
    $i64 := $and.i32($i63, 16);
    goto corral_source_split_6958;

  corral_source_split_6958:
    assume {:verifier.code 0} true;
    $i65 := $ne.i32($i64, 0);
    goto corral_source_split_6959;

  corral_source_split_6959:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    assume !($i65 == 1);
    goto $bb52;

  $bb53:
    assume $i65 == 1;
    goto corral_source_split_6961;

  corral_source_split_6961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 946} vslice_dummy_var_234 := printk.ref.ref.i32.i32(.str.5, .str.145, $i59, 71);
    goto corral_source_split_6962;

  corral_source_split_6962:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb282:
    assume {:verifier.code 0} true;
    assume $i340 == 1;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto corral_source_split_6931;

  corral_source_split_6931:
    assume {:verifier.code 0} true;
    $i17 := $i55;
    goto $bb12;

  $bb276:
    assume $i340 == 1;
    goto corral_source_split_7364;

  corral_source_split_7364:
    assume {:verifier.code 0} true;
    $i341 := $M.10;
    goto corral_source_split_7365;

  corral_source_split_7365:
    assume {:verifier.code 0} true;
    $i342 := $and.i32($i341, 16);
    goto corral_source_split_7366;

  corral_source_split_7366:
    assume {:verifier.code 0} true;
    $i343 := $ne.i32($i342, 0);
    goto corral_source_split_7367;

  corral_source_split_7367:
    assume {:verifier.code 0} true;
    assume {:branchcond $i343} true;
    goto $bb279, $bb280;

  $bb280:
    assume {:verifier.code 0} true;
    assume !($i343 == 1);
    goto $bb278;

  $bb279:
    assume $i343 == 1;
    goto corral_source_split_7369;

  corral_source_split_7369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 999} vslice_dummy_var_258 := printk.ref.ref.i32.i32(.str.5, .str.145, $i339, 63);
    goto corral_source_split_7370;

  corral_source_split_7370:
    assume {:verifier.code 0} true;
    goto $bb281;

  $bb273:
    assume {:verifier.code 0} true;
    assume $i330 == 1;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_6914;

  corral_source_split_6914:
    assume {:verifier.code 0} true;
    $i17 := $i44;
    goto $bb12;

  $bb267:
    assume $i330 == 1;
    goto corral_source_split_7349;

  corral_source_split_7349:
    assume {:verifier.code 0} true;
    $i331 := $M.10;
    goto corral_source_split_7350;

  corral_source_split_7350:
    assume {:verifier.code 0} true;
    $i332 := $and.i32($i331, 16);
    goto corral_source_split_7351;

  corral_source_split_7351:
    assume {:verifier.code 0} true;
    $i333 := $ne.i32($i332, 0);
    goto corral_source_split_7352;

  corral_source_split_7352:
    assume {:verifier.code 0} true;
    assume {:branchcond $i333} true;
    goto $bb270, $bb271;

  $bb271:
    assume {:verifier.code 0} true;
    assume !($i333 == 1);
    goto $bb269;

  $bb270:
    assume $i333 == 1;
    goto corral_source_split_7354;

  corral_source_split_7354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 997} vslice_dummy_var_257 := printk.ref.ref.i32.i32(.str.5, .str.145, $i329, 58);
    goto corral_source_split_7355;

  corral_source_split_7355:
    assume {:verifier.code 0} true;
    goto $bb272;

  $bb264:
    assume {:verifier.code 0} true;
    assume $i320 == 1;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_6897;

  corral_source_split_6897:
    assume {:verifier.code 0} true;
    $i17 := $i33;
    goto $bb12;

  $bb258:
    assume $i320 == 1;
    goto corral_source_split_7334;

  corral_source_split_7334:
    assume {:verifier.code 0} true;
    $i321 := $M.10;
    goto corral_source_split_7335;

  corral_source_split_7335:
    assume {:verifier.code 0} true;
    $i322 := $and.i32($i321, 16);
    goto corral_source_split_7336;

  corral_source_split_7336:
    assume {:verifier.code 0} true;
    $i323 := $ne.i32($i322, 0);
    goto corral_source_split_7337;

  corral_source_split_7337:
    assume {:verifier.code 0} true;
    assume {:branchcond $i323} true;
    goto $bb261, $bb262;

  $bb262:
    assume {:verifier.code 0} true;
    assume !($i323 == 1);
    goto $bb260;

  $bb261:
    assume $i323 == 1;
    goto corral_source_split_7339;

  corral_source_split_7339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 995} vslice_dummy_var_256 := printk.ref.ref.i32.i32(.str.5, .str.145, $i319, 53);
    goto corral_source_split_7340;

  corral_source_split_7340:
    assume {:verifier.code 0} true;
    goto $bb263;

  $bb254:
    assume {:verifier.code 0} true;
    assume $i305 == 1;
    goto $bb43;

  $bb248:
    assume $i305 == 1;
    goto corral_source_split_7313;

  corral_source_split_7313:
    assume {:verifier.code 0} true;
    $i306 := $M.10;
    goto corral_source_split_7314;

  corral_source_split_7314:
    assume {:verifier.code 0} true;
    $i307 := $and.i32($i306, 16);
    goto corral_source_split_7315;

  corral_source_split_7315:
    assume {:verifier.code 0} true;
    $i308 := $ne.i32($i307, 0);
    goto corral_source_split_7316;

  corral_source_split_7316:
    assume {:verifier.code 0} true;
    assume {:branchcond $i308} true;
    goto $bb251, $bb252;

  $bb252:
    assume {:verifier.code 0} true;
    assume !($i308 == 1);
    goto $bb250;

  $bb251:
    assume $i308 == 1;
    goto corral_source_split_7318;

  corral_source_split_7318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 993} vslice_dummy_var_255 := printk.ref.ref.i32.i32(.str.5, .str.145, $i304, 63);
    goto corral_source_split_7319;

  corral_source_split_7319:
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb245:
    assume {:verifier.code 0} true;
    assume $i295 == 1;
    goto $bb33;

  $bb239:
    assume $i295 == 1;
    goto corral_source_split_7298;

  corral_source_split_7298:
    assume {:verifier.code 0} true;
    $i296 := $M.10;
    goto corral_source_split_7299;

  corral_source_split_7299:
    assume {:verifier.code 0} true;
    $i297 := $and.i32($i296, 16);
    goto corral_source_split_7300;

  corral_source_split_7300:
    assume {:verifier.code 0} true;
    $i298 := $ne.i32($i297, 0);
    goto corral_source_split_7301;

  corral_source_split_7301:
    assume {:verifier.code 0} true;
    assume {:branchcond $i298} true;
    goto $bb242, $bb243;

  $bb243:
    assume {:verifier.code 0} true;
    assume !($i298 == 1);
    goto $bb241;

  $bb242:
    assume $i298 == 1;
    goto corral_source_split_7303;

  corral_source_split_7303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 991} vslice_dummy_var_254 := printk.ref.ref.i32.i32(.str.5, .str.145, $i294, 58);
    goto corral_source_split_7304;

  corral_source_split_7304:
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb236:
    assume {:verifier.code 0} true;
    assume $i285 == 1;
    goto $bb23;

  $bb230:
    assume $i285 == 1;
    goto corral_source_split_7283;

  corral_source_split_7283:
    assume {:verifier.code 0} true;
    $i286 := $M.10;
    goto corral_source_split_7284;

  corral_source_split_7284:
    assume {:verifier.code 0} true;
    $i287 := $and.i32($i286, 16);
    goto corral_source_split_7285;

  corral_source_split_7285:
    assume {:verifier.code 0} true;
    $i288 := $ne.i32($i287, 0);
    goto corral_source_split_7286;

  corral_source_split_7286:
    assume {:verifier.code 0} true;
    assume {:branchcond $i288} true;
    goto $bb233, $bb234;

  $bb234:
    assume {:verifier.code 0} true;
    assume !($i288 == 1);
    goto $bb232;

  $bb233:
    assume $i288 == 1;
    goto corral_source_split_7288;

  corral_source_split_7288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 989} vslice_dummy_var_253 := printk.ref.ref.i32.i32(.str.5, .str.145, $i284, 53);
    goto corral_source_split_7289;

  corral_source_split_7289:
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb226:
    assume {:verifier.code 0} true;
    assume $i270 == 1;
    goto $bb43;

  $bb220:
    assume $i270 == 1;
    goto corral_source_split_7262;

  corral_source_split_7262:
    assume {:verifier.code 0} true;
    $i271 := $M.10;
    goto corral_source_split_7263;

  corral_source_split_7263:
    assume {:verifier.code 0} true;
    $i272 := $and.i32($i271, 16);
    goto corral_source_split_7264;

  corral_source_split_7264:
    assume {:verifier.code 0} true;
    $i273 := $ne.i32($i272, 0);
    goto corral_source_split_7265;

  corral_source_split_7265:
    assume {:verifier.code 0} true;
    assume {:branchcond $i273} true;
    goto $bb223, $bb224;

  $bb224:
    assume {:verifier.code 0} true;
    assume !($i273 == 1);
    goto $bb222;

  $bb223:
    assume $i273 == 1;
    goto corral_source_split_7267;

  corral_source_split_7267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 987} vslice_dummy_var_252 := printk.ref.ref.i32.i32(.str.5, .str.145, $i269, 63);
    goto corral_source_split_7268;

  corral_source_split_7268:
    assume {:verifier.code 0} true;
    goto $bb225;

  $bb217:
    assume {:verifier.code 0} true;
    assume $i260 == 1;
    goto $bb33;

  $bb211:
    assume $i260 == 1;
    goto corral_source_split_7247;

  corral_source_split_7247:
    assume {:verifier.code 0} true;
    $i261 := $M.10;
    goto corral_source_split_7248;

  corral_source_split_7248:
    assume {:verifier.code 0} true;
    $i262 := $and.i32($i261, 16);
    goto corral_source_split_7249;

  corral_source_split_7249:
    assume {:verifier.code 0} true;
    $i263 := $ne.i32($i262, 0);
    goto corral_source_split_7250;

  corral_source_split_7250:
    assume {:verifier.code 0} true;
    assume {:branchcond $i263} true;
    goto $bb214, $bb215;

  $bb215:
    assume {:verifier.code 0} true;
    assume !($i263 == 1);
    goto $bb213;

  $bb214:
    assume $i263 == 1;
    goto corral_source_split_7252;

  corral_source_split_7252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 985} vslice_dummy_var_251 := printk.ref.ref.i32.i32(.str.5, .str.145, $i259, 58);
    goto corral_source_split_7253;

  corral_source_split_7253:
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb208:
    assume {:verifier.code 0} true;
    assume $i250 == 1;
    goto $bb23;

  $bb202:
    assume $i250 == 1;
    goto corral_source_split_7232;

  corral_source_split_7232:
    assume {:verifier.code 0} true;
    $i251 := $M.10;
    goto corral_source_split_7233;

  corral_source_split_7233:
    assume {:verifier.code 0} true;
    $i252 := $and.i32($i251, 16);
    goto corral_source_split_7234;

  corral_source_split_7234:
    assume {:verifier.code 0} true;
    $i253 := $ne.i32($i252, 0);
    goto corral_source_split_7235;

  corral_source_split_7235:
    assume {:verifier.code 0} true;
    assume {:branchcond $i253} true;
    goto $bb205, $bb206;

  $bb206:
    assume {:verifier.code 0} true;
    assume !($i253 == 1);
    goto $bb204;

  $bb205:
    assume $i253 == 1;
    goto corral_source_split_7237;

  corral_source_split_7237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 983} vslice_dummy_var_250 := printk.ref.ref.i32.i32(.str.5, .str.145, $i249, 53);
    goto corral_source_split_7238;

  corral_source_split_7238:
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb198:
    assume {:verifier.code 0} true;
    assume $i235 == 1;
    goto $bb43;

  $bb192:
    assume $i235 == 1;
    goto corral_source_split_7211;

  corral_source_split_7211:
    assume {:verifier.code 0} true;
    $i236 := $M.10;
    goto corral_source_split_7212;

  corral_source_split_7212:
    assume {:verifier.code 0} true;
    $i237 := $and.i32($i236, 16);
    goto corral_source_split_7213;

  corral_source_split_7213:
    assume {:verifier.code 0} true;
    $i238 := $ne.i32($i237, 0);
    goto corral_source_split_7214;

  corral_source_split_7214:
    assume {:verifier.code 0} true;
    assume {:branchcond $i238} true;
    goto $bb195, $bb196;

  $bb196:
    assume {:verifier.code 0} true;
    assume !($i238 == 1);
    goto $bb194;

  $bb195:
    assume $i238 == 1;
    goto corral_source_split_7216;

  corral_source_split_7216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 981} vslice_dummy_var_249 := printk.ref.ref.i32.i32(.str.5, .str.145, $i234, 63);
    goto corral_source_split_7217;

  corral_source_split_7217:
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb189:
    assume {:verifier.code 0} true;
    assume $i225 == 1;
    goto $bb33;

  $bb183:
    assume $i225 == 1;
    goto corral_source_split_7196;

  corral_source_split_7196:
    assume {:verifier.code 0} true;
    $i226 := $M.10;
    goto corral_source_split_7197;

  corral_source_split_7197:
    assume {:verifier.code 0} true;
    $i227 := $and.i32($i226, 16);
    goto corral_source_split_7198;

  corral_source_split_7198:
    assume {:verifier.code 0} true;
    $i228 := $ne.i32($i227, 0);
    goto corral_source_split_7199;

  corral_source_split_7199:
    assume {:verifier.code 0} true;
    assume {:branchcond $i228} true;
    goto $bb186, $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    assume !($i228 == 1);
    goto $bb185;

  $bb186:
    assume $i228 == 1;
    goto corral_source_split_7201;

  corral_source_split_7201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 979} vslice_dummy_var_248 := printk.ref.ref.i32.i32(.str.5, .str.145, $i224, 58);
    goto corral_source_split_7202;

  corral_source_split_7202:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb180:
    assume {:verifier.code 0} true;
    assume $i215 == 1;
    goto $bb23;

  $bb174:
    assume $i215 == 1;
    goto corral_source_split_7181;

  corral_source_split_7181:
    assume {:verifier.code 0} true;
    $i216 := $M.10;
    goto corral_source_split_7182;

  corral_source_split_7182:
    assume {:verifier.code 0} true;
    $i217 := $and.i32($i216, 16);
    goto corral_source_split_7183;

  corral_source_split_7183:
    assume {:verifier.code 0} true;
    $i218 := $ne.i32($i217, 0);
    goto corral_source_split_7184;

  corral_source_split_7184:
    assume {:verifier.code 0} true;
    assume {:branchcond $i218} true;
    goto $bb177, $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    assume !($i218 == 1);
    goto $bb176;

  $bb177:
    assume $i218 == 1;
    goto corral_source_split_7186;

  corral_source_split_7186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 977} vslice_dummy_var_247 := printk.ref.ref.i32.i32(.str.5, .str.145, $i214, 53);
    goto corral_source_split_7187;

  corral_source_split_7187:
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb170:
    assume {:verifier.code 0} true;
    assume $i200 == 1;
    goto $bb43;

  $bb164:
    assume $i200 == 1;
    goto corral_source_split_7160;

  corral_source_split_7160:
    assume {:verifier.code 0} true;
    $i201 := $M.10;
    goto corral_source_split_7161;

  corral_source_split_7161:
    assume {:verifier.code 0} true;
    $i202 := $and.i32($i201, 16);
    goto corral_source_split_7162;

  corral_source_split_7162:
    assume {:verifier.code 0} true;
    $i203 := $ne.i32($i202, 0);
    goto corral_source_split_7163;

  corral_source_split_7163:
    assume {:verifier.code 0} true;
    assume {:branchcond $i203} true;
    goto $bb167, $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    assume !($i203 == 1);
    goto $bb166;

  $bb167:
    assume $i203 == 1;
    goto corral_source_split_7165;

  corral_source_split_7165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 975} vslice_dummy_var_246 := printk.ref.ref.i32.i32(.str.5, .str.145, $i199, 63);
    goto corral_source_split_7166;

  corral_source_split_7166:
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb161:
    assume {:verifier.code 0} true;
    assume $i190 == 1;
    goto $bb33;

  $bb155:
    assume $i190 == 1;
    goto corral_source_split_7145;

  corral_source_split_7145:
    assume {:verifier.code 0} true;
    $i191 := $M.10;
    goto corral_source_split_7146;

  corral_source_split_7146:
    assume {:verifier.code 0} true;
    $i192 := $and.i32($i191, 16);
    goto corral_source_split_7147;

  corral_source_split_7147:
    assume {:verifier.code 0} true;
    $i193 := $ne.i32($i192, 0);
    goto corral_source_split_7148;

  corral_source_split_7148:
    assume {:verifier.code 0} true;
    assume {:branchcond $i193} true;
    goto $bb158, $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    assume !($i193 == 1);
    goto $bb157;

  $bb158:
    assume $i193 == 1;
    goto corral_source_split_7150;

  corral_source_split_7150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 973} vslice_dummy_var_245 := printk.ref.ref.i32.i32(.str.5, .str.145, $i189, 58);
    goto corral_source_split_7151;

  corral_source_split_7151:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb152:
    assume {:verifier.code 0} true;
    assume $i180 == 1;
    goto $bb23;

  $bb146:
    assume $i180 == 1;
    goto corral_source_split_7130;

  corral_source_split_7130:
    assume {:verifier.code 0} true;
    $i181 := $M.10;
    goto corral_source_split_7131;

  corral_source_split_7131:
    assume {:verifier.code 0} true;
    $i182 := $and.i32($i181, 16);
    goto corral_source_split_7132;

  corral_source_split_7132:
    assume {:verifier.code 0} true;
    $i183 := $ne.i32($i182, 0);
    goto corral_source_split_7133;

  corral_source_split_7133:
    assume {:verifier.code 0} true;
    assume {:branchcond $i183} true;
    goto $bb149, $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    assume !($i183 == 1);
    goto $bb148;

  $bb149:
    assume $i183 == 1;
    goto corral_source_split_7135;

  corral_source_split_7135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 971} vslice_dummy_var_244 := printk.ref.ref.i32.i32(.str.5, .str.145, $i179, 53);
    goto corral_source_split_7136;

  corral_source_split_7136:
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb142:
    assume {:verifier.code 0} true;
    assume $i165 == 1;
    goto $bb43;

  $bb136:
    assume $i165 == 1;
    goto corral_source_split_7109;

  corral_source_split_7109:
    assume {:verifier.code 0} true;
    $i166 := $M.10;
    goto corral_source_split_7110;

  corral_source_split_7110:
    assume {:verifier.code 0} true;
    $i167 := $and.i32($i166, 16);
    goto corral_source_split_7111;

  corral_source_split_7111:
    assume {:verifier.code 0} true;
    $i168 := $ne.i32($i167, 0);
    goto corral_source_split_7112;

  corral_source_split_7112:
    assume {:verifier.code 0} true;
    assume {:branchcond $i168} true;
    goto $bb139, $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    assume !($i168 == 1);
    goto $bb138;

  $bb139:
    assume $i168 == 1;
    goto corral_source_split_7114;

  corral_source_split_7114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 969} vslice_dummy_var_243 := printk.ref.ref.i32.i32(.str.5, .str.145, $i164, 63);
    goto corral_source_split_7115;

  corral_source_split_7115:
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb133:
    assume {:verifier.code 0} true;
    assume $i155 == 1;
    goto $bb33;

  $bb127:
    assume $i155 == 1;
    goto corral_source_split_7094;

  corral_source_split_7094:
    assume {:verifier.code 0} true;
    $i156 := $M.10;
    goto corral_source_split_7095;

  corral_source_split_7095:
    assume {:verifier.code 0} true;
    $i157 := $and.i32($i156, 16);
    goto corral_source_split_7096;

  corral_source_split_7096:
    assume {:verifier.code 0} true;
    $i158 := $ne.i32($i157, 0);
    goto corral_source_split_7097;

  corral_source_split_7097:
    assume {:verifier.code 0} true;
    assume {:branchcond $i158} true;
    goto $bb130, $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    assume !($i158 == 1);
    goto $bb129;

  $bb130:
    assume $i158 == 1;
    goto corral_source_split_7099;

  corral_source_split_7099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 967} vslice_dummy_var_242 := printk.ref.ref.i32.i32(.str.5, .str.145, $i154, 58);
    goto corral_source_split_7100;

  corral_source_split_7100:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb124:
    assume {:verifier.code 0} true;
    assume $i145 == 1;
    goto $bb23;

  $bb118:
    assume $i145 == 1;
    goto corral_source_split_7079;

  corral_source_split_7079:
    assume {:verifier.code 0} true;
    $i146 := $M.10;
    goto corral_source_split_7080;

  corral_source_split_7080:
    assume {:verifier.code 0} true;
    $i147 := $and.i32($i146, 16);
    goto corral_source_split_7081;

  corral_source_split_7081:
    assume {:verifier.code 0} true;
    $i148 := $ne.i32($i147, 0);
    goto corral_source_split_7082;

  corral_source_split_7082:
    assume {:verifier.code 0} true;
    assume {:branchcond $i148} true;
    goto $bb121, $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    assume !($i148 == 1);
    goto $bb120;

  $bb121:
    assume $i148 == 1;
    goto corral_source_split_7084;

  corral_source_split_7084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 965} vslice_dummy_var_241 := printk.ref.ref.i32.i32(.str.5, .str.145, $i144, 53);
    goto corral_source_split_7085;

  corral_source_split_7085:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb114:
    assume {:verifier.code 0} true;
    assume $i130 == 1;
    goto $bb43;

  $bb108:
    assume $i130 == 1;
    goto corral_source_split_7058;

  corral_source_split_7058:
    assume {:verifier.code 0} true;
    $i131 := $M.10;
    goto corral_source_split_7059;

  corral_source_split_7059:
    assume {:verifier.code 0} true;
    $i132 := $and.i32($i131, 16);
    goto corral_source_split_7060;

  corral_source_split_7060:
    assume {:verifier.code 0} true;
    $i133 := $ne.i32($i132, 0);
    goto corral_source_split_7061;

  corral_source_split_7061:
    assume {:verifier.code 0} true;
    assume {:branchcond $i133} true;
    goto $bb111, $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    assume !($i133 == 1);
    goto $bb110;

  $bb111:
    assume $i133 == 1;
    goto corral_source_split_7063;

  corral_source_split_7063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 963} vslice_dummy_var_240 := printk.ref.ref.i32.i32(.str.5, .str.145, $i129, 63);
    goto corral_source_split_7064;

  corral_source_split_7064:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb105:
    assume {:verifier.code 0} true;
    assume $i120 == 1;
    goto $bb33;

  $bb99:
    assume $i120 == 1;
    goto corral_source_split_7043;

  corral_source_split_7043:
    assume {:verifier.code 0} true;
    $i121 := $M.10;
    goto corral_source_split_7044;

  corral_source_split_7044:
    assume {:verifier.code 0} true;
    $i122 := $and.i32($i121, 16);
    goto corral_source_split_7045;

  corral_source_split_7045:
    assume {:verifier.code 0} true;
    $i123 := $ne.i32($i122, 0);
    goto corral_source_split_7046;

  corral_source_split_7046:
    assume {:verifier.code 0} true;
    assume {:branchcond $i123} true;
    goto $bb102, $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    assume !($i123 == 1);
    goto $bb101;

  $bb102:
    assume $i123 == 1;
    goto corral_source_split_7048;

  corral_source_split_7048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 961} vslice_dummy_var_239 := printk.ref.ref.i32.i32(.str.5, .str.145, $i119, 58);
    goto corral_source_split_7049;

  corral_source_split_7049:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb96:
    assume {:verifier.code 0} true;
    assume $i110 == 1;
    goto $bb23;

  $bb90:
    assume $i110 == 1;
    goto corral_source_split_7028;

  corral_source_split_7028:
    assume {:verifier.code 0} true;
    $i111 := $M.10;
    goto corral_source_split_7029;

  corral_source_split_7029:
    assume {:verifier.code 0} true;
    $i112 := $and.i32($i111, 16);
    goto corral_source_split_7030;

  corral_source_split_7030:
    assume {:verifier.code 0} true;
    $i113 := $ne.i32($i112, 0);
    goto corral_source_split_7031;

  corral_source_split_7031:
    assume {:verifier.code 0} true;
    assume {:branchcond $i113} true;
    goto $bb93, $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    assume !($i113 == 1);
    goto $bb92;

  $bb93:
    assume $i113 == 1;
    goto corral_source_split_7033;

  corral_source_split_7033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 959} vslice_dummy_var_238 := printk.ref.ref.i32.i32(.str.5, .str.145, $i109, 53);
    goto corral_source_split_7034;

  corral_source_split_7034:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb42:
    assume {:verifier.code 0} true;
    assume $i50 == 1;
    goto $bb43;

  $bb36:
    assume $i50 == 1;
    goto corral_source_split_6923;

  corral_source_split_6923:
    assume {:verifier.code 0} true;
    $i51 := $M.10;
    goto corral_source_split_6924;

  corral_source_split_6924:
    assume {:verifier.code 0} true;
    $i52 := $and.i32($i51, 16);
    goto corral_source_split_6925;

  corral_source_split_6925:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_6926;

  corral_source_split_6926:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    assume !($i53 == 1);
    goto $bb38;

  $bb39:
    assume $i53 == 1;
    goto corral_source_split_6928;

  corral_source_split_6928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 941} vslice_dummy_var_233 := printk.ref.ref.i32.i32(.str.5, .str.145, $i49, 63);
    goto corral_source_split_6929;

  corral_source_split_6929:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i39 == 1;
    goto $bb33;

  $bb26:
    assume $i39 == 1;
    goto corral_source_split_6906;

  corral_source_split_6906:
    assume {:verifier.code 0} true;
    $i40 := $M.10;
    goto corral_source_split_6907;

  corral_source_split_6907:
    assume {:verifier.code 0} true;
    $i41 := $and.i32($i40, 16);
    goto corral_source_split_6908;

  corral_source_split_6908:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_6909;

  corral_source_split_6909:
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb28;

  $bb29:
    assume $i42 == 1;
    goto corral_source_split_6911;

  corral_source_split_6911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 938} vslice_dummy_var_232 := printk.ref.ref.i32.i32(.str.5, .str.145, $i38, 58);
    goto corral_source_split_6912;

  corral_source_split_6912:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb23;

  $bb16:
    assume $i28 == 1;
    goto corral_source_split_6889;

  corral_source_split_6889:
    assume {:verifier.code 0} true;
    $i29 := $M.10;
    goto corral_source_split_6890;

  corral_source_split_6890:
    assume {:verifier.code 0} true;
    $i30 := $and.i32($i29, 16);
    goto corral_source_split_6891;

  corral_source_split_6891:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_6892;

  corral_source_split_6892:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb18;

  $bb19:
    assume $i31 == 1;
    goto corral_source_split_6894;

  corral_source_split_6894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 935} vslice_dummy_var_231 := printk.ref.ref.i32.i32(.str.5, .str.145, $i27, 53);
    goto corral_source_split_6895;

  corral_source_split_6895:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb10:
    assume $i16 == 1;
    goto corral_source_split_6872;

  corral_source_split_6872:
    assume {:verifier.code 0} true;
    $i17 := $i8;
    goto $bb12;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_6862;

  corral_source_split_6862:
    assume {:verifier.code 0} true;
    $i12 := $M.10;
    goto corral_source_split_6863;

  corral_source_split_6863:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i12, 16);
    goto corral_source_split_6864;

  corral_source_split_6864:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_6865;

  corral_source_split_6865:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb6;

  $bb7:
    assume $i14 == 1;
    goto corral_source_split_6867;

  corral_source_split_6867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 932} vslice_dummy_var_230 := printk.ref.ref.i32.i32(.str.5, .str.145, $i8, 44);
    goto corral_source_split_6868;

  corral_source_split_6868:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_6853;

  corral_source_split_6853:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i1);
    goto corral_source_split_6854;

  corral_source_split_6854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 928} vslice_dummy_var_229 := printk.ref.ref.i32(.str.30, .str.145, $i6);
    goto corral_source_split_6855;

  corral_source_split_6855:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mxl111sf_i2c_stop: ref;

axiom mxl111sf_i2c_stop == $sub.ref(0, 375892);

procedure mxl111sf_i2c_stop($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.15, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation mxl111sf_i2c_stop($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i13: i1;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $i23: i1;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $i32: i1;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $i38: i32;
  var $i39: i1;
  var $i14: i32;
  var vslice_dummy_var_259: i32;
  var vslice_dummy_var_260: i32;
  var vslice_dummy_var_261: i32;
  var vslice_dummy_var_262: i32;
  var vslice_dummy_var_263: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7372;

  corral_source_split_7372:
    assume {:verifier.code 0} true;
    $i1 := $M.10;
    goto corral_source_split_7373;

  corral_source_split_7373:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, 4);
    goto corral_source_split_7374;

  corral_source_split_7374:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_7375;

  corral_source_split_7375:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1001} $i5 := mxl111sf_write_reg($p0, 26, 18);
    call {:si_unique_call 1002} {:cexpr "ret"} boogie_si_record_i32($i5);
    goto corral_source_split_7380;

  corral_source_split_7380:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 0);
    goto corral_source_split_7381;

  corral_source_split_7381:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    call {:si_unique_call 1003} {:cexpr "__ret"} boogie_si_record_i32($i7);
    goto corral_source_split_7382;

  corral_source_split_7382:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_7383;

  corral_source_split_7383:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i7, 0);
    goto corral_source_split_7393;

  corral_source_split_7393:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1005} $i15 := mxl111sf_write_reg($p0, 26, 22);
    call {:si_unique_call 1006} {:cexpr "ret"} boogie_si_record_i32($i15);
    goto corral_source_split_7399;

  corral_source_split_7399:
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i15, 0);
    goto corral_source_split_7400;

  corral_source_split_7400:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i32($i16);
    call {:si_unique_call 1007} {:cexpr "__ret___0"} boogie_si_record_i32($i17);
    goto corral_source_split_7401;

  corral_source_split_7401:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_7402;

  corral_source_split_7402:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i17, 0);
    goto corral_source_split_7412;

  corral_source_split_7412:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1009} $i24 := mxl111sf_write_reg($p0, 26, 30);
    call {:si_unique_call 1010} {:cexpr "ret"} boogie_si_record_i32($i24);
    goto corral_source_split_7416;

  corral_source_split_7416:
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i24, 0);
    goto corral_source_split_7417;

  corral_source_split_7417:
    assume {:verifier.code 0} true;
    $i26 := $zext.i1.i32($i25);
    call {:si_unique_call 1011} {:cexpr "__ret___1"} boogie_si_record_i32($i26);
    goto corral_source_split_7418;

  corral_source_split_7418:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_7419;

  corral_source_split_7419:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i26, 0);
    goto corral_source_split_7429;

  corral_source_split_7429:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1013} $i33 := mxl111sf_write_reg($p0, 26, 28);
    call {:si_unique_call 1014} {:cexpr "ret"} boogie_si_record_i32($i33);
    goto corral_source_split_7433;

  corral_source_split_7433:
    assume {:verifier.code 0} true;
    $i34 := $slt.i32($i33, 0);
    goto corral_source_split_7434;

  corral_source_split_7434:
    assume {:verifier.code 0} true;
    $i35 := $zext.i1.i32($i34);
    call {:si_unique_call 1015} {:cexpr "__ret___2"} boogie_si_record_i32($i35);
    goto corral_source_split_7435;

  corral_source_split_7435:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_7436;

  corral_source_split_7436:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i14 := $i33;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_7397;

  corral_source_split_7397:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb32:
    assume $i36 == 1;
    goto corral_source_split_7438;

  corral_source_split_7438:
    assume {:verifier.code 0} true;
    $i37 := $M.10;
    goto corral_source_split_7439;

  corral_source_split_7439:
    assume {:verifier.code 0} true;
    $i38 := $and.i32($i37, 16);
    goto corral_source_split_7440;

  corral_source_split_7440:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_7441;

  corral_source_split_7441:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i39 == 1);
    goto $bb34;

  $bb35:
    assume $i39 == 1;
    goto corral_source_split_7443;

  corral_source_split_7443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1016} vslice_dummy_var_263 := printk.ref.ref.i32.i32(.str.5, .str.146, $i33, 183);
    goto corral_source_split_7444;

  corral_source_split_7444:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb29:
    assume $i32 == 1;
    goto corral_source_split_7431;

  corral_source_split_7431:
    assume {:verifier.code 0} true;
    $i14 := $i24;
    goto $bb12;

  $bb23:
    assume $i27 == 1;
    goto corral_source_split_7421;

  corral_source_split_7421:
    assume {:verifier.code 0} true;
    $i28 := $M.10;
    goto corral_source_split_7422;

  corral_source_split_7422:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i28, 16);
    goto corral_source_split_7423;

  corral_source_split_7423:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_7424;

  corral_source_split_7424:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb25;

  $bb26:
    assume $i30 == 1;
    goto corral_source_split_7426;

  corral_source_split_7426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1012} vslice_dummy_var_262 := printk.ref.ref.i32.i32(.str.5, .str.146, $i24, 178);
    goto corral_source_split_7427;

  corral_source_split_7427:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb20:
    assume $i23 == 1;
    goto corral_source_split_7414;

  corral_source_split_7414:
    assume {:verifier.code 0} true;
    $i14 := $i15;
    goto $bb12;

  $bb14:
    assume $i18 == 1;
    goto corral_source_split_7404;

  corral_source_split_7404:
    assume {:verifier.code 0} true;
    $i19 := $M.10;
    goto corral_source_split_7405;

  corral_source_split_7405:
    assume {:verifier.code 0} true;
    $i20 := $and.i32($i19, 16);
    goto corral_source_split_7406;

  corral_source_split_7406:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_7407;

  corral_source_split_7407:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb16;

  $bb17:
    assume $i21 == 1;
    goto corral_source_split_7409;

  corral_source_split_7409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1008} vslice_dummy_var_261 := printk.ref.ref.i32.i32(.str.5, .str.146, $i15, 173);
    goto corral_source_split_7410;

  corral_source_split_7410:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb10:
    assume $i13 == 1;
    goto corral_source_split_7395;

  corral_source_split_7395:
    assume {:verifier.code 0} true;
    $i14 := $i5;
    goto $bb12;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_7385;

  corral_source_split_7385:
    assume {:verifier.code 0} true;
    $i9 := $M.10;
    goto corral_source_split_7386;

  corral_source_split_7386:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 16);
    goto corral_source_split_7387;

  corral_source_split_7387:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_7388;

  corral_source_split_7388:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb6;

  $bb7:
    assume $i11 == 1;
    goto corral_source_split_7390;

  corral_source_split_7390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1004} vslice_dummy_var_260 := printk.ref.ref.i32.i32(.str.5, .str.146, $i5, 168);
    goto corral_source_split_7391;

  corral_source_split_7391:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_7377;

  corral_source_split_7377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1000} vslice_dummy_var_259 := printk.ref.ref(.str.17, .str.146);
    goto corral_source_split_7378;

  corral_source_split_7378:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mxl111sf_i2c_bitbang_recvbyte: ref;

axiom mxl111sf_i2c_bitbang_recvbyte == $sub.ref(0, 376924);

procedure mxl111sf_i2c_bitbang_recvbyte($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $M.8, $M.15, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation mxl111sf_i2c_bitbang_recvbyte($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $i15: i1;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $i30: i32;
  var $i31: i8;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $i35: i8;
  var $i36: i32;
  var $i37: i1;
  var $i38: i32;
  var $i39: i32;
  var $i40: i1;
  var $i42: i32;
  var $i16: i32;
  var $i45: i32;
  var $i46: i1;
  var $i47: i32;
  var $i48: i32;
  var $i49: i1;
  var $i51: i32;
  var $i52: i1;
  var $i53: i32;
  var $i54: i32;
  var $i55: i1;
  var $i57: i8;
  var $i58: i32;
  var $i59: i32;
  var $i60: i1;
  var $i62: i32;
  var $i63: i32;
  var $i64: i8;
  var $i61: i8;
  var $i65: i32;
  var $i66: i1;
  var $i67: i32;
  var $i68: i32;
  var $i69: i1;
  var $i71: i32;
  var $i72: i1;
  var $i73: i32;
  var $i74: i32;
  var $i75: i1;
  var $i77: i32;
  var $i78: i1;
  var $i79: i32;
  var $i80: i32;
  var $i81: i1;
  var $i83: i8;
  var $i84: i32;
  var $i85: i32;
  var $i86: i1;
  var $i88: i32;
  var $i89: i32;
  var $i90: i8;
  var $i87: i8;
  var $i91: i32;
  var $i92: i1;
  var $i93: i32;
  var $i94: i32;
  var $i95: i1;
  var $i97: i32;
  var $i98: i1;
  var $i99: i32;
  var $i100: i32;
  var $i101: i1;
  var $i103: i32;
  var $i104: i1;
  var $i105: i32;
  var $i106: i32;
  var $i107: i1;
  var $i109: i8;
  var $i110: i32;
  var $i111: i32;
  var $i112: i1;
  var $i114: i32;
  var $i115: i32;
  var $i116: i8;
  var $i113: i8;
  var $i117: i32;
  var $i118: i1;
  var $i119: i32;
  var $i120: i32;
  var $i121: i1;
  var $i123: i32;
  var $i124: i1;
  var $i125: i32;
  var $i126: i32;
  var $i127: i1;
  var $i129: i32;
  var $i130: i1;
  var $i131: i32;
  var $i132: i32;
  var $i133: i1;
  var $i135: i8;
  var $i136: i32;
  var $i137: i32;
  var $i138: i1;
  var $i140: i32;
  var $i141: i32;
  var $i142: i8;
  var $i139: i8;
  var $i143: i32;
  var $i144: i1;
  var $i145: i32;
  var $i146: i32;
  var $i147: i1;
  var $i149: i32;
  var $i150: i1;
  var $i151: i32;
  var $i152: i32;
  var $i153: i1;
  var $i155: i32;
  var $i156: i1;
  var $i157: i32;
  var $i158: i32;
  var $i159: i1;
  var $i161: i8;
  var $i162: i32;
  var $i163: i32;
  var $i164: i1;
  var $i166: i32;
  var $i167: i32;
  var $i168: i8;
  var $i165: i8;
  var $i169: i32;
  var $i170: i1;
  var $i171: i32;
  var $i172: i32;
  var $i173: i1;
  var $i175: i32;
  var $i176: i1;
  var $i177: i32;
  var $i178: i32;
  var $i179: i1;
  var $i181: i32;
  var $i182: i1;
  var $i183: i32;
  var $i184: i32;
  var $i185: i1;
  var $i187: i8;
  var $i188: i32;
  var $i189: i32;
  var $i190: i1;
  var $i192: i32;
  var $i193: i32;
  var $i194: i8;
  var $i191: i8;
  var $i195: i32;
  var $i196: i1;
  var $i197: i32;
  var $i198: i32;
  var $i199: i1;
  var $i201: i32;
  var $i202: i1;
  var $i203: i32;
  var $i204: i32;
  var $i205: i1;
  var $i207: i32;
  var $i208: i1;
  var $i209: i32;
  var $i210: i32;
  var $i211: i1;
  var $i213: i8;
  var $i214: i32;
  var $i215: i32;
  var $i216: i1;
  var $i217: i32;
  var $i218: i32;
  var $i219: i8;
  var $i43: i8;
  var $i44: i32;
  var $i220: i1;
  var $i221: i32;
  var $i222: i32;
  var $i223: i1;
  var vslice_dummy_var_264: i32;
  var vslice_dummy_var_265: i32;
  var vslice_dummy_var_266: i32;
  var vslice_dummy_var_267: i32;
  var vslice_dummy_var_268: i32;
  var vslice_dummy_var_269: i32;
  var vslice_dummy_var_270: i32;
  var vslice_dummy_var_271: i32;
  var vslice_dummy_var_272: i32;
  var vslice_dummy_var_273: i32;
  var vslice_dummy_var_274: i32;
  var vslice_dummy_var_275: i32;
  var vslice_dummy_var_276: i32;
  var vslice_dummy_var_277: i32;
  var vslice_dummy_var_278: i32;
  var vslice_dummy_var_279: i32;
  var vslice_dummy_var_280: i32;
  var vslice_dummy_var_281: i32;
  var vslice_dummy_var_282: i32;
  var vslice_dummy_var_283: i32;
  var vslice_dummy_var_284: i32;
  var vslice_dummy_var_285: i32;
  var vslice_dummy_var_286: i32;
  var vslice_dummy_var_287: i32;
  var vslice_dummy_var_288: i32;
  var vslice_dummy_var_289: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1017} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    goto corral_source_split_7446;

  corral_source_split_7446:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p2, 0);
    goto corral_source_split_7447;

  corral_source_split_7447:
    assume {:verifier.code 0} true;
    $i3 := $M.10;
    goto corral_source_split_7448;

  corral_source_split_7448:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 4);
    goto corral_source_split_7449;

  corral_source_split_7449:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_7450;

  corral_source_split_7450:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p1, 0);
    goto corral_source_split_7455;

  corral_source_split_7455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1019} $i7 := mxl111sf_write_reg($p0, 26, 26);
    call {:si_unique_call 1020} {:cexpr "ret"} boogie_si_record_i32($i7);
    goto corral_source_split_7456;

  corral_source_split_7456:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i7, 0);
    goto corral_source_split_7457;

  corral_source_split_7457:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    call {:si_unique_call 1021} {:cexpr "__ret"} boogie_si_record_i32($i9);
    goto corral_source_split_7458;

  corral_source_split_7458:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_7459;

  corral_source_split_7459:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i9, 0);
    goto corral_source_split_7469;

  corral_source_split_7469:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1023} $i17 := mxl111sf_write_reg($p0, 26, 30);
    call {:si_unique_call 1024} {:cexpr "ret"} boogie_si_record_i32($i17);
    goto corral_source_split_7475;

  corral_source_split_7475:
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i17, 0);
    goto corral_source_split_7476;

  corral_source_split_7476:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i23 := $i17;
    assume true;
    goto $bb22, $bb24;

  $bb24:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1026} $i24 := mxl111sf_read_reg($p0, 47, $p2);
    call {:si_unique_call 1027} {:cexpr "ret"} boogie_si_record_i32($i24);
    goto corral_source_split_7488;

  corral_source_split_7488:
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i24, 0);
    goto corral_source_split_7489;

  corral_source_split_7489:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i30 := $i24;
    assume true;
    goto $bb32, $bb34;

  $bb34:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.7, $p2);
    goto corral_source_split_7501;

  corral_source_split_7501:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i31);
    goto corral_source_split_7502;

  corral_source_split_7502:
    assume {:verifier.code 0} true;
    $i33 := $and.i32($i32, 4);
    goto corral_source_split_7503;

  corral_source_split_7503:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_7504;

  corral_source_split_7504:
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    $i35 := 0;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto corral_source_split_7508;

  corral_source_split_7508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1029} $i36 := mxl111sf_write_reg($p0, 26, 26);
    call {:si_unique_call 1030} {:cexpr "ret"} boogie_si_record_i32($i36);
    goto corral_source_split_7509;

  corral_source_split_7509:
    assume {:verifier.code 0} true;
    $i37 := $slt.i32($i36, 0);
    goto corral_source_split_7510;

  corral_source_split_7510:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb39, $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i42 := $i36;
    assume {:branchcond $i37} true;
    goto $bb45, $bb47;

  $bb47:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1032} $i45 := mxl111sf_write_reg($p0, 26, 30);
    goto corral_source_split_7522;

  corral_source_split_7522:
    assume {:verifier.code 0} true;
    $i46 := $slt.i32($i45, 0);
    goto corral_source_split_7523;

  corral_source_split_7523:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb51, $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $i23 := $i45;
    assume {:branchcond $i46} true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1034} $i51 := mxl111sf_read_reg($p0, 47, $p2);
    goto corral_source_split_7535;

  corral_source_split_7535:
    assume {:verifier.code 0} true;
    $i52 := $slt.i32($i51, 0);
    goto corral_source_split_7536;

  corral_source_split_7536:
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb60, $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    assume !($i52 == 1);
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $i30 := $i51;
    assume {:branchcond $i52} true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $i57 := $load.i8($M.7, $p2);
    goto corral_source_split_7546;

  corral_source_split_7546:
    assume {:verifier.code 0} true;
    $i58 := $zext.i8.i32($i57);
    goto corral_source_split_7547;

  corral_source_split_7547:
    assume {:verifier.code 0} true;
    $i59 := $and.i32($i58, 4);
    goto corral_source_split_7548;

  corral_source_split_7548:
    assume {:verifier.code 0} true;
    $i60 := $ne.i32($i59, 0);
    goto corral_source_split_7549;

  corral_source_split_7549:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    $i61 := $i35;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    goto corral_source_split_7556;

  corral_source_split_7556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1036} $i65 := mxl111sf_write_reg($p0, 26, 26);
    goto corral_source_split_7557;

  corral_source_split_7557:
    assume {:verifier.code 0} true;
    $i66 := $slt.i32($i65, 0);
    goto corral_source_split_7558;

  corral_source_split_7558:
    assume {:verifier.code 0} true;
    assume {:branchcond $i66} true;
    goto $bb72, $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    assume !($i66 == 1);
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $i42 := $i65;
    assume {:branchcond $i66} true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1038} $i71 := mxl111sf_write_reg($p0, 26, 30);
    goto corral_source_split_7568;

  corral_source_split_7568:
    assume {:verifier.code 0} true;
    $i72 := $slt.i32($i71, 0);
    goto corral_source_split_7569;

  corral_source_split_7569:
    assume {:verifier.code 0} true;
    assume {:branchcond $i72} true;
    goto $bb82, $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    assume !($i72 == 1);
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    $i23 := $i71;
    assume {:branchcond $i72} true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1040} $i77 := mxl111sf_read_reg($p0, 47, $p2);
    goto corral_source_split_7579;

  corral_source_split_7579:
    assume {:verifier.code 0} true;
    $i78 := $slt.i32($i77, 0);
    goto corral_source_split_7580;

  corral_source_split_7580:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    assume !($i78 == 1);
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    $i30 := $i77;
    assume true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    $i83 := $load.i8($M.7, $p2);
    goto corral_source_split_7590;

  corral_source_split_7590:
    assume {:verifier.code 0} true;
    $i84 := $zext.i8.i32($i83);
    goto corral_source_split_7591;

  corral_source_split_7591:
    assume {:verifier.code 0} true;
    $i85 := $and.i32($i84, 4);
    goto corral_source_split_7592;

  corral_source_split_7592:
    assume {:verifier.code 0} true;
    $i86 := $ne.i32($i85, 0);
    goto corral_source_split_7593;

  corral_source_split_7593:
    assume {:verifier.code 0} true;
    assume {:branchcond $i86} true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    $i87 := $i61;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    goto corral_source_split_7600;

  corral_source_split_7600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1042} $i91 := mxl111sf_write_reg($p0, 26, 26);
    goto corral_source_split_7601;

  corral_source_split_7601:
    assume {:verifier.code 0} true;
    $i92 := $slt.i32($i91, 0);
    goto corral_source_split_7602;

  corral_source_split_7602:
    assume {:verifier.code 0} true;
    assume {:branchcond $i92} true;
    goto $bb103, $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    assume !($i92 == 1);
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    $i42 := $i91;
    assume {:branchcond $i92} true;
    goto $bb109, $bb110;

  $bb110:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1044} $i97 := mxl111sf_write_reg($p0, 26, 30);
    goto corral_source_split_7612;

  corral_source_split_7612:
    assume {:verifier.code 0} true;
    $i98 := $slt.i32($i97, 0);
    goto corral_source_split_7613;

  corral_source_split_7613:
    assume {:verifier.code 0} true;
    assume {:branchcond $i98} true;
    goto $bb113, $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    assume !($i98 == 1);
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    $i23 := $i97;
    assume {:branchcond $i98} true;
    goto $bb119, $bb120;

  $bb120:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1046} $i103 := mxl111sf_read_reg($p0, 47, $p2);
    goto corral_source_split_7623;

  corral_source_split_7623:
    assume {:verifier.code 0} true;
    $i104 := $slt.i32($i103, 0);
    goto corral_source_split_7624;

  corral_source_split_7624:
    assume {:verifier.code 0} true;
    assume {:branchcond $i104} true;
    goto $bb122, $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    assume !($i104 == 1);
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    $i30 := $i103;
    assume {:branchcond $i104} true;
    goto $bb128, $bb129;

  $bb129:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    $i109 := $load.i8($M.7, $p2);
    goto corral_source_split_7634;

  corral_source_split_7634:
    assume {:verifier.code 0} true;
    $i110 := $zext.i8.i32($i109);
    goto corral_source_split_7635;

  corral_source_split_7635:
    assume {:verifier.code 0} true;
    $i111 := $and.i32($i110, 4);
    goto corral_source_split_7636;

  corral_source_split_7636:
    assume {:verifier.code 0} true;
    $i112 := $ne.i32($i111, 0);
    goto corral_source_split_7637;

  corral_source_split_7637:
    assume {:verifier.code 0} true;
    assume {:branchcond $i112} true;
    goto $bb131, $bb132;

  $bb132:
    assume !($i112 == 1);
    assume {:verifier.code 0} true;
    $i113 := $i87;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    goto corral_source_split_7644;

  corral_source_split_7644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1048} $i117 := mxl111sf_write_reg($p0, 26, 26);
    goto corral_source_split_7645;

  corral_source_split_7645:
    assume {:verifier.code 0} true;
    $i118 := $slt.i32($i117, 0);
    goto corral_source_split_7646;

  corral_source_split_7646:
    assume {:verifier.code 0} true;
    assume {:branchcond $i118} true;
    goto $bb134, $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    assume !($i118 == 1);
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    $i42 := $i117;
    assume {:branchcond $i118} true;
    goto $bb140, $bb141;

  $bb141:
    assume !($i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1050} $i123 := mxl111sf_write_reg($p0, 26, 30);
    goto corral_source_split_7656;

  corral_source_split_7656:
    assume {:verifier.code 0} true;
    $i124 := $slt.i32($i123, 0);
    goto corral_source_split_7657;

  corral_source_split_7657:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb144, $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    assume !($i124 == 1);
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    $i23 := $i123;
    assume true;
    goto $bb150, $bb151;

  $bb151:
    assume !($i124 == 1);
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1052} $i129 := mxl111sf_read_reg($p0, 47, $p2);
    goto corral_source_split_7667;

  corral_source_split_7667:
    assume {:verifier.code 0} true;
    $i130 := $slt.i32($i129, 0);
    goto corral_source_split_7668;

  corral_source_split_7668:
    assume {:verifier.code 0} true;
    assume {:branchcond $i130} true;
    goto $bb153, $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    assume !($i130 == 1);
    goto $bb155;

  $bb155:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    $i30 := $i129;
    assume {:branchcond $i130} true;
    goto $bb159, $bb160;

  $bb160:
    assume !($i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb161:
    assume {:verifier.code 0} true;
    $i135 := $load.i8($M.7, $p2);
    goto corral_source_split_7678;

  corral_source_split_7678:
    assume {:verifier.code 0} true;
    $i136 := $zext.i8.i32($i135);
    goto corral_source_split_7679;

  corral_source_split_7679:
    assume {:verifier.code 0} true;
    $i137 := $and.i32($i136, 4);
    goto corral_source_split_7680;

  corral_source_split_7680:
    assume {:verifier.code 0} true;
    $i138 := $ne.i32($i137, 0);
    goto corral_source_split_7681;

  corral_source_split_7681:
    assume {:verifier.code 0} true;
    assume {:branchcond $i138} true;
    goto $bb162, $bb163;

  $bb163:
    assume !($i138 == 1);
    assume {:verifier.code 0} true;
    $i139 := $i113;
    goto $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    goto corral_source_split_7688;

  corral_source_split_7688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1054} $i143 := mxl111sf_write_reg($p0, 26, 26);
    goto corral_source_split_7689;

  corral_source_split_7689:
    assume {:verifier.code 0} true;
    $i144 := $slt.i32($i143, 0);
    goto corral_source_split_7690;

  corral_source_split_7690:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb165, $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    assume !($i144 == 1);
    goto $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb170:
    assume {:verifier.code 0} true;
    $i42 := $i143;
    assume true;
    goto $bb171, $bb172;

  $bb172:
    assume !($i144 == 1);
    assume {:verifier.code 0} true;
    goto $bb173;

  $bb173:
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1056} $i149 := mxl111sf_write_reg($p0, 26, 30);
    goto corral_source_split_7700;

  corral_source_split_7700:
    assume {:verifier.code 0} true;
    $i150 := $slt.i32($i149, 0);
    goto corral_source_split_7701;

  corral_source_split_7701:
    assume {:verifier.code 0} true;
    assume {:branchcond $i150} true;
    goto $bb175, $bb176;

  $bb176:
    assume {:verifier.code 0} true;
    assume !($i150 == 1);
    goto $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    $i23 := $i149;
    assume {:branchcond $i150} true;
    goto $bb181, $bb182;

  $bb182:
    assume !($i150 == 1);
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1058} $i155 := mxl111sf_read_reg($p0, 47, $p2);
    goto corral_source_split_7711;

  corral_source_split_7711:
    assume {:verifier.code 0} true;
    $i156 := $slt.i32($i155, 0);
    goto corral_source_split_7712;

  corral_source_split_7712:
    assume {:verifier.code 0} true;
    assume {:branchcond $i156} true;
    goto $bb184, $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    assume !($i156 == 1);
    goto $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb189:
    assume {:verifier.code 0} true;
    $i30 := $i155;
    assume {:branchcond $i156} true;
    goto $bb190, $bb191;

  $bb191:
    assume !($i156 == 1);
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb192:
    assume {:verifier.code 0} true;
    $i161 := $load.i8($M.7, $p2);
    goto corral_source_split_7722;

  corral_source_split_7722:
    assume {:verifier.code 0} true;
    $i162 := $zext.i8.i32($i161);
    goto corral_source_split_7723;

  corral_source_split_7723:
    assume {:verifier.code 0} true;
    $i163 := $and.i32($i162, 4);
    goto corral_source_split_7724;

  corral_source_split_7724:
    assume {:verifier.code 0} true;
    $i164 := $ne.i32($i163, 0);
    goto corral_source_split_7725;

  corral_source_split_7725:
    assume {:verifier.code 0} true;
    assume {:branchcond $i164} true;
    goto $bb193, $bb194;

  $bb194:
    assume !($i164 == 1);
    assume {:verifier.code 0} true;
    $i165 := $i139;
    goto $bb195;

  $bb195:
    assume {:verifier.code 0} true;
    goto corral_source_split_7732;

  corral_source_split_7732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1060} $i169 := mxl111sf_write_reg($p0, 26, 26);
    goto corral_source_split_7733;

  corral_source_split_7733:
    assume {:verifier.code 0} true;
    $i170 := $slt.i32($i169, 0);
    goto corral_source_split_7734;

  corral_source_split_7734:
    assume {:verifier.code 0} true;
    assume {:branchcond $i170} true;
    goto $bb196, $bb197;

  $bb197:
    assume {:verifier.code 0} true;
    assume !($i170 == 1);
    goto $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb201:
    assume {:verifier.code 0} true;
    $i42 := $i169;
    assume {:branchcond $i170} true;
    goto $bb202, $bb203;

  $bb203:
    assume !($i170 == 1);
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb204:
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1062} $i175 := mxl111sf_write_reg($p0, 26, 30);
    goto corral_source_split_7744;

  corral_source_split_7744:
    assume {:verifier.code 0} true;
    $i176 := $slt.i32($i175, 0);
    goto corral_source_split_7745;

  corral_source_split_7745:
    assume {:verifier.code 0} true;
    assume {:branchcond $i176} true;
    goto $bb206, $bb207;

  $bb207:
    assume {:verifier.code 0} true;
    assume !($i176 == 1);
    goto $bb208;

  $bb208:
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb211:
    assume {:verifier.code 0} true;
    $i23 := $i175;
    assume {:branchcond $i176} true;
    goto $bb212, $bb213;

  $bb213:
    assume !($i176 == 1);
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1064} $i181 := mxl111sf_read_reg($p0, 47, $p2);
    goto corral_source_split_7755;

  corral_source_split_7755:
    assume {:verifier.code 0} true;
    $i182 := $slt.i32($i181, 0);
    goto corral_source_split_7756;

  corral_source_split_7756:
    assume {:verifier.code 0} true;
    assume {:branchcond $i182} true;
    goto $bb215, $bb216;

  $bb216:
    assume {:verifier.code 0} true;
    assume !($i182 == 1);
    goto $bb217;

  $bb217:
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb220:
    assume {:verifier.code 0} true;
    $i30 := $i181;
    assume {:branchcond $i182} true;
    goto $bb221, $bb222;

  $bb222:
    assume !($i182 == 1);
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb223:
    assume {:verifier.code 0} true;
    $i187 := $load.i8($M.7, $p2);
    goto corral_source_split_7766;

  corral_source_split_7766:
    assume {:verifier.code 0} true;
    $i188 := $zext.i8.i32($i187);
    goto corral_source_split_7767;

  corral_source_split_7767:
    assume {:verifier.code 0} true;
    $i189 := $and.i32($i188, 4);
    goto corral_source_split_7768;

  corral_source_split_7768:
    assume {:verifier.code 0} true;
    $i190 := $ne.i32($i189, 0);
    goto corral_source_split_7769;

  corral_source_split_7769:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb224, $bb225;

  $bb225:
    assume !($i190 == 1);
    assume {:verifier.code 0} true;
    $i191 := $i165;
    goto $bb226;

  $bb226:
    assume {:verifier.code 0} true;
    goto corral_source_split_7776;

  corral_source_split_7776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1066} $i195 := mxl111sf_write_reg($p0, 26, 26);
    goto corral_source_split_7777;

  corral_source_split_7777:
    assume {:verifier.code 0} true;
    $i196 := $slt.i32($i195, 0);
    goto corral_source_split_7778;

  corral_source_split_7778:
    assume {:verifier.code 0} true;
    assume {:branchcond $i196} true;
    goto $bb227, $bb228;

  $bb228:
    assume {:verifier.code 0} true;
    assume !($i196 == 1);
    goto $bb229;

  $bb229:
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb232:
    assume {:verifier.code 0} true;
    $i42 := $i195;
    assume {:branchcond $i196} true;
    goto $bb233, $bb234;

  $bb234:
    assume !($i196 == 1);
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb235:
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1068} $i201 := mxl111sf_write_reg($p0, 26, 30);
    goto corral_source_split_7788;

  corral_source_split_7788:
    assume {:verifier.code 0} true;
    $i202 := $slt.i32($i201, 0);
    goto corral_source_split_7789;

  corral_source_split_7789:
    assume {:verifier.code 0} true;
    assume {:branchcond $i202} true;
    goto $bb237, $bb238;

  $bb238:
    assume {:verifier.code 0} true;
    assume !($i202 == 1);
    goto $bb239;

  $bb239:
    assume {:verifier.code 0} true;
    goto $bb242;

  $bb242:
    assume {:verifier.code 0} true;
    $i23 := $i201;
    assume {:branchcond $i202} true;
    goto $bb243, $bb244;

  $bb244:
    assume !($i202 == 1);
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1070} $i207 := mxl111sf_read_reg($p0, 47, $p2);
    goto corral_source_split_7799;

  corral_source_split_7799:
    assume {:verifier.code 0} true;
    $i208 := $slt.i32($i207, 0);
    goto corral_source_split_7800;

  corral_source_split_7800:
    assume {:verifier.code 0} true;
    assume {:branchcond $i208} true;
    goto $bb246, $bb247;

  $bb247:
    assume {:verifier.code 0} true;
    assume !($i208 == 1);
    goto $bb248;

  $bb248:
    assume {:verifier.code 0} true;
    goto $bb251;

  $bb251:
    assume {:verifier.code 0} true;
    $i30 := $i207;
    assume {:branchcond $i208} true;
    goto $bb252, $bb253;

  $bb253:
    assume !($i208 == 1);
    assume {:verifier.code 0} true;
    goto $bb254;

  $bb254:
    assume {:verifier.code 0} true;
    $i213 := $load.i8($M.7, $p2);
    goto corral_source_split_7810;

  corral_source_split_7810:
    assume {:verifier.code 0} true;
    $i214 := $zext.i8.i32($i213);
    goto corral_source_split_7811;

  corral_source_split_7811:
    assume {:verifier.code 0} true;
    $i215 := $and.i32($i214, 4);
    goto corral_source_split_7812;

  corral_source_split_7812:
    assume {:verifier.code 0} true;
    $i216 := $ne.i32($i215, 0);
    goto corral_source_split_7813;

  corral_source_split_7813:
    assume {:verifier.code 0} true;
    assume {:branchcond $i216} true;
    goto $bb255, $bb256;

  $bb256:
    assume !($i216 == 1);
    assume {:verifier.code 0} true;
    $i43 := $i191;
    goto $bb257;

  $bb257:
    assume {:verifier.code 0} true;
    goto corral_source_split_7820;

  corral_source_split_7820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1072} $i44 := mxl111sf_write_reg($p0, 26, 26);
    goto corral_source_split_7821;

  corral_source_split_7821:
    assume {:verifier.code 0} true;
    $i220 := $slt.i32($i44, 0);
    goto corral_source_split_7822;

  corral_source_split_7822:
    assume {:verifier.code 0} true;
    assume {:branchcond $i220} true;
    goto $bb258, $bb259;

  $bb259:
    assume {:verifier.code 0} true;
    assume !($i220 == 1);
    goto $bb260;

  $bb260:
    assume {:verifier.code 0} true;
    goto $bb263;

  $bb263:
    assume {:verifier.code 0} true;
    $i42 := $i44;
    assume {:branchcond $i220} true;
    goto $bb264, $bb265;

  $bb265:
    assume !($i220 == 1);
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb266:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p1, $i43);
    goto corral_source_split_7525;

  corral_source_split_7525:
    assume {:verifier.code 0} true;
    $i16 := $i44;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_7473;

  corral_source_split_7473:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb264:
    assume {:verifier.code 0} true;
    assume $i220 == 1;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto corral_source_split_7520;

  corral_source_split_7520:
    assume {:verifier.code 0} true;
    $i16 := $i42;
    goto $bb12;

  $bb258:
    assume $i220 == 1;
    goto corral_source_split_7824;

  corral_source_split_7824:
    assume {:verifier.code 0} true;
    $i221 := $M.10;
    goto corral_source_split_7825;

  corral_source_split_7825:
    assume {:verifier.code 0} true;
    $i222 := $and.i32($i221, 16);
    goto corral_source_split_7826;

  corral_source_split_7826:
    assume {:verifier.code 0} true;
    $i223 := $ne.i32($i222, 0);
    goto corral_source_split_7827;

  corral_source_split_7827:
    assume {:verifier.code 0} true;
    assume {:branchcond $i223} true;
    goto $bb261, $bb262;

  $bb262:
    assume {:verifier.code 0} true;
    assume !($i223 == 1);
    goto $bb260;

  $bb261:
    assume $i223 == 1;
    goto corral_source_split_7829;

  corral_source_split_7829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1073} vslice_dummy_var_289 := printk.ref.ref.i32.i32(.str.5, .str.147, $i44, 129);
    goto corral_source_split_7830;

  corral_source_split_7830:
    assume {:verifier.code 0} true;
    goto $bb263;

  $bb255:
    assume $i216 == 1;
    goto corral_source_split_7815;

  corral_source_split_7815:
    assume {:verifier.code 0} true;
    $i217 := $sext.i8.i32($i191);
    goto corral_source_split_7816;

  corral_source_split_7816:
    assume {:verifier.code 0} true;
    $i218 := $or.i32($i217, 1);
    goto corral_source_split_7817;

  corral_source_split_7817:
    assume {:verifier.code 0} true;
    $i219 := $trunc.i32.i8($i218);
    goto corral_source_split_7818;

  corral_source_split_7818:
    assume {:verifier.code 0} true;
    $i43 := $i219;
    goto $bb257;

  $bb252:
    assume {:verifier.code 0} true;
    assume $i208 == 1;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_7499;

  corral_source_split_7499:
    assume {:verifier.code 0} true;
    $i16 := $i30;
    goto $bb12;

  $bb246:
    assume $i208 == 1;
    goto corral_source_split_7802;

  corral_source_split_7802:
    assume {:verifier.code 0} true;
    $i209 := $M.10;
    goto corral_source_split_7803;

  corral_source_split_7803:
    assume {:verifier.code 0} true;
    $i210 := $and.i32($i209, 16);
    goto corral_source_split_7804;

  corral_source_split_7804:
    assume {:verifier.code 0} true;
    $i211 := $ne.i32($i210, 0);
    goto corral_source_split_7805;

  corral_source_split_7805:
    assume {:verifier.code 0} true;
    assume {:branchcond $i211} true;
    goto $bb249, $bb250;

  $bb250:
    assume {:verifier.code 0} true;
    assume !($i211 == 1);
    goto $bb248;

  $bb249:
    assume $i211 == 1;
    goto corral_source_split_7807;

  corral_source_split_7807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1071} vslice_dummy_var_288 := printk.ref.ref.i32.i32(.str.5, .str.147, $i207, 121);
    goto corral_source_split_7808;

  corral_source_split_7808:
    assume {:verifier.code 0} true;
    goto $bb251;

  $bb243:
    assume {:verifier.code 0} true;
    assume $i202 == 1;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_7486;

  corral_source_split_7486:
    assume {:verifier.code 0} true;
    $i16 := $i23;
    goto $bb12;

  $bb237:
    assume $i202 == 1;
    goto corral_source_split_7791;

  corral_source_split_7791:
    assume {:verifier.code 0} true;
    $i203 := $M.10;
    goto corral_source_split_7792;

  corral_source_split_7792:
    assume {:verifier.code 0} true;
    $i204 := $and.i32($i203, 16);
    goto corral_source_split_7793;

  corral_source_split_7793:
    assume {:verifier.code 0} true;
    $i205 := $ne.i32($i204, 0);
    goto corral_source_split_7794;

  corral_source_split_7794:
    assume {:verifier.code 0} true;
    assume {:branchcond $i205} true;
    goto $bb240, $bb241;

  $bb241:
    assume {:verifier.code 0} true;
    assume !($i205 == 1);
    goto $bb239;

  $bb240:
    assume $i205 == 1;
    goto corral_source_split_7796;

  corral_source_split_7796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1069} vslice_dummy_var_287 := printk.ref.ref.i32.i32(.str.5, .str.147, $i201, 117);
    goto corral_source_split_7797;

  corral_source_split_7797:
    assume {:verifier.code 0} true;
    goto $bb242;

  $bb233:
    assume {:verifier.code 0} true;
    assume $i196 == 1;
    goto $bb46;

  $bb227:
    assume $i196 == 1;
    goto corral_source_split_7780;

  corral_source_split_7780:
    assume {:verifier.code 0} true;
    $i197 := $M.10;
    goto corral_source_split_7781;

  corral_source_split_7781:
    assume {:verifier.code 0} true;
    $i198 := $and.i32($i197, 16);
    goto corral_source_split_7782;

  corral_source_split_7782:
    assume {:verifier.code 0} true;
    $i199 := $ne.i32($i198, 0);
    goto corral_source_split_7783;

  corral_source_split_7783:
    assume {:verifier.code 0} true;
    assume {:branchcond $i199} true;
    goto $bb230, $bb231;

  $bb231:
    assume {:verifier.code 0} true;
    assume !($i199 == 1);
    goto $bb229;

  $bb230:
    assume $i199 == 1;
    goto corral_source_split_7785;

  corral_source_split_7785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1067} vslice_dummy_var_286 := printk.ref.ref.i32.i32(.str.5, .str.147, $i195, 129);
    goto corral_source_split_7786;

  corral_source_split_7786:
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb224:
    assume $i190 == 1;
    goto corral_source_split_7771;

  corral_source_split_7771:
    assume {:verifier.code 0} true;
    $i192 := $sext.i8.i32($i165);
    goto corral_source_split_7772;

  corral_source_split_7772:
    assume {:verifier.code 0} true;
    $i193 := $or.i32($i192, 2);
    goto corral_source_split_7773;

  corral_source_split_7773:
    assume {:verifier.code 0} true;
    $i194 := $trunc.i32.i8($i193);
    goto corral_source_split_7774;

  corral_source_split_7774:
    assume {:verifier.code 0} true;
    $i191 := $i194;
    goto $bb226;

  $bb221:
    assume {:verifier.code 0} true;
    assume $i182 == 1;
    goto $bb33;

  $bb215:
    assume $i182 == 1;
    goto corral_source_split_7758;

  corral_source_split_7758:
    assume {:verifier.code 0} true;
    $i183 := $M.10;
    goto corral_source_split_7759;

  corral_source_split_7759:
    assume {:verifier.code 0} true;
    $i184 := $and.i32($i183, 16);
    goto corral_source_split_7760;

  corral_source_split_7760:
    assume {:verifier.code 0} true;
    $i185 := $ne.i32($i184, 0);
    goto corral_source_split_7761;

  corral_source_split_7761:
    assume {:verifier.code 0} true;
    assume {:branchcond $i185} true;
    goto $bb218, $bb219;

  $bb219:
    assume {:verifier.code 0} true;
    assume !($i185 == 1);
    goto $bb217;

  $bb218:
    assume $i185 == 1;
    goto corral_source_split_7763;

  corral_source_split_7763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1065} vslice_dummy_var_285 := printk.ref.ref.i32.i32(.str.5, .str.147, $i181, 121);
    goto corral_source_split_7764;

  corral_source_split_7764:
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb212:
    assume {:verifier.code 0} true;
    assume $i176 == 1;
    goto $bb23;

  $bb206:
    assume $i176 == 1;
    goto corral_source_split_7747;

  corral_source_split_7747:
    assume {:verifier.code 0} true;
    $i177 := $M.10;
    goto corral_source_split_7748;

  corral_source_split_7748:
    assume {:verifier.code 0} true;
    $i178 := $and.i32($i177, 16);
    goto corral_source_split_7749;

  corral_source_split_7749:
    assume {:verifier.code 0} true;
    $i179 := $ne.i32($i178, 0);
    goto corral_source_split_7750;

  corral_source_split_7750:
    assume {:verifier.code 0} true;
    assume {:branchcond $i179} true;
    goto $bb209, $bb210;

  $bb210:
    assume {:verifier.code 0} true;
    assume !($i179 == 1);
    goto $bb208;

  $bb209:
    assume $i179 == 1;
    goto corral_source_split_7752;

  corral_source_split_7752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1063} vslice_dummy_var_284 := printk.ref.ref.i32.i32(.str.5, .str.147, $i175, 117);
    goto corral_source_split_7753;

  corral_source_split_7753:
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb202:
    assume {:verifier.code 0} true;
    assume $i170 == 1;
    goto $bb46;

  $bb196:
    assume $i170 == 1;
    goto corral_source_split_7736;

  corral_source_split_7736:
    assume {:verifier.code 0} true;
    $i171 := $M.10;
    goto corral_source_split_7737;

  corral_source_split_7737:
    assume {:verifier.code 0} true;
    $i172 := $and.i32($i171, 16);
    goto corral_source_split_7738;

  corral_source_split_7738:
    assume {:verifier.code 0} true;
    $i173 := $ne.i32($i172, 0);
    goto corral_source_split_7739;

  corral_source_split_7739:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb199, $bb200;

  $bb200:
    assume {:verifier.code 0} true;
    assume !($i173 == 1);
    goto $bb198;

  $bb199:
    assume $i173 == 1;
    goto corral_source_split_7741;

  corral_source_split_7741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1061} vslice_dummy_var_283 := printk.ref.ref.i32.i32(.str.5, .str.147, $i169, 129);
    goto corral_source_split_7742;

  corral_source_split_7742:
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb193:
    assume $i164 == 1;
    goto corral_source_split_7727;

  corral_source_split_7727:
    assume {:verifier.code 0} true;
    $i166 := $sext.i8.i32($i139);
    goto corral_source_split_7728;

  corral_source_split_7728:
    assume {:verifier.code 0} true;
    $i167 := $or.i32($i166, 4);
    goto corral_source_split_7729;

  corral_source_split_7729:
    assume {:verifier.code 0} true;
    $i168 := $trunc.i32.i8($i167);
    goto corral_source_split_7730;

  corral_source_split_7730:
    assume {:verifier.code 0} true;
    $i165 := $i168;
    goto $bb195;

  $bb190:
    assume {:verifier.code 0} true;
    assume $i156 == 1;
    goto $bb33;

  $bb184:
    assume $i156 == 1;
    goto corral_source_split_7714;

  corral_source_split_7714:
    assume {:verifier.code 0} true;
    $i157 := $M.10;
    goto corral_source_split_7715;

  corral_source_split_7715:
    assume {:verifier.code 0} true;
    $i158 := $and.i32($i157, 16);
    goto corral_source_split_7716;

  corral_source_split_7716:
    assume {:verifier.code 0} true;
    $i159 := $ne.i32($i158, 0);
    goto corral_source_split_7717;

  corral_source_split_7717:
    assume {:verifier.code 0} true;
    assume {:branchcond $i159} true;
    goto $bb187, $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    assume !($i159 == 1);
    goto $bb186;

  $bb187:
    assume $i159 == 1;
    goto corral_source_split_7719;

  corral_source_split_7719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1059} vslice_dummy_var_282 := printk.ref.ref.i32.i32(.str.5, .str.147, $i155, 121);
    goto corral_source_split_7720;

  corral_source_split_7720:
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb181:
    assume {:verifier.code 0} true;
    assume $i150 == 1;
    goto $bb23;

  $bb175:
    assume $i150 == 1;
    goto corral_source_split_7703;

  corral_source_split_7703:
    assume {:verifier.code 0} true;
    $i151 := $M.10;
    goto corral_source_split_7704;

  corral_source_split_7704:
    assume {:verifier.code 0} true;
    $i152 := $and.i32($i151, 16);
    goto corral_source_split_7705;

  corral_source_split_7705:
    assume {:verifier.code 0} true;
    $i153 := $ne.i32($i152, 0);
    goto corral_source_split_7706;

  corral_source_split_7706:
    assume {:verifier.code 0} true;
    assume {:branchcond $i153} true;
    goto $bb178, $bb179;

  $bb179:
    assume {:verifier.code 0} true;
    assume !($i153 == 1);
    goto $bb177;

  $bb178:
    assume $i153 == 1;
    goto corral_source_split_7708;

  corral_source_split_7708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1057} vslice_dummy_var_281 := printk.ref.ref.i32.i32(.str.5, .str.147, $i149, 117);
    goto corral_source_split_7709;

  corral_source_split_7709:
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb171:
    assume {:verifier.code 0} true;
    assume $i144 == 1;
    goto $bb46;

  $bb165:
    assume $i144 == 1;
    goto corral_source_split_7692;

  corral_source_split_7692:
    assume {:verifier.code 0} true;
    $i145 := $M.10;
    goto corral_source_split_7693;

  corral_source_split_7693:
    assume {:verifier.code 0} true;
    $i146 := $and.i32($i145, 16);
    goto corral_source_split_7694;

  corral_source_split_7694:
    assume {:verifier.code 0} true;
    $i147 := $ne.i32($i146, 0);
    goto corral_source_split_7695;

  corral_source_split_7695:
    assume {:verifier.code 0} true;
    assume {:branchcond $i147} true;
    goto $bb168, $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    assume !($i147 == 1);
    goto $bb167;

  $bb168:
    assume $i147 == 1;
    goto corral_source_split_7697;

  corral_source_split_7697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1055} vslice_dummy_var_280 := printk.ref.ref.i32.i32(.str.5, .str.147, $i143, 129);
    goto corral_source_split_7698;

  corral_source_split_7698:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb162:
    assume $i138 == 1;
    goto corral_source_split_7683;

  corral_source_split_7683:
    assume {:verifier.code 0} true;
    $i140 := $sext.i8.i32($i113);
    goto corral_source_split_7684;

  corral_source_split_7684:
    assume {:verifier.code 0} true;
    $i141 := $or.i32($i140, 8);
    goto corral_source_split_7685;

  corral_source_split_7685:
    assume {:verifier.code 0} true;
    $i142 := $trunc.i32.i8($i141);
    goto corral_source_split_7686;

  corral_source_split_7686:
    assume {:verifier.code 0} true;
    $i139 := $i142;
    goto $bb164;

  $bb159:
    assume {:verifier.code 0} true;
    assume $i130 == 1;
    goto $bb33;

  $bb153:
    assume $i130 == 1;
    goto corral_source_split_7670;

  corral_source_split_7670:
    assume {:verifier.code 0} true;
    $i131 := $M.10;
    goto corral_source_split_7671;

  corral_source_split_7671:
    assume {:verifier.code 0} true;
    $i132 := $and.i32($i131, 16);
    goto corral_source_split_7672;

  corral_source_split_7672:
    assume {:verifier.code 0} true;
    $i133 := $ne.i32($i132, 0);
    goto corral_source_split_7673;

  corral_source_split_7673:
    assume {:verifier.code 0} true;
    assume {:branchcond $i133} true;
    goto $bb156, $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    assume !($i133 == 1);
    goto $bb155;

  $bb156:
    assume $i133 == 1;
    goto corral_source_split_7675;

  corral_source_split_7675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1053} vslice_dummy_var_279 := printk.ref.ref.i32.i32(.str.5, .str.147, $i129, 121);
    goto corral_source_split_7676;

  corral_source_split_7676:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb150:
    assume {:verifier.code 0} true;
    assume $i124 == 1;
    goto $bb23;

  $bb144:
    assume $i124 == 1;
    goto corral_source_split_7659;

  corral_source_split_7659:
    assume {:verifier.code 0} true;
    $i125 := $M.10;
    goto corral_source_split_7660;

  corral_source_split_7660:
    assume {:verifier.code 0} true;
    $i126 := $and.i32($i125, 16);
    goto corral_source_split_7661;

  corral_source_split_7661:
    assume {:verifier.code 0} true;
    $i127 := $ne.i32($i126, 0);
    goto corral_source_split_7662;

  corral_source_split_7662:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb147, $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    assume !($i127 == 1);
    goto $bb146;

  $bb147:
    assume $i127 == 1;
    goto corral_source_split_7664;

  corral_source_split_7664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1051} vslice_dummy_var_278 := printk.ref.ref.i32.i32(.str.5, .str.147, $i123, 117);
    goto corral_source_split_7665;

  corral_source_split_7665:
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb140:
    assume {:verifier.code 0} true;
    assume $i118 == 1;
    goto $bb46;

  $bb134:
    assume $i118 == 1;
    goto corral_source_split_7648;

  corral_source_split_7648:
    assume {:verifier.code 0} true;
    $i119 := $M.10;
    goto corral_source_split_7649;

  corral_source_split_7649:
    assume {:verifier.code 0} true;
    $i120 := $and.i32($i119, 16);
    goto corral_source_split_7650;

  corral_source_split_7650:
    assume {:verifier.code 0} true;
    $i121 := $ne.i32($i120, 0);
    goto corral_source_split_7651;

  corral_source_split_7651:
    assume {:verifier.code 0} true;
    assume {:branchcond $i121} true;
    goto $bb137, $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    assume !($i121 == 1);
    goto $bb136;

  $bb137:
    assume $i121 == 1;
    goto corral_source_split_7653;

  corral_source_split_7653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1049} vslice_dummy_var_277 := printk.ref.ref.i32.i32(.str.5, .str.147, $i117, 129);
    goto corral_source_split_7654;

  corral_source_split_7654:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb131:
    assume $i112 == 1;
    goto corral_source_split_7639;

  corral_source_split_7639:
    assume {:verifier.code 0} true;
    $i114 := $sext.i8.i32($i87);
    goto corral_source_split_7640;

  corral_source_split_7640:
    assume {:verifier.code 0} true;
    $i115 := $or.i32($i114, 16);
    goto corral_source_split_7641;

  corral_source_split_7641:
    assume {:verifier.code 0} true;
    $i116 := $trunc.i32.i8($i115);
    goto corral_source_split_7642;

  corral_source_split_7642:
    assume {:verifier.code 0} true;
    $i113 := $i116;
    goto $bb133;

  $bb128:
    assume {:verifier.code 0} true;
    assume $i104 == 1;
    goto $bb33;

  $bb122:
    assume $i104 == 1;
    goto corral_source_split_7626;

  corral_source_split_7626:
    assume {:verifier.code 0} true;
    $i105 := $M.10;
    goto corral_source_split_7627;

  corral_source_split_7627:
    assume {:verifier.code 0} true;
    $i106 := $and.i32($i105, 16);
    goto corral_source_split_7628;

  corral_source_split_7628:
    assume {:verifier.code 0} true;
    $i107 := $ne.i32($i106, 0);
    goto corral_source_split_7629;

  corral_source_split_7629:
    assume {:verifier.code 0} true;
    assume {:branchcond $i107} true;
    goto $bb125, $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    assume !($i107 == 1);
    goto $bb124;

  $bb125:
    assume $i107 == 1;
    goto corral_source_split_7631;

  corral_source_split_7631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1047} vslice_dummy_var_276 := printk.ref.ref.i32.i32(.str.5, .str.147, $i103, 121);
    goto corral_source_split_7632;

  corral_source_split_7632:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb119:
    assume {:verifier.code 0} true;
    assume $i98 == 1;
    goto $bb23;

  $bb113:
    assume $i98 == 1;
    goto corral_source_split_7615;

  corral_source_split_7615:
    assume {:verifier.code 0} true;
    $i99 := $M.10;
    goto corral_source_split_7616;

  corral_source_split_7616:
    assume {:verifier.code 0} true;
    $i100 := $and.i32($i99, 16);
    goto corral_source_split_7617;

  corral_source_split_7617:
    assume {:verifier.code 0} true;
    $i101 := $ne.i32($i100, 0);
    goto corral_source_split_7618;

  corral_source_split_7618:
    assume {:verifier.code 0} true;
    assume {:branchcond $i101} true;
    goto $bb116, $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    assume !($i101 == 1);
    goto $bb115;

  $bb116:
    assume $i101 == 1;
    goto corral_source_split_7620;

  corral_source_split_7620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1045} vslice_dummy_var_275 := printk.ref.ref.i32.i32(.str.5, .str.147, $i97, 117);
    goto corral_source_split_7621;

  corral_source_split_7621:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb109:
    assume {:verifier.code 0} true;
    assume $i92 == 1;
    goto $bb46;

  $bb103:
    assume $i92 == 1;
    goto corral_source_split_7604;

  corral_source_split_7604:
    assume {:verifier.code 0} true;
    $i93 := $M.10;
    goto corral_source_split_7605;

  corral_source_split_7605:
    assume {:verifier.code 0} true;
    $i94 := $and.i32($i93, 16);
    goto corral_source_split_7606;

  corral_source_split_7606:
    assume {:verifier.code 0} true;
    $i95 := $ne.i32($i94, 0);
    goto corral_source_split_7607;

  corral_source_split_7607:
    assume {:verifier.code 0} true;
    assume {:branchcond $i95} true;
    goto $bb106, $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    assume !($i95 == 1);
    goto $bb105;

  $bb106:
    assume $i95 == 1;
    goto corral_source_split_7609;

  corral_source_split_7609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1043} vslice_dummy_var_274 := printk.ref.ref.i32.i32(.str.5, .str.147, $i91, 129);
    goto corral_source_split_7610;

  corral_source_split_7610:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb100:
    assume $i86 == 1;
    goto corral_source_split_7595;

  corral_source_split_7595:
    assume {:verifier.code 0} true;
    $i88 := $sext.i8.i32($i61);
    goto corral_source_split_7596;

  corral_source_split_7596:
    assume {:verifier.code 0} true;
    $i89 := $or.i32($i88, 32);
    goto corral_source_split_7597;

  corral_source_split_7597:
    assume {:verifier.code 0} true;
    $i90 := $trunc.i32.i8($i89);
    goto corral_source_split_7598;

  corral_source_split_7598:
    assume {:verifier.code 0} true;
    $i87 := $i90;
    goto $bb102;

  $bb97:
    assume {:verifier.code 0} true;
    assume $i78 == 1;
    goto $bb33;

  $bb91:
    assume $i78 == 1;
    goto corral_source_split_7582;

  corral_source_split_7582:
    assume {:verifier.code 0} true;
    $i79 := $M.10;
    goto corral_source_split_7583;

  corral_source_split_7583:
    assume {:verifier.code 0} true;
    $i80 := $and.i32($i79, 16);
    goto corral_source_split_7584;

  corral_source_split_7584:
    assume {:verifier.code 0} true;
    $i81 := $ne.i32($i80, 0);
    goto corral_source_split_7585;

  corral_source_split_7585:
    assume {:verifier.code 0} true;
    assume {:branchcond $i81} true;
    goto $bb94, $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    assume !($i81 == 1);
    goto $bb93;

  $bb94:
    assume $i81 == 1;
    goto corral_source_split_7587;

  corral_source_split_7587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1041} vslice_dummy_var_273 := printk.ref.ref.i32.i32(.str.5, .str.147, $i77, 121);
    goto corral_source_split_7588;

  corral_source_split_7588:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb88:
    assume {:verifier.code 0} true;
    assume $i72 == 1;
    goto $bb23;

  $bb82:
    assume $i72 == 1;
    goto corral_source_split_7571;

  corral_source_split_7571:
    assume {:verifier.code 0} true;
    $i73 := $M.10;
    goto corral_source_split_7572;

  corral_source_split_7572:
    assume {:verifier.code 0} true;
    $i74 := $and.i32($i73, 16);
    goto corral_source_split_7573;

  corral_source_split_7573:
    assume {:verifier.code 0} true;
    $i75 := $ne.i32($i74, 0);
    goto corral_source_split_7574;

  corral_source_split_7574:
    assume {:verifier.code 0} true;
    assume {:branchcond $i75} true;
    goto $bb85, $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    assume !($i75 == 1);
    goto $bb84;

  $bb85:
    assume $i75 == 1;
    goto corral_source_split_7576;

  corral_source_split_7576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1039} vslice_dummy_var_272 := printk.ref.ref.i32.i32(.str.5, .str.147, $i71, 117);
    goto corral_source_split_7577;

  corral_source_split_7577:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb78:
    assume {:verifier.code 0} true;
    assume $i66 == 1;
    goto $bb46;

  $bb72:
    assume $i66 == 1;
    goto corral_source_split_7560;

  corral_source_split_7560:
    assume {:verifier.code 0} true;
    $i67 := $M.10;
    goto corral_source_split_7561;

  corral_source_split_7561:
    assume {:verifier.code 0} true;
    $i68 := $and.i32($i67, 16);
    goto corral_source_split_7562;

  corral_source_split_7562:
    assume {:verifier.code 0} true;
    $i69 := $ne.i32($i68, 0);
    goto corral_source_split_7563;

  corral_source_split_7563:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    assume !($i69 == 1);
    goto $bb74;

  $bb75:
    assume $i69 == 1;
    goto corral_source_split_7565;

  corral_source_split_7565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1037} vslice_dummy_var_271 := printk.ref.ref.i32.i32(.str.5, .str.147, $i65, 129);
    goto corral_source_split_7566;

  corral_source_split_7566:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb69:
    assume $i60 == 1;
    goto corral_source_split_7551;

  corral_source_split_7551:
    assume {:verifier.code 0} true;
    $i62 := $sext.i8.i32($i35);
    goto corral_source_split_7552;

  corral_source_split_7552:
    assume {:verifier.code 0} true;
    $i63 := $or.i32($i62, 64);
    goto corral_source_split_7553;

  corral_source_split_7553:
    assume {:verifier.code 0} true;
    $i64 := $trunc.i32.i8($i63);
    goto corral_source_split_7554;

  corral_source_split_7554:
    assume {:verifier.code 0} true;
    $i61 := $i64;
    goto $bb71;

  $bb66:
    assume {:verifier.code 0} true;
    assume $i52 == 1;
    goto $bb33;

  $bb60:
    assume $i52 == 1;
    goto corral_source_split_7538;

  corral_source_split_7538:
    assume {:verifier.code 0} true;
    $i53 := $M.10;
    goto corral_source_split_7539;

  corral_source_split_7539:
    assume {:verifier.code 0} true;
    $i54 := $and.i32($i53, 16);
    goto corral_source_split_7540;

  corral_source_split_7540:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i54, 0);
    goto corral_source_split_7541;

  corral_source_split_7541:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    assume !($i55 == 1);
    goto $bb62;

  $bb63:
    assume $i55 == 1;
    goto corral_source_split_7543;

  corral_source_split_7543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1035} vslice_dummy_var_270 := printk.ref.ref.i32.i32(.str.5, .str.147, $i51, 121);
    goto corral_source_split_7544;

  corral_source_split_7544:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb57:
    assume {:verifier.code 0} true;
    assume $i46 == 1;
    goto $bb23;

  $bb51:
    assume $i46 == 1;
    goto corral_source_split_7527;

  corral_source_split_7527:
    assume {:verifier.code 0} true;
    $i47 := $M.10;
    goto corral_source_split_7528;

  corral_source_split_7528:
    assume {:verifier.code 0} true;
    $i48 := $and.i32($i47, 16);
    goto corral_source_split_7529;

  corral_source_split_7529:
    assume {:verifier.code 0} true;
    $i49 := $ne.i32($i48, 0);
    goto corral_source_split_7530;

  corral_source_split_7530:
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb54, $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    assume !($i49 == 1);
    goto $bb53;

  $bb54:
    assume $i49 == 1;
    goto corral_source_split_7532;

  corral_source_split_7532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1033} vslice_dummy_var_269 := printk.ref.ref.i32.i32(.str.5, .str.147, $i45, 117);
    goto corral_source_split_7533;

  corral_source_split_7533:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb45:
    assume {:verifier.code 0} true;
    assume $i37 == 1;
    goto $bb46;

  $bb39:
    assume $i37 == 1;
    goto corral_source_split_7512;

  corral_source_split_7512:
    assume {:verifier.code 0} true;
    $i38 := $M.10;
    goto corral_source_split_7513;

  corral_source_split_7513:
    assume {:verifier.code 0} true;
    $i39 := $and.i32($i38, 16);
    goto corral_source_split_7514;

  corral_source_split_7514:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_7515;

  corral_source_split_7515:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb42, $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb41;

  $bb42:
    assume $i40 == 1;
    goto corral_source_split_7517;

  corral_source_split_7517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1031} vslice_dummy_var_268 := printk.ref.ref.i32.i32(.str.5, .str.147, $i36, 129);
    goto corral_source_split_7518;

  corral_source_split_7518:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb36:
    assume $i34 == 1;
    goto corral_source_split_7506;

  corral_source_split_7506:
    assume {:verifier.code 0} true;
    $i35 := $sub.i8(0, 128);
    goto $bb38;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i25 == 1;
    goto $bb33;

  $bb26:
    assume $i25 == 1;
    goto corral_source_split_7491;

  corral_source_split_7491:
    assume {:verifier.code 0} true;
    $i26 := $M.10;
    goto corral_source_split_7492;

  corral_source_split_7492:
    assume {:verifier.code 0} true;
    $i27 := $and.i32($i26, 16);
    goto corral_source_split_7493;

  corral_source_split_7493:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_7494;

  corral_source_split_7494:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb28;

  $bb29:
    assume $i28 == 1;
    goto corral_source_split_7496;

  corral_source_split_7496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1028} vslice_dummy_var_267 := printk.ref.ref.i32.i32(.str.5, .str.147, $i24, 121);
    goto corral_source_split_7497;

  corral_source_split_7497:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb23;

  $bb16:
    assume $i18 == 1;
    goto corral_source_split_7478;

  corral_source_split_7478:
    assume {:verifier.code 0} true;
    $i19 := $M.10;
    goto corral_source_split_7479;

  corral_source_split_7479:
    assume {:verifier.code 0} true;
    $i20 := $and.i32($i19, 16);
    goto corral_source_split_7480;

  corral_source_split_7480:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_7481;

  corral_source_split_7481:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb18;

  $bb19:
    assume $i21 == 1;
    goto corral_source_split_7483;

  corral_source_split_7483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1025} vslice_dummy_var_266 := printk.ref.ref.i32.i32(.str.5, .str.147, $i17, 117);
    goto corral_source_split_7484;

  corral_source_split_7484:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb10:
    assume $i15 == 1;
    goto corral_source_split_7471;

  corral_source_split_7471:
    assume {:verifier.code 0} true;
    $i16 := $i7;
    goto $bb12;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_7461;

  corral_source_split_7461:
    assume {:verifier.code 0} true;
    $i11 := $M.10;
    goto corral_source_split_7462;

  corral_source_split_7462:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 16);
    goto corral_source_split_7463;

  corral_source_split_7463:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_7464;

  corral_source_split_7464:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb6;

  $bb7:
    assume $i13 == 1;
    goto corral_source_split_7466;

  corral_source_split_7466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1022} vslice_dummy_var_265 := printk.ref.ref.i32.i32(.str.5, .str.147, $i7, 110);
    goto corral_source_split_7467;

  corral_source_split_7467:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_7452;

  corral_source_split_7452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1018} vslice_dummy_var_264 := printk.ref.ref(.str.17, .str.147);
    goto corral_source_split_7453;

  corral_source_split_7453:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mxl111sf_i2c_ack: ref;

axiom mxl111sf_i2c_ack == $sub.ref(0, 377956);

procedure mxl111sf_i2c_ack($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $M.15, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation mxl111sf_i2c_ack($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $i14: i1;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $i30: i32;
  var $i31: i1;
  var $i33: i1;
  var $i34: i32;
  var $i35: i1;
  var $i36: i32;
  var $i37: i1;
  var $i38: i32;
  var $i39: i32;
  var $i40: i1;
  var $i15: i32;
  var vslice_dummy_var_290: i32;
  var vslice_dummy_var_291: i32;
  var vslice_dummy_var_292: i32;
  var vslice_dummy_var_293: i32;
  var vslice_dummy_var_294: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1074} $p1 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    goto corral_source_split_7832;

  corral_source_split_7832:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p1, 0);
    goto corral_source_split_7833;

  corral_source_split_7833:
    assume {:verifier.code 0} true;
    $i2 := $M.10;
    goto corral_source_split_7834;

  corral_source_split_7834:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 4);
    goto corral_source_split_7835;

  corral_source_split_7835:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_7836;

  corral_source_split_7836:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1076} $i6 := mxl111sf_read_reg($p0, 47, $p1);
    call {:si_unique_call 1077} {:cexpr "ret"} boogie_si_record_i32($i6);
    goto corral_source_split_7841;

  corral_source_split_7841:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i6, 0);
    goto corral_source_split_7842;

  corral_source_split_7842:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    call {:si_unique_call 1078} {:cexpr "__ret"} boogie_si_record_i32($i8);
    goto corral_source_split_7843;

  corral_source_split_7843:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_7844;

  corral_source_split_7844:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i8, 0);
    goto corral_source_split_7854;

  corral_source_split_7854:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1080} $i16 := mxl111sf_write_reg($p0, 26, 18);
    call {:si_unique_call 1081} {:cexpr "ret"} boogie_si_record_i32($i16);
    goto corral_source_split_7860;

  corral_source_split_7860:
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i16, 0);
    goto corral_source_split_7861;

  corral_source_split_7861:
    assume {:verifier.code 0} true;
    $i18 := $zext.i1.i32($i17);
    call {:si_unique_call 1082} {:cexpr "__ret___0"} boogie_si_record_i32($i18);
    goto corral_source_split_7862;

  corral_source_split_7862:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_7863;

  corral_source_split_7863:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i18, 0);
    goto corral_source_split_7873;

  corral_source_split_7873:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1084} $i25 := mxl111sf_write_reg($p0, 26, 22);
    call {:si_unique_call 1085} {:cexpr "ret"} boogie_si_record_i32($i25);
    goto corral_source_split_7877;

  corral_source_split_7877:
    assume {:verifier.code 0} true;
    $i26 := $slt.i32($i25, 0);
    goto corral_source_split_7878;

  corral_source_split_7878:
    assume {:verifier.code 0} true;
    $i27 := $zext.i1.i32($i26);
    call {:si_unique_call 1086} {:cexpr "__ret___1"} boogie_si_record_i32($i27);
    goto corral_source_split_7879;

  corral_source_split_7879:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_7880;

  corral_source_split_7880:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i27, 0);
    goto corral_source_split_7890;

  corral_source_split_7890:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1088} $i34 := mxl111sf_write_reg($p0, 26, 26);
    call {:si_unique_call 1089} {:cexpr "ret"} boogie_si_record_i32($i34);
    goto corral_source_split_7894;

  corral_source_split_7894:
    assume {:verifier.code 0} true;
    $i35 := $slt.i32($i34, 0);
    goto corral_source_split_7895;

  corral_source_split_7895:
    assume {:verifier.code 0} true;
    $i36 := $zext.i1.i32($i35);
    call {:si_unique_call 1090} {:cexpr "__ret___2"} boogie_si_record_i32($i36);
    goto corral_source_split_7896;

  corral_source_split_7896:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_7897;

  corral_source_split_7897:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i15 := $i34;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_7858;

  corral_source_split_7858:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb32:
    assume $i37 == 1;
    goto corral_source_split_7899;

  corral_source_split_7899:
    assume {:verifier.code 0} true;
    $i38 := $M.10;
    goto corral_source_split_7900;

  corral_source_split_7900:
    assume {:verifier.code 0} true;
    $i39 := $and.i32($i38, 16);
    goto corral_source_split_7901;

  corral_source_split_7901:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_7902;

  corral_source_split_7902:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb34;

  $bb35:
    assume $i40 == 1;
    goto corral_source_split_7904;

  corral_source_split_7904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1091} vslice_dummy_var_294 := printk.ref.ref.i32.i32(.str.5, .str.148, $i34, 212);
    goto corral_source_split_7905;

  corral_source_split_7905:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb29:
    assume $i33 == 1;
    goto corral_source_split_7892;

  corral_source_split_7892:
    assume {:verifier.code 0} true;
    $i15 := $i25;
    goto $bb12;

  $bb23:
    assume $i28 == 1;
    goto corral_source_split_7882;

  corral_source_split_7882:
    assume {:verifier.code 0} true;
    $i29 := $M.10;
    goto corral_source_split_7883;

  corral_source_split_7883:
    assume {:verifier.code 0} true;
    $i30 := $and.i32($i29, 16);
    goto corral_source_split_7884;

  corral_source_split_7884:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_7885;

  corral_source_split_7885:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb25;

  $bb26:
    assume $i31 == 1;
    goto corral_source_split_7887;

  corral_source_split_7887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1087} vslice_dummy_var_293 := printk.ref.ref.i32.i32(.str.5, .str.148, $i25, 207);
    goto corral_source_split_7888;

  corral_source_split_7888:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb20:
    assume $i24 == 1;
    goto corral_source_split_7875;

  corral_source_split_7875:
    assume {:verifier.code 0} true;
    $i15 := $i16;
    goto $bb12;

  $bb14:
    assume $i19 == 1;
    goto corral_source_split_7865;

  corral_source_split_7865:
    assume {:verifier.code 0} true;
    $i20 := $M.10;
    goto corral_source_split_7866;

  corral_source_split_7866:
    assume {:verifier.code 0} true;
    $i21 := $and.i32($i20, 16);
    goto corral_source_split_7867;

  corral_source_split_7867:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_7868;

  corral_source_split_7868:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb16;

  $bb17:
    assume $i22 == 1;
    goto corral_source_split_7870;

  corral_source_split_7870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1083} vslice_dummy_var_292 := printk.ref.ref.i32.i32(.str.5, .str.148, $i16, 201);
    goto corral_source_split_7871;

  corral_source_split_7871:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb10:
    assume $i14 == 1;
    goto corral_source_split_7856;

  corral_source_split_7856:
    assume {:verifier.code 0} true;
    $i15 := $i6;
    goto $bb12;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_7846;

  corral_source_split_7846:
    assume {:verifier.code 0} true;
    $i10 := $M.10;
    goto corral_source_split_7847;

  corral_source_split_7847:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 16);
    goto corral_source_split_7848;

  corral_source_split_7848:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_7849;

  corral_source_split_7849:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb6;

  $bb7:
    assume $i12 == 1;
    goto corral_source_split_7851;

  corral_source_split_7851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1079} vslice_dummy_var_291 := printk.ref.ref.i32.i32(.str.5, .str.148, $i6, 196);
    goto corral_source_split_7852;

  corral_source_split_7852:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_7838;

  corral_source_split_7838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1075} vslice_dummy_var_290 := printk.ref.ref(.str.17, .str.148);
    goto corral_source_split_7839;

  corral_source_split_7839:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mxl111sf_i2c_nack: ref;

axiom mxl111sf_i2c_nack == $sub.ref(0, 378988);

procedure mxl111sf_i2c_nack($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.15, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation mxl111sf_i2c_nack($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i13: i1;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $i14: i32;
  var vslice_dummy_var_295: i32;
  var vslice_dummy_var_296: i32;
  var vslice_dummy_var_297: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7907;

  corral_source_split_7907:
    assume {:verifier.code 0} true;
    $i1 := $M.10;
    goto corral_source_split_7908;

  corral_source_split_7908:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, 4);
    goto corral_source_split_7909;

  corral_source_split_7909:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_7910;

  corral_source_split_7910:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1093} $i5 := mxl111sf_write_reg($p0, 26, 30);
    call {:si_unique_call 1094} {:cexpr "ret"} boogie_si_record_i32($i5);
    goto corral_source_split_7915;

  corral_source_split_7915:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 0);
    goto corral_source_split_7916;

  corral_source_split_7916:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    call {:si_unique_call 1095} {:cexpr "__ret"} boogie_si_record_i32($i7);
    goto corral_source_split_7917;

  corral_source_split_7917:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_7918;

  corral_source_split_7918:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i7, 0);
    goto corral_source_split_7928;

  corral_source_split_7928:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1097} $i15 := mxl111sf_write_reg($p0, 26, 26);
    call {:si_unique_call 1098} {:cexpr "ret"} boogie_si_record_i32($i15);
    goto corral_source_split_7934;

  corral_source_split_7934:
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i15, 0);
    goto corral_source_split_7935;

  corral_source_split_7935:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i32($i16);
    call {:si_unique_call 1099} {:cexpr "__ret___0"} boogie_si_record_i32($i17);
    goto corral_source_split_7936;

  corral_source_split_7936:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_7937;

  corral_source_split_7937:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i14 := $i15;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_7932;

  corral_source_split_7932:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb14:
    assume $i18 == 1;
    goto corral_source_split_7939;

  corral_source_split_7939:
    assume {:verifier.code 0} true;
    $i19 := $M.10;
    goto corral_source_split_7940;

  corral_source_split_7940:
    assume {:verifier.code 0} true;
    $i20 := $and.i32($i19, 16);
    goto corral_source_split_7941;

  corral_source_split_7941:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_7942;

  corral_source_split_7942:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb16;

  $bb17:
    assume $i21 == 1;
    goto corral_source_split_7944;

  corral_source_split_7944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1100} vslice_dummy_var_297 := printk.ref.ref.i32.i32(.str.5, .str.149, $i15, 231);
    goto corral_source_split_7945;

  corral_source_split_7945:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb10:
    assume $i13 == 1;
    goto corral_source_split_7930;

  corral_source_split_7930:
    assume {:verifier.code 0} true;
    $i14 := $i5;
    goto $bb12;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_7920;

  corral_source_split_7920:
    assume {:verifier.code 0} true;
    $i9 := $M.10;
    goto corral_source_split_7921;

  corral_source_split_7921:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 16);
    goto corral_source_split_7922;

  corral_source_split_7922:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_7923;

  corral_source_split_7923:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb6;

  $bb7:
    assume $i11 == 1;
    goto corral_source_split_7925;

  corral_source_split_7925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1096} vslice_dummy_var_296 := printk.ref.ref.i32.i32(.str.5, .str.149, $i5, 226);
    goto corral_source_split_7926;

  corral_source_split_7926:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_7912;

  corral_source_split_7912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1092} vslice_dummy_var_295 := printk.ref.ref(.str.17, .str.149);
    goto corral_source_split_7913;

  corral_source_split_7913:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mxl111sf_i2c_send_data: ref;

axiom mxl111sf_i2c_send_data == $sub.ref(0, 380020);

procedure mxl111sf_i2c_send_data($p0: ref, $i1: i8, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.15, $CurrAddr;



implementation mxl111sf_i2c_send_data($p0: ref, $i1: i8, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var $i6: i32;
  var $i7: i8;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var vslice_dummy_var_298: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1101} {:cexpr "mxl111sf_i2c_send_data:arg:index"} boogie_si_record_i8($i1);
    goto corral_source_split_7947;

  corral_source_split_7947:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(0, 1));
    goto corral_source_split_7948;

  corral_source_split_7948:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.7, $p3);
    goto corral_source_split_7949;

  corral_source_split_7949:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.15, $p2);
    goto corral_source_split_7950;

  corral_source_split_7950:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_7951;

  corral_source_split_7951:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i8($i6);
    goto corral_source_split_7952;

  corral_source_split_7952:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p2, $mul.ref(1, 1));
    goto corral_source_split_7953;

  corral_source_split_7953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1102} $i9 := mxl111sf_ctrl_msg($p4, $i7, $p8, 25, $0.ref, 0);
    call {:si_unique_call 1103} {:cexpr "tmp"} boogie_si_record_i32($i9);
    goto corral_source_split_7954;

  corral_source_split_7954:
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i9, 0);
    goto corral_source_split_7955;

  corral_source_split_7955:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    call {:si_unique_call 1104} {:cexpr "__ret"} boogie_si_record_i32($i11);
    goto corral_source_split_7956;

  corral_source_split_7956:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_7957;

  corral_source_split_7957:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_7959;

  corral_source_split_7959:
    assume {:verifier.code 0} true;
    $i13 := $M.10;
    goto corral_source_split_7960;

  corral_source_split_7960:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, 16);
    goto corral_source_split_7961;

  corral_source_split_7961:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_7962;

  corral_source_split_7962:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb3;

  $bb4:
    assume $i15 == 1;
    goto corral_source_split_7964;

  corral_source_split_7964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1105} vslice_dummy_var_298 := printk.ref.ref.i32.i32(.str.5, .str.134, $i9, 325);
    goto corral_source_split_7965;

  corral_source_split_7965:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const mxl111sf_i2c_check_status: ref;

axiom mxl111sf_i2c_check_status == $sub.ref(0, 381052);

procedure mxl111sf_i2c_check_status($p0: ref) returns ($r: i8);
  free requires assertsPassed;
  modifies $M.15, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation mxl111sf_i2c_check_status($p0: ref) returns ($r: i8)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $i20: i8;
  var vslice_dummy_var_299: i32;
  var vslice_dummy_var_300: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1106} $p1 := $alloc($mul.ref(26, $zext.i32.i64(1)));
    goto corral_source_split_7967;

  corral_source_split_7967:
    assume {:verifier.code 0} true;
    $i2 := $M.10;
    goto corral_source_split_7968;

  corral_source_split_7968:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 20);
    goto corral_source_split_7969;

  corral_source_split_7969:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 20);
    goto corral_source_split_7970;

  corral_source_split_7970:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 26)), $mul.ref(0, 1));
    goto corral_source_split_7975;

  corral_source_split_7975:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p6, $sub.i8(0, 35));
    goto corral_source_split_7976;

  corral_source_split_7976:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 26)), $mul.ref(1, 1));
    goto corral_source_split_7977;

  corral_source_split_7977:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p7, 0);
    goto corral_source_split_7978;

  corral_source_split_7978:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 26)), $mul.ref(2, 1));
    goto corral_source_split_7979;

  corral_source_split_7979:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p8, 16);
    goto corral_source_split_7980;

  corral_source_split_7980:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 26)), $mul.ref(3, 1));
    goto corral_source_split_7981;

  corral_source_split_7981:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p9, 0);
    goto corral_source_split_7982;

  corral_source_split_7982:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 26)), $mul.ref(4, 1));
    goto corral_source_split_7983;

  corral_source_split_7983:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p10, 0);
    goto corral_source_split_7984;

  corral_source_split_7984:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 26)), $mul.ref(5, 1));
    goto corral_source_split_7985;

  corral_source_split_7985:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p11, $sub.i8(0, 2));
    goto corral_source_split_7986;

  corral_source_split_7986:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p1);
    goto corral_source_split_7987;

  corral_source_split_7987:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p1);
    goto corral_source_split_7988;

  corral_source_split_7988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1108} vslice_dummy_var_300 := mxl111sf_i2c_get_data($p0, 0, $p12, $p13);
    goto corral_source_split_7989;

  corral_source_split_7989:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 26)), $mul.ref(1, 1));
    goto corral_source_split_7990;

  corral_source_split_7990:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.15, $p15);
    goto corral_source_split_7991;

  corral_source_split_7991:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_7992;

  corral_source_split_7992:
    assume {:verifier.code 0} true;
    $i18 := $and.i32($i17, 4);
    goto corral_source_split_7993;

  corral_source_split_7993:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_7994;

  corral_source_split_7994:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i20 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_7998;

  corral_source_split_7998:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  $bb4:
    assume $i19 == 1;
    goto corral_source_split_7996;

  corral_source_split_7996:
    assume {:verifier.code 0} true;
    $i20 := 1;
    goto $bb6;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_7972;

  corral_source_split_7972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1107} vslice_dummy_var_299 := printk.ref.ref(.str.17, .str.135);
    goto corral_source_split_7973;

  corral_source_split_7973:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mxl111sf_i2c_get_data: ref;

axiom mxl111sf_i2c_get_data == $sub.ref(0, 382084);

procedure mxl111sf_i2c_get_data($p0: ref, $i1: i8, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.15, $CurrAddr;



implementation mxl111sf_i2c_get_data($p0: ref, $i1: i8, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i8;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var vslice_dummy_var_301: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1109} {:cexpr "mxl111sf_i2c_get_data:arg:index"} boogie_si_record_i8($i1);
    goto corral_source_split_8000;

  corral_source_split_8000:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(0, 1));
    goto corral_source_split_8001;

  corral_source_split_8001:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.7, $p4);
    goto corral_source_split_8002;

  corral_source_split_8002:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.15, $p2);
    goto corral_source_split_8003;

  corral_source_split_8003:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_8004;

  corral_source_split_8004:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i8($i7);
    goto corral_source_split_8005;

  corral_source_split_8005:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p2, $mul.ref(1, 1));
    goto corral_source_split_8006;

  corral_source_split_8006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1110} $i10 := mxl111sf_ctrl_msg($p5, $i8, $p9, 25, $p3, 24);
    call {:si_unique_call 1111} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_8007;

  corral_source_split_8007:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i10, 0);
    goto corral_source_split_8008;

  corral_source_split_8008:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    call {:si_unique_call 1112} {:cexpr "__ret"} boogie_si_record_i32($i12);
    goto corral_source_split_8009;

  corral_source_split_8009:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_8010;

  corral_source_split_8010:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_8012;

  corral_source_split_8012:
    assume {:verifier.code 0} true;
    $i14 := $M.10;
    goto corral_source_split_8013;

  corral_source_split_8013:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i14, 16);
    goto corral_source_split_8014;

  corral_source_split_8014:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_8015;

  corral_source_split_8015:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb3;

  $bb4:
    assume $i16 == 1;
    goto corral_source_split_8017;

  corral_source_split_8017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1113} vslice_dummy_var_301 := printk.ref.ref.i32.i32(.str.5, .str.136, $i10, 335);
    goto corral_source_split_8018;

  corral_source_split_8018:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const mxl111sf_i2c_readagain: ref;

axiom mxl111sf_i2c_readagain == $sub.ref(0, 383116);

procedure mxl111sf_i2c_readagain($p0: ref, $i1: i8, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.15, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.28, $CurrAddr;



implementation mxl111sf_i2c_readagain($p0: ref, $i1: i8, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i11: i8;
  var $i12: i32;
  var $i13: i1;
  var $i10: i8;
  var $i14: i32;
  var $i15: i32;
  var $i16: i8;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i64;
  var $p29: ref;
  var $i30: i32;
  var $i31: i32;
  var $i32: i32;
  var $i33: i64;
  var $p34: ref;
  var $i35: i32;
  var $i36: i32;
  var $i37: i32;
  var $i38: i64;
  var $p39: ref;
  var $i40: i32;
  var $i41: i32;
  var $i42: i8;
  var $i43: i32;
  var $i44: i1;
  var $i24: i8;
  var $p45: ref;
  var $p46: ref;
  var $i48: i8;
  var $i49: i32;
  var $i50: i1;
  var $i51: i32;
  var $i52: i32;
  var $i53: i1;
  var $i56: i32;
  var $i57: i1;
  var $i59: i32;
  var $i60: i32;
  var $i61: i32;
  var $i62: i64;
  var $p63: ref;
  var $i64: i8;
  var $i65: i64;
  var $p66: ref;
  var $i67: i32;
  var $i68: i32;
  var $i69: i1;
  var $i70: i32;
  var $i71: i32;
  var $i72: i32;
  var $i73: i64;
  var $p74: ref;
  var $i75: i8;
  var $i76: i32;
  var $i77: i32;
  var $i78: i32;
  var $i79: i32;
  var $i80: i64;
  var $p81: ref;
  var $i82: i8;
  var $i83: i32;
  var $i85: i32;
  var $i86: i32;
  var $i87: i8;
  var $i88: i32;
  var $i89: i1;
  var $i58: i8;
  var $i55: i32;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var vslice_dummy_var_302: i32;
  var vslice_dummy_var_303: i32;
  var vslice_dummy_var_304: i32;
  var vslice_dummy_var_305: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1114} $p3 := $alloc($mul.ref(26, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1115} $p4 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    call {:si_unique_call 1116} {:cexpr "mxl111sf_i2c_readagain:arg:count"} boogie_si_record_i8($i1);
    goto corral_source_split_8020;

  corral_source_split_8020:
    assume {:verifier.code 0} true;
    $i5 := $M.10;
    goto corral_source_split_8021;

  corral_source_split_8021:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 4);
    goto corral_source_split_8022;

  corral_source_split_8022:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_8023;

  corral_source_split_8023:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb4;

  $bb4:
    call $i11, $i12, $i13, $i10, $i14, $i15, $i16, $i17, $i18 := mxl111sf_i2c_readagain_loop_$bb4($p0, $i11, $i12, $i13, $i10, $i14, $i15, $i16, $i17, $i18);
    goto $bb4_last;

  corral_source_split_8029:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i10);
    goto corral_source_split_8030;

  corral_source_split_8030:
    assume {:verifier.code 0} true;
    $i15 := $add.i32($i14, 1);
    goto corral_source_split_8031;

  corral_source_split_8031:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i32.i8($i15);
    call {:si_unique_call 1118} {:cexpr "i"} boogie_si_record_i8($i16);
    goto corral_source_split_8032;

  corral_source_split_8032:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i10);
    goto corral_source_split_8033;

  corral_source_split_8033:
    assume {:verifier.code 0} true;
    $i18 := $ule.i32($i17, 4);
    goto corral_source_split_8034;

  corral_source_split_8034:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i18 == 1);
    goto corral_source_split_8042;

  corral_source_split_8042:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref(0, 26)), $mul.ref(0, 1));
    goto corral_source_split_8044;

  corral_source_split_8044:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p19, $sub.i8(0, 35));
    goto corral_source_split_8045;

  corral_source_split_8045:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 26)), $mul.ref(1, 1));
    goto corral_source_split_8046;

  corral_source_split_8046:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p20, 0);
    goto corral_source_split_8047;

  corral_source_split_8047:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 26)), $mul.ref(2, 1));
    goto corral_source_split_8049;

  corral_source_split_8049:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p21, $sub.i8(0, 2));
    goto corral_source_split_8050;

  corral_source_split_8050:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p3, $mul.ref(0, 26)), $mul.ref(3, 1));
    goto corral_source_split_8052;

  corral_source_split_8052:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p90, $sub.i8(0, 2));
    goto corral_source_split_8053;

  corral_source_split_8053:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p3, $mul.ref(0, 26)), $mul.ref(4, 1));
    goto corral_source_split_8151;

  corral_source_split_8151:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p91, $sub.i8(0, 2));
    goto corral_source_split_8152;

  corral_source_split_8152:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p3, $mul.ref(0, 26)), $mul.ref(5, 1));
    goto corral_source_split_8154;

  corral_source_split_8154:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p92, $sub.i8(0, 2));
    goto corral_source_split_8155;

  corral_source_split_8155:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p3, $mul.ref(0, 26)), $mul.ref(6, 1));
    goto corral_source_split_8157;

  corral_source_split_8157:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p93, $sub.i8(0, 2));
    goto corral_source_split_8158;

  corral_source_split_8158:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p3, $mul.ref(0, 26)), $mul.ref(7, 1));
    goto corral_source_split_8160;

  corral_source_split_8160:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p94, $sub.i8(0, 2));
    goto corral_source_split_8161;

  corral_source_split_8161:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p3, $mul.ref(0, 26)), $mul.ref(8, 1));
    goto corral_source_split_8163;

  corral_source_split_8163:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p95, $sub.i8(0, 2));
    goto corral_source_split_8164;

  corral_source_split_8164:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p3, $mul.ref(0, 26)), $mul.ref(9, 1));
    goto corral_source_split_8166;

  corral_source_split_8166:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p96, $sub.i8(0, 2));
    goto corral_source_split_8167;

  corral_source_split_8167:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p3, $mul.ref(0, 26)), $mul.ref(10, 1));
    goto corral_source_split_8169;

  corral_source_split_8169:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p97, $sub.i8(0, 2));
    goto corral_source_split_8170;

  corral_source_split_8170:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p3, $mul.ref(0, 26)), $mul.ref(11, 1));
    goto corral_source_split_8172;

  corral_source_split_8172:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p98, $sub.i8(0, 2));
    goto corral_source_split_8173;

  corral_source_split_8173:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p3, $mul.ref(0, 26)), $mul.ref(12, 1));
    goto corral_source_split_8175;

  corral_source_split_8175:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p99, $sub.i8(0, 2));
    goto corral_source_split_8176;

  corral_source_split_8176:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p3, $mul.ref(0, 26)), $mul.ref(13, 1));
    goto corral_source_split_8178;

  corral_source_split_8178:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p100, $sub.i8(0, 2));
    goto corral_source_split_8179;

  corral_source_split_8179:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p3, $mul.ref(0, 26)), $mul.ref(14, 1));
    goto corral_source_split_8181;

  corral_source_split_8181:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p101, $sub.i8(0, 2));
    goto corral_source_split_8182;

  corral_source_split_8182:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p3, $mul.ref(0, 26)), $mul.ref(15, 1));
    goto corral_source_split_8184;

  corral_source_split_8184:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p102, $sub.i8(0, 2));
    goto corral_source_split_8185;

  corral_source_split_8185:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p3, $mul.ref(0, 26)), $mul.ref(16, 1));
    goto corral_source_split_8187;

  corral_source_split_8187:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p103, $sub.i8(0, 2));
    goto corral_source_split_8188;

  corral_source_split_8188:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p3, $mul.ref(0, 26)), $mul.ref(17, 1));
    goto corral_source_split_8190;

  corral_source_split_8190:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p104, $sub.i8(0, 2));
    goto corral_source_split_8191;

  corral_source_split_8191:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p3, $mul.ref(0, 26)), $mul.ref(18, 1));
    goto corral_source_split_8193;

  corral_source_split_8193:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p105, $sub.i8(0, 2));
    goto corral_source_split_8194;

  corral_source_split_8194:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p3, $mul.ref(0, 26)), $mul.ref(19, 1));
    goto corral_source_split_8196;

  corral_source_split_8196:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p106, $sub.i8(0, 2));
    goto corral_source_split_8197;

  corral_source_split_8197:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p3, $mul.ref(0, 26)), $mul.ref(20, 1));
    goto corral_source_split_8199;

  corral_source_split_8199:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p107, $sub.i8(0, 2));
    goto corral_source_split_8200;

  corral_source_split_8200:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p3, $mul.ref(0, 26)), $mul.ref(21, 1));
    goto corral_source_split_8202;

  corral_source_split_8202:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p108, $sub.i8(0, 2));
    goto corral_source_split_8203;

  corral_source_split_8203:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p3, $mul.ref(0, 26)), $mul.ref(22, 1));
    goto corral_source_split_8205;

  corral_source_split_8205:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p109, $sub.i8(0, 2));
    goto corral_source_split_8206;

  corral_source_split_8206:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p3, $mul.ref(0, 26)), $mul.ref(23, 1));
    goto corral_source_split_8208;

  corral_source_split_8208:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p110, $sub.i8(0, 2));
    goto corral_source_split_8209;

  corral_source_split_8209:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p3, $mul.ref(0, 26)), $mul.ref(24, 1));
    goto corral_source_split_8211;

  corral_source_split_8211:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p111, $sub.i8(0, 2));
    goto corral_source_split_8212;

  corral_source_split_8212:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p3, $mul.ref(0, 26)), $mul.ref(25, 1));
    goto corral_source_split_8214;

  corral_source_split_8214:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p112, $sub.i8(0, 2));
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i1);
    goto corral_source_split_8055;

  corral_source_split_8055:
    assume {:verifier.code 0} true;
    $i23 := $slt.i32(0, $i22);
    goto corral_source_split_8056;

  corral_source_split_8056:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p3);
    goto corral_source_split_8088;

  corral_source_split_8088:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p4);
    goto corral_source_split_8089;

  corral_source_split_8089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1122} vslice_dummy_var_303 := mxl111sf_i2c_get_data($p0, 0, $p45, $p46);
    goto corral_source_split_8090;

  corral_source_split_8090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1123} $i48 := mxl111sf_i2c_check_status($p0);
    call {:si_unique_call 1124} {:cexpr "tmp___0"} boogie_si_record_i8($i48);
    goto corral_source_split_8091;

  corral_source_split_8091:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i32($i48);
    goto corral_source_split_8092;

  corral_source_split_8092:
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i49, 1);
    goto corral_source_split_8093;

  corral_source_split_8093:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i50 == 1);
    goto corral_source_split_8100;

  corral_source_split_8100:
    assume {:verifier.code 0} true;
    $i56 := $zext.i8.i32($i1);
    goto corral_source_split_8101;

  corral_source_split_8101:
    assume {:verifier.code 0} true;
    $i57 := $slt.i32(0, $i56);
    goto corral_source_split_8102;

  corral_source_split_8102:
    assume {:verifier.code 0} true;
    assume {:branchcond $i57} true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i57 == 1);
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i55 := 1;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_8107;

  corral_source_split_8107:
    assume {:verifier.code 0} true;
    $r := $i55;
    return;

  $bb30:
    assume $i57 == 1;
    goto corral_source_split_8109;

  corral_source_split_8109:
    assume {:verifier.code 0} true;
    $i58 := 0;
    goto $bb33;

  $bb33:
    call $i59, $i60, $i61, $i62, $p63, $i64, $i65, $p66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $p74, $i75, $i76, $i77, $i78, $i79, $i80, $p81, $i82, $i83, $i85, $i86, $i87, $i88, $i89, $i58, vslice_dummy_var_305 := mxl111sf_i2c_readagain_loop_$bb33($p2, $p4, $i56, $i59, $i60, $i61, $i62, $p63, $i64, $i65, $p66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $p74, $i75, $i76, $i77, $i78, $i79, $i80, $p81, $i82, $i83, $i85, $i86, $i87, $i88, $i89, $i58, vslice_dummy_var_305);
    goto $bb33_last;

  corral_source_split_8111:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i59 := $zext.i8.i32($i58);
    goto corral_source_split_8113;

  corral_source_split_8113:
    assume {:verifier.code 0} true;
    $i60 := $mul.i32($i59, 3);
    goto corral_source_split_8114;

  corral_source_split_8114:
    assume {:verifier.code 0} true;
    $i61 := $add.i32($i60, 1);
    goto corral_source_split_8115;

  corral_source_split_8115:
    assume {:verifier.code 0} true;
    $i62 := $sext.i32.i64($i61);
    goto corral_source_split_8116;

  corral_source_split_8116:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref($i62, 1));
    goto corral_source_split_8117;

  corral_source_split_8117:
    assume {:verifier.code 0} true;
    $i64 := $load.i8($M.30, $p63);
    goto corral_source_split_8118;

  corral_source_split_8118:
    assume {:verifier.code 0} true;
    $i65 := $zext.i8.i64($i58);
    goto corral_source_split_8119;

  corral_source_split_8119:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($p2, $mul.ref($i65, 1));
    goto corral_source_split_8120;

  corral_source_split_8120:
    assume {:verifier.code 0} true;
    $M.28 := $store.i8($M.28, $p66, $i64);
    goto corral_source_split_8121;

  corral_source_split_8121:
    assume {:verifier.code 0} true;
    $i67 := $M.10;
    goto corral_source_split_8122;

  corral_source_split_8122:
    assume {:verifier.code 0} true;
    $i68 := $and.i32($i67, 4);
    goto corral_source_split_8123;

  corral_source_split_8123:
    assume {:verifier.code 0} true;
    $i69 := $ne.i32($i68, 0);
    goto corral_source_split_8124;

  corral_source_split_8124:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i85 := $zext.i8.i32($i58);
    goto corral_source_split_8143;

  corral_source_split_8143:
    assume {:verifier.code 0} true;
    $i86 := $add.i32($i85, 1);
    goto corral_source_split_8144;

  corral_source_split_8144:
    assume {:verifier.code 0} true;
    $i87 := $trunc.i32.i8($i86);
    call {:si_unique_call 1127} {:cexpr "i"} boogie_si_record_i8($i87);
    goto corral_source_split_8145;

  corral_source_split_8145:
    assume {:verifier.code 0} true;
    $i88 := $zext.i8.i32($i87);
    goto corral_source_split_8146;

  corral_source_split_8146:
    assume {:verifier.code 0} true;
    $i89 := $slt.i32($i88, $i56);
    goto corral_source_split_8147;

  corral_source_split_8147:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i89 == 1);
    goto corral_source_split_8149;

  corral_source_split_8149:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb38:
    assume $i89 == 1;
    assume {:verifier.code 0} true;
    $i58 := $i87;
    goto $bb38_dummy;

  $bb35:
    assume $i69 == 1;
    goto corral_source_split_8126;

  corral_source_split_8126:
    assume {:verifier.code 0} true;
    $i70 := $zext.i8.i32($i58);
    goto corral_source_split_8127;

  corral_source_split_8127:
    assume {:verifier.code 0} true;
    $i71 := $mul.i32($i70, 3);
    goto corral_source_split_8128;

  corral_source_split_8128:
    assume {:verifier.code 0} true;
    $i72 := $add.i32($i71, 1);
    goto corral_source_split_8129;

  corral_source_split_8129:
    assume {:verifier.code 0} true;
    $i73 := $sext.i32.i64($i72);
    goto corral_source_split_8130;

  corral_source_split_8130:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref($i73, 1));
    goto corral_source_split_8131;

  corral_source_split_8131:
    assume {:verifier.code 0} true;
    $i75 := $load.i8($M.30, $p74);
    goto corral_source_split_8132;

  corral_source_split_8132:
    assume {:verifier.code 0} true;
    $i76 := $zext.i8.i32($i75);
    goto corral_source_split_8133;

  corral_source_split_8133:
    assume {:verifier.code 0} true;
    $i77 := $zext.i8.i32($i58);
    goto corral_source_split_8134;

  corral_source_split_8134:
    assume {:verifier.code 0} true;
    $i78 := $mul.i32($i77, 3);
    goto corral_source_split_8135;

  corral_source_split_8135:
    assume {:verifier.code 0} true;
    $i79 := $add.i32($i78, 2);
    goto corral_source_split_8136;

  corral_source_split_8136:
    assume {:verifier.code 0} true;
    $i80 := $sext.i32.i64($i79);
    goto corral_source_split_8137;

  corral_source_split_8137:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref($i80, 1));
    goto corral_source_split_8138;

  corral_source_split_8138:
    assume {:verifier.code 0} true;
    $i82 := $load.i8($M.30, $p81);
    goto corral_source_split_8139;

  corral_source_split_8139:
    assume {:verifier.code 0} true;
    $i83 := $zext.i8.i32($i82);
    goto corral_source_split_8140;

  corral_source_split_8140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1126} vslice_dummy_var_305 := printk.ref.ref.i32.i32(.str.140, .str.138, $i76, $i83);
    goto corral_source_split_8141;

  corral_source_split_8141:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb24:
    assume $i50 == 1;
    goto corral_source_split_8095;

  corral_source_split_8095:
    assume {:verifier.code 0} true;
    $i51 := $M.10;
    goto corral_source_split_8096;

  corral_source_split_8096:
    assume {:verifier.code 0} true;
    $i52 := $and.i32($i51, 4);
    goto corral_source_split_8097;

  corral_source_split_8097:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_8098;

  corral_source_split_8098:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i55 := 0;
    goto $bb29;

  $bb26:
    assume $i53 == 1;
    goto corral_source_split_8104;

  corral_source_split_8104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1125} vslice_dummy_var_304 := printk.ref.ref(.str.139, .str.138);
    goto corral_source_split_8105;

  corral_source_split_8105:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb16:
    assume $i23 == 1;
    goto corral_source_split_8058;

  corral_source_split_8058:
    assume {:verifier.code 0} true;
    $i24 := 0;
    goto $bb19;

  $bb19:
    call $i25, $i26, $i27, $i28, $p29, $i30, $i31, $i32, $i33, $p34, $i35, $i36, $i37, $i38, $p39, $i40, $i41, $i42, $i43, $i44, $i24 := mxl111sf_i2c_readagain_loop_$bb19($p3, $i22, $i25, $i26, $i27, $i28, $p29, $i30, $i31, $i32, $i33, $p34, $i35, $i36, $i37, $i38, $p39, $i40, $i41, $i42, $i43, $i44, $i24);
    goto $bb19_last;

  corral_source_split_8060:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i24);
    goto corral_source_split_8062;

  corral_source_split_8062:
    assume {:verifier.code 0} true;
    $i26 := $mul.i32($i25, 3);
    goto corral_source_split_8063;

  corral_source_split_8063:
    assume {:verifier.code 0} true;
    $i27 := $add.i32($i26, 2);
    goto corral_source_split_8064;

  corral_source_split_8064:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64($i27);
    goto corral_source_split_8065;

  corral_source_split_8065:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p3, $mul.ref(0, 26)), $mul.ref($i28, 1));
    goto corral_source_split_8066;

  corral_source_split_8066:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p29, 12);
    goto corral_source_split_8067;

  corral_source_split_8067:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i24);
    goto corral_source_split_8068;

  corral_source_split_8068:
    assume {:verifier.code 0} true;
    $i31 := $add.i32($i30, 1);
    goto corral_source_split_8069;

  corral_source_split_8069:
    assume {:verifier.code 0} true;
    $i32 := $mul.i32($i31, 3);
    goto corral_source_split_8070;

  corral_source_split_8070:
    assume {:verifier.code 0} true;
    $i33 := $sext.i32.i64($i32);
    goto corral_source_split_8071;

  corral_source_split_8071:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p3, $mul.ref(0, 26)), $mul.ref($i33, 1));
    goto corral_source_split_8072;

  corral_source_split_8072:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p34, 0);
    goto corral_source_split_8073;

  corral_source_split_8073:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i24);
    goto corral_source_split_8074;

  corral_source_split_8074:
    assume {:verifier.code 0} true;
    $i36 := $mul.i32($i35, 3);
    goto corral_source_split_8075;

  corral_source_split_8075:
    assume {:verifier.code 0} true;
    $i37 := $add.i32($i36, 4);
    goto corral_source_split_8076;

  corral_source_split_8076:
    assume {:verifier.code 0} true;
    $i38 := $sext.i32.i64($i37);
    goto corral_source_split_8077;

  corral_source_split_8077:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p3, $mul.ref(0, 26)), $mul.ref($i38, 1));
    goto corral_source_split_8078;

  corral_source_split_8078:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p39, 0);
    goto corral_source_split_8079;

  corral_source_split_8079:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i24);
    goto corral_source_split_8080;

  corral_source_split_8080:
    assume {:verifier.code 0} true;
    $i41 := $add.i32($i40, 1);
    goto corral_source_split_8081;

  corral_source_split_8081:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i32.i8($i41);
    call {:si_unique_call 1121} {:cexpr "i"} boogie_si_record_i8($i42);
    goto corral_source_split_8082;

  corral_source_split_8082:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i32($i42);
    goto corral_source_split_8083;

  corral_source_split_8083:
    assume {:verifier.code 0} true;
    $i44 := $slt.i32($i43, $i22);
    goto corral_source_split_8084;

  corral_source_split_8084:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i44 == 1);
    goto corral_source_split_8086;

  corral_source_split_8086:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb21:
    assume $i44 == 1;
    assume {:verifier.code 0} true;
    $i24 := $i42;
    goto $bb21_dummy;

  $bb8:
    assume $i18 == 1;
    goto corral_source_split_8040;

  corral_source_split_8040:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1119} $i11 := mxl111sf_i2c_check_fifo($p0);
    call {:si_unique_call 1120} {:cexpr "fifo_status"} boogie_si_record_i8($i11);
    goto corral_source_split_8036;

  corral_source_split_8036:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_8037;

  corral_source_split_8037:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_8038;

  corral_source_split_8038:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb6:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i10 := $i16;
    goto $bb6_dummy;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_8025;

  corral_source_split_8025:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i1);
    goto corral_source_split_8026;

  corral_source_split_8026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1117} vslice_dummy_var_302 := printk.ref.ref.i32(.str.137, .str.138, $i8);
    goto corral_source_split_8027;

  corral_source_split_8027:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb38_dummy:
    assume false;
    return;

  $bb33_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_8111;

  $bb21_dummy:
    assume false;
    return;

  $bb19_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_8060;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_8029;
}



const mxl111sf_i2c_check_fifo: ref;

axiom mxl111sf_i2c_check_fifo == $sub.ref(0, 384148);

procedure mxl111sf_i2c_check_fifo($p0: ref) returns ($r: i8);
  free requires assertsPassed;
  modifies $M.15, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation mxl111sf_i2c_check_fifo($p0: ref) returns ($r: i8)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $i23: i8;
  var $p24: ref;
  var $i25: i8;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $i30: i32;
  var $i31: i1;
  var vslice_dummy_var_306: i32;
  var vslice_dummy_var_307: i32;
  var vslice_dummy_var_308: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1128} $p1 := $alloc($mul.ref(26, $zext.i32.i64(1)));
    goto corral_source_split_8216;

  corral_source_split_8216:
    assume {:verifier.code 0} true;
    $i2 := $M.10;
    goto corral_source_split_8217;

  corral_source_split_8217:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 4);
    goto corral_source_split_8218;

  corral_source_split_8218:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_8219;

  corral_source_split_8219:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 26)), $mul.ref(0, 1));
    goto corral_source_split_8224;

  corral_source_split_8224:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p6, $sub.i8(0, 35));
    goto corral_source_split_8225;

  corral_source_split_8225:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 26)), $mul.ref(1, 1));
    goto corral_source_split_8226;

  corral_source_split_8226:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p7, 0);
    goto corral_source_split_8227;

  corral_source_split_8227:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 26)), $mul.ref(2, 1));
    goto corral_source_split_8228;

  corral_source_split_8228:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p8, 48);
    goto corral_source_split_8229;

  corral_source_split_8229:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 26)), $mul.ref(3, 1));
    goto corral_source_split_8230;

  corral_source_split_8230:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p9, 0);
    goto corral_source_split_8231;

  corral_source_split_8231:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 26)), $mul.ref(4, 1));
    goto corral_source_split_8232;

  corral_source_split_8232:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p10, 0);
    goto corral_source_split_8233;

  corral_source_split_8233:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 26)), $mul.ref(5, 1));
    goto corral_source_split_8234;

  corral_source_split_8234:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p11, 16);
    goto corral_source_split_8235;

  corral_source_split_8235:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 26)), $mul.ref(6, 1));
    goto corral_source_split_8236;

  corral_source_split_8236:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p12, 0);
    goto corral_source_split_8237;

  corral_source_split_8237:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 26)), $mul.ref(7, 1));
    goto corral_source_split_8238;

  corral_source_split_8238:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p13, 0);
    goto corral_source_split_8239;

  corral_source_split_8239:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 26)), $mul.ref(8, 1));
    goto corral_source_split_8240;

  corral_source_split_8240:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p14, $sub.i8(0, 2));
    goto corral_source_split_8241;

  corral_source_split_8241:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p1);
    goto corral_source_split_8242;

  corral_source_split_8242:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p1);
    goto corral_source_split_8243;

  corral_source_split_8243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1130} vslice_dummy_var_307 := mxl111sf_i2c_get_data($p0, 0, $p15, $p16);
    goto corral_source_split_8244;

  corral_source_split_8244:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 26)), $mul.ref(1, 1));
    goto corral_source_split_8245;

  corral_source_split_8245:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.15, $p18);
    goto corral_source_split_8246;

  corral_source_split_8246:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_8247;

  corral_source_split_8247:
    assume {:verifier.code 0} true;
    $i21 := $and.i32($i20, 8);
    goto corral_source_split_8248;

  corral_source_split_8248:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_8249;

  corral_source_split_8249:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i23 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_8253;

  corral_source_split_8253:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 26)), $mul.ref(5, 1));
    goto corral_source_split_8254;

  corral_source_split_8254:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.15, $p24);
    goto corral_source_split_8255;

  corral_source_split_8255:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i25);
    goto corral_source_split_8256;

  corral_source_split_8256:
    assume {:verifier.code 0} true;
    $i27 := $and.i32($i26, 2);
    goto corral_source_split_8257;

  corral_source_split_8257:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_8258;

  corral_source_split_8258:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $r := $i23;
    return;

  $bb7:
    assume $i28 == 1;
    goto corral_source_split_8260;

  corral_source_split_8260:
    assume {:verifier.code 0} true;
    $i29 := $M.10;
    goto corral_source_split_8261;

  corral_source_split_8261:
    assume {:verifier.code 0} true;
    $i30 := $and.i32($i29, 4);
    goto corral_source_split_8262;

  corral_source_split_8262:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_8263;

  corral_source_split_8263:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i31 == 1;
    goto corral_source_split_8265;

  corral_source_split_8265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1131} vslice_dummy_var_308 := printk.ref.ref(.str.142, .str.141);
    goto corral_source_split_8266;

  corral_source_split_8266:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb4:
    assume $i22 == 1;
    goto corral_source_split_8251;

  corral_source_split_8251:
    assume {:verifier.code 0} true;
    $i23 := 1;
    goto $bb6;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_8221;

  corral_source_split_8221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1129} vslice_dummy_var_306 := printk.ref.ref(.str.17, .str.141);
    goto corral_source_split_8222;

  corral_source_split_8222:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_linux_kernel_locking_mutex_mutex_lock_interruptible_or_killable_i2c_mutex_of_dvb_usb_device: ref;

axiom ldv_linux_kernel_locking_mutex_mutex_lock_interruptible_or_killable_i2c_mutex_of_dvb_usb_device == $sub.ref(0, 385180);

procedure ldv_linux_kernel_locking_mutex_mutex_lock_interruptible_or_killable_i2c_mutex_of_dvb_usb_device($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.29, assertsPassed;



implementation ldv_linux_kernel_locking_mutex_mutex_lock_interruptible_or_killable_i2c_mutex_of_dvb_usb_device($p0: ref) returns ($r: i32)
{
  var $i1: i8;
  var $i2: i1;
  var $i3: i1;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8268;

  corral_source_split_8268:
    assume {:verifier.code 0} true;
    $i1 := $M.29;
    goto corral_source_split_8269;

  corral_source_split_8269:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i8.i1($i1);
    goto corral_source_split_8270;

  corral_source_split_8270:
    assume {:verifier.code 0} true;
    $i3 := $xor.i1($i2, 1);
    goto corral_source_split_8271;

  corral_source_split_8271:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_8272;

  corral_source_split_8272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1132} ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock($i4);
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    goto corral_source_split_8273;

  corral_source_split_8273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1133} $i5 := ldv_undef_int();
    call {:si_unique_call 1134} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_8274;

  corral_source_split_8274:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_8275;

  corral_source_split_8275:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_8280;

  corral_source_split_8280:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 4);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8282;

  corral_source_split_8282:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_8277;

  corral_source_split_8277:
    assume {:verifier.code 0} true;
    $M.29 := 1;
    call {:si_unique_call 1135} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_i2c_mutex_of_dvb_usb_device"} boogie_si_record_i8(1);
    goto corral_source_split_8278;

  corral_source_split_8278:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  SeqInstr_46:
    assume !assertsPassed;
    return;
}



const ldv_undef_int: ref;

axiom ldv_undef_int == $sub.ref(0, 386212);

procedure ldv_undef_int() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_undef_int() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8284;

  corral_source_split_8284:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1136} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1137} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1138} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_8285;

  corral_source_split_8285:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const dev_get_drvdata: ref;

axiom dev_get_drvdata == $sub.ref(0, 387244);

procedure dev_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8287;

  corral_source_split_8287:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1416)), $mul.ref(512, 1));
    goto corral_source_split_8288;

  corral_source_split_8288:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.8, $p1);
    goto corral_source_split_8289;

  corral_source_split_8289:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const mxl111sf_frontend_attach_atsc: ref;

axiom mxl111sf_frontend_attach_atsc == $sub.ref(0, 388276);

procedure mxl111sf_frontend_attach_atsc($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.15, $CurrAddr, $M.18, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25;



implementation mxl111sf_frontend_attach_atsc($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8291;

  corral_source_split_8291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1139} $i1 := mxl111sf_lgdt3305_frontend_attach($p0, 0);
    call {:si_unique_call 1140} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_8292;

  corral_source_split_8292:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const mxl111sf_get_stream_config_atsc: ref;

axiom mxl111sf_get_stream_config_atsc == $sub.ref(0, 389308);

procedure mxl111sf_get_stream_config_atsc($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr;



implementation mxl111sf_get_stream_config_atsc($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i24;
  var $i11: i24;
  var $i12: i24;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $i23: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1141} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_8294;

  corral_source_split_8294:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8295;

  corral_source_split_8295:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p4, .str.2);
    goto corral_source_split_8296;

  corral_source_split_8296:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8297;

  corral_source_split_8297:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p5, .str.89);
    goto corral_source_split_8298;

  corral_source_split_8298:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8299;

  corral_source_split_8299:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p6, .str.3);
    goto corral_source_split_8300;

  corral_source_split_8300:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8301;

  corral_source_split_8301:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p7, .str.90);
    goto corral_source_split_8302;

  corral_source_split_8302:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8303;

  corral_source_split_8303:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_8304;

  corral_source_split_8304:
    assume {:verifier.code 0} true;
    $i10 := $load.i24($M.5, $p9);
    goto corral_source_split_8305;

  corral_source_split_8305:
    assume {:verifier.code 0} true;
    $i11 := $and.i24($i10, $sub.i24(0, 262144));
    goto corral_source_split_8306;

  corral_source_split_8306:
    assume {:verifier.code 0} true;
    $i12 := $or.i24($i11, 1081);
    goto corral_source_split_8307;

  corral_source_split_8307:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p9, $i12);
    goto corral_source_split_8308;

  corral_source_split_8308:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8309;

  corral_source_split_8309:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p13, 0);
    goto corral_source_split_8310;

  corral_source_split_8310:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8311;

  corral_source_split_8311:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.6, $p14);
    goto corral_source_split_8312;

  corral_source_split_8312:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i64($i15);
    goto corral_source_split_8313;

  corral_source_split_8313:
    assume {:verifier.code 0} true;
    $i17 := $and.i64($i16, 1);
    goto corral_source_split_8314;

  corral_source_split_8314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1142} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 1143} {:cexpr "tmp"} boogie_si_record_i64($i18);
    goto corral_source_split_8315;

  corral_source_split_8315:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_8316;

  corral_source_split_8316:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p1, 0);
    goto corral_source_split_8323;

  corral_source_split_8323:
    assume {:verifier.code 0} true;
    $i22 := $M.14;
    goto corral_source_split_8324;

  corral_source_split_8324:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_8325;

  corral_source_split_8325:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i23 == 1);
    goto corral_source_split_8330;

  corral_source_split_8330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1146} mxl111sf_stream_config_bulk($p2, 6);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb4:
    assume $i23 == 1;
    goto corral_source_split_8327;

  corral_source_split_8327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1145} mxl111sf_stream_config_isoc($p2, 6, 24, 3072);
    goto corral_source_split_8328;

  corral_source_split_8328:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_8318;

  corral_source_split_8318:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 1584)), $mul.ref(1576, 1));
    goto corral_source_split_8319;

  corral_source_split_8319:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.8, $p20);
    goto corral_source_split_8320;

  corral_source_split_8320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1144} __dynamic_pr_debug.ref.ref.ref.i32($p3, .str.90, .str.89, $i21);
    goto corral_source_split_8321;

  corral_source_split_8321:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mxl111sf_frontend_attach_mh: ref;

axiom mxl111sf_frontend_attach_mh == $sub.ref(0, 390340);

procedure mxl111sf_frontend_attach_mh($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.15, $CurrAddr, $M.18, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25;



implementation mxl111sf_frontend_attach_mh($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8332;

  corral_source_split_8332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1147} $i1 := mxl111sf_lg2160_frontend_attach($p0, 0);
    call {:si_unique_call 1148} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_8333;

  corral_source_split_8333:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const mxl111sf_get_stream_config_mh: ref;

axiom mxl111sf_get_stream_config_mh == $sub.ref(0, 391372);

procedure mxl111sf_get_stream_config_mh($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr;



implementation mxl111sf_get_stream_config_mh($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i24;
  var $i11: i24;
  var $i12: i24;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $i23: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1149} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_8335;

  corral_source_split_8335:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8336;

  corral_source_split_8336:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p4, .str.2);
    goto corral_source_split_8337;

  corral_source_split_8337:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8338;

  corral_source_split_8338:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p5, .str.118);
    goto corral_source_split_8339;

  corral_source_split_8339:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8340;

  corral_source_split_8340:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p6, .str.3);
    goto corral_source_split_8341;

  corral_source_split_8341:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8342;

  corral_source_split_8342:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p7, .str.90);
    goto corral_source_split_8343;

  corral_source_split_8343:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8344;

  corral_source_split_8344:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_8345;

  corral_source_split_8345:
    assume {:verifier.code 0} true;
    $i10 := $load.i24($M.5, $p9);
    goto corral_source_split_8346;

  corral_source_split_8346:
    assume {:verifier.code 0} true;
    $i11 := $and.i24($i10, $sub.i24(0, 262144));
    goto corral_source_split_8347;

  corral_source_split_8347:
    assume {:verifier.code 0} true;
    $i12 := $or.i24($i11, 1122);
    goto corral_source_split_8348;

  corral_source_split_8348:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p9, $i12);
    goto corral_source_split_8349;

  corral_source_split_8349:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8350;

  corral_source_split_8350:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p13, 0);
    goto corral_source_split_8351;

  corral_source_split_8351:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8352;

  corral_source_split_8352:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.6, $p14);
    goto corral_source_split_8353;

  corral_source_split_8353:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i64($i15);
    goto corral_source_split_8354;

  corral_source_split_8354:
    assume {:verifier.code 0} true;
    $i17 := $and.i64($i16, 1);
    goto corral_source_split_8355;

  corral_source_split_8355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1150} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 1151} {:cexpr "tmp"} boogie_si_record_i64($i18);
    goto corral_source_split_8356;

  corral_source_split_8356:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_8357;

  corral_source_split_8357:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p1, 2);
    goto corral_source_split_8364;

  corral_source_split_8364:
    assume {:verifier.code 0} true;
    $i22 := $M.14;
    goto corral_source_split_8365;

  corral_source_split_8365:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_8366;

  corral_source_split_8366:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i23 == 1);
    goto corral_source_split_8371;

  corral_source_split_8371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1154} mxl111sf_stream_config_bulk($p2, 5);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb4:
    assume $i23 == 1;
    goto corral_source_split_8368;

  corral_source_split_8368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1153} mxl111sf_stream_config_isoc($p2, 5, 96, 200);
    goto corral_source_split_8369;

  corral_source_split_8369:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_8359;

  corral_source_split_8359:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 1584)), $mul.ref(1576, 1));
    goto corral_source_split_8360;

  corral_source_split_8360:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.8, $p20);
    goto corral_source_split_8361;

  corral_source_split_8361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1152} __dynamic_pr_debug.ref.ref.ref.i32($p3, .str.90, .str.118, $i21);
    goto corral_source_split_8362;

  corral_source_split_8362:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mxl111sf_frontend_attach_dvbt: ref;

axiom mxl111sf_frontend_attach_dvbt == $sub.ref(0, 392404);

procedure mxl111sf_frontend_attach_dvbt($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.15, $CurrAddr, $M.18, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25;



implementation mxl111sf_frontend_attach_dvbt($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8373;

  corral_source_split_8373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1155} $i1 := mxl111sf_attach_demod($p0, 0);
    call {:si_unique_call 1156} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_8374;

  corral_source_split_8374:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const mxl111sf_get_stream_config_dvbt: ref;

axiom mxl111sf_get_stream_config_dvbt == $sub.ref(0, 393436);

procedure mxl111sf_get_stream_config_dvbt($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr;



implementation mxl111sf_get_stream_config_dvbt($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i24;
  var $i11: i24;
  var $i12: i24;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $i23: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1157} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_8376;

  corral_source_split_8376:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8377;

  corral_source_split_8377:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p4, .str.2);
    goto corral_source_split_8378;

  corral_source_split_8378:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8379;

  corral_source_split_8379:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p5, .str.109);
    goto corral_source_split_8380;

  corral_source_split_8380:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8381;

  corral_source_split_8381:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p6, .str.3);
    goto corral_source_split_8382;

  corral_source_split_8382:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8383;

  corral_source_split_8383:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p7, .str.90);
    goto corral_source_split_8384;

  corral_source_split_8384:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8385;

  corral_source_split_8385:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_8386;

  corral_source_split_8386:
    assume {:verifier.code 0} true;
    $i10 := $load.i24($M.5, $p9);
    goto corral_source_split_8387;

  corral_source_split_8387:
    assume {:verifier.code 0} true;
    $i11 := $and.i24($i10, $sub.i24(0, 262144));
    goto corral_source_split_8388;

  corral_source_split_8388:
    assume {:verifier.code 0} true;
    $i12 := $or.i24($i11, 1040);
    goto corral_source_split_8389;

  corral_source_split_8389:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p9, $i12);
    goto corral_source_split_8390;

  corral_source_split_8390:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8391;

  corral_source_split_8391:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p13, 0);
    goto corral_source_split_8392;

  corral_source_split_8392:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8393;

  corral_source_split_8393:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.6, $p14);
    goto corral_source_split_8394;

  corral_source_split_8394:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i64($i15);
    goto corral_source_split_8395;

  corral_source_split_8395:
    assume {:verifier.code 0} true;
    $i17 := $and.i64($i16, 1);
    goto corral_source_split_8396;

  corral_source_split_8396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1158} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 1159} {:cexpr "tmp"} boogie_si_record_i64($i18);
    goto corral_source_split_8397;

  corral_source_split_8397:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_8398;

  corral_source_split_8398:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p1, 0);
    goto corral_source_split_8405;

  corral_source_split_8405:
    assume {:verifier.code 0} true;
    $i22 := $M.14;
    goto corral_source_split_8406;

  corral_source_split_8406:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_8407;

  corral_source_split_8407:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i23 == 1);
    goto corral_source_split_8412;

  corral_source_split_8412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1162} mxl111sf_stream_config_bulk($p2, 4);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb4:
    assume $i23 == 1;
    goto corral_source_split_8409;

  corral_source_split_8409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1161} mxl111sf_stream_config_isoc($p2, 4, 96, 564);
    goto corral_source_split_8410;

  corral_source_split_8410:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_8400;

  corral_source_split_8400:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 1584)), $mul.ref(1576, 1));
    goto corral_source_split_8401;

  corral_source_split_8401:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.8, $p20);
    goto corral_source_split_8402;

  corral_source_split_8402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1160} __dynamic_pr_debug.ref.ref.ref.i32($p3, .str.90, .str.109, $i21);
    goto corral_source_split_8403;

  corral_source_split_8403:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mxl111sf_frontend_attach_mercury: ref;

axiom mxl111sf_frontend_attach_mercury == $sub.ref(0, 394468);

procedure mxl111sf_frontend_attach_mercury($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.15, $CurrAddr, $M.18, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25;



implementation mxl111sf_frontend_attach_mercury($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i24;
  var $i9: i24;
  var $i10: i24;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i64;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $i20: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1163} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_8414;

  corral_source_split_8414:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8415;

  corral_source_split_8415:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p2, .str.2);
    goto corral_source_split_8416;

  corral_source_split_8416:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8417;

  corral_source_split_8417:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p3, .str.111);
    goto corral_source_split_8418;

  corral_source_split_8418:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8419;

  corral_source_split_8419:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p4, .str.3);
    goto corral_source_split_8420;

  corral_source_split_8420:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8421;

  corral_source_split_8421:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p5, .str.98);
    goto corral_source_split_8422;

  corral_source_split_8422:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8423;

  corral_source_split_8423:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_8424;

  corral_source_split_8424:
    assume {:verifier.code 0} true;
    $i8 := $load.i24($M.5, $p7);
    goto corral_source_split_8425;

  corral_source_split_8425:
    assume {:verifier.code 0} true;
    $i9 := $and.i24($i8, $sub.i24(0, 262144));
    goto corral_source_split_8426;

  corral_source_split_8426:
    assume {:verifier.code 0} true;
    $i10 := $or.i24($i9, 975);
    goto corral_source_split_8427;

  corral_source_split_8427:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p7, $i10);
    goto corral_source_split_8428;

  corral_source_split_8428:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8429;

  corral_source_split_8429:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p11, 0);
    goto corral_source_split_8430;

  corral_source_split_8430:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8431;

  corral_source_split_8431:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.6, $p12);
    goto corral_source_split_8432;

  corral_source_split_8432:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i64($i13);
    goto corral_source_split_8433;

  corral_source_split_8433:
    assume {:verifier.code 0} true;
    $i15 := $and.i64($i14, 1);
    goto corral_source_split_8434;

  corral_source_split_8434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1164} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 1165} {:cexpr "tmp"} boogie_si_record_i64($i16);
    goto corral_source_split_8435;

  corral_source_split_8435:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_8436;

  corral_source_split_8436:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1167} $i18 := mxl111sf_lgdt3305_frontend_attach($p0, 0);
    call {:si_unique_call 1168} {:cexpr "ret"} boogie_si_record_i32($i18);
    goto corral_source_split_8441;

  corral_source_split_8441:
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i18, 0);
    goto corral_source_split_8442;

  corral_source_split_8442:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1169} $i21 := mxl111sf_attach_demod($p0, 1);
    call {:si_unique_call 1170} {:cexpr "ret"} boogie_si_record_i32($i21);
    goto corral_source_split_8448;

  corral_source_split_8448:
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i21, 0);
    goto corral_source_split_8449;

  corral_source_split_8449:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1171} $i23 := mxl111sf_lg2161_ep6_frontend_attach($p0, 2);
    call {:si_unique_call 1172} {:cexpr "ret"} boogie_si_record_i32($i23);
    goto corral_source_split_8453;

  corral_source_split_8453:
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i23, 0);
    goto corral_source_split_8454;

  corral_source_split_8454:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i20 := $i23;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_8446;

  corral_source_split_8446:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  $bb11:
    assume $i24 == 1;
    goto corral_source_split_8456;

  corral_source_split_8456:
    assume {:verifier.code 0} true;
    $i20 := $i23;
    goto $bb6;

  $bb8:
    assume $i22 == 1;
    goto corral_source_split_8451;

  corral_source_split_8451:
    assume {:verifier.code 0} true;
    $i20 := $i21;
    goto $bb6;

  $bb4:
    assume $i19 == 1;
    goto corral_source_split_8444;

  corral_source_split_8444:
    assume {:verifier.code 0} true;
    $i20 := $i18;
    goto $bb6;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_8438;

  corral_source_split_8438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1166} __dynamic_pr_debug.ref.ref.ref($p1, .str.98, .str.111);
    goto corral_source_split_8439;

  corral_source_split_8439:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mxl111sf_streaming_ctrl_mercury: ref;

axiom mxl111sf_streaming_ctrl_mercury == $sub.ref(0, 395500);

procedure mxl111sf_streaming_ctrl_mercury($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.15, $M.7, $CurrAddr;



implementation mxl111sf_streaming_ctrl_mercury($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i24;
  var $i10: i24;
  var $i11: i24;
  var $p12: ref;
  var $p13: ref;
  var $i14: i8;
  var $i15: i64;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $i39: i32;
  var $i40: i1;
  var $i41: i32;
  var $i25: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1173} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 1174} {:cexpr "mxl111sf_streaming_ctrl_mercury:arg:onoff"} boogie_si_record_i32($i1);
    goto corral_source_split_8458;

  corral_source_split_8458:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8459;

  corral_source_split_8459:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p3, .str.2);
    goto corral_source_split_8460;

  corral_source_split_8460:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8461;

  corral_source_split_8461:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p4, .str.110);
    goto corral_source_split_8462;

  corral_source_split_8462:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8463;

  corral_source_split_8463:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p5, .str.3);
    goto corral_source_split_8464;

  corral_source_split_8464:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8465;

  corral_source_split_8465:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p6, .str.96);
    goto corral_source_split_8466;

  corral_source_split_8466:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8467;

  corral_source_split_8467:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_8468;

  corral_source_split_8468:
    assume {:verifier.code 0} true;
    $i9 := $load.i24($M.5, $p8);
    goto corral_source_split_8469;

  corral_source_split_8469:
    assume {:verifier.code 0} true;
    $i10 := $and.i24($i9, $sub.i24(0, 262144));
    goto corral_source_split_8470;

  corral_source_split_8470:
    assume {:verifier.code 0} true;
    $i11 := $or.i24($i10, 1265);
    goto corral_source_split_8471;

  corral_source_split_8471:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p8, $i11);
    goto corral_source_split_8472;

  corral_source_split_8472:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8473;

  corral_source_split_8473:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p12, 0);
    goto corral_source_split_8474;

  corral_source_split_8474:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8475;

  corral_source_split_8475:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.6, $p13);
    goto corral_source_split_8476;

  corral_source_split_8476:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i64($i14);
    goto corral_source_split_8477;

  corral_source_split_8477:
    assume {:verifier.code 0} true;
    $i16 := $and.i64($i15, 1);
    goto corral_source_split_8478;

  corral_source_split_8478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1175} $i17 := ldv__builtin_expect($i16, 0);
    call {:si_unique_call 1176} {:cexpr "tmp"} boogie_si_record_i64($i17);
    goto corral_source_split_8479;

  corral_source_split_8479:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_8480;

  corral_source_split_8480:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 1584)), $mul.ref(1576, 1));
    goto corral_source_split_8487;

  corral_source_split_8487:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.8, $p21);
    goto corral_source_split_8488;

  corral_source_split_8488:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 0);
    goto corral_source_split_8489;

  corral_source_split_8489:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i23 == 1);
    goto corral_source_split_8494;

  corral_source_split_8494:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 1584)), $mul.ref(1576, 1));
    goto corral_source_split_8495;

  corral_source_split_8495:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.8, $p26);
    goto corral_source_split_8496;

  corral_source_split_8496:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 1);
    goto corral_source_split_8497;

  corral_source_split_8497:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i28 == 1);
    goto corral_source_split_8504;

  corral_source_split_8504:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 1584)), $mul.ref(1576, 1));
    goto corral_source_split_8505;

  corral_source_split_8505:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.8, $p30);
    goto corral_source_split_8506;

  corral_source_split_8506:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i31, 2);
    goto corral_source_split_8507;

  corral_source_split_8507:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 1584)), $mul.ref(1576, 1));
    goto corral_source_split_8513;

  corral_source_split_8513:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.8, $p36);
    goto corral_source_split_8514;

  corral_source_split_8514:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 2);
    goto corral_source_split_8515;

  corral_source_split_8515:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i38 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i25 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_8499;

  corral_source_split_8499:
    assume {:verifier.code 0} true;
    $r := $i25;
    return;

  $bb14:
    assume $i38 == 1;
    goto corral_source_split_8520;

  corral_source_split_8520:
    assume {:verifier.code 0} true;
    $i39 := $M.31;
    goto corral_source_split_8521;

  corral_source_split_8521:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i39, 0);
    goto corral_source_split_8522;

  corral_source_split_8522:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb16;

  $bb17:
    assume $i40 == 1;
    goto corral_source_split_8524;

  corral_source_split_8524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1184} $i41 := mxl111sf_ep6_streaming_ctrl($p0, $i1);
    call {:si_unique_call 1185} {:cexpr "tmp___3"} boogie_si_record_i32($i41);
    goto corral_source_split_8525;

  corral_source_split_8525:
    assume {:verifier.code 0} true;
    $i25 := $i41;
    goto $bb6;

  $bb9:
    assume $i32 == 1;
    goto corral_source_split_8509;

  corral_source_split_8509:
    assume {:verifier.code 0} true;
    $i33 := $M.31;
    goto corral_source_split_8510;

  corral_source_split_8510:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_8511;

  corral_source_split_8511:
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb11;

  $bb12:
    assume $i34 == 1;
    goto corral_source_split_8517;

  corral_source_split_8517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1182} $i35 := mxl111sf_ep5_streaming_ctrl($p0, $i1);
    call {:si_unique_call 1183} {:cexpr "tmp___2"} boogie_si_record_i32($i35);
    goto corral_source_split_8518;

  corral_source_split_8518:
    assume {:verifier.code 0} true;
    $i25 := $i35;
    goto $bb6;

  $bb7:
    assume $i28 == 1;
    goto corral_source_split_8501;

  corral_source_split_8501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1180} $i29 := mxl111sf_ep4_streaming_ctrl($p0, $i1);
    call {:si_unique_call 1181} {:cexpr "tmp___1"} boogie_si_record_i32($i29);
    goto corral_source_split_8502;

  corral_source_split_8502:
    assume {:verifier.code 0} true;
    $i25 := $i29;
    goto $bb6;

  $bb4:
    assume $i23 == 1;
    goto corral_source_split_8491;

  corral_source_split_8491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1178} $i24 := mxl111sf_ep6_streaming_ctrl($p0, $i1);
    call {:si_unique_call 1179} {:cexpr "tmp___0"} boogie_si_record_i32($i24);
    goto corral_source_split_8492;

  corral_source_split_8492:
    assume {:verifier.code 0} true;
    $i25 := $i24;
    goto $bb6;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_8482;

  corral_source_split_8482:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 1584)), $mul.ref(1576, 1));
    goto corral_source_split_8483;

  corral_source_split_8483:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.8, $p19);
    goto corral_source_split_8484;

  corral_source_split_8484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1177} __dynamic_pr_debug.ref.ref.ref.i32.i32($p2, .str.96, .str.110, $i20, $i1);
    goto corral_source_split_8485;

  corral_source_split_8485:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mxl111sf_get_stream_config_mercury: ref;

axiom mxl111sf_get_stream_config_mercury == $sub.ref(0, 396532);

procedure mxl111sf_get_stream_config_mercury($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr;



implementation mxl111sf_get_stream_config_mercury($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i24;
  var $i11: i24;
  var $i12: i24;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $i42: i32;
  var $i43: i1;
  var $i44: i32;
  var $i45: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1186} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_8527;

  corral_source_split_8527:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8528;

  corral_source_split_8528:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p4, .str.2);
    goto corral_source_split_8529;

  corral_source_split_8529:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8530;

  corral_source_split_8530:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p5, .str.113);
    goto corral_source_split_8531;

  corral_source_split_8531:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8532;

  corral_source_split_8532:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p6, .str.3);
    goto corral_source_split_8533;

  corral_source_split_8533:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8534;

  corral_source_split_8534:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p7, .str.90);
    goto corral_source_split_8535;

  corral_source_split_8535:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8536;

  corral_source_split_8536:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_8537;

  corral_source_split_8537:
    assume {:verifier.code 0} true;
    $i10 := $load.i24($M.5, $p9);
    goto corral_source_split_8538;

  corral_source_split_8538:
    assume {:verifier.code 0} true;
    $i11 := $and.i24($i10, $sub.i24(0, 262144));
    goto corral_source_split_8539;

  corral_source_split_8539:
    assume {:verifier.code 0} true;
    $i12 := $or.i24($i11, 1233);
    goto corral_source_split_8540;

  corral_source_split_8540:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p9, $i12);
    goto corral_source_split_8541;

  corral_source_split_8541:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8542;

  corral_source_split_8542:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p13, 0);
    goto corral_source_split_8543;

  corral_source_split_8543:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8544;

  corral_source_split_8544:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.6, $p14);
    goto corral_source_split_8545;

  corral_source_split_8545:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i64($i15);
    goto corral_source_split_8546;

  corral_source_split_8546:
    assume {:verifier.code 0} true;
    $i17 := $and.i64($i16, 1);
    goto corral_source_split_8547;

  corral_source_split_8547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1187} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 1188} {:cexpr "tmp"} boogie_si_record_i64($i18);
    goto corral_source_split_8548;

  corral_source_split_8548:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_8549;

  corral_source_split_8549:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 1584)), $mul.ref(1576, 1));
    goto corral_source_split_8556;

  corral_source_split_8556:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.8, $p22);
    goto corral_source_split_8557;

  corral_source_split_8557:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_8558;

  corral_source_split_8558:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i24 == 1);
    goto corral_source_split_8565;

  corral_source_split_8565:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 1584)), $mul.ref(1576, 1));
    goto corral_source_split_8566;

  corral_source_split_8566:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.8, $p27);
    goto corral_source_split_8567;

  corral_source_split_8567:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 1);
    goto corral_source_split_8568;

  corral_source_split_8568:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i29 == 1);
    goto corral_source_split_8580;

  corral_source_split_8580:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 1584)), $mul.ref(1576, 1));
    goto corral_source_split_8581;

  corral_source_split_8581:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.8, $p32);
    goto corral_source_split_8582;

  corral_source_split_8582:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 2);
    goto corral_source_split_8583;

  corral_source_split_8583:
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 1584)), $mul.ref(1576, 1));
    goto corral_source_split_8594;

  corral_source_split_8594:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.8, $p39);
    goto corral_source_split_8595;

  corral_source_split_8595:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i40, 2);
    goto corral_source_split_8596;

  corral_source_split_8596:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb25:
    assume $i41 == 1;
    goto corral_source_split_8608;

  corral_source_split_8608:
    assume {:verifier.code 0} true;
    $i42 := $M.31;
    goto corral_source_split_8609;

  corral_source_split_8609:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i42, 0);
    goto corral_source_split_8610;

  corral_source_split_8610:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i43 == 1);
    goto $bb27;

  $bb28:
    assume $i43 == 1;
    goto corral_source_split_8612;

  corral_source_split_8612:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p1, 2);
    goto corral_source_split_8613;

  corral_source_split_8613:
    assume {:verifier.code 0} true;
    $i44 := $M.14;
    goto corral_source_split_8614;

  corral_source_split_8614:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 0);
    goto corral_source_split_8615;

  corral_source_split_8615:
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i45 == 1);
    goto corral_source_split_8620;

  corral_source_split_8620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1197} mxl111sf_stream_config_bulk($p2, 6);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb30:
    assume $i45 == 1;
    goto corral_source_split_8617;

  corral_source_split_8617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1196} mxl111sf_stream_config_isoc($p2, 6, 24, 3072);
    goto corral_source_split_8618;

  corral_source_split_8618:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb16:
    assume $i34 == 1;
    goto corral_source_split_8590;

  corral_source_split_8590:
    assume {:verifier.code 0} true;
    $i35 := $M.31;
    goto corral_source_split_8591;

  corral_source_split_8591:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_8592;

  corral_source_split_8592:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb18;

  $bb19:
    assume $i36 == 1;
    goto corral_source_split_8598;

  corral_source_split_8598:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p1, 2);
    goto corral_source_split_8599;

  corral_source_split_8599:
    assume {:verifier.code 0} true;
    $i37 := $M.14;
    goto corral_source_split_8600;

  corral_source_split_8600:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_8601;

  corral_source_split_8601:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i38 == 1);
    goto corral_source_split_8606;

  corral_source_split_8606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1195} mxl111sf_stream_config_bulk($p2, 5);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb21:
    assume $i38 == 1;
    goto corral_source_split_8603;

  corral_source_split_8603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1194} mxl111sf_stream_config_isoc($p2, 5, 96, 200);
    goto corral_source_split_8604;

  corral_source_split_8604:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb10:
    assume $i29 == 1;
    goto corral_source_split_8575;

  corral_source_split_8575:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p1, 0);
    goto corral_source_split_8576;

  corral_source_split_8576:
    assume {:verifier.code 0} true;
    $i30 := $M.14;
    goto corral_source_split_8577;

  corral_source_split_8577:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_8578;

  corral_source_split_8578:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i31 == 1);
    goto corral_source_split_8588;

  corral_source_split_8588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1193} mxl111sf_stream_config_bulk($p2, 4);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb12:
    assume $i31 == 1;
    goto corral_source_split_8585;

  corral_source_split_8585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1192} mxl111sf_stream_config_isoc($p2, 4, 96, 564);
    goto corral_source_split_8586;

  corral_source_split_8586:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb4:
    assume $i24 == 1;
    goto corral_source_split_8560;

  corral_source_split_8560:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p1, 0);
    goto corral_source_split_8561;

  corral_source_split_8561:
    assume {:verifier.code 0} true;
    $i25 := $M.14;
    goto corral_source_split_8562;

  corral_source_split_8562:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_8563;

  corral_source_split_8563:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i26 == 1);
    goto corral_source_split_8573;

  corral_source_split_8573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1191} mxl111sf_stream_config_bulk($p2, 6);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i26 == 1;
    goto corral_source_split_8570;

  corral_source_split_8570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1190} mxl111sf_stream_config_isoc($p2, 6, 24, 3072);
    goto corral_source_split_8571;

  corral_source_split_8571:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_8551;

  corral_source_split_8551:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 1584)), $mul.ref(1576, 1));
    goto corral_source_split_8552;

  corral_source_split_8552:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.8, $p20);
    goto corral_source_split_8553;

  corral_source_split_8553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1189} __dynamic_pr_debug.ref.ref.ref.i32($p3, .str.90, .str.113, $i21);
    goto corral_source_split_8554;

  corral_source_split_8554:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mxl111sf_lg2161_ep6_frontend_attach: ref;

axiom mxl111sf_lg2161_ep6_frontend_attach == $sub.ref(0, 397564);

procedure mxl111sf_lg2161_ep6_frontend_attach($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.15, $M.18, $M.19, $M.20, $M.21, $M.22, $CurrAddr, $M.23, $M.24, $M.25;



implementation mxl111sf_lg2161_ep6_frontend_attach($p0: ref, $i1: i8) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var $i6: i64;
  var $i7: i64;
  var $i8: i64;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i24;
  var $i25: i24;
  var $i26: i24;
  var $p27: ref;
  var $p28: ref;
  var $i29: i8;
  var $i30: i64;
  var $i31: i64;
  var $i32: i64;
  var $i33: i1;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $i46: i32;
  var $i47: i1;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i32;
  var $i56: i1;
  var $i57: i32;
  var $i58: i1;
  var $i59: i32;
  var $i60: i32;
  var $i61: i1;
  var $i63: i1;
  var $i65: i32;
  var $i66: i1;
  var $i67: i32;
  var $i68: i1;
  var $i69: i32;
  var $i70: i32;
  var $i71: i1;
  var $i73: i1;
  var $p74: ref;
  var $i75: i32;
  var $i76: i32;
  var $i77: i1;
  var $i78: i32;
  var $i79: i1;
  var $i80: i32;
  var $i81: i32;
  var $i82: i1;
  var $i84: i1;
  var $i85: i32;
  var $i86: i1;
  var $i87: i32;
  var $i88: i1;
  var $i89: i32;
  var $i90: i32;
  var $i91: i1;
  var $i93: i1;
  var $i94: i32;
  var $i95: i1;
  var $i96: i32;
  var $i97: i1;
  var $i98: i32;
  var $i99: i32;
  var $i100: i1;
  var $i102: i1;
  var $i103: i32;
  var $i104: i1;
  var $i105: i32;
  var $i106: i1;
  var $i107: i32;
  var $i108: i32;
  var $i109: i1;
  var $i111: i1;
  var $p112: ref;
  var $i113: i32;
  var $i114: i32;
  var $i115: i1;
  var $i116: i32;
  var $i117: i1;
  var $i118: i32;
  var $i119: i32;
  var $i120: i1;
  var $i122: i1;
  var $i123: i32;
  var $i124: i1;
  var $i125: i32;
  var $i126: i1;
  var $i127: i32;
  var $i128: i32;
  var $i129: i1;
  var $i131: i1;
  var $i132: i32;
  var $i133: i1;
  var $i135: i32;
  var $i136: i1;
  var $i137: i32;
  var $i138: i1;
  var $i139: i32;
  var $i140: i32;
  var $i141: i1;
  var $i143: i1;
  var $i145: i32;
  var $i146: i1;
  var $i148: i32;
  var $i149: i1;
  var $i150: i32;
  var $i151: i1;
  var $i152: i32;
  var $i153: i32;
  var $i154: i1;
  var $i156: i1;
  var $p157: ref;
  var $p158: ref;
  var $i159: i64;
  var $i160: i1;
  var $i161: i32;
  var $i162: i64;
  var $p163: ref;
  var $i164: i1;
  var $p167: ref;
  var $p165: ref;
  var $i169: i64;
  var $i170: i1;
  var $p171: ref;
  var $i172: i8;
  var $i173: i32;
  var $i174: i1;
  var $p175: ref;
  var $p176: ref;
  var $p177: ref;
  var $p178: ref;
  var $i179: i64;
  var $i180: i1;
  var $p181: ref;
  var $i184: i32;
  var $i185: i64;
  var $p187: ref;
  var $i188: i32;
  var $i189: i64;
  var $p191: ref;
  var $p192: ref;
  var $i193: i64;
  var $i194: i1;
  var $p195: ref;
  var $i196: i8;
  var $i197: i32;
  var $i198: i32;
  var $i199: i8;
  var $p200: ref;
  var $i201: i32;
  var $i202: i64;
  var $p204: ref;
  var $p205: ref;
  var $p207: ref;
  var $p208: ref;
  var $p209: ref;
  var $i210: i32;
  var $i211: i64;
  var $p213: ref;
  var $p214: ref;
  var $p216: ref;
  var $i217: i32;
  var $i218: i64;
  var $p220: ref;
  var $p221: ref;
  var $p223: ref;
  var $p224: ref;
  var $p225: ref;
  var $i226: i32;
  var $i227: i64;
  var $p229: ref;
  var $p230: ref;
  var $p232: ref;
  var $i64: i32;
  var $i233: i32;
  var vslice_dummy_var_309: i32;
  var vslice_dummy_var_310: i32;
  var vslice_dummy_var_311: i32;
  var vslice_dummy_var_312: i32;
  var vslice_dummy_var_313: i32;
  var vslice_dummy_var_314: i32;
  var vslice_dummy_var_315: i32;
  var vslice_dummy_var_316: i32;
  var vslice_dummy_var_317: i32;
  var vslice_dummy_var_318: i32;
  var vslice_dummy_var_319: i32;
  var vslice_dummy_var_320: i32;
  var vslice_dummy_var_321: i32;
  var vslice_dummy_var_322: i32;
  var vslice_dummy_var_323: i32;
  var vslice_dummy_var_324: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1198} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 1199} {:cexpr "mxl111sf_lg2161_ep6_frontend_attach:arg:fe_id"} boogie_si_record_i8($i1);
    goto corral_source_split_8622;

  corral_source_split_8622:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_8623;

  corral_source_split_8623:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 2400)), $mul.ref(320, 1));
    goto corral_source_split_8624;

  corral_source_split_8624:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.7, $p4);
    goto corral_source_split_8625;

  corral_source_split_8625:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i64($i5);
    goto corral_source_split_8626;

  corral_source_split_8626:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i6, 2400);
    goto corral_source_split_8627;

  corral_source_split_8627:
    assume {:verifier.code 0} true;
    $i8 := $add.i64($i7, 2344);
    goto corral_source_split_8628;

  corral_source_split_8628:
    assume {:verifier.code 0} true;
    $i9 := $sub.i64(0, $i8);
    goto corral_source_split_8629;

  corral_source_split_8629:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p3, $mul.ref($i9, 7456));
    goto corral_source_split_8630;

  corral_source_split_8630:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref($i9, 7456)), $mul.ref(7448, 1));
    goto corral_source_split_8631;

  corral_source_split_8631:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.7, $p11);
    goto corral_source_split_8632;

  corral_source_split_8632:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_8633;

  corral_source_split_8633:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 368)), $mul.ref(272, 1));
    goto corral_source_split_8634;

  corral_source_split_8634:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_8635;

  corral_source_split_8635:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i64($i1);
    goto corral_source_split_8636;

  corral_source_split_8636:
    assume {:verifier.code 0} true;
    goto corral_source_split_8637;

  corral_source_split_8637:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8638;

  corral_source_split_8638:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p18, .str.2);
    goto corral_source_split_8639;

  corral_source_split_8639:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8640;

  corral_source_split_8640:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p19, .str.112);
    goto corral_source_split_8641;

  corral_source_split_8641:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8642;

  corral_source_split_8642:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p20, .str.3);
    goto corral_source_split_8643;

  corral_source_split_8643:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8644;

  corral_source_split_8644:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p21, .str.77);
    goto corral_source_split_8645;

  corral_source_split_8645:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8646;

  corral_source_split_8646:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_8647;

  corral_source_split_8647:
    assume {:verifier.code 0} true;
    $i24 := $load.i24($M.5, $p23);
    goto corral_source_split_8648;

  corral_source_split_8648:
    assume {:verifier.code 0} true;
    $i25 := $and.i24($i24, $sub.i24(0, 262144));
    goto corral_source_split_8649;

  corral_source_split_8649:
    assume {:verifier.code 0} true;
    $i26 := $or.i24($i25, 672);
    goto corral_source_split_8650;

  corral_source_split_8650:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p23, $i26);
    goto corral_source_split_8651;

  corral_source_split_8651:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8652;

  corral_source_split_8652:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p27, 0);
    goto corral_source_split_8653;

  corral_source_split_8653:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8654;

  corral_source_split_8654:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.6, $p28);
    goto corral_source_split_8655;

  corral_source_split_8655:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i64($i29);
    goto corral_source_split_8656;

  corral_source_split_8656:
    assume {:verifier.code 0} true;
    $i31 := $and.i64($i30, 1);
    goto corral_source_split_8657;

  corral_source_split_8657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1200} $i32 := ldv__builtin_expect($i31, 0);
    call {:si_unique_call 1201} {:cexpr "tmp"} boogie_si_record_i64($i32);
    goto corral_source_split_8658;

  corral_source_split_8658:
    assume {:verifier.code 0} true;
    $i33 := $ne.i64($i32, 0);
    goto corral_source_split_8659;

  corral_source_split_8659:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p13, $mul.ref(0, 368)), $mul.ref(0, 1));
    goto corral_source_split_8664;

  corral_source_split_8664:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p34, $p10);
    goto corral_source_split_8665;

  corral_source_split_8665:
    assume {:verifier.code 0} true;
    $i35 := $M.14;
    goto corral_source_split_8666;

  corral_source_split_8666:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_8667;

  corral_source_split_8667:
    assume {:verifier.code 0} true;
    $i37 := (if $i36 == 1 then 2 else 1);
    goto corral_source_split_8668;

  corral_source_split_8668:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p15, $mul.ref($i16, 32)), $mul.ref(0, 1));
    goto corral_source_split_8669;

  corral_source_split_8669:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p38, $i37);
    goto corral_source_split_8670;

  corral_source_split_8670:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p15, $mul.ref($i16, 32)), $mul.ref(0, 1));
    goto corral_source_split_8671;

  corral_source_split_8671:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.7, $p39);
    goto corral_source_split_8672;

  corral_source_split_8672:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p13, $mul.ref(0, 368)), $mul.ref(20, 1));
    goto corral_source_split_8673;

  corral_source_split_8673:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p41, $i40);
    goto corral_source_split_8674;

  corral_source_split_8674:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p3, $mul.ref($i9, 7456)), $mul.ref(40, 1));
    goto corral_source_split_8675;

  corral_source_split_8675:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.7, $p42);
    goto corral_source_split_8676;

  corral_source_split_8676:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p13, $mul.ref(0, 368)), $mul.ref(20, 1));
    goto corral_source_split_8677;

  corral_source_split_8677:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.7, $p44);
    goto corral_source_split_8678;

  corral_source_split_8678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1203} $i46 := usb_set_interface($p43, 0, $i45);
    call {:si_unique_call 1204} {:cexpr "tmp___0"} boogie_si_record_i32($i46);
    goto corral_source_split_8679;

  corral_source_split_8679:
    assume {:verifier.code 0} true;
    $i47 := $slt.i32($i46, 0);
    goto corral_source_split_8680;

  corral_source_split_8680:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p13, $mul.ref(0, 368)), $mul.ref(24, 1));
    goto corral_source_split_8685;

  corral_source_split_8685:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p49, 1);
    goto corral_source_split_8686;

  corral_source_split_8686:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p13, $mul.ref(0, 368)), $mul.ref(24, 1));
    goto corral_source_split_8687;

  corral_source_split_8687:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.7, $p50);
    goto corral_source_split_8688;

  corral_source_split_8688:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p15, $mul.ref($i16, 32)), $mul.ref(4, 1));
    goto corral_source_split_8689;

  corral_source_split_8689:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p52, $i51);
    goto corral_source_split_8690;

  corral_source_split_8690:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p15, $mul.ref($i16, 32)), $mul.ref(8, 1));
    goto corral_source_split_8691;

  corral_source_split_8691:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p53, 0);
    goto corral_source_split_8692;

  corral_source_split_8692:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p15, $mul.ref($i16, 32)), $mul.ref(12, 1));
    goto corral_source_split_8693;

  corral_source_split_8693:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p54, 0);
    goto corral_source_split_8694;

  corral_source_split_8694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1206} $i55 := mxl1x1sf_soft_reset($p13);
    call {:si_unique_call 1207} {:cexpr "ret"} boogie_si_record_i32($i55);
    goto corral_source_split_8695;

  corral_source_split_8695:
    assume {:verifier.code 0} true;
    $i56 := $slt.i32($i55, 0);
    goto corral_source_split_8696;

  corral_source_split_8696:
    assume {:verifier.code 0} true;
    $i57 := $zext.i1.i32($i56);
    call {:si_unique_call 1208} {:cexpr "__ret"} boogie_si_record_i32($i57);
    goto corral_source_split_8697;

  corral_source_split_8697:
    assume {:verifier.code 0} true;
    $i58 := $ne.i32($i57, 0);
    goto corral_source_split_8698;

  corral_source_split_8698:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i58 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i63 := $ne.i32($i57, 0);
    goto corral_source_split_8708;

  corral_source_split_8708:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1210} $i65 := mxl111sf_init_tuner_demod($p13);
    call {:si_unique_call 1211} {:cexpr "ret"} boogie_si_record_i32($i65);
    goto corral_source_split_8714;

  corral_source_split_8714:
    assume {:verifier.code 0} true;
    $i66 := $slt.i32($i65, 0);
    goto corral_source_split_8715;

  corral_source_split_8715:
    assume {:verifier.code 0} true;
    $i67 := $zext.i1.i32($i66);
    call {:si_unique_call 1212} {:cexpr "__ret___0"} boogie_si_record_i32($i67);
    goto corral_source_split_8716;

  corral_source_split_8716:
    assume {:verifier.code 0} true;
    $i68 := $ne.i32($i67, 0);
    goto corral_source_split_8717;

  corral_source_split_8717:
    assume {:verifier.code 0} true;
    assume {:branchcond $i68} true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i68 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i73 := $ne.i32($i67, 0);
    goto corral_source_split_8727;

  corral_source_split_8727:
    assume {:verifier.code 0} true;
    assume {:branchcond $i73} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p15, $mul.ref($i16, 32)), $mul.ref(8, 1));
    goto corral_source_split_8731;

  corral_source_split_8731:
    assume {:verifier.code 0} true;
    $i75 := $load.i32($M.7, $p74);
    goto corral_source_split_8732;

  corral_source_split_8732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1214} $i76 := mxl1x1sf_set_device_mode($p13, $i75);
    call {:si_unique_call 1215} {:cexpr "ret"} boogie_si_record_i32($i76);
    goto corral_source_split_8733;

  corral_source_split_8733:
    assume {:verifier.code 0} true;
    $i77 := $slt.i32($i76, 0);
    goto corral_source_split_8734;

  corral_source_split_8734:
    assume {:verifier.code 0} true;
    $i78 := $zext.i1.i32($i77);
    call {:si_unique_call 1216} {:cexpr "__ret___1"} boogie_si_record_i32($i78);
    goto corral_source_split_8735;

  corral_source_split_8735:
    assume {:verifier.code 0} true;
    $i79 := $ne.i32($i78, 0);
    goto corral_source_split_8736;

  corral_source_split_8736:
    assume {:verifier.code 0} true;
    assume {:branchcond $i79} true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i79 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i84 := $ne.i32($i78, 0);
    goto corral_source_split_8746;

  corral_source_split_8746:
    assume {:verifier.code 0} true;
    assume {:branchcond $i84} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1218} $i85 := mxl111sf_enable_usb_output($p13);
    call {:si_unique_call 1219} {:cexpr "ret"} boogie_si_record_i32($i85);
    goto corral_source_split_8750;

  corral_source_split_8750:
    assume {:verifier.code 0} true;
    $i86 := $slt.i32($i85, 0);
    goto corral_source_split_8751;

  corral_source_split_8751:
    assume {:verifier.code 0} true;
    $i87 := $zext.i1.i32($i86);
    call {:si_unique_call 1220} {:cexpr "__ret___2"} boogie_si_record_i32($i87);
    goto corral_source_split_8752;

  corral_source_split_8752:
    assume {:verifier.code 0} true;
    $i88 := $ne.i32($i87, 0);
    goto corral_source_split_8753;

  corral_source_split_8753:
    assume {:verifier.code 0} true;
    assume {:branchcond $i88} true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i88 == 1);
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i93 := $ne.i32($i87, 0);
    goto corral_source_split_8763;

  corral_source_split_8763:
    assume {:verifier.code 0} true;
    assume {:branchcond $i93} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1222} $i94 := mxl1x1sf_top_master_ctrl($p13, 1);
    call {:si_unique_call 1223} {:cexpr "ret"} boogie_si_record_i32($i94);
    goto corral_source_split_8767;

  corral_source_split_8767:
    assume {:verifier.code 0} true;
    $i95 := $slt.i32($i94, 0);
    goto corral_source_split_8768;

  corral_source_split_8768:
    assume {:verifier.code 0} true;
    $i96 := $zext.i1.i32($i95);
    call {:si_unique_call 1224} {:cexpr "__ret___3"} boogie_si_record_i32($i96);
    goto corral_source_split_8769;

  corral_source_split_8769:
    assume {:verifier.code 0} true;
    $i97 := $ne.i32($i96, 0);
    goto corral_source_split_8770;

  corral_source_split_8770:
    assume {:verifier.code 0} true;
    assume {:branchcond $i97} true;
    goto $bb44, $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    assume !($i97 == 1);
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $i102 := $ne.i32($i96, 0);
    goto corral_source_split_8780;

  corral_source_split_8780:
    assume {:verifier.code 0} true;
    assume {:branchcond $i102} true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1226} $i103 := mxl111sf_init_port_expander($p13);
    call {:si_unique_call 1227} {:cexpr "ret"} boogie_si_record_i32($i103);
    goto corral_source_split_8784;

  corral_source_split_8784:
    assume {:verifier.code 0} true;
    $i104 := $slt.i32($i103, 0);
    goto corral_source_split_8785;

  corral_source_split_8785:
    assume {:verifier.code 0} true;
    $i105 := $zext.i1.i32($i104);
    call {:si_unique_call 1228} {:cexpr "__ret___4"} boogie_si_record_i32($i105);
    goto corral_source_split_8786;

  corral_source_split_8786:
    assume {:verifier.code 0} true;
    $i106 := $ne.i32($i105, 0);
    goto corral_source_split_8787;

  corral_source_split_8787:
    assume {:verifier.code 0} true;
    assume {:branchcond $i106} true;
    goto $bb53, $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    assume !($i106 == 1);
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $i111 := $ne.i32($i105, 0);
    goto corral_source_split_8797;

  corral_source_split_8797:
    assume {:verifier.code 0} true;
    assume {:branchcond $i111} true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p13, $mul.ref(0, 368)), $mul.ref(24, 1));
    goto corral_source_split_8801;

  corral_source_split_8801:
    assume {:verifier.code 0} true;
    $i113 := $load.i32($M.7, $p112);
    goto corral_source_split_8802;

  corral_source_split_8802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1230} $i114 := mxl111sf_gpio_mode_switch($p13, $i113);
    call {:si_unique_call 1231} {:cexpr "ret"} boogie_si_record_i32($i114);
    goto corral_source_split_8803;

  corral_source_split_8803:
    assume {:verifier.code 0} true;
    $i115 := $slt.i32($i114, 0);
    goto corral_source_split_8804;

  corral_source_split_8804:
    assume {:verifier.code 0} true;
    $i116 := $zext.i1.i32($i115);
    call {:si_unique_call 1232} {:cexpr "__ret___5"} boogie_si_record_i32($i116);
    goto corral_source_split_8805;

  corral_source_split_8805:
    assume {:verifier.code 0} true;
    $i117 := $ne.i32($i116, 0);
    goto corral_source_split_8806;

  corral_source_split_8806:
    assume {:verifier.code 0} true;
    assume {:branchcond $i117} true;
    goto $bb62, $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    assume !($i117 == 1);
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $i122 := $ne.i32($i116, 0);
    goto corral_source_split_8816;

  corral_source_split_8816:
    assume {:verifier.code 0} true;
    assume {:branchcond $i122} true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1234} $i123 := mxl1x1sf_get_chip_info($p13);
    call {:si_unique_call 1235} {:cexpr "___ret"} boogie_si_record_i32($i123);
    goto corral_source_split_8820;

  corral_source_split_8820:
    assume {:verifier.code 0} true;
    $i124 := $slt.i32($i123, 0);
    goto corral_source_split_8821;

  corral_source_split_8821:
    assume {:verifier.code 0} true;
    $i125 := $zext.i1.i32($i124);
    call {:si_unique_call 1236} {:cexpr "__ret___7"} boogie_si_record_i32($i125);
    goto corral_source_split_8822;

  corral_source_split_8822:
    assume {:verifier.code 0} true;
    $i126 := $ne.i32($i125, 0);
    goto corral_source_split_8823;

  corral_source_split_8823:
    assume {:verifier.code 0} true;
    assume {:branchcond $i126} true;
    goto $bb71, $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    assume !($i126 == 1);
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $i131 := $ne.i32($i125, 0);
    goto corral_source_split_8833;

  corral_source_split_8833:
    assume {:verifier.code 0} true;
    assume {:branchcond $i131} true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i131 == 1);
    assume {:verifier.code 0} true;
    $i148 := $i123;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    goto corral_source_split_8867;

  corral_source_split_8867:
    assume {:verifier.code 0} true;
    $i149 := $slt.i32($i148, 0);
    goto corral_source_split_8868;

  corral_source_split_8868:
    assume {:verifier.code 0} true;
    $i150 := $zext.i1.i32($i149);
    call {:si_unique_call 1245} {:cexpr "__ret___8"} boogie_si_record_i32($i150);
    goto corral_source_split_8869;

  corral_source_split_8869:
    assume {:verifier.code 0} true;
    $i151 := $ne.i32($i150, 0);
    goto corral_source_split_8870;

  corral_source_split_8870:
    assume {:verifier.code 0} true;
    assume {:branchcond $i151} true;
    goto $bb95, $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    assume !($i151 == 1);
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    $i156 := $ne.i32($i150, 0);
    goto corral_source_split_8880;

  corral_source_split_8880:
    assume {:verifier.code 0} true;
    assume {:branchcond $i156} true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i156 == 1);
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1247} $p157 := __symbol_get(.str.104);
    goto corral_source_split_8884;

  corral_source_split_8884:
    assume {:verifier.code 0} true;
    $p158 := $bitcast.ref.ref($p157);
    goto corral_source_split_8885;

  corral_source_split_8885:
    assume {:verifier.code 0} true;
    $i159 := $p2i.ref.i64($p158);
    goto corral_source_split_8886;

  corral_source_split_8886:
    assume {:verifier.code 0} true;
    $i160 := $ne.i64($i159, 0);
    goto corral_source_split_8887;

  corral_source_split_8887:
    assume {:verifier.code 0} true;
    $i161 := $zext.i1.i32($i160);
    goto corral_source_split_8888;

  corral_source_split_8888:
    assume {:verifier.code 0} true;
    $i162 := $sext.i32.i64($i161);
    goto corral_source_split_8889;

  corral_source_split_8889:
    assume {:verifier.code 0} true;
    $p163 := $i2p.i64.ref($i162);
    goto corral_source_split_8890;

  corral_source_split_8890:
    assume {:verifier.code 0} true;
    $i164 := $ne.ref($p163, $0.ref);
    goto corral_source_split_8891;

  corral_source_split_8891:
    assume {:verifier.code 0} true;
    assume {:branchcond $i164} true;
    goto $bb104, $bb105;

  $bb105:
    assume !($i164 == 1);
    goto corral_source_split_8895;

  corral_source_split_8895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1248} vslice_dummy_var_323 := __request_module.i1.ref(1, .str.105);
    goto corral_source_split_8896;

  corral_source_split_8896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1249} $p167 := __symbol_get(.str.104);
    goto corral_source_split_8897;

  corral_source_split_8897:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p165 := $p167;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    goto corral_source_split_8899;

  corral_source_split_8899:
    assume {:verifier.code 0} true;
    $i169 := $p2i.ref.i64($p165);
    goto corral_source_split_8900;

  corral_source_split_8900:
    assume {:verifier.code 0} true;
    $i170 := $ne.i64($i169, 0);
    goto corral_source_split_8901;

  corral_source_split_8901:
    assume {:verifier.code 0} true;
    assume {:branchcond $i170} true;
    goto $bb107, $bb108;

  $bb108:
    assume !($i170 == 1);
    goto corral_source_split_8914;

  corral_source_split_8914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1251} vslice_dummy_var_324 := printk.ref(.str.106);
    assume {:verifier.code 0} true;
    $p181 := $0.ref;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    goto corral_source_split_8919;

  corral_source_split_8919:
    assume {:verifier.code 0} true;
    goto corral_source_split_8920;

  corral_source_split_8920:
    assume {:verifier.code 0} true;
    $i184 := $zext.i8.i32($i1);
    goto corral_source_split_8921;

  corral_source_split_8921:
    assume {:verifier.code 0} true;
    $i185 := $sext.i32.i64($i184);
    goto corral_source_split_8922;

  corral_source_split_8922:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2400)), $mul.ref(2328, 1)), $mul.ref($i185, 8));
    goto corral_source_split_8923;

  corral_source_split_8923:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p187, $p181);
    goto corral_source_split_8924;

  corral_source_split_8924:
    assume {:verifier.code 0} true;
    $i188 := $zext.i8.i32($i1);
    goto corral_source_split_8925;

  corral_source_split_8925:
    assume {:verifier.code 0} true;
    $i189 := $sext.i32.i64($i188);
    goto corral_source_split_8926;

  corral_source_split_8926:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2400)), $mul.ref(2328, 1)), $mul.ref($i189, 8));
    goto corral_source_split_8927;

  corral_source_split_8927:
    assume {:verifier.code 0} true;
    $p192 := $load.ref($M.7, $p191);
    goto corral_source_split_8928;

  corral_source_split_8928:
    assume {:verifier.code 0} true;
    $i193 := $p2i.ref.i64($p192);
    goto corral_source_split_8929;

  corral_source_split_8929:
    assume {:verifier.code 0} true;
    $i194 := $ne.i64($i193, 0);
    goto corral_source_split_8930;

  corral_source_split_8930:
    assume {:verifier.code 0} true;
    assume {:branchcond $i194} true;
    goto $bb113, $bb114;

  $bb114:
    assume !($i194 == 1);
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    $i64 := $sub.i32(0, 5);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_8712;

  corral_source_split_8712:
    assume {:verifier.code 0} true;
    $i233 := $i64;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    goto corral_source_split_8969;

  corral_source_split_8969:
    assume {:verifier.code 0} true;
    $r := $i233;
    return;

  $bb113:
    assume $i194 == 1;
    goto corral_source_split_8932;

  corral_source_split_8932:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($p13, $mul.ref(0, 368)), $mul.ref(264, 1));
    goto corral_source_split_8933;

  corral_source_split_8933:
    assume {:verifier.code 0} true;
    $i196 := $load.i8($M.7, $p195);
    goto corral_source_split_8934;

  corral_source_split_8934:
    assume {:verifier.code 0} true;
    $i197 := $zext.i8.i32($i196);
    goto corral_source_split_8935;

  corral_source_split_8935:
    assume {:verifier.code 0} true;
    $i198 := $add.i32($i197, 1);
    goto corral_source_split_8936;

  corral_source_split_8936:
    assume {:verifier.code 0} true;
    $i199 := $trunc.i32.i8($i198);
    goto corral_source_split_8937;

  corral_source_split_8937:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($p13, $mul.ref(0, 368)), $mul.ref(264, 1));
    goto corral_source_split_8938;

  corral_source_split_8938:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p200, $i199);
    goto corral_source_split_8939;

  corral_source_split_8939:
    assume {:verifier.code 0} true;
    $i201 := $zext.i8.i32($i1);
    goto corral_source_split_8940;

  corral_source_split_8940:
    assume {:verifier.code 0} true;
    $i202 := $sext.i32.i64($i201);
    goto corral_source_split_8941;

  corral_source_split_8941:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2400)), $mul.ref(2328, 1)), $mul.ref($i202, 8));
    goto corral_source_split_8942;

  corral_source_split_8942:
    assume {:verifier.code 0} true;
    $p205 := $load.ref($M.7, $p204);
    goto corral_source_split_8943;

  corral_source_split_8943:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($add.ref($p205, $mul.ref(0, 1584)), $mul.ref(0, 1)), $mul.ref(192, 1));
    goto corral_source_split_8944;

  corral_source_split_8944:
    assume {:verifier.code 0} true;
    $p208 := $load.ref($M.7, $p207);
    goto corral_source_split_8945;

  corral_source_split_8945:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($p15, $mul.ref($i16, 32)), $mul.ref(16, 1));
    goto corral_source_split_8946;

  corral_source_split_8946:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p209, $p208);
    goto corral_source_split_8947;

  corral_source_split_8947:
    assume {:verifier.code 0} true;
    $i210 := $zext.i8.i32($i1);
    goto corral_source_split_8948;

  corral_source_split_8948:
    assume {:verifier.code 0} true;
    $i211 := $sext.i32.i64($i210);
    goto corral_source_split_8949;

  corral_source_split_8949:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2400)), $mul.ref(2328, 1)), $mul.ref($i211, 8));
    goto corral_source_split_8950;

  corral_source_split_8950:
    assume {:verifier.code 0} true;
    $p214 := $load.ref($M.7, $p213);
    goto corral_source_split_8951;

  corral_source_split_8951:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($add.ref($p214, $mul.ref(0, 1584)), $mul.ref(0, 1)), $mul.ref(192, 1));
    goto corral_source_split_8952;

  corral_source_split_8952:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p216, mxl111sf_adap_fe_init);
    goto corral_source_split_8953;

  corral_source_split_8953:
    assume {:verifier.code 0} true;
    $i217 := $zext.i8.i32($i1);
    goto corral_source_split_8954;

  corral_source_split_8954:
    assume {:verifier.code 0} true;
    $i218 := $sext.i32.i64($i217);
    goto corral_source_split_8955;

  corral_source_split_8955:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2400)), $mul.ref(2328, 1)), $mul.ref($i218, 8));
    goto corral_source_split_8956;

  corral_source_split_8956:
    assume {:verifier.code 0} true;
    $p221 := $load.ref($M.7, $p220);
    goto corral_source_split_8957;

  corral_source_split_8957:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($add.ref($p221, $mul.ref(0, 1584)), $mul.ref(0, 1)), $mul.ref(200, 1));
    goto corral_source_split_8958;

  corral_source_split_8958:
    assume {:verifier.code 0} true;
    $p224 := $load.ref($M.7, $p223);
    goto corral_source_split_8959;

  corral_source_split_8959:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($p15, $mul.ref($i16, 32)), $mul.ref(24, 1));
    goto corral_source_split_8960;

  corral_source_split_8960:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p225, $p224);
    goto corral_source_split_8961;

  corral_source_split_8961:
    assume {:verifier.code 0} true;
    $i226 := $zext.i8.i32($i1);
    goto corral_source_split_8962;

  corral_source_split_8962:
    assume {:verifier.code 0} true;
    $i227 := $sext.i32.i64($i226);
    goto corral_source_split_8963;

  corral_source_split_8963:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2400)), $mul.ref(2328, 1)), $mul.ref($i227, 8));
    goto corral_source_split_8964;

  corral_source_split_8964:
    assume {:verifier.code 0} true;
    $p230 := $load.ref($M.7, $p229);
    goto corral_source_split_8965;

  corral_source_split_8965:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($add.ref($add.ref($p230, $mul.ref(0, 1584)), $mul.ref(0, 1)), $mul.ref(200, 1));
    goto corral_source_split_8966;

  corral_source_split_8966:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p232, mxl111sf_adap_fe_sleep);
    goto corral_source_split_8967;

  corral_source_split_8967:
    assume {:verifier.code 0} true;
    $i233 := 0;
    goto $bb115;

  $bb107:
    assume $i170 == 1;
    goto corral_source_split_8903;

  corral_source_split_8903:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p13, $mul.ref(0, 368)), $mul.ref(15, 1));
    goto corral_source_split_8904;

  corral_source_split_8904:
    assume {:verifier.code 0} true;
    $i172 := $load.i8($M.7, $p171);
    goto corral_source_split_8905;

  corral_source_split_8905:
    assume {:verifier.code 0} true;
    $i173 := $zext.i8.i32($i172);
    goto corral_source_split_8906;

  corral_source_split_8906:
    assume {:verifier.code 0} true;
    $i174 := $eq.i32($i173, 3);
    goto corral_source_split_8907;

  corral_source_split_8907:
    assume {:verifier.code 0} true;
    $p175 := (if $i174 == 1 then hauppauge_lg2161_1040_ep6_config else hauppauge_lg2161_1019_ep6_config);
    goto corral_source_split_8908;

  corral_source_split_8908:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p3, $mul.ref($i9, 7456)), $mul.ref(424, 1));
    call {:si_unique_call 1250} $p177 := devirtbounce.3($p165, $p175, $p176);
    goto corral_source_split_8909;

  corral_source_split_8909:
    assume {:verifier.code 0} true;
    $p178 := $bitcast.ref.ref($p177);
    goto corral_source_split_8910;

  corral_source_split_8910:
    assume {:verifier.code 0} true;
    $i179 := $p2i.ref.i64($p178);
    goto corral_source_split_8911;

  corral_source_split_8911:
    assume {:verifier.code 0} true;
    $i180 := $eq.i64($i179, 0);
    goto corral_source_split_8912;

  corral_source_split_8912:
    assume {:verifier.code 0} true;
    assume {:branchcond $i180} true;
    goto $bb109, $bb110;

  $bb110:
    assume !($i180 == 1);
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    $p181 := $p177;
    goto $bb112;

  $bb109:
    assume $i180 == 1;
    goto corral_source_split_8916;

  corral_source_split_8916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1252} __symbol_put(.str.104);
    goto corral_source_split_8917;

  corral_source_split_8917:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb104:
    assume $i164 == 1;
    goto corral_source_split_8893;

  corral_source_split_8893:
    assume {:verifier.code 0} true;
    $p165 := $p163;
    goto $bb106;

  $bb101:
    assume $i156 == 1;
    goto corral_source_split_8882;

  corral_source_split_8882:
    assume {:verifier.code 0} true;
    $i64 := $i148;
    goto $bb15;

  $bb95:
    assume $i151 == 1;
    goto corral_source_split_8872;

  corral_source_split_8872:
    assume {:verifier.code 0} true;
    $i152 := $M.10;
    goto corral_source_split_8873;

  corral_source_split_8873:
    assume {:verifier.code 0} true;
    $i153 := $and.i32($i152, 16);
    goto corral_source_split_8874;

  corral_source_split_8874:
    assume {:verifier.code 0} true;
    $i154 := $ne.i32($i153, 0);
    goto corral_source_split_8875;

  corral_source_split_8875:
    assume {:verifier.code 0} true;
    assume {:branchcond $i154} true;
    goto $bb98, $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    assume !($i154 == 1);
    goto $bb97;

  $bb98:
    assume $i154 == 1;
    goto corral_source_split_8877;

  corral_source_split_8877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1246} vslice_dummy_var_322 := printk.ref.ref.i32.i32(.str.5, .str.112, $i148, 713);
    goto corral_source_split_8878;

  corral_source_split_8878:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb77:
    assume $i131 == 1;
    goto corral_source_split_8835;

  corral_source_split_8835:
    assume {:verifier.code 0} true;
    $i132 := $M.10;
    goto corral_source_split_8836;

  corral_source_split_8836:
    assume {:verifier.code 0} true;
    $i133 := $ne.i32($i132, 0);
    goto corral_source_split_8837;

  corral_source_split_8837:
    assume {:verifier.code 0} true;
    assume {:branchcond $i133} true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i133 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1239} $i135 := mxl1x1sf_get_chip_info($p13);
    call {:si_unique_call 1240} {:cexpr "___ret"} boogie_si_record_i32($i135);
    goto corral_source_split_8842;

  corral_source_split_8842:
    assume {:verifier.code 0} true;
    $i136 := $slt.i32($i135, 0);
    goto corral_source_split_8843;

  corral_source_split_8843:
    assume {:verifier.code 0} true;
    $i137 := $zext.i1.i32($i136);
    call {:si_unique_call 1241} {:cexpr "__ret___6"} boogie_si_record_i32($i137);
    goto corral_source_split_8844;

  corral_source_split_8844:
    assume {:verifier.code 0} true;
    $i138 := $ne.i32($i137, 0);
    goto corral_source_split_8845;

  corral_source_split_8845:
    assume {:verifier.code 0} true;
    assume {:branchcond $i138} true;
    goto $bb82, $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    assume !($i138 == 1);
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    $i143 := $ne.i32($i137, 0);
    goto corral_source_split_8855;

  corral_source_split_8855:
    assume {:verifier.code 0} true;
    assume {:branchcond $i143} true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i143 == 1);
    goto corral_source_split_8860;

  corral_source_split_8860:
    assume {:verifier.code 0} true;
    $i145 := $M.10;
    goto corral_source_split_8861;

  corral_source_split_8861:
    assume {:verifier.code 0} true;
    $i146 := $ne.i32($i145, 0);
    goto corral_source_split_8862;

  corral_source_split_8862:
    assume {:verifier.code 0} true;
    assume {:branchcond $i146} true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i146 == 1);
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    $i148 := $i135;
    goto $bb94;

  $bb91:
    assume $i146 == 1;
    goto corral_source_split_8864;

  corral_source_split_8864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1244} vslice_dummy_var_321 := printk.ref.ref(.str.64, .str.112);
    goto corral_source_split_8865;

  corral_source_split_8865:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb88:
    assume $i143 == 1;
    goto corral_source_split_8857;

  corral_source_split_8857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1243} vslice_dummy_var_320 := printk.ref(.str.63);
    goto corral_source_split_8858;

  corral_source_split_8858:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb82:
    assume $i138 == 1;
    goto corral_source_split_8847;

  corral_source_split_8847:
    assume {:verifier.code 0} true;
    $i139 := $M.10;
    goto corral_source_split_8848;

  corral_source_split_8848:
    assume {:verifier.code 0} true;
    $i140 := $and.i32($i139, 16);
    goto corral_source_split_8849;

  corral_source_split_8849:
    assume {:verifier.code 0} true;
    $i141 := $ne.i32($i140, 0);
    goto corral_source_split_8850;

  corral_source_split_8850:
    assume {:verifier.code 0} true;
    assume {:branchcond $i141} true;
    goto $bb85, $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    assume !($i141 == 1);
    goto $bb84;

  $bb85:
    assume $i141 == 1;
    goto corral_source_split_8852;

  corral_source_split_8852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1242} vslice_dummy_var_319 := printk.ref.ref.i32.i32(.str.5, .str.112, $i135, 712);
    goto corral_source_split_8853;

  corral_source_split_8853:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb79:
    assume $i133 == 1;
    goto corral_source_split_8839;

  corral_source_split_8839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1238} vslice_dummy_var_318 := printk.ref.ref(.str.62, .str.112);
    goto corral_source_split_8840;

  corral_source_split_8840:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb71:
    assume $i126 == 1;
    goto corral_source_split_8825;

  corral_source_split_8825:
    assume {:verifier.code 0} true;
    $i127 := $M.10;
    goto corral_source_split_8826;

  corral_source_split_8826:
    assume {:verifier.code 0} true;
    $i128 := $and.i32($i127, 16);
    goto corral_source_split_8827;

  corral_source_split_8827:
    assume {:verifier.code 0} true;
    $i129 := $ne.i32($i128, 0);
    goto corral_source_split_8828;

  corral_source_split_8828:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    assume !($i129 == 1);
    goto $bb73;

  $bb74:
    assume $i129 == 1;
    goto corral_source_split_8830;

  corral_source_split_8830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1237} vslice_dummy_var_317 := printk.ref.ref.i32.i32(.str.5, .str.112, $i123, 712);
    goto corral_source_split_8831;

  corral_source_split_8831:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb68:
    assume $i122 == 1;
    goto corral_source_split_8818;

  corral_source_split_8818:
    assume {:verifier.code 0} true;
    $i64 := $i114;
    goto $bb15;

  $bb62:
    assume $i117 == 1;
    goto corral_source_split_8808;

  corral_source_split_8808:
    assume {:verifier.code 0} true;
    $i118 := $M.10;
    goto corral_source_split_8809;

  corral_source_split_8809:
    assume {:verifier.code 0} true;
    $i119 := $and.i32($i118, 16);
    goto corral_source_split_8810;

  corral_source_split_8810:
    assume {:verifier.code 0} true;
    $i120 := $ne.i32($i119, 0);
    goto corral_source_split_8811;

  corral_source_split_8811:
    assume {:verifier.code 0} true;
    assume {:branchcond $i120} true;
    goto $bb65, $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    assume !($i120 == 1);
    goto $bb64;

  $bb65:
    assume $i120 == 1;
    goto corral_source_split_8813;

  corral_source_split_8813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1233} vslice_dummy_var_316 := printk.ref.ref.i32.i32(.str.5, .str.112, $i114, 709);
    goto corral_source_split_8814;

  corral_source_split_8814:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb59:
    assume $i111 == 1;
    goto corral_source_split_8799;

  corral_source_split_8799:
    assume {:verifier.code 0} true;
    $i64 := $i103;
    goto $bb15;

  $bb53:
    assume $i106 == 1;
    goto corral_source_split_8789;

  corral_source_split_8789:
    assume {:verifier.code 0} true;
    $i107 := $M.10;
    goto corral_source_split_8790;

  corral_source_split_8790:
    assume {:verifier.code 0} true;
    $i108 := $and.i32($i107, 16);
    goto corral_source_split_8791;

  corral_source_split_8791:
    assume {:verifier.code 0} true;
    $i109 := $ne.i32($i108, 0);
    goto corral_source_split_8792;

  corral_source_split_8792:
    assume {:verifier.code 0} true;
    assume {:branchcond $i109} true;
    goto $bb56, $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    assume !($i109 == 1);
    goto $bb55;

  $bb56:
    assume $i109 == 1;
    goto corral_source_split_8794;

  corral_source_split_8794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1229} vslice_dummy_var_315 := printk.ref.ref.i32.i32(.str.5, .str.112, $i103, 706);
    goto corral_source_split_8795;

  corral_source_split_8795:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb50:
    assume $i102 == 1;
    goto corral_source_split_8782;

  corral_source_split_8782:
    assume {:verifier.code 0} true;
    $i64 := $i94;
    goto $bb15;

  $bb44:
    assume $i97 == 1;
    goto corral_source_split_8772;

  corral_source_split_8772:
    assume {:verifier.code 0} true;
    $i98 := $M.10;
    goto corral_source_split_8773;

  corral_source_split_8773:
    assume {:verifier.code 0} true;
    $i99 := $and.i32($i98, 16);
    goto corral_source_split_8774;

  corral_source_split_8774:
    assume {:verifier.code 0} true;
    $i100 := $ne.i32($i99, 0);
    goto corral_source_split_8775;

  corral_source_split_8775:
    assume {:verifier.code 0} true;
    assume {:branchcond $i100} true;
    goto $bb47, $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    assume !($i100 == 1);
    goto $bb46;

  $bb47:
    assume $i100 == 1;
    goto corral_source_split_8777;

  corral_source_split_8777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1225} vslice_dummy_var_314 := printk.ref.ref.i32.i32(.str.5, .str.112, $i94, 702);
    goto corral_source_split_8778;

  corral_source_split_8778:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb41:
    assume $i93 == 1;
    goto corral_source_split_8765;

  corral_source_split_8765:
    assume {:verifier.code 0} true;
    $i64 := $i85;
    goto $bb15;

  $bb35:
    assume $i88 == 1;
    goto corral_source_split_8755;

  corral_source_split_8755:
    assume {:verifier.code 0} true;
    $i89 := $M.10;
    goto corral_source_split_8756;

  corral_source_split_8756:
    assume {:verifier.code 0} true;
    $i90 := $and.i32($i89, 16);
    goto corral_source_split_8757;

  corral_source_split_8757:
    assume {:verifier.code 0} true;
    $i91 := $ne.i32($i90, 0);
    goto corral_source_split_8758;

  corral_source_split_8758:
    assume {:verifier.code 0} true;
    assume {:branchcond $i91} true;
    goto $bb38, $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume !($i91 == 1);
    goto $bb37;

  $bb38:
    assume $i91 == 1;
    goto corral_source_split_8760;

  corral_source_split_8760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1221} vslice_dummy_var_313 := printk.ref.ref.i32.i32(.str.5, .str.112, $i85, 699);
    goto corral_source_split_8761;

  corral_source_split_8761:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb32:
    assume $i84 == 1;
    goto corral_source_split_8748;

  corral_source_split_8748:
    assume {:verifier.code 0} true;
    $i64 := $i76;
    goto $bb15;

  $bb26:
    assume $i79 == 1;
    goto corral_source_split_8738;

  corral_source_split_8738:
    assume {:verifier.code 0} true;
    $i80 := $M.10;
    goto corral_source_split_8739;

  corral_source_split_8739:
    assume {:verifier.code 0} true;
    $i81 := $and.i32($i80, 16);
    goto corral_source_split_8740;

  corral_source_split_8740:
    assume {:verifier.code 0} true;
    $i82 := $ne.i32($i81, 0);
    goto corral_source_split_8741;

  corral_source_split_8741:
    assume {:verifier.code 0} true;
    assume {:branchcond $i82} true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i82 == 1);
    goto $bb28;

  $bb29:
    assume $i82 == 1;
    goto corral_source_split_8743;

  corral_source_split_8743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1217} vslice_dummy_var_312 := printk.ref.ref.i32.i32(.str.5, .str.112, $i76, 695);
    goto corral_source_split_8744;

  corral_source_split_8744:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb23:
    assume $i73 == 1;
    goto corral_source_split_8729;

  corral_source_split_8729:
    assume {:verifier.code 0} true;
    $i64 := $i65;
    goto $bb15;

  $bb17:
    assume $i68 == 1;
    goto corral_source_split_8719;

  corral_source_split_8719:
    assume {:verifier.code 0} true;
    $i69 := $M.10;
    goto corral_source_split_8720;

  corral_source_split_8720:
    assume {:verifier.code 0} true;
    $i70 := $and.i32($i69, 16);
    goto corral_source_split_8721;

  corral_source_split_8721:
    assume {:verifier.code 0} true;
    $i71 := $ne.i32($i70, 0);
    goto corral_source_split_8722;

  corral_source_split_8722:
    assume {:verifier.code 0} true;
    assume {:branchcond $i71} true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i71 == 1);
    goto $bb19;

  $bb20:
    assume $i71 == 1;
    goto corral_source_split_8724;

  corral_source_split_8724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1213} vslice_dummy_var_311 := printk.ref.ref.i32.i32(.str.5, .str.112, $i65, 691);
    goto corral_source_split_8725;

  corral_source_split_8725:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb13:
    assume $i63 == 1;
    goto corral_source_split_8710;

  corral_source_split_8710:
    assume {:verifier.code 0} true;
    $i64 := $i55;
    goto $bb15;

  $bb7:
    assume $i58 == 1;
    goto corral_source_split_8700;

  corral_source_split_8700:
    assume {:verifier.code 0} true;
    $i59 := $M.10;
    goto corral_source_split_8701;

  corral_source_split_8701:
    assume {:verifier.code 0} true;
    $i60 := $and.i32($i59, 16);
    goto corral_source_split_8702;

  corral_source_split_8702:
    assume {:verifier.code 0} true;
    $i61 := $ne.i32($i60, 0);
    goto corral_source_split_8703;

  corral_source_split_8703:
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i61 == 1);
    goto $bb9;

  $bb10:
    assume $i61 == 1;
    goto corral_source_split_8705;

  corral_source_split_8705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1209} vslice_dummy_var_310 := printk.ref.ref.i32.i32(.str.5, .str.112, $i55, 688);
    goto corral_source_split_8706;

  corral_source_split_8706:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb4:
    assume $i47 == 1;
    goto corral_source_split_8682;

  corral_source_split_8682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1205} vslice_dummy_var_309 := printk.ref(.str.82);
    goto corral_source_split_8683;

  corral_source_split_8683:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i33 == 1;
    goto corral_source_split_8661;

  corral_source_split_8661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1202} __dynamic_pr_debug.ref.ref.ref($p2, .str.77, .str.112);
    goto corral_source_split_8662;

  corral_source_split_8662:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mxl111sf_frontend_attach_mercury_mh: ref;

axiom mxl111sf_frontend_attach_mercury_mh == $sub.ref(0, 398596);

procedure mxl111sf_frontend_attach_mercury_mh($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.15, $M.18, $M.19, $M.20, $M.21, $M.22, $CurrAddr, $M.23, $M.24, $M.25;



implementation mxl111sf_frontend_attach_mercury_mh($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i24;
  var $i9: i24;
  var $i10: i24;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i64;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i25: i32;
  var $i24: i32;
  var $i20: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1253} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_8971;

  corral_source_split_8971:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8972;

  corral_source_split_8972:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p2, .str.2);
    goto corral_source_split_8973;

  corral_source_split_8973:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8974;

  corral_source_split_8974:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p3, .str.115);
    goto corral_source_split_8975;

  corral_source_split_8975:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8976;

  corral_source_split_8976:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p4, .str.3);
    goto corral_source_split_8977;

  corral_source_split_8977:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8978;

  corral_source_split_8978:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p5, .str.98);
    goto corral_source_split_8979;

  corral_source_split_8979:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8980;

  corral_source_split_8980:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_8981;

  corral_source_split_8981:
    assume {:verifier.code 0} true;
    $i8 := $load.i24($M.5, $p7);
    goto corral_source_split_8982;

  corral_source_split_8982:
    assume {:verifier.code 0} true;
    $i9 := $and.i24($i8, $sub.i24(0, 262144));
    goto corral_source_split_8983;

  corral_source_split_8983:
    assume {:verifier.code 0} true;
    $i10 := $or.i24($i9, 995);
    goto corral_source_split_8984;

  corral_source_split_8984:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p7, $i10);
    goto corral_source_split_8985;

  corral_source_split_8985:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8986;

  corral_source_split_8986:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p11, 0);
    goto corral_source_split_8987;

  corral_source_split_8987:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8988;

  corral_source_split_8988:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.6, $p12);
    goto corral_source_split_8989;

  corral_source_split_8989:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i64($i13);
    goto corral_source_split_8990;

  corral_source_split_8990:
    assume {:verifier.code 0} true;
    $i15 := $and.i64($i14, 1);
    goto corral_source_split_8991;

  corral_source_split_8991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1254} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 1255} {:cexpr "tmp"} boogie_si_record_i64($i16);
    goto corral_source_split_8992;

  corral_source_split_8992:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_8993;

  corral_source_split_8993:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1257} $i18 := mxl111sf_attach_demod($p0, 0);
    call {:si_unique_call 1258} {:cexpr "ret"} boogie_si_record_i32($i18);
    goto corral_source_split_8998;

  corral_source_split_8998:
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i18, 0);
    goto corral_source_split_8999;

  corral_source_split_8999:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i21 := $M.31;
    goto corral_source_split_9005;

  corral_source_split_9005:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_9006;

  corral_source_split_9006:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i22 == 1);
    goto corral_source_split_9011;

  corral_source_split_9011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1261} $i25 := mxl111sf_lg2161_ep6_frontend_attach($p0, 1);
    call {:si_unique_call 1262} {:cexpr "ret"} boogie_si_record_i32($i25);
    assume {:verifier.code 0} true;
    $i24 := $i25;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_9013;

  corral_source_split_9013:
    assume {:verifier.code 0} true;
    $i20 := $i24;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_9003;

  corral_source_split_9003:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  $bb8:
    assume $i22 == 1;
    goto corral_source_split_9008;

  corral_source_split_9008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1259} $i23 := mxl111sf_lg2161_frontend_attach($p0, 1);
    call {:si_unique_call 1260} {:cexpr "ret"} boogie_si_record_i32($i23);
    goto corral_source_split_9009;

  corral_source_split_9009:
    assume {:verifier.code 0} true;
    $i24 := $i23;
    goto $bb10;

  $bb4:
    assume $i19 == 1;
    goto corral_source_split_9001;

  corral_source_split_9001:
    assume {:verifier.code 0} true;
    $i20 := $i18;
    goto $bb6;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_8995;

  corral_source_split_8995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1256} __dynamic_pr_debug.ref.ref.ref($p1, .str.98, .str.115);
    goto corral_source_split_8996;

  corral_source_split_8996:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mxl111sf_streaming_ctrl_mercury_mh: ref;

axiom mxl111sf_streaming_ctrl_mercury_mh == $sub.ref(0, 399628);

procedure mxl111sf_streaming_ctrl_mercury_mh($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.15, $CurrAddr;



implementation mxl111sf_streaming_ctrl_mercury_mh($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i24;
  var $i10: i24;
  var $i11: i24;
  var $p12: ref;
  var $p13: ref;
  var $i14: i8;
  var $i15: i64;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $i25: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1263} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 1264} {:cexpr "mxl111sf_streaming_ctrl_mercury_mh:arg:onoff"} boogie_si_record_i32($i1);
    goto corral_source_split_9015;

  corral_source_split_9015:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9016;

  corral_source_split_9016:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p3, .str.2);
    goto corral_source_split_9017;

  corral_source_split_9017:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_9018;

  corral_source_split_9018:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p4, .str.114);
    goto corral_source_split_9019;

  corral_source_split_9019:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_9020;

  corral_source_split_9020:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p5, .str.3);
    goto corral_source_split_9021;

  corral_source_split_9021:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9022;

  corral_source_split_9022:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p6, .str.96);
    goto corral_source_split_9023;

  corral_source_split_9023:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_9024;

  corral_source_split_9024:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_9025;

  corral_source_split_9025:
    assume {:verifier.code 0} true;
    $i9 := $load.i24($M.5, $p8);
    goto corral_source_split_9026;

  corral_source_split_9026:
    assume {:verifier.code 0} true;
    $i10 := $and.i24($i9, $sub.i24(0, 262144));
    goto corral_source_split_9027;

  corral_source_split_9027:
    assume {:verifier.code 0} true;
    $i11 := $or.i24($i10, 1337);
    goto corral_source_split_9028;

  corral_source_split_9028:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p8, $i11);
    goto corral_source_split_9029;

  corral_source_split_9029:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9030;

  corral_source_split_9030:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p12, 0);
    goto corral_source_split_9031;

  corral_source_split_9031:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9032;

  corral_source_split_9032:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.6, $p13);
    goto corral_source_split_9033;

  corral_source_split_9033:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i64($i14);
    goto corral_source_split_9034;

  corral_source_split_9034:
    assume {:verifier.code 0} true;
    $i16 := $and.i64($i15, 1);
    goto corral_source_split_9035;

  corral_source_split_9035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1265} $i17 := ldv__builtin_expect($i16, 0);
    call {:si_unique_call 1266} {:cexpr "tmp"} boogie_si_record_i64($i17);
    goto corral_source_split_9036;

  corral_source_split_9036:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_9037;

  corral_source_split_9037:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 1584)), $mul.ref(1576, 1));
    goto corral_source_split_9044;

  corral_source_split_9044:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.8, $p21);
    goto corral_source_split_9045;

  corral_source_split_9045:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 0);
    goto corral_source_split_9046;

  corral_source_split_9046:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i23 == 1);
    goto corral_source_split_9051;

  corral_source_split_9051:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 1584)), $mul.ref(1576, 1));
    goto corral_source_split_9052;

  corral_source_split_9052:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.8, $p26);
    goto corral_source_split_9053;

  corral_source_split_9053:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 1);
    goto corral_source_split_9054;

  corral_source_split_9054:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 1584)), $mul.ref(1576, 1));
    goto corral_source_split_9062;

  corral_source_split_9062:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.8, $p32);
    goto corral_source_split_9063;

  corral_source_split_9063:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 1);
    goto corral_source_split_9064;

  corral_source_split_9064:
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i25 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_9056;

  corral_source_split_9056:
    assume {:verifier.code 0} true;
    $r := $i25;
    return;

  $bb12:
    assume $i34 == 1;
    goto corral_source_split_9069;

  corral_source_split_9069:
    assume {:verifier.code 0} true;
    $i35 := $M.31;
    goto corral_source_split_9070;

  corral_source_split_9070:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i35, 0);
    goto corral_source_split_9071;

  corral_source_split_9071:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb14;

  $bb15:
    assume $i36 == 1;
    goto corral_source_split_9073;

  corral_source_split_9073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1272} $i37 := mxl111sf_ep6_streaming_ctrl($p0, $i1);
    call {:si_unique_call 1273} {:cexpr "tmp___2"} boogie_si_record_i32($i37);
    goto corral_source_split_9074;

  corral_source_split_9074:
    assume {:verifier.code 0} true;
    $i25 := $i37;
    goto $bb6;

  $bb7:
    assume $i28 == 1;
    goto corral_source_split_9058;

  corral_source_split_9058:
    assume {:verifier.code 0} true;
    $i29 := $M.31;
    goto corral_source_split_9059;

  corral_source_split_9059:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_9060;

  corral_source_split_9060:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb9;

  $bb10:
    assume $i30 == 1;
    goto corral_source_split_9066;

  corral_source_split_9066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1270} $i31 := mxl111sf_ep5_streaming_ctrl($p0, $i1);
    call {:si_unique_call 1271} {:cexpr "tmp___1"} boogie_si_record_i32($i31);
    goto corral_source_split_9067;

  corral_source_split_9067:
    assume {:verifier.code 0} true;
    $i25 := $i31;
    goto $bb6;

  $bb4:
    assume $i23 == 1;
    goto corral_source_split_9048;

  corral_source_split_9048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1268} $i24 := mxl111sf_ep4_streaming_ctrl($p0, $i1);
    call {:si_unique_call 1269} {:cexpr "tmp___0"} boogie_si_record_i32($i24);
    goto corral_source_split_9049;

  corral_source_split_9049:
    assume {:verifier.code 0} true;
    $i25 := $i24;
    goto $bb6;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_9039;

  corral_source_split_9039:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 1584)), $mul.ref(1576, 1));
    goto corral_source_split_9040;

  corral_source_split_9040:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.8, $p19);
    goto corral_source_split_9041;

  corral_source_split_9041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1267} __dynamic_pr_debug.ref.ref.ref.i32.i32($p2, .str.96, .str.114, $i20, $i1);
    goto corral_source_split_9042;

  corral_source_split_9042:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mxl111sf_get_stream_config_mercury_mh: ref;

axiom mxl111sf_get_stream_config_mercury_mh == $sub.ref(0, 400660);

procedure mxl111sf_get_stream_config_mercury_mh($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr;



implementation mxl111sf_get_stream_config_mercury_mh($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i24;
  var $i11: i24;
  var $i12: i24;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $i38: i1;
  var $i39: i32;
  var $i40: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1274} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_9076;

  corral_source_split_9076:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9077;

  corral_source_split_9077:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p4, .str.2);
    goto corral_source_split_9078;

  corral_source_split_9078:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_9079;

  corral_source_split_9079:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p5, .str.117);
    goto corral_source_split_9080;

  corral_source_split_9080:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_9081;

  corral_source_split_9081:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p6, .str.3);
    goto corral_source_split_9082;

  corral_source_split_9082:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9083;

  corral_source_split_9083:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p7, .str.90);
    goto corral_source_split_9084;

  corral_source_split_9084:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_9085;

  corral_source_split_9085:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_9086;

  corral_source_split_9086:
    assume {:verifier.code 0} true;
    $i10 := $load.i24($M.5, $p9);
    goto corral_source_split_9087;

  corral_source_split_9087:
    assume {:verifier.code 0} true;
    $i11 := $and.i24($i10, $sub.i24(0, 262144));
    goto corral_source_split_9088;

  corral_source_split_9088:
    assume {:verifier.code 0} true;
    $i12 := $or.i24($i11, 1311);
    goto corral_source_split_9089;

  corral_source_split_9089:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p9, $i12);
    goto corral_source_split_9090;

  corral_source_split_9090:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9091;

  corral_source_split_9091:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p13, 0);
    goto corral_source_split_9092;

  corral_source_split_9092:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9093;

  corral_source_split_9093:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.6, $p14);
    goto corral_source_split_9094;

  corral_source_split_9094:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i64($i15);
    goto corral_source_split_9095;

  corral_source_split_9095:
    assume {:verifier.code 0} true;
    $i17 := $and.i64($i16, 1);
    goto corral_source_split_9096;

  corral_source_split_9096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1275} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 1276} {:cexpr "tmp"} boogie_si_record_i64($i18);
    goto corral_source_split_9097;

  corral_source_split_9097:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_9098;

  corral_source_split_9098:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 1584)), $mul.ref(1576, 1));
    goto corral_source_split_9105;

  corral_source_split_9105:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.8, $p22);
    goto corral_source_split_9106;

  corral_source_split_9106:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_9107;

  corral_source_split_9107:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i24 == 1);
    goto corral_source_split_9114;

  corral_source_split_9114:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 1584)), $mul.ref(1576, 1));
    goto corral_source_split_9115;

  corral_source_split_9115:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.8, $p27);
    goto corral_source_split_9116;

  corral_source_split_9116:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 1);
    goto corral_source_split_9117;

  corral_source_split_9117:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 1584)), $mul.ref(1576, 1));
    goto corral_source_split_9128;

  corral_source_split_9128:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.8, $p34);
    goto corral_source_split_9129;

  corral_source_split_9129:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i35, 1);
    goto corral_source_split_9130;

  corral_source_split_9130:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb19:
    assume $i36 == 1;
    goto corral_source_split_9142;

  corral_source_split_9142:
    assume {:verifier.code 0} true;
    $i37 := $M.31;
    goto corral_source_split_9143;

  corral_source_split_9143:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 0);
    goto corral_source_split_9144;

  corral_source_split_9144:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i38 == 1);
    goto $bb21;

  $bb22:
    assume $i38 == 1;
    goto corral_source_split_9146;

  corral_source_split_9146:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p1, 2);
    goto corral_source_split_9147;

  corral_source_split_9147:
    assume {:verifier.code 0} true;
    $i39 := $M.14;
    goto corral_source_split_9148;

  corral_source_split_9148:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_9149;

  corral_source_split_9149:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i40 == 1);
    goto corral_source_split_9154;

  corral_source_split_9154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1283} mxl111sf_stream_config_bulk($p2, 6);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb24:
    assume $i40 == 1;
    goto corral_source_split_9151;

  corral_source_split_9151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1282} mxl111sf_stream_config_isoc($p2, 6, 24, 3072);
    goto corral_source_split_9152;

  corral_source_split_9152:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb10:
    assume $i29 == 1;
    goto corral_source_split_9124;

  corral_source_split_9124:
    assume {:verifier.code 0} true;
    $i30 := $M.31;
    goto corral_source_split_9125;

  corral_source_split_9125:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_9126;

  corral_source_split_9126:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb12;

  $bb13:
    assume $i31 == 1;
    goto corral_source_split_9132;

  corral_source_split_9132:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p1, 2);
    goto corral_source_split_9133;

  corral_source_split_9133:
    assume {:verifier.code 0} true;
    $i32 := $M.14;
    goto corral_source_split_9134;

  corral_source_split_9134:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_9135;

  corral_source_split_9135:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i33 == 1);
    goto corral_source_split_9140;

  corral_source_split_9140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1281} mxl111sf_stream_config_bulk($p2, 5);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i33 == 1;
    goto corral_source_split_9137;

  corral_source_split_9137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1280} mxl111sf_stream_config_isoc($p2, 5, 96, 200);
    goto corral_source_split_9138;

  corral_source_split_9138:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb4:
    assume $i24 == 1;
    goto corral_source_split_9109;

  corral_source_split_9109:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p1, 0);
    goto corral_source_split_9110;

  corral_source_split_9110:
    assume {:verifier.code 0} true;
    $i25 := $M.14;
    goto corral_source_split_9111;

  corral_source_split_9111:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_9112;

  corral_source_split_9112:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i26 == 1);
    goto corral_source_split_9122;

  corral_source_split_9122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1279} mxl111sf_stream_config_bulk($p2, 4);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i26 == 1;
    goto corral_source_split_9119;

  corral_source_split_9119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1278} mxl111sf_stream_config_isoc($p2, 4, 96, 564);
    goto corral_source_split_9120;

  corral_source_split_9120:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_9100;

  corral_source_split_9100:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 1584)), $mul.ref(1576, 1));
    goto corral_source_split_9101;

  corral_source_split_9101:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.8, $p20);
    goto corral_source_split_9102;

  corral_source_split_9102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1277} __dynamic_pr_debug.ref.ref.ref.i32($p3, .str.90, .str.117, $i21);
    goto corral_source_split_9103;

  corral_source_split_9103:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mxl111sf_lg2161_frontend_attach: ref;

axiom mxl111sf_lg2161_frontend_attach == $sub.ref(0, 401692);

procedure mxl111sf_lg2161_frontend_attach($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.15, $M.18, $M.19, $M.20, $M.21, $M.22, $CurrAddr, $M.23, $M.24, $M.25;



implementation mxl111sf_lg2161_frontend_attach($p0: ref, $i1: i8) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var $i6: i64;
  var $i7: i64;
  var $i8: i64;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i24;
  var $i25: i24;
  var $i26: i24;
  var $p27: ref;
  var $p28: ref;
  var $i29: i8;
  var $i30: i64;
  var $i31: i64;
  var $i32: i64;
  var $i33: i1;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $i46: i32;
  var $i47: i1;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i32;
  var $i56: i1;
  var $i57: i32;
  var $i58: i1;
  var $i59: i32;
  var $i60: i32;
  var $i61: i1;
  var $i63: i1;
  var $i65: i32;
  var $i66: i1;
  var $i67: i32;
  var $i68: i1;
  var $i69: i32;
  var $i70: i32;
  var $i71: i1;
  var $i73: i1;
  var $p74: ref;
  var $i75: i32;
  var $i76: i32;
  var $i77: i1;
  var $i78: i32;
  var $i79: i1;
  var $i80: i32;
  var $i81: i32;
  var $i82: i1;
  var $i84: i1;
  var $i85: i32;
  var $i86: i1;
  var $i87: i32;
  var $i88: i1;
  var $i89: i32;
  var $i90: i32;
  var $i91: i1;
  var $i93: i1;
  var $i94: i32;
  var $i95: i1;
  var $i96: i32;
  var $i97: i1;
  var $i98: i32;
  var $i99: i32;
  var $i100: i1;
  var $i102: i1;
  var $i103: i32;
  var $i104: i1;
  var $i105: i32;
  var $i106: i1;
  var $i107: i32;
  var $i108: i32;
  var $i109: i1;
  var $i111: i1;
  var $p112: ref;
  var $i113: i32;
  var $i114: i32;
  var $i115: i1;
  var $i116: i32;
  var $i117: i1;
  var $i118: i32;
  var $i119: i32;
  var $i120: i1;
  var $i122: i1;
  var $i123: i32;
  var $i124: i1;
  var $i125: i32;
  var $i126: i1;
  var $i127: i32;
  var $i128: i32;
  var $i129: i1;
  var $i131: i1;
  var $i132: i32;
  var $i133: i1;
  var $i135: i32;
  var $i136: i1;
  var $i137: i32;
  var $i138: i1;
  var $i139: i32;
  var $i140: i32;
  var $i141: i1;
  var $i143: i1;
  var $i145: i32;
  var $i146: i1;
  var $i148: i32;
  var $i149: i1;
  var $i150: i32;
  var $i151: i1;
  var $i152: i32;
  var $i153: i32;
  var $i154: i1;
  var $i156: i1;
  var $p157: ref;
  var $p158: ref;
  var $i159: i64;
  var $i160: i1;
  var $i161: i32;
  var $i162: i64;
  var $p163: ref;
  var $i164: i1;
  var $p167: ref;
  var $p165: ref;
  var $i169: i64;
  var $i170: i1;
  var $p171: ref;
  var $i172: i8;
  var $i173: i32;
  var $i174: i1;
  var $p175: ref;
  var $p176: ref;
  var $p177: ref;
  var $p178: ref;
  var $i179: i64;
  var $i180: i1;
  var $p181: ref;
  var $i184: i32;
  var $i185: i64;
  var $p187: ref;
  var $i188: i32;
  var $i189: i64;
  var $p191: ref;
  var $p192: ref;
  var $i193: i64;
  var $i194: i1;
  var $p195: ref;
  var $i196: i8;
  var $i197: i32;
  var $i198: i32;
  var $i199: i8;
  var $p200: ref;
  var $i201: i32;
  var $i202: i64;
  var $p204: ref;
  var $p205: ref;
  var $p207: ref;
  var $p208: ref;
  var $p209: ref;
  var $i210: i32;
  var $i211: i64;
  var $p213: ref;
  var $p214: ref;
  var $p216: ref;
  var $i217: i32;
  var $i218: i64;
  var $p220: ref;
  var $p221: ref;
  var $p223: ref;
  var $p224: ref;
  var $p225: ref;
  var $i226: i32;
  var $i227: i64;
  var $p229: ref;
  var $p230: ref;
  var $p232: ref;
  var $i64: i32;
  var $i233: i32;
  var vslice_dummy_var_325: i32;
  var vslice_dummy_var_326: i32;
  var vslice_dummy_var_327: i32;
  var vslice_dummy_var_328: i32;
  var vslice_dummy_var_329: i32;
  var vslice_dummy_var_330: i32;
  var vslice_dummy_var_331: i32;
  var vslice_dummy_var_332: i32;
  var vslice_dummy_var_333: i32;
  var vslice_dummy_var_334: i32;
  var vslice_dummy_var_335: i32;
  var vslice_dummy_var_336: i32;
  var vslice_dummy_var_337: i32;
  var vslice_dummy_var_338: i32;
  var vslice_dummy_var_339: i32;
  var vslice_dummy_var_340: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1284} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 1285} {:cexpr "mxl111sf_lg2161_frontend_attach:arg:fe_id"} boogie_si_record_i8($i1);
    goto corral_source_split_9156;

  corral_source_split_9156:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_9157;

  corral_source_split_9157:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 2400)), $mul.ref(320, 1));
    goto corral_source_split_9158;

  corral_source_split_9158:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.7, $p4);
    goto corral_source_split_9159;

  corral_source_split_9159:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i64($i5);
    goto corral_source_split_9160;

  corral_source_split_9160:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i6, 2400);
    goto corral_source_split_9161;

  corral_source_split_9161:
    assume {:verifier.code 0} true;
    $i8 := $add.i64($i7, 2344);
    goto corral_source_split_9162;

  corral_source_split_9162:
    assume {:verifier.code 0} true;
    $i9 := $sub.i64(0, $i8);
    goto corral_source_split_9163;

  corral_source_split_9163:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p3, $mul.ref($i9, 7456));
    goto corral_source_split_9164;

  corral_source_split_9164:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref($i9, 7456)), $mul.ref(7448, 1));
    goto corral_source_split_9165;

  corral_source_split_9165:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.7, $p11);
    goto corral_source_split_9166;

  corral_source_split_9166:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_9167;

  corral_source_split_9167:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 368)), $mul.ref(272, 1));
    goto corral_source_split_9168;

  corral_source_split_9168:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_9169;

  corral_source_split_9169:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i64($i1);
    goto corral_source_split_9170;

  corral_source_split_9170:
    assume {:verifier.code 0} true;
    goto corral_source_split_9171;

  corral_source_split_9171:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9172;

  corral_source_split_9172:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p18, .str.2);
    goto corral_source_split_9173;

  corral_source_split_9173:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_9174;

  corral_source_split_9174:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p19, .str.116);
    goto corral_source_split_9175;

  corral_source_split_9175:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_9176;

  corral_source_split_9176:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p20, .str.3);
    goto corral_source_split_9177;

  corral_source_split_9177:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9178;

  corral_source_split_9178:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p21, .str.77);
    goto corral_source_split_9179;

  corral_source_split_9179:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_9180;

  corral_source_split_9180:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_9181;

  corral_source_split_9181:
    assume {:verifier.code 0} true;
    $i24 := $load.i24($M.5, $p23);
    goto corral_source_split_9182;

  corral_source_split_9182:
    assume {:verifier.code 0} true;
    $i25 := $and.i24($i24, $sub.i24(0, 262144));
    goto corral_source_split_9183;

  corral_source_split_9183:
    assume {:verifier.code 0} true;
    $i26 := $or.i24($i25, 585);
    goto corral_source_split_9184;

  corral_source_split_9184:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p23, $i26);
    goto corral_source_split_9185;

  corral_source_split_9185:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9186;

  corral_source_split_9186:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p27, 0);
    goto corral_source_split_9187;

  corral_source_split_9187:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9188;

  corral_source_split_9188:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.6, $p28);
    goto corral_source_split_9189;

  corral_source_split_9189:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i64($i29);
    goto corral_source_split_9190;

  corral_source_split_9190:
    assume {:verifier.code 0} true;
    $i31 := $and.i64($i30, 1);
    goto corral_source_split_9191;

  corral_source_split_9191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1286} $i32 := ldv__builtin_expect($i31, 0);
    call {:si_unique_call 1287} {:cexpr "tmp"} boogie_si_record_i64($i32);
    goto corral_source_split_9192;

  corral_source_split_9192:
    assume {:verifier.code 0} true;
    $i33 := $ne.i64($i32, 0);
    goto corral_source_split_9193;

  corral_source_split_9193:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p13, $mul.ref(0, 368)), $mul.ref(0, 1));
    goto corral_source_split_9198;

  corral_source_split_9198:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p34, $p10);
    goto corral_source_split_9199;

  corral_source_split_9199:
    assume {:verifier.code 0} true;
    $i35 := $M.14;
    goto corral_source_split_9200;

  corral_source_split_9200:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_9201;

  corral_source_split_9201:
    assume {:verifier.code 0} true;
    $i37 := (if $i36 == 1 then 2 else 1);
    goto corral_source_split_9202;

  corral_source_split_9202:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p15, $mul.ref($i16, 32)), $mul.ref(0, 1));
    goto corral_source_split_9203;

  corral_source_split_9203:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p38, $i37);
    goto corral_source_split_9204;

  corral_source_split_9204:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p15, $mul.ref($i16, 32)), $mul.ref(0, 1));
    goto corral_source_split_9205;

  corral_source_split_9205:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.7, $p39);
    goto corral_source_split_9206;

  corral_source_split_9206:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p13, $mul.ref(0, 368)), $mul.ref(20, 1));
    goto corral_source_split_9207;

  corral_source_split_9207:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p41, $i40);
    goto corral_source_split_9208;

  corral_source_split_9208:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p3, $mul.ref($i9, 7456)), $mul.ref(40, 1));
    goto corral_source_split_9209;

  corral_source_split_9209:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.7, $p42);
    goto corral_source_split_9210;

  corral_source_split_9210:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p13, $mul.ref(0, 368)), $mul.ref(20, 1));
    goto corral_source_split_9211;

  corral_source_split_9211:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.7, $p44);
    goto corral_source_split_9212;

  corral_source_split_9212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1289} $i46 := usb_set_interface($p43, 0, $i45);
    call {:si_unique_call 1290} {:cexpr "tmp___0"} boogie_si_record_i32($i46);
    goto corral_source_split_9213;

  corral_source_split_9213:
    assume {:verifier.code 0} true;
    $i47 := $slt.i32($i46, 0);
    goto corral_source_split_9214;

  corral_source_split_9214:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p13, $mul.ref(0, 368)), $mul.ref(24, 1));
    goto corral_source_split_9219;

  corral_source_split_9219:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p49, 1);
    goto corral_source_split_9220;

  corral_source_split_9220:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p13, $mul.ref(0, 368)), $mul.ref(24, 1));
    goto corral_source_split_9221;

  corral_source_split_9221:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.7, $p50);
    goto corral_source_split_9222;

  corral_source_split_9222:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p15, $mul.ref($i16, 32)), $mul.ref(4, 1));
    goto corral_source_split_9223;

  corral_source_split_9223:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p52, $i51);
    goto corral_source_split_9224;

  corral_source_split_9224:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p15, $mul.ref($i16, 32)), $mul.ref(8, 1));
    goto corral_source_split_9225;

  corral_source_split_9225:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p53, 0);
    goto corral_source_split_9226;

  corral_source_split_9226:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p15, $mul.ref($i16, 32)), $mul.ref(12, 1));
    goto corral_source_split_9227;

  corral_source_split_9227:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p54, 1);
    goto corral_source_split_9228;

  corral_source_split_9228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1292} $i55 := mxl1x1sf_soft_reset($p13);
    call {:si_unique_call 1293} {:cexpr "ret"} boogie_si_record_i32($i55);
    goto corral_source_split_9229;

  corral_source_split_9229:
    assume {:verifier.code 0} true;
    $i56 := $slt.i32($i55, 0);
    goto corral_source_split_9230;

  corral_source_split_9230:
    assume {:verifier.code 0} true;
    $i57 := $zext.i1.i32($i56);
    call {:si_unique_call 1294} {:cexpr "__ret"} boogie_si_record_i32($i57);
    goto corral_source_split_9231;

  corral_source_split_9231:
    assume {:verifier.code 0} true;
    $i58 := $ne.i32($i57, 0);
    goto corral_source_split_9232;

  corral_source_split_9232:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i58 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i63 := $ne.i32($i57, 0);
    goto corral_source_split_9242;

  corral_source_split_9242:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1296} $i65 := mxl111sf_init_tuner_demod($p13);
    call {:si_unique_call 1297} {:cexpr "ret"} boogie_si_record_i32($i65);
    goto corral_source_split_9248;

  corral_source_split_9248:
    assume {:verifier.code 0} true;
    $i66 := $slt.i32($i65, 0);
    goto corral_source_split_9249;

  corral_source_split_9249:
    assume {:verifier.code 0} true;
    $i67 := $zext.i1.i32($i66);
    call {:si_unique_call 1298} {:cexpr "__ret___0"} boogie_si_record_i32($i67);
    goto corral_source_split_9250;

  corral_source_split_9250:
    assume {:verifier.code 0} true;
    $i68 := $ne.i32($i67, 0);
    goto corral_source_split_9251;

  corral_source_split_9251:
    assume {:verifier.code 0} true;
    assume {:branchcond $i68} true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i68 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i73 := $ne.i32($i67, 0);
    goto corral_source_split_9261;

  corral_source_split_9261:
    assume {:verifier.code 0} true;
    assume {:branchcond $i73} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p15, $mul.ref($i16, 32)), $mul.ref(8, 1));
    goto corral_source_split_9265;

  corral_source_split_9265:
    assume {:verifier.code 0} true;
    $i75 := $load.i32($M.7, $p74);
    goto corral_source_split_9266;

  corral_source_split_9266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1300} $i76 := mxl1x1sf_set_device_mode($p13, $i75);
    call {:si_unique_call 1301} {:cexpr "ret"} boogie_si_record_i32($i76);
    goto corral_source_split_9267;

  corral_source_split_9267:
    assume {:verifier.code 0} true;
    $i77 := $slt.i32($i76, 0);
    goto corral_source_split_9268;

  corral_source_split_9268:
    assume {:verifier.code 0} true;
    $i78 := $zext.i1.i32($i77);
    call {:si_unique_call 1302} {:cexpr "__ret___1"} boogie_si_record_i32($i78);
    goto corral_source_split_9269;

  corral_source_split_9269:
    assume {:verifier.code 0} true;
    $i79 := $ne.i32($i78, 0);
    goto corral_source_split_9270;

  corral_source_split_9270:
    assume {:verifier.code 0} true;
    assume {:branchcond $i79} true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i79 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i84 := $ne.i32($i78, 0);
    goto corral_source_split_9280;

  corral_source_split_9280:
    assume {:verifier.code 0} true;
    assume {:branchcond $i84} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1304} $i85 := mxl111sf_enable_usb_output($p13);
    call {:si_unique_call 1305} {:cexpr "ret"} boogie_si_record_i32($i85);
    goto corral_source_split_9284;

  corral_source_split_9284:
    assume {:verifier.code 0} true;
    $i86 := $slt.i32($i85, 0);
    goto corral_source_split_9285;

  corral_source_split_9285:
    assume {:verifier.code 0} true;
    $i87 := $zext.i1.i32($i86);
    call {:si_unique_call 1306} {:cexpr "__ret___2"} boogie_si_record_i32($i87);
    goto corral_source_split_9286;

  corral_source_split_9286:
    assume {:verifier.code 0} true;
    $i88 := $ne.i32($i87, 0);
    goto corral_source_split_9287;

  corral_source_split_9287:
    assume {:verifier.code 0} true;
    assume {:branchcond $i88} true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i88 == 1);
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i93 := $ne.i32($i87, 0);
    goto corral_source_split_9297;

  corral_source_split_9297:
    assume {:verifier.code 0} true;
    assume {:branchcond $i93} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1308} $i94 := mxl1x1sf_top_master_ctrl($p13, 1);
    call {:si_unique_call 1309} {:cexpr "ret"} boogie_si_record_i32($i94);
    goto corral_source_split_9301;

  corral_source_split_9301:
    assume {:verifier.code 0} true;
    $i95 := $slt.i32($i94, 0);
    goto corral_source_split_9302;

  corral_source_split_9302:
    assume {:verifier.code 0} true;
    $i96 := $zext.i1.i32($i95);
    call {:si_unique_call 1310} {:cexpr "__ret___3"} boogie_si_record_i32($i96);
    goto corral_source_split_9303;

  corral_source_split_9303:
    assume {:verifier.code 0} true;
    $i97 := $ne.i32($i96, 0);
    goto corral_source_split_9304;

  corral_source_split_9304:
    assume {:verifier.code 0} true;
    assume {:branchcond $i97} true;
    goto $bb44, $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    assume !($i97 == 1);
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $i102 := $ne.i32($i96, 0);
    goto corral_source_split_9314;

  corral_source_split_9314:
    assume {:verifier.code 0} true;
    assume {:branchcond $i102} true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1312} $i103 := mxl111sf_init_port_expander($p13);
    call {:si_unique_call 1313} {:cexpr "ret"} boogie_si_record_i32($i103);
    goto corral_source_split_9318;

  corral_source_split_9318:
    assume {:verifier.code 0} true;
    $i104 := $slt.i32($i103, 0);
    goto corral_source_split_9319;

  corral_source_split_9319:
    assume {:verifier.code 0} true;
    $i105 := $zext.i1.i32($i104);
    call {:si_unique_call 1314} {:cexpr "__ret___4"} boogie_si_record_i32($i105);
    goto corral_source_split_9320;

  corral_source_split_9320:
    assume {:verifier.code 0} true;
    $i106 := $ne.i32($i105, 0);
    goto corral_source_split_9321;

  corral_source_split_9321:
    assume {:verifier.code 0} true;
    assume {:branchcond $i106} true;
    goto $bb53, $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    assume !($i106 == 1);
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $i111 := $ne.i32($i105, 0);
    goto corral_source_split_9331;

  corral_source_split_9331:
    assume {:verifier.code 0} true;
    assume {:branchcond $i111} true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p13, $mul.ref(0, 368)), $mul.ref(24, 1));
    goto corral_source_split_9335;

  corral_source_split_9335:
    assume {:verifier.code 0} true;
    $i113 := $load.i32($M.7, $p112);
    goto corral_source_split_9336;

  corral_source_split_9336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1316} $i114 := mxl111sf_gpio_mode_switch($p13, $i113);
    call {:si_unique_call 1317} {:cexpr "ret"} boogie_si_record_i32($i114);
    goto corral_source_split_9337;

  corral_source_split_9337:
    assume {:verifier.code 0} true;
    $i115 := $slt.i32($i114, 0);
    goto corral_source_split_9338;

  corral_source_split_9338:
    assume {:verifier.code 0} true;
    $i116 := $zext.i1.i32($i115);
    call {:si_unique_call 1318} {:cexpr "__ret___5"} boogie_si_record_i32($i116);
    goto corral_source_split_9339;

  corral_source_split_9339:
    assume {:verifier.code 0} true;
    $i117 := $ne.i32($i116, 0);
    goto corral_source_split_9340;

  corral_source_split_9340:
    assume {:verifier.code 0} true;
    assume {:branchcond $i117} true;
    goto $bb62, $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    assume !($i117 == 1);
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $i122 := $ne.i32($i116, 0);
    goto corral_source_split_9350;

  corral_source_split_9350:
    assume {:verifier.code 0} true;
    assume {:branchcond $i122} true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1320} $i123 := mxl1x1sf_get_chip_info($p13);
    call {:si_unique_call 1321} {:cexpr "___ret"} boogie_si_record_i32($i123);
    goto corral_source_split_9354;

  corral_source_split_9354:
    assume {:verifier.code 0} true;
    $i124 := $slt.i32($i123, 0);
    goto corral_source_split_9355;

  corral_source_split_9355:
    assume {:verifier.code 0} true;
    $i125 := $zext.i1.i32($i124);
    call {:si_unique_call 1322} {:cexpr "__ret___7"} boogie_si_record_i32($i125);
    goto corral_source_split_9356;

  corral_source_split_9356:
    assume {:verifier.code 0} true;
    $i126 := $ne.i32($i125, 0);
    goto corral_source_split_9357;

  corral_source_split_9357:
    assume {:verifier.code 0} true;
    assume {:branchcond $i126} true;
    goto $bb71, $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    assume !($i126 == 1);
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $i131 := $ne.i32($i125, 0);
    goto corral_source_split_9367;

  corral_source_split_9367:
    assume {:verifier.code 0} true;
    assume {:branchcond $i131} true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i131 == 1);
    assume {:verifier.code 0} true;
    $i148 := $i123;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    goto corral_source_split_9401;

  corral_source_split_9401:
    assume {:verifier.code 0} true;
    $i149 := $slt.i32($i148, 0);
    goto corral_source_split_9402;

  corral_source_split_9402:
    assume {:verifier.code 0} true;
    $i150 := $zext.i1.i32($i149);
    call {:si_unique_call 1331} {:cexpr "__ret___8"} boogie_si_record_i32($i150);
    goto corral_source_split_9403;

  corral_source_split_9403:
    assume {:verifier.code 0} true;
    $i151 := $ne.i32($i150, 0);
    goto corral_source_split_9404;

  corral_source_split_9404:
    assume {:verifier.code 0} true;
    assume {:branchcond $i151} true;
    goto $bb95, $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    assume !($i151 == 1);
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    $i156 := $ne.i32($i150, 0);
    goto corral_source_split_9414;

  corral_source_split_9414:
    assume {:verifier.code 0} true;
    assume {:branchcond $i156} true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i156 == 1);
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1333} $p157 := __symbol_get(.str.104);
    goto corral_source_split_9418;

  corral_source_split_9418:
    assume {:verifier.code 0} true;
    $p158 := $bitcast.ref.ref($p157);
    goto corral_source_split_9419;

  corral_source_split_9419:
    assume {:verifier.code 0} true;
    $i159 := $p2i.ref.i64($p158);
    goto corral_source_split_9420;

  corral_source_split_9420:
    assume {:verifier.code 0} true;
    $i160 := $ne.i64($i159, 0);
    goto corral_source_split_9421;

  corral_source_split_9421:
    assume {:verifier.code 0} true;
    $i161 := $zext.i1.i32($i160);
    goto corral_source_split_9422;

  corral_source_split_9422:
    assume {:verifier.code 0} true;
    $i162 := $sext.i32.i64($i161);
    goto corral_source_split_9423;

  corral_source_split_9423:
    assume {:verifier.code 0} true;
    $p163 := $i2p.i64.ref($i162);
    goto corral_source_split_9424;

  corral_source_split_9424:
    assume {:verifier.code 0} true;
    $i164 := $ne.ref($p163, $0.ref);
    goto corral_source_split_9425;

  corral_source_split_9425:
    assume {:verifier.code 0} true;
    assume {:branchcond $i164} true;
    goto $bb104, $bb105;

  $bb105:
    assume !($i164 == 1);
    goto corral_source_split_9429;

  corral_source_split_9429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1334} vslice_dummy_var_339 := __request_module.i1.ref(1, .str.105);
    goto corral_source_split_9430;

  corral_source_split_9430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1335} $p167 := __symbol_get(.str.104);
    goto corral_source_split_9431;

  corral_source_split_9431:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p165 := $p167;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    goto corral_source_split_9433;

  corral_source_split_9433:
    assume {:verifier.code 0} true;
    $i169 := $p2i.ref.i64($p165);
    goto corral_source_split_9434;

  corral_source_split_9434:
    assume {:verifier.code 0} true;
    $i170 := $ne.i64($i169, 0);
    goto corral_source_split_9435;

  corral_source_split_9435:
    assume {:verifier.code 0} true;
    assume {:branchcond $i170} true;
    goto $bb107, $bb108;

  $bb108:
    assume !($i170 == 1);
    goto corral_source_split_9448;

  corral_source_split_9448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1337} vslice_dummy_var_340 := printk.ref(.str.106);
    assume {:verifier.code 0} true;
    $p181 := $0.ref;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    goto corral_source_split_9453;

  corral_source_split_9453:
    assume {:verifier.code 0} true;
    goto corral_source_split_9454;

  corral_source_split_9454:
    assume {:verifier.code 0} true;
    $i184 := $zext.i8.i32($i1);
    goto corral_source_split_9455;

  corral_source_split_9455:
    assume {:verifier.code 0} true;
    $i185 := $sext.i32.i64($i184);
    goto corral_source_split_9456;

  corral_source_split_9456:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2400)), $mul.ref(2328, 1)), $mul.ref($i185, 8));
    goto corral_source_split_9457;

  corral_source_split_9457:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p187, $p181);
    goto corral_source_split_9458;

  corral_source_split_9458:
    assume {:verifier.code 0} true;
    $i188 := $zext.i8.i32($i1);
    goto corral_source_split_9459;

  corral_source_split_9459:
    assume {:verifier.code 0} true;
    $i189 := $sext.i32.i64($i188);
    goto corral_source_split_9460;

  corral_source_split_9460:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2400)), $mul.ref(2328, 1)), $mul.ref($i189, 8));
    goto corral_source_split_9461;

  corral_source_split_9461:
    assume {:verifier.code 0} true;
    $p192 := $load.ref($M.7, $p191);
    goto corral_source_split_9462;

  corral_source_split_9462:
    assume {:verifier.code 0} true;
    $i193 := $p2i.ref.i64($p192);
    goto corral_source_split_9463;

  corral_source_split_9463:
    assume {:verifier.code 0} true;
    $i194 := $ne.i64($i193, 0);
    goto corral_source_split_9464;

  corral_source_split_9464:
    assume {:verifier.code 0} true;
    assume {:branchcond $i194} true;
    goto $bb113, $bb114;

  $bb114:
    assume !($i194 == 1);
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    $i64 := $sub.i32(0, 5);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_9246;

  corral_source_split_9246:
    assume {:verifier.code 0} true;
    $i233 := $i64;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    goto corral_source_split_9503;

  corral_source_split_9503:
    assume {:verifier.code 0} true;
    $r := $i233;
    return;

  $bb113:
    assume $i194 == 1;
    goto corral_source_split_9466;

  corral_source_split_9466:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($p13, $mul.ref(0, 368)), $mul.ref(264, 1));
    goto corral_source_split_9467;

  corral_source_split_9467:
    assume {:verifier.code 0} true;
    $i196 := $load.i8($M.7, $p195);
    goto corral_source_split_9468;

  corral_source_split_9468:
    assume {:verifier.code 0} true;
    $i197 := $zext.i8.i32($i196);
    goto corral_source_split_9469;

  corral_source_split_9469:
    assume {:verifier.code 0} true;
    $i198 := $add.i32($i197, 1);
    goto corral_source_split_9470;

  corral_source_split_9470:
    assume {:verifier.code 0} true;
    $i199 := $trunc.i32.i8($i198);
    goto corral_source_split_9471;

  corral_source_split_9471:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($p13, $mul.ref(0, 368)), $mul.ref(264, 1));
    goto corral_source_split_9472;

  corral_source_split_9472:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p200, $i199);
    goto corral_source_split_9473;

  corral_source_split_9473:
    assume {:verifier.code 0} true;
    $i201 := $zext.i8.i32($i1);
    goto corral_source_split_9474;

  corral_source_split_9474:
    assume {:verifier.code 0} true;
    $i202 := $sext.i32.i64($i201);
    goto corral_source_split_9475;

  corral_source_split_9475:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2400)), $mul.ref(2328, 1)), $mul.ref($i202, 8));
    goto corral_source_split_9476;

  corral_source_split_9476:
    assume {:verifier.code 0} true;
    $p205 := $load.ref($M.7, $p204);
    goto corral_source_split_9477;

  corral_source_split_9477:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($add.ref($p205, $mul.ref(0, 1584)), $mul.ref(0, 1)), $mul.ref(192, 1));
    goto corral_source_split_9478;

  corral_source_split_9478:
    assume {:verifier.code 0} true;
    $p208 := $load.ref($M.7, $p207);
    goto corral_source_split_9479;

  corral_source_split_9479:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($p15, $mul.ref($i16, 32)), $mul.ref(16, 1));
    goto corral_source_split_9480;

  corral_source_split_9480:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p209, $p208);
    goto corral_source_split_9481;

  corral_source_split_9481:
    assume {:verifier.code 0} true;
    $i210 := $zext.i8.i32($i1);
    goto corral_source_split_9482;

  corral_source_split_9482:
    assume {:verifier.code 0} true;
    $i211 := $sext.i32.i64($i210);
    goto corral_source_split_9483;

  corral_source_split_9483:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2400)), $mul.ref(2328, 1)), $mul.ref($i211, 8));
    goto corral_source_split_9484;

  corral_source_split_9484:
    assume {:verifier.code 0} true;
    $p214 := $load.ref($M.7, $p213);
    goto corral_source_split_9485;

  corral_source_split_9485:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($add.ref($p214, $mul.ref(0, 1584)), $mul.ref(0, 1)), $mul.ref(192, 1));
    goto corral_source_split_9486;

  corral_source_split_9486:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p216, mxl111sf_adap_fe_init);
    goto corral_source_split_9487;

  corral_source_split_9487:
    assume {:verifier.code 0} true;
    $i217 := $zext.i8.i32($i1);
    goto corral_source_split_9488;

  corral_source_split_9488:
    assume {:verifier.code 0} true;
    $i218 := $sext.i32.i64($i217);
    goto corral_source_split_9489;

  corral_source_split_9489:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2400)), $mul.ref(2328, 1)), $mul.ref($i218, 8));
    goto corral_source_split_9490;

  corral_source_split_9490:
    assume {:verifier.code 0} true;
    $p221 := $load.ref($M.7, $p220);
    goto corral_source_split_9491;

  corral_source_split_9491:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($add.ref($p221, $mul.ref(0, 1584)), $mul.ref(0, 1)), $mul.ref(200, 1));
    goto corral_source_split_9492;

  corral_source_split_9492:
    assume {:verifier.code 0} true;
    $p224 := $load.ref($M.7, $p223);
    goto corral_source_split_9493;

  corral_source_split_9493:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($p15, $mul.ref($i16, 32)), $mul.ref(24, 1));
    goto corral_source_split_9494;

  corral_source_split_9494:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p225, $p224);
    goto corral_source_split_9495;

  corral_source_split_9495:
    assume {:verifier.code 0} true;
    $i226 := $zext.i8.i32($i1);
    goto corral_source_split_9496;

  corral_source_split_9496:
    assume {:verifier.code 0} true;
    $i227 := $sext.i32.i64($i226);
    goto corral_source_split_9497;

  corral_source_split_9497:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2400)), $mul.ref(2328, 1)), $mul.ref($i227, 8));
    goto corral_source_split_9498;

  corral_source_split_9498:
    assume {:verifier.code 0} true;
    $p230 := $load.ref($M.7, $p229);
    goto corral_source_split_9499;

  corral_source_split_9499:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($add.ref($add.ref($p230, $mul.ref(0, 1584)), $mul.ref(0, 1)), $mul.ref(200, 1));
    goto corral_source_split_9500;

  corral_source_split_9500:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p232, mxl111sf_adap_fe_sleep);
    goto corral_source_split_9501;

  corral_source_split_9501:
    assume {:verifier.code 0} true;
    $i233 := 0;
    goto $bb115;

  $bb107:
    assume $i170 == 1;
    goto corral_source_split_9437;

  corral_source_split_9437:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p13, $mul.ref(0, 368)), $mul.ref(15, 1));
    goto corral_source_split_9438;

  corral_source_split_9438:
    assume {:verifier.code 0} true;
    $i172 := $load.i8($M.7, $p171);
    goto corral_source_split_9439;

  corral_source_split_9439:
    assume {:verifier.code 0} true;
    $i173 := $zext.i8.i32($i172);
    goto corral_source_split_9440;

  corral_source_split_9440:
    assume {:verifier.code 0} true;
    $i174 := $eq.i32($i173, 3);
    goto corral_source_split_9441;

  corral_source_split_9441:
    assume {:verifier.code 0} true;
    $p175 := (if $i174 == 1 then hauppauge_lg2161_1040_config else hauppauge_lg2161_1019_config);
    goto corral_source_split_9442;

  corral_source_split_9442:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p3, $mul.ref($i9, 7456)), $mul.ref(424, 1));
    call {:si_unique_call 1336} $p177 := devirtbounce.3($p165, $p175, $p176);
    goto corral_source_split_9443;

  corral_source_split_9443:
    assume {:verifier.code 0} true;
    $p178 := $bitcast.ref.ref($p177);
    goto corral_source_split_9444;

  corral_source_split_9444:
    assume {:verifier.code 0} true;
    $i179 := $p2i.ref.i64($p178);
    goto corral_source_split_9445;

  corral_source_split_9445:
    assume {:verifier.code 0} true;
    $i180 := $eq.i64($i179, 0);
    goto corral_source_split_9446;

  corral_source_split_9446:
    assume {:verifier.code 0} true;
    assume {:branchcond $i180} true;
    goto $bb109, $bb110;

  $bb110:
    assume !($i180 == 1);
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    $p181 := $p177;
    goto $bb112;

  $bb109:
    assume $i180 == 1;
    goto corral_source_split_9450;

  corral_source_split_9450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1338} __symbol_put(.str.104);
    goto corral_source_split_9451;

  corral_source_split_9451:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb104:
    assume $i164 == 1;
    goto corral_source_split_9427;

  corral_source_split_9427:
    assume {:verifier.code 0} true;
    $p165 := $p163;
    goto $bb106;

  $bb101:
    assume $i156 == 1;
    goto corral_source_split_9416;

  corral_source_split_9416:
    assume {:verifier.code 0} true;
    $i64 := $i148;
    goto $bb15;

  $bb95:
    assume $i151 == 1;
    goto corral_source_split_9406;

  corral_source_split_9406:
    assume {:verifier.code 0} true;
    $i152 := $M.10;
    goto corral_source_split_9407;

  corral_source_split_9407:
    assume {:verifier.code 0} true;
    $i153 := $and.i32($i152, 16);
    goto corral_source_split_9408;

  corral_source_split_9408:
    assume {:verifier.code 0} true;
    $i154 := $ne.i32($i153, 0);
    goto corral_source_split_9409;

  corral_source_split_9409:
    assume {:verifier.code 0} true;
    assume {:branchcond $i154} true;
    goto $bb98, $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    assume !($i154 == 1);
    goto $bb97;

  $bb98:
    assume $i154 == 1;
    goto corral_source_split_9411;

  corral_source_split_9411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1332} vslice_dummy_var_338 := printk.ref.ref.i32.i32(.str.5, .str.116, $i148, 626);
    goto corral_source_split_9412;

  corral_source_split_9412:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb77:
    assume $i131 == 1;
    goto corral_source_split_9369;

  corral_source_split_9369:
    assume {:verifier.code 0} true;
    $i132 := $M.10;
    goto corral_source_split_9370;

  corral_source_split_9370:
    assume {:verifier.code 0} true;
    $i133 := $ne.i32($i132, 0);
    goto corral_source_split_9371;

  corral_source_split_9371:
    assume {:verifier.code 0} true;
    assume {:branchcond $i133} true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i133 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1325} $i135 := mxl1x1sf_get_chip_info($p13);
    call {:si_unique_call 1326} {:cexpr "___ret"} boogie_si_record_i32($i135);
    goto corral_source_split_9376;

  corral_source_split_9376:
    assume {:verifier.code 0} true;
    $i136 := $slt.i32($i135, 0);
    goto corral_source_split_9377;

  corral_source_split_9377:
    assume {:verifier.code 0} true;
    $i137 := $zext.i1.i32($i136);
    call {:si_unique_call 1327} {:cexpr "__ret___6"} boogie_si_record_i32($i137);
    goto corral_source_split_9378;

  corral_source_split_9378:
    assume {:verifier.code 0} true;
    $i138 := $ne.i32($i137, 0);
    goto corral_source_split_9379;

  corral_source_split_9379:
    assume {:verifier.code 0} true;
    assume {:branchcond $i138} true;
    goto $bb82, $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    assume !($i138 == 1);
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    $i143 := $ne.i32($i137, 0);
    goto corral_source_split_9389;

  corral_source_split_9389:
    assume {:verifier.code 0} true;
    assume {:branchcond $i143} true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i143 == 1);
    goto corral_source_split_9394;

  corral_source_split_9394:
    assume {:verifier.code 0} true;
    $i145 := $M.10;
    goto corral_source_split_9395;

  corral_source_split_9395:
    assume {:verifier.code 0} true;
    $i146 := $ne.i32($i145, 0);
    goto corral_source_split_9396;

  corral_source_split_9396:
    assume {:verifier.code 0} true;
    assume {:branchcond $i146} true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i146 == 1);
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    $i148 := $i135;
    goto $bb94;

  $bb91:
    assume $i146 == 1;
    goto corral_source_split_9398;

  corral_source_split_9398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1330} vslice_dummy_var_337 := printk.ref.ref(.str.64, .str.116);
    goto corral_source_split_9399;

  corral_source_split_9399:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb88:
    assume $i143 == 1;
    goto corral_source_split_9391;

  corral_source_split_9391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1329} vslice_dummy_var_336 := printk.ref(.str.63);
    goto corral_source_split_9392;

  corral_source_split_9392:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb82:
    assume $i138 == 1;
    goto corral_source_split_9381;

  corral_source_split_9381:
    assume {:verifier.code 0} true;
    $i139 := $M.10;
    goto corral_source_split_9382;

  corral_source_split_9382:
    assume {:verifier.code 0} true;
    $i140 := $and.i32($i139, 16);
    goto corral_source_split_9383;

  corral_source_split_9383:
    assume {:verifier.code 0} true;
    $i141 := $ne.i32($i140, 0);
    goto corral_source_split_9384;

  corral_source_split_9384:
    assume {:verifier.code 0} true;
    assume {:branchcond $i141} true;
    goto $bb85, $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    assume !($i141 == 1);
    goto $bb84;

  $bb85:
    assume $i141 == 1;
    goto corral_source_split_9386;

  corral_source_split_9386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1328} vslice_dummy_var_335 := printk.ref.ref.i32.i32(.str.5, .str.116, $i135, 625);
    goto corral_source_split_9387;

  corral_source_split_9387:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb79:
    assume $i133 == 1;
    goto corral_source_split_9373;

  corral_source_split_9373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1324} vslice_dummy_var_334 := printk.ref.ref(.str.62, .str.116);
    goto corral_source_split_9374;

  corral_source_split_9374:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb71:
    assume $i126 == 1;
    goto corral_source_split_9359;

  corral_source_split_9359:
    assume {:verifier.code 0} true;
    $i127 := $M.10;
    goto corral_source_split_9360;

  corral_source_split_9360:
    assume {:verifier.code 0} true;
    $i128 := $and.i32($i127, 16);
    goto corral_source_split_9361;

  corral_source_split_9361:
    assume {:verifier.code 0} true;
    $i129 := $ne.i32($i128, 0);
    goto corral_source_split_9362;

  corral_source_split_9362:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    assume !($i129 == 1);
    goto $bb73;

  $bb74:
    assume $i129 == 1;
    goto corral_source_split_9364;

  corral_source_split_9364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1323} vslice_dummy_var_333 := printk.ref.ref.i32.i32(.str.5, .str.116, $i123, 625);
    goto corral_source_split_9365;

  corral_source_split_9365:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb68:
    assume $i122 == 1;
    goto corral_source_split_9352;

  corral_source_split_9352:
    assume {:verifier.code 0} true;
    $i64 := $i114;
    goto $bb15;

  $bb62:
    assume $i117 == 1;
    goto corral_source_split_9342;

  corral_source_split_9342:
    assume {:verifier.code 0} true;
    $i118 := $M.10;
    goto corral_source_split_9343;

  corral_source_split_9343:
    assume {:verifier.code 0} true;
    $i119 := $and.i32($i118, 16);
    goto corral_source_split_9344;

  corral_source_split_9344:
    assume {:verifier.code 0} true;
    $i120 := $ne.i32($i119, 0);
    goto corral_source_split_9345;

  corral_source_split_9345:
    assume {:verifier.code 0} true;
    assume {:branchcond $i120} true;
    goto $bb65, $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    assume !($i120 == 1);
    goto $bb64;

  $bb65:
    assume $i120 == 1;
    goto corral_source_split_9347;

  corral_source_split_9347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1319} vslice_dummy_var_332 := printk.ref.ref.i32.i32(.str.5, .str.116, $i114, 622);
    goto corral_source_split_9348;

  corral_source_split_9348:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb59:
    assume $i111 == 1;
    goto corral_source_split_9333;

  corral_source_split_9333:
    assume {:verifier.code 0} true;
    $i64 := $i103;
    goto $bb15;

  $bb53:
    assume $i106 == 1;
    goto corral_source_split_9323;

  corral_source_split_9323:
    assume {:verifier.code 0} true;
    $i107 := $M.10;
    goto corral_source_split_9324;

  corral_source_split_9324:
    assume {:verifier.code 0} true;
    $i108 := $and.i32($i107, 16);
    goto corral_source_split_9325;

  corral_source_split_9325:
    assume {:verifier.code 0} true;
    $i109 := $ne.i32($i108, 0);
    goto corral_source_split_9326;

  corral_source_split_9326:
    assume {:verifier.code 0} true;
    assume {:branchcond $i109} true;
    goto $bb56, $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    assume !($i109 == 1);
    goto $bb55;

  $bb56:
    assume $i109 == 1;
    goto corral_source_split_9328;

  corral_source_split_9328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1315} vslice_dummy_var_331 := printk.ref.ref.i32.i32(.str.5, .str.116, $i103, 619);
    goto corral_source_split_9329;

  corral_source_split_9329:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb50:
    assume $i102 == 1;
    goto corral_source_split_9316;

  corral_source_split_9316:
    assume {:verifier.code 0} true;
    $i64 := $i94;
    goto $bb15;

  $bb44:
    assume $i97 == 1;
    goto corral_source_split_9306;

  corral_source_split_9306:
    assume {:verifier.code 0} true;
    $i98 := $M.10;
    goto corral_source_split_9307;

  corral_source_split_9307:
    assume {:verifier.code 0} true;
    $i99 := $and.i32($i98, 16);
    goto corral_source_split_9308;

  corral_source_split_9308:
    assume {:verifier.code 0} true;
    $i100 := $ne.i32($i99, 0);
    goto corral_source_split_9309;

  corral_source_split_9309:
    assume {:verifier.code 0} true;
    assume {:branchcond $i100} true;
    goto $bb47, $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    assume !($i100 == 1);
    goto $bb46;

  $bb47:
    assume $i100 == 1;
    goto corral_source_split_9311;

  corral_source_split_9311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1311} vslice_dummy_var_330 := printk.ref.ref.i32.i32(.str.5, .str.116, $i94, 615);
    goto corral_source_split_9312;

  corral_source_split_9312:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb41:
    assume $i93 == 1;
    goto corral_source_split_9299;

  corral_source_split_9299:
    assume {:verifier.code 0} true;
    $i64 := $i85;
    goto $bb15;

  $bb35:
    assume $i88 == 1;
    goto corral_source_split_9289;

  corral_source_split_9289:
    assume {:verifier.code 0} true;
    $i89 := $M.10;
    goto corral_source_split_9290;

  corral_source_split_9290:
    assume {:verifier.code 0} true;
    $i90 := $and.i32($i89, 16);
    goto corral_source_split_9291;

  corral_source_split_9291:
    assume {:verifier.code 0} true;
    $i91 := $ne.i32($i90, 0);
    goto corral_source_split_9292;

  corral_source_split_9292:
    assume {:verifier.code 0} true;
    assume {:branchcond $i91} true;
    goto $bb38, $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume !($i91 == 1);
    goto $bb37;

  $bb38:
    assume $i91 == 1;
    goto corral_source_split_9294;

  corral_source_split_9294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1307} vslice_dummy_var_329 := printk.ref.ref.i32.i32(.str.5, .str.116, $i85, 612);
    goto corral_source_split_9295;

  corral_source_split_9295:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb32:
    assume $i84 == 1;
    goto corral_source_split_9282;

  corral_source_split_9282:
    assume {:verifier.code 0} true;
    $i64 := $i76;
    goto $bb15;

  $bb26:
    assume $i79 == 1;
    goto corral_source_split_9272;

  corral_source_split_9272:
    assume {:verifier.code 0} true;
    $i80 := $M.10;
    goto corral_source_split_9273;

  corral_source_split_9273:
    assume {:verifier.code 0} true;
    $i81 := $and.i32($i80, 16);
    goto corral_source_split_9274;

  corral_source_split_9274:
    assume {:verifier.code 0} true;
    $i82 := $ne.i32($i81, 0);
    goto corral_source_split_9275;

  corral_source_split_9275:
    assume {:verifier.code 0} true;
    assume {:branchcond $i82} true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i82 == 1);
    goto $bb28;

  $bb29:
    assume $i82 == 1;
    goto corral_source_split_9277;

  corral_source_split_9277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1303} vslice_dummy_var_328 := printk.ref.ref.i32.i32(.str.5, .str.116, $i76, 608);
    goto corral_source_split_9278;

  corral_source_split_9278:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb23:
    assume $i73 == 1;
    goto corral_source_split_9263;

  corral_source_split_9263:
    assume {:verifier.code 0} true;
    $i64 := $i65;
    goto $bb15;

  $bb17:
    assume $i68 == 1;
    goto corral_source_split_9253;

  corral_source_split_9253:
    assume {:verifier.code 0} true;
    $i69 := $M.10;
    goto corral_source_split_9254;

  corral_source_split_9254:
    assume {:verifier.code 0} true;
    $i70 := $and.i32($i69, 16);
    goto corral_source_split_9255;

  corral_source_split_9255:
    assume {:verifier.code 0} true;
    $i71 := $ne.i32($i70, 0);
    goto corral_source_split_9256;

  corral_source_split_9256:
    assume {:verifier.code 0} true;
    assume {:branchcond $i71} true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i71 == 1);
    goto $bb19;

  $bb20:
    assume $i71 == 1;
    goto corral_source_split_9258;

  corral_source_split_9258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1299} vslice_dummy_var_327 := printk.ref.ref.i32.i32(.str.5, .str.116, $i65, 604);
    goto corral_source_split_9259;

  corral_source_split_9259:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb13:
    assume $i63 == 1;
    goto corral_source_split_9244;

  corral_source_split_9244:
    assume {:verifier.code 0} true;
    $i64 := $i55;
    goto $bb15;

  $bb7:
    assume $i58 == 1;
    goto corral_source_split_9234;

  corral_source_split_9234:
    assume {:verifier.code 0} true;
    $i59 := $M.10;
    goto corral_source_split_9235;

  corral_source_split_9235:
    assume {:verifier.code 0} true;
    $i60 := $and.i32($i59, 16);
    goto corral_source_split_9236;

  corral_source_split_9236:
    assume {:verifier.code 0} true;
    $i61 := $ne.i32($i60, 0);
    goto corral_source_split_9237;

  corral_source_split_9237:
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i61 == 1);
    goto $bb9;

  $bb10:
    assume $i61 == 1;
    goto corral_source_split_9239;

  corral_source_split_9239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1295} vslice_dummy_var_326 := printk.ref.ref.i32.i32(.str.5, .str.116, $i55, 601);
    goto corral_source_split_9240;

  corral_source_split_9240:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb4:
    assume $i47 == 1;
    goto corral_source_split_9216;

  corral_source_split_9216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1291} vslice_dummy_var_325 := printk.ref(.str.82);
    goto corral_source_split_9217;

  corral_source_split_9217:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i33 == 1;
    goto corral_source_split_9195;

  corral_source_split_9195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1288} __dynamic_pr_debug.ref.ref.ref($p2, .str.77, .str.116);
    goto corral_source_split_9196;

  corral_source_split_9196:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mxl111sf_ant_hunt: ref;

axiom mxl111sf_ant_hunt == $sub.ref(0, 402724);

procedure mxl111sf_ant_hunt($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr, $M.15, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7;



implementation mxl111sf_ant_hunt($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i8;
  var $i18: i64;
  var $i19: i64;
  var $i20: i64;
  var $i21: i64;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i30: i1;
  var $p33: ref;
  var $p34: ref;
  var $p39: ref;
  var $p40: ref;
  var $p45: ref;
  var $p46: ref;
  var $p51: ref;
  var $p52: ref;
  var $i54: i16;
  var $i55: i32;
  var $i56: i16;
  var $i57: i32;
  var $i58: i1;
  var $i60: i16;
  var $i61: i32;
  var $i62: i16;
  var $i63: i32;
  var $i64: i16;
  var $i65: i32;
  var $i66: i16;
  var $i67: i32;
  var $i69: i16;
  var $i70: i32;
  var $i71: i16;
  var $i72: i32;
  var $i73: i16;
  var $i74: i32;
  var $i75: i16;
  var $i76: i32;
  var vslice_dummy_var_341: i32;
  var vslice_dummy_var_342: i32;
  var vslice_dummy_var_343: i32;
  var vslice_dummy_var_344: i32;
  var vslice_dummy_var_345: i32;
  var vslice_dummy_var_346: i32;
  var vslice_dummy_var_347: i32;
  var vslice_dummy_var_348: i32;
  var vslice_dummy_var_349: i32;
  var vslice_dummy_var_350: i32;
  var vslice_dummy_var_351: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1339} $p1 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1340} $p2 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1341} $p3 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1342} $p4 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    goto corral_source_split_9505;

  corral_source_split_9505:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1584)), $mul.ref(784, 1));
    goto corral_source_split_9506;

  corral_source_split_9506:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.7, $p5);
    goto corral_source_split_9507;

  corral_source_split_9507:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 256)), $mul.ref(56, 1));
    goto corral_source_split_9508;

  corral_source_split_9508:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.7, $p7);
    goto corral_source_split_9509;

  corral_source_split_9509:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_9510;

  corral_source_split_9510:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_9511;

  corral_source_split_9511:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 1584)), $mul.ref(784, 1));
    goto corral_source_split_9512;

  corral_source_split_9512:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.7, $p11);
    goto corral_source_split_9513;

  corral_source_split_9513:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 256)), $mul.ref(56, 1));
    goto corral_source_split_9514;

  corral_source_split_9514:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.7, $p13);
    goto corral_source_split_9515;

  corral_source_split_9515:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_9516;

  corral_source_split_9516:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 2400)), $mul.ref(320, 1));
    goto corral_source_split_9517;

  corral_source_split_9517:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.7, $p16);
    goto corral_source_split_9518;

  corral_source_split_9518:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i64($i17);
    goto corral_source_split_9519;

  corral_source_split_9519:
    assume {:verifier.code 0} true;
    $i19 := $mul.i64($i18, 2400);
    goto corral_source_split_9520;

  corral_source_split_9520:
    assume {:verifier.code 0} true;
    $i20 := $add.i64($i19, 2344);
    goto corral_source_split_9521;

  corral_source_split_9521:
    assume {:verifier.code 0} true;
    $i21 := $sub.i64(0, $i20);
    goto corral_source_split_9522;

  corral_source_split_9522:
    assume {:verifier.code 0} true;
    goto corral_source_split_9523;

  corral_source_split_9523:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p10, $mul.ref($i21, 7456)), $mul.ref(7448, 1));
    goto corral_source_split_9524;

  corral_source_split_9524:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.7, $p23);
    goto corral_source_split_9525;

  corral_source_split_9525:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_9526;

  corral_source_split_9526:
    assume {:verifier.code 0} true;
    $i26 := $M.32;
    call {:si_unique_call 1343} {:cexpr "antctrl"} boogie_si_record_i32($i26);
    goto corral_source_split_9527;

  corral_source_split_9527:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_9528;

  corral_source_split_9528:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i27 == 1);
    goto corral_source_split_9532;

  corral_source_split_9532:
    assume {:verifier.code 0} true;
    $i28 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9534;

  corral_source_split_9534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1344} vslice_dummy_var_341 := mxl111sf_set_ant_path($p25, $i28);
    goto corral_source_split_9535;

  corral_source_split_9535:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i26, 0);
    goto corral_source_split_9536;

  corral_source_split_9536:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb4:
    assume $i30 == 1;
    goto corral_source_split_9538;

  corral_source_split_9538:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1584)), $mul.ref(0, 1)), $mul.ref(392, 1)), $mul.ref(256, 1));
    goto corral_source_split_9539;

  corral_source_split_9539:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.7, $p33);
    call {:si_unique_call 1345} vslice_dummy_var_342 := devirtbounce.5($p34, $p0, $p1);
    goto corral_source_split_9540;

  corral_source_split_9540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1346} vslice_dummy_var_343 := mxl111sf_set_ant_path($p25, 1);
    goto corral_source_split_9541;

  corral_source_split_9541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1347} msleep(90);
    goto corral_source_split_9542;

  corral_source_split_9542:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1584)), $mul.ref(0, 1)), $mul.ref(392, 1)), $mul.ref(256, 1));
    goto corral_source_split_9543;

  corral_source_split_9543:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.7, $p39);
    call {:si_unique_call 1348} vslice_dummy_var_344 := devirtbounce.5($p40, $p0, $p2);
    goto corral_source_split_9544;

  corral_source_split_9544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1349} vslice_dummy_var_345 := mxl111sf_set_ant_path($p25, 1);
    goto corral_source_split_9545;

  corral_source_split_9545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1350} msleep(90);
    goto corral_source_split_9546;

  corral_source_split_9546:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1584)), $mul.ref(0, 1)), $mul.ref(392, 1)), $mul.ref(256, 1));
    goto corral_source_split_9547;

  corral_source_split_9547:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.7, $p45);
    call {:si_unique_call 1351} vslice_dummy_var_346 := devirtbounce.5($p46, $p0, $p3);
    goto corral_source_split_9548;

  corral_source_split_9548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1352} vslice_dummy_var_347 := mxl111sf_set_ant_path($p25, 2);
    goto corral_source_split_9549;

  corral_source_split_9549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1353} msleep(90);
    goto corral_source_split_9550;

  corral_source_split_9550:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1584)), $mul.ref(0, 1)), $mul.ref(392, 1)), $mul.ref(256, 1));
    goto corral_source_split_9551;

  corral_source_split_9551:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.7, $p51);
    call {:si_unique_call 1354} vslice_dummy_var_348 := devirtbounce.5($p52, $p0, $p4);
    goto corral_source_split_9552;

  corral_source_split_9552:
    assume {:verifier.code 0} true;
    $i54 := $load.i16($M.7, $p3);
    goto corral_source_split_9553;

  corral_source_split_9553:
    assume {:verifier.code 0} true;
    $i55 := $zext.i16.i32($i54);
    goto corral_source_split_9554;

  corral_source_split_9554:
    assume {:verifier.code 0} true;
    $i56 := $load.i16($M.7, $p4);
    goto corral_source_split_9555;

  corral_source_split_9555:
    assume {:verifier.code 0} true;
    $i57 := $zext.i16.i32($i56);
    goto corral_source_split_9556;

  corral_source_split_9556:
    assume {:verifier.code 0} true;
    $i58 := $sge.i32($i55, $i57);
    goto corral_source_split_9557;

  corral_source_split_9557:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i58 == 1);
    goto corral_source_split_9571;

  corral_source_split_9571:
    assume {:verifier.code 0} true;
    $i69 := $load.i16($M.7, $p1);
    goto corral_source_split_9572;

  corral_source_split_9572:
    assume {:verifier.code 0} true;
    $i70 := $zext.i16.i32($i69);
    goto corral_source_split_9573;

  corral_source_split_9573:
    assume {:verifier.code 0} true;
    $i71 := $load.i16($M.7, $p2);
    goto corral_source_split_9574;

  corral_source_split_9574:
    assume {:verifier.code 0} true;
    $i72 := $zext.i16.i32($i71);
    goto corral_source_split_9575;

  corral_source_split_9575:
    assume {:verifier.code 0} true;
    $i73 := $load.i16($M.7, $p3);
    goto corral_source_split_9576;

  corral_source_split_9576:
    assume {:verifier.code 0} true;
    $i74 := $zext.i16.i32($i73);
    goto corral_source_split_9577;

  corral_source_split_9577:
    assume {:verifier.code 0} true;
    $i75 := $load.i16($M.7, $p4);
    goto corral_source_split_9578;

  corral_source_split_9578:
    assume {:verifier.code 0} true;
    $i76 := $zext.i16.i32($i75);
    goto corral_source_split_9579;

  corral_source_split_9579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1357} vslice_dummy_var_351 := printk.ref.ref.i32.ref.i32.i32.i32.i32(.str.119, .str.120, 852, .str.122, $i70, $i72, $i74, $i76);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i58 == 1;
    goto corral_source_split_9559;

  corral_source_split_9559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1355} vslice_dummy_var_349 := mxl111sf_set_ant_path($p25, 1);
    goto corral_source_split_9560;

  corral_source_split_9560:
    assume {:verifier.code 0} true;
    $i60 := $load.i16($M.7, $p1);
    goto corral_source_split_9561;

  corral_source_split_9561:
    assume {:verifier.code 0} true;
    $i61 := $zext.i16.i32($i60);
    goto corral_source_split_9562;

  corral_source_split_9562:
    assume {:verifier.code 0} true;
    $i62 := $load.i16($M.7, $p2);
    goto corral_source_split_9563;

  corral_source_split_9563:
    assume {:verifier.code 0} true;
    $i63 := $zext.i16.i32($i62);
    goto corral_source_split_9564;

  corral_source_split_9564:
    assume {:verifier.code 0} true;
    $i64 := $load.i16($M.7, $p3);
    goto corral_source_split_9565;

  corral_source_split_9565:
    assume {:verifier.code 0} true;
    $i65 := $zext.i16.i32($i64);
    goto corral_source_split_9566;

  corral_source_split_9566:
    assume {:verifier.code 0} true;
    $i66 := $load.i16($M.7, $p4);
    goto corral_source_split_9567;

  corral_source_split_9567:
    assume {:verifier.code 0} true;
    $i67 := $zext.i16.i32($i66);
    goto corral_source_split_9568;

  corral_source_split_9568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1356} vslice_dummy_var_350 := printk.ref.ref.i32.ref.i32.i32.i32.i32(.str.119, .str.120, 848, .str.121, $i61, $i63, $i65, $i67);
    goto corral_source_split_9569;

  corral_source_split_9569:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb1:
    assume $i27 == 1;
    goto corral_source_split_9530;

  corral_source_split_9530:
    assume {:verifier.code 0} true;
    $i28 := $i26;
    goto $bb3;
}



const mxl111sf_set_ant_path: ref;

axiom mxl111sf_set_ant_path == $sub.ref(0, 403756);

procedure mxl111sf_set_ant_path($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.15, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation mxl111sf_set_ant_path($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i1;
  var $i3: i32;
  var $i4: i8;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1358} {:cexpr "mxl111sf_set_ant_path:arg:antpath"} boogie_si_record_i32($i1);
    goto corral_source_split_9581;

  corral_source_split_9581:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 2);
    goto corral_source_split_9582;

  corral_source_split_9582:
    assume {:verifier.code 0} true;
    $i3 := (if $i2 == 1 then 63 else 0);
    goto corral_source_split_9583;

  corral_source_split_9583:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i32.i8($i3);
    goto corral_source_split_9584;

  corral_source_split_9584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1359} $i5 := mxl111sf_idac_config($p0, 1, 1, $i4, 0);
    call {:si_unique_call 1360} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_9585;

  corral_source_split_9585:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const mxl111sf_idac_config: ref;

axiom mxl111sf_idac_config == $sub.ref(0, 404788);

procedure mxl111sf_idac_config($p0: ref, $i1: i8, $i2: i8, $i3: i8, $i4: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.15, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation mxl111sf_idac_config($p0: ref, $i1: i8, $i2: i8, $i3: i8, $i4: i8) returns ($r: i32)
{
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i32;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i32;
  var $i14: i8;
  var $i16: i32;
  var $i17: i32;
  var $i18: i8;
  var $i15: i8;
  var $i20: i32;
  var $i21: i32;
  var $i22: i8;
  var $i23: i32;
  var $i24: i32;
  var $i25: i8;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i32;
  var $i32: i1;
  var $i19: i8;
  var $i34: i32;
  var $i35: i8;
  var $i36: i32;
  var $i37: i1;
  var $i38: i32;
  var $i39: i1;
  var $i40: i32;
  var $i41: i32;
  var $i42: i1;
  var vslice_dummy_var_352: i32;
  var vslice_dummy_var_353: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1361} {:cexpr "mxl111sf_idac_config:arg:control_mode"} boogie_si_record_i8($i1);
    call {:si_unique_call 1362} {:cexpr "mxl111sf_idac_config:arg:current_setting"} boogie_si_record_i8($i2);
    call {:si_unique_call 1363} {:cexpr "mxl111sf_idac_config:arg:current_value"} boogie_si_record_i8($i3);
    call {:si_unique_call 1364} {:cexpr "mxl111sf_idac_config:arg:hysteresis_value"} boogie_si_record_i8($i4);
    call {:si_unique_call 1365} {:cexpr "mxl111sf_idac_config:arg:val"} boogie_si_record_i8($i3);
    goto corral_source_split_9587;

  corral_source_split_9587:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i1);
    goto corral_source_split_9588;

  corral_source_split_9588:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 1);
    goto corral_source_split_9589;

  corral_source_split_9589:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_9598;

  corral_source_split_9598:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i3);
    goto corral_source_split_9599;

  corral_source_split_9599:
    assume {:verifier.code 0} true;
    $i21 := $and.i32($i20, 127);
    goto corral_source_split_9600;

  corral_source_split_9600:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i32.i8($i21);
    call {:si_unique_call 1367} {:cexpr "val"} boogie_si_record_i8($i22);
    goto corral_source_split_9601;

  corral_source_split_9601:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i4);
    goto corral_source_split_9602;

  corral_source_split_9602:
    assume {:verifier.code 0} true;
    $i24 := $and.i32($i23, 63);
    goto corral_source_split_9603;

  corral_source_split_9603:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i32.i8($i24);
    goto corral_source_split_9604;

  corral_source_split_9604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1368} $i26 := mxl111sf_write_reg($p0, 11, $i25);
    call {:si_unique_call 1369} {:cexpr "ret"} boogie_si_record_i32($i26);
    goto corral_source_split_9605;

  corral_source_split_9605:
    assume {:verifier.code 0} true;
    $i27 := $slt.i32($i26, 0);
    goto corral_source_split_9606;

  corral_source_split_9606:
    assume {:verifier.code 0} true;
    $i28 := $zext.i1.i32($i27);
    call {:si_unique_call 1370} {:cexpr "__ret"} boogie_si_record_i32($i28);
    goto corral_source_split_9607;

  corral_source_split_9607:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_9608;

  corral_source_split_9608:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i19 := $i22;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_9621;

  corral_source_split_9621:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i19);
    goto corral_source_split_9622;

  corral_source_split_9622:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i32.i8($i34);
    goto corral_source_split_9623;

  corral_source_split_9623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1373} $i36 := mxl111sf_write_reg($p0, 12, $i35);
    call {:si_unique_call 1374} {:cexpr "ret"} boogie_si_record_i32($i36);
    goto corral_source_split_9624;

  corral_source_split_9624:
    assume {:verifier.code 0} true;
    $i37 := $slt.i32($i36, 0);
    goto corral_source_split_9625;

  corral_source_split_9625:
    assume {:verifier.code 0} true;
    $i38 := $zext.i1.i32($i37);
    call {:si_unique_call 1375} {:cexpr "__ret___0"} boogie_si_record_i32($i38);
    goto corral_source_split_9626;

  corral_source_split_9626:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_9627;

  corral_source_split_9627:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i39 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $r := $i36;
    return;

  $bb13:
    assume $i39 == 1;
    goto corral_source_split_9637;

  corral_source_split_9637:
    assume {:verifier.code 0} true;
    $i40 := $M.10;
    goto corral_source_split_9638;

  corral_source_split_9638:
    assume {:verifier.code 0} true;
    $i41 := $and.i32($i40, 16);
    goto corral_source_split_9639;

  corral_source_split_9639:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_9640;

  corral_source_split_9640:
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb15;

  $bb16:
    assume $i42 == 1;
    goto corral_source_split_9642;

  corral_source_split_9642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1377} vslice_dummy_var_353 := printk.ref.ref.i32.i32(.str.5, .str.36, $i36, 334);
    goto corral_source_split_9643;

  corral_source_split_9643:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb7:
    assume $i29 == 1;
    goto corral_source_split_9629;

  corral_source_split_9629:
    assume {:verifier.code 0} true;
    $i30 := $M.10;
    goto corral_source_split_9630;

  corral_source_split_9630:
    assume {:verifier.code 0} true;
    $i31 := $and.i32($i30, 16);
    goto corral_source_split_9631;

  corral_source_split_9631:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_9632;

  corral_source_split_9632:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb9;

  $bb10:
    assume $i32 == 1;
    goto corral_source_split_9634;

  corral_source_split_9634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1376} vslice_dummy_var_352 := printk.ref.ref.i32.i32(.str.5, .str.36, $i26, 330);
    goto corral_source_split_9635;

  corral_source_split_9635:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_9591;

  corral_source_split_9591:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i3);
    goto corral_source_split_9592;

  corral_source_split_9592:
    assume {:verifier.code 0} true;
    $i8 := $or.i32($i7, 128);
    goto corral_source_split_9593;

  corral_source_split_9593:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i8($i8);
    call {:si_unique_call 1366} {:cexpr "val"} boogie_si_record_i8($i9);
    goto corral_source_split_9594;

  corral_source_split_9594:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i2);
    goto corral_source_split_9595;

  corral_source_split_9595:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 1);
    goto corral_source_split_9596;

  corral_source_split_9596:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i11 == 1);
    goto corral_source_split_9615;

  corral_source_split_9615:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i9);
    goto corral_source_split_9616;

  corral_source_split_9616:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i16, 191);
    goto corral_source_split_9617;

  corral_source_split_9617:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i8($i17);
    call {:si_unique_call 1372} {:cexpr "val"} boogie_si_record_i8($i18);
    assume {:verifier.code 0} true;
    $i15 := $i18;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_9619;

  corral_source_split_9619:
    assume {:verifier.code 0} true;
    $i19 := $i15;
    goto $bb6;

  $bb3:
    assume $i11 == 1;
    goto corral_source_split_9610;

  corral_source_split_9610:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i9);
    goto corral_source_split_9611;

  corral_source_split_9611:
    assume {:verifier.code 0} true;
    $i13 := $or.i32($i12, 64);
    goto corral_source_split_9612;

  corral_source_split_9612:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i8($i13);
    call {:si_unique_call 1371} {:cexpr "val"} boogie_si_record_i8($i14);
    goto corral_source_split_9613;

  corral_source_split_9613:
    assume {:verifier.code 0} true;
    $i15 := $i14;
    goto $bb5;
}



const ldv_assume: ref;

axiom ldv_assume == $sub.ref(0, 405820);

procedure ldv_assume($i0: i32);
  free requires assertsPassed;



implementation ldv_assume($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1378} {:cexpr "ldv_assume:arg:expression"} boogie_si_record_i32($i0);
    goto corral_source_split_9645;

  corral_source_split_9645:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_9646;

  corral_source_split_9646:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_9648;

  corral_source_split_9648:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call ldv_assume_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const ldv_is_err: ref;

axiom ldv_is_err == $sub.ref(0, 406852);

procedure ldv_is_err($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation ldv_is_err($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9650;

  corral_source_split_9650:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_9651;

  corral_source_split_9651:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 4294967295);
    goto corral_source_split_9652;

  corral_source_split_9652:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_9653;

  corral_source_split_9653:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_9654;

  corral_source_split_9654:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ldv_EMGentry_exit_mxl111sf_usb_driver_exit_11_2: ref;

axiom ldv_EMGentry_exit_mxl111sf_usb_driver_exit_11_2 == $sub.ref(0, 407884);

procedure ldv_EMGentry_exit_mxl111sf_usb_driver_exit_11_2($p0: ref);
  free requires assertsPassed;



implementation ldv_EMGentry_exit_mxl111sf_usb_driver_exit_11_2($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9656;

  corral_source_split_9656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1379} mxl111sf_usb_driver_exit();
    goto corral_source_split_9657;

  corral_source_split_9657:
    assume {:verifier.code 0} true;
    return;
}



const mxl111sf_usb_driver_exit: ref;

axiom mxl111sf_usb_driver_exit == $sub.ref(0, 408916);

procedure mxl111sf_usb_driver_exit();
  free requires assertsPassed;



implementation mxl111sf_usb_driver_exit()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9659;

  corral_source_split_9659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1380} ldv_usb_deregister_124(mxl111sf_usb_driver);
    goto corral_source_split_9660;

  corral_source_split_9660:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_deregister_124: ref;

axiom ldv_usb_deregister_124 == $sub.ref(0, 409948);

procedure ldv_usb_deregister_124($p0: ref);
  free requires assertsPassed;



implementation ldv_usb_deregister_124($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9662;

  corral_source_split_9662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1381} usb_deregister($p0);
    goto corral_source_split_9663;

  corral_source_split_9663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1382} ldv_usb_deregister($0.ref, $p0);
    goto corral_source_split_9664;

  corral_source_split_9664:
    assume {:verifier.code 0} true;
    return;
}



const usb_deregister: ref;

axiom usb_deregister == $sub.ref(0, 410980);

procedure usb_deregister($p0: ref);
  free requires assertsPassed;



implementation usb_deregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9666;

  corral_source_split_9666:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_deregister: ref;

axiom ldv_usb_deregister == $sub.ref(0, 412012);

procedure ldv_usb_deregister($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ldv_usb_deregister($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9668;

  corral_source_split_9668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1383} ldv_dispatch_deregister_9_1($p1);
    goto corral_source_split_9669;

  corral_source_split_9669:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dispatch_deregister_9_1: ref;

axiom ldv_dispatch_deregister_9_1 == $sub.ref(0, 413044);

procedure ldv_dispatch_deregister_9_1($p0: ref);
  free requires assertsPassed;



implementation ldv_dispatch_deregister_9_1($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9671;

  corral_source_split_9671:
    assume {:verifier.code 0} true;
    return;
}



const ldv_EMGentry_init_mxl111sf_usb_driver_init_11_11: ref;

axiom ldv_EMGentry_init_mxl111sf_usb_driver_init_11_11 == $sub.ref(0, 414076);

procedure ldv_EMGentry_init_mxl111sf_usb_driver_init_11_11($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.33, $M.7, $CurrAddr, $M.0, $M.34, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.11, $M.12, $M.15, $M.18, $M.19, $M.20, $M.21, $M.22, assertsPassed, $M.17, $M.23, $M.24, $M.25;



implementation ldv_EMGentry_init_mxl111sf_usb_driver_init_11_11($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9673;

  corral_source_split_9673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1384} $i1 := mxl111sf_usb_driver_init();
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    call {:si_unique_call 1385} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_9674;

  corral_source_split_9674:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;

  SeqInstr_49:
    assume !assertsPassed;
    return;
}



const mxl111sf_usb_driver_init: ref;

axiom mxl111sf_usb_driver_init == $sub.ref(0, 415108);

procedure mxl111sf_usb_driver_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.33, $M.7, $CurrAddr, $M.0, $M.34, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.11, $M.12, $M.15, $M.18, $M.19, $M.20, $M.21, $M.22, assertsPassed, $M.17, $M.23, $M.24, $M.25;



implementation mxl111sf_usb_driver_init() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9676;

  corral_source_split_9676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1386} $i0 := ldv_usb_register_driver_123(mxl111sf_usb_driver, __this_module, .str.2);
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    call {:si_unique_call 1387} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_9677;

  corral_source_split_9677:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  SeqInstr_52:
    assume !assertsPassed;
    return;
}



const ldv_usb_register_driver_123: ref;

axiom ldv_usb_register_driver_123 == $sub.ref(0, 416140);

procedure ldv_usb_register_driver_123($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.33, $M.7, $CurrAddr, $M.0, $M.34, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.11, $M.12, $M.15, $M.18, $M.19, $M.20, $M.21, $M.22, assertsPassed, $M.17, $M.23, $M.24, $M.25;



implementation ldv_usb_register_driver_123($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9679;

  corral_source_split_9679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1388} $i3 := usb_register_driver($p0, $p1, $p2);
    call {:si_unique_call 1389} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_9680;

  corral_source_split_9680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1390} $i4 := ldv_usb_register_driver($i3, $p0, $p1, $p2);
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    call {:si_unique_call 1391} {:cexpr "tmp___0"} boogie_si_record_i32($i4);
    goto corral_source_split_9681;

  corral_source_split_9681:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_55:
    assume !assertsPassed;
    return;
}



const usb_register_driver: ref;

axiom usb_register_driver == $sub.ref(0, 417172);

procedure usb_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9683;

  corral_source_split_9683:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1392} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1393} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_9684;

  corral_source_split_9684:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_usb_register_driver: ref;

axiom ldv_usb_register_driver == $sub.ref(0, 418204);

procedure ldv_usb_register_driver($i0: i32, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.33, $M.7, $CurrAddr, $M.0, $M.34, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.11, $M.12, $M.15, $M.18, $M.19, $M.20, $M.21, $M.22, assertsPassed, $M.17, $M.23, $M.24, $M.25;



implementation ldv_usb_register_driver($i0: i32, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1394} {:cexpr "ldv_usb_register_driver:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_9686;

  corral_source_split_9686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1395} $i4 := ldv_pre_usb_register_driver();
    call {:si_unique_call 1396} {:cexpr "arg0"} boogie_si_record_i32($i4);
    goto corral_source_split_9687;

  corral_source_split_9687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1397} $i5 := ldv_undef_int();
    call {:si_unique_call 1398} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_9688;

  corral_source_split_9688:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_9689;

  corral_source_split_9689:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_9697;

  corral_source_split_9697:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i4, 0);
    goto corral_source_split_9698;

  corral_source_split_9698:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_9699;

  corral_source_split_9699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1401} ldv_assume($i10);
    goto corral_source_split_9700;

  corral_source_split_9700:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_9691;

  corral_source_split_9691:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i4, 0);
    goto corral_source_split_9692;

  corral_source_split_9692:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_9693;

  corral_source_split_9693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1399} ldv_assume($i8);
    goto corral_source_split_9694;

  corral_source_split_9694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1400} ldv_dispatch_register_10_2($p1);
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    goto corral_source_split_9695;

  corral_source_split_9695:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_58:
    assume !assertsPassed;
    return;
}



const ldv_pre_usb_register_driver: ref;

axiom ldv_pre_usb_register_driver == $sub.ref(0, 419236);

procedure ldv_pre_usb_register_driver() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.33;



implementation ldv_pre_usb_register_driver() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9702;

  corral_source_split_9702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1402} $i0 := ldv_undef_int();
    call {:si_unique_call 1403} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_9703;

  corral_source_split_9703:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 0);
    goto corral_source_split_9704;

  corral_source_split_9704:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_9709;

  corral_source_split_9709:
    assume {:verifier.code 0} true;
    $i2 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9711;

  corral_source_split_9711:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_9706;

  corral_source_split_9706:
    assume {:verifier.code 0} true;
    $M.33 := 1;
    call {:si_unique_call 1404} {:cexpr "ldv_linux_usb_register_probe_state"} boogie_si_record_i32(1);
    goto corral_source_split_9707;

  corral_source_split_9707:
    assume {:verifier.code 0} true;
    $i2 := $i0;
    goto $bb3;
}



const ldv_dispatch_register_10_2: ref;

axiom ldv_dispatch_register_10_2 == $sub.ref(0, 420268);

procedure ldv_dispatch_register_10_2($p0: ref);
  free requires assertsPassed;
  modifies $M.7, $CurrAddr, $M.0, $M.34, $M.33, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.11, $M.12, $M.15, $M.18, $M.19, $M.20, $M.21, $M.22, assertsPassed, $M.17, $M.23, $M.24, $M.25;



implementation ldv_dispatch_register_10_2($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9713;

  corral_source_split_9713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1405} $p1 := ldv_xmalloc(16);
    goto corral_source_split_9714;

  corral_source_split_9714:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_9715;

  corral_source_split_9715:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_9716;

  corral_source_split_9716:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p3, $p0);
    goto corral_source_split_9717;

  corral_source_split_9717:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p2);
    goto corral_source_split_9718;

  corral_source_split_9718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1406} ldv_usb_dummy_factory_8($p4);
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    goto corral_source_split_9719;

  corral_source_split_9719:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_61:
    assume !assertsPassed;
    return;
}



const ldv_xmalloc: ref;

axiom ldv_xmalloc == $sub.ref(0, 421300);

procedure ldv_xmalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_xmalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1407} {:cexpr "ldv_xmalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_9721;

  corral_source_split_9721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1408} $p1 := malloc($i0);
    goto corral_source_split_9722;

  corral_source_split_9722:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_9723;

  corral_source_split_9723:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_9724;

  corral_source_split_9724:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_9725;

  corral_source_split_9725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1409} ldv_assume($i4);
    goto corral_source_split_9726;

  corral_source_split_9726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1410} $i5 := ldv_is_err($p1);
    call {:si_unique_call 1411} {:cexpr "tmp___0"} boogie_si_record_i64($i5);
    goto corral_source_split_9727;

  corral_source_split_9727:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_9728;

  corral_source_split_9728:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_9729;

  corral_source_split_9729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1412} ldv_assume($i7);
    goto corral_source_split_9730;

  corral_source_split_9730:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const ldv_usb_dummy_factory_8: ref;

axiom ldv_usb_dummy_factory_8 == $sub.ref(0, 422332);

procedure ldv_usb_dummy_factory_8($p0: ref);
  free requires assertsPassed;
  modifies $M.7, $M.0, $CurrAddr, $M.34, $M.33, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.11, $M.12, $M.15, $M.18, $M.19, $M.20, $M.21, $M.22, assertsPassed, $M.17, $M.23, $M.24, $M.25;



implementation ldv_usb_dummy_factory_8($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9732;

  corral_source_split_9732:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_9733;

  corral_source_split_9733:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_9734;

  corral_source_split_9734:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_9735;

  corral_source_split_9735:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $p7 := $u2;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9743;

  corral_source_split_9743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1414} ldv_dispatch_instance_register_8_3($p7);
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    goto corral_source_split_9744;

  corral_source_split_9744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1415} ldv_dispatch_instance_deregister_8_2($p7);
    goto corral_source_split_9745;

  corral_source_split_9745:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_64:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_9737;

  corral_source_split_9737:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_9738;

  corral_source_split_9738:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.7, $p4);
    goto corral_source_split_9739;

  corral_source_split_9739:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p1);
    goto corral_source_split_9740;

  corral_source_split_9740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1413} ldv_free($p6);
    goto corral_source_split_9741;

  corral_source_split_9741:
    assume {:verifier.code 0} true;
    $p7 := $p5;
    goto $bb3;
}



const ldv_free: ref;

axiom ldv_free == $sub.ref(0, 423364);

procedure ldv_free($p0: ref);
  free requires assertsPassed;



implementation ldv_free($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9747;

  corral_source_split_9747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1416} free_($p0);
    goto corral_source_split_9748;

  corral_source_split_9748:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dispatch_instance_register_8_3: ref;

axiom ldv_dispatch_instance_register_8_3 == $sub.ref(0, 424396);

procedure ldv_dispatch_instance_register_8_3($p0: ref);
  free requires assertsPassed;
  modifies $M.7, $M.0, $CurrAddr, $M.34, $M.33, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.11, $M.12, $M.15, $M.18, $M.19, $M.20, $M.21, $M.22, assertsPassed, $M.17, $M.23, $M.24, $M.25;



implementation ldv_dispatch_instance_register_8_3($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9750;

  corral_source_split_9750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1417} $p1 := ldv_xmalloc(16);
    goto corral_source_split_9751;

  corral_source_split_9751:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_9752;

  corral_source_split_9752:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_9753;

  corral_source_split_9753:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p3, $p0);
    goto corral_source_split_9754;

  corral_source_split_9754:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p2);
    goto corral_source_split_9755;

  corral_source_split_9755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1418} ldv_usb_usb_instance_7($p4);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    goto corral_source_split_9756;

  corral_source_split_9756:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_67:
    assume !assertsPassed;
    return;
}



const ldv_dispatch_instance_deregister_8_2: ref;

axiom ldv_dispatch_instance_deregister_8_2 == $sub.ref(0, 425428);

procedure ldv_dispatch_instance_deregister_8_2($p0: ref);
  free requires assertsPassed;



implementation ldv_dispatch_instance_deregister_8_2($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9758;

  corral_source_split_9758:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_usb_instance_7: ref;

axiom ldv_usb_usb_instance_7 == $sub.ref(0, 426460);

procedure ldv_usb_usb_instance_7($p0: ref);
  free requires assertsPassed;
  modifies $M.7, $M.0, $M.34, $M.33, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.11, $M.12, $M.15, $CurrAddr, $M.18, $M.19, $M.20, $M.21, $M.22, assertsPassed, $M.17, $M.23, $M.24, $M.25;



implementation ldv_usb_usb_instance_7($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $i41: i1;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $i47: i1;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i1;
  var $i53: i32;
  var $p54: ref;
  var $p55: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9760;

  corral_source_split_9760:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_9761;

  corral_source_split_9761:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_9762;

  corral_source_split_9762:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_9763;

  corral_source_split_9763:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $p7 := $u2;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9771;

  corral_source_split_9771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1420} $p8 := ldv_xmalloc(1552);
    goto corral_source_split_9772;

  corral_source_split_9772:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_9773;

  corral_source_split_9773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1421} $p10 := ldv_xmalloc(2024);
    goto corral_source_split_9774;

  corral_source_split_9774:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_9775;

  corral_source_split_9775:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 2032)), $mul.ref(144, 1));
    goto corral_source_split_9776;

  corral_source_split_9776:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 1560)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_9777;

  corral_source_split_9777:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p14, $p12);
    goto corral_source_split_9778;

  corral_source_split_9778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1422} $p15 := ldv_xmalloc(32);
    goto corral_source_split_9779;

  corral_source_split_9779:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_9780;

  corral_source_split_9780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1423} ldv_ldv_pre_probe_129();
    goto corral_source_split_9781;

  corral_source_split_9781:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p7, $mul.ref(0, 304)), $mul.ref(8, 1));
    goto corral_source_split_9782;

  corral_source_split_9782:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.7, $p17);
    goto corral_source_split_9783;

  corral_source_split_9783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1424} $i19 := ldv_usb_instance_probe_7_13($p18, $p9, $p16);
    call {:si_unique_call 1425} {:cexpr "ldv_7_probe_retval_default"} boogie_si_record_i32($i19);
    goto corral_source_split_9784;

  corral_source_split_9784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1426} $i20 := ldv_ldv_post_probe_130($i19);
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    call {:si_unique_call 1427} {:cexpr "ldv_7_probe_retval_default"} boogie_si_record_i32($i20);
    goto corral_source_split_9785;

  corral_source_split_9785:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p16);
    goto corral_source_split_9786;

  corral_source_split_9786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1428} ldv_free($p21);
    goto corral_source_split_9787;

  corral_source_split_9787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1429} $i22 := ldv_undef_int();
    call {:si_unique_call 1430} {:cexpr "tmp___4"} boogie_si_record_i32($i22);
    goto corral_source_split_9788;

  corral_source_split_9788:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_9789;

  corral_source_split_9789:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i23 == 1);
    goto corral_source_split_9798;

  corral_source_split_9798:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i20, 0);
    goto corral_source_split_9799;

  corral_source_split_9799:
    assume {:verifier.code 0} true;
    $i53 := $zext.i1.i32($i52);
    goto corral_source_split_9800;

  corral_source_split_9800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1434} ldv_assume($i53);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p9);
    goto corral_source_split_9853;

  corral_source_split_9853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1443} ldv_free($p54);
    goto corral_source_split_9854;

  corral_source_split_9854:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p11);
    goto corral_source_split_9855;

  corral_source_split_9855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1444} ldv_free($p55);
    goto corral_source_split_9856;

  corral_source_split_9856:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i23 == 1;
    goto corral_source_split_9791;

  corral_source_split_9791:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i20, 0);
    goto corral_source_split_9792;

  corral_source_split_9792:
    assume {:verifier.code 0} true;
    $i25 := $zext.i1.i32($i24);
    goto corral_source_split_9793;

  corral_source_split_9793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1431} ldv_assume($i25);
    goto corral_source_split_9794;

  corral_source_split_9794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1432} $i26 := ldv_undef_int();
    call {:si_unique_call 1433} {:cexpr "tmp___2"} boogie_si_record_i32($i26);
    goto corral_source_split_9795;

  corral_source_split_9795:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 1);
    goto corral_source_split_9796;

  corral_source_split_9796:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i26, 2);
    goto corral_source_split_9815;

  corral_source_split_9815:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i26, 3);
    goto corral_source_split_9824;

  corral_source_split_9824:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i26, 4);
    goto corral_source_split_9828;

  corral_source_split_9828:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1439} ldv_stop();
    goto corral_source_split_9832;

  corral_source_split_9832:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p7, $mul.ref(0, 304)), $mul.ref(16, 1));
    goto corral_source_split_9834;

  corral_source_split_9834:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.7, $p50);
    goto corral_source_split_9835;

  corral_source_split_9835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1440} ldv_usb_instance_release_7_4($p51, $p9);
    goto corral_source_split_9836;

  corral_source_split_9836:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb18:
    assume $i30 == 1;
    goto corral_source_split_9830;

  corral_source_split_9830:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb14:
    assume $i29 == 1;
    goto corral_source_split_9826;

  corral_source_split_9826:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb10:
    assume $i28 == 1;
    goto corral_source_split_9817;

  corral_source_split_9817:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p7, $mul.ref(0, 304)), $mul.ref(56, 1));
    goto corral_source_split_9819;

  corral_source_split_9819:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.7, $p38);
    goto corral_source_split_9820;

  corral_source_split_9820:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p39);
    goto corral_source_split_9821;

  corral_source_split_9821:
    assume {:verifier.code 0} true;
    $i41 := $ne.i64($i40, 0);
    goto corral_source_split_9822;

  corral_source_split_9822:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p7, $mul.ref(0, 304)), $mul.ref(64, 1));
    goto corral_source_split_9843;

  corral_source_split_9843:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.7, $p44);
    goto corral_source_split_9844;

  corral_source_split_9844:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p45);
    goto corral_source_split_9845;

  corral_source_split_9845:
    assume {:verifier.code 0} true;
    $i47 := $ne.i64($i46, 0);
    goto corral_source_split_9846;

  corral_source_split_9846:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb27:
    assume $i47 == 1;
    goto corral_source_split_9848;

  corral_source_split_9848:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p7, $mul.ref(0, 304)), $mul.ref(64, 1));
    goto corral_source_split_9849;

  corral_source_split_9849:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.7, $p48);
    goto corral_source_split_9850;

  corral_source_split_9850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1442} ldv_usb_instance_post_7_9($p49, $p9);
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    goto corral_source_split_9851;

  corral_source_split_9851:
    assume {:verifier.code 0} true;
    goto $bb29;

  SeqInstr_76:
    assume !assertsPassed;
    return;

  $bb24:
    assume $i41 == 1;
    goto corral_source_split_9838;

  corral_source_split_9838:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p7, $mul.ref(0, 304)), $mul.ref(56, 1));
    goto corral_source_split_9839;

  corral_source_split_9839:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.7, $p42);
    goto corral_source_split_9840;

  corral_source_split_9840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1441} ldv_usb_instance_pre_7_10($p43, $p9);
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    goto corral_source_split_9841;

  corral_source_split_9841:
    assume {:verifier.code 0} true;
    goto $bb26;

  SeqInstr_73:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i27 == 1;
    goto corral_source_split_9802;

  corral_source_split_9802:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1435} $p31 := ldv_xmalloc(4);
    goto corral_source_split_9804;

  corral_source_split_9804:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_9805;

  corral_source_split_9805:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p7, $mul.ref(0, 304)), $mul.ref(32, 1));
    goto corral_source_split_9806;

  corral_source_split_9806:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.7, $p33);
    goto corral_source_split_9807;

  corral_source_split_9807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1436} ldv_usb_instance_suspend_7_8($p34, $p9, $p32);
    goto corral_source_split_9808;

  corral_source_split_9808:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p32);
    goto corral_source_split_9809;

  corral_source_split_9809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1437} ldv_free($p35);
    goto corral_source_split_9810;

  corral_source_split_9810:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p7, $mul.ref(0, 304)), $mul.ref(40, 1));
    goto corral_source_split_9811;

  corral_source_split_9811:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.7, $p36);
    goto corral_source_split_9812;

  corral_source_split_9812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1438} ldv_usb_instance_resume_7_7($p37, $p9);
    goto corral_source_split_9813;

  corral_source_split_9813:
    assume {:verifier.code 0} true;
    goto $bb23;

  SeqInstr_70:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_9765;

  corral_source_split_9765:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_9766;

  corral_source_split_9766:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.7, $p4);
    goto corral_source_split_9767;

  corral_source_split_9767:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p1);
    goto corral_source_split_9768;

  corral_source_split_9768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1419} ldv_free($p6);
    goto corral_source_split_9769;

  corral_source_split_9769:
    assume {:verifier.code 0} true;
    $p7 := $p5;
    goto $bb3;
}



const ldv_ldv_pre_probe_129: ref;

axiom ldv_ldv_pre_probe_129 == $sub.ref(0, 427492);

procedure ldv_ldv_pre_probe_129();
  free requires assertsPassed;
  modifies $M.34, $M.33;



implementation ldv_ldv_pre_probe_129()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9858;

  corral_source_split_9858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1445} ldv_linux_net_register_reset_error_counter();
    goto corral_source_split_9859;

  corral_source_split_9859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1446} ldv_linux_usb_register_reset_error_counter();
    goto corral_source_split_9860;

  corral_source_split_9860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1447} ldv_pre_probe();
    goto corral_source_split_9861;

  corral_source_split_9861:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_instance_probe_7_13: ref;

axiom ldv_usb_instance_probe_7_13 == $sub.ref(0, 428524);

procedure ldv_usb_instance_probe_7_13($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_usb_instance_probe_7_13($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9863;

  corral_source_split_9863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1448} $i3 := dvb_usbv2_probe($p1, $p2);
    call {:si_unique_call 1449} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_9864;

  corral_source_split_9864:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_ldv_post_probe_130: ref;

axiom ldv_ldv_post_probe_130 == $sub.ref(0, 429556);

procedure ldv_ldv_post_probe_130($i0: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.34, $M.33, assertsPassed;



implementation ldv_ldv_post_probe_130($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1450} {:cexpr "ldv_ldv_post_probe_130:arg:retval"} boogie_si_record_i32($i0);
    goto corral_source_split_9866;

  corral_source_split_9866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1451} ldv_linux_net_register_check_return_value_probe($i0);
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    goto corral_source_split_9867;

  corral_source_split_9867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1452} ldv_linux_usb_register_check_return_value_probe($i0);
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    goto corral_source_split_9868;

  corral_source_split_9868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1453} $i1 := ldv_post_probe($i0);
    call {:si_unique_call 1454} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_9869;

  corral_source_split_9869:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;

  SeqInstr_82:
    assume !assertsPassed;
    return;

  SeqInstr_79:
    assume !assertsPassed;
    return;
}



const ldv_usb_instance_suspend_7_8: ref;

axiom ldv_usb_instance_suspend_7_8 == $sub.ref(0, 430588);

procedure ldv_usb_instance_suspend_7_8($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_usb_instance_suspend_7_8($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $i4: i32;
  var vslice_dummy_var_354: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9871;

  corral_source_split_9871:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_9872;

  corral_source_split_9872:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.7, $p3);
    goto corral_source_split_9873;

  corral_source_split_9873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1455} vslice_dummy_var_354 := dvb_usbv2_suspend($p1, $i4);
    goto corral_source_split_9874;

  corral_source_split_9874:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_instance_resume_7_7: ref;

axiom ldv_usb_instance_resume_7_7 == $sub.ref(0, 431620);

procedure ldv_usb_instance_resume_7_7($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ldv_usb_instance_resume_7_7($p0: ref, $p1: ref)
{
  var vslice_dummy_var_355: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9876;

  corral_source_split_9876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1456} vslice_dummy_var_355 := dvb_usbv2_resume($p1);
    goto corral_source_split_9877;

  corral_source_split_9877:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_instance_pre_7_10: ref;

axiom ldv_usb_instance_pre_7_10 == $sub.ref(0, 432652);

procedure ldv_usb_instance_pre_7_10($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.11, $M.12, $M.15, $M.18, $M.19, $M.20, $M.21, $M.22, $CurrAddr, $M.17, $M.23, $M.24, $M.25, assertsPassed;



implementation ldv_usb_instance_pre_7_10($p0: ref, $p1: ref)
{
  var vslice_dummy_var_356: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1457} vslice_dummy_var_356 := devirtbounce.6($p0, $p1);
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    goto corral_source_split_9879;

  corral_source_split_9879:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_85:
    assume !assertsPassed;
    return;
}



const ldv_usb_instance_post_7_9: ref;

axiom ldv_usb_instance_post_7_9 == $sub.ref(0, 433684);

procedure ldv_usb_instance_post_7_9($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.11, $M.12, $M.15, $M.18, $M.19, $M.20, $M.21, $M.22, $CurrAddr, $M.17, $M.23, $M.24, $M.25, assertsPassed;



implementation ldv_usb_instance_post_7_9($p0: ref, $p1: ref)
{
  var vslice_dummy_var_357: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1458} vslice_dummy_var_357 := devirtbounce.6($p0, $p1);
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    goto corral_source_split_9881;

  corral_source_split_9881:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_88:
    assume !assertsPassed;
    return;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 434716);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9883;

  corral_source_split_9883:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const ldv_usb_instance_release_7_4: ref;

axiom ldv_usb_instance_release_7_4 == $sub.ref(0, 435748);

procedure ldv_usb_instance_release_7_4($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ldv_usb_instance_release_7_4($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9885;

  corral_source_split_9885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1459} dvb_usbv2_disconnect($p1);
    goto corral_source_split_9886;

  corral_source_split_9886:
    assume {:verifier.code 0} true;
    return;
}



const ldv_linux_net_register_check_return_value_probe: ref;

axiom ldv_linux_net_register_check_return_value_probe == $sub.ref(0, 436780);

procedure ldv_linux_net_register_check_return_value_probe($i0: i32);
  free requires assertsPassed;
  modifies $M.34, assertsPassed;



implementation ldv_linux_net_register_check_return_value_probe($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1460} {:cexpr "ldv_linux_net_register_check_return_value_probe:arg:retval"} boogie_si_record_i32($i0);
    goto corral_source_split_9888;

  corral_source_split_9888:
    assume {:verifier.code 0} true;
    $i1 := $M.34;
    goto corral_source_split_9889;

  corral_source_split_9889:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_9890;

  corral_source_split_9890:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1462} ldv_linux_net_register_reset_error_counter();
    goto corral_source_split_9897;

  corral_source_split_9897:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_9892;

  corral_source_split_9892:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i0, 0);
    goto corral_source_split_9893;

  corral_source_split_9893:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_9894;

  corral_source_split_9894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1461} ldv_assert_linux_net_register__wrong_return_value($i4);
    goto SeqInstr_91, SeqInstr_92;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  SeqInstr_93:
    goto corral_source_split_9895;

  corral_source_split_9895:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_91:
    assume !assertsPassed;
    return;
}



const ldv_linux_usb_register_check_return_value_probe: ref;

axiom ldv_linux_usb_register_check_return_value_probe == $sub.ref(0, 437812);

procedure ldv_linux_usb_register_check_return_value_probe($i0: i32);
  free requires assertsPassed;
  modifies $M.33, assertsPassed;



implementation ldv_linux_usb_register_check_return_value_probe($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1463} {:cexpr "ldv_linux_usb_register_check_return_value_probe:arg:retval"} boogie_si_record_i32($i0);
    goto corral_source_split_9899;

  corral_source_split_9899:
    assume {:verifier.code 0} true;
    $i1 := $M.33;
    goto corral_source_split_9900;

  corral_source_split_9900:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_9901;

  corral_source_split_9901:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1465} ldv_linux_usb_register_reset_error_counter();
    goto corral_source_split_9908;

  corral_source_split_9908:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_9903;

  corral_source_split_9903:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i0, 0);
    goto corral_source_split_9904;

  corral_source_split_9904:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_9905;

  corral_source_split_9905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1464} ldv_assert_linux_usb_register__wrong_return_value($i4);
    goto SeqInstr_94, SeqInstr_95;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  SeqInstr_96:
    goto corral_source_split_9906;

  corral_source_split_9906:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_94:
    assume !assertsPassed;
    return;
}



const ldv_post_probe: ref;

axiom ldv_post_probe == $sub.ref(0, 438844);

procedure ldv_post_probe($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_post_probe($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1466} {:cexpr "ldv_post_probe:arg:probe_ret_val"} boogie_si_record_i32($i0);
    goto corral_source_split_9910;

  corral_source_split_9910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1467} $i1 := ldv_filter_positive_int($i0);
    call {:si_unique_call 1468} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_9911;

  corral_source_split_9911:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_filter_positive_int: ref;

axiom ldv_filter_positive_int == $sub.ref(0, 439876);

procedure ldv_filter_positive_int($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_filter_positive_int($i0: i32) returns ($r: i32)
{
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1469} {:cexpr "ldv_filter_positive_int:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_9913;

  corral_source_split_9913:
    assume {:verifier.code 0} true;
    $i1 := $sle.i32($i0, 0);
    goto corral_source_split_9914;

  corral_source_split_9914:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_9915;

  corral_source_split_9915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1470} ldv_assume($i2);
    goto corral_source_split_9916;

  corral_source_split_9916:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_assert_linux_usb_register__wrong_return_value: ref;

axiom ldv_assert_linux_usb_register__wrong_return_value == $sub.ref(0, 440908);

procedure ldv_assert_linux_usb_register__wrong_return_value($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_usb_register__wrong_return_value($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1471} {:cexpr "ldv_assert_linux_usb_register__wrong_return_value:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_9918;

  corral_source_split_9918:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_9919;

  corral_source_split_9919:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_9921;

  corral_source_split_9921:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1472} __VERIFIER_error();
    goto SeqInstr_97, SeqInstr_98;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  SeqInstr_99:
    goto corral_source_split_9922;

  corral_source_split_9922:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_97:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_linux_usb_register_reset_error_counter: ref;

axiom ldv_linux_usb_register_reset_error_counter == $sub.ref(0, 441940);

procedure ldv_linux_usb_register_reset_error_counter();
  free requires assertsPassed;
  modifies $M.33;



implementation ldv_linux_usb_register_reset_error_counter()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9924;

  corral_source_split_9924:
    assume {:verifier.code 0} true;
    $M.33 := 0;
    call {:si_unique_call 1473} {:cexpr "ldv_linux_usb_register_probe_state"} boogie_si_record_i32(0);
    goto corral_source_split_9925;

  corral_source_split_9925:
    assume {:verifier.code 0} true;
    return;
}



const ldv_assert_linux_net_register__wrong_return_value: ref;

axiom ldv_assert_linux_net_register__wrong_return_value == $sub.ref(0, 442972);

procedure ldv_assert_linux_net_register__wrong_return_value($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_net_register__wrong_return_value($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1474} {:cexpr "ldv_assert_linux_net_register__wrong_return_value:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_9927;

  corral_source_split_9927:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_9928;

  corral_source_split_9928:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_9930;

  corral_source_split_9930:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1475} __VERIFIER_error();
    goto SeqInstr_100, SeqInstr_101;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  SeqInstr_102:
    goto corral_source_split_9931;

  corral_source_split_9931:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_100:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_linux_net_register_reset_error_counter: ref;

axiom ldv_linux_net_register_reset_error_counter == $sub.ref(0, 444004);

procedure ldv_linux_net_register_reset_error_counter();
  free requires assertsPassed;
  modifies $M.34;



implementation ldv_linux_net_register_reset_error_counter()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9933;

  corral_source_split_9933:
    assume {:verifier.code 0} true;
    $M.34 := 0;
    call {:si_unique_call 1476} {:cexpr "ldv_linux_net_register_probe_state"} boogie_si_record_i32(0);
    goto corral_source_split_9934;

  corral_source_split_9934:
    assume {:verifier.code 0} true;
    return;
}



const ldv_pre_probe: ref;

axiom ldv_pre_probe == $sub.ref(0, 445036);

procedure ldv_pre_probe();
  free requires assertsPassed;



implementation ldv_pre_probe()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9936;

  corral_source_split_9936:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 446068);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 1477} $free($p0);
    return;
}



const malloc: ref;

axiom malloc == $sub.ref(0, 447100);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 1478} $r := $malloc($i0);
    return;
}



const ldv_dispatch_deregister_dummy_resourceless_instance_3_11_4: ref;

axiom ldv_dispatch_deregister_dummy_resourceless_instance_3_11_4 == $sub.ref(0, 448132);

procedure ldv_dispatch_deregister_dummy_resourceless_instance_3_11_4();
  free requires assertsPassed;



implementation ldv_dispatch_deregister_dummy_resourceless_instance_3_11_4()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9938;

  corral_source_split_9938:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dispatch_deregister_dummy_resourceless_instance_4_11_5: ref;

axiom ldv_dispatch_deregister_dummy_resourceless_instance_4_11_5 == $sub.ref(0, 449164);

procedure ldv_dispatch_deregister_dummy_resourceless_instance_4_11_5();
  free requires assertsPassed;



implementation ldv_dispatch_deregister_dummy_resourceless_instance_4_11_5()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9940;

  corral_source_split_9940:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dispatch_register_dummy_resourceless_instance_3_11_6: ref;

axiom ldv_dispatch_register_dummy_resourceless_instance_3_11_6 == $sub.ref(0, 450196);

procedure ldv_dispatch_register_dummy_resourceless_instance_3_11_6();
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.11, $M.12, $M.8, $M.15, $CurrAddr, $M.27, $M.18, $M.19, $M.20, $M.21, $M.22, $M.29, $M.28, $M.23, $M.24, $M.25, assertsPassed;



implementation ldv_dispatch_register_dummy_resourceless_instance_3_11_6()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9942;

  corral_source_split_9942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1479} $p0 := ldv_xmalloc(4);
    goto corral_source_split_9943;

  corral_source_split_9943:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_9944;

  corral_source_split_9944:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_9945;

  corral_source_split_9945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1480} ldv_struct_dvb_usb_adapter_properties_dummy_resourceless_instance_0($p2);
    goto SeqInstr_103, SeqInstr_104;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  SeqInstr_105:
    goto corral_source_split_9946;

  corral_source_split_9946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1481} $p3 := ldv_xmalloc(4);
    goto corral_source_split_9947;

  corral_source_split_9947:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_9948;

  corral_source_split_9948:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_9949;

  corral_source_split_9949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1482} ldv_struct_dvb_usb_adapter_properties_dummy_resourceless_instance_1($p5);
    goto SeqInstr_106, SeqInstr_107;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  SeqInstr_108:
    goto corral_source_split_9950;

  corral_source_split_9950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1483} $p6 := ldv_xmalloc(4);
    goto corral_source_split_9951;

  corral_source_split_9951:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_9952;

  corral_source_split_9952:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_9953;

  corral_source_split_9953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1484} ldv_struct_dvb_usb_adapter_properties_dummy_resourceless_instance_2($p8);
    goto SeqInstr_109, SeqInstr_110;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  SeqInstr_111:
    goto corral_source_split_9954;

  corral_source_split_9954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1485} $p9 := ldv_xmalloc(4);
    goto corral_source_split_9955;

  corral_source_split_9955:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_9956;

  corral_source_split_9956:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_9957;

  corral_source_split_9957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1486} ldv_struct_dvb_usb_adapter_properties_dummy_resourceless_instance_3($p11);
    goto SeqInstr_112, SeqInstr_113;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  SeqInstr_114:
    goto corral_source_split_9958;

  corral_source_split_9958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1487} $p12 := ldv_xmalloc(4);
    goto corral_source_split_9959;

  corral_source_split_9959:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_9960;

  corral_source_split_9960:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_9961;

  corral_source_split_9961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1488} ldv_struct_dvb_usb_adapter_properties_dummy_resourceless_instance_4($p14);
    goto SeqInstr_115, SeqInstr_116;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  SeqInstr_117:
    goto corral_source_split_9962;

  corral_source_split_9962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1489} $p15 := ldv_xmalloc(4);
    goto corral_source_split_9963;

  corral_source_split_9963:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_9964;

  corral_source_split_9964:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_9965;

  corral_source_split_9965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1490} ldv_struct_dvb_usb_adapter_properties_dummy_resourceless_instance_5($p17);
    goto SeqInstr_118, SeqInstr_119;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  SeqInstr_120:
    goto corral_source_split_9966;

  corral_source_split_9966:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_118:
    assume !assertsPassed;
    return;

  SeqInstr_115:
    assume !assertsPassed;
    return;

  SeqInstr_112:
    assume !assertsPassed;
    return;

  SeqInstr_109:
    assume !assertsPassed;
    return;

  SeqInstr_106:
    assume !assertsPassed;
    return;

  SeqInstr_103:
    assume !assertsPassed;
    return;
}



const ldv_struct_dvb_usb_adapter_properties_dummy_resourceless_instance_0: ref;

axiom ldv_struct_dvb_usb_adapter_properties_dummy_resourceless_instance_0 == $sub.ref(0, 451228);

procedure ldv_struct_dvb_usb_adapter_properties_dummy_resourceless_instance_0($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.11, $M.12, $M.8, $M.15, $M.27, $CurrAddr, $M.29, $M.28, $M.18, $M.19, $M.20, $M.21, $M.22, assertsPassed, $M.23, $M.24, $M.25;



implementation ldv_struct_dvb_usb_adapter_properties_dummy_resourceless_instance_0($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9968;

  corral_source_split_9968:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $p11 := ldv_struct_dvb_usb_adapter_properties_dummy_resourceless_instance_0_loop_$bb1($i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $p11);
    goto $bb1_last;

  corral_source_split_9970:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_9971;

  corral_source_split_9971:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 2);
    goto corral_source_split_9977;

  corral_source_split_9977:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i1, 3);
    goto corral_source_split_9983;

  corral_source_split_9983:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i1, 4);
    goto corral_source_split_9989;

  corral_source_split_9989:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i1, 5);
    goto corral_source_split_9995;

  corral_source_split_9995:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i1, 6);
    goto corral_source_split_10003;

  corral_source_split_10003:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i1, 7);
    goto corral_source_split_10009;

  corral_source_split_10009:
    assume {:verifier.code 0} true;
    $i9 := $i1;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 8);
    goto corral_source_split_10015;

  corral_source_split_10015:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1502} ldv_stop();
    goto corral_source_split_10019;

  corral_source_split_10019:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    return;

  $bb30:
    assume $i10 == 1;
    goto corral_source_split_10017;

  corral_source_split_10017:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb26:
    assume $i8 == 1;
    goto corral_source_split_10011;

  corral_source_split_10011:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1501} ldv_dummy_resourceless_instance_callback_0_3($u3, $u4);
    goto corral_source_split_10013;

  corral_source_split_10013:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb35_dummy;

  $bb22:
    assume $i7 == 1;
    goto corral_source_split_10005;

  corral_source_split_10005:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1500} ldv_dummy_resourceless_instance_callback_0_7($u14, $u8);
    goto corral_source_split_10007;

  corral_source_split_10007:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb18:
    assume $i6 == 1;
    goto corral_source_split_9997;

  corral_source_split_9997:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1497} $p11 := ldv_xmalloc(1);
    goto corral_source_split_9999;

  corral_source_split_9999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1498} ldv_dummy_resourceless_instance_callback_0_8($u12, $u6, $p11, $u13);
    goto corral_source_split_10000;

  corral_source_split_10000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1499} ldv_free($p11);
    goto corral_source_split_10001;

  corral_source_split_10001:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb14:
    assume $i5 == 1;
    goto corral_source_split_9991;

  corral_source_split_9991:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1496} ldv_dummy_resourceless_instance_callback_0_11($u10, $u11);
    goto corral_source_split_9993;

  corral_source_split_9993:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb10:
    assume $i4 == 1;
    goto corral_source_split_9985;

  corral_source_split_9985:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1495} ldv_dummy_resourceless_instance_callback_0_12($u7, $u8, $u9, $u1);
    goto SeqInstr_121, SeqInstr_122;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  SeqInstr_123:
    goto corral_source_split_9987;

  corral_source_split_9987:
    assume {:verifier.code 0} true;
    goto $bb35;

  SeqInstr_121:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_9979;

  corral_source_split_9979:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1494} ldv_dummy_resourceless_instance_callback_0_15($u5, $u6, $u1);
    goto corral_source_split_9981;

  corral_source_split_9981:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb2:
    assume $i2 == 1;
    goto corral_source_split_9973;

  corral_source_split_9973:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1493} ldv_dummy_resourceless_instance_callback_0_18($u3, $u4);
    goto corral_source_split_9975;

  corral_source_split_9975:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1491} $i1 := ldv_undef_int();
    call {:si_unique_call 1492} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_9970;
}



const ldv_struct_dvb_usb_adapter_properties_dummy_resourceless_instance_1: ref;

axiom ldv_struct_dvb_usb_adapter_properties_dummy_resourceless_instance_1 == $sub.ref(0, 452260);

procedure ldv_struct_dvb_usb_adapter_properties_dummy_resourceless_instance_1($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.11, $M.12, $M.15, $M.27, $M.8, $CurrAddr, $M.29, $M.28, assertsPassed, $M.18, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25;



implementation ldv_struct_dvb_usb_adapter_properties_dummy_resourceless_instance_1($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10021;

  corral_source_split_10021:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $p11 := ldv_struct_dvb_usb_adapter_properties_dummy_resourceless_instance_1_loop_$bb1($i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $p11);
    goto $bb1_last;

  corral_source_split_10023:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_10024;

  corral_source_split_10024:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 2);
    goto corral_source_split_10030;

  corral_source_split_10030:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i1, 3);
    goto corral_source_split_10036;

  corral_source_split_10036:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i1, 4);
    goto corral_source_split_10042;

  corral_source_split_10042:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i1, 5);
    goto corral_source_split_10048;

  corral_source_split_10048:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i1, 6);
    goto corral_source_split_10056;

  corral_source_split_10056:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i1, 7);
    goto corral_source_split_10062;

  corral_source_split_10062:
    assume {:verifier.code 0} true;
    $i9 := $i1;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 8);
    goto corral_source_split_10068;

  corral_source_split_10068:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1514} ldv_stop();
    goto corral_source_split_10072;

  corral_source_split_10072:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    return;

  $bb30:
    assume $i10 == 1;
    goto corral_source_split_10070;

  corral_source_split_10070:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb26:
    assume $i8 == 1;
    goto corral_source_split_10064;

  corral_source_split_10064:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1513} ldv_dummy_resourceless_instance_callback_1_3($u3, $u4);
    goto corral_source_split_10066;

  corral_source_split_10066:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb35_dummy;

  $bb22:
    assume $i7 == 1;
    goto corral_source_split_10058;

  corral_source_split_10058:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1512} ldv_dummy_resourceless_instance_callback_1_7($u14, $u8);
    goto corral_source_split_10060;

  corral_source_split_10060:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb18:
    assume $i6 == 1;
    goto corral_source_split_10050;

  corral_source_split_10050:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1509} $p11 := ldv_xmalloc(1);
    goto corral_source_split_10052;

  corral_source_split_10052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1510} ldv_dummy_resourceless_instance_callback_1_8($u12, $u6, $p11, $u13);
    goto corral_source_split_10053;

  corral_source_split_10053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1511} ldv_free($p11);
    goto corral_source_split_10054;

  corral_source_split_10054:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb14:
    assume $i5 == 1;
    goto corral_source_split_10044;

  corral_source_split_10044:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1508} ldv_dummy_resourceless_instance_callback_1_11($u10, $u11);
    goto corral_source_split_10046;

  corral_source_split_10046:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb10:
    assume $i4 == 1;
    goto corral_source_split_10038;

  corral_source_split_10038:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1507} ldv_dummy_resourceless_instance_callback_1_12($u7, $u8, $u9, $u1);
    goto SeqInstr_124, SeqInstr_125;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  SeqInstr_126:
    goto corral_source_split_10040;

  corral_source_split_10040:
    assume {:verifier.code 0} true;
    goto $bb35;

  SeqInstr_124:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_10032;

  corral_source_split_10032:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1506} ldv_dummy_resourceless_instance_callback_1_15($u5, $u6, $u1);
    goto corral_source_split_10034;

  corral_source_split_10034:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb2:
    assume $i2 == 1;
    goto corral_source_split_10026;

  corral_source_split_10026:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1505} ldv_dummy_resourceless_instance_callback_1_18($u3, $u4);
    goto corral_source_split_10028;

  corral_source_split_10028:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1503} $i1 := ldv_undef_int();
    call {:si_unique_call 1504} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_10023;
}



const ldv_struct_dvb_usb_adapter_properties_dummy_resourceless_instance_2: ref;

axiom ldv_struct_dvb_usb_adapter_properties_dummy_resourceless_instance_2 == $sub.ref(0, 453292);

procedure ldv_struct_dvb_usb_adapter_properties_dummy_resourceless_instance_2($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.11, $M.12, $M.8, $M.15, $M.27, $CurrAddr, $M.29, $M.28, $M.18, $M.19, $M.20, $M.21, $M.22, assertsPassed, $M.23, $M.24, $M.25;



implementation ldv_struct_dvb_usb_adapter_properties_dummy_resourceless_instance_2($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10074;

  corral_source_split_10074:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $p11 := ldv_struct_dvb_usb_adapter_properties_dummy_resourceless_instance_2_loop_$bb1($i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $p11);
    goto $bb1_last;

  corral_source_split_10076:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_10077;

  corral_source_split_10077:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 2);
    goto corral_source_split_10083;

  corral_source_split_10083:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i1, 3);
    goto corral_source_split_10089;

  corral_source_split_10089:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i1, 4);
    goto corral_source_split_10095;

  corral_source_split_10095:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i1, 5);
    goto corral_source_split_10101;

  corral_source_split_10101:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i1, 6);
    goto corral_source_split_10109;

  corral_source_split_10109:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i1, 7);
    goto corral_source_split_10115;

  corral_source_split_10115:
    assume {:verifier.code 0} true;
    $i9 := $i1;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 8);
    goto corral_source_split_10121;

  corral_source_split_10121:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1526} ldv_stop();
    goto corral_source_split_10125;

  corral_source_split_10125:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    return;

  $bb30:
    assume $i10 == 1;
    goto corral_source_split_10123;

  corral_source_split_10123:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb26:
    assume $i8 == 1;
    goto corral_source_split_10117;

  corral_source_split_10117:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1525} ldv_dummy_resourceless_instance_callback_2_3($u3, $u4);
    goto corral_source_split_10119;

  corral_source_split_10119:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb35_dummy;

  $bb22:
    assume $i7 == 1;
    goto corral_source_split_10111;

  corral_source_split_10111:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1524} ldv_dummy_resourceless_instance_callback_2_7($u14, $u8);
    goto corral_source_split_10113;

  corral_source_split_10113:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb18:
    assume $i6 == 1;
    goto corral_source_split_10103;

  corral_source_split_10103:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1521} $p11 := ldv_xmalloc(1);
    goto corral_source_split_10105;

  corral_source_split_10105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1522} ldv_dummy_resourceless_instance_callback_2_8($u12, $u6, $p11, $u13);
    goto corral_source_split_10106;

  corral_source_split_10106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1523} ldv_free($p11);
    goto corral_source_split_10107;

  corral_source_split_10107:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb14:
    assume $i5 == 1;
    goto corral_source_split_10097;

  corral_source_split_10097:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1520} ldv_dummy_resourceless_instance_callback_2_11($u10, $u11);
    goto corral_source_split_10099;

  corral_source_split_10099:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb10:
    assume $i4 == 1;
    goto corral_source_split_10091;

  corral_source_split_10091:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1519} ldv_dummy_resourceless_instance_callback_2_12($u7, $u8, $u9, $u1);
    goto SeqInstr_127, SeqInstr_128;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  SeqInstr_129:
    goto corral_source_split_10093;

  corral_source_split_10093:
    assume {:verifier.code 0} true;
    goto $bb35;

  SeqInstr_127:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_10085;

  corral_source_split_10085:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1518} ldv_dummy_resourceless_instance_callback_2_15($u5, $u6, $u1);
    goto corral_source_split_10087;

  corral_source_split_10087:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb2:
    assume $i2 == 1;
    goto corral_source_split_10079;

  corral_source_split_10079:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1517} ldv_dummy_resourceless_instance_callback_2_18($u3, $u4);
    goto corral_source_split_10081;

  corral_source_split_10081:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1515} $i1 := ldv_undef_int();
    call {:si_unique_call 1516} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_10076;
}



const ldv_struct_dvb_usb_adapter_properties_dummy_resourceless_instance_3: ref;

axiom ldv_struct_dvb_usb_adapter_properties_dummy_resourceless_instance_3 == $sub.ref(0, 454324);

procedure ldv_struct_dvb_usb_adapter_properties_dummy_resourceless_instance_3($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.11, $M.12, $M.8, $M.15, $M.27, $CurrAddr, $M.29, $M.28, $M.18, $M.19, $M.20, $M.21, $M.22, assertsPassed, $M.23, $M.24, $M.25;



implementation ldv_struct_dvb_usb_adapter_properties_dummy_resourceless_instance_3($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10127;

  corral_source_split_10127:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $p11 := ldv_struct_dvb_usb_adapter_properties_dummy_resourceless_instance_3_loop_$bb1($i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $p11);
    goto $bb1_last;

  corral_source_split_10129:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_10130;

  corral_source_split_10130:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 2);
    goto corral_source_split_10136;

  corral_source_split_10136:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i1, 3);
    goto corral_source_split_10142;

  corral_source_split_10142:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i1, 4);
    goto corral_source_split_10148;

  corral_source_split_10148:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i1, 5);
    goto corral_source_split_10154;

  corral_source_split_10154:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i1, 6);
    goto corral_source_split_10162;

  corral_source_split_10162:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i1, 7);
    goto corral_source_split_10168;

  corral_source_split_10168:
    assume {:verifier.code 0} true;
    $i9 := $i1;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 8);
    goto corral_source_split_10174;

  corral_source_split_10174:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1538} ldv_stop();
    goto corral_source_split_10178;

  corral_source_split_10178:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    return;

  $bb30:
    assume $i10 == 1;
    goto corral_source_split_10176;

  corral_source_split_10176:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb26:
    assume $i8 == 1;
    goto corral_source_split_10170;

  corral_source_split_10170:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1537} ldv_dummy_resourceless_instance_callback_3_3($u3, $u4);
    goto corral_source_split_10172;

  corral_source_split_10172:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb35_dummy;

  $bb22:
    assume $i7 == 1;
    goto corral_source_split_10164;

  corral_source_split_10164:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1536} ldv_dummy_resourceless_instance_callback_3_7($u14, $u8);
    goto corral_source_split_10166;

  corral_source_split_10166:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb18:
    assume $i6 == 1;
    goto corral_source_split_10156;

  corral_source_split_10156:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1533} $p11 := ldv_xmalloc(1);
    goto corral_source_split_10158;

  corral_source_split_10158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1534} ldv_dummy_resourceless_instance_callback_3_8($u12, $u6, $p11, $u13);
    goto corral_source_split_10159;

  corral_source_split_10159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1535} ldv_free($p11);
    goto corral_source_split_10160;

  corral_source_split_10160:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb14:
    assume $i5 == 1;
    goto corral_source_split_10150;

  corral_source_split_10150:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1532} ldv_dummy_resourceless_instance_callback_3_11($u10, $u11);
    goto corral_source_split_10152;

  corral_source_split_10152:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb10:
    assume $i4 == 1;
    goto corral_source_split_10144;

  corral_source_split_10144:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1531} ldv_dummy_resourceless_instance_callback_3_12($u7, $u8, $u9, $u1);
    goto SeqInstr_130, SeqInstr_131;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  SeqInstr_132:
    goto corral_source_split_10146;

  corral_source_split_10146:
    assume {:verifier.code 0} true;
    goto $bb35;

  SeqInstr_130:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_10138;

  corral_source_split_10138:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1530} ldv_dummy_resourceless_instance_callback_3_15($u5, $u6, $u1);
    goto corral_source_split_10140;

  corral_source_split_10140:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb2:
    assume $i2 == 1;
    goto corral_source_split_10132;

  corral_source_split_10132:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1529} ldv_dummy_resourceless_instance_callback_3_18($u3, $u4);
    goto corral_source_split_10134;

  corral_source_split_10134:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1527} $i1 := ldv_undef_int();
    call {:si_unique_call 1528} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_10129;
}



const ldv_struct_dvb_usb_adapter_properties_dummy_resourceless_instance_4: ref;

axiom ldv_struct_dvb_usb_adapter_properties_dummy_resourceless_instance_4 == $sub.ref(0, 455356);

procedure ldv_struct_dvb_usb_adapter_properties_dummy_resourceless_instance_4($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.11, $M.12, $M.8, $M.15, $M.27, $M.18, $M.19, $M.20, $M.21, $M.22, $CurrAddr, $M.29, $M.28, $M.23, $M.24, $M.25, assertsPassed;



implementation ldv_struct_dvb_usb_adapter_properties_dummy_resourceless_instance_4($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10180;

  corral_source_split_10180:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $p11 := ldv_struct_dvb_usb_adapter_properties_dummy_resourceless_instance_4_loop_$bb1($i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $p11);
    goto $bb1_last;

  corral_source_split_10182:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_10183;

  corral_source_split_10183:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 2);
    goto corral_source_split_10189;

  corral_source_split_10189:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i1, 3);
    goto corral_source_split_10195;

  corral_source_split_10195:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i1, 4);
    goto corral_source_split_10201;

  corral_source_split_10201:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i1, 5);
    goto corral_source_split_10207;

  corral_source_split_10207:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i1, 6);
    goto corral_source_split_10215;

  corral_source_split_10215:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i1, 7);
    goto corral_source_split_10221;

  corral_source_split_10221:
    assume {:verifier.code 0} true;
    $i9 := $i1;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 8);
    goto corral_source_split_10227;

  corral_source_split_10227:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1550} ldv_stop();
    goto corral_source_split_10231;

  corral_source_split_10231:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    return;

  $bb30:
    assume $i10 == 1;
    goto corral_source_split_10229;

  corral_source_split_10229:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb26:
    assume $i8 == 1;
    goto corral_source_split_10223;

  corral_source_split_10223:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1549} ldv_dummy_resourceless_instance_callback_4_3($u3, $u4);
    goto corral_source_split_10225;

  corral_source_split_10225:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb35_dummy;

  $bb22:
    assume $i7 == 1;
    goto corral_source_split_10217;

  corral_source_split_10217:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1548} ldv_dummy_resourceless_instance_callback_4_7($u14, $u8);
    goto corral_source_split_10219;

  corral_source_split_10219:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb18:
    assume $i6 == 1;
    goto corral_source_split_10209;

  corral_source_split_10209:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1545} $p11 := ldv_xmalloc(1);
    goto corral_source_split_10211;

  corral_source_split_10211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1546} ldv_dummy_resourceless_instance_callback_4_8($u12, $u6, $p11, $u13);
    goto corral_source_split_10212;

  corral_source_split_10212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1547} ldv_free($p11);
    goto corral_source_split_10213;

  corral_source_split_10213:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb14:
    assume $i5 == 1;
    goto corral_source_split_10203;

  corral_source_split_10203:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1544} ldv_dummy_resourceless_instance_callback_4_11($u10, $u11);
    goto corral_source_split_10205;

  corral_source_split_10205:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb10:
    assume $i4 == 1;
    goto corral_source_split_10197;

  corral_source_split_10197:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1543} ldv_dummy_resourceless_instance_callback_4_12($u7, $u8, $u9, $u1);
    goto SeqInstr_133, SeqInstr_134;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  SeqInstr_135:
    goto corral_source_split_10199;

  corral_source_split_10199:
    assume {:verifier.code 0} true;
    goto $bb35;

  SeqInstr_133:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_10191;

  corral_source_split_10191:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1542} ldv_dummy_resourceless_instance_callback_4_15($u5, $u6, $u1);
    goto corral_source_split_10193;

  corral_source_split_10193:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb2:
    assume $i2 == 1;
    goto corral_source_split_10185;

  corral_source_split_10185:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1541} ldv_dummy_resourceless_instance_callback_4_18($u3, $u4);
    goto corral_source_split_10187;

  corral_source_split_10187:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1539} $i1 := ldv_undef_int();
    call {:si_unique_call 1540} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_10182;
}



const ldv_struct_dvb_usb_adapter_properties_dummy_resourceless_instance_5: ref;

axiom ldv_struct_dvb_usb_adapter_properties_dummy_resourceless_instance_5 == $sub.ref(0, 456388);

procedure ldv_struct_dvb_usb_adapter_properties_dummy_resourceless_instance_5($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.11, $M.12, $M.8, $M.15, $M.27, $CurrAddr, $M.29, $M.28, $M.18, $M.19, $M.20, $M.21, $M.22, assertsPassed, $M.23, $M.24, $M.25;



implementation ldv_struct_dvb_usb_adapter_properties_dummy_resourceless_instance_5($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10233;

  corral_source_split_10233:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $p11 := ldv_struct_dvb_usb_adapter_properties_dummy_resourceless_instance_5_loop_$bb1($i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $p11);
    goto $bb1_last;

  corral_source_split_10235:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_10236;

  corral_source_split_10236:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 2);
    goto corral_source_split_10242;

  corral_source_split_10242:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i1, 3);
    goto corral_source_split_10248;

  corral_source_split_10248:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i1, 4);
    goto corral_source_split_10254;

  corral_source_split_10254:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i1, 5);
    goto corral_source_split_10260;

  corral_source_split_10260:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i1, 6);
    goto corral_source_split_10268;

  corral_source_split_10268:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i1, 7);
    goto corral_source_split_10274;

  corral_source_split_10274:
    assume {:verifier.code 0} true;
    $i9 := $i1;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 8);
    goto corral_source_split_10280;

  corral_source_split_10280:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1562} ldv_stop();
    goto corral_source_split_10284;

  corral_source_split_10284:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    return;

  $bb30:
    assume $i10 == 1;
    goto corral_source_split_10282;

  corral_source_split_10282:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb26:
    assume $i8 == 1;
    goto corral_source_split_10276;

  corral_source_split_10276:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1561} ldv_dummy_resourceless_instance_callback_5_3($u3, $u4);
    goto corral_source_split_10278;

  corral_source_split_10278:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb35_dummy;

  $bb22:
    assume $i7 == 1;
    goto corral_source_split_10270;

  corral_source_split_10270:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1560} ldv_dummy_resourceless_instance_callback_5_7($u14, $u8);
    goto corral_source_split_10272;

  corral_source_split_10272:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb18:
    assume $i6 == 1;
    goto corral_source_split_10262;

  corral_source_split_10262:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1557} $p11 := ldv_xmalloc(1);
    goto corral_source_split_10264;

  corral_source_split_10264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1558} ldv_dummy_resourceless_instance_callback_5_8($u12, $u6, $p11, $u13);
    goto corral_source_split_10265;

  corral_source_split_10265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1559} ldv_free($p11);
    goto corral_source_split_10266;

  corral_source_split_10266:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb14:
    assume $i5 == 1;
    goto corral_source_split_10256;

  corral_source_split_10256:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1556} ldv_dummy_resourceless_instance_callback_5_11($u10, $u11);
    goto corral_source_split_10258;

  corral_source_split_10258:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb10:
    assume $i4 == 1;
    goto corral_source_split_10250;

  corral_source_split_10250:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1555} ldv_dummy_resourceless_instance_callback_5_12($u7, $u8, $u9, $u1);
    goto SeqInstr_136, SeqInstr_137;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  SeqInstr_138:
    goto corral_source_split_10252;

  corral_source_split_10252:
    assume {:verifier.code 0} true;
    goto $bb35;

  SeqInstr_136:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_10244;

  corral_source_split_10244:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1554} ldv_dummy_resourceless_instance_callback_5_15($u5, $u6, $u1);
    goto corral_source_split_10246;

  corral_source_split_10246:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb2:
    assume $i2 == 1;
    goto corral_source_split_10238;

  corral_source_split_10238:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1553} ldv_dummy_resourceless_instance_callback_5_18($u3, $u4);
    goto corral_source_split_10240;

  corral_source_split_10240:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1551} $i1 := ldv_undef_int();
    call {:si_unique_call 1552} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_10235;
}



const ldv_dummy_resourceless_instance_callback_5_18: ref;

axiom ldv_dummy_resourceless_instance_callback_5_18 == $sub.ref(0, 457420);

procedure ldv_dummy_resourceless_instance_callback_5_18($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr;



implementation ldv_dummy_resourceless_instance_callback_5_18($p0: ref, $p1: ref)
{
  var vslice_dummy_var_358: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10286;

  corral_source_split_10286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1563} vslice_dummy_var_358 := mxl111sf_attach_tuner($p1);
    goto corral_source_split_10287;

  corral_source_split_10287:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_5_15: ref;

axiom ldv_dummy_resourceless_instance_callback_5_15 == $sub.ref(0, 458452);

procedure ldv_dummy_resourceless_instance_callback_5_15($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.15, $CurrAddr;



implementation ldv_dummy_resourceless_instance_callback_5_15($p0: ref, $p1: ref, $i2: i32)
{
  var vslice_dummy_var_359: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1564} {:cexpr "ldv_dummy_resourceless_instance_callback_5_15:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_10289;

  corral_source_split_10289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1565} vslice_dummy_var_359 := mxl111sf_streaming_ctrl_mercury_mh($p1, $i2);
    goto corral_source_split_10290;

  corral_source_split_10290:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_5_12: ref;

axiom ldv_dummy_resourceless_instance_callback_5_12 == $sub.ref(0, 459484);

procedure ldv_dummy_resourceless_instance_callback_5_12($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;
  modifies $M.15, $M.27, $M.8, $M.29, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.28, $M.7, assertsPassed, $CurrAddr;



implementation ldv_dummy_resourceless_instance_callback_5_12($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{
  var vslice_dummy_var_360: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1566} {:cexpr "ldv_dummy_resourceless_instance_callback_5_12:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_10292;

  corral_source_split_10292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1567} vslice_dummy_var_360 := mxl111sf_i2c_xfer($p1, $p2, $i3);
    goto SeqInstr_139, SeqInstr_140;

  SeqInstr_140:
    assume assertsPassed;
    goto SeqInstr_141;

  SeqInstr_141:
    goto corral_source_split_10293;

  corral_source_split_10293:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_139:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_5_11: ref;

axiom ldv_dummy_resourceless_instance_callback_5_11 == $sub.ref(0, 460516);

procedure ldv_dummy_resourceless_instance_callback_5_11($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.11, $M.12, $M.7, $CurrAddr, $M.15, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6;



implementation ldv_dummy_resourceless_instance_callback_5_11($p0: ref, $p1: ref)
{
  var vslice_dummy_var_361: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10295;

  corral_source_split_10295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1568} vslice_dummy_var_361 := mxl111sf_init($p1);
    goto corral_source_split_10296;

  corral_source_split_10296:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_5_8: ref;

axiom ldv_dummy_resourceless_instance_callback_5_8 == $sub.ref(0, 461548);

procedure ldv_dummy_resourceless_instance_callback_5_8($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr;



implementation ldv_dummy_resourceless_instance_callback_5_8($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var vslice_dummy_var_362: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10298;

  corral_source_split_10298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1569} vslice_dummy_var_362 := mxl111sf_get_stream_config_mh($p1, $p2, $p3);
    goto corral_source_split_10299;

  corral_source_split_10299:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_5_7: ref;

axiom ldv_dummy_resourceless_instance_callback_5_7 == $sub.ref(0, 462580);

procedure ldv_dummy_resourceless_instance_callback_5_7($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_5_7($p0: ref, $p1: ref)
{
  var vslice_dummy_var_363: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10301;

  corral_source_split_10301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1570} vslice_dummy_var_363 := mxl111sf_i2c_func($p1);
    goto corral_source_split_10302;

  corral_source_split_10302:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_5_3: ref;

axiom ldv_dummy_resourceless_instance_callback_5_3 == $sub.ref(0, 463612);

procedure ldv_dummy_resourceless_instance_callback_5_3($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.15, $CurrAddr, $M.18, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25;



implementation ldv_dummy_resourceless_instance_callback_5_3($p0: ref, $p1: ref)
{
  var vslice_dummy_var_364: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10304;

  corral_source_split_10304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1571} vslice_dummy_var_364 := mxl111sf_frontend_attach_mh($p1);
    goto corral_source_split_10305;

  corral_source_split_10305:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_4_18: ref;

axiom ldv_dummy_resourceless_instance_callback_4_18 == $sub.ref(0, 464644);

procedure ldv_dummy_resourceless_instance_callback_4_18($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr;



implementation ldv_dummy_resourceless_instance_callback_4_18($p0: ref, $p1: ref)
{
  var vslice_dummy_var_365: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10307;

  corral_source_split_10307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1572} vslice_dummy_var_365 := mxl111sf_attach_tuner($p1);
    goto corral_source_split_10308;

  corral_source_split_10308:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_4_15: ref;

axiom ldv_dummy_resourceless_instance_callback_4_15 == $sub.ref(0, 465676);

procedure ldv_dummy_resourceless_instance_callback_4_15($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.15, $CurrAddr;



implementation ldv_dummy_resourceless_instance_callback_4_15($p0: ref, $p1: ref, $i2: i32)
{
  var vslice_dummy_var_366: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1573} {:cexpr "ldv_dummy_resourceless_instance_callback_4_15:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_10310;

  corral_source_split_10310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1574} vslice_dummy_var_366 := mxl111sf_streaming_ctrl_mercury_mh($p1, $i2);
    goto corral_source_split_10311;

  corral_source_split_10311:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_4_12: ref;

axiom ldv_dummy_resourceless_instance_callback_4_12 == $sub.ref(0, 466708);

procedure ldv_dummy_resourceless_instance_callback_4_12($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;
  modifies $M.15, $M.27, $M.8, $M.29, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.28, $M.7, assertsPassed, $CurrAddr;



implementation ldv_dummy_resourceless_instance_callback_4_12($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{
  var vslice_dummy_var_367: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1575} {:cexpr "ldv_dummy_resourceless_instance_callback_4_12:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_10313;

  corral_source_split_10313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1576} vslice_dummy_var_367 := mxl111sf_i2c_xfer($p1, $p2, $i3);
    goto SeqInstr_142, SeqInstr_143;

  SeqInstr_143:
    assume assertsPassed;
    goto SeqInstr_144;

  SeqInstr_144:
    goto corral_source_split_10314;

  corral_source_split_10314:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_142:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_4_11: ref;

axiom ldv_dummy_resourceless_instance_callback_4_11 == $sub.ref(0, 467740);

procedure ldv_dummy_resourceless_instance_callback_4_11($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.11, $M.12, $M.7, $CurrAddr, $M.15, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6;



implementation ldv_dummy_resourceless_instance_callback_4_11($p0: ref, $p1: ref)
{
  var vslice_dummy_var_368: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10316;

  corral_source_split_10316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1577} vslice_dummy_var_368 := mxl111sf_init($p1);
    goto corral_source_split_10317;

  corral_source_split_10317:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_4_8: ref;

axiom ldv_dummy_resourceless_instance_callback_4_8 == $sub.ref(0, 468772);

procedure ldv_dummy_resourceless_instance_callback_4_8($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr;



implementation ldv_dummy_resourceless_instance_callback_4_8($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var vslice_dummy_var_369: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10319;

  corral_source_split_10319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1578} vslice_dummy_var_369 := mxl111sf_get_stream_config_mercury_mh($p1, $p2, $p3);
    goto corral_source_split_10320;

  corral_source_split_10320:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_4_7: ref;

axiom ldv_dummy_resourceless_instance_callback_4_7 == $sub.ref(0, 469804);

procedure ldv_dummy_resourceless_instance_callback_4_7($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_4_7($p0: ref, $p1: ref)
{
  var vslice_dummy_var_370: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10322;

  corral_source_split_10322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1579} vslice_dummy_var_370 := mxl111sf_i2c_func($p1);
    goto corral_source_split_10323;

  corral_source_split_10323:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_4_3: ref;

axiom ldv_dummy_resourceless_instance_callback_4_3 == $sub.ref(0, 470836);

procedure ldv_dummy_resourceless_instance_callback_4_3($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.15, $M.18, $M.19, $M.20, $M.21, $M.22, $CurrAddr, $M.23, $M.24, $M.25;



implementation ldv_dummy_resourceless_instance_callback_4_3($p0: ref, $p1: ref)
{
  var vslice_dummy_var_371: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10325;

  corral_source_split_10325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1580} vslice_dummy_var_371 := mxl111sf_frontend_attach_mercury_mh($p1);
    goto corral_source_split_10326;

  corral_source_split_10326:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_3_18: ref;

axiom ldv_dummy_resourceless_instance_callback_3_18 == $sub.ref(0, 471868);

procedure ldv_dummy_resourceless_instance_callback_3_18($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr;



implementation ldv_dummy_resourceless_instance_callback_3_18($p0: ref, $p1: ref)
{
  var vslice_dummy_var_372: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10328;

  corral_source_split_10328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1581} vslice_dummy_var_372 := mxl111sf_attach_tuner($p1);
    goto corral_source_split_10329;

  corral_source_split_10329:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_3_15: ref;

axiom ldv_dummy_resourceless_instance_callback_3_15 == $sub.ref(0, 472900);

procedure ldv_dummy_resourceless_instance_callback_3_15($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.15, $M.7, $CurrAddr;



implementation ldv_dummy_resourceless_instance_callback_3_15($p0: ref, $p1: ref, $i2: i32)
{
  var vslice_dummy_var_373: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1582} {:cexpr "ldv_dummy_resourceless_instance_callback_3_15:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_10331;

  corral_source_split_10331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1583} vslice_dummy_var_373 := mxl111sf_streaming_ctrl_mercury($p1, $i2);
    goto corral_source_split_10332;

  corral_source_split_10332:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_3_12: ref;

axiom ldv_dummy_resourceless_instance_callback_3_12 == $sub.ref(0, 473932);

procedure ldv_dummy_resourceless_instance_callback_3_12($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;
  modifies $M.15, $M.27, $M.8, $M.29, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.28, $M.7, assertsPassed, $CurrAddr;



implementation ldv_dummy_resourceless_instance_callback_3_12($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{
  var vslice_dummy_var_374: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1584} {:cexpr "ldv_dummy_resourceless_instance_callback_3_12:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_10334;

  corral_source_split_10334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1585} vslice_dummy_var_374 := mxl111sf_i2c_xfer($p1, $p2, $i3);
    goto SeqInstr_145, SeqInstr_146;

  SeqInstr_146:
    assume assertsPassed;
    goto SeqInstr_147;

  SeqInstr_147:
    goto corral_source_split_10335;

  corral_source_split_10335:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_145:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_3_11: ref;

axiom ldv_dummy_resourceless_instance_callback_3_11 == $sub.ref(0, 474964);

procedure ldv_dummy_resourceless_instance_callback_3_11($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.11, $M.12, $M.7, $CurrAddr, $M.15, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6;



implementation ldv_dummy_resourceless_instance_callback_3_11($p0: ref, $p1: ref)
{
  var vslice_dummy_var_375: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10337;

  corral_source_split_10337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1586} vslice_dummy_var_375 := mxl111sf_init($p1);
    goto corral_source_split_10338;

  corral_source_split_10338:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_3_8: ref;

axiom ldv_dummy_resourceless_instance_callback_3_8 == $sub.ref(0, 475996);

procedure ldv_dummy_resourceless_instance_callback_3_8($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr;



implementation ldv_dummy_resourceless_instance_callback_3_8($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var vslice_dummy_var_376: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10340;

  corral_source_split_10340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1587} vslice_dummy_var_376 := mxl111sf_get_stream_config_mercury($p1, $p2, $p3);
    goto corral_source_split_10341;

  corral_source_split_10341:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_3_7: ref;

axiom ldv_dummy_resourceless_instance_callback_3_7 == $sub.ref(0, 477028);

procedure ldv_dummy_resourceless_instance_callback_3_7($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_3_7($p0: ref, $p1: ref)
{
  var vslice_dummy_var_377: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10343;

  corral_source_split_10343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1588} vslice_dummy_var_377 := mxl111sf_i2c_func($p1);
    goto corral_source_split_10344;

  corral_source_split_10344:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_3_3: ref;

axiom ldv_dummy_resourceless_instance_callback_3_3 == $sub.ref(0, 478060);

procedure ldv_dummy_resourceless_instance_callback_3_3($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.15, $CurrAddr, $M.18, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25;



implementation ldv_dummy_resourceless_instance_callback_3_3($p0: ref, $p1: ref)
{
  var vslice_dummy_var_378: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10346;

  corral_source_split_10346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1589} vslice_dummy_var_378 := mxl111sf_frontend_attach_mercury($p1);
    goto corral_source_split_10347;

  corral_source_split_10347:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_2_18: ref;

axiom ldv_dummy_resourceless_instance_callback_2_18 == $sub.ref(0, 479092);

procedure ldv_dummy_resourceless_instance_callback_2_18($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr;



implementation ldv_dummy_resourceless_instance_callback_2_18($p0: ref, $p1: ref)
{
  var vslice_dummy_var_379: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10349;

  corral_source_split_10349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1590} vslice_dummy_var_379 := mxl111sf_attach_tuner($p1);
    goto corral_source_split_10350;

  corral_source_split_10350:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_2_15: ref;

axiom ldv_dummy_resourceless_instance_callback_2_15 == $sub.ref(0, 480124);

procedure ldv_dummy_resourceless_instance_callback_2_15($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, $M.7, $M.15;



implementation ldv_dummy_resourceless_instance_callback_2_15($p0: ref, $p1: ref, $i2: i32)
{
  var vslice_dummy_var_380: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1591} {:cexpr "ldv_dummy_resourceless_instance_callback_2_15:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_10352;

  corral_source_split_10352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1592} vslice_dummy_var_380 := mxl111sf_ep4_streaming_ctrl($p1, $i2);
    goto corral_source_split_10353;

  corral_source_split_10353:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_2_12: ref;

axiom ldv_dummy_resourceless_instance_callback_2_12 == $sub.ref(0, 481156);

procedure ldv_dummy_resourceless_instance_callback_2_12($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;
  modifies $M.15, $M.27, $M.8, $M.29, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.28, $M.7, assertsPassed, $CurrAddr;



implementation ldv_dummy_resourceless_instance_callback_2_12($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{
  var vslice_dummy_var_381: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1593} {:cexpr "ldv_dummy_resourceless_instance_callback_2_12:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_10355;

  corral_source_split_10355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1594} vslice_dummy_var_381 := mxl111sf_i2c_xfer($p1, $p2, $i3);
    goto SeqInstr_148, SeqInstr_149;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  SeqInstr_150:
    goto corral_source_split_10356;

  corral_source_split_10356:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_148:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_2_11: ref;

axiom ldv_dummy_resourceless_instance_callback_2_11 == $sub.ref(0, 482188);

procedure ldv_dummy_resourceless_instance_callback_2_11($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.11, $M.12, $M.7, $CurrAddr, $M.15, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6;



implementation ldv_dummy_resourceless_instance_callback_2_11($p0: ref, $p1: ref)
{
  var vslice_dummy_var_382: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10358;

  corral_source_split_10358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1595} vslice_dummy_var_382 := mxl111sf_init($p1);
    goto corral_source_split_10359;

  corral_source_split_10359:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_2_8: ref;

axiom ldv_dummy_resourceless_instance_callback_2_8 == $sub.ref(0, 483220);

procedure ldv_dummy_resourceless_instance_callback_2_8($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr;



implementation ldv_dummy_resourceless_instance_callback_2_8($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var vslice_dummy_var_383: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10361;

  corral_source_split_10361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1596} vslice_dummy_var_383 := mxl111sf_get_stream_config_dvbt($p1, $p2, $p3);
    goto corral_source_split_10362;

  corral_source_split_10362:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_2_7: ref;

axiom ldv_dummy_resourceless_instance_callback_2_7 == $sub.ref(0, 484252);

procedure ldv_dummy_resourceless_instance_callback_2_7($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_2_7($p0: ref, $p1: ref)
{
  var vslice_dummy_var_384: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10364;

  corral_source_split_10364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1597} vslice_dummy_var_384 := mxl111sf_i2c_func($p1);
    goto corral_source_split_10365;

  corral_source_split_10365:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_2_3: ref;

axiom ldv_dummy_resourceless_instance_callback_2_3 == $sub.ref(0, 485284);

procedure ldv_dummy_resourceless_instance_callback_2_3($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.15, $CurrAddr, $M.18, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25;



implementation ldv_dummy_resourceless_instance_callback_2_3($p0: ref, $p1: ref)
{
  var vslice_dummy_var_385: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10367;

  corral_source_split_10367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1598} vslice_dummy_var_385 := mxl111sf_frontend_attach_dvbt($p1);
    goto corral_source_split_10368;

  corral_source_split_10368:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_1_18: ref;

axiom ldv_dummy_resourceless_instance_callback_1_18 == $sub.ref(0, 486316);

procedure ldv_dummy_resourceless_instance_callback_1_18($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr;



implementation ldv_dummy_resourceless_instance_callback_1_18($p0: ref, $p1: ref)
{
  var vslice_dummy_var_386: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10370;

  corral_source_split_10370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1599} vslice_dummy_var_386 := mxl111sf_attach_tuner($p1);
    goto corral_source_split_10371;

  corral_source_split_10371:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_1_15: ref;

axiom ldv_dummy_resourceless_instance_callback_1_15 == $sub.ref(0, 487348);

procedure ldv_dummy_resourceless_instance_callback_1_15($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, $M.15, $M.7;



implementation ldv_dummy_resourceless_instance_callback_1_15($p0: ref, $p1: ref, $i2: i32)
{
  var vslice_dummy_var_387: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1600} {:cexpr "ldv_dummy_resourceless_instance_callback_1_15:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_10373;

  corral_source_split_10373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1601} vslice_dummy_var_387 := mxl111sf_streaming_ctrl_atsc_mh($p1, $i2);
    goto corral_source_split_10374;

  corral_source_split_10374:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_1_12: ref;

axiom ldv_dummy_resourceless_instance_callback_1_12 == $sub.ref(0, 488380);

procedure ldv_dummy_resourceless_instance_callback_1_12($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;
  modifies $M.15, $M.27, $M.8, $M.29, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.28, $M.7, assertsPassed, $CurrAddr;



implementation ldv_dummy_resourceless_instance_callback_1_12($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{
  var vslice_dummy_var_388: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1602} {:cexpr "ldv_dummy_resourceless_instance_callback_1_12:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_10376;

  corral_source_split_10376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1603} vslice_dummy_var_388 := mxl111sf_i2c_xfer($p1, $p2, $i3);
    goto SeqInstr_151, SeqInstr_152;

  SeqInstr_152:
    assume assertsPassed;
    goto SeqInstr_153;

  SeqInstr_153:
    goto corral_source_split_10377;

  corral_source_split_10377:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_151:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_1_11: ref;

axiom ldv_dummy_resourceless_instance_callback_1_11 == $sub.ref(0, 489412);

procedure ldv_dummy_resourceless_instance_callback_1_11($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.11, $M.12, $M.7, $CurrAddr, $M.15, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6;



implementation ldv_dummy_resourceless_instance_callback_1_11($p0: ref, $p1: ref)
{
  var vslice_dummy_var_389: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10379;

  corral_source_split_10379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1604} vslice_dummy_var_389 := mxl111sf_init($p1);
    goto corral_source_split_10380;

  corral_source_split_10380:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_1_8: ref;

axiom ldv_dummy_resourceless_instance_callback_1_8 == $sub.ref(0, 490444);

procedure ldv_dummy_resourceless_instance_callback_1_8($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr;



implementation ldv_dummy_resourceless_instance_callback_1_8($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var vslice_dummy_var_390: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10382;

  corral_source_split_10382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1605} vslice_dummy_var_390 := mxl111sf_get_stream_config_atsc_mh($p1, $p2, $p3);
    goto corral_source_split_10383;

  corral_source_split_10383:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_1_7: ref;

axiom ldv_dummy_resourceless_instance_callback_1_7 == $sub.ref(0, 491476);

procedure ldv_dummy_resourceless_instance_callback_1_7($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_1_7($p0: ref, $p1: ref)
{
  var vslice_dummy_var_391: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10385;

  corral_source_split_10385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1606} vslice_dummy_var_391 := mxl111sf_i2c_func($p1);
    goto corral_source_split_10386;

  corral_source_split_10386:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_1_3: ref;

axiom ldv_dummy_resourceless_instance_callback_1_3 == $sub.ref(0, 492508);

procedure ldv_dummy_resourceless_instance_callback_1_3($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr, $M.15, $M.18, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25;



implementation ldv_dummy_resourceless_instance_callback_1_3($p0: ref, $p1: ref)
{
  var vslice_dummy_var_392: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10388;

  corral_source_split_10388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1607} vslice_dummy_var_392 := mxl111sf_frontend_attach_atsc_mh($p1);
    goto corral_source_split_10389;

  corral_source_split_10389:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_0_18: ref;

axiom ldv_dummy_resourceless_instance_callback_0_18 == $sub.ref(0, 493540);

procedure ldv_dummy_resourceless_instance_callback_0_18($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr;



implementation ldv_dummy_resourceless_instance_callback_0_18($p0: ref, $p1: ref)
{
  var vslice_dummy_var_393: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10391;

  corral_source_split_10391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1608} vslice_dummy_var_393 := mxl111sf_attach_tuner($p1);
    goto corral_source_split_10392;

  corral_source_split_10392:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_0_15: ref;

axiom ldv_dummy_resourceless_instance_callback_0_15 == $sub.ref(0, 494572);

procedure ldv_dummy_resourceless_instance_callback_0_15($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.15, $M.7, $CurrAddr;



implementation ldv_dummy_resourceless_instance_callback_0_15($p0: ref, $p1: ref, $i2: i32)
{
  var vslice_dummy_var_394: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1609} {:cexpr "ldv_dummy_resourceless_instance_callback_0_15:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_10394;

  corral_source_split_10394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1610} vslice_dummy_var_394 := mxl111sf_ep6_streaming_ctrl($p1, $i2);
    goto corral_source_split_10395;

  corral_source_split_10395:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_0_12: ref;

axiom ldv_dummy_resourceless_instance_callback_0_12 == $sub.ref(0, 495604);

procedure ldv_dummy_resourceless_instance_callback_0_12($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;
  modifies $M.15, $M.27, $M.8, $M.29, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.28, $M.7, assertsPassed, $CurrAddr;



implementation ldv_dummy_resourceless_instance_callback_0_12($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{
  var vslice_dummy_var_395: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1611} {:cexpr "ldv_dummy_resourceless_instance_callback_0_12:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_10397;

  corral_source_split_10397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1612} vslice_dummy_var_395 := mxl111sf_i2c_xfer($p1, $p2, $i3);
    goto SeqInstr_154, SeqInstr_155;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  SeqInstr_156:
    goto corral_source_split_10398;

  corral_source_split_10398:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_154:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_0_11: ref;

axiom ldv_dummy_resourceless_instance_callback_0_11 == $sub.ref(0, 496636);

procedure ldv_dummy_resourceless_instance_callback_0_11($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.11, $M.12, $M.7, $CurrAddr, $M.15, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6;



implementation ldv_dummy_resourceless_instance_callback_0_11($p0: ref, $p1: ref)
{
  var vslice_dummy_var_396: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10400;

  corral_source_split_10400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1613} vslice_dummy_var_396 := mxl111sf_init($p1);
    goto corral_source_split_10401;

  corral_source_split_10401:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_0_8: ref;

axiom ldv_dummy_resourceless_instance_callback_0_8 == $sub.ref(0, 497668);

procedure ldv_dummy_resourceless_instance_callback_0_8($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr;



implementation ldv_dummy_resourceless_instance_callback_0_8($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var vslice_dummy_var_397: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10403;

  corral_source_split_10403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1614} vslice_dummy_var_397 := mxl111sf_get_stream_config_atsc($p1, $p2, $p3);
    goto corral_source_split_10404;

  corral_source_split_10404:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_0_7: ref;

axiom ldv_dummy_resourceless_instance_callback_0_7 == $sub.ref(0, 498700);

procedure ldv_dummy_resourceless_instance_callback_0_7($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_0_7($p0: ref, $p1: ref)
{
  var vslice_dummy_var_398: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10406;

  corral_source_split_10406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1615} vslice_dummy_var_398 := mxl111sf_i2c_func($p1);
    goto corral_source_split_10407;

  corral_source_split_10407:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_0_3: ref;

axiom ldv_dummy_resourceless_instance_callback_0_3 == $sub.ref(0, 499732);

procedure ldv_dummy_resourceless_instance_callback_0_3($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.15, $CurrAddr, $M.18, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25;



implementation ldv_dummy_resourceless_instance_callback_0_3($p0: ref, $p1: ref)
{
  var vslice_dummy_var_399: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10409;

  corral_source_split_10409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1616} vslice_dummy_var_399 := mxl111sf_frontend_attach_atsc($p1);
    goto corral_source_split_10410;

  corral_source_split_10410:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dispatch_register_dummy_resourceless_instance_4_11_7: ref;

axiom ldv_dispatch_register_dummy_resourceless_instance_4_11_7 == $sub.ref(0, 500764);

procedure ldv_dispatch_register_dummy_resourceless_instance_4_11_7();
  free requires assertsPassed;
  modifies $M.15, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr;



implementation ldv_dispatch_register_dummy_resourceless_instance_4_11_7()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10412;

  corral_source_split_10412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1617} $p0 := ldv_xmalloc(4);
    goto corral_source_split_10413;

  corral_source_split_10413:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_10414;

  corral_source_split_10414:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_10415;

  corral_source_split_10415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1618} ldv_struct_mxl111sf_tuner_config_dummy_resourceless_instance_6($p2);
    goto corral_source_split_10416;

  corral_source_split_10416:
    assume {:verifier.code 0} true;
    return;
}



const ldv_struct_mxl111sf_tuner_config_dummy_resourceless_instance_6: ref;

axiom ldv_struct_mxl111sf_tuner_config_dummy_resourceless_instance_6 == $sub.ref(0, 501796);

procedure ldv_struct_mxl111sf_tuner_config_dummy_resourceless_instance_6($p0: ref);
  free requires assertsPassed;
  modifies $M.15, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr;



implementation ldv_struct_mxl111sf_tuner_config_dummy_resourceless_instance_6($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i8;
  var $i11: i32;
  var $i12: i8;
  var $p13: ref;
  var $i14: i32;
  var $i15: i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10418;

  corral_source_split_10418:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i9, $i10, $i11, $i12, $p13, $i14, $i15 := ldv_struct_mxl111sf_tuner_config_dummy_resourceless_instance_6_loop_$bb1($i1, $i2, $i3, $i4, $i5, $i6, $i7, $i9, $i10, $i11, $i12, $p13, $i14, $i15);
    goto $bb1_last;

  corral_source_split_10420:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_10421;

  corral_source_split_10421:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 2);
    goto corral_source_split_10431;

  corral_source_split_10431:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i1, 3);
    goto corral_source_split_10437;

  corral_source_split_10437:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i1, 4);
    goto corral_source_split_10447;

  corral_source_split_10447:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i1, 5);
    goto corral_source_split_10453;

  corral_source_split_10453:
    assume {:verifier.code 0} true;
    $i7 := $i1;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 6);
    goto corral_source_split_10459;

  corral_source_split_10459:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1628} ldv_stop();
    goto corral_source_split_10463;

  corral_source_split_10463:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    return;

  $bb22:
    assume $i8 == 1;
    goto corral_source_split_10461;

  corral_source_split_10461:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb18:
    assume $i6 == 1;
    goto corral_source_split_10455;

  corral_source_split_10455:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1627} ldv_dummy_resourceless_instance_callback_6_3($u22, $u6);
    goto corral_source_split_10457;

  corral_source_split_10457:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb27_dummy;

  $bb14:
    assume $i5 == 1;
    goto corral_source_split_10449;

  corral_source_split_10449:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1626} ldv_dummy_resourceless_instance_callback_6_7($u20, $u17, $u21);
    goto corral_source_split_10451;

  corral_source_split_10451:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb10:
    assume $i4 == 1;
    goto corral_source_split_10439;

  corral_source_split_10439:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1623} $p13 := ldv_xmalloc(1);
    goto corral_source_split_10441;

  corral_source_split_10441:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($u15);
    goto corral_source_split_10442;

  corral_source_split_10442:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i32.i8($i14);
    goto corral_source_split_10443;

  corral_source_split_10443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1624} ldv_dummy_resourceless_instance_callback_6_8($u19, $u17, $i15, $p13);
    goto corral_source_split_10444;

  corral_source_split_10444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1625} ldv_free($p13);
    goto corral_source_split_10445;

  corral_source_split_10445:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_10433;

  corral_source_split_10433:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1622} ldv_dummy_resourceless_instance_callback_6_11($u18, $u17, $u1);
    goto corral_source_split_10435;

  corral_source_split_10435:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb2:
    assume $i2 == 1;
    goto corral_source_split_10423;

  corral_source_split_10423:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($u15);
    goto corral_source_split_10425;

  corral_source_split_10425:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i8($i9);
    goto corral_source_split_10426;

  corral_source_split_10426:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($u15);
    goto corral_source_split_10427;

  corral_source_split_10427:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i8($i11);
    goto corral_source_split_10428;

  corral_source_split_10428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1621} ldv_dummy_resourceless_instance_callback_6_14($u16, $u17, $i10, $i12);
    goto corral_source_split_10429;

  corral_source_split_10429:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1619} $i1 := ldv_undef_int();
    call {:si_unique_call 1620} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_10420;
}



const ldv_dummy_resourceless_instance_callback_6_14: ref;

axiom ldv_dummy_resourceless_instance_callback_6_14 == $sub.ref(0, 502828);

procedure ldv_dummy_resourceless_instance_callback_6_14($p0: ref, $p1: ref, $i2: i8, $i3: i8);
  free requires assertsPassed;
  modifies $M.15, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation ldv_dummy_resourceless_instance_callback_6_14($p0: ref, $p1: ref, $i2: i8, $i3: i8)
{
  var $i4: i32;
  var $i5: i8;
  var $i6: i32;
  var $i7: i8;
  var vslice_dummy_var_400: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1629} {:cexpr "ldv_dummy_resourceless_instance_callback_6_14:arg:arg2"} boogie_si_record_i8($i2);
    call {:si_unique_call 1630} {:cexpr "ldv_dummy_resourceless_instance_callback_6_14:arg:arg3"} boogie_si_record_i8($i3);
    goto corral_source_split_10465;

  corral_source_split_10465:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i2);
    goto corral_source_split_10466;

  corral_source_split_10466:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i32.i8($i4);
    goto corral_source_split_10467;

  corral_source_split_10467:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i3);
    goto corral_source_split_10468;

  corral_source_split_10468:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i8($i6);
    goto corral_source_split_10469;

  corral_source_split_10469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1631} vslice_dummy_var_400 := mxl111sf_write_reg($p1, $i5, $i7);
    goto corral_source_split_10470;

  corral_source_split_10470:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_6_11: ref;

axiom ldv_dummy_resourceless_instance_callback_6_11 == $sub.ref(0, 503860);

procedure ldv_dummy_resourceless_instance_callback_6_11($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.15, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation ldv_dummy_resourceless_instance_callback_6_11($p0: ref, $p1: ref, $i2: i32)
{
  var vslice_dummy_var_401: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1632} {:cexpr "ldv_dummy_resourceless_instance_callback_6_11:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_10472;

  corral_source_split_10472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1633} vslice_dummy_var_401 := mxl1x1sf_top_master_ctrl($p1, $i2);
    goto corral_source_split_10473;

  corral_source_split_10473:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_6_8: ref;

axiom ldv_dummy_resourceless_instance_callback_6_8 == $sub.ref(0, 504892);

procedure ldv_dummy_resourceless_instance_callback_6_8($p0: ref, $p1: ref, $i2: i8, $p3: ref);
  free requires assertsPassed;
  modifies $M.15, $M.7, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation ldv_dummy_resourceless_instance_callback_6_8($p0: ref, $p1: ref, $i2: i8, $p3: ref)
{
  var $i4: i32;
  var $i5: i8;
  var vslice_dummy_var_402: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1634} {:cexpr "ldv_dummy_resourceless_instance_callback_6_8:arg:arg2"} boogie_si_record_i8($i2);
    goto corral_source_split_10475;

  corral_source_split_10475:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i2);
    goto corral_source_split_10476;

  corral_source_split_10476:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i32.i8($i4);
    goto corral_source_split_10477;

  corral_source_split_10477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1635} vslice_dummy_var_402 := mxl111sf_read_reg($p1, $i5, $p3);
    goto corral_source_split_10478;

  corral_source_split_10478:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_6_7: ref;

axiom ldv_dummy_resourceless_instance_callback_6_7 == $sub.ref(0, 505924);

procedure ldv_dummy_resourceless_instance_callback_6_7($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.7, $M.15, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation ldv_dummy_resourceless_instance_callback_6_7($p0: ref, $p1: ref, $p2: ref)
{
  var vslice_dummy_var_403: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10480;

  corral_source_split_10480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1636} vslice_dummy_var_403 := mxl111sf_ctrl_program_regs($p1, $p2);
    goto corral_source_split_10481;

  corral_source_split_10481:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_6_3: ref;

axiom ldv_dummy_resourceless_instance_callback_6_3 == $sub.ref(0, 506956);

procedure ldv_dummy_resourceless_instance_callback_6_3($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $CurrAddr, $M.15, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7;



implementation ldv_dummy_resourceless_instance_callback_6_3($p0: ref, $p1: ref)
{
  var vslice_dummy_var_404: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10483;

  corral_source_split_10483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1637} vslice_dummy_var_404 := mxl111sf_ant_hunt($p1);
    goto corral_source_split_10484;

  corral_source_split_10484:
    assume {:verifier.code 0} true;
    return;
}



const ldv_entry_EMGentry_11: ref;

axiom ldv_entry_EMGentry_11 == $sub.ref(0, 507988);

procedure ldv_entry_EMGentry_11($p0: ref);
  free requires assertsPassed;
  modifies $M.34, $M.33, $M.15, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.11, $M.12, $M.8, $CurrAddr, $M.27, $M.18, $M.19, $M.20, $M.21, $M.22, assertsPassed, $M.29, $M.28, $M.23, $M.24, $M.25, $M.0, $M.17;



implementation ldv_entry_EMGentry_11($p0: ref)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10486;

  corral_source_split_10486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1638} $i1 := ldv_EMGentry_init_mxl111sf_usb_driver_init_11_11($u23);
    goto SeqInstr_157, SeqInstr_158;

  SeqInstr_158:
    assume assertsPassed;
    goto SeqInstr_159;

  SeqInstr_159:
    call {:si_unique_call 1639} {:cexpr "ldv_11_ret_default"} boogie_si_record_i32($i1);
    goto corral_source_split_10487;

  corral_source_split_10487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1640} $i2 := ldv_ldv_post_init_125($i1);
    call {:si_unique_call 1641} {:cexpr "ldv_11_ret_default"} boogie_si_record_i32($i2);
    goto corral_source_split_10488;

  corral_source_split_10488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1642} $i3 := ldv_undef_int();
    call {:si_unique_call 1643} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_10489;

  corral_source_split_10489:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_10490;

  corral_source_split_10490:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_10499;

  corral_source_split_10499:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i2, 0);
    goto corral_source_split_10500;

  corral_source_split_10500:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_10501;

  corral_source_split_10501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1647} ldv_assume($i8);
    goto corral_source_split_10502;

  corral_source_split_10502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1648} $i9 := ldv_undef_int();
    call {:si_unique_call 1649} {:cexpr "tmp"} boogie_si_record_i32($i9);
    goto corral_source_split_10503;

  corral_source_split_10503:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_10504;

  corral_source_split_10504:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1654} ldv_EMGentry_exit_mxl111sf_usb_driver_exit_11_2($u24);
    goto corral_source_split_10512;

  corral_source_split_10512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1655} ldv_ldv_check_final_state_127();
    goto SeqInstr_166, SeqInstr_167;

  SeqInstr_167:
    assume assertsPassed;
    goto SeqInstr_168;

  SeqInstr_168:
    goto corral_source_split_10513;

  corral_source_split_10513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1656} ldv_stop();
    goto corral_source_split_10514;

  corral_source_split_10514:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_166:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_10506;

  corral_source_split_10506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1650} ldv_dispatch_register_dummy_resourceless_instance_4_11_7();
    goto corral_source_split_10507;

  corral_source_split_10507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1651} ldv_dispatch_register_dummy_resourceless_instance_3_11_6();
    goto SeqInstr_163, SeqInstr_164;

  SeqInstr_164:
    assume assertsPassed;
    goto SeqInstr_165;

  SeqInstr_165:
    goto corral_source_split_10508;

  corral_source_split_10508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1652} ldv_dispatch_deregister_dummy_resourceless_instance_4_11_5();
    goto corral_source_split_10509;

  corral_source_split_10509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1653} ldv_dispatch_deregister_dummy_resourceless_instance_3_11_4();
    goto corral_source_split_10510;

  corral_source_split_10510:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_163:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_10492;

  corral_source_split_10492:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i2, 0);
    goto corral_source_split_10493;

  corral_source_split_10493:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_10494;

  corral_source_split_10494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1644} ldv_assume($i6);
    goto corral_source_split_10495;

  corral_source_split_10495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1645} ldv_ldv_check_final_state_126();
    goto SeqInstr_160, SeqInstr_161;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  SeqInstr_162:
    goto corral_source_split_10496;

  corral_source_split_10496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1646} ldv_stop();
    goto corral_source_split_10497;

  corral_source_split_10497:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_160:
    assume !assertsPassed;
    return;

  SeqInstr_157:
    assume !assertsPassed;
    return;
}



const ldv_ldv_post_init_125: ref;

axiom ldv_ldv_post_init_125 == $sub.ref(0, 509020);

procedure ldv_ldv_post_init_125($i0: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.34, $M.33;



implementation ldv_ldv_post_init_125($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1657} {:cexpr "ldv_ldv_post_init_125:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    goto corral_source_split_10516;

  corral_source_split_10516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1658} ldv_linux_net_register_reset_error_counter();
    goto corral_source_split_10517;

  corral_source_split_10517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1659} ldv_linux_usb_register_reset_error_counter();
    goto corral_source_split_10518;

  corral_source_split_10518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1660} $i1 := ldv_post_init($i0);
    call {:si_unique_call 1661} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_10519;

  corral_source_split_10519:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_ldv_check_final_state_126: ref;

axiom ldv_ldv_check_final_state_126 == $sub.ref(0, 510052);

procedure ldv_ldv_check_final_state_126();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_ldv_check_final_state_126()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10521;

  corral_source_split_10521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1662} ldv_linux_arch_io_check_final_state();
    goto SeqInstr_169, SeqInstr_170;

  SeqInstr_170:
    assume assertsPassed;
    goto SeqInstr_171;

  SeqInstr_171:
    goto corral_source_split_10522;

  corral_source_split_10522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1663} ldv_linux_block_genhd_check_final_state();
    goto SeqInstr_172, SeqInstr_173;

  SeqInstr_173:
    assume assertsPassed;
    goto SeqInstr_174;

  SeqInstr_174:
    goto corral_source_split_10523;

  corral_source_split_10523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1664} ldv_linux_block_queue_check_final_state();
    goto SeqInstr_175, SeqInstr_176;

  SeqInstr_176:
    assume assertsPassed;
    goto SeqInstr_177;

  SeqInstr_177:
    goto corral_source_split_10524;

  corral_source_split_10524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1665} ldv_linux_block_request_check_final_state();
    goto SeqInstr_178, SeqInstr_179;

  SeqInstr_179:
    assume assertsPassed;
    goto SeqInstr_180;

  SeqInstr_180:
    goto corral_source_split_10525;

  corral_source_split_10525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1666} ldv_linux_drivers_base_class_check_final_state();
    goto SeqInstr_181, SeqInstr_182;

  SeqInstr_182:
    assume assertsPassed;
    goto SeqInstr_183;

  SeqInstr_183:
    goto corral_source_split_10526;

  corral_source_split_10526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1667} ldv_linux_fs_char_dev_check_final_state();
    goto SeqInstr_184, SeqInstr_185;

  SeqInstr_185:
    assume assertsPassed;
    goto SeqInstr_186;

  SeqInstr_186:
    goto corral_source_split_10527;

  corral_source_split_10527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1668} ldv_linux_fs_sysfs_check_final_state();
    goto SeqInstr_187, SeqInstr_188;

  SeqInstr_188:
    assume assertsPassed;
    goto SeqInstr_189;

  SeqInstr_189:
    goto corral_source_split_10528;

  corral_source_split_10528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1669} ldv_linux_kernel_locking_rwlock_check_final_state();
    goto SeqInstr_190, SeqInstr_191;

  SeqInstr_191:
    assume assertsPassed;
    goto SeqInstr_192;

  SeqInstr_192:
    goto corral_source_split_10529;

  corral_source_split_10529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1670} ldv_linux_kernel_module_check_final_state();
    goto SeqInstr_193, SeqInstr_194;

  SeqInstr_194:
    assume assertsPassed;
    goto SeqInstr_195;

  SeqInstr_195:
    goto corral_source_split_10530;

  corral_source_split_10530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1671} ldv_linux_kernel_rcu_update_lock_bh_check_final_state();
    goto SeqInstr_196, SeqInstr_197;

  SeqInstr_197:
    assume assertsPassed;
    goto SeqInstr_198;

  SeqInstr_198:
    goto corral_source_split_10531;

  corral_source_split_10531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1672} ldv_linux_kernel_rcu_update_lock_sched_check_final_state();
    goto SeqInstr_199, SeqInstr_200;

  SeqInstr_200:
    assume assertsPassed;
    goto SeqInstr_201;

  SeqInstr_201:
    goto corral_source_split_10532;

  corral_source_split_10532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1673} ldv_linux_kernel_rcu_update_lock_check_final_state();
    goto SeqInstr_202, SeqInstr_203;

  SeqInstr_203:
    assume assertsPassed;
    goto SeqInstr_204;

  SeqInstr_204:
    goto corral_source_split_10533;

  corral_source_split_10533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1674} ldv_linux_kernel_rcu_srcu_check_final_state();
    goto SeqInstr_205, SeqInstr_206;

  SeqInstr_206:
    assume assertsPassed;
    goto SeqInstr_207;

  SeqInstr_207:
    goto corral_source_split_10534;

  corral_source_split_10534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1675} ldv_linux_lib_idr_check_final_state();
    goto SeqInstr_208, SeqInstr_209;

  SeqInstr_209:
    assume assertsPassed;
    goto SeqInstr_210;

  SeqInstr_210:
    goto corral_source_split_10535;

  corral_source_split_10535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1676} ldv_linux_mmc_sdio_func_check_final_state();
    goto SeqInstr_211, SeqInstr_212;

  SeqInstr_212:
    assume assertsPassed;
    goto SeqInstr_213;

  SeqInstr_213:
    goto corral_source_split_10536;

  corral_source_split_10536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1677} ldv_linux_net_rtnetlink_check_final_state();
    goto SeqInstr_214, SeqInstr_215;

  SeqInstr_215:
    assume assertsPassed;
    goto SeqInstr_216;

  SeqInstr_216:
    goto corral_source_split_10537;

  corral_source_split_10537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1678} ldv_linux_net_sock_check_final_state();
    goto SeqInstr_217, SeqInstr_218;

  SeqInstr_218:
    assume assertsPassed;
    goto SeqInstr_219;

  SeqInstr_219:
    goto corral_source_split_10538;

  corral_source_split_10538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1679} ldv_linux_usb_coherent_check_final_state();
    goto SeqInstr_220, SeqInstr_221;

  SeqInstr_221:
    assume assertsPassed;
    goto SeqInstr_222;

  SeqInstr_222:
    goto corral_source_split_10539;

  corral_source_split_10539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1680} ldv_linux_usb_gadget_check_final_state();
    goto SeqInstr_223, SeqInstr_224;

  SeqInstr_224:
    assume assertsPassed;
    goto SeqInstr_225;

  SeqInstr_225:
    goto corral_source_split_10540;

  corral_source_split_10540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1681} ldv_linux_usb_urb_check_final_state();
    goto SeqInstr_226, SeqInstr_227;

  SeqInstr_227:
    assume assertsPassed;
    goto SeqInstr_228;

  SeqInstr_228:
    goto corral_source_split_10541;

  corral_source_split_10541:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_226:
    assume !assertsPassed;
    return;

  SeqInstr_223:
    assume !assertsPassed;
    return;

  SeqInstr_220:
    assume !assertsPassed;
    return;

  SeqInstr_217:
    assume !assertsPassed;
    return;

  SeqInstr_214:
    assume !assertsPassed;
    return;

  SeqInstr_211:
    assume !assertsPassed;
    return;

  SeqInstr_208:
    assume !assertsPassed;
    return;

  SeqInstr_205:
    assume !assertsPassed;
    return;

  SeqInstr_202:
    assume !assertsPassed;
    return;

  SeqInstr_199:
    assume !assertsPassed;
    return;

  SeqInstr_196:
    assume !assertsPassed;
    return;

  SeqInstr_193:
    assume !assertsPassed;
    return;

  SeqInstr_190:
    assume !assertsPassed;
    return;

  SeqInstr_187:
    assume !assertsPassed;
    return;

  SeqInstr_184:
    assume !assertsPassed;
    return;

  SeqInstr_181:
    assume !assertsPassed;
    return;

  SeqInstr_178:
    assume !assertsPassed;
    return;

  SeqInstr_175:
    assume !assertsPassed;
    return;

  SeqInstr_172:
    assume !assertsPassed;
    return;

  SeqInstr_169:
    assume !assertsPassed;
    return;
}



const ldv_ldv_check_final_state_127: ref;

axiom ldv_ldv_check_final_state_127 == $sub.ref(0, 511084);

procedure ldv_ldv_check_final_state_127();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_ldv_check_final_state_127()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10543;

  corral_source_split_10543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1682} ldv_linux_arch_io_check_final_state();
    goto SeqInstr_229, SeqInstr_230;

  SeqInstr_230:
    assume assertsPassed;
    goto SeqInstr_231;

  SeqInstr_231:
    goto corral_source_split_10544;

  corral_source_split_10544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1683} ldv_linux_block_genhd_check_final_state();
    goto SeqInstr_232, SeqInstr_233;

  SeqInstr_233:
    assume assertsPassed;
    goto SeqInstr_234;

  SeqInstr_234:
    goto corral_source_split_10545;

  corral_source_split_10545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1684} ldv_linux_block_queue_check_final_state();
    goto SeqInstr_235, SeqInstr_236;

  SeqInstr_236:
    assume assertsPassed;
    goto SeqInstr_237;

  SeqInstr_237:
    goto corral_source_split_10546;

  corral_source_split_10546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1685} ldv_linux_block_request_check_final_state();
    goto SeqInstr_238, SeqInstr_239;

  SeqInstr_239:
    assume assertsPassed;
    goto SeqInstr_240;

  SeqInstr_240:
    goto corral_source_split_10547;

  corral_source_split_10547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1686} ldv_linux_drivers_base_class_check_final_state();
    goto SeqInstr_241, SeqInstr_242;

  SeqInstr_242:
    assume assertsPassed;
    goto SeqInstr_243;

  SeqInstr_243:
    goto corral_source_split_10548;

  corral_source_split_10548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1687} ldv_linux_fs_char_dev_check_final_state();
    goto SeqInstr_244, SeqInstr_245;

  SeqInstr_245:
    assume assertsPassed;
    goto SeqInstr_246;

  SeqInstr_246:
    goto corral_source_split_10549;

  corral_source_split_10549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1688} ldv_linux_fs_sysfs_check_final_state();
    goto SeqInstr_247, SeqInstr_248;

  SeqInstr_248:
    assume assertsPassed;
    goto SeqInstr_249;

  SeqInstr_249:
    goto corral_source_split_10550;

  corral_source_split_10550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1689} ldv_linux_kernel_locking_rwlock_check_final_state();
    goto SeqInstr_250, SeqInstr_251;

  SeqInstr_251:
    assume assertsPassed;
    goto SeqInstr_252;

  SeqInstr_252:
    goto corral_source_split_10551;

  corral_source_split_10551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1690} ldv_linux_kernel_module_check_final_state();
    goto SeqInstr_253, SeqInstr_254;

  SeqInstr_254:
    assume assertsPassed;
    goto SeqInstr_255;

  SeqInstr_255:
    goto corral_source_split_10552;

  corral_source_split_10552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1691} ldv_linux_kernel_rcu_update_lock_bh_check_final_state();
    goto SeqInstr_256, SeqInstr_257;

  SeqInstr_257:
    assume assertsPassed;
    goto SeqInstr_258;

  SeqInstr_258:
    goto corral_source_split_10553;

  corral_source_split_10553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1692} ldv_linux_kernel_rcu_update_lock_sched_check_final_state();
    goto SeqInstr_259, SeqInstr_260;

  SeqInstr_260:
    assume assertsPassed;
    goto SeqInstr_261;

  SeqInstr_261:
    goto corral_source_split_10554;

  corral_source_split_10554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1693} ldv_linux_kernel_rcu_update_lock_check_final_state();
    goto SeqInstr_262, SeqInstr_263;

  SeqInstr_263:
    assume assertsPassed;
    goto SeqInstr_264;

  SeqInstr_264:
    goto corral_source_split_10555;

  corral_source_split_10555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1694} ldv_linux_kernel_rcu_srcu_check_final_state();
    goto SeqInstr_265, SeqInstr_266;

  SeqInstr_266:
    assume assertsPassed;
    goto SeqInstr_267;

  SeqInstr_267:
    goto corral_source_split_10556;

  corral_source_split_10556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1695} ldv_linux_lib_idr_check_final_state();
    goto SeqInstr_268, SeqInstr_269;

  SeqInstr_269:
    assume assertsPassed;
    goto SeqInstr_270;

  SeqInstr_270:
    goto corral_source_split_10557;

  corral_source_split_10557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1696} ldv_linux_mmc_sdio_func_check_final_state();
    goto SeqInstr_271, SeqInstr_272;

  SeqInstr_272:
    assume assertsPassed;
    goto SeqInstr_273;

  SeqInstr_273:
    goto corral_source_split_10558;

  corral_source_split_10558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1697} ldv_linux_net_rtnetlink_check_final_state();
    goto SeqInstr_274, SeqInstr_275;

  SeqInstr_275:
    assume assertsPassed;
    goto SeqInstr_276;

  SeqInstr_276:
    goto corral_source_split_10559;

  corral_source_split_10559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1698} ldv_linux_net_sock_check_final_state();
    goto SeqInstr_277, SeqInstr_278;

  SeqInstr_278:
    assume assertsPassed;
    goto SeqInstr_279;

  SeqInstr_279:
    goto corral_source_split_10560;

  corral_source_split_10560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1699} ldv_linux_usb_coherent_check_final_state();
    goto SeqInstr_280, SeqInstr_281;

  SeqInstr_281:
    assume assertsPassed;
    goto SeqInstr_282;

  SeqInstr_282:
    goto corral_source_split_10561;

  corral_source_split_10561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1700} ldv_linux_usb_gadget_check_final_state();
    goto SeqInstr_283, SeqInstr_284;

  SeqInstr_284:
    assume assertsPassed;
    goto SeqInstr_285;

  SeqInstr_285:
    goto corral_source_split_10562;

  corral_source_split_10562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1701} ldv_linux_usb_urb_check_final_state();
    goto SeqInstr_286, SeqInstr_287;

  SeqInstr_287:
    assume assertsPassed;
    goto SeqInstr_288;

  SeqInstr_288:
    goto corral_source_split_10563;

  corral_source_split_10563:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_286:
    assume !assertsPassed;
    return;

  SeqInstr_283:
    assume !assertsPassed;
    return;

  SeqInstr_280:
    assume !assertsPassed;
    return;

  SeqInstr_277:
    assume !assertsPassed;
    return;

  SeqInstr_274:
    assume !assertsPassed;
    return;

  SeqInstr_271:
    assume !assertsPassed;
    return;

  SeqInstr_268:
    assume !assertsPassed;
    return;

  SeqInstr_265:
    assume !assertsPassed;
    return;

  SeqInstr_262:
    assume !assertsPassed;
    return;

  SeqInstr_259:
    assume !assertsPassed;
    return;

  SeqInstr_256:
    assume !assertsPassed;
    return;

  SeqInstr_253:
    assume !assertsPassed;
    return;

  SeqInstr_250:
    assume !assertsPassed;
    return;

  SeqInstr_247:
    assume !assertsPassed;
    return;

  SeqInstr_244:
    assume !assertsPassed;
    return;

  SeqInstr_241:
    assume !assertsPassed;
    return;

  SeqInstr_238:
    assume !assertsPassed;
    return;

  SeqInstr_235:
    assume !assertsPassed;
    return;

  SeqInstr_232:
    assume !assertsPassed;
    return;

  SeqInstr_229:
    assume !assertsPassed;
    return;
}



const ldv_linux_arch_io_check_final_state: ref;

axiom ldv_linux_arch_io_check_final_state == $sub.ref(0, 512116);

procedure ldv_linux_arch_io_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_arch_io_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10565;

  corral_source_split_10565:
    assume {:verifier.code 0} true;
    $i0 := $M.35;
    goto corral_source_split_10566;

  corral_source_split_10566:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_10567;

  corral_source_split_10567:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_10568;

  corral_source_split_10568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1702} ldv_assert_linux_arch_io__more_initial_at_exit($i2);
    goto SeqInstr_289, SeqInstr_290;

  SeqInstr_290:
    assume assertsPassed;
    goto SeqInstr_291;

  SeqInstr_291:
    goto corral_source_split_10569;

  corral_source_split_10569:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_289:
    assume !assertsPassed;
    return;
}



const ldv_linux_block_genhd_check_final_state: ref;

axiom ldv_linux_block_genhd_check_final_state == $sub.ref(0, 513148);

procedure ldv_linux_block_genhd_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_block_genhd_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10571;

  corral_source_split_10571:
    assume {:verifier.code 0} true;
    $i0 := $M.36;
    goto corral_source_split_10572;

  corral_source_split_10572:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_10573;

  corral_source_split_10573:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_10574;

  corral_source_split_10574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1703} ldv_assert_linux_block_genhd__more_initial_at_exit($i2);
    goto SeqInstr_292, SeqInstr_293;

  SeqInstr_293:
    assume assertsPassed;
    goto SeqInstr_294;

  SeqInstr_294:
    goto corral_source_split_10575;

  corral_source_split_10575:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_292:
    assume !assertsPassed;
    return;
}



const ldv_linux_block_queue_check_final_state: ref;

axiom ldv_linux_block_queue_check_final_state == $sub.ref(0, 514180);

procedure ldv_linux_block_queue_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_block_queue_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10577;

  corral_source_split_10577:
    assume {:verifier.code 0} true;
    $i0 := $M.37;
    goto corral_source_split_10578;

  corral_source_split_10578:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_10579;

  corral_source_split_10579:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_10580;

  corral_source_split_10580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1704} ldv_assert_linux_block_queue__more_initial_at_exit($i2);
    goto SeqInstr_295, SeqInstr_296;

  SeqInstr_296:
    assume assertsPassed;
    goto SeqInstr_297;

  SeqInstr_297:
    goto corral_source_split_10581;

  corral_source_split_10581:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_295:
    assume !assertsPassed;
    return;
}



const ldv_linux_block_request_check_final_state: ref;

axiom ldv_linux_block_request_check_final_state == $sub.ref(0, 515212);

procedure ldv_linux_block_request_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_block_request_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10583;

  corral_source_split_10583:
    assume {:verifier.code 0} true;
    $i0 := $M.38;
    goto corral_source_split_10584;

  corral_source_split_10584:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_10585;

  corral_source_split_10585:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_10586;

  corral_source_split_10586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1705} ldv_assert_linux_block_request__get_at_exit($i2);
    goto SeqInstr_298, SeqInstr_299;

  SeqInstr_299:
    assume assertsPassed;
    goto SeqInstr_300;

  SeqInstr_300:
    goto corral_source_split_10587;

  corral_source_split_10587:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_298:
    assume !assertsPassed;
    return;
}



const ldv_linux_drivers_base_class_check_final_state: ref;

axiom ldv_linux_drivers_base_class_check_final_state == $sub.ref(0, 516244);

procedure ldv_linux_drivers_base_class_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_drivers_base_class_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10589;

  corral_source_split_10589:
    assume {:verifier.code 0} true;
    $i0 := $M.39;
    goto corral_source_split_10590;

  corral_source_split_10590:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_10591;

  corral_source_split_10591:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_10592;

  corral_source_split_10592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1706} ldv_assert_linux_drivers_base_class__registered_at_exit($i2);
    goto SeqInstr_301, SeqInstr_302;

  SeqInstr_302:
    assume assertsPassed;
    goto SeqInstr_303;

  SeqInstr_303:
    goto corral_source_split_10593;

  corral_source_split_10593:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_301:
    assume !assertsPassed;
    return;
}



const ldv_linux_fs_char_dev_check_final_state: ref;

axiom ldv_linux_fs_char_dev_check_final_state == $sub.ref(0, 517276);

procedure ldv_linux_fs_char_dev_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_fs_char_dev_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10595;

  corral_source_split_10595:
    assume {:verifier.code 0} true;
    $i0 := $M.40;
    goto corral_source_split_10596;

  corral_source_split_10596:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_10597;

  corral_source_split_10597:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_10598;

  corral_source_split_10598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1707} ldv_assert_linux_fs_char_dev__registered_at_exit($i2);
    goto SeqInstr_304, SeqInstr_305;

  SeqInstr_305:
    assume assertsPassed;
    goto SeqInstr_306;

  SeqInstr_306:
    goto corral_source_split_10599;

  corral_source_split_10599:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_304:
    assume !assertsPassed;
    return;
}



const ldv_linux_fs_sysfs_check_final_state: ref;

axiom ldv_linux_fs_sysfs_check_final_state == $sub.ref(0, 518308);

procedure ldv_linux_fs_sysfs_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_fs_sysfs_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10601;

  corral_source_split_10601:
    assume {:verifier.code 0} true;
    $i0 := $M.41;
    goto corral_source_split_10602;

  corral_source_split_10602:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_10603;

  corral_source_split_10603:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_10604;

  corral_source_split_10604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1708} ldv_assert_linux_fs_sysfs__more_initial_at_exit($i2);
    goto SeqInstr_307, SeqInstr_308;

  SeqInstr_308:
    assume assertsPassed;
    goto SeqInstr_309;

  SeqInstr_309:
    goto corral_source_split_10605;

  corral_source_split_10605:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_307:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_locking_rwlock_check_final_state: ref;

axiom ldv_linux_kernel_locking_rwlock_check_final_state == $sub.ref(0, 519340);

procedure ldv_linux_kernel_locking_rwlock_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_locking_rwlock_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10607;

  corral_source_split_10607:
    assume {:verifier.code 0} true;
    $i0 := $M.42;
    goto corral_source_split_10608;

  corral_source_split_10608:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_10609;

  corral_source_split_10609:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_10610;

  corral_source_split_10610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1709} ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit($i2);
    goto SeqInstr_310, SeqInstr_311;

  SeqInstr_311:
    assume assertsPassed;
    goto SeqInstr_312;

  SeqInstr_312:
    goto corral_source_split_10611;

  corral_source_split_10611:
    assume {:verifier.code 0} true;
    $i3 := $M.43;
    goto corral_source_split_10612;

  corral_source_split_10612:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 1);
    goto corral_source_split_10613;

  corral_source_split_10613:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_10614;

  corral_source_split_10614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1710} ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit($i5);
    goto SeqInstr_313, SeqInstr_314;

  SeqInstr_314:
    assume assertsPassed;
    goto SeqInstr_315;

  SeqInstr_315:
    goto corral_source_split_10615;

  corral_source_split_10615:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_313:
    assume !assertsPassed;
    return;

  SeqInstr_310:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_module_check_final_state: ref;

axiom ldv_linux_kernel_module_check_final_state == $sub.ref(0, 520372);

procedure ldv_linux_kernel_module_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_module_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10617;

  corral_source_split_10617:
    assume {:verifier.code 0} true;
    $i0 := $M.44;
    goto corral_source_split_10618;

  corral_source_split_10618:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_10619;

  corral_source_split_10619:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_10620;

  corral_source_split_10620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1711} ldv_assert_linux_kernel_module__more_initial_at_exit($i2);
    goto SeqInstr_316, SeqInstr_317;

  SeqInstr_317:
    assume assertsPassed;
    goto SeqInstr_318;

  SeqInstr_318:
    goto corral_source_split_10621;

  corral_source_split_10621:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_316:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_rcu_update_lock_bh_check_final_state: ref;

axiom ldv_linux_kernel_rcu_update_lock_bh_check_final_state == $sub.ref(0, 521404);

procedure ldv_linux_kernel_rcu_update_lock_bh_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_rcu_update_lock_bh_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10623;

  corral_source_split_10623:
    assume {:verifier.code 0} true;
    $i0 := $M.45;
    goto corral_source_split_10624;

  corral_source_split_10624:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_10625;

  corral_source_split_10625:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_10626;

  corral_source_split_10626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1712} ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit($i2);
    goto SeqInstr_319, SeqInstr_320;

  SeqInstr_320:
    assume assertsPassed;
    goto SeqInstr_321;

  SeqInstr_321:
    goto corral_source_split_10627;

  corral_source_split_10627:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_319:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_rcu_update_lock_sched_check_final_state: ref;

axiom ldv_linux_kernel_rcu_update_lock_sched_check_final_state == $sub.ref(0, 522436);

procedure ldv_linux_kernel_rcu_update_lock_sched_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_rcu_update_lock_sched_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10629;

  corral_source_split_10629:
    assume {:verifier.code 0} true;
    $i0 := $M.46;
    goto corral_source_split_10630;

  corral_source_split_10630:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_10631;

  corral_source_split_10631:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_10632;

  corral_source_split_10632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1713} ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit($i2);
    goto SeqInstr_322, SeqInstr_323;

  SeqInstr_323:
    assume assertsPassed;
    goto SeqInstr_324;

  SeqInstr_324:
    goto corral_source_split_10633;

  corral_source_split_10633:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_322:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_rcu_update_lock_check_final_state: ref;

axiom ldv_linux_kernel_rcu_update_lock_check_final_state == $sub.ref(0, 523468);

procedure ldv_linux_kernel_rcu_update_lock_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_rcu_update_lock_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10635;

  corral_source_split_10635:
    assume {:verifier.code 0} true;
    $i0 := $M.47;
    goto corral_source_split_10636;

  corral_source_split_10636:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_10637;

  corral_source_split_10637:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_10638;

  corral_source_split_10638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1714} ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit($i2);
    goto SeqInstr_325, SeqInstr_326;

  SeqInstr_326:
    assume assertsPassed;
    goto SeqInstr_327;

  SeqInstr_327:
    goto corral_source_split_10639;

  corral_source_split_10639:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_325:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_rcu_srcu_check_final_state: ref;

axiom ldv_linux_kernel_rcu_srcu_check_final_state == $sub.ref(0, 524500);

procedure ldv_linux_kernel_rcu_srcu_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_rcu_srcu_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10641;

  corral_source_split_10641:
    assume {:verifier.code 0} true;
    $i0 := $M.48;
    goto corral_source_split_10642;

  corral_source_split_10642:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_10643;

  corral_source_split_10643:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_10644;

  corral_source_split_10644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1715} ldv_assert_linux_kernel_rcu_srcu__locked_at_exit($i2);
    goto SeqInstr_328, SeqInstr_329;

  SeqInstr_329:
    assume assertsPassed;
    goto SeqInstr_330;

  SeqInstr_330:
    goto corral_source_split_10645;

  corral_source_split_10645:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_328:
    assume !assertsPassed;
    return;
}



const ldv_linux_lib_idr_check_final_state: ref;

axiom ldv_linux_lib_idr_check_final_state == $sub.ref(0, 525532);

procedure ldv_linux_lib_idr_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_lib_idr_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i32;
  var $i4: i1;
  var $i2: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10647;

  corral_source_split_10647:
    assume {:verifier.code 0} true;
    $i0 := $M.49;
    goto corral_source_split_10648;

  corral_source_split_10648:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_10649;

  corral_source_split_10649:
    assume {:verifier.code 0} true;
    $i2 := 1;
    assume {:branchcond $i1} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i1 == 1);
    goto corral_source_split_10655;

  corral_source_split_10655:
    assume {:verifier.code 0} true;
    $i3 := $M.49;
    goto corral_source_split_10656;

  corral_source_split_10656:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 3);
    goto corral_source_split_10657;

  corral_source_split_10657:
    assume {:verifier.code 0} true;
    $i2 := $i4;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_10651;

  corral_source_split_10651:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i2);
    goto corral_source_split_10652;

  corral_source_split_10652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1716} ldv_assert_linux_lib_idr__more_at_exit($i5);
    goto SeqInstr_331, SeqInstr_332;

  SeqInstr_332:
    assume assertsPassed;
    goto SeqInstr_333;

  SeqInstr_333:
    goto corral_source_split_10653;

  corral_source_split_10653:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_331:
    assume !assertsPassed;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i1 == 1;
    goto $bb2;
}



const ldv_linux_mmc_sdio_func_check_final_state: ref;

axiom ldv_linux_mmc_sdio_func_check_final_state == $sub.ref(0, 526564);

procedure ldv_linux_mmc_sdio_func_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_mmc_sdio_func_check_final_state()
{
  var $i0: i16;
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10659;

  corral_source_split_10659:
    assume {:verifier.code 0} true;
    $i0 := $M.50;
    goto corral_source_split_10660;

  corral_source_split_10660:
    assume {:verifier.code 0} true;
    $i1 := $zext.i16.i32($i0);
    goto corral_source_split_10661;

  corral_source_split_10661:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 0);
    goto corral_source_split_10662;

  corral_source_split_10662:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_10663;

  corral_source_split_10663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1717} ldv_assert_linux_mmc_sdio_func__unreleased_at_exit($i3);
    goto SeqInstr_334, SeqInstr_335;

  SeqInstr_335:
    assume assertsPassed;
    goto SeqInstr_336;

  SeqInstr_336:
    goto corral_source_split_10664;

  corral_source_split_10664:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_334:
    assume !assertsPassed;
    return;
}



const ldv_linux_net_rtnetlink_check_final_state: ref;

axiom ldv_linux_net_rtnetlink_check_final_state == $sub.ref(0, 527596);

procedure ldv_linux_net_rtnetlink_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_net_rtnetlink_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10666;

  corral_source_split_10666:
    assume {:verifier.code 0} true;
    $i0 := $M.51;
    goto corral_source_split_10667;

  corral_source_split_10667:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_10668;

  corral_source_split_10668:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_10669;

  corral_source_split_10669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1718} ldv_assert_linux_net_rtnetlink__lock_on_exit($i2);
    goto SeqInstr_337, SeqInstr_338;

  SeqInstr_338:
    assume assertsPassed;
    goto SeqInstr_339;

  SeqInstr_339:
    goto corral_source_split_10670;

  corral_source_split_10670:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_337:
    assume !assertsPassed;
    return;
}



const ldv_linux_net_sock_check_final_state: ref;

axiom ldv_linux_net_sock_check_final_state == $sub.ref(0, 528628);

procedure ldv_linux_net_sock_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_net_sock_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10672;

  corral_source_split_10672:
    assume {:verifier.code 0} true;
    $i0 := $M.52;
    goto corral_source_split_10673;

  corral_source_split_10673:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_10674;

  corral_source_split_10674:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_10675;

  corral_source_split_10675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1719} ldv_assert_linux_net_sock__all_locked_sockets_must_be_released($i2);
    goto SeqInstr_340, SeqInstr_341;

  SeqInstr_341:
    assume assertsPassed;
    goto SeqInstr_342;

  SeqInstr_342:
    goto corral_source_split_10676;

  corral_source_split_10676:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_340:
    assume !assertsPassed;
    return;
}



const ldv_linux_usb_coherent_check_final_state: ref;

axiom ldv_linux_usb_coherent_check_final_state == $sub.ref(0, 529660);

procedure ldv_linux_usb_coherent_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_usb_coherent_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10678;

  corral_source_split_10678:
    assume {:verifier.code 0} true;
    $i0 := $M.53;
    goto corral_source_split_10679;

  corral_source_split_10679:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_10680;

  corral_source_split_10680:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_10681;

  corral_source_split_10681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1720} ldv_assert_linux_usb_coherent__more_initial_at_exit($i2);
    goto SeqInstr_343, SeqInstr_344;

  SeqInstr_344:
    assume assertsPassed;
    goto SeqInstr_345;

  SeqInstr_345:
    goto corral_source_split_10682;

  corral_source_split_10682:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_343:
    assume !assertsPassed;
    return;
}



const ldv_linux_usb_gadget_check_final_state: ref;

axiom ldv_linux_usb_gadget_check_final_state == $sub.ref(0, 530692);

procedure ldv_linux_usb_gadget_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_usb_gadget_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10684;

  corral_source_split_10684:
    assume {:verifier.code 0} true;
    $i0 := $M.54;
    goto corral_source_split_10685;

  corral_source_split_10685:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_10686;

  corral_source_split_10686:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_10687;

  corral_source_split_10687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1721} ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit($i2);
    goto SeqInstr_346, SeqInstr_347;

  SeqInstr_347:
    assume assertsPassed;
    goto SeqInstr_348;

  SeqInstr_348:
    goto corral_source_split_10688;

  corral_source_split_10688:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_346:
    assume !assertsPassed;
    return;
}



const ldv_linux_usb_urb_check_final_state: ref;

axiom ldv_linux_usb_urb_check_final_state == $sub.ref(0, 531724);

procedure ldv_linux_usb_urb_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_usb_urb_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10690;

  corral_source_split_10690:
    assume {:verifier.code 0} true;
    $i0 := $M.55;
    goto corral_source_split_10691;

  corral_source_split_10691:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_10692;

  corral_source_split_10692:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_10693;

  corral_source_split_10693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1722} ldv_assert_linux_usb_urb__more_initial_at_exit($i2);
    goto SeqInstr_349, SeqInstr_350;

  SeqInstr_350:
    assume assertsPassed;
    goto SeqInstr_351;

  SeqInstr_351:
    goto corral_source_split_10694;

  corral_source_split_10694:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_349:
    assume !assertsPassed;
    return;
}



const ldv_assert_linux_usb_urb__more_initial_at_exit: ref;

axiom ldv_assert_linux_usb_urb__more_initial_at_exit == $sub.ref(0, 532756);

procedure ldv_assert_linux_usb_urb__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_usb_urb__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1723} {:cexpr "ldv_assert_linux_usb_urb__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_10696;

  corral_source_split_10696:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_10697;

  corral_source_split_10697:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_10699;

  corral_source_split_10699:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1724} __VERIFIER_error();
    goto SeqInstr_352, SeqInstr_353;

  SeqInstr_353:
    assume assertsPassed;
    goto SeqInstr_354;

  SeqInstr_354:
    goto corral_source_split_10700;

  corral_source_split_10700:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_352:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit: ref;

axiom ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit == $sub.ref(0, 533788);

procedure ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1725} {:cexpr "ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_10702;

  corral_source_split_10702:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_10703;

  corral_source_split_10703:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_10705;

  corral_source_split_10705:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1726} __VERIFIER_error();
    goto SeqInstr_355, SeqInstr_356;

  SeqInstr_356:
    assume assertsPassed;
    goto SeqInstr_357;

  SeqInstr_357:
    goto corral_source_split_10706;

  corral_source_split_10706:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_355:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_usb_coherent__more_initial_at_exit: ref;

axiom ldv_assert_linux_usb_coherent__more_initial_at_exit == $sub.ref(0, 534820);

procedure ldv_assert_linux_usb_coherent__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_usb_coherent__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1727} {:cexpr "ldv_assert_linux_usb_coherent__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_10708;

  corral_source_split_10708:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_10709;

  corral_source_split_10709:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_10711;

  corral_source_split_10711:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1728} __VERIFIER_error();
    goto SeqInstr_358, SeqInstr_359;

  SeqInstr_359:
    assume assertsPassed;
    goto SeqInstr_360;

  SeqInstr_360:
    goto corral_source_split_10712;

  corral_source_split_10712:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_358:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_net_sock__all_locked_sockets_must_be_released: ref;

axiom ldv_assert_linux_net_sock__all_locked_sockets_must_be_released == $sub.ref(0, 535852);

procedure ldv_assert_linux_net_sock__all_locked_sockets_must_be_released($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_net_sock__all_locked_sockets_must_be_released($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1729} {:cexpr "ldv_assert_linux_net_sock__all_locked_sockets_must_be_released:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_10714;

  corral_source_split_10714:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_10715;

  corral_source_split_10715:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_10717;

  corral_source_split_10717:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1730} __VERIFIER_error();
    goto SeqInstr_361, SeqInstr_362;

  SeqInstr_362:
    assume assertsPassed;
    goto SeqInstr_363;

  SeqInstr_363:
    goto corral_source_split_10718;

  corral_source_split_10718:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_361:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_net_rtnetlink__lock_on_exit: ref;

axiom ldv_assert_linux_net_rtnetlink__lock_on_exit == $sub.ref(0, 536884);

procedure ldv_assert_linux_net_rtnetlink__lock_on_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_net_rtnetlink__lock_on_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1731} {:cexpr "ldv_assert_linux_net_rtnetlink__lock_on_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_10720;

  corral_source_split_10720:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_10721;

  corral_source_split_10721:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_10723;

  corral_source_split_10723:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1732} __VERIFIER_error();
    goto SeqInstr_364, SeqInstr_365;

  SeqInstr_365:
    assume assertsPassed;
    goto SeqInstr_366;

  SeqInstr_366:
    goto corral_source_split_10724;

  corral_source_split_10724:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_364:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_mmc_sdio_func__unreleased_at_exit: ref;

axiom ldv_assert_linux_mmc_sdio_func__unreleased_at_exit == $sub.ref(0, 537916);

procedure ldv_assert_linux_mmc_sdio_func__unreleased_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_mmc_sdio_func__unreleased_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1733} {:cexpr "ldv_assert_linux_mmc_sdio_func__unreleased_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_10726;

  corral_source_split_10726:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_10727;

  corral_source_split_10727:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_10729;

  corral_source_split_10729:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1734} __VERIFIER_error();
    goto SeqInstr_367, SeqInstr_368;

  SeqInstr_368:
    assume assertsPassed;
    goto SeqInstr_369;

  SeqInstr_369:
    goto corral_source_split_10730;

  corral_source_split_10730:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_367:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_lib_idr__more_at_exit: ref;

axiom ldv_assert_linux_lib_idr__more_at_exit == $sub.ref(0, 538948);

procedure ldv_assert_linux_lib_idr__more_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_lib_idr__more_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1735} {:cexpr "ldv_assert_linux_lib_idr__more_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_10732;

  corral_source_split_10732:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_10733;

  corral_source_split_10733:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_10735;

  corral_source_split_10735:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1736} __VERIFIER_error();
    goto SeqInstr_370, SeqInstr_371;

  SeqInstr_371:
    assume assertsPassed;
    goto SeqInstr_372;

  SeqInstr_372:
    goto corral_source_split_10736;

  corral_source_split_10736:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_370:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_rcu_srcu__locked_at_exit: ref;

axiom ldv_assert_linux_kernel_rcu_srcu__locked_at_exit == $sub.ref(0, 539980);

procedure ldv_assert_linux_kernel_rcu_srcu__locked_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_rcu_srcu__locked_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1737} {:cexpr "ldv_assert_linux_kernel_rcu_srcu__locked_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_10738;

  corral_source_split_10738:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_10739;

  corral_source_split_10739:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_10741;

  corral_source_split_10741:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1738} __VERIFIER_error();
    goto SeqInstr_373, SeqInstr_374;

  SeqInstr_374:
    assume assertsPassed;
    goto SeqInstr_375;

  SeqInstr_375:
    goto corral_source_split_10742;

  corral_source_split_10742:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_373:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit: ref;

axiom ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit == $sub.ref(0, 541012);

procedure ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1739} {:cexpr "ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_10744;

  corral_source_split_10744:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_10745;

  corral_source_split_10745:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_10747;

  corral_source_split_10747:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1740} __VERIFIER_error();
    goto SeqInstr_376, SeqInstr_377;

  SeqInstr_377:
    assume assertsPassed;
    goto SeqInstr_378;

  SeqInstr_378:
    goto corral_source_split_10748;

  corral_source_split_10748:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_376:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit: ref;

axiom ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit == $sub.ref(0, 542044);

procedure ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1741} {:cexpr "ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_10750;

  corral_source_split_10750:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_10751;

  corral_source_split_10751:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_10753;

  corral_source_split_10753:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1742} __VERIFIER_error();
    goto SeqInstr_379, SeqInstr_380;

  SeqInstr_380:
    assume assertsPassed;
    goto SeqInstr_381;

  SeqInstr_381:
    goto corral_source_split_10754;

  corral_source_split_10754:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_379:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit: ref;

axiom ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit == $sub.ref(0, 543076);

procedure ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1743} {:cexpr "ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_10756;

  corral_source_split_10756:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_10757;

  corral_source_split_10757:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_10759;

  corral_source_split_10759:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1744} __VERIFIER_error();
    goto SeqInstr_382, SeqInstr_383;

  SeqInstr_383:
    assume assertsPassed;
    goto SeqInstr_384;

  SeqInstr_384:
    goto corral_source_split_10760;

  corral_source_split_10760:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_382:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_module__more_initial_at_exit: ref;

axiom ldv_assert_linux_kernel_module__more_initial_at_exit == $sub.ref(0, 544108);

procedure ldv_assert_linux_kernel_module__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_module__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1745} {:cexpr "ldv_assert_linux_kernel_module__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_10762;

  corral_source_split_10762:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_10763;

  corral_source_split_10763:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_10765;

  corral_source_split_10765:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1746} __VERIFIER_error();
    goto SeqInstr_385, SeqInstr_386;

  SeqInstr_386:
    assume assertsPassed;
    goto SeqInstr_387;

  SeqInstr_387:
    goto corral_source_split_10766;

  corral_source_split_10766:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_385:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit: ref;

axiom ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit == $sub.ref(0, 545140);

procedure ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1747} {:cexpr "ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_10768;

  corral_source_split_10768:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_10769;

  corral_source_split_10769:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_10771;

  corral_source_split_10771:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1748} __VERIFIER_error();
    goto SeqInstr_388, SeqInstr_389;

  SeqInstr_389:
    assume assertsPassed;
    goto SeqInstr_390;

  SeqInstr_390:
    goto corral_source_split_10772;

  corral_source_split_10772:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_388:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit: ref;

axiom ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit == $sub.ref(0, 546172);

procedure ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1749} {:cexpr "ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_10774;

  corral_source_split_10774:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_10775;

  corral_source_split_10775:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_10777;

  corral_source_split_10777:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1750} __VERIFIER_error();
    goto SeqInstr_391, SeqInstr_392;

  SeqInstr_392:
    assume assertsPassed;
    goto SeqInstr_393;

  SeqInstr_393:
    goto corral_source_split_10778;

  corral_source_split_10778:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_391:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_fs_sysfs__more_initial_at_exit: ref;

axiom ldv_assert_linux_fs_sysfs__more_initial_at_exit == $sub.ref(0, 547204);

procedure ldv_assert_linux_fs_sysfs__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_fs_sysfs__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1751} {:cexpr "ldv_assert_linux_fs_sysfs__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_10780;

  corral_source_split_10780:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_10781;

  corral_source_split_10781:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_10783;

  corral_source_split_10783:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1752} __VERIFIER_error();
    goto SeqInstr_394, SeqInstr_395;

  SeqInstr_395:
    assume assertsPassed;
    goto SeqInstr_396;

  SeqInstr_396:
    goto corral_source_split_10784;

  corral_source_split_10784:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_394:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_fs_char_dev__registered_at_exit: ref;

axiom ldv_assert_linux_fs_char_dev__registered_at_exit == $sub.ref(0, 548236);

procedure ldv_assert_linux_fs_char_dev__registered_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_fs_char_dev__registered_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1753} {:cexpr "ldv_assert_linux_fs_char_dev__registered_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_10786;

  corral_source_split_10786:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_10787;

  corral_source_split_10787:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_10789;

  corral_source_split_10789:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1754} __VERIFIER_error();
    goto SeqInstr_397, SeqInstr_398;

  SeqInstr_398:
    assume assertsPassed;
    goto SeqInstr_399;

  SeqInstr_399:
    goto corral_source_split_10790;

  corral_source_split_10790:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_397:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_drivers_base_class__registered_at_exit: ref;

axiom ldv_assert_linux_drivers_base_class__registered_at_exit == $sub.ref(0, 549268);

procedure ldv_assert_linux_drivers_base_class__registered_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_drivers_base_class__registered_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1755} {:cexpr "ldv_assert_linux_drivers_base_class__registered_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_10792;

  corral_source_split_10792:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_10793;

  corral_source_split_10793:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_10795;

  corral_source_split_10795:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1756} __VERIFIER_error();
    goto SeqInstr_400, SeqInstr_401;

  SeqInstr_401:
    assume assertsPassed;
    goto SeqInstr_402;

  SeqInstr_402:
    goto corral_source_split_10796;

  corral_source_split_10796:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_400:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_block_request__get_at_exit: ref;

axiom ldv_assert_linux_block_request__get_at_exit == $sub.ref(0, 550300);

procedure ldv_assert_linux_block_request__get_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_block_request__get_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1757} {:cexpr "ldv_assert_linux_block_request__get_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_10798;

  corral_source_split_10798:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_10799;

  corral_source_split_10799:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_10801;

  corral_source_split_10801:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1758} __VERIFIER_error();
    goto SeqInstr_403, SeqInstr_404;

  SeqInstr_404:
    assume assertsPassed;
    goto SeqInstr_405;

  SeqInstr_405:
    goto corral_source_split_10802;

  corral_source_split_10802:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_403:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_block_queue__more_initial_at_exit: ref;

axiom ldv_assert_linux_block_queue__more_initial_at_exit == $sub.ref(0, 551332);

procedure ldv_assert_linux_block_queue__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_block_queue__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1759} {:cexpr "ldv_assert_linux_block_queue__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_10804;

  corral_source_split_10804:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_10805;

  corral_source_split_10805:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_10807;

  corral_source_split_10807:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1760} __VERIFIER_error();
    goto SeqInstr_406, SeqInstr_407;

  SeqInstr_407:
    assume assertsPassed;
    goto SeqInstr_408;

  SeqInstr_408:
    goto corral_source_split_10808;

  corral_source_split_10808:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_406:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_block_genhd__more_initial_at_exit: ref;

axiom ldv_assert_linux_block_genhd__more_initial_at_exit == $sub.ref(0, 552364);

procedure ldv_assert_linux_block_genhd__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_block_genhd__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1761} {:cexpr "ldv_assert_linux_block_genhd__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_10810;

  corral_source_split_10810:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_10811;

  corral_source_split_10811:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_10813;

  corral_source_split_10813:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1762} __VERIFIER_error();
    goto SeqInstr_409, SeqInstr_410;

  SeqInstr_410:
    assume assertsPassed;
    goto SeqInstr_411;

  SeqInstr_411:
    goto corral_source_split_10814;

  corral_source_split_10814:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_409:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_arch_io__more_initial_at_exit: ref;

axiom ldv_assert_linux_arch_io__more_initial_at_exit == $sub.ref(0, 553396);

procedure ldv_assert_linux_arch_io__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_arch_io__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1763} {:cexpr "ldv_assert_linux_arch_io__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_10816;

  corral_source_split_10816:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_10817;

  corral_source_split_10817:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_10819;

  corral_source_split_10819:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1764} __VERIFIER_error();
    goto SeqInstr_412, SeqInstr_413;

  SeqInstr_413:
    assume assertsPassed;
    goto SeqInstr_414;

  SeqInstr_414:
    goto corral_source_split_10820;

  corral_source_split_10820:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_412:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_post_init: ref;

axiom ldv_post_init == $sub.ref(0, 554428);

procedure ldv_post_init($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_post_init($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1765} {:cexpr "ldv_post_init:arg:init_ret_val"} boogie_si_record_i32($i0);
    goto corral_source_split_10822;

  corral_source_split_10822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1766} $i1 := ldv_filter_positive_int($i0);
    call {:si_unique_call 1767} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_10823;

  corral_source_split_10823:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 555460);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.10, $M.35, $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.48, $M.45, $M.46, $M.47, $M.50, $M.34, $M.51, $M.52, $M.53, $M.54, $M.33, $M.55, $M.17, $M.29, $M.61, $M.62, $M.63, $M.64, $M.65, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.72, $M.73, $M.49, $M.37, $M.36, $M.32, $M.106, $M.107, $M.108, $M.109, $M.110, $M.111, $M.31, $M.14, $M.149, $M.177, $M.223, $M.230, $M.234, $M.7, $M.238, $CurrAddr, $M.15, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.11, $M.12, $M.8, $M.27, $M.18, $M.19, $M.20, $M.21, $M.22, assertsPassed, $M.28, $M.23, $M.24, $M.25, $M.0;



implementation main() returns ($r: i32)
{

  $bb0:
    call {:si_unique_call 1768} $initialize();
    goto corral_source_split_10825;

  corral_source_split_10825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1769} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    goto corral_source_split_10826;

  corral_source_split_10826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1770} ldv_ldv_initialize_128();
    goto corral_source_split_10827;

  corral_source_split_10827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1771} ldv_entry_EMGentry_11($0.ref);
    goto SeqInstr_415, SeqInstr_416;

  SeqInstr_416:
    assume assertsPassed;
    goto SeqInstr_417;

  SeqInstr_417:
    goto corral_source_split_10828;

  corral_source_split_10828:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_415:
    assume !assertsPassed;
    return;
}



const ldv_ldv_initialize_128: ref;

axiom ldv_ldv_initialize_128 == $sub.ref(0, 556492);

procedure ldv_ldv_initialize_128();
  free requires assertsPassed;



implementation ldv_ldv_initialize_128()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10830;

  corral_source_split_10830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1772} ldv_linux_lib_find_bit_initialize();
    goto corral_source_split_10831;

  corral_source_split_10831:
    assume {:verifier.code 0} true;
    return;
}



const ldv_linux_lib_find_bit_initialize: ref;

axiom ldv_linux_lib_find_bit_initialize == $sub.ref(0, 557524);

procedure ldv_linux_lib_find_bit_initialize();
  free requires assertsPassed;



implementation ldv_linux_lib_find_bit_initialize()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10833;

  corral_source_split_10833:
    assume {:verifier.code 0} true;
    $i0 := $load.i32($M.8, nr_cpu_ids);
    goto corral_source_split_10834;

  corral_source_split_10834:
    assume {:verifier.code 0} true;
    $i1 := $sgt.i32($i0, 0);
    goto corral_source_split_10835;

  corral_source_split_10835:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_10836;

  corral_source_split_10836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1773} ldv_assume($i2);
    goto corral_source_split_10837;

  corral_source_split_10837:
    assume {:verifier.code 0} true;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 558556);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1774} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_10839;

  corral_source_split_10839:
    assume {:verifier.code 1} true;
    goto corral_source_split_10840;

  corral_source_split_10840:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_10841;

  corral_source_split_10841:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 559588);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 560620);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 561652);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10843;

  corral_source_split_10843:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_418, SeqInstr_419;

  SeqInstr_419:
    assume assertsPassed;
    goto SeqInstr_420;

  SeqInstr_420:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_10844;

  corral_source_split_10844:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_418:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 562684);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 563716);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 564748);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 565780);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 566812);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 567844);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 568876);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 569908);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 570940);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 571972);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10846;

  corral_source_split_10846:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1775} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 1776} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1777} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_10847;

  corral_source_split_10847:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_10848;

  corral_source_split_10848:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_10852;

  corral_source_split_10852:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_10853;

  corral_source_split_10853:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1778} __VERIFIER_assume($i4);
    goto corral_source_split_10854;

  corral_source_split_10854:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_10850;

  corral_source_split_10850:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 573004);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 574036);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 575068);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 576100);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 577132);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 578164);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 579196);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 580228);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 581260);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 582292);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 583324);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 584356);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 585388);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 586420);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 587452);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 588484);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 589516);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10856;

  corral_source_split_10856:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1779} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 1780} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_10857;

  corral_source_split_10857:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 590548);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 591580);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1781} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1782} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 592612);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 593644);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10859;

  corral_source_split_10859:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_10860;

  corral_source_split_10860:
    assume {:verifier.code 0} true;
    return;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 594676);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 595708);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.10, $M.35, $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.48, $M.45, $M.46, $M.47, $M.50, $M.34, $M.51, $M.52, $M.53, $M.54, $M.33, $M.55, $M.17, $M.29, $M.61, $M.62, $M.63, $M.64, $M.65, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.72, $M.73, $M.49, $M.37, $M.36, $M.32, $M.106, $M.107, $M.108, $M.109, $M.110, $M.111, $M.31, $M.14, $M.149, $M.177, $M.223, $M.230, $M.234, $M.7, $M.238;



implementation __SMACK_static_init()
{

  $bb0:
    $M.10 := 0;
    call {:si_unique_call 1783} {:cexpr "dvb_usb_mxl111sf_debug"} boogie_si_record_i32(0);
    call {:si_unique_call 1784} {:cexpr "ldv_linux_alloc_usb_lock_lock"} boogie_si_record_i32(1);
    $M.35 := 0;
    call {:si_unique_call 1785} {:cexpr "ldv_linux_arch_io_iomem"} boogie_si_record_i32(0);
    $M.38 := 0;
    call {:si_unique_call 1786} {:cexpr "ldv_linux_block_request_blk_rq"} boogie_si_record_i32(0);
    $M.39 := 0;
    call {:si_unique_call 1787} {:cexpr "ldv_linux_drivers_base_class_usb_gadget_class"} boogie_si_record_i32(0);
    $M.40 := 0;
    call {:si_unique_call 1788} {:cexpr "ldv_linux_fs_char_dev_usb_gadget_chrdev"} boogie_si_record_i32(0);
    $M.41 := 0;
    call {:si_unique_call 1789} {:cexpr "ldv_linux_fs_sysfs_sysfs"} boogie_si_record_i32(0);
    $M.42 := 1;
    call {:si_unique_call 1790} {:cexpr "ldv_linux_kernel_locking_rwlock_rlock"} boogie_si_record_i32(1);
    $M.43 := 1;
    call {:si_unique_call 1791} {:cexpr "ldv_linux_kernel_locking_rwlock_wlock"} boogie_si_record_i32(1);
    $M.44 := 1;
    call {:si_unique_call 1792} {:cexpr "ldv_linux_kernel_module_module_refcounter"} boogie_si_record_i32(1);
    $M.48 := 0;
    call {:si_unique_call 1793} {:cexpr "ldv_linux_kernel_rcu_srcu_srcu_nested"} boogie_si_record_i32(0);
    $M.45 := 0;
    call {:si_unique_call 1794} {:cexpr "ldv_linux_kernel_rcu_update_lock_bh_rcu_nested_bh"} boogie_si_record_i32(0);
    $M.46 := 0;
    call {:si_unique_call 1795} {:cexpr "ldv_linux_kernel_rcu_update_lock_sched_rcu_nested_sched"} boogie_si_record_i32(0);
    $M.47 := 0;
    call {:si_unique_call 1796} {:cexpr "ldv_linux_kernel_rcu_update_lock_rcu_nested"} boogie_si_record_i32(0);
    $M.50 := 0;
    call {:si_unique_call 1797} {:cexpr "ldv_linux_mmc_sdio_func_sdio_element"} boogie_si_record_i16(0);
    $M.34 := 0;
    call {:si_unique_call 1798} {:cexpr "ldv_linux_net_register_probe_state"} boogie_si_record_i32(0);
    $M.51 := 0;
    call {:si_unique_call 1799} {:cexpr "rtnllocknumber"} boogie_si_record_i32(0);
    $M.52 := 0;
    call {:si_unique_call 1800} {:cexpr "locksocknumber"} boogie_si_record_i32(0);
    $M.53 := 0;
    call {:si_unique_call 1801} {:cexpr "ldv_linux_usb_coherent_coherent_state"} boogie_si_record_i32(0);
    call {:si_unique_call 1802} {:cexpr "LDV_LINUX_USB_DEV_USB_DEV_REF_COUNTS"} boogie_si_record_i32(0);
    $M.54 := 0;
    call {:si_unique_call 1803} {:cexpr "ldv_linux_usb_gadget_usb_gadget"} boogie_si_record_i32(0);
    $M.33 := 0;
    call {:si_unique_call 1804} {:cexpr "ldv_linux_usb_register_probe_state"} boogie_si_record_i32(0);
    $M.55 := 0;
    call {:si_unique_call 1805} {:cexpr "ldv_linux_usb_urb_urb_state"} boogie_si_record_i32(0);
    $M.17 := 0;
    call {:si_unique_call 1806} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_fe_lock_of_mxl111sf_state"} boogie_si_record_i8(0);
    $M.29 := 0;
    call {:si_unique_call 1807} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_i2c_mutex_of_dvb_usb_device"} boogie_si_record_i8(0);
    call {:si_unique_call 1808} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_i_mutex_of_inode"} boogie_si_record_i8(0);
    call {:si_unique_call 1809} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_lock"} boogie_si_record_i8(0);
    call {:si_unique_call 1810} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_mutex_of_device"} boogie_si_record_i8(0);
    $M.61 := $store.i16($M.61, __mod_usb__mxl111sf_id_table_device_table, 0);
    $M.62 := $store.i16($M.62, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(0, 32)), $mul.ref(2, 1)), 0);
    $M.63 := $store.i16($M.63, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(0, 32)), $mul.ref(4, 1)), 0);
    $M.64 := $store.i16($M.64, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(0, 32)), $mul.ref(6, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(0, 32)), $mul.ref(8, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(0, 32)), $mul.ref(10, 1)), 0);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(0, 32)), $mul.ref(11, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(0, 32)), $mul.ref(12, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(0, 32)), $mul.ref(13, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(0, 32)), $mul.ref(14, 1)), 0);
    $M.71 := $store.i8($M.71, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(0, 32)), $mul.ref(15, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.73 := $store.i64($M.73, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.61 := $store.i16($M.61, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(1, 32)), $mul.ref(0, 1)), 0);
    $M.62 := $store.i16($M.62, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(1, 32)), $mul.ref(2, 1)), 0);
    $M.63 := $store.i16($M.63, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(1, 32)), $mul.ref(4, 1)), 0);
    $M.64 := $store.i16($M.64, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(1, 32)), $mul.ref(6, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(1, 32)), $mul.ref(8, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(1, 32)), $mul.ref(10, 1)), 0);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(1, 32)), $mul.ref(11, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(1, 32)), $mul.ref(12, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(1, 32)), $mul.ref(13, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(1, 32)), $mul.ref(14, 1)), 0);
    $M.71 := $store.i8($M.71, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(1, 32)), $mul.ref(15, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.73 := $store.i64($M.73, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.61 := $store.i16($M.61, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(2, 32)), $mul.ref(0, 1)), 0);
    $M.62 := $store.i16($M.62, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(2, 32)), $mul.ref(2, 1)), 0);
    $M.63 := $store.i16($M.63, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(2, 32)), $mul.ref(4, 1)), 0);
    $M.64 := $store.i16($M.64, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(2, 32)), $mul.ref(6, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(2, 32)), $mul.ref(8, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(2, 32)), $mul.ref(10, 1)), 0);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(2, 32)), $mul.ref(11, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(2, 32)), $mul.ref(12, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(2, 32)), $mul.ref(13, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(2, 32)), $mul.ref(14, 1)), 0);
    $M.71 := $store.i8($M.71, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(2, 32)), $mul.ref(15, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(2, 32)), $mul.ref(16, 1)), 0);
    $M.73 := $store.i64($M.73, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(2, 32)), $mul.ref(24, 1)), 0);
    $M.61 := $store.i16($M.61, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(3, 32)), $mul.ref(0, 1)), 0);
    $M.62 := $store.i16($M.62, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(3, 32)), $mul.ref(2, 1)), 0);
    $M.63 := $store.i16($M.63, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(3, 32)), $mul.ref(4, 1)), 0);
    $M.64 := $store.i16($M.64, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(3, 32)), $mul.ref(6, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(3, 32)), $mul.ref(8, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(3, 32)), $mul.ref(10, 1)), 0);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(3, 32)), $mul.ref(11, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(3, 32)), $mul.ref(12, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(3, 32)), $mul.ref(13, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(3, 32)), $mul.ref(14, 1)), 0);
    $M.71 := $store.i8($M.71, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(3, 32)), $mul.ref(15, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(3, 32)), $mul.ref(16, 1)), 0);
    $M.73 := $store.i64($M.73, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(3, 32)), $mul.ref(24, 1)), 0);
    $M.61 := $store.i16($M.61, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(4, 32)), $mul.ref(0, 1)), 0);
    $M.62 := $store.i16($M.62, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(4, 32)), $mul.ref(2, 1)), 0);
    $M.63 := $store.i16($M.63, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(4, 32)), $mul.ref(4, 1)), 0);
    $M.64 := $store.i16($M.64, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(4, 32)), $mul.ref(6, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(4, 32)), $mul.ref(8, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(4, 32)), $mul.ref(10, 1)), 0);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(4, 32)), $mul.ref(11, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(4, 32)), $mul.ref(12, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(4, 32)), $mul.ref(13, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(4, 32)), $mul.ref(14, 1)), 0);
    $M.71 := $store.i8($M.71, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(4, 32)), $mul.ref(15, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(4, 32)), $mul.ref(16, 1)), 0);
    $M.73 := $store.i64($M.73, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(4, 32)), $mul.ref(24, 1)), 0);
    $M.61 := $store.i16($M.61, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(5, 32)), $mul.ref(0, 1)), 0);
    $M.62 := $store.i16($M.62, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(5, 32)), $mul.ref(2, 1)), 0);
    $M.63 := $store.i16($M.63, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(5, 32)), $mul.ref(4, 1)), 0);
    $M.64 := $store.i16($M.64, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(5, 32)), $mul.ref(6, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(5, 32)), $mul.ref(8, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(5, 32)), $mul.ref(10, 1)), 0);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(5, 32)), $mul.ref(11, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(5, 32)), $mul.ref(12, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(5, 32)), $mul.ref(13, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(5, 32)), $mul.ref(14, 1)), 0);
    $M.71 := $store.i8($M.71, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(5, 32)), $mul.ref(15, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(5, 32)), $mul.ref(16, 1)), 0);
    $M.73 := $store.i64($M.73, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(5, 32)), $mul.ref(24, 1)), 0);
    $M.61 := $store.i16($M.61, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(6, 32)), $mul.ref(0, 1)), 0);
    $M.62 := $store.i16($M.62, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(6, 32)), $mul.ref(2, 1)), 0);
    $M.63 := $store.i16($M.63, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(6, 32)), $mul.ref(4, 1)), 0);
    $M.64 := $store.i16($M.64, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(6, 32)), $mul.ref(6, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(6, 32)), $mul.ref(8, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(6, 32)), $mul.ref(10, 1)), 0);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(6, 32)), $mul.ref(11, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(6, 32)), $mul.ref(12, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(6, 32)), $mul.ref(13, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(6, 32)), $mul.ref(14, 1)), 0);
    $M.71 := $store.i8($M.71, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(6, 32)), $mul.ref(15, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(6, 32)), $mul.ref(16, 1)), 0);
    $M.73 := $store.i64($M.73, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(6, 32)), $mul.ref(24, 1)), 0);
    $M.61 := $store.i16($M.61, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(7, 32)), $mul.ref(0, 1)), 0);
    $M.62 := $store.i16($M.62, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(7, 32)), $mul.ref(2, 1)), 0);
    $M.63 := $store.i16($M.63, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(7, 32)), $mul.ref(4, 1)), 0);
    $M.64 := $store.i16($M.64, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(7, 32)), $mul.ref(6, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(7, 32)), $mul.ref(8, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(7, 32)), $mul.ref(10, 1)), 0);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(7, 32)), $mul.ref(11, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(7, 32)), $mul.ref(12, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(7, 32)), $mul.ref(13, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(7, 32)), $mul.ref(14, 1)), 0);
    $M.71 := $store.i8($M.71, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(7, 32)), $mul.ref(15, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(7, 32)), $mul.ref(16, 1)), 0);
    $M.73 := $store.i64($M.73, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(7, 32)), $mul.ref(24, 1)), 0);
    $M.61 := $store.i16($M.61, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(8, 32)), $mul.ref(0, 1)), 0);
    $M.62 := $store.i16($M.62, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(8, 32)), $mul.ref(2, 1)), 0);
    $M.63 := $store.i16($M.63, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(8, 32)), $mul.ref(4, 1)), 0);
    $M.64 := $store.i16($M.64, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(8, 32)), $mul.ref(6, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(8, 32)), $mul.ref(8, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(8, 32)), $mul.ref(10, 1)), 0);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(8, 32)), $mul.ref(11, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(8, 32)), $mul.ref(12, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(8, 32)), $mul.ref(13, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(8, 32)), $mul.ref(14, 1)), 0);
    $M.71 := $store.i8($M.71, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(8, 32)), $mul.ref(15, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(8, 32)), $mul.ref(16, 1)), 0);
    $M.73 := $store.i64($M.73, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(8, 32)), $mul.ref(24, 1)), 0);
    $M.61 := $store.i16($M.61, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(9, 32)), $mul.ref(0, 1)), 0);
    $M.62 := $store.i16($M.62, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(9, 32)), $mul.ref(2, 1)), 0);
    $M.63 := $store.i16($M.63, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(9, 32)), $mul.ref(4, 1)), 0);
    $M.64 := $store.i16($M.64, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(9, 32)), $mul.ref(6, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(9, 32)), $mul.ref(8, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(9, 32)), $mul.ref(10, 1)), 0);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(9, 32)), $mul.ref(11, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(9, 32)), $mul.ref(12, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(9, 32)), $mul.ref(13, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(9, 32)), $mul.ref(14, 1)), 0);
    $M.71 := $store.i8($M.71, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(9, 32)), $mul.ref(15, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(9, 32)), $mul.ref(16, 1)), 0);
    $M.73 := $store.i64($M.73, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(9, 32)), $mul.ref(24, 1)), 0);
    $M.61 := $store.i16($M.61, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(10, 32)), $mul.ref(0, 1)), 0);
    $M.62 := $store.i16($M.62, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(10, 32)), $mul.ref(2, 1)), 0);
    $M.63 := $store.i16($M.63, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(10, 32)), $mul.ref(4, 1)), 0);
    $M.64 := $store.i16($M.64, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(10, 32)), $mul.ref(6, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(10, 32)), $mul.ref(8, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(10, 32)), $mul.ref(10, 1)), 0);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(10, 32)), $mul.ref(11, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(10, 32)), $mul.ref(12, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(10, 32)), $mul.ref(13, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(10, 32)), $mul.ref(14, 1)), 0);
    $M.71 := $store.i8($M.71, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(10, 32)), $mul.ref(15, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(10, 32)), $mul.ref(16, 1)), 0);
    $M.73 := $store.i64($M.73, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(10, 32)), $mul.ref(24, 1)), 0);
    $M.61 := $store.i16($M.61, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(11, 32)), $mul.ref(0, 1)), 0);
    $M.62 := $store.i16($M.62, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(11, 32)), $mul.ref(2, 1)), 0);
    $M.63 := $store.i16($M.63, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(11, 32)), $mul.ref(4, 1)), 0);
    $M.64 := $store.i16($M.64, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(11, 32)), $mul.ref(6, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(11, 32)), $mul.ref(8, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(11, 32)), $mul.ref(10, 1)), 0);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(11, 32)), $mul.ref(11, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(11, 32)), $mul.ref(12, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(11, 32)), $mul.ref(13, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(11, 32)), $mul.ref(14, 1)), 0);
    $M.71 := $store.i8($M.71, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(11, 32)), $mul.ref(15, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(11, 32)), $mul.ref(16, 1)), 0);
    $M.73 := $store.i64($M.73, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(11, 32)), $mul.ref(24, 1)), 0);
    $M.61 := $store.i16($M.61, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(12, 32)), $mul.ref(0, 1)), 0);
    $M.62 := $store.i16($M.62, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(12, 32)), $mul.ref(2, 1)), 0);
    $M.63 := $store.i16($M.63, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(12, 32)), $mul.ref(4, 1)), 0);
    $M.64 := $store.i16($M.64, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(12, 32)), $mul.ref(6, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(12, 32)), $mul.ref(8, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(12, 32)), $mul.ref(10, 1)), 0);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(12, 32)), $mul.ref(11, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(12, 32)), $mul.ref(12, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(12, 32)), $mul.ref(13, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(12, 32)), $mul.ref(14, 1)), 0);
    $M.71 := $store.i8($M.71, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(12, 32)), $mul.ref(15, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(12, 32)), $mul.ref(16, 1)), 0);
    $M.73 := $store.i64($M.73, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(12, 32)), $mul.ref(24, 1)), 0);
    $M.61 := $store.i16($M.61, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(13, 32)), $mul.ref(0, 1)), 0);
    $M.62 := $store.i16($M.62, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(13, 32)), $mul.ref(2, 1)), 0);
    $M.63 := $store.i16($M.63, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(13, 32)), $mul.ref(4, 1)), 0);
    $M.64 := $store.i16($M.64, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(13, 32)), $mul.ref(6, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(13, 32)), $mul.ref(8, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(13, 32)), $mul.ref(10, 1)), 0);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(13, 32)), $mul.ref(11, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(13, 32)), $mul.ref(12, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(13, 32)), $mul.ref(13, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(13, 32)), $mul.ref(14, 1)), 0);
    $M.71 := $store.i8($M.71, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(13, 32)), $mul.ref(15, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(13, 32)), $mul.ref(16, 1)), 0);
    $M.73 := $store.i64($M.73, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(13, 32)), $mul.ref(24, 1)), 0);
    $M.61 := $store.i16($M.61, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(14, 32)), $mul.ref(0, 1)), 0);
    $M.62 := $store.i16($M.62, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(14, 32)), $mul.ref(2, 1)), 0);
    $M.63 := $store.i16($M.63, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(14, 32)), $mul.ref(4, 1)), 0);
    $M.64 := $store.i16($M.64, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(14, 32)), $mul.ref(6, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(14, 32)), $mul.ref(8, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(14, 32)), $mul.ref(10, 1)), 0);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(14, 32)), $mul.ref(11, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(14, 32)), $mul.ref(12, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(14, 32)), $mul.ref(13, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(14, 32)), $mul.ref(14, 1)), 0);
    $M.71 := $store.i8($M.71, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(14, 32)), $mul.ref(15, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(14, 32)), $mul.ref(16, 1)), 0);
    $M.73 := $store.i64($M.73, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(14, 32)), $mul.ref(24, 1)), 0);
    $M.61 := $store.i16($M.61, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(15, 32)), $mul.ref(0, 1)), 0);
    $M.62 := $store.i16($M.62, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(15, 32)), $mul.ref(2, 1)), 0);
    $M.63 := $store.i16($M.63, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(15, 32)), $mul.ref(4, 1)), 0);
    $M.64 := $store.i16($M.64, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(15, 32)), $mul.ref(6, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(15, 32)), $mul.ref(8, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(15, 32)), $mul.ref(10, 1)), 0);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(15, 32)), $mul.ref(11, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(15, 32)), $mul.ref(12, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(15, 32)), $mul.ref(13, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(15, 32)), $mul.ref(14, 1)), 0);
    $M.71 := $store.i8($M.71, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(15, 32)), $mul.ref(15, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(15, 32)), $mul.ref(16, 1)), 0);
    $M.73 := $store.i64($M.73, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(15, 32)), $mul.ref(24, 1)), 0);
    $M.61 := $store.i16($M.61, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(16, 32)), $mul.ref(0, 1)), 0);
    $M.62 := $store.i16($M.62, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(16, 32)), $mul.ref(2, 1)), 0);
    $M.63 := $store.i16($M.63, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(16, 32)), $mul.ref(4, 1)), 0);
    $M.64 := $store.i16($M.64, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(16, 32)), $mul.ref(6, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(16, 32)), $mul.ref(8, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(16, 32)), $mul.ref(10, 1)), 0);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(16, 32)), $mul.ref(11, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(16, 32)), $mul.ref(12, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(16, 32)), $mul.ref(13, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(16, 32)), $mul.ref(14, 1)), 0);
    $M.71 := $store.i8($M.71, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(16, 32)), $mul.ref(15, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(16, 32)), $mul.ref(16, 1)), 0);
    $M.73 := $store.i64($M.73, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(16, 32)), $mul.ref(24, 1)), 0);
    $M.61 := $store.i16($M.61, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(17, 32)), $mul.ref(0, 1)), 0);
    $M.62 := $store.i16($M.62, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(17, 32)), $mul.ref(2, 1)), 0);
    $M.63 := $store.i16($M.63, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(17, 32)), $mul.ref(4, 1)), 0);
    $M.64 := $store.i16($M.64, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(17, 32)), $mul.ref(6, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(17, 32)), $mul.ref(8, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(17, 32)), $mul.ref(10, 1)), 0);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(17, 32)), $mul.ref(11, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(17, 32)), $mul.ref(12, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(17, 32)), $mul.ref(13, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(17, 32)), $mul.ref(14, 1)), 0);
    $M.71 := $store.i8($M.71, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(17, 32)), $mul.ref(15, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(17, 32)), $mul.ref(16, 1)), 0);
    $M.73 := $store.i64($M.73, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(17, 32)), $mul.ref(24, 1)), 0);
    $M.61 := $store.i16($M.61, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(18, 32)), $mul.ref(0, 1)), 0);
    $M.62 := $store.i16($M.62, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(18, 32)), $mul.ref(2, 1)), 0);
    $M.63 := $store.i16($M.63, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(18, 32)), $mul.ref(4, 1)), 0);
    $M.64 := $store.i16($M.64, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(18, 32)), $mul.ref(6, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(18, 32)), $mul.ref(8, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(18, 32)), $mul.ref(10, 1)), 0);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(18, 32)), $mul.ref(11, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(18, 32)), $mul.ref(12, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(18, 32)), $mul.ref(13, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(18, 32)), $mul.ref(14, 1)), 0);
    $M.71 := $store.i8($M.71, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(18, 32)), $mul.ref(15, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(18, 32)), $mul.ref(16, 1)), 0);
    $M.73 := $store.i64($M.73, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(18, 32)), $mul.ref(24, 1)), 0);
    $M.61 := $store.i16($M.61, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(19, 32)), $mul.ref(0, 1)), 0);
    $M.62 := $store.i16($M.62, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(19, 32)), $mul.ref(2, 1)), 0);
    $M.63 := $store.i16($M.63, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(19, 32)), $mul.ref(4, 1)), 0);
    $M.64 := $store.i16($M.64, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(19, 32)), $mul.ref(6, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(19, 32)), $mul.ref(8, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(19, 32)), $mul.ref(10, 1)), 0);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(19, 32)), $mul.ref(11, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(19, 32)), $mul.ref(12, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(19, 32)), $mul.ref(13, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(19, 32)), $mul.ref(14, 1)), 0);
    $M.71 := $store.i8($M.71, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(19, 32)), $mul.ref(15, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(19, 32)), $mul.ref(16, 1)), 0);
    $M.73 := $store.i64($M.73, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(19, 32)), $mul.ref(24, 1)), 0);
    $M.61 := $store.i16($M.61, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(20, 32)), $mul.ref(0, 1)), 0);
    $M.62 := $store.i16($M.62, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(20, 32)), $mul.ref(2, 1)), 0);
    $M.63 := $store.i16($M.63, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(20, 32)), $mul.ref(4, 1)), 0);
    $M.64 := $store.i16($M.64, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(20, 32)), $mul.ref(6, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(20, 32)), $mul.ref(8, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(20, 32)), $mul.ref(10, 1)), 0);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(20, 32)), $mul.ref(11, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(20, 32)), $mul.ref(12, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(20, 32)), $mul.ref(13, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(20, 32)), $mul.ref(14, 1)), 0);
    $M.71 := $store.i8($M.71, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(20, 32)), $mul.ref(15, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(20, 32)), $mul.ref(16, 1)), 0);
    $M.73 := $store.i64($M.73, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(20, 32)), $mul.ref(24, 1)), 0);
    $M.61 := $store.i16($M.61, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(21, 32)), $mul.ref(0, 1)), 0);
    $M.62 := $store.i16($M.62, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(21, 32)), $mul.ref(2, 1)), 0);
    $M.63 := $store.i16($M.63, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(21, 32)), $mul.ref(4, 1)), 0);
    $M.64 := $store.i16($M.64, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(21, 32)), $mul.ref(6, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(21, 32)), $mul.ref(8, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(21, 32)), $mul.ref(10, 1)), 0);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(21, 32)), $mul.ref(11, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(21, 32)), $mul.ref(12, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(21, 32)), $mul.ref(13, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(21, 32)), $mul.ref(14, 1)), 0);
    $M.71 := $store.i8($M.71, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(21, 32)), $mul.ref(15, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(21, 32)), $mul.ref(16, 1)), 0);
    $M.73 := $store.i64($M.73, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(21, 32)), $mul.ref(24, 1)), 0);
    $M.61 := $store.i16($M.61, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(22, 32)), $mul.ref(0, 1)), 0);
    $M.62 := $store.i16($M.62, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(22, 32)), $mul.ref(2, 1)), 0);
    $M.63 := $store.i16($M.63, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(22, 32)), $mul.ref(4, 1)), 0);
    $M.64 := $store.i16($M.64, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(22, 32)), $mul.ref(6, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(22, 32)), $mul.ref(8, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(22, 32)), $mul.ref(10, 1)), 0);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(22, 32)), $mul.ref(11, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(22, 32)), $mul.ref(12, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(22, 32)), $mul.ref(13, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(22, 32)), $mul.ref(14, 1)), 0);
    $M.71 := $store.i8($M.71, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(22, 32)), $mul.ref(15, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(22, 32)), $mul.ref(16, 1)), 0);
    $M.73 := $store.i64($M.73, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(22, 32)), $mul.ref(24, 1)), 0);
    $M.61 := $store.i16($M.61, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(23, 32)), $mul.ref(0, 1)), 0);
    $M.62 := $store.i16($M.62, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(23, 32)), $mul.ref(2, 1)), 0);
    $M.63 := $store.i16($M.63, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(23, 32)), $mul.ref(4, 1)), 0);
    $M.64 := $store.i16($M.64, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(23, 32)), $mul.ref(6, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(23, 32)), $mul.ref(8, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(23, 32)), $mul.ref(10, 1)), 0);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(23, 32)), $mul.ref(11, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(23, 32)), $mul.ref(12, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(23, 32)), $mul.ref(13, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(23, 32)), $mul.ref(14, 1)), 0);
    $M.71 := $store.i8($M.71, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(23, 32)), $mul.ref(15, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(23, 32)), $mul.ref(16, 1)), 0);
    $M.73 := $store.i64($M.73, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(23, 32)), $mul.ref(24, 1)), 0);
    $M.61 := $store.i16($M.61, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(24, 32)), $mul.ref(0, 1)), 0);
    $M.62 := $store.i16($M.62, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(24, 32)), $mul.ref(2, 1)), 0);
    $M.63 := $store.i16($M.63, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(24, 32)), $mul.ref(4, 1)), 0);
    $M.64 := $store.i16($M.64, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(24, 32)), $mul.ref(6, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(24, 32)), $mul.ref(8, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(24, 32)), $mul.ref(10, 1)), 0);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(24, 32)), $mul.ref(11, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(24, 32)), $mul.ref(12, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(24, 32)), $mul.ref(13, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(24, 32)), $mul.ref(14, 1)), 0);
    $M.71 := $store.i8($M.71, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(24, 32)), $mul.ref(15, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(24, 32)), $mul.ref(16, 1)), 0);
    $M.73 := $store.i64($M.73, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(24, 32)), $mul.ref(24, 1)), 0);
    $M.61 := $store.i16($M.61, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(25, 32)), $mul.ref(0, 1)), 0);
    $M.62 := $store.i16($M.62, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(25, 32)), $mul.ref(2, 1)), 0);
    $M.63 := $store.i16($M.63, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(25, 32)), $mul.ref(4, 1)), 0);
    $M.64 := $store.i16($M.64, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(25, 32)), $mul.ref(6, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(25, 32)), $mul.ref(8, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(25, 32)), $mul.ref(10, 1)), 0);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(25, 32)), $mul.ref(11, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(25, 32)), $mul.ref(12, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(25, 32)), $mul.ref(13, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(25, 32)), $mul.ref(14, 1)), 0);
    $M.71 := $store.i8($M.71, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(25, 32)), $mul.ref(15, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(25, 32)), $mul.ref(16, 1)), 0);
    $M.73 := $store.i64($M.73, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(25, 32)), $mul.ref(24, 1)), 0);
    $M.61 := $store.i16($M.61, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(26, 32)), $mul.ref(0, 1)), 0);
    $M.62 := $store.i16($M.62, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(26, 32)), $mul.ref(2, 1)), 0);
    $M.63 := $store.i16($M.63, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(26, 32)), $mul.ref(4, 1)), 0);
    $M.64 := $store.i16($M.64, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(26, 32)), $mul.ref(6, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(26, 32)), $mul.ref(8, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(26, 32)), $mul.ref(10, 1)), 0);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(26, 32)), $mul.ref(11, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(26, 32)), $mul.ref(12, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(26, 32)), $mul.ref(13, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(26, 32)), $mul.ref(14, 1)), 0);
    $M.71 := $store.i8($M.71, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(26, 32)), $mul.ref(15, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(26, 32)), $mul.ref(16, 1)), 0);
    $M.73 := $store.i64($M.73, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(26, 32)), $mul.ref(24, 1)), 0);
    $M.61 := $store.i16($M.61, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(27, 32)), $mul.ref(0, 1)), 0);
    $M.62 := $store.i16($M.62, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(27, 32)), $mul.ref(2, 1)), 0);
    $M.63 := $store.i16($M.63, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(27, 32)), $mul.ref(4, 1)), 0);
    $M.64 := $store.i16($M.64, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(27, 32)), $mul.ref(6, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(27, 32)), $mul.ref(8, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(27, 32)), $mul.ref(10, 1)), 0);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(27, 32)), $mul.ref(11, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(27, 32)), $mul.ref(12, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(27, 32)), $mul.ref(13, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(27, 32)), $mul.ref(14, 1)), 0);
    $M.71 := $store.i8($M.71, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(27, 32)), $mul.ref(15, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(27, 32)), $mul.ref(16, 1)), 0);
    $M.73 := $store.i64($M.73, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(27, 32)), $mul.ref(24, 1)), 0);
    $M.61 := $store.i16($M.61, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(28, 32)), $mul.ref(0, 1)), 0);
    $M.62 := $store.i16($M.62, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(28, 32)), $mul.ref(2, 1)), 0);
    $M.63 := $store.i16($M.63, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(28, 32)), $mul.ref(4, 1)), 0);
    $M.64 := $store.i16($M.64, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(28, 32)), $mul.ref(6, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(28, 32)), $mul.ref(8, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(28, 32)), $mul.ref(10, 1)), 0);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(28, 32)), $mul.ref(11, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(28, 32)), $mul.ref(12, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(28, 32)), $mul.ref(13, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(28, 32)), $mul.ref(14, 1)), 0);
    $M.71 := $store.i8($M.71, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(28, 32)), $mul.ref(15, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(28, 32)), $mul.ref(16, 1)), 0);
    $M.73 := $store.i64($M.73, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(28, 32)), $mul.ref(24, 1)), 0);
    $M.61 := $store.i16($M.61, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(29, 32)), $mul.ref(0, 1)), 0);
    $M.62 := $store.i16($M.62, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(29, 32)), $mul.ref(2, 1)), 0);
    $M.63 := $store.i16($M.63, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(29, 32)), $mul.ref(4, 1)), 0);
    $M.64 := $store.i16($M.64, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(29, 32)), $mul.ref(6, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(29, 32)), $mul.ref(8, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(29, 32)), $mul.ref(10, 1)), 0);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(29, 32)), $mul.ref(11, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(29, 32)), $mul.ref(12, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(29, 32)), $mul.ref(13, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(29, 32)), $mul.ref(14, 1)), 0);
    $M.71 := $store.i8($M.71, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(29, 32)), $mul.ref(15, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(29, 32)), $mul.ref(16, 1)), 0);
    $M.73 := $store.i64($M.73, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(29, 32)), $mul.ref(24, 1)), 0);
    $M.61 := $store.i16($M.61, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(30, 32)), $mul.ref(0, 1)), 0);
    $M.62 := $store.i16($M.62, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(30, 32)), $mul.ref(2, 1)), 0);
    $M.63 := $store.i16($M.63, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(30, 32)), $mul.ref(4, 1)), 0);
    $M.64 := $store.i16($M.64, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(30, 32)), $mul.ref(6, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(30, 32)), $mul.ref(8, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(30, 32)), $mul.ref(10, 1)), 0);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(30, 32)), $mul.ref(11, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(30, 32)), $mul.ref(12, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(30, 32)), $mul.ref(13, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(30, 32)), $mul.ref(14, 1)), 0);
    $M.71 := $store.i8($M.71, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(30, 32)), $mul.ref(15, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(30, 32)), $mul.ref(16, 1)), 0);
    $M.73 := $store.i64($M.73, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(30, 32)), $mul.ref(24, 1)), 0);
    $M.61 := $store.i16($M.61, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(31, 32)), $mul.ref(0, 1)), 0);
    $M.62 := $store.i16($M.62, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(31, 32)), $mul.ref(2, 1)), 0);
    $M.63 := $store.i16($M.63, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(31, 32)), $mul.ref(4, 1)), 0);
    $M.64 := $store.i16($M.64, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(31, 32)), $mul.ref(6, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(31, 32)), $mul.ref(8, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(31, 32)), $mul.ref(10, 1)), 0);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(31, 32)), $mul.ref(11, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(31, 32)), $mul.ref(12, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(31, 32)), $mul.ref(13, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(31, 32)), $mul.ref(14, 1)), 0);
    $M.71 := $store.i8($M.71, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(31, 32)), $mul.ref(15, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(31, 32)), $mul.ref(16, 1)), 0);
    $M.73 := $store.i64($M.73, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(31, 32)), $mul.ref(24, 1)), 0);
    $M.61 := $store.i16($M.61, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(32, 32)), $mul.ref(0, 1)), 0);
    $M.62 := $store.i16($M.62, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(32, 32)), $mul.ref(2, 1)), 0);
    $M.63 := $store.i16($M.63, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(32, 32)), $mul.ref(4, 1)), 0);
    $M.64 := $store.i16($M.64, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(32, 32)), $mul.ref(6, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(32, 32)), $mul.ref(8, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(32, 32)), $mul.ref(10, 1)), 0);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(32, 32)), $mul.ref(11, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(32, 32)), $mul.ref(12, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(32, 32)), $mul.ref(13, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(32, 32)), $mul.ref(14, 1)), 0);
    $M.71 := $store.i8($M.71, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(32, 32)), $mul.ref(15, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(32, 32)), $mul.ref(16, 1)), 0);
    $M.73 := $store.i64($M.73, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(32, 32)), $mul.ref(24, 1)), 0);
    $M.61 := $store.i16($M.61, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(33, 32)), $mul.ref(0, 1)), 0);
    $M.62 := $store.i16($M.62, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(33, 32)), $mul.ref(2, 1)), 0);
    $M.63 := $store.i16($M.63, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(33, 32)), $mul.ref(4, 1)), 0);
    $M.64 := $store.i16($M.64, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(33, 32)), $mul.ref(6, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(33, 32)), $mul.ref(8, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(33, 32)), $mul.ref(10, 1)), 0);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(33, 32)), $mul.ref(11, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(33, 32)), $mul.ref(12, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(33, 32)), $mul.ref(13, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(33, 32)), $mul.ref(14, 1)), 0);
    $M.71 := $store.i8($M.71, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(33, 32)), $mul.ref(15, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(33, 32)), $mul.ref(16, 1)), 0);
    $M.73 := $store.i64($M.73, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(33, 32)), $mul.ref(24, 1)), 0);
    $M.61 := $store.i16($M.61, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(34, 32)), $mul.ref(0, 1)), 0);
    $M.62 := $store.i16($M.62, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(34, 32)), $mul.ref(2, 1)), 0);
    $M.63 := $store.i16($M.63, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(34, 32)), $mul.ref(4, 1)), 0);
    $M.64 := $store.i16($M.64, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(34, 32)), $mul.ref(6, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(34, 32)), $mul.ref(8, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(34, 32)), $mul.ref(10, 1)), 0);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(34, 32)), $mul.ref(11, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(34, 32)), $mul.ref(12, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(34, 32)), $mul.ref(13, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(34, 32)), $mul.ref(14, 1)), 0);
    $M.71 := $store.i8($M.71, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(34, 32)), $mul.ref(15, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(34, 32)), $mul.ref(16, 1)), 0);
    $M.73 := $store.i64($M.73, $add.ref($add.ref($add.ref(__mod_usb__mxl111sf_id_table_device_table, $mul.ref(0, 1120)), $mul.ref(34, 32)), $mul.ref(24, 1)), 0);
    $M.49 := 0;
    call {:si_unique_call 1811} {:cexpr "ldv_linux_lib_idr_idr"} boogie_si_record_i32(0);
    call {:si_unique_call 1812} {:cexpr "ldv_linux_kernel_sched_completion_completion"} boogie_si_record_i32(0);
    call {:si_unique_call 1813} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_tx_global_lock_of_net_device"} boogie_si_record_i32(1);
    call {:si_unique_call 1814} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_siglock_of_sighand_struct"} boogie_si_record_i32(1);
    call {:si_unique_call 1815} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_ptl"} boogie_si_record_i32(1);
    call {:si_unique_call 1816} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_node_size_lock_of_pglist_data"} boogie_si_record_i32(1);
    call {:si_unique_call 1817} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_lock_of_NOT_ARG_SIGN"} boogie_si_record_i32(1);
    call {:si_unique_call 1818} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_lock"} boogie_si_record_i32(1);
    call {:si_unique_call 1819} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_i_lock_of_inode"} boogie_si_record_i32(1);
    call {:si_unique_call 1820} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_alloc_lock_of_task_struct"} boogie_si_record_i32(1);
    call {:si_unique_call 1821} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_addr_list_lock_of_net_device"} boogie_si_record_i32(1);
    call {:si_unique_call 1822} {:cexpr "ldv_linux_kernel_locking_spinlock_spin__xmit_lock_of_netdev_queue"} boogie_si_record_i32(1);
    call {:si_unique_call 1823} {:cexpr "__ldv_in_interrupt_context"} boogie_si_record_i8(0);
    $M.37 := 0;
    call {:si_unique_call 1824} {:cexpr "ldv_linux_block_queue_queue_state"} boogie_si_record_i32(0);
    $M.36 := 0;
    call {:si_unique_call 1825} {:cexpr "ldv_linux_block_genhd_disk_state"} boogie_si_record_i32(0);
    $M.32 := 1;
    call {:si_unique_call 1826} {:cexpr "dvb_usb_mxl111sf_rfswitch"} boogie_si_record_i32(1);
    $M.106 := $store.i8($M.106, hauppauge_lg2161_1019_config, 14);
    $M.107 := $store.i16($M.107, $add.ref($add.ref(hauppauge_lg2161_1019_config, $mul.ref(0, 20)), $mul.ref(2, 1)), 6000);
    $M.108 := $store.i8($M.108, $add.ref($add.ref(hauppauge_lg2161_1019_config, $mul.ref(0, 20)), $mul.ref(4, 1)), 1);
    $M.109 := $store.i32($M.109, $add.ref($add.ref(hauppauge_lg2161_1019_config, $mul.ref(0, 20)), $mul.ref(8, 1)), 2);
    $M.110 := $store.i32($M.110, $add.ref($add.ref(hauppauge_lg2161_1019_config, $mul.ref(0, 20)), $mul.ref(12, 1)), 0);
    $M.111 := $store.i32($M.111, $add.ref($add.ref(hauppauge_lg2161_1019_config, $mul.ref(0, 20)), $mul.ref(16, 1)), 1);
    $M.106 := $store.i8($M.106, hauppauge_lg2161_1040_config, 14);
    $M.107 := $store.i16($M.107, $add.ref($add.ref(hauppauge_lg2161_1040_config, $mul.ref(0, 20)), $mul.ref(2, 1)), 6000);
    $M.108 := $store.i8($M.108, $add.ref($add.ref(hauppauge_lg2161_1040_config, $mul.ref(0, 20)), $mul.ref(4, 1)), 1);
    $M.109 := $store.i32($M.109, $add.ref($add.ref(hauppauge_lg2161_1040_config, $mul.ref(0, 20)), $mul.ref(8, 1)), 4);
    $M.110 := $store.i32($M.110, $add.ref($add.ref(hauppauge_lg2161_1040_config, $mul.ref(0, 20)), $mul.ref(12, 1)), 0);
    $M.111 := $store.i32($M.111, $add.ref($add.ref(hauppauge_lg2161_1040_config, $mul.ref(0, 20)), $mul.ref(16, 1)), 1);
    $M.106 := $store.i8($M.106, hauppauge_lg2161_1019_ep6_config, 14);
    $M.107 := $store.i16($M.107, $add.ref($add.ref(hauppauge_lg2161_1019_ep6_config, $mul.ref(0, 20)), $mul.ref(2, 1)), 6000);
    $M.108 := $store.i8($M.108, $add.ref($add.ref(hauppauge_lg2161_1019_ep6_config, $mul.ref(0, 20)), $mul.ref(4, 1)), 1);
    $M.109 := $store.i32($M.109, $add.ref($add.ref(hauppauge_lg2161_1019_ep6_config, $mul.ref(0, 20)), $mul.ref(8, 1)), 1);
    $M.110 := $store.i32($M.110, $add.ref($add.ref(hauppauge_lg2161_1019_ep6_config, $mul.ref(0, 20)), $mul.ref(12, 1)), 0);
    $M.111 := $store.i32($M.111, $add.ref($add.ref(hauppauge_lg2161_1019_ep6_config, $mul.ref(0, 20)), $mul.ref(16, 1)), 1);
    $M.106 := $store.i8($M.106, hauppauge_lg2161_1040_ep6_config, 14);
    $M.107 := $store.i16($M.107, $add.ref($add.ref(hauppauge_lg2161_1040_ep6_config, $mul.ref(0, 20)), $mul.ref(2, 1)), 6000);
    $M.108 := $store.i8($M.108, $add.ref($add.ref(hauppauge_lg2161_1040_ep6_config, $mul.ref(0, 20)), $mul.ref(4, 1)), 1);
    $M.109 := $store.i32($M.109, $add.ref($add.ref(hauppauge_lg2161_1040_ep6_config, $mul.ref(0, 20)), $mul.ref(8, 1)), 7);
    $M.110 := $store.i32($M.110, $add.ref($add.ref(hauppauge_lg2161_1040_ep6_config, $mul.ref(0, 20)), $mul.ref(12, 1)), 0);
    $M.111 := $store.i32($M.111, $add.ref($add.ref(hauppauge_lg2161_1040_ep6_config, $mul.ref(0, 20)), $mul.ref(16, 1)), 1);
    $M.31 := 0;
    call {:si_unique_call 1827} {:cexpr "dvb_usb_mxl111sf_spi"} boogie_si_record_i32(0);
    $M.106 := $store.i8($M.106, hauppauge_lg2160_config, 14);
    $M.107 := $store.i16($M.107, $add.ref($add.ref(hauppauge_lg2160_config, $mul.ref(0, 20)), $mul.ref(2, 1)), 6000);
    $M.108 := $store.i8($M.108, $add.ref($add.ref(hauppauge_lg2160_config, $mul.ref(0, 20)), $mul.ref(4, 1)), 1);
    $M.109 := $store.i32($M.109, $add.ref($add.ref(hauppauge_lg2160_config, $mul.ref(0, 20)), $mul.ref(8, 1)), 0);
    $M.110 := $store.i32($M.110, $add.ref($add.ref(hauppauge_lg2160_config, $mul.ref(0, 20)), $mul.ref(12, 1)), 0);
    $M.111 := $store.i32($M.111, $add.ref($add.ref(hauppauge_lg2160_config, $mul.ref(0, 20)), $mul.ref(16, 1)), 0);
    $M.14 := 0;
    call {:si_unique_call 1828} {:cexpr "dvb_usb_mxl111sf_isoc"} boogie_si_record_i32(0);
    $M.149 := $store.ref($M.149, mxl111sf_props_mercury_mh, .str.2);
    $M.149 := $store.ref($M.149, $add.ref($add.ref(mxl111sf_props_mercury_mh, $mul.ref(0, 272)), $mul.ref(8, 1)), __this_module);
    $M.149 := $store.ref($M.149, $add.ref($add.ref(mxl111sf_props_mercury_mh, $mul.ref(0, 272)), $mul.ref(16, 1)), adapter_nr);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(mxl111sf_props_mercury_mh, $mul.ref(0, 272)), $mul.ref(24, 1)), 0);
    $M.149 := $store.i32($M.149, $add.ref($add.ref(mxl111sf_props_mercury_mh, $mul.ref(0, 272)), $mul.ref(28, 1)), 368);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(mxl111sf_props_mercury_mh, $mul.ref(0, 272)), $mul.ref(32, 1)), 2);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(mxl111sf_props_mercury_mh, $mul.ref(0, 272)), $mul.ref(33, 1)), $sub.i8(0, 127));
    $M.149 := $store.i32($M.149, $add.ref($add.ref(mxl111sf_props_mercury_mh, $mul.ref(0, 272)), $mul.ref(36, 1)), 0);
    $M.149 := $store.ref($M.149, $add.ref($add.ref(mxl111sf_props_mercury_mh, $mul.ref(0, 272)), $mul.ref(40, 1)), $0.ref);
    $M.149 := $store.ref($M.149, $add.ref($add.ref(mxl111sf_props_mercury_mh, $mul.ref(0, 272)), $mul.ref(48, 1)), $0.ref);
    $M.149 := $store.ref($M.149, $add.ref($add.ref(mxl111sf_props_mercury_mh, $mul.ref(0, 272)), $mul.ref(56, 1)), $0.ref);
    $M.149 := $store.ref($M.149, $add.ref($add.ref(mxl111sf_props_mercury_mh, $mul.ref(0, 272)), $mul.ref(64, 1)), mxl111sf_i2c_algo);
    $M.149 := $store.i32($M.149, $add.ref($add.ref(mxl111sf_props_mercury_mh, $mul.ref(0, 272)), $mul.ref(72, 1)), 1);
    $M.149 := $store.ref($M.149, $add.ref($add.ref(mxl111sf_props_mercury_mh, $mul.ref(0, 272)), $mul.ref(80, 1)), $0.ref);
    $M.149 := $store.i8($M.149, $add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mercury_mh, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(0, 1)), 0);
    $M.149 := $store.i8($M.149, $add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mercury_mh, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(1, 1)), 0);
    $M.149 := $store.ref($M.149, $add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mercury_mh, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(8, 1)), $0.ref);
    $M.149 := $store.ref($M.149, $add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mercury_mh, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(16, 1)), $0.ref);
    $M.149 := $store.i8($M.149, $add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mercury_mh, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1)), 2);
    $M.149 := $store.i8($M.149, $add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mercury_mh, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(1, 1)), 5);
    $M.149 := $store.i8($M.149, $add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mercury_mh, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(2, 1)), 6);
    $M.149 := $store.i32($M.149, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mercury_mh, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 24);
    $M.149 := $store.i32($M.149, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mercury_mh, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 3072);
    $M.149 := $store.i32($M.149, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mercury_mh, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 1);
    $M.149 := $store.i8($M.149, $add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mercury_mh, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(0, 1)), 0);
    $M.149 := $store.i8($M.149, $add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mercury_mh, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(1, 1)), 0);
    $M.149 := $store.ref($M.149, $add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mercury_mh, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(8, 1)), $0.ref);
    $M.149 := $store.ref($M.149, $add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mercury_mh, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(16, 1)), $0.ref);
    $M.149 := $store.i8($M.149, $add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mercury_mh, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(24, 1)), $mul.ref(0, 1)), 0);
    $M.149 := $store.i8($M.149, $add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mercury_mh, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(24, 1)), $mul.ref(1, 1)), 0);
    $M.149 := $store.i8($M.149, $add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mercury_mh, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(24, 1)), $mul.ref(2, 1)), 0);
    $M.149 := $store.i32($M.149, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mercury_mh, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(24, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.149 := $store.i32($M.149, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mercury_mh, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(24, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.149 := $store.i32($M.149, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mercury_mh, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(24, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.149 := $store.ref($M.149, $add.ref($add.ref(mxl111sf_props_mercury_mh, $mul.ref(0, 272)), $mul.ref(168, 1)), $0.ref);
    $M.149 := $store.ref($M.149, $add.ref($add.ref(mxl111sf_props_mercury_mh, $mul.ref(0, 272)), $mul.ref(176, 1)), $0.ref);
    $M.149 := $store.ref($M.149, $add.ref($add.ref(mxl111sf_props_mercury_mh, $mul.ref(0, 272)), $mul.ref(184, 1)), $0.ref);
    $M.149 := $store.ref($M.149, $add.ref($add.ref(mxl111sf_props_mercury_mh, $mul.ref(0, 272)), $mul.ref(192, 1)), mxl111sf_frontend_attach_mercury_mh);
    $M.149 := $store.ref($M.149, $add.ref($add.ref(mxl111sf_props_mercury_mh, $mul.ref(0, 272)), $mul.ref(200, 1)), $0.ref);
    $M.149 := $store.ref($M.149, $add.ref($add.ref(mxl111sf_props_mercury_mh, $mul.ref(0, 272)), $mul.ref(208, 1)), mxl111sf_attach_tuner);
    $M.149 := $store.ref($M.149, $add.ref($add.ref(mxl111sf_props_mercury_mh, $mul.ref(0, 272)), $mul.ref(216, 1)), $0.ref);
    $M.149 := $store.ref($M.149, $add.ref($add.ref(mxl111sf_props_mercury_mh, $mul.ref(0, 272)), $mul.ref(224, 1)), $0.ref);
    $M.149 := $store.ref($M.149, $add.ref($add.ref(mxl111sf_props_mercury_mh, $mul.ref(0, 272)), $mul.ref(232, 1)), mxl111sf_streaming_ctrl_mercury_mh);
    $M.149 := $store.ref($M.149, $add.ref($add.ref(mxl111sf_props_mercury_mh, $mul.ref(0, 272)), $mul.ref(240, 1)), mxl111sf_init);
    $M.149 := $store.ref($M.149, $add.ref($add.ref(mxl111sf_props_mercury_mh, $mul.ref(0, 272)), $mul.ref(248, 1)), $0.ref);
    $M.149 := $store.ref($M.149, $add.ref($add.ref(mxl111sf_props_mercury_mh, $mul.ref(0, 272)), $mul.ref(256, 1)), $0.ref);
    $M.149 := $store.ref($M.149, $add.ref($add.ref(mxl111sf_props_mercury_mh, $mul.ref(0, 272)), $mul.ref(264, 1)), mxl111sf_get_stream_config_mercury_mh);
    $M.177 := $store.ref($M.177, mxl111sf_props_mercury, .str.2);
    $M.177 := $store.ref($M.177, $add.ref($add.ref(mxl111sf_props_mercury, $mul.ref(0, 272)), $mul.ref(8, 1)), __this_module);
    $M.177 := $store.ref($M.177, $add.ref($add.ref(mxl111sf_props_mercury, $mul.ref(0, 272)), $mul.ref(16, 1)), adapter_nr);
    $M.177 := $store.i8($M.177, $add.ref($add.ref(mxl111sf_props_mercury, $mul.ref(0, 272)), $mul.ref(24, 1)), 0);
    $M.177 := $store.i32($M.177, $add.ref($add.ref(mxl111sf_props_mercury, $mul.ref(0, 272)), $mul.ref(28, 1)), 368);
    $M.177 := $store.i8($M.177, $add.ref($add.ref(mxl111sf_props_mercury, $mul.ref(0, 272)), $mul.ref(32, 1)), 2);
    $M.177 := $store.i8($M.177, $add.ref($add.ref(mxl111sf_props_mercury, $mul.ref(0, 272)), $mul.ref(33, 1)), $sub.i8(0, 127));
    $M.177 := $store.i32($M.177, $add.ref($add.ref(mxl111sf_props_mercury, $mul.ref(0, 272)), $mul.ref(36, 1)), 0);
    $M.177 := $store.ref($M.177, $add.ref($add.ref(mxl111sf_props_mercury, $mul.ref(0, 272)), $mul.ref(40, 1)), $0.ref);
    $M.177 := $store.ref($M.177, $add.ref($add.ref(mxl111sf_props_mercury, $mul.ref(0, 272)), $mul.ref(48, 1)), $0.ref);
    $M.177 := $store.ref($M.177, $add.ref($add.ref(mxl111sf_props_mercury, $mul.ref(0, 272)), $mul.ref(56, 1)), $0.ref);
    $M.177 := $store.ref($M.177, $add.ref($add.ref(mxl111sf_props_mercury, $mul.ref(0, 272)), $mul.ref(64, 1)), mxl111sf_i2c_algo);
    $M.177 := $store.i32($M.177, $add.ref($add.ref(mxl111sf_props_mercury, $mul.ref(0, 272)), $mul.ref(72, 1)), 1);
    $M.177 := $store.ref($M.177, $add.ref($add.ref(mxl111sf_props_mercury, $mul.ref(0, 272)), $mul.ref(80, 1)), $0.ref);
    $M.177 := $store.i8($M.177, $add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mercury, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(0, 1)), 0);
    $M.177 := $store.i8($M.177, $add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mercury, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(1, 1)), 0);
    $M.177 := $store.ref($M.177, $add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mercury, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(8, 1)), $0.ref);
    $M.177 := $store.ref($M.177, $add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mercury, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(16, 1)), $0.ref);
    $M.177 := $store.i8($M.177, $add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mercury, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1)), 2);
    $M.177 := $store.i8($M.177, $add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mercury, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(1, 1)), 5);
    $M.177 := $store.i8($M.177, $add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mercury, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(2, 1)), 6);
    $M.177 := $store.i32($M.177, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mercury, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 24);
    $M.177 := $store.i32($M.177, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mercury, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 3072);
    $M.177 := $store.i32($M.177, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mercury, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 1);
    $M.177 := $store.i8($M.177, $add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mercury, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(0, 1)), 0);
    $M.177 := $store.i8($M.177, $add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mercury, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(1, 1)), 0);
    $M.177 := $store.ref($M.177, $add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mercury, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(8, 1)), $0.ref);
    $M.177 := $store.ref($M.177, $add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mercury, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(16, 1)), $0.ref);
    $M.177 := $store.i8($M.177, $add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mercury, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(24, 1)), $mul.ref(0, 1)), 0);
    $M.177 := $store.i8($M.177, $add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mercury, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(24, 1)), $mul.ref(1, 1)), 0);
    $M.177 := $store.i8($M.177, $add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mercury, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(24, 1)), $mul.ref(2, 1)), 0);
    $M.177 := $store.i32($M.177, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mercury, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(24, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.177 := $store.i32($M.177, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mercury, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(24, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.177 := $store.i32($M.177, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mercury, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(24, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.177 := $store.ref($M.177, $add.ref($add.ref(mxl111sf_props_mercury, $mul.ref(0, 272)), $mul.ref(168, 1)), $0.ref);
    $M.177 := $store.ref($M.177, $add.ref($add.ref(mxl111sf_props_mercury, $mul.ref(0, 272)), $mul.ref(176, 1)), $0.ref);
    $M.177 := $store.ref($M.177, $add.ref($add.ref(mxl111sf_props_mercury, $mul.ref(0, 272)), $mul.ref(184, 1)), $0.ref);
    $M.177 := $store.ref($M.177, $add.ref($add.ref(mxl111sf_props_mercury, $mul.ref(0, 272)), $mul.ref(192, 1)), mxl111sf_frontend_attach_mercury);
    $M.177 := $store.ref($M.177, $add.ref($add.ref(mxl111sf_props_mercury, $mul.ref(0, 272)), $mul.ref(200, 1)), $0.ref);
    $M.177 := $store.ref($M.177, $add.ref($add.ref(mxl111sf_props_mercury, $mul.ref(0, 272)), $mul.ref(208, 1)), mxl111sf_attach_tuner);
    $M.177 := $store.ref($M.177, $add.ref($add.ref(mxl111sf_props_mercury, $mul.ref(0, 272)), $mul.ref(216, 1)), $0.ref);
    $M.177 := $store.ref($M.177, $add.ref($add.ref(mxl111sf_props_mercury, $mul.ref(0, 272)), $mul.ref(224, 1)), $0.ref);
    $M.177 := $store.ref($M.177, $add.ref($add.ref(mxl111sf_props_mercury, $mul.ref(0, 272)), $mul.ref(232, 1)), mxl111sf_streaming_ctrl_mercury);
    $M.177 := $store.ref($M.177, $add.ref($add.ref(mxl111sf_props_mercury, $mul.ref(0, 272)), $mul.ref(240, 1)), mxl111sf_init);
    $M.177 := $store.ref($M.177, $add.ref($add.ref(mxl111sf_props_mercury, $mul.ref(0, 272)), $mul.ref(248, 1)), $0.ref);
    $M.177 := $store.ref($M.177, $add.ref($add.ref(mxl111sf_props_mercury, $mul.ref(0, 272)), $mul.ref(256, 1)), $0.ref);
    $M.177 := $store.ref($M.177, $add.ref($add.ref(mxl111sf_props_mercury, $mul.ref(0, 272)), $mul.ref(264, 1)), mxl111sf_get_stream_config_mercury);
    $M.223 := $store.ref($M.223, mxl111sf_props_dvbt, .str.2);
    $M.223 := $store.ref($M.223, $add.ref($add.ref(mxl111sf_props_dvbt, $mul.ref(0, 272)), $mul.ref(8, 1)), __this_module);
    $M.223 := $store.ref($M.223, $add.ref($add.ref(mxl111sf_props_dvbt, $mul.ref(0, 272)), $mul.ref(16, 1)), adapter_nr);
    $M.223 := $store.i8($M.223, $add.ref($add.ref(mxl111sf_props_dvbt, $mul.ref(0, 272)), $mul.ref(24, 1)), 0);
    $M.223 := $store.i32($M.223, $add.ref($add.ref(mxl111sf_props_dvbt, $mul.ref(0, 272)), $mul.ref(28, 1)), 368);
    $M.223 := $store.i8($M.223, $add.ref($add.ref(mxl111sf_props_dvbt, $mul.ref(0, 272)), $mul.ref(32, 1)), 2);
    $M.223 := $store.i8($M.223, $add.ref($add.ref(mxl111sf_props_dvbt, $mul.ref(0, 272)), $mul.ref(33, 1)), $sub.i8(0, 127));
    $M.223 := $store.i32($M.223, $add.ref($add.ref(mxl111sf_props_dvbt, $mul.ref(0, 272)), $mul.ref(36, 1)), 0);
    $M.223 := $store.ref($M.223, $add.ref($add.ref(mxl111sf_props_dvbt, $mul.ref(0, 272)), $mul.ref(40, 1)), $0.ref);
    $M.223 := $store.ref($M.223, $add.ref($add.ref(mxl111sf_props_dvbt, $mul.ref(0, 272)), $mul.ref(48, 1)), $0.ref);
    $M.223 := $store.ref($M.223, $add.ref($add.ref(mxl111sf_props_dvbt, $mul.ref(0, 272)), $mul.ref(56, 1)), $0.ref);
    $M.223 := $store.ref($M.223, $add.ref($add.ref(mxl111sf_props_dvbt, $mul.ref(0, 272)), $mul.ref(64, 1)), mxl111sf_i2c_algo);
    $M.223 := $store.i32($M.223, $add.ref($add.ref(mxl111sf_props_dvbt, $mul.ref(0, 272)), $mul.ref(72, 1)), 1);
    $M.223 := $store.ref($M.223, $add.ref($add.ref(mxl111sf_props_dvbt, $mul.ref(0, 272)), $mul.ref(80, 1)), $0.ref);
    $M.223 := $store.i8($M.223, $add.ref($add.ref($add.ref($add.ref(mxl111sf_props_dvbt, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(0, 1)), 0);
    $M.223 := $store.i8($M.223, $add.ref($add.ref($add.ref($add.ref(mxl111sf_props_dvbt, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(1, 1)), 0);
    $M.223 := $store.ref($M.223, $add.ref($add.ref($add.ref($add.ref(mxl111sf_props_dvbt, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(8, 1)), $0.ref);
    $M.223 := $store.ref($M.223, $add.ref($add.ref($add.ref($add.ref(mxl111sf_props_dvbt, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(16, 1)), $0.ref);
    $M.223 := $store.i8($M.223, $add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_dvbt, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1)), 2);
    $M.223 := $store.i8($M.223, $add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_dvbt, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(1, 1)), 5);
    $M.223 := $store.i8($M.223, $add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_dvbt, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(2, 1)), 6);
    $M.223 := $store.i32($M.223, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_dvbt, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 24);
    $M.223 := $store.i32($M.223, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_dvbt, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 3072);
    $M.223 := $store.i32($M.223, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_dvbt, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 1);
    $M.223 := $store.i8($M.223, $add.ref($add.ref($add.ref($add.ref(mxl111sf_props_dvbt, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(0, 1)), 0);
    $M.223 := $store.i8($M.223, $add.ref($add.ref($add.ref($add.ref(mxl111sf_props_dvbt, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(1, 1)), 0);
    $M.223 := $store.ref($M.223, $add.ref($add.ref($add.ref($add.ref(mxl111sf_props_dvbt, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(8, 1)), $0.ref);
    $M.223 := $store.ref($M.223, $add.ref($add.ref($add.ref($add.ref(mxl111sf_props_dvbt, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(16, 1)), $0.ref);
    $M.223 := $store.i8($M.223, $add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_dvbt, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(24, 1)), $mul.ref(0, 1)), 0);
    $M.223 := $store.i8($M.223, $add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_dvbt, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(24, 1)), $mul.ref(1, 1)), 0);
    $M.223 := $store.i8($M.223, $add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_dvbt, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(24, 1)), $mul.ref(2, 1)), 0);
    $M.223 := $store.i32($M.223, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_dvbt, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(24, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.223 := $store.i32($M.223, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_dvbt, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(24, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.223 := $store.i32($M.223, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_dvbt, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(24, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.223 := $store.ref($M.223, $add.ref($add.ref(mxl111sf_props_dvbt, $mul.ref(0, 272)), $mul.ref(168, 1)), $0.ref);
    $M.223 := $store.ref($M.223, $add.ref($add.ref(mxl111sf_props_dvbt, $mul.ref(0, 272)), $mul.ref(176, 1)), $0.ref);
    $M.223 := $store.ref($M.223, $add.ref($add.ref(mxl111sf_props_dvbt, $mul.ref(0, 272)), $mul.ref(184, 1)), $0.ref);
    $M.223 := $store.ref($M.223, $add.ref($add.ref(mxl111sf_props_dvbt, $mul.ref(0, 272)), $mul.ref(192, 1)), mxl111sf_frontend_attach_dvbt);
    $M.223 := $store.ref($M.223, $add.ref($add.ref(mxl111sf_props_dvbt, $mul.ref(0, 272)), $mul.ref(200, 1)), $0.ref);
    $M.223 := $store.ref($M.223, $add.ref($add.ref(mxl111sf_props_dvbt, $mul.ref(0, 272)), $mul.ref(208, 1)), mxl111sf_attach_tuner);
    $M.223 := $store.ref($M.223, $add.ref($add.ref(mxl111sf_props_dvbt, $mul.ref(0, 272)), $mul.ref(216, 1)), $0.ref);
    $M.223 := $store.ref($M.223, $add.ref($add.ref(mxl111sf_props_dvbt, $mul.ref(0, 272)), $mul.ref(224, 1)), $0.ref);
    $M.223 := $store.ref($M.223, $add.ref($add.ref(mxl111sf_props_dvbt, $mul.ref(0, 272)), $mul.ref(232, 1)), mxl111sf_ep4_streaming_ctrl);
    $M.223 := $store.ref($M.223, $add.ref($add.ref(mxl111sf_props_dvbt, $mul.ref(0, 272)), $mul.ref(240, 1)), mxl111sf_init);
    $M.223 := $store.ref($M.223, $add.ref($add.ref(mxl111sf_props_dvbt, $mul.ref(0, 272)), $mul.ref(248, 1)), $0.ref);
    $M.223 := $store.ref($M.223, $add.ref($add.ref(mxl111sf_props_dvbt, $mul.ref(0, 272)), $mul.ref(256, 1)), $0.ref);
    $M.223 := $store.ref($M.223, $add.ref($add.ref(mxl111sf_props_dvbt, $mul.ref(0, 272)), $mul.ref(264, 1)), mxl111sf_get_stream_config_dvbt);
    $M.230 := $store.ref($M.230, mxl111sf_props_mh, .str.2);
    $M.230 := $store.ref($M.230, $add.ref($add.ref(mxl111sf_props_mh, $mul.ref(0, 272)), $mul.ref(8, 1)), __this_module);
    $M.230 := $store.ref($M.230, $add.ref($add.ref(mxl111sf_props_mh, $mul.ref(0, 272)), $mul.ref(16, 1)), adapter_nr);
    $M.230 := $store.i8($M.230, $add.ref($add.ref(mxl111sf_props_mh, $mul.ref(0, 272)), $mul.ref(24, 1)), 0);
    $M.230 := $store.i32($M.230, $add.ref($add.ref(mxl111sf_props_mh, $mul.ref(0, 272)), $mul.ref(28, 1)), 368);
    $M.230 := $store.i8($M.230, $add.ref($add.ref(mxl111sf_props_mh, $mul.ref(0, 272)), $mul.ref(32, 1)), 2);
    $M.230 := $store.i8($M.230, $add.ref($add.ref(mxl111sf_props_mh, $mul.ref(0, 272)), $mul.ref(33, 1)), $sub.i8(0, 127));
    $M.230 := $store.i32($M.230, $add.ref($add.ref(mxl111sf_props_mh, $mul.ref(0, 272)), $mul.ref(36, 1)), 0);
    $M.230 := $store.ref($M.230, $add.ref($add.ref(mxl111sf_props_mh, $mul.ref(0, 272)), $mul.ref(40, 1)), $0.ref);
    $M.230 := $store.ref($M.230, $add.ref($add.ref(mxl111sf_props_mh, $mul.ref(0, 272)), $mul.ref(48, 1)), $0.ref);
    $M.230 := $store.ref($M.230, $add.ref($add.ref(mxl111sf_props_mh, $mul.ref(0, 272)), $mul.ref(56, 1)), $0.ref);
    $M.230 := $store.ref($M.230, $add.ref($add.ref(mxl111sf_props_mh, $mul.ref(0, 272)), $mul.ref(64, 1)), mxl111sf_i2c_algo);
    $M.230 := $store.i32($M.230, $add.ref($add.ref(mxl111sf_props_mh, $mul.ref(0, 272)), $mul.ref(72, 1)), 1);
    $M.230 := $store.ref($M.230, $add.ref($add.ref(mxl111sf_props_mh, $mul.ref(0, 272)), $mul.ref(80, 1)), $0.ref);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mh, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mh, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(1, 1)), 0);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mh, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(8, 1)), $0.ref);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mh, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(16, 1)), $0.ref);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mh, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1)), 2);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mh, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(1, 1)), 5);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mh, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(2, 1)), 6);
    $M.230 := $store.i32($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mh, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 24);
    $M.230 := $store.i32($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mh, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 3072);
    $M.230 := $store.i32($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mh, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 1);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mh, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mh, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(1, 1)), 0);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mh, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(8, 1)), $0.ref);
    $M.230 := $store.ref($M.230, $add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mh, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(16, 1)), $0.ref);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mh, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(24, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mh, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(24, 1)), $mul.ref(1, 1)), 0);
    $M.230 := $store.i8($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mh, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(24, 1)), $mul.ref(2, 1)), 0);
    $M.230 := $store.i32($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mh, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(24, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.230 := $store.i32($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mh, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(24, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.230 := $store.i32($M.230, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mh, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(24, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.230 := $store.ref($M.230, $add.ref($add.ref(mxl111sf_props_mh, $mul.ref(0, 272)), $mul.ref(168, 1)), $0.ref);
    $M.230 := $store.ref($M.230, $add.ref($add.ref(mxl111sf_props_mh, $mul.ref(0, 272)), $mul.ref(176, 1)), $0.ref);
    $M.230 := $store.ref($M.230, $add.ref($add.ref(mxl111sf_props_mh, $mul.ref(0, 272)), $mul.ref(184, 1)), $0.ref);
    $M.230 := $store.ref($M.230, $add.ref($add.ref(mxl111sf_props_mh, $mul.ref(0, 272)), $mul.ref(192, 1)), mxl111sf_frontend_attach_mh);
    $M.230 := $store.ref($M.230, $add.ref($add.ref(mxl111sf_props_mh, $mul.ref(0, 272)), $mul.ref(200, 1)), $0.ref);
    $M.230 := $store.ref($M.230, $add.ref($add.ref(mxl111sf_props_mh, $mul.ref(0, 272)), $mul.ref(208, 1)), mxl111sf_attach_tuner);
    $M.230 := $store.ref($M.230, $add.ref($add.ref(mxl111sf_props_mh, $mul.ref(0, 272)), $mul.ref(216, 1)), $0.ref);
    $M.230 := $store.ref($M.230, $add.ref($add.ref(mxl111sf_props_mh, $mul.ref(0, 272)), $mul.ref(224, 1)), $0.ref);
    $M.230 := $store.ref($M.230, $add.ref($add.ref(mxl111sf_props_mh, $mul.ref(0, 272)), $mul.ref(232, 1)), mxl111sf_ep5_streaming_ctrl);
    $M.230 := $store.ref($M.230, $add.ref($add.ref(mxl111sf_props_mh, $mul.ref(0, 272)), $mul.ref(240, 1)), mxl111sf_init);
    $M.230 := $store.ref($M.230, $add.ref($add.ref(mxl111sf_props_mh, $mul.ref(0, 272)), $mul.ref(248, 1)), $0.ref);
    $M.230 := $store.ref($M.230, $add.ref($add.ref(mxl111sf_props_mh, $mul.ref(0, 272)), $mul.ref(256, 1)), $0.ref);
    $M.230 := $store.ref($M.230, $add.ref($add.ref(mxl111sf_props_mh, $mul.ref(0, 272)), $mul.ref(264, 1)), mxl111sf_get_stream_config_mh);
    $M.234 := $store.ref($M.234, mxl111sf_props_atsc, .str.2);
    $M.234 := $store.ref($M.234, $add.ref($add.ref(mxl111sf_props_atsc, $mul.ref(0, 272)), $mul.ref(8, 1)), __this_module);
    $M.234 := $store.ref($M.234, $add.ref($add.ref(mxl111sf_props_atsc, $mul.ref(0, 272)), $mul.ref(16, 1)), adapter_nr);
    $M.234 := $store.i8($M.234, $add.ref($add.ref(mxl111sf_props_atsc, $mul.ref(0, 272)), $mul.ref(24, 1)), 0);
    $M.234 := $store.i32($M.234, $add.ref($add.ref(mxl111sf_props_atsc, $mul.ref(0, 272)), $mul.ref(28, 1)), 368);
    $M.234 := $store.i8($M.234, $add.ref($add.ref(mxl111sf_props_atsc, $mul.ref(0, 272)), $mul.ref(32, 1)), 2);
    $M.234 := $store.i8($M.234, $add.ref($add.ref(mxl111sf_props_atsc, $mul.ref(0, 272)), $mul.ref(33, 1)), $sub.i8(0, 127));
    $M.234 := $store.i32($M.234, $add.ref($add.ref(mxl111sf_props_atsc, $mul.ref(0, 272)), $mul.ref(36, 1)), 0);
    $M.234 := $store.ref($M.234, $add.ref($add.ref(mxl111sf_props_atsc, $mul.ref(0, 272)), $mul.ref(40, 1)), $0.ref);
    $M.234 := $store.ref($M.234, $add.ref($add.ref(mxl111sf_props_atsc, $mul.ref(0, 272)), $mul.ref(48, 1)), $0.ref);
    $M.234 := $store.ref($M.234, $add.ref($add.ref(mxl111sf_props_atsc, $mul.ref(0, 272)), $mul.ref(56, 1)), $0.ref);
    $M.234 := $store.ref($M.234, $add.ref($add.ref(mxl111sf_props_atsc, $mul.ref(0, 272)), $mul.ref(64, 1)), mxl111sf_i2c_algo);
    $M.234 := $store.i32($M.234, $add.ref($add.ref(mxl111sf_props_atsc, $mul.ref(0, 272)), $mul.ref(72, 1)), 1);
    $M.234 := $store.ref($M.234, $add.ref($add.ref(mxl111sf_props_atsc, $mul.ref(0, 272)), $mul.ref(80, 1)), $0.ref);
    $M.234 := $store.i8($M.234, $add.ref($add.ref($add.ref($add.ref(mxl111sf_props_atsc, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(0, 1)), 0);
    $M.234 := $store.i8($M.234, $add.ref($add.ref($add.ref($add.ref(mxl111sf_props_atsc, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(1, 1)), 0);
    $M.234 := $store.ref($M.234, $add.ref($add.ref($add.ref($add.ref(mxl111sf_props_atsc, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(8, 1)), $0.ref);
    $M.234 := $store.ref($M.234, $add.ref($add.ref($add.ref($add.ref(mxl111sf_props_atsc, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(16, 1)), $0.ref);
    $M.234 := $store.i8($M.234, $add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_atsc, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1)), 2);
    $M.234 := $store.i8($M.234, $add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_atsc, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(1, 1)), 5);
    $M.234 := $store.i8($M.234, $add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_atsc, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(2, 1)), 6);
    $M.234 := $store.i32($M.234, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_atsc, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 24);
    $M.234 := $store.i32($M.234, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_atsc, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 3072);
    $M.234 := $store.i32($M.234, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_atsc, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 1);
    $M.234 := $store.i8($M.234, $add.ref($add.ref($add.ref($add.ref(mxl111sf_props_atsc, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(0, 1)), 0);
    $M.234 := $store.i8($M.234, $add.ref($add.ref($add.ref($add.ref(mxl111sf_props_atsc, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(1, 1)), 0);
    $M.234 := $store.ref($M.234, $add.ref($add.ref($add.ref($add.ref(mxl111sf_props_atsc, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(8, 1)), $0.ref);
    $M.234 := $store.ref($M.234, $add.ref($add.ref($add.ref($add.ref(mxl111sf_props_atsc, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(16, 1)), $0.ref);
    $M.234 := $store.i8($M.234, $add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_atsc, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(24, 1)), $mul.ref(0, 1)), 0);
    $M.234 := $store.i8($M.234, $add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_atsc, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(24, 1)), $mul.ref(1, 1)), 0);
    $M.234 := $store.i8($M.234, $add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_atsc, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(24, 1)), $mul.ref(2, 1)), 0);
    $M.234 := $store.i32($M.234, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_atsc, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(24, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.234 := $store.i32($M.234, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_atsc, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(24, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.234 := $store.i32($M.234, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_atsc, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(24, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.234 := $store.ref($M.234, $add.ref($add.ref(mxl111sf_props_atsc, $mul.ref(0, 272)), $mul.ref(168, 1)), $0.ref);
    $M.234 := $store.ref($M.234, $add.ref($add.ref(mxl111sf_props_atsc, $mul.ref(0, 272)), $mul.ref(176, 1)), $0.ref);
    $M.234 := $store.ref($M.234, $add.ref($add.ref(mxl111sf_props_atsc, $mul.ref(0, 272)), $mul.ref(184, 1)), $0.ref);
    $M.234 := $store.ref($M.234, $add.ref($add.ref(mxl111sf_props_atsc, $mul.ref(0, 272)), $mul.ref(192, 1)), mxl111sf_frontend_attach_atsc);
    $M.234 := $store.ref($M.234, $add.ref($add.ref(mxl111sf_props_atsc, $mul.ref(0, 272)), $mul.ref(200, 1)), $0.ref);
    $M.234 := $store.ref($M.234, $add.ref($add.ref(mxl111sf_props_atsc, $mul.ref(0, 272)), $mul.ref(208, 1)), mxl111sf_attach_tuner);
    $M.234 := $store.ref($M.234, $add.ref($add.ref(mxl111sf_props_atsc, $mul.ref(0, 272)), $mul.ref(216, 1)), $0.ref);
    $M.234 := $store.ref($M.234, $add.ref($add.ref(mxl111sf_props_atsc, $mul.ref(0, 272)), $mul.ref(224, 1)), $0.ref);
    $M.234 := $store.ref($M.234, $add.ref($add.ref(mxl111sf_props_atsc, $mul.ref(0, 272)), $mul.ref(232, 1)), mxl111sf_ep6_streaming_ctrl);
    $M.234 := $store.ref($M.234, $add.ref($add.ref(mxl111sf_props_atsc, $mul.ref(0, 272)), $mul.ref(240, 1)), mxl111sf_init);
    $M.234 := $store.ref($M.234, $add.ref($add.ref(mxl111sf_props_atsc, $mul.ref(0, 272)), $mul.ref(248, 1)), $0.ref);
    $M.234 := $store.ref($M.234, $add.ref($add.ref(mxl111sf_props_atsc, $mul.ref(0, 272)), $mul.ref(256, 1)), $0.ref);
    $M.234 := $store.ref($M.234, $add.ref($add.ref(mxl111sf_props_atsc, $mul.ref(0, 272)), $mul.ref(264, 1)), mxl111sf_get_stream_config_atsc);
    $M.7 := $store.ref($M.7, mxl111sf_i2c_algo, mxl111sf_i2c_xfer);
    $M.7 := $store.ref($M.7, $add.ref($add.ref(mxl111sf_i2c_algo, $mul.ref(0, 40)), $mul.ref(8, 1)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref(mxl111sf_i2c_algo, $mul.ref(0, 40)), $mul.ref(16, 1)), mxl111sf_i2c_func);
    $M.7 := $store.ref($M.7, $add.ref($add.ref(mxl111sf_i2c_algo, $mul.ref(0, 40)), $mul.ref(24, 1)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref(mxl111sf_i2c_algo, $mul.ref(0, 40)), $mul.ref(32, 1)), $0.ref);
    $M.7 := $store.i16($M.7, adapter_nr, $sub.i16(0, 1));
    $M.7 := $store.i16($M.7, $add.ref($add.ref(adapter_nr, $mul.ref(0, 16)), $mul.ref(1, 2)), $sub.i16(0, 1));
    $M.7 := $store.i16($M.7, $add.ref($add.ref(adapter_nr, $mul.ref(0, 16)), $mul.ref(2, 2)), $sub.i16(0, 1));
    $M.7 := $store.i16($M.7, $add.ref($add.ref(adapter_nr, $mul.ref(0, 16)), $mul.ref(3, 2)), $sub.i16(0, 1));
    $M.7 := $store.i16($M.7, $add.ref($add.ref(adapter_nr, $mul.ref(0, 16)), $mul.ref(4, 2)), $sub.i16(0, 1));
    $M.7 := $store.i16($M.7, $add.ref($add.ref(adapter_nr, $mul.ref(0, 16)), $mul.ref(5, 2)), $sub.i16(0, 1));
    $M.7 := $store.i16($M.7, $add.ref($add.ref(adapter_nr, $mul.ref(0, 16)), $mul.ref(6, 2)), $sub.i16(0, 1));
    $M.7 := $store.i16($M.7, $add.ref($add.ref(adapter_nr, $mul.ref(0, 16)), $mul.ref(7, 2)), $sub.i16(0, 1));
    $M.238 := $store.ref($M.238, mxl111sf_props_atsc_mh, .str.2);
    $M.238 := $store.ref($M.238, $add.ref($add.ref(mxl111sf_props_atsc_mh, $mul.ref(0, 272)), $mul.ref(8, 1)), __this_module);
    $M.238 := $store.ref($M.238, $add.ref($add.ref(mxl111sf_props_atsc_mh, $mul.ref(0, 272)), $mul.ref(16, 1)), adapter_nr);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(mxl111sf_props_atsc_mh, $mul.ref(0, 272)), $mul.ref(24, 1)), 0);
    $M.238 := $store.i32($M.238, $add.ref($add.ref(mxl111sf_props_atsc_mh, $mul.ref(0, 272)), $mul.ref(28, 1)), 368);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(mxl111sf_props_atsc_mh, $mul.ref(0, 272)), $mul.ref(32, 1)), 2);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(mxl111sf_props_atsc_mh, $mul.ref(0, 272)), $mul.ref(33, 1)), $sub.i8(0, 127));
    $M.238 := $store.i32($M.238, $add.ref($add.ref(mxl111sf_props_atsc_mh, $mul.ref(0, 272)), $mul.ref(36, 1)), 0);
    $M.238 := $store.ref($M.238, $add.ref($add.ref(mxl111sf_props_atsc_mh, $mul.ref(0, 272)), $mul.ref(40, 1)), $0.ref);
    $M.238 := $store.ref($M.238, $add.ref($add.ref(mxl111sf_props_atsc_mh, $mul.ref(0, 272)), $mul.ref(48, 1)), $0.ref);
    $M.238 := $store.ref($M.238, $add.ref($add.ref(mxl111sf_props_atsc_mh, $mul.ref(0, 272)), $mul.ref(56, 1)), $0.ref);
    $M.238 := $store.ref($M.238, $add.ref($add.ref(mxl111sf_props_atsc_mh, $mul.ref(0, 272)), $mul.ref(64, 1)), mxl111sf_i2c_algo);
    $M.238 := $store.i32($M.238, $add.ref($add.ref(mxl111sf_props_atsc_mh, $mul.ref(0, 272)), $mul.ref(72, 1)), 1);
    $M.238 := $store.ref($M.238, $add.ref($add.ref(mxl111sf_props_atsc_mh, $mul.ref(0, 272)), $mul.ref(80, 1)), $0.ref);
    $M.238 := $store.i8($M.238, $add.ref($add.ref($add.ref($add.ref(mxl111sf_props_atsc_mh, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(0, 1)), 0);
    $M.238 := $store.i8($M.238, $add.ref($add.ref($add.ref($add.ref(mxl111sf_props_atsc_mh, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(1, 1)), 0);
    $M.238 := $store.ref($M.238, $add.ref($add.ref($add.ref($add.ref(mxl111sf_props_atsc_mh, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(8, 1)), $0.ref);
    $M.238 := $store.ref($M.238, $add.ref($add.ref($add.ref($add.ref(mxl111sf_props_atsc_mh, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(16, 1)), $0.ref);
    $M.238 := $store.i8($M.238, $add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_atsc_mh, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1)), 2);
    $M.238 := $store.i8($M.238, $add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_atsc_mh, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(1, 1)), 5);
    $M.238 := $store.i8($M.238, $add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_atsc_mh, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(2, 1)), 6);
    $M.238 := $store.i32($M.238, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_atsc_mh, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 24);
    $M.238 := $store.i32($M.238, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_atsc_mh, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 3072);
    $M.238 := $store.i32($M.238, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_atsc_mh, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 1);
    $M.238 := $store.i8($M.238, $add.ref($add.ref($add.ref($add.ref(mxl111sf_props_atsc_mh, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(0, 1)), 0);
    $M.238 := $store.i8($M.238, $add.ref($add.ref($add.ref($add.ref(mxl111sf_props_atsc_mh, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(1, 1)), 0);
    $M.238 := $store.ref($M.238, $add.ref($add.ref($add.ref($add.ref(mxl111sf_props_atsc_mh, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(8, 1)), $0.ref);
    $M.238 := $store.ref($M.238, $add.ref($add.ref($add.ref($add.ref(mxl111sf_props_atsc_mh, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(16, 1)), $0.ref);
    $M.238 := $store.i8($M.238, $add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_atsc_mh, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(24, 1)), $mul.ref(0, 1)), 0);
    $M.238 := $store.i8($M.238, $add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_atsc_mh, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(24, 1)), $mul.ref(1, 1)), 0);
    $M.238 := $store.i8($M.238, $add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_atsc_mh, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(24, 1)), $mul.ref(2, 1)), 0);
    $M.238 := $store.i32($M.238, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_atsc_mh, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(24, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.238 := $store.i32($M.238, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_atsc_mh, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(24, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.238 := $store.i32($M.238, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_atsc_mh, $mul.ref(0, 272)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(24, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.238 := $store.ref($M.238, $add.ref($add.ref(mxl111sf_props_atsc_mh, $mul.ref(0, 272)), $mul.ref(168, 1)), $0.ref);
    $M.238 := $store.ref($M.238, $add.ref($add.ref(mxl111sf_props_atsc_mh, $mul.ref(0, 272)), $mul.ref(176, 1)), $0.ref);
    $M.238 := $store.ref($M.238, $add.ref($add.ref(mxl111sf_props_atsc_mh, $mul.ref(0, 272)), $mul.ref(184, 1)), $0.ref);
    $M.238 := $store.ref($M.238, $add.ref($add.ref(mxl111sf_props_atsc_mh, $mul.ref(0, 272)), $mul.ref(192, 1)), mxl111sf_frontend_attach_atsc_mh);
    $M.238 := $store.ref($M.238, $add.ref($add.ref(mxl111sf_props_atsc_mh, $mul.ref(0, 272)), $mul.ref(200, 1)), $0.ref);
    $M.238 := $store.ref($M.238, $add.ref($add.ref(mxl111sf_props_atsc_mh, $mul.ref(0, 272)), $mul.ref(208, 1)), mxl111sf_attach_tuner);
    $M.238 := $store.ref($M.238, $add.ref($add.ref(mxl111sf_props_atsc_mh, $mul.ref(0, 272)), $mul.ref(216, 1)), $0.ref);
    $M.238 := $store.ref($M.238, $add.ref($add.ref(mxl111sf_props_atsc_mh, $mul.ref(0, 272)), $mul.ref(224, 1)), $0.ref);
    $M.238 := $store.ref($M.238, $add.ref($add.ref(mxl111sf_props_atsc_mh, $mul.ref(0, 272)), $mul.ref(232, 1)), mxl111sf_streaming_ctrl_atsc_mh);
    $M.238 := $store.ref($M.238, $add.ref($add.ref(mxl111sf_props_atsc_mh, $mul.ref(0, 272)), $mul.ref(240, 1)), mxl111sf_init);
    $M.238 := $store.ref($M.238, $add.ref($add.ref(mxl111sf_props_atsc_mh, $mul.ref(0, 272)), $mul.ref(248, 1)), $0.ref);
    $M.238 := $store.ref($M.238, $add.ref($add.ref(mxl111sf_props_atsc_mh, $mul.ref(0, 272)), $mul.ref(256, 1)), $0.ref);
    $M.238 := $store.ref($M.238, $add.ref($add.ref(mxl111sf_props_atsc_mh, $mul.ref(0, 272)), $mul.ref(264, 1)), mxl111sf_get_stream_config_atsc_mh);
    $M.7 := $store.i16($M.7, mxl111sf_id_table, 3);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(0, 32)), $mul.ref(2, 1)), 8256);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(0, 32)), $mul.ref(4, 1)), $sub.i16(0, 14848));
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(0, 32)), $mul.ref(6, 1)), 0);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(0, 32)), $mul.ref(8, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(0, 32)), $mul.ref(10, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(0, 32)), $mul.ref(11, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(0, 32)), $mul.ref(12, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(0, 32)), $mul.ref(13, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(0, 32)), $mul.ref(14, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(0, 32)), $mul.ref(15, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.7 := $store.i64($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(0, 32)), $mul.ref(24, 1)), $p2i.ref.i64(__constr_expr_0));
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(1, 32)), $mul.ref(0, 1)), 3);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(1, 32)), $mul.ref(2, 1)), 8256);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(1, 32)), $mul.ref(4, 1)), $sub.i16(0, 14847));
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(1, 32)), $mul.ref(6, 1)), 0);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(1, 32)), $mul.ref(8, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(1, 32)), $mul.ref(10, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(1, 32)), $mul.ref(11, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(1, 32)), $mul.ref(12, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(1, 32)), $mul.ref(13, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(1, 32)), $mul.ref(14, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(1, 32)), $mul.ref(15, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.7 := $store.i64($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(1, 32)), $mul.ref(24, 1)), $p2i.ref.i64(__constr_expr_1));
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(2, 32)), $mul.ref(0, 1)), 3);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(2, 32)), $mul.ref(2, 1)), 8256);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(2, 32)), $mul.ref(4, 1)), $sub.i16(0, 14846));
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(2, 32)), $mul.ref(6, 1)), 0);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(2, 32)), $mul.ref(8, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(2, 32)), $mul.ref(10, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(2, 32)), $mul.ref(11, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(2, 32)), $mul.ref(12, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(2, 32)), $mul.ref(13, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(2, 32)), $mul.ref(14, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(2, 32)), $mul.ref(15, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(2, 32)), $mul.ref(16, 1)), 0);
    $M.7 := $store.i64($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(2, 32)), $mul.ref(24, 1)), $p2i.ref.i64(__constr_expr_2));
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(3, 32)), $mul.ref(0, 1)), 3);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(3, 32)), $mul.ref(2, 1)), 8256);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(3, 32)), $mul.ref(4, 1)), $sub.i16(0, 14845));
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(3, 32)), $mul.ref(6, 1)), 0);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(3, 32)), $mul.ref(8, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(3, 32)), $mul.ref(10, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(3, 32)), $mul.ref(11, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(3, 32)), $mul.ref(12, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(3, 32)), $mul.ref(13, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(3, 32)), $mul.ref(14, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(3, 32)), $mul.ref(15, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(3, 32)), $mul.ref(16, 1)), 0);
    $M.7 := $store.i64($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(3, 32)), $mul.ref(24, 1)), $p2i.ref.i64(__constr_expr_3));
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(4, 32)), $mul.ref(0, 1)), 3);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(4, 32)), $mul.ref(2, 1)), 8256);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(4, 32)), $mul.ref(4, 1)), $sub.i16(0, 14844));
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(4, 32)), $mul.ref(6, 1)), 0);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(4, 32)), $mul.ref(8, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(4, 32)), $mul.ref(10, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(4, 32)), $mul.ref(11, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(4, 32)), $mul.ref(12, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(4, 32)), $mul.ref(13, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(4, 32)), $mul.ref(14, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(4, 32)), $mul.ref(15, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(4, 32)), $mul.ref(16, 1)), 0);
    $M.7 := $store.i64($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(4, 32)), $mul.ref(24, 1)), $p2i.ref.i64(__constr_expr_4));
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(5, 32)), $mul.ref(0, 1)), 3);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(5, 32)), $mul.ref(2, 1)), 8256);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(5, 32)), $mul.ref(4, 1)), $sub.i16(0, 14839));
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(5, 32)), $mul.ref(6, 1)), 0);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(5, 32)), $mul.ref(8, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(5, 32)), $mul.ref(10, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(5, 32)), $mul.ref(11, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(5, 32)), $mul.ref(12, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(5, 32)), $mul.ref(13, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(5, 32)), $mul.ref(14, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(5, 32)), $mul.ref(15, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(5, 32)), $mul.ref(16, 1)), 0);
    $M.7 := $store.i64($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(5, 32)), $mul.ref(24, 1)), $p2i.ref.i64(__constr_expr_5));
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(6, 32)), $mul.ref(0, 1)), 3);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(6, 32)), $mul.ref(2, 1)), 8256);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(6, 32)), $mul.ref(4, 1)), $sub.i16(0, 14838));
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(6, 32)), $mul.ref(6, 1)), 0);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(6, 32)), $mul.ref(8, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(6, 32)), $mul.ref(10, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(6, 32)), $mul.ref(11, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(6, 32)), $mul.ref(12, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(6, 32)), $mul.ref(13, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(6, 32)), $mul.ref(14, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(6, 32)), $mul.ref(15, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(6, 32)), $mul.ref(16, 1)), 0);
    $M.7 := $store.i64($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(6, 32)), $mul.ref(24, 1)), $p2i.ref.i64(__constr_expr_6));
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(7, 32)), $mul.ref(0, 1)), 3);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(7, 32)), $mul.ref(2, 1)), 8256);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(7, 32)), $mul.ref(4, 1)), $sub.i16(0, 14837));
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(7, 32)), $mul.ref(6, 1)), 0);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(7, 32)), $mul.ref(8, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(7, 32)), $mul.ref(10, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(7, 32)), $mul.ref(11, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(7, 32)), $mul.ref(12, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(7, 32)), $mul.ref(13, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(7, 32)), $mul.ref(14, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(7, 32)), $mul.ref(15, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(7, 32)), $mul.ref(16, 1)), 0);
    $M.7 := $store.i64($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(7, 32)), $mul.ref(24, 1)), $p2i.ref.i64(__constr_expr_7));
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(8, 32)), $mul.ref(0, 1)), 3);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(8, 32)), $mul.ref(2, 1)), 8256);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(8, 32)), $mul.ref(4, 1)), $sub.i16(0, 14836));
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(8, 32)), $mul.ref(6, 1)), 0);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(8, 32)), $mul.ref(8, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(8, 32)), $mul.ref(10, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(8, 32)), $mul.ref(11, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(8, 32)), $mul.ref(12, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(8, 32)), $mul.ref(13, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(8, 32)), $mul.ref(14, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(8, 32)), $mul.ref(15, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(8, 32)), $mul.ref(16, 1)), 0);
    $M.7 := $store.i64($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(8, 32)), $mul.ref(24, 1)), $p2i.ref.i64(__constr_expr_8));
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(9, 32)), $mul.ref(0, 1)), 3);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(9, 32)), $mul.ref(2, 1)), 8256);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(9, 32)), $mul.ref(4, 1)), $sub.i16(0, 14765));
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(9, 32)), $mul.ref(6, 1)), 0);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(9, 32)), $mul.ref(8, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(9, 32)), $mul.ref(10, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(9, 32)), $mul.ref(11, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(9, 32)), $mul.ref(12, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(9, 32)), $mul.ref(13, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(9, 32)), $mul.ref(14, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(9, 32)), $mul.ref(15, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(9, 32)), $mul.ref(16, 1)), 0);
    $M.7 := $store.i64($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(9, 32)), $mul.ref(24, 1)), $p2i.ref.i64(__constr_expr_9));
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(10, 32)), $mul.ref(0, 1)), 3);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(10, 32)), $mul.ref(2, 1)), 8256);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(10, 32)), $mul.ref(4, 1)), $sub.i16(0, 14757));
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(10, 32)), $mul.ref(6, 1)), 0);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(10, 32)), $mul.ref(8, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(10, 32)), $mul.ref(10, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(10, 32)), $mul.ref(11, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(10, 32)), $mul.ref(12, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(10, 32)), $mul.ref(13, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(10, 32)), $mul.ref(14, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(10, 32)), $mul.ref(15, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(10, 32)), $mul.ref(16, 1)), 0);
    $M.7 := $store.i64($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(10, 32)), $mul.ref(24, 1)), $p2i.ref.i64(__constr_expr_10));
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(11, 32)), $mul.ref(0, 1)), 3);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(11, 32)), $mul.ref(2, 1)), 8256);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(11, 32)), $mul.ref(4, 1)), $sub.i16(0, 18688));
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(11, 32)), $mul.ref(6, 1)), 0);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(11, 32)), $mul.ref(8, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(11, 32)), $mul.ref(10, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(11, 32)), $mul.ref(11, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(11, 32)), $mul.ref(12, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(11, 32)), $mul.ref(13, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(11, 32)), $mul.ref(14, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(11, 32)), $mul.ref(15, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(11, 32)), $mul.ref(16, 1)), 0);
    $M.7 := $store.i64($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(11, 32)), $mul.ref(24, 1)), $p2i.ref.i64(__constr_expr_11));
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(12, 32)), $mul.ref(0, 1)), 3);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(12, 32)), $mul.ref(2, 1)), 8256);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(12, 32)), $mul.ref(4, 1)), $sub.i16(0, 18687));
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(12, 32)), $mul.ref(6, 1)), 0);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(12, 32)), $mul.ref(8, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(12, 32)), $mul.ref(10, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(12, 32)), $mul.ref(11, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(12, 32)), $mul.ref(12, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(12, 32)), $mul.ref(13, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(12, 32)), $mul.ref(14, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(12, 32)), $mul.ref(15, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(12, 32)), $mul.ref(16, 1)), 0);
    $M.7 := $store.i64($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(12, 32)), $mul.ref(24, 1)), $p2i.ref.i64(__constr_expr_12));
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(13, 32)), $mul.ref(0, 1)), 3);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(13, 32)), $mul.ref(2, 1)), 8256);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(13, 32)), $mul.ref(4, 1)), $sub.i16(0, 18686));
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(13, 32)), $mul.ref(6, 1)), 0);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(13, 32)), $mul.ref(8, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(13, 32)), $mul.ref(10, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(13, 32)), $mul.ref(11, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(13, 32)), $mul.ref(12, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(13, 32)), $mul.ref(13, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(13, 32)), $mul.ref(14, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(13, 32)), $mul.ref(15, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(13, 32)), $mul.ref(16, 1)), 0);
    $M.7 := $store.i64($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(13, 32)), $mul.ref(24, 1)), $p2i.ref.i64(__constr_expr_13));
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(14, 32)), $mul.ref(0, 1)), 3);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(14, 32)), $mul.ref(2, 1)), 8256);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(14, 32)), $mul.ref(4, 1)), $sub.i16(0, 18685));
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(14, 32)), $mul.ref(6, 1)), 0);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(14, 32)), $mul.ref(8, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(14, 32)), $mul.ref(10, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(14, 32)), $mul.ref(11, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(14, 32)), $mul.ref(12, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(14, 32)), $mul.ref(13, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(14, 32)), $mul.ref(14, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(14, 32)), $mul.ref(15, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(14, 32)), $mul.ref(16, 1)), 0);
    $M.7 := $store.i64($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(14, 32)), $mul.ref(24, 1)), $p2i.ref.i64(__constr_expr_14));
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(15, 32)), $mul.ref(0, 1)), 3);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(15, 32)), $mul.ref(2, 1)), 8256);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(15, 32)), $mul.ref(4, 1)), $sub.i16(0, 18684));
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(15, 32)), $mul.ref(6, 1)), 0);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(15, 32)), $mul.ref(8, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(15, 32)), $mul.ref(10, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(15, 32)), $mul.ref(11, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(15, 32)), $mul.ref(12, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(15, 32)), $mul.ref(13, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(15, 32)), $mul.ref(14, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(15, 32)), $mul.ref(15, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(15, 32)), $mul.ref(16, 1)), 0);
    $M.7 := $store.i64($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(15, 32)), $mul.ref(24, 1)), $p2i.ref.i64(__constr_expr_15));
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(16, 32)), $mul.ref(0, 1)), 3);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(16, 32)), $mul.ref(2, 1)), 8256);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(16, 32)), $mul.ref(4, 1)), $sub.i16(0, 18605));
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(16, 32)), $mul.ref(6, 1)), 0);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(16, 32)), $mul.ref(8, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(16, 32)), $mul.ref(10, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(16, 32)), $mul.ref(11, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(16, 32)), $mul.ref(12, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(16, 32)), $mul.ref(13, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(16, 32)), $mul.ref(14, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(16, 32)), $mul.ref(15, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(16, 32)), $mul.ref(16, 1)), 0);
    $M.7 := $store.i64($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(16, 32)), $mul.ref(24, 1)), $p2i.ref.i64(__constr_expr_16));
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(17, 32)), $mul.ref(0, 1)), 3);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(17, 32)), $mul.ref(2, 1)), 8256);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(17, 32)), $mul.ref(4, 1)), $sub.i16(0, 18589));
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(17, 32)), $mul.ref(6, 1)), 0);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(17, 32)), $mul.ref(8, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(17, 32)), $mul.ref(10, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(17, 32)), $mul.ref(11, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(17, 32)), $mul.ref(12, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(17, 32)), $mul.ref(13, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(17, 32)), $mul.ref(14, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(17, 32)), $mul.ref(15, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(17, 32)), $mul.ref(16, 1)), 0);
    $M.7 := $store.i64($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(17, 32)), $mul.ref(24, 1)), $p2i.ref.i64(__constr_expr_17));
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(18, 32)), $mul.ref(0, 1)), 3);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(18, 32)), $mul.ref(2, 1)), 8256);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(18, 32)), $mul.ref(4, 1)), $sub.i16(0, 18588));
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(18, 32)), $mul.ref(6, 1)), 0);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(18, 32)), $mul.ref(8, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(18, 32)), $mul.ref(10, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(18, 32)), $mul.ref(11, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(18, 32)), $mul.ref(12, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(18, 32)), $mul.ref(13, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(18, 32)), $mul.ref(14, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(18, 32)), $mul.ref(15, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(18, 32)), $mul.ref(16, 1)), 0);
    $M.7 := $store.i64($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(18, 32)), $mul.ref(24, 1)), $p2i.ref.i64(__constr_expr_18));
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(19, 32)), $mul.ref(0, 1)), 3);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(19, 32)), $mul.ref(2, 1)), 8256);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(19, 32)), $mul.ref(4, 1)), $sub.i16(0, 10157));
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(19, 32)), $mul.ref(6, 1)), 0);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(19, 32)), $mul.ref(8, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(19, 32)), $mul.ref(10, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(19, 32)), $mul.ref(11, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(19, 32)), $mul.ref(12, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(19, 32)), $mul.ref(13, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(19, 32)), $mul.ref(14, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(19, 32)), $mul.ref(15, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(19, 32)), $mul.ref(16, 1)), 0);
    $M.7 := $store.i64($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(19, 32)), $mul.ref(24, 1)), $p2i.ref.i64(__constr_expr_19));
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(20, 32)), $mul.ref(0, 1)), 3);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(20, 32)), $mul.ref(2, 1)), 8256);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(20, 32)), $mul.ref(4, 1)), $sub.i16(0, 10156));
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(20, 32)), $mul.ref(6, 1)), 0);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(20, 32)), $mul.ref(8, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(20, 32)), $mul.ref(10, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(20, 32)), $mul.ref(11, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(20, 32)), $mul.ref(12, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(20, 32)), $mul.ref(13, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(20, 32)), $mul.ref(14, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(20, 32)), $mul.ref(15, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(20, 32)), $mul.ref(16, 1)), 0);
    $M.7 := $store.i64($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(20, 32)), $mul.ref(24, 1)), $p2i.ref.i64(__constr_expr_20));
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(21, 32)), $mul.ref(0, 1)), 3);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(21, 32)), $mul.ref(2, 1)), 8256);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(21, 32)), $mul.ref(4, 1)), $sub.i16(0, 10141));
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(21, 32)), $mul.ref(6, 1)), 0);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(21, 32)), $mul.ref(8, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(21, 32)), $mul.ref(10, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(21, 32)), $mul.ref(11, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(21, 32)), $mul.ref(12, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(21, 32)), $mul.ref(13, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(21, 32)), $mul.ref(14, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(21, 32)), $mul.ref(15, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(21, 32)), $mul.ref(16, 1)), 0);
    $M.7 := $store.i64($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(21, 32)), $mul.ref(24, 1)), $p2i.ref.i64(__constr_expr_21));
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(22, 32)), $mul.ref(0, 1)), 3);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(22, 32)), $mul.ref(2, 1)), 8256);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(22, 32)), $mul.ref(4, 1)), $sub.i16(0, 10140));
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(22, 32)), $mul.ref(6, 1)), 0);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(22, 32)), $mul.ref(8, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(22, 32)), $mul.ref(10, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(22, 32)), $mul.ref(11, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(22, 32)), $mul.ref(12, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(22, 32)), $mul.ref(13, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(22, 32)), $mul.ref(14, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(22, 32)), $mul.ref(15, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(22, 32)), $mul.ref(16, 1)), 0);
    $M.7 := $store.i64($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(22, 32)), $mul.ref(24, 1)), $p2i.ref.i64(__constr_expr_22));
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(23, 32)), $mul.ref(0, 1)), 3);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(23, 32)), $mul.ref(2, 1)), 8256);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(23, 32)), $mul.ref(4, 1)), $sub.i16(0, 10029));
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(23, 32)), $mul.ref(6, 1)), 0);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(23, 32)), $mul.ref(8, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(23, 32)), $mul.ref(10, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(23, 32)), $mul.ref(11, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(23, 32)), $mul.ref(12, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(23, 32)), $mul.ref(13, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(23, 32)), $mul.ref(14, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(23, 32)), $mul.ref(15, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(23, 32)), $mul.ref(16, 1)), 0);
    $M.7 := $store.i64($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(23, 32)), $mul.ref(24, 1)), $p2i.ref.i64(__constr_expr_23));
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(24, 32)), $mul.ref(0, 1)), 3);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(24, 32)), $mul.ref(2, 1)), 8256);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(24, 32)), $mul.ref(4, 1)), $sub.i16(0, 10028));
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(24, 32)), $mul.ref(6, 1)), 0);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(24, 32)), $mul.ref(8, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(24, 32)), $mul.ref(10, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(24, 32)), $mul.ref(11, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(24, 32)), $mul.ref(12, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(24, 32)), $mul.ref(13, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(24, 32)), $mul.ref(14, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(24, 32)), $mul.ref(15, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(24, 32)), $mul.ref(16, 1)), 0);
    $M.7 := $store.i64($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(24, 32)), $mul.ref(24, 1)), $p2i.ref.i64(__constr_expr_24));
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(25, 32)), $mul.ref(0, 1)), 3);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(25, 32)), $mul.ref(2, 1)), 8256);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(25, 32)), $mul.ref(4, 1)), $sub.i16(0, 10013));
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(25, 32)), $mul.ref(6, 1)), 0);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(25, 32)), $mul.ref(8, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(25, 32)), $mul.ref(10, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(25, 32)), $mul.ref(11, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(25, 32)), $mul.ref(12, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(25, 32)), $mul.ref(13, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(25, 32)), $mul.ref(14, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(25, 32)), $mul.ref(15, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(25, 32)), $mul.ref(16, 1)), 0);
    $M.7 := $store.i64($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(25, 32)), $mul.ref(24, 1)), $p2i.ref.i64(__constr_expr_25));
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(26, 32)), $mul.ref(0, 1)), 3);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(26, 32)), $mul.ref(2, 1)), 8256);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(26, 32)), $mul.ref(4, 1)), $sub.i16(0, 10012));
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(26, 32)), $mul.ref(6, 1)), 0);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(26, 32)), $mul.ref(8, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(26, 32)), $mul.ref(10, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(26, 32)), $mul.ref(11, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(26, 32)), $mul.ref(12, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(26, 32)), $mul.ref(13, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(26, 32)), $mul.ref(14, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(26, 32)), $mul.ref(15, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(26, 32)), $mul.ref(16, 1)), 0);
    $M.7 := $store.i64($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(26, 32)), $mul.ref(24, 1)), $p2i.ref.i64(__constr_expr_26));
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(27, 32)), $mul.ref(0, 1)), 3);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(27, 32)), $mul.ref(2, 1)), 8256);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(27, 32)), $mul.ref(4, 1)), $sub.i16(0, 9985));
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(27, 32)), $mul.ref(6, 1)), 0);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(27, 32)), $mul.ref(8, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(27, 32)), $mul.ref(10, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(27, 32)), $mul.ref(11, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(27, 32)), $mul.ref(12, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(27, 32)), $mul.ref(13, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(27, 32)), $mul.ref(14, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(27, 32)), $mul.ref(15, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(27, 32)), $mul.ref(16, 1)), 0);
    $M.7 := $store.i64($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(27, 32)), $mul.ref(24, 1)), $p2i.ref.i64(__constr_expr_27));
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(28, 32)), $mul.ref(0, 1)), 3);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(28, 32)), $mul.ref(2, 1)), 8256);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(28, 32)), $mul.ref(4, 1)), $sub.i16(0, 14830));
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(28, 32)), $mul.ref(6, 1)), 0);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(28, 32)), $mul.ref(8, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(28, 32)), $mul.ref(10, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(28, 32)), $mul.ref(11, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(28, 32)), $mul.ref(12, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(28, 32)), $mul.ref(13, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(28, 32)), $mul.ref(14, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(28, 32)), $mul.ref(15, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(28, 32)), $mul.ref(16, 1)), 0);
    $M.7 := $store.i64($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(28, 32)), $mul.ref(24, 1)), $p2i.ref.i64(__constr_expr_28));
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(29, 32)), $mul.ref(0, 1)), 3);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(29, 32)), $mul.ref(2, 1)), 8256);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(29, 32)), $mul.ref(4, 1)), $sub.i16(0, 14829));
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(29, 32)), $mul.ref(6, 1)), 0);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(29, 32)), $mul.ref(8, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(29, 32)), $mul.ref(10, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(29, 32)), $mul.ref(11, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(29, 32)), $mul.ref(12, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(29, 32)), $mul.ref(13, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(29, 32)), $mul.ref(14, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(29, 32)), $mul.ref(15, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(29, 32)), $mul.ref(16, 1)), 0);
    $M.7 := $store.i64($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(29, 32)), $mul.ref(24, 1)), $p2i.ref.i64(__constr_expr_29));
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(30, 32)), $mul.ref(0, 1)), 3);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(30, 32)), $mul.ref(2, 1)), 8256);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(30, 32)), $mul.ref(4, 1)), $sub.i16(0, 14822));
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(30, 32)), $mul.ref(6, 1)), 0);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(30, 32)), $mul.ref(8, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(30, 32)), $mul.ref(10, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(30, 32)), $mul.ref(11, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(30, 32)), $mul.ref(12, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(30, 32)), $mul.ref(13, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(30, 32)), $mul.ref(14, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(30, 32)), $mul.ref(15, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(30, 32)), $mul.ref(16, 1)), 0);
    $M.7 := $store.i64($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(30, 32)), $mul.ref(24, 1)), $p2i.ref.i64(__constr_expr_30));
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(31, 32)), $mul.ref(0, 1)), 3);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(31, 32)), $mul.ref(2, 1)), 8256);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(31, 32)), $mul.ref(4, 1)), $sub.i16(0, 14821));
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(31, 32)), $mul.ref(6, 1)), 0);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(31, 32)), $mul.ref(8, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(31, 32)), $mul.ref(10, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(31, 32)), $mul.ref(11, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(31, 32)), $mul.ref(12, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(31, 32)), $mul.ref(13, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(31, 32)), $mul.ref(14, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(31, 32)), $mul.ref(15, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(31, 32)), $mul.ref(16, 1)), 0);
    $M.7 := $store.i64($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(31, 32)), $mul.ref(24, 1)), $p2i.ref.i64(__constr_expr_31));
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(32, 32)), $mul.ref(0, 1)), 3);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(32, 32)), $mul.ref(2, 1)), 8256);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(32, 32)), $mul.ref(4, 1)), $sub.i16(0, 18601));
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(32, 32)), $mul.ref(6, 1)), 0);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(32, 32)), $mul.ref(8, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(32, 32)), $mul.ref(10, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(32, 32)), $mul.ref(11, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(32, 32)), $mul.ref(12, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(32, 32)), $mul.ref(13, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(32, 32)), $mul.ref(14, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(32, 32)), $mul.ref(15, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(32, 32)), $mul.ref(16, 1)), 0);
    $M.7 := $store.i64($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(32, 32)), $mul.ref(24, 1)), $p2i.ref.i64(__constr_expr_32));
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(33, 32)), $mul.ref(0, 1)), 3);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(33, 32)), $mul.ref(2, 1)), 8256);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(33, 32)), $mul.ref(4, 1)), $sub.i16(0, 18585));
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(33, 32)), $mul.ref(6, 1)), 0);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(33, 32)), $mul.ref(8, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(33, 32)), $mul.ref(10, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(33, 32)), $mul.ref(11, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(33, 32)), $mul.ref(12, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(33, 32)), $mul.ref(13, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(33, 32)), $mul.ref(14, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(33, 32)), $mul.ref(15, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(33, 32)), $mul.ref(16, 1)), 0);
    $M.7 := $store.i64($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(33, 32)), $mul.ref(24, 1)), $p2i.ref.i64(__constr_expr_33));
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(34, 32)), $mul.ref(0, 1)), 0);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(34, 32)), $mul.ref(2, 1)), 0);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(34, 32)), $mul.ref(4, 1)), 0);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(34, 32)), $mul.ref(6, 1)), 0);
    $M.7 := $store.i16($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(34, 32)), $mul.ref(8, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(34, 32)), $mul.ref(10, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(34, 32)), $mul.ref(11, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(34, 32)), $mul.ref(12, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(34, 32)), $mul.ref(13, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(34, 32)), $mul.ref(14, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(34, 32)), $mul.ref(15, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(34, 32)), $mul.ref(16, 1)), 0);
    $M.7 := $store.i64($M.7, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(34, 32)), $mul.ref(24, 1)), 0);
    $M.7 := $store.ref($M.7, mxl111sf_usb_driver, .str.2);
    $M.7 := $store.ref($M.7, $add.ref($add.ref(mxl111sf_usb_driver, $mul.ref(0, 304)), $mul.ref(8, 1)), dvb_usbv2_probe);
    $M.7 := $store.ref($M.7, $add.ref($add.ref(mxl111sf_usb_driver, $mul.ref(0, 304)), $mul.ref(16, 1)), dvb_usbv2_disconnect);
    $M.7 := $store.ref($M.7, $add.ref($add.ref(mxl111sf_usb_driver, $mul.ref(0, 304)), $mul.ref(24, 1)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref(mxl111sf_usb_driver, $mul.ref(0, 304)), $mul.ref(32, 1)), dvb_usbv2_suspend);
    $M.7 := $store.ref($M.7, $add.ref($add.ref(mxl111sf_usb_driver, $mul.ref(0, 304)), $mul.ref(40, 1)), dvb_usbv2_resume);
    $M.7 := $store.ref($M.7, $add.ref($add.ref(mxl111sf_usb_driver, $mul.ref(0, 304)), $mul.ref(48, 1)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref(mxl111sf_usb_driver, $mul.ref(0, 304)), $mul.ref(56, 1)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref(mxl111sf_usb_driver, $mul.ref(0, 304)), $mul.ref(64, 1)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref(mxl111sf_usb_driver, $mul.ref(0, 304)), $mul.ref(72, 1)), mxl111sf_id_table);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_usb_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_usb_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_usb_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_usb_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_usb_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_usb_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_usb_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_usb_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_usb_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.7 := $store.i64($M.7, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_usb_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref($add.ref(mxl111sf_usb_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref($add.ref(mxl111sf_usb_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref($add.ref(mxl111sf_usb_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref($add.ref(mxl111sf_usb_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref($add.ref(mxl111sf_usb_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref($add.ref(mxl111sf_usb_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $0.ref);
    $M.7 := $store.i8($M.7, $add.ref($add.ref($add.ref($add.ref(mxl111sf_usb_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), 0);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref($add.ref(mxl111sf_usb_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(40, 1)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref($add.ref(mxl111sf_usb_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(48, 1)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref($add.ref(mxl111sf_usb_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(56, 1)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref($add.ref(mxl111sf_usb_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(64, 1)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref($add.ref(mxl111sf_usb_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(72, 1)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref($add.ref(mxl111sf_usb_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(80, 1)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref($add.ref(mxl111sf_usb_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(88, 1)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref($add.ref(mxl111sf_usb_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(96, 1)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref($add.ref(mxl111sf_usb_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(104, 1)), $0.ref);
    $M.7 := $store.ref($M.7, $add.ref($add.ref($add.ref($add.ref(mxl111sf_usb_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(112, 1)), $0.ref);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(mxl111sf_usb_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(120, 1)), 0);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(mxl111sf_usb_driver, $mul.ref(0, 304)), $mul.ref(296, 1)), 9);
    call {:si_unique_call 1829} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 596740);

procedure devirtbounce(funcPtr: ref, arg: ref, arg1: ref, arg2: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce(funcPtr: ref, arg: ref, arg1: ref, arg2: ref) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 597772);

procedure devirtbounce.1(funcPtr: ref, arg: ref, arg1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.1(funcPtr: ref, arg: ref, arg1: ref) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 598804);

procedure devirtbounce.2(funcPtr: ref, arg: ref, arg1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.2(funcPtr: ref, arg: ref, arg1: ref) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 599836);

procedure devirtbounce.3(funcPtr: ref, arg: ref, arg1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.3(funcPtr: ref, arg: ref, arg1: ref) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 600868);

procedure devirtbounce.4(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.11, $M.12, $M.15, $M.18, $M.19, $M.20, $M.21, $M.22, $CurrAddr, $M.17, $M.23, $M.24, $M.25, assertsPassed;



implementation devirtbounce.4(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i36 := $eq.ref(mxl111sf_ant_hunt, $p0);
    assume {:branchcond $i36} true;
    goto $bb14, $bb27;

  $bb27:
    assume !($i36 == 1);
    $i35 := $eq.ref(mxl111sf_frontend_attach_mercury_mh, $p0);
    assume true;
    goto $bb13, $bb26;

  $bb26:
    assume !($i35 == 1);
    $i34 := $eq.ref(mxl111sf_frontend_attach_mercury, $p0);
    assume {:branchcond $i34} true;
    goto $bb12, $bb25;

  $bb25:
    assume !($i34 == 1);
    $i33 := $eq.ref(mxl111sf_frontend_attach_dvbt, $p0);
    assume true;
    goto $bb11, $bb24;

  $bb24:
    assume !($i33 == 1);
    $i32 := $eq.ref(mxl111sf_frontend_attach_mh, $p0);
    assume {:branchcond $i32} true;
    goto $bb10, $bb23;

  $bb23:
    assume !($i32 == 1);
    $i31 := $eq.ref(mxl111sf_frontend_attach_atsc, $p0);
    assume {:branchcond $i31} true;
    goto $bb9, $bb22;

  $bb22:
    assume !($i31 == 1);
    $i30 := $eq.ref(mxl111sf_i2c_func, $p0);
    assume true;
    goto $bb8, $bb21;

  $bb21:
    assume !($i30 == 1);
    $i29 := $eq.ref(mxl111sf_adap_fe_sleep, $p0);
    assume {:branchcond $i29} true;
    goto $bb7, $bb20;

  $bb20:
    assume !($i29 == 1);
    $i28 := $eq.ref(mxl111sf_adap_fe_init, $p0);
    assume true;
    goto $bb6, $bb19;

  $bb19:
    assume !($i28 == 1);
    $i27 := $eq.ref(mxl111sf_init, $p0);
    assume {:branchcond $i27} true;
    goto $bb5, $bb18;

  $bb18:
    assume !($i27 == 1);
    $i26 := $eq.ref(mxl111sf_attach_tuner, $p0);
    assume {:branchcond $i26} true;
    goto $bb4, $bb17;

  $bb17:
    assume !($i26 == 1);
    $i25 := $eq.ref(mxl111sf_frontend_attach_atsc_mh, $p0);
    assume true;
    goto $bb3, $bb16;

  $bb16:
    assume !($i25 == 1);
    $i24 := $eq.ref(dvb_usbv2_resume, $p0);
    assume {:branchcond $i24} true;
    goto $bb2, $bb15;

  $bb15:
    assume !($i24 == 1);
    assume false;
    return;

  $bb2:
    assume $i24 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1830} $i2 := dvb_usbv2_resume($p1);
    $r := $i2;
    return;

  $bb3:
    assume $i25 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1831} $i4 := mxl111sf_frontend_attach_atsc_mh($p3);
    $r := $i4;
    return;

  $bb4:
    assume $i26 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1832} $i6 := mxl111sf_attach_tuner($p5);
    $r := $i6;
    return;

  $bb5:
    assume $i27 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1833} $i8 := mxl111sf_init($p7);
    $r := $i8;
    return;

  $bb6:
    assume $i28 == 1;
    call {:si_unique_call 1834} $i9 := mxl111sf_adap_fe_init(arg);
    goto SeqInstr_421, SeqInstr_422;

  SeqInstr_422:
    assume assertsPassed;
    goto SeqInstr_423;

  SeqInstr_423:
    $r := $i9;
    return;

  SeqInstr_421:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i29 == 1;
    call {:si_unique_call 1835} $i10 := mxl111sf_adap_fe_sleep(arg);
    goto SeqInstr_424, SeqInstr_425;

  SeqInstr_425:
    assume assertsPassed;
    goto SeqInstr_426;

  SeqInstr_426:
    $r := $i10;
    return;

  SeqInstr_424:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i30 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1836} $i12 := mxl111sf_i2c_func($p11);
    $r := $i12;
    return;

  $bb9:
    assume $i31 == 1;
    $p13 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1837} $i14 := mxl111sf_frontend_attach_atsc($p13);
    $r := $i14;
    return;

  $bb10:
    assume $i32 == 1;
    $p15 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1838} $i16 := mxl111sf_frontend_attach_mh($p15);
    $r := $i16;
    return;

  $bb11:
    assume $i33 == 1;
    $p17 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1839} $i18 := mxl111sf_frontend_attach_dvbt($p17);
    $r := $i18;
    return;

  $bb12:
    assume $i34 == 1;
    $p19 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1840} $i20 := mxl111sf_frontend_attach_mercury($p19);
    $r := $i20;
    return;

  $bb13:
    assume $i35 == 1;
    $p21 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1841} $i22 := mxl111sf_frontend_attach_mercury_mh($p21);
    $r := $i22;
    return;

  $bb14:
    assume $i36 == 1;
    call {:si_unique_call 1842} $i23 := mxl111sf_ant_hunt(arg);
    $r := $i23;
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 601900);

procedure devirtbounce.5(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $M.15, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation devirtbounce.5(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i8 := $eq.ref(mxl111sf_ctrl_program_regs, $p0);
    assume true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i8 == 1);
    $i7 := $eq.ref(dvb_usbv2_probe, $p0);
    assume true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i7 == 1);
    assume false;
    return;

  $bb2:
    assume $i7 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1843} $i3 := dvb_usbv2_probe($p1, $p2);
    $r := $i3;
    return;

  $bb3:
    assume $i8 == 1;
    $p4 := $bitcast.ref.ref(arg);
    $p5 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1844} $i6 := mxl111sf_ctrl_program_regs($p4, $p5);
    $r := $i6;
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 602932);

procedure devirtbounce.6(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.11, $M.12, $M.15, $M.18, $M.19, $M.20, $M.21, $M.22, $CurrAddr, $M.17, $M.23, $M.24, $M.25, assertsPassed;



implementation devirtbounce.6(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $i23: i32;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i38 := $eq.ref(mxl111sf_ant_hunt, $p0);
    assume {:branchcond $i38} true;
    goto $bb14, $bb27;

  $bb27:
    assume !($i38 == 1);
    $i37 := $eq.ref(mxl111sf_frontend_attach_mercury_mh, $p0);
    assume {:branchcond $i37} true;
    goto $bb13, $bb26;

  $bb26:
    assume !($i37 == 1);
    $i36 := $eq.ref(mxl111sf_frontend_attach_mercury, $p0);
    assume {:branchcond $i36} true;
    goto $bb12, $bb25;

  $bb25:
    assume !($i36 == 1);
    $i35 := $eq.ref(mxl111sf_frontend_attach_dvbt, $p0);
    assume true;
    goto $bb11, $bb24;

  $bb24:
    assume !($i35 == 1);
    $i34 := $eq.ref(mxl111sf_frontend_attach_mh, $p0);
    assume {:branchcond $i34} true;
    goto $bb10, $bb23;

  $bb23:
    assume !($i34 == 1);
    $i33 := $eq.ref(mxl111sf_frontend_attach_atsc, $p0);
    assume true;
    goto $bb9, $bb22;

  $bb22:
    assume !($i33 == 1);
    $i32 := $eq.ref(mxl111sf_i2c_func, $p0);
    assume {:branchcond $i32} true;
    goto $bb8, $bb21;

  $bb21:
    assume !($i32 == 1);
    $i31 := $eq.ref(mxl111sf_adap_fe_sleep, $p0);
    assume {:branchcond $i31} true;
    goto $bb7, $bb20;

  $bb20:
    assume !($i31 == 1);
    $i30 := $eq.ref(mxl111sf_adap_fe_init, $p0);
    assume true;
    goto $bb6, $bb19;

  $bb19:
    assume !($i30 == 1);
    $i29 := $eq.ref(mxl111sf_init, $p0);
    assume {:branchcond $i29} true;
    goto $bb5, $bb18;

  $bb18:
    assume !($i29 == 1);
    $i28 := $eq.ref(mxl111sf_attach_tuner, $p0);
    assume true;
    goto $bb4, $bb17;

  $bb17:
    assume !($i28 == 1);
    $i27 := $eq.ref(mxl111sf_frontend_attach_atsc_mh, $p0);
    assume {:branchcond $i27} true;
    goto $bb3, $bb16;

  $bb16:
    assume !($i27 == 1);
    $i26 := $eq.ref(dvb_usbv2_resume, $p0);
    assume {:branchcond $i26} true;
    goto $bb2, $bb15;

  $bb15:
    assume !($i26 == 1);
    assume false;
    return;

  $bb2:
    assume $i26 == 1;
    call {:si_unique_call 1845} $i1 := dvb_usbv2_resume(arg);
    $r := $i1;
    return;

  $bb3:
    assume $i27 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1846} $i3 := mxl111sf_frontend_attach_atsc_mh($p2);
    $r := $i3;
    return;

  $bb4:
    assume $i28 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1847} $i5 := mxl111sf_attach_tuner($p4);
    $r := $i5;
    return;

  $bb5:
    assume $i29 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1848} $i7 := mxl111sf_init($p6);
    $r := $i7;
    return;

  $bb6:
    assume $i30 == 1;
    $p8 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1849} $i9 := mxl111sf_adap_fe_init($p8);
    goto SeqInstr_427, SeqInstr_428;

  SeqInstr_428:
    assume assertsPassed;
    goto SeqInstr_429;

  SeqInstr_429:
    $r := $i9;
    return;

  SeqInstr_427:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i31 == 1;
    $p10 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1850} $i11 := mxl111sf_adap_fe_sleep($p10);
    goto SeqInstr_430, SeqInstr_431;

  SeqInstr_431:
    assume assertsPassed;
    goto SeqInstr_432;

  SeqInstr_432:
    $r := $i11;
    return;

  SeqInstr_430:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i32 == 1;
    $p12 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1851} $i13 := mxl111sf_i2c_func($p12);
    $r := $i13;
    return;

  $bb9:
    assume $i33 == 1;
    $p14 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1852} $i15 := mxl111sf_frontend_attach_atsc($p14);
    $r := $i15;
    return;

  $bb10:
    assume $i34 == 1;
    $p16 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1853} $i17 := mxl111sf_frontend_attach_mh($p16);
    $r := $i17;
    return;

  $bb11:
    assume $i35 == 1;
    $p18 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1854} $i19 := mxl111sf_frontend_attach_dvbt($p18);
    $r := $i19;
    return;

  $bb12:
    assume $i36 == 1;
    $p20 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1855} $i21 := mxl111sf_frontend_attach_mercury($p20);
    $r := $i21;
    return;

  $bb13:
    assume $i37 == 1;
    $p22 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1856} $i23 := mxl111sf_frontend_attach_mercury_mh($p22);
    $r := $i23;
    return;

  $bb14:
    assume $i38 == 1;
    $p24 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1857} $i25 := mxl111sf_ant_hunt($p24);
    $r := $i25;
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



const $u0: ref;

const $u1: i32;

const $u10: ref;

const $u11: ref;

const $u12: ref;

const $u13: ref;

const $u14: ref;

const $u15: i8;

const $u16: ref;

const $u17: ref;

const $u18: ref;

const $u19: ref;

const $u2: ref;

const $u20: ref;

const $u21: ref;

const $u22: ref;

const $u23: ref;

const $u24: ref;

const $u3: ref;

const $u4: ref;

const $u5: ref;

const $u6: ref;

const $u7: ref;

const $u8: ref;

const $u9: ref;

procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.10, $M.35, $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.48, $M.45, $M.46, $M.47, $M.50, $M.34, $M.51, $M.52, $M.53, $M.54, $M.33, $M.55, $M.17, $M.29, $M.61, $M.62, $M.63, $M.64, $M.65, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.72, $M.73, $M.49, $M.37, $M.36, $M.32, $M.106, $M.107, $M.108, $M.109, $M.110, $M.111, $M.31, $M.14, $M.149, $M.177, $M.223, $M.230, $M.234, $M.7, $M.238, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 1858} __SMACK_static_init();
    call {:si_unique_call 1859} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.10, $M.35, $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.48, $M.45, $M.46, $M.47, $M.50, $M.34, $M.51, $M.52, $M.53, $M.54, $M.33, $M.55, $M.17, $M.29, $M.61, $M.62, $M.63, $M.64, $M.65, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.72, $M.73, $M.49, $M.37, $M.36, $M.32, $M.106, $M.107, $M.108, $M.109, $M.110, $M.111, $M.31, $M.14, $M.149, $M.177, $M.223, $M.230, $M.234, $M.7, $M.238, $CurrAddr, $M.15, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.11, $M.12, $M.8, $M.27, $M.18, $M.19, $M.20, $M.21, $M.22, $M.28, $M.23, $M.24, $M.25, $M.0;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation mxl111sf_attach_tuner_loop_$bb7(in_$p0: ref, in_$p12: ref, in_$p29: ref, in_$p34: ref, in_$p35: ref, in_$i36: i64, in_$i37: i1, in_$i38: i32, in_$i39: i64, in_$p40: ref, in_$i41: i1, in_$p44: ref, in_$p42: ref, in_$i46: i64, in_$i47: i1, in_$i48: i64, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$i54: i64, in_$i55: i1, in_$p56: ref, in_$i58: i64, in_$i59: i1, in_$i61: i64, in_$p63: ref, in_$p64: ref, in_$p67: ref, in_$p68: ref, in_$i69: i64, in_$p71: ref, in_$p72: ref, in_$p74: ref, in_$i75: i32, in_$i76: i8, in_$i77: i32, in_$i78: i1, in_$i33: i32, in_vslice_dummy_var_5: i32, in_vslice_dummy_var_6: i32) returns (out_$p34: ref, out_$p35: ref, out_$i36: i64, out_$i37: i1, out_$i38: i32, out_$i39: i64, out_$p40: ref, out_$i41: i1, out_$p44: ref, out_$p42: ref, out_$i46: i64, out_$i47: i1, out_$i48: i64, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$i54: i64, out_$i55: i1, out_$p56: ref, out_$i58: i64, out_$i59: i1, out_$i61: i64, out_$p63: ref, out_$p64: ref, out_$p67: ref, out_$p68: ref, out_$i69: i64, out_$p71: ref, out_$p72: ref, out_$p74: ref, out_$i75: i32, out_$i76: i8, out_$i77: i32, out_$i78: i1, out_$i33: i32, out_vslice_dummy_var_5: i32, out_vslice_dummy_var_6: i32)
{

  entry:
    out_$p34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$p40, out_$i41, out_$p44, out_$p42, out_$i46, out_$i47, out_$i48, out_$p50, out_$p51, out_$p52, out_$p53, out_$i54, out_$i55, out_$p56, out_$i58, out_$i59, out_$i61, out_$p63, out_$p64, out_$p67, out_$p68, out_$i69, out_$p71, out_$p72, out_$p74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i33, out_vslice_dummy_var_5, out_vslice_dummy_var_6 := in_$p34, in_$p35, in_$i36, in_$i37, in_$i38, in_$i39, in_$p40, in_$i41, in_$p44, in_$p42, in_$i46, in_$i47, in_$i48, in_$p50, in_$p51, in_$p52, in_$p53, in_$i54, in_$i55, in_$p56, in_$i58, in_$i59, in_$i61, in_$p63, in_$p64, in_$p67, in_$p68, in_$i69, in_$p71, in_$p72, in_$p74, in_$i75, in_$i76, in_$i77, in_$i78, in_$i33, in_vslice_dummy_var_5, in_vslice_dummy_var_6;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_101;

  $bb22:
    assume out_$i78 == 1;
    assume {:verifier.code 0} true;
    out_$i33 := out_$i75;
    goto $bb22_dummy;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    out_$i78 := $slt.i32(out_$i75, out_$i77);
    goto corral_source_split_156;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    out_$i77 := $zext.i8.i32(out_$i76);
    goto corral_source_split_155;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    out_$i76 := $load.i8($M.7, in_$p29);
    goto corral_source_split_154;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    out_$i75 := $add.i32(out_$i33, 1);
    call {:si_unique_call 27} {:cexpr "i"} boogie_si_record_i32(out_$i75);
    goto corral_source_split_153;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, out_$p74, out_$p68);
    goto corral_source_split_152;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref($add.ref(out_$p72, $mul.ref(0, 1584)), $mul.ref(0, 1)), $mul.ref(272, 1));
    goto corral_source_split_151;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    out_$p72 := $load.ref($M.7, out_$p71);
    goto corral_source_split_150;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2400)), $mul.ref(2328, 1)), $mul.ref(out_$i69, 8));
    goto corral_source_split_149;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    out_$i69 := $sext.i32.i64(out_$i33);
    goto corral_source_split_148;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    out_$p68 := $load.ref($M.7, out_$p67);
    goto corral_source_split_147;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref($add.ref($add.ref(out_$p64, $mul.ref(0, 1584)), $mul.ref(0, 1)), $mul.ref(392, 1)), $mul.ref(256, 1));
    goto corral_source_split_146;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    out_$p64 := $load.ref($M.7, out_$p63);
    goto corral_source_split_145;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2400)), $mul.ref(2328, 1)), $mul.ref(out_$i61, 8));
    goto corral_source_split_144;

  $bb21:
    assume {:verifier.code 0} true;
    out_$i61 := $sext.i32.i64(out_$i33);
    goto corral_source_split_143;

  $bb19:
    assume !(out_$i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    out_$i59 := $eq.i64(out_$i58, 0);
    goto corral_source_split_137;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    out_$i58 := $p2i.ref.i64(out_$p56);
    goto corral_source_split_136;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_135;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 25} out_vslice_dummy_var_6 := printk.ref(.str.80);
    assume {:verifier.code 0} true;
    out_$p56 := $0.ref;
    goto $bb17;

  $bb16:
    assume {:verifier.code 0} true;
    out_$p56 := out_$p52;
    goto $bb17;

  $bb15:
    assume !(out_$i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 26} __symbol_put(.str.78);
    goto corral_source_split_133;

  $bb14:
    assume out_$i55 == 1;
    goto corral_source_split_132;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    out_$i55 := $eq.i64(out_$i54, 0);
    goto corral_source_split_128;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    out_$i54 := $p2i.ref.i64(out_$p53);
    goto corral_source_split_127;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    out_$p53 := $bitcast.ref.ref(out_$p52);
    goto corral_source_split_126;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    out_$p51 := $load.ref($M.7, out_$p50);
    call {:si_unique_call 24} out_$p52 := devirtbounce(out_$p42, out_$p51, in_$p12, mxl_tuner_config);
    goto corral_source_split_125;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2400)), $mul.ref(2328, 1)), $mul.ref(out_$i48, 8));
    goto corral_source_split_124;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    out_$i48 := $sext.i32.i64(out_$i33);
    goto corral_source_split_123;

  $bb12:
    assume out_$i47 == 1;
    goto corral_source_split_122;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    out_$i47 := $ne.i64(out_$i46, 0);
    goto corral_source_split_120;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    out_$i46 := $p2i.ref.i64(out_$p42);
    goto corral_source_split_119;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_118;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$p42 := out_$p44;
    goto $bb11;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    out_$p42 := out_$p40;
    goto $bb11;

  $bb9:
    assume out_$i41 == 1;
    goto corral_source_split_112;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    out_$i41 := $ne.ref(out_$p40, $0.ref);
    goto corral_source_split_110;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    out_$p40 := $i2p.i64.ref(out_$i39);
    goto corral_source_split_109;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    out_$i39 := $sext.i32.i64(out_$i38);
    goto corral_source_split_108;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    out_$i38 := $zext.i1.i32(out_$i37);
    goto corral_source_split_107;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    out_$i37 := $ne.i64(out_$i36, 0);
    goto corral_source_split_106;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    out_$i36 := $p2i.ref.i64(out_$p35);
    goto corral_source_split_105;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    out_$p35 := $bitcast.ref.ref(out_$p34);
    goto corral_source_split_104;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 21} out_$p34 := __symbol_get(.str.78);
    goto corral_source_split_103;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 23} out_$p44 := __symbol_get(.str.78);
    goto corral_source_split_116;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 22} out_vslice_dummy_var_5 := __request_module.i1.ref(1, .str.79);
    goto corral_source_split_115;

  $bb10:
    assume !(out_$i41 == 1);
    goto corral_source_split_114;

  $bb13:
    assume !(out_$i47 == 1);
    goto corral_source_split_130;

  $bb22_dummy:
    call {:si_unique_call 1} out_$p34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$p40, out_$i41, out_$p44, out_$p42, out_$i46, out_$i47, out_$i48, out_$p50, out_$p51, out_$p52, out_$p53, out_$i54, out_$i55, out_$p56, out_$i58, out_$i59, out_$i61, out_$p63, out_$p64, out_$p67, out_$p68, out_$i69, out_$p71, out_$p72, out_$p74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i33, out_vslice_dummy_var_5, out_vslice_dummy_var_6 := mxl111sf_attach_tuner_loop_$bb7(in_$p0, in_$p12, in_$p29, out_$p34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$p40, out_$i41, out_$p44, out_$p42, out_$i46, out_$i47, out_$i48, out_$p50, out_$p51, out_$p52, out_$p53, out_$i54, out_$i55, out_$p56, out_$i58, out_$i59, out_$i61, out_$p63, out_$p64, out_$p67, out_$p68, out_$i69, out_$p71, out_$p72, out_$p74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i33, out_vslice_dummy_var_5, out_vslice_dummy_var_6);
    return;

  exit:
    return;
}



procedure mxl111sf_attach_tuner_loop_$bb7(in_$p0: ref, in_$p12: ref, in_$p29: ref, in_$p34: ref, in_$p35: ref, in_$i36: i64, in_$i37: i1, in_$i38: i32, in_$i39: i64, in_$p40: ref, in_$i41: i1, in_$p44: ref, in_$p42: ref, in_$i46: i64, in_$i47: i1, in_$i48: i64, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$i54: i64, in_$i55: i1, in_$p56: ref, in_$i58: i64, in_$i59: i1, in_$i61: i64, in_$p63: ref, in_$p64: ref, in_$p67: ref, in_$p68: ref, in_$i69: i64, in_$p71: ref, in_$p72: ref, in_$p74: ref, in_$i75: i32, in_$i76: i8, in_$i77: i32, in_$i78: i1, in_$i33: i32, in_vslice_dummy_var_5: i32, in_vslice_dummy_var_6: i32) returns (out_$p34: ref, out_$p35: ref, out_$i36: i64, out_$i37: i1, out_$i38: i32, out_$i39: i64, out_$p40: ref, out_$i41: i1, out_$p44: ref, out_$p42: ref, out_$i46: i64, out_$i47: i1, out_$i48: i64, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$i54: i64, out_$i55: i1, out_$p56: ref, out_$i58: i64, out_$i59: i1, out_$i61: i64, out_$p63: ref, out_$p64: ref, out_$p67: ref, out_$p68: ref, out_$i69: i64, out_$p71: ref, out_$p72: ref, out_$p74: ref, out_$i75: i32, out_$i76: i8, out_$i77: i32, out_$i78: i1, out_$i33: i32, out_vslice_dummy_var_5: i32, out_vslice_dummy_var_6: i32);
  modifies $M.7;



implementation mxl111sf_ctrl_program_regs_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$i4: i64, in_$p6: ref, in_$i7: i8, in_$i8: i32, in_$i9: i8, in_$i10: i64, in_$p12: ref, in_$i13: i8, in_$i14: i32, in_$i15: i8, in_$i16: i64, in_$p18: ref, in_$i19: i8, in_$i20: i32, in_$i21: i8, in_$i22: i32, in_$i23: i1, in_$i24: i32, in_$i25: i1, in_$i26: i32, in_$i27: i32, in_$i28: i1, in_$i30: i1, in_$i31: i32, in_$i32: i32, in_$i40: i32, in_$i2: i32, in_$i3: i32, in_$i41: i64, in_$p43: ref, in_$i44: i8, in_$i45: i32, in_$i46: i64, in_$p48: ref, in_$i49: i8, in_$i50: i32, in_$i51: i32, in_$i52: i64, in_$p54: ref, in_$i55: i8, in_$i56: i32, in_$i57: i32, in_$i58: i1, in_$i59: i32, in_vslice_dummy_var_66: i32) returns (out_$i4: i64, out_$p6: ref, out_$i7: i8, out_$i8: i32, out_$i9: i8, out_$i10: i64, out_$p12: ref, out_$i13: i8, out_$i14: i32, out_$i15: i8, out_$i16: i64, out_$p18: ref, out_$i19: i8, out_$i20: i32, out_$i21: i8, out_$i22: i32, out_$i23: i1, out_$i24: i32, out_$i25: i1, out_$i26: i32, out_$i27: i32, out_$i28: i1, out_$i30: i1, out_$i31: i32, out_$i32: i32, out_$i40: i32, out_$i2: i32, out_$i3: i32, out_$i41: i64, out_$p43: ref, out_$i44: i8, out_$i45: i32, out_$i46: i64, out_$p48: ref, out_$i49: i8, out_$i50: i32, out_$i51: i32, out_$i52: i64, out_$p54: ref, out_$i55: i8, out_$i56: i32, out_$i57: i32, out_$i58: i1, out_$i59: i32, out_vslice_dummy_var_66: i32)
{

  entry:
    out_$i4, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10, out_$p12, out_$i13, out_$i14, out_$i15, out_$i16, out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i30, out_$i31, out_$i32, out_$i40, out_$i2, out_$i3, out_$i41, out_$p43, out_$i44, out_$i45, out_$i46, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$p54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_vslice_dummy_var_66 := in_$i4, in_$p6, in_$i7, in_$i8, in_$i9, in_$i10, in_$p12, in_$i13, in_$i14, in_$i15, in_$i16, in_$p18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i30, in_$i31, in_$i32, in_$i40, in_$i2, in_$i3, in_$i41, in_$p43, in_$i44, in_$i45, in_$i46, in_$p48, in_$i49, in_$i50, in_$i51, in_$i52, in_$p54, in_$i55, in_$i56, in_$i57, in_$i58, in_$i59, in_vslice_dummy_var_66;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2480;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    out_$i2, out_$i3 := out_$i40, out_$i22;
    goto corral_source_split_2543_dummy;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i40 := $add.i32(out_$i2, 1);
    call {:si_unique_call 357} {:cexpr "i"} boogie_si_record_i32(out_$i40);
    goto corral_source_split_2543;

  $bb10:
    assume !(out_$i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    out_$i31, out_$i32 := out_$i2, out_$i22;
    assume true;
    goto $bb10;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i30 := $ne.i32(out_$i24, 0);
    goto corral_source_split_2531;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 355} out_vslice_dummy_var_66 := printk.ref.ref.i32.i32(.str.5, .str.15, out_$i22, 171);
    goto corral_source_split_2529;

  $bb6:
    assume out_$i28 == 1;
    goto corral_source_split_2528;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    out_$i28 := $ne.i32(out_$i27, 0);
    goto corral_source_split_2526;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    out_$i27 := $and.i32(out_$i26, 16);
    goto corral_source_split_2525;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    out_$i26 := $M.10;
    goto corral_source_split_2524;

  $bb3:
    assume out_$i25 == 1;
    goto corral_source_split_2523;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    out_$i25 := $ne.i32(out_$i24, 0);
    goto corral_source_split_2521;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    out_$i24 := $zext.i1.i32(out_$i23);
    call {:si_unique_call 354} {:cexpr "__ret"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_2520;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    out_$i23 := $slt.i32(out_$i22, 0);
    goto corral_source_split_2519;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 352} out_$i22 := mxl111sf_write_reg_mask(in_$p0, out_$i9, out_$i15, out_$i21);
    call {:si_unique_call 353} {:cexpr "ret"} boogie_si_record_i32(out_$i22);
    goto corral_source_split_2518;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    out_$i21 := $trunc.i32.i8(out_$i20);
    goto corral_source_split_2517;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    out_$i20 := $zext.i8.i32(out_$i19);
    goto corral_source_split_2516;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    out_$i19 := $load.i8($M.7, out_$p18);
    goto corral_source_split_2515;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(in_$p1, $mul.ref(out_$i16, 3)), $mul.ref(2, 1));
    goto corral_source_split_2514;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    goto corral_source_split_2513;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    out_$i16 := $sext.i32.i64(out_$i2);
    goto corral_source_split_2512;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    out_$i15 := $trunc.i32.i8(out_$i14);
    goto corral_source_split_2511;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    out_$i14 := $zext.i8.i32(out_$i13);
    goto corral_source_split_2510;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    out_$i13 := $load.i8($M.7, out_$p12);
    goto corral_source_split_2509;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(in_$p1, $mul.ref(out_$i10, 3)), $mul.ref(1, 1));
    goto corral_source_split_2508;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    goto corral_source_split_2507;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    out_$i10 := $sext.i32.i64(out_$i2);
    goto corral_source_split_2506;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    out_$i9 := $trunc.i32.i8(out_$i8);
    goto corral_source_split_2505;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    out_$i8 := $zext.i8.i32(out_$i7);
    goto corral_source_split_2504;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    out_$i7 := $load.i8($M.7, out_$p6);
    goto corral_source_split_2503;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    out_$p6 := $add.ref($add.ref(in_$p1, $mul.ref(out_$i4, 3)), $mul.ref(0, 1));
    goto corral_source_split_2502;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    goto corral_source_split_2501;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i4 := $sext.i32.i64(out_$i2);
    goto corral_source_split_2500;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb13:
    assume out_$i58 == 1;
    goto corral_source_split_2545;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    out_$i59 := out_$i3;
    assume true;
    goto $bb13;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    out_$i58 := $ne.i32(out_$i57, 0);
    goto corral_source_split_2498;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    out_$i57 := $or.i32(out_$i51, out_$i56);
    goto corral_source_split_2497;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    out_$i56 := $zext.i8.i32(out_$i55);
    goto corral_source_split_2496;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    out_$i55 := $load.i8($M.7, out_$p54);
    goto corral_source_split_2495;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(in_$p1, $mul.ref(out_$i52, 3)), $mul.ref(2, 1));
    goto corral_source_split_2494;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    goto corral_source_split_2493;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    out_$i52 := $sext.i32.i64(out_$i2);
    goto corral_source_split_2492;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    out_$i51 := $or.i32(out_$i45, out_$i50);
    goto corral_source_split_2491;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    out_$i50 := $zext.i8.i32(out_$i49);
    goto corral_source_split_2490;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    out_$i49 := $load.i8($M.7, out_$p48);
    goto corral_source_split_2489;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(in_$p1, $mul.ref(out_$i46, 3)), $mul.ref(1, 1));
    goto corral_source_split_2488;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    goto corral_source_split_2487;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    out_$i46 := $sext.i32.i64(out_$i2);
    goto corral_source_split_2486;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    out_$i45 := $zext.i8.i32(out_$i44);
    goto corral_source_split_2485;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    out_$i44 := $load.i8($M.7, out_$p43);
    goto corral_source_split_2484;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(in_$p1, $mul.ref(out_$i41, 3)), $mul.ref(0, 1));
    goto corral_source_split_2483;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    goto corral_source_split_2482;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    out_$i41 := $sext.i32.i64(out_$i2);
    goto corral_source_split_2481;

  $bb4:
    assume {:verifier.code 0} true;
    assume !(out_$i25 == 1);
    goto $bb5;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(out_$i28 == 1);
    goto $bb5;

  corral_source_split_2543_dummy:
    call {:si_unique_call 1} out_$i4, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10, out_$p12, out_$i13, out_$i14, out_$i15, out_$i16, out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i30, out_$i31, out_$i32, out_$i40, out_$i2, out_$i3, out_$i41, out_$p43, out_$i44, out_$i45, out_$i46, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$p54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_vslice_dummy_var_66 := mxl111sf_ctrl_program_regs_loop_$bb1(in_$p0, in_$p1, out_$i4, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10, out_$p12, out_$i13, out_$i14, out_$i15, out_$i16, out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i30, out_$i31, out_$i32, out_$i40, out_$i2, out_$i3, out_$i41, out_$p43, out_$i44, out_$i45, out_$i46, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$p54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_vslice_dummy_var_66);
    return;

  exit:
    return;
}



procedure mxl111sf_ctrl_program_regs_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$i4: i64, in_$p6: ref, in_$i7: i8, in_$i8: i32, in_$i9: i8, in_$i10: i64, in_$p12: ref, in_$i13: i8, in_$i14: i32, in_$i15: i8, in_$i16: i64, in_$p18: ref, in_$i19: i8, in_$i20: i32, in_$i21: i8, in_$i22: i32, in_$i23: i1, in_$i24: i32, in_$i25: i1, in_$i26: i32, in_$i27: i32, in_$i28: i1, in_$i30: i1, in_$i31: i32, in_$i32: i32, in_$i40: i32, in_$i2: i32, in_$i3: i32, in_$i41: i64, in_$p43: ref, in_$i44: i8, in_$i45: i32, in_$i46: i64, in_$p48: ref, in_$i49: i8, in_$i50: i32, in_$i51: i32, in_$i52: i64, in_$p54: ref, in_$i55: i8, in_$i56: i32, in_$i57: i32, in_$i58: i1, in_$i59: i32, in_vslice_dummy_var_66: i32) returns (out_$i4: i64, out_$p6: ref, out_$i7: i8, out_$i8: i32, out_$i9: i8, out_$i10: i64, out_$p12: ref, out_$i13: i8, out_$i14: i32, out_$i15: i8, out_$i16: i64, out_$p18: ref, out_$i19: i8, out_$i20: i32, out_$i21: i8, out_$i22: i32, out_$i23: i1, out_$i24: i32, out_$i25: i1, out_$i26: i32, out_$i27: i32, out_$i28: i1, out_$i30: i1, out_$i31: i32, out_$i32: i32, out_$i40: i32, out_$i2: i32, out_$i3: i32, out_$i41: i64, out_$p43: ref, out_$i44: i8, out_$i45: i32, out_$i46: i64, out_$p48: ref, out_$i49: i8, out_$i50: i32, out_$i51: i32, out_$i52: i64, out_$p54: ref, out_$i55: i8, out_$i56: i32, out_$i57: i32, out_$i58: i1, out_$i59: i32, out_vslice_dummy_var_66: i32);
  modifies $M.7, $M.15, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation mxl111sf_i2c_xfer_loop_$bb8(in_$p1: ref, in_$i2: i32, in_$p7: ref, in_$i12: i32, in_$i20: i1, in_$i21: i64, in_$p22: ref, in_$i23: i32, in_$i25: i64, in_$p26: ref, in_$i27: i32, in_$i24: i32, in_$i28: i1, in_$i29: i32, in_$i30: i1, in_$i31: i32, in_$i32: i32, in_$i33: i1, in_$i35: i1, in_$i36: i32, in_$i37: i32, in_$i62: i32, in_$i63: i1, in_$i19: i32, in_$i64: i32, in_vslice_dummy_var_188: i32) returns (out_$i20: i1, out_$i21: i64, out_$p22: ref, out_$i23: i32, out_$i25: i64, out_$p26: ref, out_$i27: i32, out_$i24: i32, out_$i28: i1, out_$i29: i32, out_$i30: i1, out_$i31: i32, out_$i32: i32, out_$i33: i1, out_$i35: i1, out_$i36: i32, out_$i37: i32, out_$i62: i32, out_$i63: i1, out_$i19: i32, out_$i64: i32, out_vslice_dummy_var_188: i32)
{

  entry:
    out_$i20, out_$i21, out_$p22, out_$i23, out_$i25, out_$p26, out_$i27, out_$i24, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i35, out_$i36, out_$i37, out_$i62, out_$i63, out_$i19, out_$i64, out_vslice_dummy_var_188 := in_$i20, in_$i21, in_$p22, in_$i23, in_$i25, in_$p26, in_$i27, in_$i24, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i35, in_$i36, in_$i37, in_$i62, in_$i63, in_$i19, in_$i64, in_vslice_dummy_var_188;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_5318;

  $bb26:
    assume out_$i63 == 1;
    assume {:verifier.code 0} true;
    out_$i19 := out_$i62;
    goto $bb26_dummy;

  corral_source_split_5379:
    assume {:verifier.code 0} true;
    out_$i64 := out_$i62;
    assume true;
    goto $bb26;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    out_$i63 := $slt.i32(out_$i62, in_$i2);
    goto corral_source_split_5379;

  $bb25:
    assume {:verifier.code 0} true;
    out_$i62 := $add.i32(out_$i19, 1);
    call {:si_unique_call 802} {:cexpr "i"} boogie_si_record_i32(out_$i62);
    goto corral_source_split_5378;

  $bb20:
    assume !(out_$i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    out_$i36, out_$i37 := out_$i19, out_$i24;
    assume true;
    goto $bb20;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i35 := $ne.i32(out_$i29, 0);
    goto corral_source_split_5344;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_5342:
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_5341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 799} out_vslice_dummy_var_188 := printk.ref.ref.i32.i32(.str.5, .str.37, out_$i24, 829);
    goto corral_source_split_5342;

  $bb16:
    assume out_$i33 == 1;
    goto corral_source_split_5341;

  corral_source_split_5339:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    out_$i33 := $ne.i32(out_$i32, 0);
    goto corral_source_split_5339;

  corral_source_split_5337:
    assume {:verifier.code 0} true;
    out_$i32 := $and.i32(out_$i31, 16);
    goto corral_source_split_5338;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    out_$i31 := $M.10;
    goto corral_source_split_5337;

  $bb13:
    assume out_$i30 == 1;
    goto corral_source_split_5336;

  corral_source_split_5334:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_5333:
    assume {:verifier.code 0} true;
    out_$i30 := $ne.i32(out_$i29, 0);
    goto corral_source_split_5334;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    out_$i29 := $zext.i1.i32(out_$i28);
    call {:si_unique_call 798} {:cexpr "__ret"} boogie_si_record_i32(out_$i29);
    goto corral_source_split_5333;

  corral_source_split_5331:
    assume {:verifier.code 0} true;
    out_$i28 := $slt.i32(out_$i24, 0);
    goto corral_source_split_5332;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_5331;

  corral_source_split_5329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 796} out_$i27 := mxl111sf_i2c_sw_xfer_msg(in_$p7, out_$p26);
    call {:si_unique_call 797} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i27);
    assume {:verifier.code 0} true;
    out_$i24 := out_$i27;
    goto $bb12;

  corral_source_split_5325:
    assume {:verifier.code 0} true;
    out_$i24 := out_$i23;
    goto $bb12;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 794} out_$i23 := mxl111sf_i2c_hw_xfer_msg(in_$p7, out_$p22);
    call {:si_unique_call 795} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i23);
    goto corral_source_split_5325;

  corral_source_split_5323:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref(in_$p1, $mul.ref(out_$i21, 16));
    goto corral_source_split_5324;

  corral_source_split_5322:
    assume {:verifier.code 0} true;
    out_$i21 := $sext.i32.i64(out_$i19);
    goto corral_source_split_5323;

  $bb10:
    assume out_$i20 == 1;
    goto corral_source_split_5322;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i20 := $ne.i32(in_$i12, 0);
    goto corral_source_split_5320;

  corral_source_split_5318:
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_5328:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref(in_$p1, $mul.ref(out_$i25, 16));
    goto corral_source_split_5329;

  corral_source_split_5327:
    assume {:verifier.code 0} true;
    out_$i25 := $sext.i32.i64(out_$i19);
    goto corral_source_split_5328;

  $bb11:
    assume !(out_$i20 == 1);
    goto corral_source_split_5327;

  $bb14:
    assume {:verifier.code 0} true;
    assume !(out_$i30 == 1);
    goto $bb15;

  $bb17:
    assume {:verifier.code 0} true;
    assume !(out_$i33 == 1);
    goto $bb15;

  $bb26_dummy:
    call {:si_unique_call 1} out_$i20, out_$i21, out_$p22, out_$i23, out_$i25, out_$p26, out_$i27, out_$i24, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i35, out_$i36, out_$i37, out_$i62, out_$i63, out_$i19, out_$i64, out_vslice_dummy_var_188 := mxl111sf_i2c_xfer_loop_$bb8(in_$p1, in_$i2, in_$p7, in_$i12, out_$i20, out_$i21, out_$p22, out_$i23, out_$i25, out_$p26, out_$i27, out_$i24, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i35, out_$i36, out_$i37, out_$i62, out_$i63, out_$i19, out_$i64, out_vslice_dummy_var_188);
    return;

  exit:
    return;
}



procedure mxl111sf_i2c_xfer_loop_$bb8(in_$p1: ref, in_$i2: i32, in_$p7: ref, in_$i12: i32, in_$i20: i1, in_$i21: i64, in_$p22: ref, in_$i23: i32, in_$i25: i64, in_$p26: ref, in_$i27: i32, in_$i24: i32, in_$i28: i1, in_$i29: i32, in_$i30: i1, in_$i31: i32, in_$i32: i32, in_$i33: i1, in_$i35: i1, in_$i36: i32, in_$i37: i32, in_$i62: i32, in_$i63: i1, in_$i19: i32, in_$i64: i32, in_vslice_dummy_var_188: i32) returns (out_$i20: i1, out_$i21: i64, out_$p22: ref, out_$i23: i32, out_$i25: i64, out_$p26: ref, out_$i27: i32, out_$i24: i32, out_$i28: i1, out_$i29: i32, out_$i30: i1, out_$i31: i32, out_$i32: i32, out_$i33: i1, out_$i35: i1, out_$i36: i32, out_$i37: i32, out_$i62: i32, out_$i63: i1, out_$i19: i32, out_$i64: i32, out_vslice_dummy_var_188: i32);
  modifies $M.15, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr, $M.27, $M.28;



implementation mxl111sf_i2c_hw_xfer_msg_loop_$bb168(in_$p1: ref, in_$p3: ref, in_$i262: i16, in_$i470: i32, in_$i473: i32, in_$i474: i32, in_$i475: i64, in_$p476: ref, in_$i477: i8, in_$p478: ref, in_$p479: ref, in_$i480: i32, in_$i481: i32, in_$i482: i32, in_$i483: i64, in_$p484: ref, in_$i485: i32, in_$i486: i32, in_$i487: i1, in_$i488: i32, in_$i489: i32, in_$i490: i64, in_$p491: ref, in_$i492: i8, in_$i493: i32, in_$i494: i32, in_$i495: i32, in_$i496: i64, in_$p497: ref, in_$i498: i8, in_$i499: i32, in_$i501: i32, in_$i502: i1, in_$i472: i32, in_vslice_dummy_var_209: i32) returns (out_$i473: i32, out_$i474: i32, out_$i475: i64, out_$p476: ref, out_$i477: i8, out_$p478: ref, out_$p479: ref, out_$i480: i32, out_$i481: i32, out_$i482: i32, out_$i483: i64, out_$p484: ref, out_$i485: i32, out_$i486: i32, out_$i487: i1, out_$i488: i32, out_$i489: i32, out_$i490: i64, out_$p491: ref, out_$i492: i8, out_$i493: i32, out_$i494: i32, out_$i495: i32, out_$i496: i64, out_$p497: ref, out_$i498: i8, out_$i499: i32, out_$i501: i32, out_$i502: i1, out_$i472: i32, out_vslice_dummy_var_209: i32)
{

  entry:
    out_$i473, out_$i474, out_$i475, out_$p476, out_$i477, out_$p478, out_$p479, out_$i480, out_$i481, out_$i482, out_$i483, out_$p484, out_$i485, out_$i486, out_$i487, out_$i488, out_$i489, out_$i490, out_$p491, out_$i492, out_$i493, out_$i494, out_$i495, out_$i496, out_$p497, out_$i498, out_$i499, out_$i501, out_$i502, out_$i472, out_vslice_dummy_var_209 := in_$i473, in_$i474, in_$i475, in_$p476, in_$i477, in_$p478, in_$p479, in_$i480, in_$i481, in_$i482, in_$i483, in_$p484, in_$i485, in_$i486, in_$i487, in_$i488, in_$i489, in_$i490, in_$p491, in_$i492, in_$i493, in_$i494, in_$i495, in_$i496, in_$p497, in_$i498, in_$i499, in_$i501, in_$i502, in_$i472, in_vslice_dummy_var_209;
    goto $bb168, exit;

  $bb168:
    assume {:verifier.code 0} true;
    goto corral_source_split_6162;

  $bb173:
    assume out_$i502 == 1;
    assume {:verifier.code 0} true;
    out_$i472 := out_$i501;
    goto $bb173_dummy;

  corral_source_split_6197:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb173;

  corral_source_split_6196:
    assume {:verifier.code 0} true;
    out_$i502 := $slt.i32(out_$i501, in_$i470);
    goto corral_source_split_6197;

  $bb172:
    assume {:verifier.code 0} true;
    out_$i501 := $add.i32(out_$i472, 1);
    call {:si_unique_call 869} {:cexpr "i"} boogie_si_record_i32(out_$i501);
    goto corral_source_split_6196;

  $bb171:
    assume !(out_$i487 == 1);
    assume {:verifier.code 0} true;
    goto $bb172;

  corral_source_split_6194:
    assume {:verifier.code 0} true;
    goto $bb172;

  corral_source_split_6193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 868} out_vslice_dummy_var_209 := printk.ref.ref.i32.i32(.str.132, .str.124, out_$i493, out_$i499);
    goto corral_source_split_6194;

  corral_source_split_6192:
    assume {:verifier.code 0} true;
    out_$i499 := $zext.i8.i32(out_$i498);
    goto corral_source_split_6193;

  corral_source_split_6191:
    assume {:verifier.code 0} true;
    out_$i498 := $load.i8($M.26, out_$p497);
    goto corral_source_split_6192;

  corral_source_split_6190:
    assume {:verifier.code 0} true;
    out_$p497 := $add.ref($add.ref(in_$p3, $mul.ref(0, 24)), $mul.ref(out_$i496, 1));
    goto corral_source_split_6191;

  corral_source_split_6189:
    assume {:verifier.code 0} true;
    out_$i496 := $sext.i32.i64(out_$i495);
    goto corral_source_split_6190;

  corral_source_split_6188:
    assume {:verifier.code 0} true;
    out_$i495 := $add.i32(out_$i494, 2);
    goto corral_source_split_6189;

  corral_source_split_6187:
    assume {:verifier.code 0} true;
    out_$i494 := $mul.i32(out_$i472, 3);
    goto corral_source_split_6188;

  corral_source_split_6186:
    assume {:verifier.code 0} true;
    out_$i493 := $zext.i8.i32(out_$i492);
    goto corral_source_split_6187;

  corral_source_split_6185:
    assume {:verifier.code 0} true;
    out_$i492 := $load.i8($M.26, out_$p491);
    goto corral_source_split_6186;

  corral_source_split_6184:
    assume {:verifier.code 0} true;
    out_$p491 := $add.ref($add.ref(in_$p3, $mul.ref(0, 24)), $mul.ref(out_$i490, 1));
    goto corral_source_split_6185;

  corral_source_split_6183:
    assume {:verifier.code 0} true;
    out_$i490 := $sext.i32.i64(out_$i489);
    goto corral_source_split_6184;

  corral_source_split_6182:
    assume {:verifier.code 0} true;
    out_$i489 := $add.i32(out_$i488, 1);
    goto corral_source_split_6183;

  corral_source_split_6181:
    assume {:verifier.code 0} true;
    out_$i488 := $mul.i32(out_$i472, 3);
    goto corral_source_split_6182;

  $bb170:
    assume out_$i487 == 1;
    goto corral_source_split_6181;

  corral_source_split_6179:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb170, $bb171;

  corral_source_split_6178:
    assume {:verifier.code 0} true;
    out_$i487 := $ne.i32(out_$i486, 0);
    goto corral_source_split_6179;

  corral_source_split_6177:
    assume {:verifier.code 0} true;
    out_$i486 := $and.i32(out_$i485, 4);
    goto corral_source_split_6178;

  corral_source_split_6176:
    assume {:verifier.code 0} true;
    out_$i485 := $M.10;
    goto corral_source_split_6177;

  corral_source_split_6175:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, out_$p484, out_$i477);
    goto corral_source_split_6176;

  corral_source_split_6174:
    assume {:verifier.code 0} true;
    out_$p484 := $add.ref(out_$p479, $mul.ref(out_$i483, 1));
    goto corral_source_split_6175;

  corral_source_split_6173:
    assume {:verifier.code 0} true;
    out_$i483 := $sext.i32.i64(out_$i482);
    goto corral_source_split_6174;

  corral_source_split_6172:
    assume {:verifier.code 0} true;
    out_$i482 := $add.i32(out_$i481, out_$i472);
    goto corral_source_split_6173;

  corral_source_split_6171:
    assume {:verifier.code 0} true;
    out_$i481 := $mul.i32(out_$i480, 8);
    goto corral_source_split_6172;

  corral_source_split_6170:
    assume {:verifier.code 0} true;
    out_$i480 := $zext.i16.i32(in_$i262);
    goto corral_source_split_6171;

  corral_source_split_6169:
    assume {:verifier.code 0} true;
    out_$p479 := $load.ref($M.8, out_$p478);
    goto corral_source_split_6170;

  corral_source_split_6168:
    assume {:verifier.code 0} true;
    out_$p478 := $add.ref($add.ref(in_$p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6169;

  corral_source_split_6167:
    assume {:verifier.code 0} true;
    out_$i477 := $load.i8($M.26, out_$p476);
    goto corral_source_split_6168;

  corral_source_split_6166:
    assume {:verifier.code 0} true;
    out_$p476 := $add.ref($add.ref(in_$p3, $mul.ref(0, 24)), $mul.ref(out_$i475, 1));
    goto corral_source_split_6167;

  corral_source_split_6165:
    assume {:verifier.code 0} true;
    out_$i475 := $sext.i32.i64(out_$i474);
    goto corral_source_split_6166;

  corral_source_split_6164:
    assume {:verifier.code 0} true;
    out_$i474 := $add.i32(out_$i473, 1);
    goto corral_source_split_6165;

  $bb169:
    assume {:verifier.code 0} true;
    out_$i473 := $mul.i32(out_$i472, 3);
    goto corral_source_split_6164;

  corral_source_split_6162:
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb173_dummy:
    call {:si_unique_call 1} out_$i473, out_$i474, out_$i475, out_$p476, out_$i477, out_$p478, out_$p479, out_$i480, out_$i481, out_$i482, out_$i483, out_$p484, out_$i485, out_$i486, out_$i487, out_$i488, out_$i489, out_$i490, out_$p491, out_$i492, out_$i493, out_$i494, out_$i495, out_$i496, out_$p497, out_$i498, out_$i499, out_$i501, out_$i502, out_$i472, out_vslice_dummy_var_209 := mxl111sf_i2c_hw_xfer_msg_loop_$bb168(in_$p1, in_$p3, in_$i262, in_$i470, out_$i473, out_$i474, out_$i475, out_$p476, out_$i477, out_$p478, out_$p479, out_$i480, out_$i481, out_$i482, out_$i483, out_$p484, out_$i485, out_$i486, out_$i487, out_$i488, out_$i489, out_$i490, out_$p491, out_$i492, out_$i493, out_$i494, out_$i495, out_$i496, out_$p497, out_$i498, out_$i499, out_$i501, out_$i502, out_$i472, out_vslice_dummy_var_209);
    return;

  exit:
    return;
}



procedure mxl111sf_i2c_hw_xfer_msg_loop_$bb168(in_$p1: ref, in_$p3: ref, in_$i262: i16, in_$i470: i32, in_$i473: i32, in_$i474: i32, in_$i475: i64, in_$p476: ref, in_$i477: i8, in_$p478: ref, in_$p479: ref, in_$i480: i32, in_$i481: i32, in_$i482: i32, in_$i483: i64, in_$p484: ref, in_$i485: i32, in_$i486: i32, in_$i487: i1, in_$i488: i32, in_$i489: i32, in_$i490: i64, in_$p491: ref, in_$i492: i8, in_$i493: i32, in_$i494: i32, in_$i495: i32, in_$i496: i64, in_$p497: ref, in_$i498: i8, in_$i499: i32, in_$i501: i32, in_$i502: i1, in_$i472: i32, in_vslice_dummy_var_209: i32) returns (out_$i473: i32, out_$i474: i32, out_$i475: i64, out_$p476: ref, out_$i477: i8, out_$p478: ref, out_$p479: ref, out_$i480: i32, out_$i481: i32, out_$i482: i32, out_$i483: i64, out_$p484: ref, out_$i485: i32, out_$i486: i32, out_$i487: i1, out_$i488: i32, out_$i489: i32, out_$i490: i64, out_$p491: ref, out_$i492: i8, out_$i493: i32, out_$i494: i32, out_$i495: i32, out_$i496: i64, out_$p497: ref, out_$i498: i8, out_$i499: i32, out_$i501: i32, out_$i502: i1, out_$i472: i32, out_vslice_dummy_var_209: i32);
  modifies $M.8;



implementation mxl111sf_i2c_hw_xfer_msg_loop_$bb154(in_$p2: ref, in_$i437: i32, in_$i440: i32, in_$i441: i32, in_$i442: i64, in_$p443: ref, in_$i444: i32, in_$i445: i32, in_$i446: i64, in_$p447: ref, in_$i448: i32, in_$i449: i32, in_$i450: i64, in_$p451: ref, in_$i452: i32, in_$i453: i1, in_$i439: i32) returns (out_$i440: i32, out_$i441: i32, out_$i442: i64, out_$p443: ref, out_$i444: i32, out_$i445: i32, out_$i446: i64, out_$p447: ref, out_$i448: i32, out_$i449: i32, out_$i450: i64, out_$p451: ref, out_$i452: i32, out_$i453: i1, out_$i439: i32)
{

  entry:
    out_$i440, out_$i441, out_$i442, out_$p443, out_$i444, out_$i445, out_$i446, out_$p447, out_$i448, out_$i449, out_$i450, out_$p451, out_$i452, out_$i453, out_$i439 := in_$i440, in_$i441, in_$i442, in_$p443, in_$i444, in_$i445, in_$i446, in_$p447, in_$i448, in_$i449, in_$i450, in_$p451, in_$i452, in_$i453, in_$i439;
    goto $bb154, exit;

  $bb154:
    assume {:verifier.code 0} true;
    goto corral_source_split_6110;

  $bb156:
    assume out_$i453 == 1;
    assume {:verifier.code 0} true;
    out_$i439 := out_$i452;
    goto $bb156_dummy;

  corral_source_split_6128:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb156;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    out_$i453 := $slt.i32(out_$i452, in_$i437);
    goto corral_source_split_6128;

  corral_source_split_6126:
    assume {:verifier.code 0} true;
    out_$i452 := $add.i32(out_$i439, 1);
    call {:si_unique_call 862} {:cexpr "i"} boogie_si_record_i32(out_$i452);
    goto corral_source_split_6127;

  corral_source_split_6125:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, out_$p451, 0);
    goto corral_source_split_6126;

  corral_source_split_6124:
    assume {:verifier.code 0} true;
    out_$p451 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(out_$i450, 1));
    goto corral_source_split_6125;

  corral_source_split_6123:
    assume {:verifier.code 0} true;
    out_$i450 := $sext.i32.i64(out_$i449);
    goto corral_source_split_6124;

  corral_source_split_6122:
    assume {:verifier.code 0} true;
    out_$i449 := $add.i32(out_$i448, 4);
    goto corral_source_split_6123;

  corral_source_split_6121:
    assume {:verifier.code 0} true;
    out_$i448 := $mul.i32(out_$i439, 3);
    goto corral_source_split_6122;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, out_$p447, 0);
    goto corral_source_split_6121;

  corral_source_split_6119:
    assume {:verifier.code 0} true;
    out_$p447 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(out_$i446, 1));
    goto corral_source_split_6120;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    out_$i446 := $sext.i32.i64(out_$i445);
    goto corral_source_split_6119;

  corral_source_split_6117:
    assume {:verifier.code 0} true;
    out_$i445 := $mul.i32(out_$i444, 3);
    goto corral_source_split_6118;

  corral_source_split_6116:
    assume {:verifier.code 0} true;
    out_$i444 := $add.i32(out_$i439, 1);
    goto corral_source_split_6117;

  corral_source_split_6115:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, out_$p443, 12);
    goto corral_source_split_6116;

  corral_source_split_6114:
    assume {:verifier.code 0} true;
    out_$p443 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(out_$i442, 1));
    goto corral_source_split_6115;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    out_$i442 := $sext.i32.i64(out_$i441);
    goto corral_source_split_6114;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    out_$i441 := $add.i32(out_$i440, 2);
    goto corral_source_split_6113;

  $bb155:
    assume {:verifier.code 0} true;
    out_$i440 := $mul.i32(out_$i439, 3);
    goto corral_source_split_6112;

  corral_source_split_6110:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb156_dummy:
    call {:si_unique_call 1} out_$i440, out_$i441, out_$i442, out_$p443, out_$i444, out_$i445, out_$i446, out_$p447, out_$i448, out_$i449, out_$i450, out_$p451, out_$i452, out_$i453, out_$i439 := mxl111sf_i2c_hw_xfer_msg_loop_$bb154(in_$p2, in_$i437, out_$i440, out_$i441, out_$i442, out_$p443, out_$i444, out_$i445, out_$i446, out_$p447, out_$i448, out_$i449, out_$i450, out_$p451, out_$i452, out_$i453, out_$i439);
    return;

  exit:
    return;
}



procedure mxl111sf_i2c_hw_xfer_msg_loop_$bb154(in_$p2: ref, in_$i437: i32, in_$i440: i32, in_$i441: i32, in_$i442: i64, in_$p443: ref, in_$i444: i32, in_$i445: i32, in_$i446: i64, in_$p447: ref, in_$i448: i32, in_$i449: i32, in_$i450: i64, in_$p451: ref, in_$i452: i32, in_$i453: i1, in_$i439: i32) returns (out_$i440: i32, out_$i441: i32, out_$i442: i64, out_$p443: ref, out_$i444: i32, out_$i445: i32, out_$i446: i64, out_$p447: ref, out_$i448: i32, out_$i449: i32, out_$i450: i64, out_$p451: ref, out_$i452: i32, out_$i453: i1, out_$i439: i32);
  modifies $M.15;



implementation mxl111sf_i2c_hw_xfer_msg_loop_$bb121(in_$p1: ref, in_$p5: ref, in_$i338: i32, in_$i340: i32, in_$i343: i64, in_$p344: ref, in_$i345: i8, in_$p346: ref, in_$p347: ref, in_$i348: i32, in_$i349: i32, in_$i350: i32, in_$i351: i32, in_$i352: i32, in_$i353: i64, in_$p354: ref, in_$i355: i32, in_$i356: i32, in_$i357: i1, in_$p358: ref, in_$p359: ref, in_$i360: i32, in_$i361: i32, in_$i362: i32, in_$i363: i32, in_$i364: i64, in_$p365: ref, in_$i366: i8, in_$i367: i32, in_$i368: i32, in_$i369: i32, in_$i370: i32, in_$i371: i32, in_$i373: i32, in_$i374: i32, in_$i375: i1, in_$p376: ref, in_$p377: ref, in_$i378: i32, in_$i379: i32, in_$i380: i32, in_$i381: i32, in_$i382: i32, in_$i383: i64, in_$p384: ref, in_$i385: i8, in_$i386: i32, in_$i387: i64, in_$p388: ref, in_$i389: i8, in_$i390: i32, in_$i392: i32, in_$i393: i1, in_$i342: i32, in_$i278: i16, in_vslice_dummy_var_205: i32, in_vslice_dummy_var_206: i32) returns (out_$i343: i64, out_$p344: ref, out_$i345: i8, out_$p346: ref, out_$p347: ref, out_$i348: i32, out_$i349: i32, out_$i350: i32, out_$i351: i32, out_$i352: i32, out_$i353: i64, out_$p354: ref, out_$i355: i32, out_$i356: i32, out_$i357: i1, out_$p358: ref, out_$p359: ref, out_$i360: i32, out_$i361: i32, out_$i362: i32, out_$i363: i32, out_$i364: i64, out_$p365: ref, out_$i366: i8, out_$i367: i32, out_$i368: i32, out_$i369: i32, out_$i370: i32, out_$i371: i32, out_$i373: i32, out_$i374: i32, out_$i375: i1, out_$p376: ref, out_$p377: ref, out_$i378: i32, out_$i379: i32, out_$i380: i32, out_$i381: i32, out_$i382: i32, out_$i383: i64, out_$p384: ref, out_$i385: i8, out_$i386: i32, out_$i387: i64, out_$p388: ref, out_$i389: i8, out_$i390: i32, out_$i392: i32, out_$i393: i1, out_$i342: i32, out_vslice_dummy_var_205: i32, out_vslice_dummy_var_206: i32)
{

  entry:
    out_$i343, out_$p344, out_$i345, out_$p346, out_$p347, out_$i348, out_$i349, out_$i350, out_$i351, out_$i352, out_$i353, out_$p354, out_$i355, out_$i356, out_$i357, out_$p358, out_$p359, out_$i360, out_$i361, out_$i362, out_$i363, out_$i364, out_$p365, out_$i366, out_$i367, out_$i368, out_$i369, out_$i370, out_$i371, out_$i373, out_$i374, out_$i375, out_$p376, out_$p377, out_$i378, out_$i379, out_$i380, out_$i381, out_$i382, out_$i383, out_$p384, out_$i385, out_$i386, out_$i387, out_$p388, out_$i389, out_$i390, out_$i392, out_$i393, out_$i342, out_vslice_dummy_var_205, out_vslice_dummy_var_206 := in_$i343, in_$p344, in_$i345, in_$p346, in_$p347, in_$i348, in_$i349, in_$i350, in_$i351, in_$i352, in_$i353, in_$p354, in_$i355, in_$i356, in_$i357, in_$p358, in_$p359, in_$i360, in_$i361, in_$i362, in_$i363, in_$i364, in_$p365, in_$i366, in_$i367, in_$i368, in_$i369, in_$i370, in_$i371, in_$i373, in_$i374, in_$i375, in_$p376, in_$p377, in_$i378, in_$i379, in_$i380, in_$i381, in_$i382, in_$i383, in_$p384, in_$i385, in_$i386, in_$i387, in_$p388, in_$i389, in_$i390, in_$i392, in_$i393, in_$i342, in_vslice_dummy_var_205, in_vslice_dummy_var_206;
    goto $bb121, exit;

  $bb121:
    assume {:verifier.code 0} true;
    goto corral_source_split_6009;

  $bb129:
    assume out_$i393 == 1;
    assume {:verifier.code 0} true;
    out_$i342 := out_$i392;
    goto $bb129_dummy;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb129;

  corral_source_split_6067:
    assume {:verifier.code 0} true;
    out_$i393 := $slt.i32(out_$i392, in_$i340);
    goto corral_source_split_6068;

  $bb128:
    assume {:verifier.code 0} true;
    out_$i392 := $add.i32(out_$i342, 1);
    call {:si_unique_call 858} {:cexpr "k"} boogie_si_record_i32(out_$i392);
    goto corral_source_split_6067;

  $bb127:
    assume !(out_$i375 == 1);
    assume {:verifier.code 0} true;
    goto $bb128;

  corral_source_split_6065:
    assume {:verifier.code 0} true;
    goto $bb128;

  corral_source_split_6064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 857} out_vslice_dummy_var_206 := printk.ref.ref.i32.i32(.str.132, .str.124, out_$i386, out_$i390);
    goto corral_source_split_6065;

  corral_source_split_6063:
    assume {:verifier.code 0} true;
    out_$i390 := $zext.i8.i32(out_$i389);
    goto corral_source_split_6064;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    out_$i389 := $load.i8($M.28, out_$p388);
    goto corral_source_split_6063;

  corral_source_split_6061:
    assume {:verifier.code 0} true;
    out_$p388 := $add.ref($add.ref(in_$p5, $mul.ref(0, 26)), $mul.ref(out_$i387, 1));
    goto corral_source_split_6062;

  corral_source_split_6060:
    assume {:verifier.code 0} true;
    out_$i387 := $sext.i32.i64(out_$i342);
    goto corral_source_split_6061;

  corral_source_split_6059:
    assume {:verifier.code 0} true;
    out_$i386 := $zext.i8.i32(out_$i385);
    goto corral_source_split_6060;

  corral_source_split_6058:
    assume {:verifier.code 0} true;
    out_$i385 := $load.i8($M.8, out_$p384);
    goto corral_source_split_6059;

  corral_source_split_6057:
    assume {:verifier.code 0} true;
    out_$p384 := $add.ref(out_$p377, $mul.ref(out_$i383, 1));
    goto corral_source_split_6058;

  corral_source_split_6056:
    assume {:verifier.code 0} true;
    out_$i383 := $sext.i32.i64(out_$i382);
    goto corral_source_split_6057;

  corral_source_split_6055:
    assume {:verifier.code 0} true;
    out_$i382 := $add.i32(out_$i379, out_$i381);
    goto corral_source_split_6056;

  corral_source_split_6054:
    assume {:verifier.code 0} true;
    out_$i381 := $add.i32(out_$i380, 1);
    goto corral_source_split_6055;

  corral_source_split_6053:
    assume {:verifier.code 0} true;
    out_$i380 := $add.i32(out_$i342, in_$i338);
    goto corral_source_split_6054;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    out_$i379 := $mul.i32(out_$i378, 8);
    goto corral_source_split_6053;

  corral_source_split_6051:
    assume {:verifier.code 0} true;
    out_$i378 := $zext.i16.i32(in_$i278);
    goto corral_source_split_6052;

  corral_source_split_6050:
    assume {:verifier.code 0} true;
    out_$p377 := $load.ref($M.8, out_$p376);
    goto corral_source_split_6051;

  corral_source_split_6049:
    assume {:verifier.code 0} true;
    out_$p376 := $add.ref($add.ref(in_$p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6050;

  $bb126:
    assume out_$i375 == 1;
    goto corral_source_split_6049;

  corral_source_split_6047:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb126, $bb127;

  corral_source_split_6046:
    assume {:verifier.code 0} true;
    out_$i375 := $ne.i32(out_$i374, 0);
    goto corral_source_split_6047;

  corral_source_split_6045:
    assume {:verifier.code 0} true;
    out_$i374 := $and.i32(out_$i373, 4);
    goto corral_source_split_6046;

  $bb125:
    assume {:verifier.code 0} true;
    out_$i373 := $M.10;
    goto corral_source_split_6045;

  $bb124:
    assume !(out_$i357 == 1);
    assume {:verifier.code 0} true;
    goto $bb125;

  corral_source_split_6043:
    assume {:verifier.code 0} true;
    goto $bb125;

  corral_source_split_6042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 856} out_vslice_dummy_var_205 := printk.ref.ref.i32.i32(.str.132, .str.124, out_$i367, out_$i371);
    goto corral_source_split_6043;

  corral_source_split_6041:
    assume {:verifier.code 0} true;
    out_$i371 := $add.i32(out_$i369, out_$i370);
    goto corral_source_split_6042;

  corral_source_split_6040:
    assume {:verifier.code 0} true;
    out_$i370 := $add.i32(out_$i342, in_$i338);
    goto corral_source_split_6041;

  corral_source_split_6039:
    assume {:verifier.code 0} true;
    out_$i369 := $mul.i32(out_$i368, 8);
    goto corral_source_split_6040;

  corral_source_split_6038:
    assume {:verifier.code 0} true;
    out_$i368 := $zext.i16.i32(in_$i278);
    goto corral_source_split_6039;

  corral_source_split_6037:
    assume {:verifier.code 0} true;
    out_$i367 := $zext.i8.i32(out_$i366);
    goto corral_source_split_6038;

  corral_source_split_6036:
    assume {:verifier.code 0} true;
    out_$i366 := $load.i8($M.8, out_$p365);
    goto corral_source_split_6037;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    out_$p365 := $add.ref(out_$p359, $mul.ref(out_$i364, 1));
    goto corral_source_split_6036;

  corral_source_split_6034:
    assume {:verifier.code 0} true;
    out_$i364 := $sext.i32.i64(out_$i363);
    goto corral_source_split_6035;

  corral_source_split_6033:
    assume {:verifier.code 0} true;
    out_$i363 := $add.i32(out_$i361, out_$i362);
    goto corral_source_split_6034;

  corral_source_split_6032:
    assume {:verifier.code 0} true;
    out_$i362 := $add.i32(out_$i342, in_$i338);
    goto corral_source_split_6033;

  corral_source_split_6031:
    assume {:verifier.code 0} true;
    out_$i361 := $mul.i32(out_$i360, 8);
    goto corral_source_split_6032;

  corral_source_split_6030:
    assume {:verifier.code 0} true;
    out_$i360 := $zext.i16.i32(in_$i278);
    goto corral_source_split_6031;

  corral_source_split_6029:
    assume {:verifier.code 0} true;
    out_$p359 := $load.ref($M.8, out_$p358);
    goto corral_source_split_6030;

  corral_source_split_6028:
    assume {:verifier.code 0} true;
    out_$p358 := $add.ref($add.ref(in_$p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6029;

  $bb123:
    assume out_$i357 == 1;
    goto corral_source_split_6028;

  corral_source_split_6026:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb123, $bb124;

  corral_source_split_6025:
    assume {:verifier.code 0} true;
    out_$i357 := $ne.i32(out_$i356, 0);
    goto corral_source_split_6026;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    out_$i356 := $and.i32(out_$i355, 4);
    goto corral_source_split_6025;

  corral_source_split_6023:
    assume {:verifier.code 0} true;
    out_$i355 := $M.10;
    goto corral_source_split_6024;

  corral_source_split_6022:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, out_$p354, out_$i345);
    goto corral_source_split_6023;

  corral_source_split_6021:
    assume {:verifier.code 0} true;
    out_$p354 := $add.ref(out_$p347, $mul.ref(out_$i353, 1));
    goto corral_source_split_6022;

  corral_source_split_6020:
    assume {:verifier.code 0} true;
    out_$i353 := $sext.i32.i64(out_$i352);
    goto corral_source_split_6021;

  corral_source_split_6019:
    assume {:verifier.code 0} true;
    out_$i352 := $add.i32(out_$i349, out_$i351);
    goto corral_source_split_6020;

  corral_source_split_6018:
    assume {:verifier.code 0} true;
    out_$i351 := $add.i32(out_$i350, 1);
    goto corral_source_split_6019;

  corral_source_split_6017:
    assume {:verifier.code 0} true;
    out_$i350 := $add.i32(out_$i342, in_$i338);
    goto corral_source_split_6018;

  corral_source_split_6016:
    assume {:verifier.code 0} true;
    out_$i349 := $mul.i32(out_$i348, 8);
    goto corral_source_split_6017;

  corral_source_split_6015:
    assume {:verifier.code 0} true;
    out_$i348 := $zext.i16.i32(in_$i278);
    goto corral_source_split_6016;

  corral_source_split_6014:
    assume {:verifier.code 0} true;
    out_$p347 := $load.ref($M.8, out_$p346);
    goto corral_source_split_6015;

  corral_source_split_6013:
    assume {:verifier.code 0} true;
    out_$p346 := $add.ref($add.ref(in_$p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6014;

  corral_source_split_6012:
    assume {:verifier.code 0} true;
    out_$i345 := $load.i8($M.28, out_$p344);
    goto corral_source_split_6013;

  corral_source_split_6011:
    assume {:verifier.code 0} true;
    out_$p344 := $add.ref($add.ref(in_$p5, $mul.ref(0, 26)), $mul.ref(out_$i343, 1));
    goto corral_source_split_6012;

  $bb122:
    assume {:verifier.code 0} true;
    out_$i343 := $sext.i32.i64(out_$i342);
    goto corral_source_split_6011;

  corral_source_split_6009:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb129_dummy:
    call {:si_unique_call 1} out_$i343, out_$p344, out_$i345, out_$p346, out_$p347, out_$i348, out_$i349, out_$i350, out_$i351, out_$i352, out_$i353, out_$p354, out_$i355, out_$i356, out_$i357, out_$p358, out_$p359, out_$i360, out_$i361, out_$i362, out_$i363, out_$i364, out_$p365, out_$i366, out_$i367, out_$i368, out_$i369, out_$i370, out_$i371, out_$i373, out_$i374, out_$i375, out_$p376, out_$p377, out_$i378, out_$i379, out_$i380, out_$i381, out_$i382, out_$i383, out_$p384, out_$i385, out_$i386, out_$i387, out_$p388, out_$i389, out_$i390, out_$i392, out_$i393, out_$i342, out_vslice_dummy_var_205, out_vslice_dummy_var_206 := mxl111sf_i2c_hw_xfer_msg_loop_$bb121(in_$p1, in_$p5, in_$i338, in_$i340, out_$i343, out_$p344, out_$i345, out_$p346, out_$p347, out_$i348, out_$i349, out_$i350, out_$i351, out_$i352, out_$i353, out_$p354, out_$i355, out_$i356, out_$i357, out_$p358, out_$p359, out_$i360, out_$i361, out_$i362, out_$i363, out_$i364, out_$p365, out_$i366, out_$i367, out_$i368, out_$i369, out_$i370, out_$i371, out_$i373, out_$i374, out_$i375, out_$p376, out_$p377, out_$i378, out_$i379, out_$i380, out_$i381, out_$i382, out_$i383, out_$p384, out_$i385, out_$i386, out_$i387, out_$p388, out_$i389, out_$i390, out_$i392, out_$i393, out_$i342, in_$i278, out_vslice_dummy_var_205, out_vslice_dummy_var_206);
    return;

  exit:
    return;
}



procedure mxl111sf_i2c_hw_xfer_msg_loop_$bb121(in_$p1: ref, in_$p5: ref, in_$i338: i32, in_$i340: i32, in_$i343: i64, in_$p344: ref, in_$i345: i8, in_$p346: ref, in_$p347: ref, in_$i348: i32, in_$i349: i32, in_$i350: i32, in_$i351: i32, in_$i352: i32, in_$i353: i64, in_$p354: ref, in_$i355: i32, in_$i356: i32, in_$i357: i1, in_$p358: ref, in_$p359: ref, in_$i360: i32, in_$i361: i32, in_$i362: i32, in_$i363: i32, in_$i364: i64, in_$p365: ref, in_$i366: i8, in_$i367: i32, in_$i368: i32, in_$i369: i32, in_$i370: i32, in_$i371: i32, in_$i373: i32, in_$i374: i32, in_$i375: i1, in_$p376: ref, in_$p377: ref, in_$i378: i32, in_$i379: i32, in_$i380: i32, in_$i381: i32, in_$i382: i32, in_$i383: i64, in_$p384: ref, in_$i385: i8, in_$i386: i32, in_$i387: i64, in_$p388: ref, in_$i389: i8, in_$i390: i32, in_$i392: i32, in_$i393: i1, in_$i342: i32, in_$i278: i16, in_vslice_dummy_var_205: i32, in_vslice_dummy_var_206: i32) returns (out_$i343: i64, out_$p344: ref, out_$i345: i8, out_$p346: ref, out_$p347: ref, out_$i348: i32, out_$i349: i32, out_$i350: i32, out_$i351: i32, out_$i352: i32, out_$i353: i64, out_$p354: ref, out_$i355: i32, out_$i356: i32, out_$i357: i1, out_$p358: ref, out_$p359: ref, out_$i360: i32, out_$i361: i32, out_$i362: i32, out_$i363: i32, out_$i364: i64, out_$p365: ref, out_$i366: i8, out_$i367: i32, out_$i368: i32, out_$i369: i32, out_$i370: i32, out_$i371: i32, out_$i373: i32, out_$i374: i32, out_$i375: i1, out_$p376: ref, out_$p377: ref, out_$i378: i32, out_$i379: i32, out_$i380: i32, out_$i381: i32, out_$i382: i32, out_$i383: i64, out_$p384: ref, out_$i385: i8, out_$i386: i32, out_$i387: i64, out_$p388: ref, out_$i389: i8, out_$i390: i32, out_$i392: i32, out_$i393: i1, out_$i342: i32, out_vslice_dummy_var_205: i32, out_vslice_dummy_var_206: i32);
  modifies $M.8;



implementation mxl111sf_i2c_hw_xfer_msg_loop_$bb107(in_$p0: ref, in_$p1: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$i299: i32, in_$i300: i32, in_$i301: i64, in_$p302: ref, in_$i303: i8, in_$i304: i64, in_$p305: ref, in_$i306: i64, in_$p307: ref, in_$i308: i8, in_$i309: i32, in_$i310: i1, in_$i311: i1, in_$i312: i32, in_$i313: i32, in_$i314: i1, in_$i316: i32, in_$i317: i32, in_$i318: i64, in_$p319: ref, in_$i320: i8, in_$p321: ref, in_$p322: ref, in_$i323: i32, in_$i324: i32, in_$i325: i32, in_$i326: i64, in_$p327: ref, in_$i328: i8, in_$i329: i32, in_$i330: i32, in_$i331: i32, in_$i332: i8, in_$p333: ref, in_$i334: i32, in_$i335: i8, in_$i336: i32, in_$i337: i1, in_$i338: i32, in_$i395: i32, in_$i396: i32, in_$i397: i1, in_$i400: i32, in_$i401: i32, in_$i402: i64, in_$p403: ref, in_$i404: i8, in_$p405: ref, in_$p406: ref, in_$i407: i32, in_$i408: i32, in_$i409: i32, in_$i410: i64, in_$p411: ref, in_$i399: i32, in_$i413: i32, in_$i414: i32, in_$i415: i64, in_$p416: ref, in_$i417: i8, in_$p418: ref, in_$p419: ref, in_$i420: i32, in_$i421: i32, in_$i422: i32, in_$i423: i64, in_$p424: ref, in_$i412: i32, in_$i425: i32, in_$i426: i1, in_$i298: i32, in_$i278: i16, in_vslice_dummy_var_204: i32, in_vslice_dummy_var_207: i32) returns (out_$i299: i32, out_$i300: i32, out_$i301: i64, out_$p302: ref, out_$i303: i8, out_$i304: i64, out_$p305: ref, out_$i306: i64, out_$p307: ref, out_$i308: i8, out_$i309: i32, out_$i310: i1, out_$i311: i1, out_$i312: i32, out_$i313: i32, out_$i314: i1, out_$i316: i32, out_$i317: i32, out_$i318: i64, out_$p319: ref, out_$i320: i8, out_$p321: ref, out_$p322: ref, out_$i323: i32, out_$i324: i32, out_$i325: i32, out_$i326: i64, out_$p327: ref, out_$i328: i8, out_$i329: i32, out_$i330: i32, out_$i331: i32, out_$i332: i8, out_$p333: ref, out_$i334: i32, out_$i335: i8, out_$i336: i32, out_$i337: i1, out_$i338: i32, out_$i395: i32, out_$i396: i32, out_$i397: i1, out_$i400: i32, out_$i401: i32, out_$i402: i64, out_$p403: ref, out_$i404: i8, out_$p405: ref, out_$p406: ref, out_$i407: i32, out_$i408: i32, out_$i409: i32, out_$i410: i64, out_$p411: ref, out_$i399: i32, out_$i413: i32, out_$i414: i32, out_$i415: i64, out_$p416: ref, out_$i417: i8, out_$p418: ref, out_$p419: ref, out_$i420: i32, out_$i421: i32, out_$i422: i32, out_$i423: i64, out_$p424: ref, out_$i412: i32, out_$i425: i32, out_$i426: i1, out_$i298: i32, out_vslice_dummy_var_204: i32, out_vslice_dummy_var_207: i32)
{

  entry:
    out_$i299, out_$i300, out_$i301, out_$p302, out_$i303, out_$i304, out_$p305, out_$i306, out_$p307, out_$i308, out_$i309, out_$i310, out_$i311, out_$i312, out_$i313, out_$i314, out_$i316, out_$i317, out_$i318, out_$p319, out_$i320, out_$p321, out_$p322, out_$i323, out_$i324, out_$i325, out_$i326, out_$p327, out_$i328, out_$i329, out_$i330, out_$i331, out_$i332, out_$p333, out_$i334, out_$i335, out_$i336, out_$i337, out_$i338, out_$i395, out_$i396, out_$i397, out_$i400, out_$i401, out_$i402, out_$p403, out_$i404, out_$p405, out_$p406, out_$i407, out_$i408, out_$i409, out_$i410, out_$p411, out_$i399, out_$i413, out_$i414, out_$i415, out_$p416, out_$i417, out_$p418, out_$p419, out_$i420, out_$i421, out_$i422, out_$i423, out_$p424, out_$i412, out_$i425, out_$i426, out_$i298, out_vslice_dummy_var_204, out_vslice_dummy_var_207 := in_$i299, in_$i300, in_$i301, in_$p302, in_$i303, in_$i304, in_$p305, in_$i306, in_$p307, in_$i308, in_$i309, in_$i310, in_$i311, in_$i312, in_$i313, in_$i314, in_$i316, in_$i317, in_$i318, in_$p319, in_$i320, in_$p321, in_$p322, in_$i323, in_$i324, in_$i325, in_$i326, in_$p327, in_$i328, in_$i329, in_$i330, in_$i331, in_$i332, in_$p333, in_$i334, in_$i335, in_$i336, in_$i337, in_$i338, in_$i395, in_$i396, in_$i397, in_$i400, in_$i401, in_$i402, in_$p403, in_$i404, in_$p405, in_$p406, in_$i407, in_$i408, in_$i409, in_$i410, in_$p411, in_$i399, in_$i413, in_$i414, in_$i415, in_$p416, in_$i417, in_$p418, in_$p419, in_$i420, in_$i421, in_$i422, in_$i423, in_$p424, in_$i412, in_$i425, in_$i426, in_$i298, in_vslice_dummy_var_204, in_vslice_dummy_var_207;
    goto $bb107, exit;

  $bb107:
    assume {:verifier.code 0} true;
    goto corral_source_split_5918;

  $bb139:
    assume out_$i426 == 1;
    assume {:verifier.code 0} true;
    out_$i298 := out_$i425;
    goto $bb139_dummy;

  corral_source_split_6086:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb139;

  corral_source_split_6085:
    assume {:verifier.code 0} true;
    out_$i426 := $sle.i32(out_$i425, 7);
    goto corral_source_split_6086;

  corral_source_split_6084:
    assume {:verifier.code 0} true;
    out_$i425 := $add.i32(out_$i412, 1);
    call {:si_unique_call 861} {:cexpr "i"} boogie_si_record_i32(out_$i425);
    goto corral_source_split_6085;

  $bb138:
    assume {:verifier.code 0} true;
    goto corral_source_split_6084;

  corral_source_split_5949:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, out_$p424, out_$i417);
    assume {:verifier.code 0} true;
    out_$i412 := out_$i298;
    goto $bb138;

  corral_source_split_6082:
    assume {:verifier.code 0} true;
    out_$i412 := out_$i399;
    goto $bb138;

  $bb137:
    assume {:verifier.code 0} true;
    goto corral_source_split_6082;

  corral_source_split_5968:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, out_$p411, out_$i404);
    assume {:verifier.code 0} true;
    out_$i399 := out_$i298;
    goto $bb137;

  $bb136:
    assume {:verifier.code 0} true;
    out_$i399 := out_$i298;
    goto $bb137;

  $bb135:
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb134:
    assume !(out_$i397 == 1);
    assume {:verifier.code 0} true;
    goto $bb135;

  corral_source_split_6080:
    assume {:verifier.code 0} true;
    goto $bb135;

  corral_source_split_6079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 860} out_vslice_dummy_var_207 := printk.ref.ref(.str.133, .str.124);
    goto corral_source_split_6080;

  $bb133:
    assume out_$i397 == 1;
    goto corral_source_split_6079;

  corral_source_split_6005:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb133, $bb134;

  corral_source_split_6004:
    assume {:verifier.code 0} true;
    out_$i397 := $ne.i32(out_$i396, 0);
    goto corral_source_split_6005;

  corral_source_split_6003:
    assume {:verifier.code 0} true;
    out_$i396 := $and.i32(out_$i395, 4);
    goto corral_source_split_6004;

  corral_source_split_6002:
    assume {:verifier.code 0} true;
    out_$i395 := $M.10;
    goto corral_source_split_6003;

  $bb117:
    assume !(out_$i337 == 1);
    goto corral_source_split_6002;

  corral_source_split_5995:
    assume {:verifier.code 0} true;
    out_$i338 := out_$i298;
    assume true;
    goto $bb117;

  corral_source_split_5994:
    assume {:verifier.code 0} true;
    out_$i337 := $eq.i32(out_$i336, 1);
    goto corral_source_split_5995;

  corral_source_split_5993:
    assume {:verifier.code 0} true;
    out_$i336 := $zext.i8.i32(out_$i335);
    goto corral_source_split_5994;

  corral_source_split_5992:
    assume {:verifier.code 0} true;
    out_$i335 := $trunc.i32.i8(out_$i334);
    call {:si_unique_call 855} {:cexpr "ret_status"} boogie_si_record_i8(out_$i335);
    goto corral_source_split_5993;

  corral_source_split_5991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 853} out_$i334 := mxl111sf_i2c_readagain(in_$p0, out_$i332, out_$p333);
    call {:si_unique_call 854} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i334);
    goto corral_source_split_5992;

  corral_source_split_5990:
    assume {:verifier.code 0} true;
    out_$p333 := $bitcast.ref.ref(in_$p5);
    goto corral_source_split_5991;

  corral_source_split_5989:
    assume {:verifier.code 0} true;
    out_$i332 := $trunc.i32.i8(out_$i331);
    goto corral_source_split_5990;

  corral_source_split_5988:
    assume {:verifier.code 0} true;
    out_$i331 := $add.i32(out_$i330, 8);
    goto corral_source_split_5989;

  corral_source_split_5987:
    assume {:verifier.code 0} true;
    out_$i330 := $xor.i32(out_$i329, $sub.i32(0, 1));
    goto corral_source_split_5988;

  corral_source_split_5986:
    assume {:verifier.code 0} true;
    out_$i329 := $zext.i8.i32(out_$i328);
    goto corral_source_split_5987;

  corral_source_split_5985:
    assume {:verifier.code 0} true;
    out_$i328 := $trunc.i32.i8(out_$i298);
    goto corral_source_split_5986;

  corral_source_split_5984:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, out_$p327, out_$i320);
    goto corral_source_split_5985;

  corral_source_split_5983:
    assume {:verifier.code 0} true;
    out_$p327 := $add.ref(out_$p322, $mul.ref(out_$i326, 1));
    goto corral_source_split_5984;

  corral_source_split_5982:
    assume {:verifier.code 0} true;
    out_$i326 := $sext.i32.i64(out_$i325);
    goto corral_source_split_5983;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    out_$i325 := $add.i32(out_$i324, out_$i298);
    goto corral_source_split_5982;

  corral_source_split_5980:
    assume {:verifier.code 0} true;
    out_$i324 := $mul.i32(out_$i323, 8);
    goto corral_source_split_5981;

  corral_source_split_5979:
    assume {:verifier.code 0} true;
    out_$i323 := $zext.i16.i32(in_$i278);
    goto corral_source_split_5980;

  corral_source_split_5978:
    assume {:verifier.code 0} true;
    out_$p322 := $load.ref($M.8, out_$p321);
    goto corral_source_split_5979;

  corral_source_split_5977:
    assume {:verifier.code 0} true;
    out_$p321 := $add.ref($add.ref(in_$p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5978;

  corral_source_split_5976:
    assume {:verifier.code 0} true;
    out_$i320 := $load.i8($M.26, out_$p319);
    goto corral_source_split_5977;

  corral_source_split_5975:
    assume {:verifier.code 0} true;
    out_$p319 := $add.ref($add.ref(in_$p3, $mul.ref(0, 24)), $mul.ref(out_$i318, 1));
    goto corral_source_split_5976;

  corral_source_split_5974:
    assume {:verifier.code 0} true;
    out_$i318 := $sext.i32.i64(out_$i317);
    goto corral_source_split_5975;

  corral_source_split_5973:
    assume {:verifier.code 0} true;
    out_$i317 := $add.i32(out_$i316, 1);
    goto corral_source_split_5974;

  $bb115:
    assume {:verifier.code 0} true;
    out_$i316 := $mul.i32(out_$i298, 3);
    goto corral_source_split_5973;

  $bb114:
    assume !(out_$i314 == 1);
    assume {:verifier.code 0} true;
    goto $bb115;

  corral_source_split_5971:
    assume {:verifier.code 0} true;
    goto $bb115;

  corral_source_split_5970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 852} out_vslice_dummy_var_204 := printk.ref.ref.i32(.str.131, .str.124, out_$i298);
    goto corral_source_split_5971;

  $bb113:
    assume out_$i314 == 1;
    goto corral_source_split_5970;

  corral_source_split_5954:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb113, $bb114;

  corral_source_split_5953:
    assume {:verifier.code 0} true;
    out_$i314 := $ne.i32(out_$i313, 0);
    goto corral_source_split_5954;

  corral_source_split_5952:
    assume {:verifier.code 0} true;
    out_$i313 := $and.i32(out_$i312, 4);
    goto corral_source_split_5953;

  corral_source_split_5951:
    assume {:verifier.code 0} true;
    out_$i312 := $M.10;
    goto corral_source_split_5952;

  $bb111:
    assume out_$i311 == 1;
    goto corral_source_split_5951;

  corral_source_split_5935:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb111, $bb112;

  corral_source_split_5934:
    assume {:verifier.code 0} true;
    out_$i311 := $sle.i32(out_$i298, 6);
    goto corral_source_split_5935;

  $bb109:
    assume out_$i310 == 1;
    goto corral_source_split_5934;

  corral_source_split_5932:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb109, $bb110;

  corral_source_split_5931:
    assume {:verifier.code 0} true;
    out_$i310 := $eq.i32(out_$i309, 4);
    goto corral_source_split_5932;

  corral_source_split_5930:
    assume {:verifier.code 0} true;
    out_$i309 := $zext.i8.i32(out_$i308);
    goto corral_source_split_5931;

  corral_source_split_5929:
    assume {:verifier.code 0} true;
    out_$i308 := $load.i8($M.27, out_$p307);
    goto corral_source_split_5930;

  corral_source_split_5928:
    assume {:verifier.code 0} true;
    out_$p307 := $add.ref($add.ref(in_$p4, $mul.ref(0, 8)), $mul.ref(out_$i306, 1));
    goto corral_source_split_5929;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    out_$i306 := $sext.i32.i64(out_$i298);
    goto corral_source_split_5928;

  corral_source_split_5926:
    assume {:verifier.code 0} true;
    $M.27 := $store.i8($M.27, out_$p305, out_$i303);
    goto corral_source_split_5927;

  corral_source_split_5925:
    assume {:verifier.code 0} true;
    out_$p305 := $add.ref($add.ref(in_$p4, $mul.ref(0, 8)), $mul.ref(out_$i304, 1));
    goto corral_source_split_5926;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    out_$i304 := $sext.i32.i64(out_$i298);
    goto corral_source_split_5925;

  corral_source_split_5923:
    assume {:verifier.code 0} true;
    out_$i303 := $load.i8($M.26, out_$p302);
    goto corral_source_split_5924;

  corral_source_split_5922:
    assume {:verifier.code 0} true;
    out_$p302 := $add.ref($add.ref(in_$p3, $mul.ref(0, 24)), $mul.ref(out_$i301, 1));
    goto corral_source_split_5923;

  corral_source_split_5921:
    assume {:verifier.code 0} true;
    out_$i301 := $sext.i32.i64(out_$i300);
    goto corral_source_split_5922;

  corral_source_split_5920:
    assume {:verifier.code 0} true;
    out_$i300 := $add.i32(out_$i299, 2);
    goto corral_source_split_5921;

  $bb108:
    assume {:verifier.code 0} true;
    out_$i299 := $mul.i32(out_$i298, 3);
    goto corral_source_split_5920;

  corral_source_split_5918:
    assume {:verifier.code 0} true;
    goto $bb108;

  corral_source_split_5967:
    assume {:verifier.code 0} true;
    out_$p411 := $add.ref(out_$p406, $mul.ref(out_$i410, 1));
    goto corral_source_split_5968;

  corral_source_split_5966:
    assume {:verifier.code 0} true;
    out_$i410 := $sext.i32.i64(out_$i409);
    goto corral_source_split_5967;

  corral_source_split_5965:
    assume {:verifier.code 0} true;
    out_$i409 := $add.i32(out_$i408, out_$i298);
    goto corral_source_split_5966;

  corral_source_split_5964:
    assume {:verifier.code 0} true;
    out_$i408 := $mul.i32(out_$i407, 8);
    goto corral_source_split_5965;

  corral_source_split_5963:
    assume {:verifier.code 0} true;
    out_$i407 := $zext.i16.i32(in_$i278);
    goto corral_source_split_5964;

  corral_source_split_5962:
    assume {:verifier.code 0} true;
    out_$p406 := $load.ref($M.8, out_$p405);
    goto corral_source_split_5963;

  corral_source_split_5961:
    assume {:verifier.code 0} true;
    out_$p405 := $add.ref($add.ref(in_$p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5962;

  corral_source_split_5960:
    assume {:verifier.code 0} true;
    out_$i404 := $load.i8($M.26, out_$p403);
    goto corral_source_split_5961;

  corral_source_split_5959:
    assume {:verifier.code 0} true;
    out_$p403 := $add.ref($add.ref(in_$p3, $mul.ref(0, 24)), $mul.ref(out_$i402, 1));
    goto corral_source_split_5960;

  corral_source_split_5958:
    assume {:verifier.code 0} true;
    out_$i402 := $sext.i32.i64(out_$i401);
    goto corral_source_split_5959;

  corral_source_split_5957:
    assume {:verifier.code 0} true;
    out_$i401 := $add.i32(out_$i400, 1);
    goto corral_source_split_5958;

  corral_source_split_5956:
    assume {:verifier.code 0} true;
    out_$i400 := $mul.i32(out_$i298, 3);
    goto corral_source_split_5957;

  $bb112:
    assume !(out_$i311 == 1);
    goto corral_source_split_5956;

  corral_source_split_5948:
    assume {:verifier.code 0} true;
    out_$p424 := $add.ref(out_$p419, $mul.ref(out_$i423, 1));
    goto corral_source_split_5949;

  corral_source_split_5947:
    assume {:verifier.code 0} true;
    out_$i423 := $sext.i32.i64(out_$i422);
    goto corral_source_split_5948;

  corral_source_split_5946:
    assume {:verifier.code 0} true;
    out_$i422 := $add.i32(out_$i421, out_$i298);
    goto corral_source_split_5947;

  corral_source_split_5945:
    assume {:verifier.code 0} true;
    out_$i421 := $mul.i32(out_$i420, 8);
    goto corral_source_split_5946;

  corral_source_split_5944:
    assume {:verifier.code 0} true;
    out_$i420 := $zext.i16.i32(in_$i278);
    goto corral_source_split_5945;

  corral_source_split_5943:
    assume {:verifier.code 0} true;
    out_$p419 := $load.ref($M.8, out_$p418);
    goto corral_source_split_5944;

  corral_source_split_5942:
    assume {:verifier.code 0} true;
    out_$p418 := $add.ref($add.ref(in_$p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5943;

  corral_source_split_5941:
    assume {:verifier.code 0} true;
    out_$i417 := $load.i8($M.26, out_$p416);
    goto corral_source_split_5942;

  corral_source_split_5940:
    assume {:verifier.code 0} true;
    out_$p416 := $add.ref($add.ref(in_$p3, $mul.ref(0, 24)), $mul.ref(out_$i415, 1));
    goto corral_source_split_5941;

  corral_source_split_5939:
    assume {:verifier.code 0} true;
    out_$i415 := $sext.i32.i64(out_$i414);
    goto corral_source_split_5940;

  corral_source_split_5938:
    assume {:verifier.code 0} true;
    out_$i414 := $add.i32(out_$i413, 1);
    goto corral_source_split_5939;

  corral_source_split_5937:
    assume {:verifier.code 0} true;
    out_$i413 := $mul.i32(out_$i298, 3);
    goto corral_source_split_5938;

  $bb110:
    assume !(out_$i310 == 1);
    goto corral_source_split_5937;

  $bb139_dummy:
    call {:si_unique_call 1} out_$i299, out_$i300, out_$i301, out_$p302, out_$i303, out_$i304, out_$p305, out_$i306, out_$p307, out_$i308, out_$i309, out_$i310, out_$i311, out_$i312, out_$i313, out_$i314, out_$i316, out_$i317, out_$i318, out_$p319, out_$i320, out_$p321, out_$p322, out_$i323, out_$i324, out_$i325, out_$i326, out_$p327, out_$i328, out_$i329, out_$i330, out_$i331, out_$i332, out_$p333, out_$i334, out_$i335, out_$i336, out_$i337, out_$i338, out_$i395, out_$i396, out_$i397, out_$i400, out_$i401, out_$i402, out_$p403, out_$i404, out_$p405, out_$p406, out_$i407, out_$i408, out_$i409, out_$i410, out_$p411, out_$i399, out_$i413, out_$i414, out_$i415, out_$p416, out_$i417, out_$p418, out_$p419, out_$i420, out_$i421, out_$i422, out_$i423, out_$p424, out_$i412, out_$i425, out_$i426, out_$i298, out_vslice_dummy_var_204, out_vslice_dummy_var_207 := mxl111sf_i2c_hw_xfer_msg_loop_$bb107(in_$p0, in_$p1, in_$p3, in_$p4, in_$p5, out_$i299, out_$i300, out_$i301, out_$p302, out_$i303, out_$i304, out_$p305, out_$i306, out_$p307, out_$i308, out_$i309, out_$i310, out_$i311, out_$i312, out_$i313, out_$i314, out_$i316, out_$i317, out_$i318, out_$p319, out_$i320, out_$p321, out_$p322, out_$i323, out_$i324, out_$i325, out_$i326, out_$p327, out_$i328, out_$i329, out_$i330, out_$i331, out_$i332, out_$p333, out_$i334, out_$i335, out_$i336, out_$i337, out_$i338, out_$i395, out_$i396, out_$i397, out_$i400, out_$i401, out_$i402, out_$p403, out_$i404, out_$p405, out_$p406, out_$i407, out_$i408, out_$i409, out_$i410, out_$p411, out_$i399, out_$i413, out_$i414, out_$i415, out_$p416, out_$i417, out_$p418, out_$p419, out_$i420, out_$i421, out_$i422, out_$i423, out_$p424, out_$i412, out_$i425, out_$i426, out_$i298, in_$i278, out_vslice_dummy_var_204, out_vslice_dummy_var_207);
    return;

  exit:
    return;
}



procedure mxl111sf_i2c_hw_xfer_msg_loop_$bb107(in_$p0: ref, in_$p1: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$i299: i32, in_$i300: i32, in_$i301: i64, in_$p302: ref, in_$i303: i8, in_$i304: i64, in_$p305: ref, in_$i306: i64, in_$p307: ref, in_$i308: i8, in_$i309: i32, in_$i310: i1, in_$i311: i1, in_$i312: i32, in_$i313: i32, in_$i314: i1, in_$i316: i32, in_$i317: i32, in_$i318: i64, in_$p319: ref, in_$i320: i8, in_$p321: ref, in_$p322: ref, in_$i323: i32, in_$i324: i32, in_$i325: i32, in_$i326: i64, in_$p327: ref, in_$i328: i8, in_$i329: i32, in_$i330: i32, in_$i331: i32, in_$i332: i8, in_$p333: ref, in_$i334: i32, in_$i335: i8, in_$i336: i32, in_$i337: i1, in_$i338: i32, in_$i395: i32, in_$i396: i32, in_$i397: i1, in_$i400: i32, in_$i401: i32, in_$i402: i64, in_$p403: ref, in_$i404: i8, in_$p405: ref, in_$p406: ref, in_$i407: i32, in_$i408: i32, in_$i409: i32, in_$i410: i64, in_$p411: ref, in_$i399: i32, in_$i413: i32, in_$i414: i32, in_$i415: i64, in_$p416: ref, in_$i417: i8, in_$p418: ref, in_$p419: ref, in_$i420: i32, in_$i421: i32, in_$i422: i32, in_$i423: i64, in_$p424: ref, in_$i412: i32, in_$i425: i32, in_$i426: i1, in_$i298: i32, in_$i278: i16, in_vslice_dummy_var_204: i32, in_vslice_dummy_var_207: i32) returns (out_$i299: i32, out_$i300: i32, out_$i301: i64, out_$p302: ref, out_$i303: i8, out_$i304: i64, out_$p305: ref, out_$i306: i64, out_$p307: ref, out_$i308: i8, out_$i309: i32, out_$i310: i1, out_$i311: i1, out_$i312: i32, out_$i313: i32, out_$i314: i1, out_$i316: i32, out_$i317: i32, out_$i318: i64, out_$p319: ref, out_$i320: i8, out_$p321: ref, out_$p322: ref, out_$i323: i32, out_$i324: i32, out_$i325: i32, out_$i326: i64, out_$p327: ref, out_$i328: i8, out_$i329: i32, out_$i330: i32, out_$i331: i32, out_$i332: i8, out_$p333: ref, out_$i334: i32, out_$i335: i8, out_$i336: i32, out_$i337: i1, out_$i338: i32, out_$i395: i32, out_$i396: i32, out_$i397: i1, out_$i400: i32, out_$i401: i32, out_$i402: i64, out_$p403: ref, out_$i404: i8, out_$p405: ref, out_$p406: ref, out_$i407: i32, out_$i408: i32, out_$i409: i32, out_$i410: i64, out_$p411: ref, out_$i399: i32, out_$i413: i32, out_$i414: i32, out_$i415: i64, out_$p416: ref, out_$i417: i8, out_$p418: ref, out_$p419: ref, out_$i420: i32, out_$i421: i32, out_$i422: i32, out_$i423: i64, out_$p424: ref, out_$i412: i32, out_$i425: i32, out_$i426: i1, out_$i298: i32, out_vslice_dummy_var_204: i32, out_vslice_dummy_var_207: i32);
  modifies $M.8, $M.15, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.28, $CurrAddr, $M.27;



implementation mxl111sf_i2c_hw_xfer_msg_loop_$bb95(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$i276: i32, in_$p279: ref, in_$p280: ref, in_$p281: ref, in_$p282: ref, in_$p283: ref, in_$i284: i32, in_$i285: i8, in_$i286: i32, in_$i287: i1, in_$i299: i32, in_$i300: i32, in_$i301: i64, in_$p302: ref, in_$i303: i8, in_$i304: i64, in_$p305: ref, in_$i306: i64, in_$p307: ref, in_$i308: i8, in_$i309: i32, in_$i310: i1, in_$i311: i1, in_$i312: i32, in_$i313: i32, in_$i314: i1, in_$i316: i32, in_$i317: i32, in_$i318: i64, in_$p319: ref, in_$i320: i8, in_$p321: ref, in_$p322: ref, in_$i323: i32, in_$i324: i32, in_$i325: i32, in_$i326: i64, in_$p327: ref, in_$i328: i8, in_$i329: i32, in_$i330: i32, in_$i331: i32, in_$i332: i8, in_$p333: ref, in_$i334: i32, in_$i335: i8, in_$i336: i32, in_$i337: i1, in_$i338: i32, in_$i339: i32, in_$i340: i32, in_$i341: i1, in_$i343: i64, in_$p344: ref, in_$i345: i8, in_$p346: ref, in_$p347: ref, in_$i348: i32, in_$i349: i32, in_$i350: i32, in_$i351: i32, in_$i352: i32, in_$i353: i64, in_$p354: ref, in_$i355: i32, in_$i356: i32, in_$i357: i1, in_$p358: ref, in_$p359: ref, in_$i360: i32, in_$i361: i32, in_$i362: i32, in_$i363: i32, in_$i364: i64, in_$p365: ref, in_$i366: i8, in_$i367: i32, in_$i368: i32, in_$i369: i32, in_$i370: i32, in_$i371: i32, in_$i373: i32, in_$i374: i32, in_$i375: i1, in_$p376: ref, in_$p377: ref, in_$i378: i32, in_$i379: i32, in_$i380: i32, in_$i381: i32, in_$i382: i32, in_$i383: i64, in_$p384: ref, in_$i385: i8, in_$i386: i32, in_$i387: i64, in_$p388: ref, in_$i389: i8, in_$i390: i32, in_$i392: i32, in_$i393: i1, in_$i342: i32, in_$i395: i32, in_$i396: i32, in_$i397: i1, in_$i400: i32, in_$i401: i32, in_$i402: i64, in_$p403: ref, in_$i404: i8, in_$p405: ref, in_$p406: ref, in_$i407: i32, in_$i408: i32, in_$i409: i32, in_$i410: i64, in_$p411: ref, in_$i399: i32, in_$i413: i32, in_$i414: i32, in_$i415: i64, in_$p416: ref, in_$i417: i8, in_$p418: ref, in_$p419: ref, in_$i420: i32, in_$i421: i32, in_$i422: i32, in_$i423: i64, in_$p424: ref, in_$i412: i32, in_$i425: i32, in_$i426: i1, in_$i298: i32, in_$i394: i16, in_$i427: i32, in_$i428: i32, in_$i429: i16, in_$i430: i32, in_$i431: i1, in_$i278: i16, in_$p566: ref, in_$p567: ref, in_$p568: ref, in_$p569: ref, in_$p570: ref, in_$p571: ref, in_$p572: ref, in_$p573: ref, in_$p574: ref, in_$p575: ref, in_$p576: ref, in_$p577: ref, in_$p578: ref, in_$p579: ref, in_$p580: ref, in_$p581: ref, in_$p582: ref, in_$p583: ref, in_$p584: ref, in_$p585: ref, in_$p586: ref, in_vslice_dummy_var_204: i32, in_vslice_dummy_var_205: i32, in_vslice_dummy_var_206: i32, in_vslice_dummy_var_207: i32) returns (out_$p279: ref, out_$p280: ref, out_$p281: ref, out_$p282: ref, out_$p283: ref, out_$i284: i32, out_$i285: i8, out_$i286: i32, out_$i287: i1, out_$i299: i32, out_$i300: i32, out_$i301: i64, out_$p302: ref, out_$i303: i8, out_$i304: i64, out_$p305: ref, out_$i306: i64, out_$p307: ref, out_$i308: i8, out_$i309: i32, out_$i310: i1, out_$i311: i1, out_$i312: i32, out_$i313: i32, out_$i314: i1, out_$i316: i32, out_$i317: i32, out_$i318: i64, out_$p319: ref, out_$i320: i8, out_$p321: ref, out_$p322: ref, out_$i323: i32, out_$i324: i32, out_$i325: i32, out_$i326: i64, out_$p327: ref, out_$i328: i8, out_$i329: i32, out_$i330: i32, out_$i331: i32, out_$i332: i8, out_$p333: ref, out_$i334: i32, out_$i335: i8, out_$i336: i32, out_$i337: i1, out_$i338: i32, out_$i339: i32, out_$i340: i32, out_$i341: i1, out_$i343: i64, out_$p344: ref, out_$i345: i8, out_$p346: ref, out_$p347: ref, out_$i348: i32, out_$i349: i32, out_$i350: i32, out_$i351: i32, out_$i352: i32, out_$i353: i64, out_$p354: ref, out_$i355: i32, out_$i356: i32, out_$i357: i1, out_$p358: ref, out_$p359: ref, out_$i360: i32, out_$i361: i32, out_$i362: i32, out_$i363: i32, out_$i364: i64, out_$p365: ref, out_$i366: i8, out_$i367: i32, out_$i368: i32, out_$i369: i32, out_$i370: i32, out_$i371: i32, out_$i373: i32, out_$i374: i32, out_$i375: i1, out_$p376: ref, out_$p377: ref, out_$i378: i32, out_$i379: i32, out_$i380: i32, out_$i381: i32, out_$i382: i32, out_$i383: i64, out_$p384: ref, out_$i385: i8, out_$i386: i32, out_$i387: i64, out_$p388: ref, out_$i389: i8, out_$i390: i32, out_$i392: i32, out_$i393: i1, out_$i342: i32, out_$i395: i32, out_$i396: i32, out_$i397: i1, out_$i400: i32, out_$i401: i32, out_$i402: i64, out_$p403: ref, out_$i404: i8, out_$p405: ref, out_$p406: ref, out_$i407: i32, out_$i408: i32, out_$i409: i32, out_$i410: i64, out_$p411: ref, out_$i399: i32, out_$i413: i32, out_$i414: i32, out_$i415: i64, out_$p416: ref, out_$i417: i8, out_$p418: ref, out_$p419: ref, out_$i420: i32, out_$i421: i32, out_$i422: i32, out_$i423: i64, out_$p424: ref, out_$i412: i32, out_$i425: i32, out_$i426: i1, out_$i298: i32, out_$i394: i16, out_$i427: i32, out_$i428: i32, out_$i429: i16, out_$i430: i32, out_$i431: i1, out_$i278: i16, out_$p566: ref, out_$p567: ref, out_$p568: ref, out_$p569: ref, out_$p570: ref, out_$p571: ref, out_$p572: ref, out_$p573: ref, out_$p574: ref, out_$p575: ref, out_$p576: ref, out_$p577: ref, out_$p578: ref, out_$p579: ref, out_$p580: ref, out_$p581: ref, out_$p582: ref, out_$p583: ref, out_$p584: ref, out_$p585: ref, out_$p586: ref, out_vslice_dummy_var_204: i32, out_vslice_dummy_var_205: i32, out_vslice_dummy_var_206: i32, out_vslice_dummy_var_207: i32)
{

  entry:
    out_$p279, out_$p280, out_$p281, out_$p282, out_$p283, out_$i284, out_$i285, out_$i286, out_$i287, out_$i299, out_$i300, out_$i301, out_$p302, out_$i303, out_$i304, out_$p305, out_$i306, out_$p307, out_$i308, out_$i309, out_$i310, out_$i311, out_$i312, out_$i313, out_$i314, out_$i316, out_$i317, out_$i318, out_$p319, out_$i320, out_$p321, out_$p322, out_$i323, out_$i324, out_$i325, out_$i326, out_$p327, out_$i328, out_$i329, out_$i330, out_$i331, out_$i332, out_$p333, out_$i334, out_$i335, out_$i336, out_$i337, out_$i338, out_$i339, out_$i340, out_$i341, out_$i343, out_$p344, out_$i345, out_$p346, out_$p347, out_$i348, out_$i349, out_$i350, out_$i351, out_$i352, out_$i353, out_$p354, out_$i355, out_$i356, out_$i357, out_$p358, out_$p359, out_$i360, out_$i361, out_$i362, out_$i363, out_$i364, out_$p365, out_$i366, out_$i367, out_$i368, out_$i369, out_$i370, out_$i371, out_$i373, out_$i374, out_$i375, out_$p376, out_$p377, out_$i378, out_$i379, out_$i380, out_$i381, out_$i382, out_$i383, out_$p384, out_$i385, out_$i386, out_$i387, out_$p388, out_$i389, out_$i390, out_$i392, out_$i393, out_$i342, out_$i395, out_$i396, out_$i397, out_$i400, out_$i401, out_$i402, out_$p403, out_$i404, out_$p405, out_$p406, out_$i407, out_$i408, out_$i409, out_$i410, out_$p411, out_$i399, out_$i413, out_$i414, out_$i415, out_$p416, out_$i417, out_$p418, out_$p419, out_$i420, out_$i421, out_$i422, out_$i423, out_$p424, out_$i412, out_$i425, out_$i426, out_$i298, out_$i394, out_$i427, out_$i428, out_$i429, out_$i430, out_$i431, out_$i278, out_$p566, out_$p567, out_$p568, out_$p569, out_$p570, out_$p571, out_$p572, out_$p573, out_$p574, out_$p575, out_$p576, out_$p577, out_$p578, out_$p579, out_$p580, out_$p581, out_$p582, out_$p583, out_$p584, out_$p585, out_$p586, out_vslice_dummy_var_204, out_vslice_dummy_var_205, out_vslice_dummy_var_206, out_vslice_dummy_var_207 := in_$p279, in_$p280, in_$p281, in_$p282, in_$p283, in_$i284, in_$i285, in_$i286, in_$i287, in_$i299, in_$i300, in_$i301, in_$p302, in_$i303, in_$i304, in_$p305, in_$i306, in_$p307, in_$i308, in_$i309, in_$i310, in_$i311, in_$i312, in_$i313, in_$i314, in_$i316, in_$i317, in_$i318, in_$p319, in_$i320, in_$p321, in_$p322, in_$i323, in_$i324, in_$i325, in_$i326, in_$p327, in_$i328, in_$i329, in_$i330, in_$i331, in_$i332, in_$p333, in_$i334, in_$i335, in_$i336, in_$i337, in_$i338, in_$i339, in_$i340, in_$i341, in_$i343, in_$p344, in_$i345, in_$p346, in_$p347, in_$i348, in_$i349, in_$i350, in_$i351, in_$i352, in_$i353, in_$p354, in_$i355, in_$i356, in_$i357, in_$p358, in_$p359, in_$i360, in_$i361, in_$i362, in_$i363, in_$i364, in_$p365, in_$i366, in_$i367, in_$i368, in_$i369, in_$i370, in_$i371, in_$i373, in_$i374, in_$i375, in_$p376, in_$p377, in_$i378, in_$i379, in_$i380, in_$i381, in_$i382, in_$i383, in_$p384, in_$i385, in_$i386, in_$i387, in_$p388, in_$i389, in_$i390, in_$i392, in_$i393, in_$i342, in_$i395, in_$i396, in_$i397, in_$i400, in_$i401, in_$i402, in_$p403, in_$i404, in_$p405, in_$p406, in_$i407, in_$i408, in_$i409, in_$i410, in_$p411, in_$i399, in_$i413, in_$i414, in_$i415, in_$p416, in_$i417, in_$p418, in_$p419, in_$i420, in_$i421, in_$i422, in_$i423, in_$p424, in_$i412, in_$i425, in_$i426, in_$i298, in_$i394, in_$i427, in_$i428, in_$i429, in_$i430, in_$i431, in_$i278, in_$p566, in_$p567, in_$p568, in_$p569, in_$p570, in_$p571, in_$p572, in_$p573, in_$p574, in_$p575, in_$p576, in_$p577, in_$p578, in_$p579, in_$p580, in_$p581, in_$p582, in_$p583, in_$p584, in_$p585, in_$p586, in_vslice_dummy_var_204, in_vslice_dummy_var_205, in_vslice_dummy_var_206, in_vslice_dummy_var_207;
    goto $bb95, exit;

  $bb95:
    assume {:verifier.code 0} true;
    goto corral_source_split_5877;

  $bb142:
    assume out_$i431 == 1;
    assume {:verifier.code 0} true;
    out_$i278 := out_$i429;
    goto $bb142_dummy;

  corral_source_split_6077:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb142;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    out_$i431 := $slt.i32(out_$i430, in_$i276);
    goto corral_source_split_6077;

  corral_source_split_6075:
    assume {:verifier.code 0} true;
    out_$i430 := $zext.i16.i32(out_$i429);
    goto corral_source_split_6076;

  corral_source_split_6074:
    assume {:verifier.code 0} true;
    out_$i429 := $trunc.i32.i16(out_$i428);
    call {:si_unique_call 859} {:cexpr "index"} boogie_si_record_i16(out_$i429);
    goto corral_source_split_6075;

  corral_source_split_6073:
    assume {:verifier.code 0} true;
    out_$i428 := $add.i32(out_$i427, 1);
    goto corral_source_split_6074;

  corral_source_split_6072:
    assume {:verifier.code 0} true;
    out_$i427 := $zext.i16.i32(out_$i394);
    goto corral_source_split_6073;

  $bb132:
    assume {:verifier.code 0} true;
    goto corral_source_split_6072;

  $bb141:
    assume {:verifier.code 0} true;
    out_$i394 := out_$i278;
    goto $bb132;

  $bb131:
    assume {:verifier.code 0} true;
    out_$i394 := out_$i278;
    goto $bb132;

  $bb120:
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb119:
    assume {:verifier.code 0} true;
    assume !(out_$i341 == 1);
    goto $bb120;

  corral_source_split_6070:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb130:
    assume !(out_$i393 == 1);
    goto corral_source_split_6070;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb129, $bb130;

  corral_source_split_6067:
    assume {:verifier.code 0} true;
    out_$i393 := $slt.i32(out_$i392, out_$i340);
    goto corral_source_split_6068;

  $bb128:
    assume {:verifier.code 0} true;
    out_$i392 := $add.i32(out_$i342, 1);
    call {:si_unique_call 858} {:cexpr "k"} boogie_si_record_i32(out_$i392);
    goto corral_source_split_6067;

  $bb127:
    assume !(out_$i375 == 1);
    assume {:verifier.code 0} true;
    goto $bb128;

  corral_source_split_6065:
    assume {:verifier.code 0} true;
    goto $bb128;

  corral_source_split_6064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 857} out_vslice_dummy_var_206 := printk.ref.ref.i32.i32(.str.132, .str.124, out_$i386, out_$i390);
    goto corral_source_split_6065;

  corral_source_split_6063:
    assume {:verifier.code 0} true;
    out_$i390 := $zext.i8.i32(out_$i389);
    goto corral_source_split_6064;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    out_$i389 := $load.i8($M.28, out_$p388);
    goto corral_source_split_6063;

  corral_source_split_6061:
    assume {:verifier.code 0} true;
    out_$p388 := $add.ref($add.ref(in_$p5, $mul.ref(0, 26)), $mul.ref(out_$i387, 1));
    goto corral_source_split_6062;

  corral_source_split_6060:
    assume {:verifier.code 0} true;
    out_$i387 := $sext.i32.i64(out_$i342);
    goto corral_source_split_6061;

  corral_source_split_6059:
    assume {:verifier.code 0} true;
    out_$i386 := $zext.i8.i32(out_$i385);
    goto corral_source_split_6060;

  corral_source_split_6058:
    assume {:verifier.code 0} true;
    out_$i385 := $load.i8($M.8, out_$p384);
    goto corral_source_split_6059;

  corral_source_split_6057:
    assume {:verifier.code 0} true;
    out_$p384 := $add.ref(out_$p377, $mul.ref(out_$i383, 1));
    goto corral_source_split_6058;

  corral_source_split_6056:
    assume {:verifier.code 0} true;
    out_$i383 := $sext.i32.i64(out_$i382);
    goto corral_source_split_6057;

  corral_source_split_6055:
    assume {:verifier.code 0} true;
    out_$i382 := $add.i32(out_$i379, out_$i381);
    goto corral_source_split_6056;

  corral_source_split_6054:
    assume {:verifier.code 0} true;
    out_$i381 := $add.i32(out_$i380, 1);
    goto corral_source_split_6055;

  corral_source_split_6053:
    assume {:verifier.code 0} true;
    out_$i380 := $add.i32(out_$i342, out_$i338);
    goto corral_source_split_6054;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    out_$i379 := $mul.i32(out_$i378, 8);
    goto corral_source_split_6053;

  corral_source_split_6051:
    assume {:verifier.code 0} true;
    out_$i378 := $zext.i16.i32(out_$i278);
    goto corral_source_split_6052;

  corral_source_split_6050:
    assume {:verifier.code 0} true;
    out_$p377 := $load.ref($M.8, out_$p376);
    goto corral_source_split_6051;

  corral_source_split_6049:
    assume {:verifier.code 0} true;
    out_$p376 := $add.ref($add.ref(in_$p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6050;

  $bb126:
    assume out_$i375 == 1;
    goto corral_source_split_6049;

  corral_source_split_6047:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb126, $bb127;

  corral_source_split_6046:
    assume {:verifier.code 0} true;
    out_$i375 := $ne.i32(out_$i374, 0);
    goto corral_source_split_6047;

  corral_source_split_6045:
    assume {:verifier.code 0} true;
    out_$i374 := $and.i32(out_$i373, 4);
    goto corral_source_split_6046;

  $bb125:
    assume {:verifier.code 0} true;
    out_$i373 := $M.10;
    goto corral_source_split_6045;

  $bb124:
    assume !(out_$i357 == 1);
    assume {:verifier.code 0} true;
    goto $bb125;

  corral_source_split_6043:
    assume {:verifier.code 0} true;
    goto $bb125;

  corral_source_split_6042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 856} out_vslice_dummy_var_205 := printk.ref.ref.i32.i32(.str.132, .str.124, out_$i367, out_$i371);
    goto corral_source_split_6043;

  corral_source_split_6041:
    assume {:verifier.code 0} true;
    out_$i371 := $add.i32(out_$i369, out_$i370);
    goto corral_source_split_6042;

  corral_source_split_6040:
    assume {:verifier.code 0} true;
    out_$i370 := $add.i32(out_$i342, out_$i338);
    goto corral_source_split_6041;

  corral_source_split_6039:
    assume {:verifier.code 0} true;
    out_$i369 := $mul.i32(out_$i368, 8);
    goto corral_source_split_6040;

  corral_source_split_6038:
    assume {:verifier.code 0} true;
    out_$i368 := $zext.i16.i32(out_$i278);
    goto corral_source_split_6039;

  corral_source_split_6037:
    assume {:verifier.code 0} true;
    out_$i367 := $zext.i8.i32(out_$i366);
    goto corral_source_split_6038;

  corral_source_split_6036:
    assume {:verifier.code 0} true;
    out_$i366 := $load.i8($M.8, out_$p365);
    goto corral_source_split_6037;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    out_$p365 := $add.ref(out_$p359, $mul.ref(out_$i364, 1));
    goto corral_source_split_6036;

  corral_source_split_6034:
    assume {:verifier.code 0} true;
    out_$i364 := $sext.i32.i64(out_$i363);
    goto corral_source_split_6035;

  corral_source_split_6033:
    assume {:verifier.code 0} true;
    out_$i363 := $add.i32(out_$i361, out_$i362);
    goto corral_source_split_6034;

  corral_source_split_6032:
    assume {:verifier.code 0} true;
    out_$i362 := $add.i32(out_$i342, out_$i338);
    goto corral_source_split_6033;

  corral_source_split_6031:
    assume {:verifier.code 0} true;
    out_$i361 := $mul.i32(out_$i360, 8);
    goto corral_source_split_6032;

  corral_source_split_6030:
    assume {:verifier.code 0} true;
    out_$i360 := $zext.i16.i32(out_$i278);
    goto corral_source_split_6031;

  corral_source_split_6029:
    assume {:verifier.code 0} true;
    out_$p359 := $load.ref($M.8, out_$p358);
    goto corral_source_split_6030;

  corral_source_split_6028:
    assume {:verifier.code 0} true;
    out_$p358 := $add.ref($add.ref(in_$p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6029;

  $bb123:
    assume out_$i357 == 1;
    goto corral_source_split_6028;

  corral_source_split_6026:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb123, $bb124;

  corral_source_split_6025:
    assume {:verifier.code 0} true;
    out_$i357 := $ne.i32(out_$i356, 0);
    goto corral_source_split_6026;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    out_$i356 := $and.i32(out_$i355, 4);
    goto corral_source_split_6025;

  corral_source_split_6023:
    assume {:verifier.code 0} true;
    out_$i355 := $M.10;
    goto corral_source_split_6024;

  corral_source_split_6022:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, out_$p354, out_$i345);
    goto corral_source_split_6023;

  corral_source_split_6021:
    assume {:verifier.code 0} true;
    out_$p354 := $add.ref(out_$p347, $mul.ref(out_$i353, 1));
    goto corral_source_split_6022;

  corral_source_split_6020:
    assume {:verifier.code 0} true;
    out_$i353 := $sext.i32.i64(out_$i352);
    goto corral_source_split_6021;

  corral_source_split_6019:
    assume {:verifier.code 0} true;
    out_$i352 := $add.i32(out_$i349, out_$i351);
    goto corral_source_split_6020;

  corral_source_split_6018:
    assume {:verifier.code 0} true;
    out_$i351 := $add.i32(out_$i350, 1);
    goto corral_source_split_6019;

  corral_source_split_6017:
    assume {:verifier.code 0} true;
    out_$i350 := $add.i32(out_$i342, out_$i338);
    goto corral_source_split_6018;

  corral_source_split_6016:
    assume {:verifier.code 0} true;
    out_$i349 := $mul.i32(out_$i348, 8);
    goto corral_source_split_6017;

  corral_source_split_6015:
    assume {:verifier.code 0} true;
    out_$i348 := $zext.i16.i32(out_$i278);
    goto corral_source_split_6016;

  corral_source_split_6014:
    assume {:verifier.code 0} true;
    out_$p347 := $load.ref($M.8, out_$p346);
    goto corral_source_split_6015;

  corral_source_split_6013:
    assume {:verifier.code 0} true;
    out_$p346 := $add.ref($add.ref(in_$p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6014;

  corral_source_split_6012:
    assume {:verifier.code 0} true;
    out_$i345 := $load.i8($M.28, out_$p344);
    goto corral_source_split_6013;

  corral_source_split_6011:
    assume {:verifier.code 0} true;
    out_$p344 := $add.ref($add.ref(in_$p5, $mul.ref(0, 26)), $mul.ref(out_$i343, 1));
    goto corral_source_split_6012;

  $bb122:
    assume {:verifier.code 0} true;
    out_$i343 := $sext.i32.i64(out_$i342);
    goto corral_source_split_6011;

  corral_source_split_6009:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb121:
    call out_$i343, out_$p344, out_$i345, out_$p346, out_$p347, out_$i348, out_$i349, out_$i350, out_$i351, out_$i352, out_$i353, out_$p354, out_$i355, out_$i356, out_$i357, out_$p358, out_$p359, out_$i360, out_$i361, out_$i362, out_$i363, out_$i364, out_$p365, out_$i366, out_$i367, out_$i368, out_$i369, out_$i370, out_$i371, out_$i373, out_$i374, out_$i375, out_$p376, out_$p377, out_$i378, out_$i379, out_$i380, out_$i381, out_$i382, out_$i383, out_$p384, out_$i385, out_$i386, out_$i387, out_$p388, out_$i389, out_$i390, out_$i392, out_$i393, out_$i342, out_vslice_dummy_var_205, out_vslice_dummy_var_206 := mxl111sf_i2c_hw_xfer_msg_loop_$bb121(in_$p1, in_$p5, out_$i338, out_$i340, out_$i343, out_$p344, out_$i345, out_$p346, out_$p347, out_$i348, out_$i349, out_$i350, out_$i351, out_$i352, out_$i353, out_$p354, out_$i355, out_$i356, out_$i357, out_$p358, out_$p359, out_$i360, out_$i361, out_$i362, out_$i363, out_$i364, out_$p365, out_$i366, out_$i367, out_$i368, out_$i369, out_$i370, out_$i371, out_$i373, out_$i374, out_$i375, out_$p376, out_$p377, out_$i378, out_$i379, out_$i380, out_$i381, out_$i382, out_$i383, out_$p384, out_$i385, out_$i386, out_$i387, out_$p388, out_$i389, out_$i390, out_$i392, out_$i393, out_$i342, out_$i278, out_vslice_dummy_var_205, out_vslice_dummy_var_206);
    goto $bb121_last;

  $bb121_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6009;

  corral_source_split_6007:
    assume {:verifier.code 0} true;
    out_$i342 := 0;
    goto $bb121;

  $bb129:
    assume out_$i393 == 1;
    assume {:verifier.code 0} true;
    out_$i342 := out_$i392;
    assume false;
    return;

  $bb118:
    assume out_$i341 == 1;
    goto corral_source_split_6007;

  corral_source_split_6000:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb118, $bb119;

  corral_source_split_5999:
    assume {:verifier.code 0} true;
    out_$i341 := $slt.i32(0, out_$i340);
    goto corral_source_split_6000;

  corral_source_split_5998:
    assume {:verifier.code 0} true;
    out_$i340 := $add.i32(out_$i339, 8);
    goto corral_source_split_5999;

  corral_source_split_5997:
    assume {:verifier.code 0} true;
    out_$i339 := $xor.i32(out_$i338, $sub.i32(0, 1));
    goto corral_source_split_5998;

  $bb116:
    assume out_$i337 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_5997;

  corral_source_split_5995:
    assume {:verifier.code 0} true;
    out_$i338 := out_$i298;
    assume true;
    goto $bb116, $bb117;

  corral_source_split_5994:
    assume {:verifier.code 0} true;
    out_$i337 := $eq.i32(out_$i336, 1);
    goto corral_source_split_5995;

  corral_source_split_5993:
    assume {:verifier.code 0} true;
    out_$i336 := $zext.i8.i32(out_$i335);
    goto corral_source_split_5994;

  corral_source_split_5992:
    assume {:verifier.code 0} true;
    out_$i335 := $trunc.i32.i8(out_$i334);
    call {:si_unique_call 855} {:cexpr "ret_status"} boogie_si_record_i8(out_$i335);
    goto corral_source_split_5993;

  corral_source_split_5991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 853} out_$i334 := mxl111sf_i2c_readagain(in_$p0, out_$i332, out_$p333);
    call {:si_unique_call 854} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i334);
    goto corral_source_split_5992;

  corral_source_split_5990:
    assume {:verifier.code 0} true;
    out_$p333 := $bitcast.ref.ref(in_$p5);
    goto corral_source_split_5991;

  corral_source_split_5989:
    assume {:verifier.code 0} true;
    out_$i332 := $trunc.i32.i8(out_$i331);
    goto corral_source_split_5990;

  corral_source_split_5988:
    assume {:verifier.code 0} true;
    out_$i331 := $add.i32(out_$i330, 8);
    goto corral_source_split_5989;

  corral_source_split_5987:
    assume {:verifier.code 0} true;
    out_$i330 := $xor.i32(out_$i329, $sub.i32(0, 1));
    goto corral_source_split_5988;

  corral_source_split_5986:
    assume {:verifier.code 0} true;
    out_$i329 := $zext.i8.i32(out_$i328);
    goto corral_source_split_5987;

  corral_source_split_5985:
    assume {:verifier.code 0} true;
    out_$i328 := $trunc.i32.i8(out_$i298);
    goto corral_source_split_5986;

  corral_source_split_5984:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, out_$p327, out_$i320);
    goto corral_source_split_5985;

  corral_source_split_5983:
    assume {:verifier.code 0} true;
    out_$p327 := $add.ref(out_$p322, $mul.ref(out_$i326, 1));
    goto corral_source_split_5984;

  corral_source_split_5982:
    assume {:verifier.code 0} true;
    out_$i326 := $sext.i32.i64(out_$i325);
    goto corral_source_split_5983;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    out_$i325 := $add.i32(out_$i324, out_$i298);
    goto corral_source_split_5982;

  corral_source_split_5980:
    assume {:verifier.code 0} true;
    out_$i324 := $mul.i32(out_$i323, 8);
    goto corral_source_split_5981;

  corral_source_split_5979:
    assume {:verifier.code 0} true;
    out_$i323 := $zext.i16.i32(out_$i278);
    goto corral_source_split_5980;

  corral_source_split_5978:
    assume {:verifier.code 0} true;
    out_$p322 := $load.ref($M.8, out_$p321);
    goto corral_source_split_5979;

  corral_source_split_5977:
    assume {:verifier.code 0} true;
    out_$p321 := $add.ref($add.ref(in_$p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5978;

  corral_source_split_5976:
    assume {:verifier.code 0} true;
    out_$i320 := $load.i8($M.26, out_$p319);
    goto corral_source_split_5977;

  corral_source_split_5975:
    assume {:verifier.code 0} true;
    out_$p319 := $add.ref($add.ref(in_$p3, $mul.ref(0, 24)), $mul.ref(out_$i318, 1));
    goto corral_source_split_5976;

  corral_source_split_5974:
    assume {:verifier.code 0} true;
    out_$i318 := $sext.i32.i64(out_$i317);
    goto corral_source_split_5975;

  corral_source_split_5973:
    assume {:verifier.code 0} true;
    out_$i317 := $add.i32(out_$i316, 1);
    goto corral_source_split_5974;

  $bb115:
    assume {:verifier.code 0} true;
    out_$i316 := $mul.i32(out_$i298, 3);
    goto corral_source_split_5973;

  $bb114:
    assume !(out_$i314 == 1);
    assume {:verifier.code 0} true;
    goto $bb115;

  corral_source_split_5971:
    assume {:verifier.code 0} true;
    goto $bb115;

  corral_source_split_5970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 852} out_vslice_dummy_var_204 := printk.ref.ref.i32(.str.131, .str.124, out_$i298);
    goto corral_source_split_5971;

  $bb113:
    assume out_$i314 == 1;
    goto corral_source_split_5970;

  corral_source_split_5954:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb113, $bb114;

  corral_source_split_5953:
    assume {:verifier.code 0} true;
    out_$i314 := $ne.i32(out_$i313, 0);
    goto corral_source_split_5954;

  corral_source_split_5952:
    assume {:verifier.code 0} true;
    out_$i313 := $and.i32(out_$i312, 4);
    goto corral_source_split_5953;

  corral_source_split_5951:
    assume {:verifier.code 0} true;
    out_$i312 := $M.10;
    goto corral_source_split_5952;

  $bb111:
    assume out_$i311 == 1;
    goto corral_source_split_5951;

  corral_source_split_5935:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb111, $bb112;

  corral_source_split_5934:
    assume {:verifier.code 0} true;
    out_$i311 := $sle.i32(out_$i298, 6);
    goto corral_source_split_5935;

  $bb109:
    assume out_$i310 == 1;
    goto corral_source_split_5934;

  corral_source_split_5932:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb109, $bb110;

  corral_source_split_5931:
    assume {:verifier.code 0} true;
    out_$i310 := $eq.i32(out_$i309, 4);
    goto corral_source_split_5932;

  corral_source_split_5930:
    assume {:verifier.code 0} true;
    out_$i309 := $zext.i8.i32(out_$i308);
    goto corral_source_split_5931;

  corral_source_split_5929:
    assume {:verifier.code 0} true;
    out_$i308 := $load.i8($M.27, out_$p307);
    goto corral_source_split_5930;

  corral_source_split_5928:
    assume {:verifier.code 0} true;
    out_$p307 := $add.ref($add.ref(in_$p4, $mul.ref(0, 8)), $mul.ref(out_$i306, 1));
    goto corral_source_split_5929;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    out_$i306 := $sext.i32.i64(out_$i298);
    goto corral_source_split_5928;

  corral_source_split_5926:
    assume {:verifier.code 0} true;
    $M.27 := $store.i8($M.27, out_$p305, out_$i303);
    goto corral_source_split_5927;

  corral_source_split_5925:
    assume {:verifier.code 0} true;
    out_$p305 := $add.ref($add.ref(in_$p4, $mul.ref(0, 8)), $mul.ref(out_$i304, 1));
    goto corral_source_split_5926;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    out_$i304 := $sext.i32.i64(out_$i298);
    goto corral_source_split_5925;

  corral_source_split_5923:
    assume {:verifier.code 0} true;
    out_$i303 := $load.i8($M.26, out_$p302);
    goto corral_source_split_5924;

  corral_source_split_5922:
    assume {:verifier.code 0} true;
    out_$p302 := $add.ref($add.ref(in_$p3, $mul.ref(0, 24)), $mul.ref(out_$i301, 1));
    goto corral_source_split_5923;

  corral_source_split_5921:
    assume {:verifier.code 0} true;
    out_$i301 := $sext.i32.i64(out_$i300);
    goto corral_source_split_5922;

  corral_source_split_5920:
    assume {:verifier.code 0} true;
    out_$i300 := $add.i32(out_$i299, 2);
    goto corral_source_split_5921;

  $bb108:
    assume {:verifier.code 0} true;
    out_$i299 := $mul.i32(out_$i298, 3);
    goto corral_source_split_5920;

  corral_source_split_5918:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb107:
    call out_$i299, out_$i300, out_$i301, out_$p302, out_$i303, out_$i304, out_$p305, out_$i306, out_$p307, out_$i308, out_$i309, out_$i310, out_$i311, out_$i312, out_$i313, out_$i314, out_$i316, out_$i317, out_$i318, out_$p319, out_$i320, out_$p321, out_$p322, out_$i323, out_$i324, out_$i325, out_$i326, out_$p327, out_$i328, out_$i329, out_$i330, out_$i331, out_$i332, out_$p333, out_$i334, out_$i335, out_$i336, out_$i337, out_$i338, out_$i395, out_$i396, out_$i397, out_$i400, out_$i401, out_$i402, out_$p403, out_$i404, out_$p405, out_$p406, out_$i407, out_$i408, out_$i409, out_$i410, out_$p411, out_$i399, out_$i413, out_$i414, out_$i415, out_$p416, out_$i417, out_$p418, out_$p419, out_$i420, out_$i421, out_$i422, out_$i423, out_$p424, out_$i412, out_$i425, out_$i426, out_$i298, out_vslice_dummy_var_204, out_vslice_dummy_var_207 := mxl111sf_i2c_hw_xfer_msg_loop_$bb107(in_$p0, in_$p1, in_$p3, in_$p4, in_$p5, out_$i299, out_$i300, out_$i301, out_$p302, out_$i303, out_$i304, out_$p305, out_$i306, out_$p307, out_$i308, out_$i309, out_$i310, out_$i311, out_$i312, out_$i313, out_$i314, out_$i316, out_$i317, out_$i318, out_$p319, out_$i320, out_$p321, out_$p322, out_$i323, out_$i324, out_$i325, out_$i326, out_$p327, out_$i328, out_$i329, out_$i330, out_$i331, out_$i332, out_$p333, out_$i334, out_$i335, out_$i336, out_$i337, out_$i338, out_$i395, out_$i396, out_$i397, out_$i400, out_$i401, out_$i402, out_$p403, out_$i404, out_$p405, out_$p406, out_$i407, out_$i408, out_$i409, out_$i410, out_$p411, out_$i399, out_$i413, out_$i414, out_$i415, out_$p416, out_$i417, out_$p418, out_$p419, out_$i420, out_$i421, out_$i422, out_$i423, out_$p424, out_$i412, out_$i425, out_$i426, out_$i298, out_$i278, out_vslice_dummy_var_204, out_vslice_dummy_var_207);
    goto $bb107_last;

  $bb107_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5918;

  $bb106:
    assume {:verifier.code 0} true;
    out_$i298 := 0;
    goto $bb107;

  $bb139:
    assume out_$i426 == 1;
    assume {:verifier.code 0} true;
    out_$i298 := out_$i425;
    assume false;
    return;

  corral_source_split_6086:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb139, $bb140;

  corral_source_split_6085:
    assume {:verifier.code 0} true;
    out_$i426 := $sle.i32(out_$i425, 7);
    goto corral_source_split_6086;

  corral_source_split_6084:
    assume {:verifier.code 0} true;
    out_$i425 := $add.i32(out_$i412, 1);
    call {:si_unique_call 861} {:cexpr "i"} boogie_si_record_i32(out_$i425);
    goto corral_source_split_6085;

  $bb138:
    assume {:verifier.code 0} true;
    goto corral_source_split_6084;

  corral_source_split_5949:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, out_$p424, out_$i417);
    assume {:verifier.code 0} true;
    out_$i412 := out_$i298;
    goto $bb138;

  corral_source_split_6082:
    assume {:verifier.code 0} true;
    out_$i412 := out_$i399;
    goto $bb138;

  $bb137:
    assume {:verifier.code 0} true;
    goto corral_source_split_6082;

  corral_source_split_5968:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, out_$p411, out_$i404);
    assume {:verifier.code 0} true;
    out_$i399 := out_$i298;
    goto $bb137;

  $bb136:
    assume {:verifier.code 0} true;
    out_$i399 := out_$i298;
    goto $bb137;

  $bb135:
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb134:
    assume !(out_$i397 == 1);
    assume {:verifier.code 0} true;
    goto $bb135;

  corral_source_split_6080:
    assume {:verifier.code 0} true;
    goto $bb135;

  corral_source_split_6079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 860} out_vslice_dummy_var_207 := printk.ref.ref(.str.133, .str.124);
    goto corral_source_split_6080;

  $bb133:
    assume out_$i397 == 1;
    goto corral_source_split_6079;

  corral_source_split_6005:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb133, $bb134;

  corral_source_split_6004:
    assume {:verifier.code 0} true;
    out_$i397 := $ne.i32(out_$i396, 0);
    goto corral_source_split_6005;

  corral_source_split_6003:
    assume {:verifier.code 0} true;
    out_$i396 := $and.i32(out_$i395, 4);
    goto corral_source_split_6004;

  corral_source_split_6002:
    assume {:verifier.code 0} true;
    out_$i395 := $M.10;
    goto corral_source_split_6003;

  $bb117:
    assume !(out_$i337 == 1);
    goto corral_source_split_6002;

  corral_source_split_5967:
    assume {:verifier.code 0} true;
    out_$p411 := $add.ref(out_$p406, $mul.ref(out_$i410, 1));
    goto corral_source_split_5968;

  corral_source_split_5966:
    assume {:verifier.code 0} true;
    out_$i410 := $sext.i32.i64(out_$i409);
    goto corral_source_split_5967;

  corral_source_split_5965:
    assume {:verifier.code 0} true;
    out_$i409 := $add.i32(out_$i408, out_$i298);
    goto corral_source_split_5966;

  corral_source_split_5964:
    assume {:verifier.code 0} true;
    out_$i408 := $mul.i32(out_$i407, 8);
    goto corral_source_split_5965;

  corral_source_split_5963:
    assume {:verifier.code 0} true;
    out_$i407 := $zext.i16.i32(out_$i278);
    goto corral_source_split_5964;

  corral_source_split_5962:
    assume {:verifier.code 0} true;
    out_$p406 := $load.ref($M.8, out_$p405);
    goto corral_source_split_5963;

  corral_source_split_5961:
    assume {:verifier.code 0} true;
    out_$p405 := $add.ref($add.ref(in_$p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5962;

  corral_source_split_5960:
    assume {:verifier.code 0} true;
    out_$i404 := $load.i8($M.26, out_$p403);
    goto corral_source_split_5961;

  corral_source_split_5959:
    assume {:verifier.code 0} true;
    out_$p403 := $add.ref($add.ref(in_$p3, $mul.ref(0, 24)), $mul.ref(out_$i402, 1));
    goto corral_source_split_5960;

  corral_source_split_5958:
    assume {:verifier.code 0} true;
    out_$i402 := $sext.i32.i64(out_$i401);
    goto corral_source_split_5959;

  corral_source_split_5957:
    assume {:verifier.code 0} true;
    out_$i401 := $add.i32(out_$i400, 1);
    goto corral_source_split_5958;

  corral_source_split_5956:
    assume {:verifier.code 0} true;
    out_$i400 := $mul.i32(out_$i298, 3);
    goto corral_source_split_5957;

  $bb112:
    assume !(out_$i311 == 1);
    goto corral_source_split_5956;

  corral_source_split_5948:
    assume {:verifier.code 0} true;
    out_$p424 := $add.ref(out_$p419, $mul.ref(out_$i423, 1));
    goto corral_source_split_5949;

  corral_source_split_5947:
    assume {:verifier.code 0} true;
    out_$i423 := $sext.i32.i64(out_$i422);
    goto corral_source_split_5948;

  corral_source_split_5946:
    assume {:verifier.code 0} true;
    out_$i422 := $add.i32(out_$i421, out_$i298);
    goto corral_source_split_5947;

  corral_source_split_5945:
    assume {:verifier.code 0} true;
    out_$i421 := $mul.i32(out_$i420, 8);
    goto corral_source_split_5946;

  corral_source_split_5944:
    assume {:verifier.code 0} true;
    out_$i420 := $zext.i16.i32(out_$i278);
    goto corral_source_split_5945;

  corral_source_split_5943:
    assume {:verifier.code 0} true;
    out_$p419 := $load.ref($M.8, out_$p418);
    goto corral_source_split_5944;

  corral_source_split_5942:
    assume {:verifier.code 0} true;
    out_$p418 := $add.ref($add.ref(in_$p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5943;

  corral_source_split_5941:
    assume {:verifier.code 0} true;
    out_$i417 := $load.i8($M.26, out_$p416);
    goto corral_source_split_5942;

  corral_source_split_5940:
    assume {:verifier.code 0} true;
    out_$p416 := $add.ref($add.ref(in_$p3, $mul.ref(0, 24)), $mul.ref(out_$i415, 1));
    goto corral_source_split_5941;

  corral_source_split_5939:
    assume {:verifier.code 0} true;
    out_$i415 := $sext.i32.i64(out_$i414);
    goto corral_source_split_5940;

  corral_source_split_5938:
    assume {:verifier.code 0} true;
    out_$i414 := $add.i32(out_$i413, 1);
    goto corral_source_split_5939;

  corral_source_split_5937:
    assume {:verifier.code 0} true;
    out_$i413 := $mul.i32(out_$i298, 3);
    goto corral_source_split_5938;

  $bb110:
    assume !(out_$i310 == 1);
    goto corral_source_split_5937;

  $bb102:
    assume !(out_$i287 == 1);
    assume {:verifier.code 0} true;
    goto $bb106;

  corral_source_split_5898:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb102;

  corral_source_split_5897:
    assume {:verifier.code 0} true;
    out_$i287 := $eq.i32(out_$i286, 1);
    goto corral_source_split_5898;

  corral_source_split_5896:
    assume {:verifier.code 0} true;
    out_$i286 := $zext.i8.i32(out_$i285);
    goto corral_source_split_5897;

  corral_source_split_5895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 849} out_$i285 := mxl111sf_i2c_check_status(in_$p0);
    call {:si_unique_call 850} {:cexpr "tmp___3"} boogie_si_record_i8(out_$i285);
    goto corral_source_split_5896;

  corral_source_split_5894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 847} out_$i284 := mxl111sf_i2c_get_data(in_$p0, 0, out_$p282, out_$p283);
    call {:si_unique_call 848} {:cexpr "ret"} boogie_si_record_i32(out_$i284);
    goto corral_source_split_5895;

  corral_source_split_5893:
    assume {:verifier.code 0} true;
    out_$p283 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_5894;

  $bb100:
    assume {:verifier.code 0} true;
    out_$p282 := $bitcast.ref.ref(in_$p2);
    goto corral_source_split_5893;

  corral_source_split_6334:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, out_$p586, 0);
    assume {:verifier.code 0} true;
    goto $bb100;

  corral_source_split_6333:
    assume {:verifier.code 0} true;
    out_$p586 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(25, 1));
    goto corral_source_split_6334;

  corral_source_split_6332:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, out_$p585, 0);
    goto corral_source_split_6333;

  corral_source_split_6331:
    assume {:verifier.code 0} true;
    out_$p585 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(24, 1));
    goto corral_source_split_6332;

  corral_source_split_6330:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, out_$p584, 12);
    goto corral_source_split_6331;

  $bb207:
    assume {:verifier.code 0} true;
    out_$p584 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(23, 1));
    goto corral_source_split_6330;

  corral_source_split_6328:
    assume {:verifier.code 0} true;
    goto $bb207;

  corral_source_split_6327:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, out_$p583, 0);
    goto corral_source_split_6328;

  corral_source_split_6326:
    assume {:verifier.code 0} true;
    out_$p583 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(22, 1));
    goto corral_source_split_6327;

  corral_source_split_6325:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, out_$p582, 0);
    goto corral_source_split_6326;

  corral_source_split_6324:
    assume {:verifier.code 0} true;
    out_$p582 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(21, 1));
    goto corral_source_split_6325;

  corral_source_split_6323:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, out_$p581, 12);
    goto corral_source_split_6324;

  $bb206:
    assume {:verifier.code 0} true;
    out_$p581 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(20, 1));
    goto corral_source_split_6323;

  corral_source_split_6321:
    assume {:verifier.code 0} true;
    goto $bb206;

  corral_source_split_6320:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, out_$p580, 0);
    goto corral_source_split_6321;

  corral_source_split_6319:
    assume {:verifier.code 0} true;
    out_$p580 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(19, 1));
    goto corral_source_split_6320;

  corral_source_split_6318:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, out_$p579, 0);
    goto corral_source_split_6319;

  corral_source_split_6317:
    assume {:verifier.code 0} true;
    out_$p579 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(18, 1));
    goto corral_source_split_6318;

  corral_source_split_6316:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, out_$p578, 12);
    goto corral_source_split_6317;

  $bb205:
    assume {:verifier.code 0} true;
    out_$p578 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(17, 1));
    goto corral_source_split_6316;

  corral_source_split_6314:
    assume {:verifier.code 0} true;
    goto $bb205;

  corral_source_split_6313:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, out_$p577, 0);
    goto corral_source_split_6314;

  corral_source_split_6312:
    assume {:verifier.code 0} true;
    out_$p577 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(16, 1));
    goto corral_source_split_6313;

  corral_source_split_6311:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, out_$p576, 0);
    goto corral_source_split_6312;

  corral_source_split_6310:
    assume {:verifier.code 0} true;
    out_$p576 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(15, 1));
    goto corral_source_split_6311;

  corral_source_split_6309:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, out_$p575, 12);
    goto corral_source_split_6310;

  $bb204:
    assume {:verifier.code 0} true;
    out_$p575 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(14, 1));
    goto corral_source_split_6309;

  corral_source_split_6307:
    assume {:verifier.code 0} true;
    goto $bb204;

  corral_source_split_6306:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, out_$p574, 0);
    goto corral_source_split_6307;

  corral_source_split_6305:
    assume {:verifier.code 0} true;
    out_$p574 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(13, 1));
    goto corral_source_split_6306;

  corral_source_split_6304:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, out_$p573, 0);
    goto corral_source_split_6305;

  corral_source_split_6303:
    assume {:verifier.code 0} true;
    out_$p573 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(12, 1));
    goto corral_source_split_6304;

  corral_source_split_6302:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, out_$p572, 12);
    goto corral_source_split_6303;

  $bb203:
    assume {:verifier.code 0} true;
    out_$p572 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(11, 1));
    goto corral_source_split_6302;

  corral_source_split_6300:
    assume {:verifier.code 0} true;
    goto $bb203;

  corral_source_split_6299:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, out_$p571, 0);
    goto corral_source_split_6300;

  corral_source_split_6298:
    assume {:verifier.code 0} true;
    out_$p571 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(10, 1));
    goto corral_source_split_6299;

  corral_source_split_6297:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, out_$p570, 0);
    goto corral_source_split_6298;

  corral_source_split_6296:
    assume {:verifier.code 0} true;
    out_$p570 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(9, 1));
    goto corral_source_split_6297;

  corral_source_split_6295:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, out_$p569, 12);
    goto corral_source_split_6296;

  $bb202:
    assume {:verifier.code 0} true;
    out_$p569 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(8, 1));
    goto corral_source_split_6295;

  corral_source_split_5891:
    assume {:verifier.code 0} true;
    goto $bb202;

  corral_source_split_5890:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, out_$p568, 0);
    goto corral_source_split_5891;

  corral_source_split_5889:
    assume {:verifier.code 0} true;
    out_$p568 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(7, 1));
    goto corral_source_split_5890;

  corral_source_split_5888:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, out_$p567, 0);
    goto corral_source_split_5889;

  corral_source_split_5887:
    assume {:verifier.code 0} true;
    out_$p567 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(6, 1));
    goto corral_source_split_5888;

  corral_source_split_5886:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, out_$p566, 12);
    goto corral_source_split_5887;

  $bb99:
    assume {:verifier.code 0} true;
    out_$p566 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(5, 1));
    goto corral_source_split_5886;

  corral_source_split_5884:
    assume {:verifier.code 0} true;
    goto $bb99;

  corral_source_split_5883:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, out_$p281, 0);
    goto corral_source_split_5884;

  corral_source_split_5882:
    assume {:verifier.code 0} true;
    out_$p281 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(4, 1));
    goto corral_source_split_5883;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, out_$p280, 0);
    goto corral_source_split_5882;

  corral_source_split_5880:
    assume {:verifier.code 0} true;
    out_$p280 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(3, 1));
    goto corral_source_split_5881;

  corral_source_split_5879:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, out_$p279, 12);
    goto corral_source_split_5880;

  $bb98:
    assume {:verifier.code 0} true;
    out_$p279 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(2, 1));
    goto corral_source_split_5879;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb97;

  corral_source_split_5877:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb140:
    assume !(out_$i426 == 1);
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb142_dummy:
    call {:si_unique_call 1} out_$p279, out_$p280, out_$p281, out_$p282, out_$p283, out_$i284, out_$i285, out_$i286, out_$i287, out_$i299, out_$i300, out_$i301, out_$p302, out_$i303, out_$i304, out_$p305, out_$i306, out_$p307, out_$i308, out_$i309, out_$i310, out_$i311, out_$i312, out_$i313, out_$i314, out_$i316, out_$i317, out_$i318, out_$p319, out_$i320, out_$p321, out_$p322, out_$i323, out_$i324, out_$i325, out_$i326, out_$p327, out_$i328, out_$i329, out_$i330, out_$i331, out_$i332, out_$p333, out_$i334, out_$i335, out_$i336, out_$i337, out_$i338, out_$i339, out_$i340, out_$i341, out_$i343, out_$p344, out_$i345, out_$p346, out_$p347, out_$i348, out_$i349, out_$i350, out_$i351, out_$i352, out_$i353, out_$p354, out_$i355, out_$i356, out_$i357, out_$p358, out_$p359, out_$i360, out_$i361, out_$i362, out_$i363, out_$i364, out_$p365, out_$i366, out_$i367, out_$i368, out_$i369, out_$i370, out_$i371, out_$i373, out_$i374, out_$i375, out_$p376, out_$p377, out_$i378, out_$i379, out_$i380, out_$i381, out_$i382, out_$i383, out_$p384, out_$i385, out_$i386, out_$i387, out_$p388, out_$i389, out_$i390, out_$i392, out_$i393, out_$i342, out_$i395, out_$i396, out_$i397, out_$i400, out_$i401, out_$i402, out_$p403, out_$i404, out_$p405, out_$p406, out_$i407, out_$i408, out_$i409, out_$i410, out_$p411, out_$i399, out_$i413, out_$i414, out_$i415, out_$p416, out_$i417, out_$p418, out_$p419, out_$i420, out_$i421, out_$i422, out_$i423, out_$p424, out_$i412, out_$i425, out_$i426, out_$i298, out_$i394, out_$i427, out_$i428, out_$i429, out_$i430, out_$i431, out_$i278, out_$p566, out_$p567, out_$p568, out_$p569, out_$p570, out_$p571, out_$p572, out_$p573, out_$p574, out_$p575, out_$p576, out_$p577, out_$p578, out_$p579, out_$p580, out_$p581, out_$p582, out_$p583, out_$p584, out_$p585, out_$p586, out_vslice_dummy_var_204, out_vslice_dummy_var_205, out_vslice_dummy_var_206, out_vslice_dummy_var_207 := mxl111sf_i2c_hw_xfer_msg_loop_$bb95(in_$p0, in_$p1, in_$p2, in_$p3, in_$p4, in_$p5, in_$i276, out_$p279, out_$p280, out_$p281, out_$p282, out_$p283, out_$i284, out_$i285, out_$i286, out_$i287, out_$i299, out_$i300, out_$i301, out_$p302, out_$i303, out_$i304, out_$p305, out_$i306, out_$p307, out_$i308, out_$i309, out_$i310, out_$i311, out_$i312, out_$i313, out_$i314, out_$i316, out_$i317, out_$i318, out_$p319, out_$i320, out_$p321, out_$p322, out_$i323, out_$i324, out_$i325, out_$i326, out_$p327, out_$i328, out_$i329, out_$i330, out_$i331, out_$i332, out_$p333, out_$i334, out_$i335, out_$i336, out_$i337, out_$i338, out_$i339, out_$i340, out_$i341, out_$i343, out_$p344, out_$i345, out_$p346, out_$p347, out_$i348, out_$i349, out_$i350, out_$i351, out_$i352, out_$i353, out_$p354, out_$i355, out_$i356, out_$i357, out_$p358, out_$p359, out_$i360, out_$i361, out_$i362, out_$i363, out_$i364, out_$p365, out_$i366, out_$i367, out_$i368, out_$i369, out_$i370, out_$i371, out_$i373, out_$i374, out_$i375, out_$p376, out_$p377, out_$i378, out_$i379, out_$i380, out_$i381, out_$i382, out_$i383, out_$p384, out_$i385, out_$i386, out_$i387, out_$p388, out_$i389, out_$i390, out_$i392, out_$i393, out_$i342, out_$i395, out_$i396, out_$i397, out_$i400, out_$i401, out_$i402, out_$p403, out_$i404, out_$p405, out_$p406, out_$i407, out_$i408, out_$i409, out_$i410, out_$p411, out_$i399, out_$i413, out_$i414, out_$i415, out_$p416, out_$i417, out_$p418, out_$p419, out_$i420, out_$i421, out_$i422, out_$i423, out_$p424, out_$i412, out_$i425, out_$i426, out_$i298, out_$i394, out_$i427, out_$i428, out_$i429, out_$i430, out_$i431, out_$i278, out_$p566, out_$p567, out_$p568, out_$p569, out_$p570, out_$p571, out_$p572, out_$p573, out_$p574, out_$p575, out_$p576, out_$p577, out_$p578, out_$p579, out_$p580, out_$p581, out_$p582, out_$p583, out_$p584, out_$p585, out_$p586, out_vslice_dummy_var_204, out_vslice_dummy_var_205, out_vslice_dummy_var_206, out_vslice_dummy_var_207);
    return;

  exit:
    return;
}



procedure mxl111sf_i2c_hw_xfer_msg_loop_$bb95(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$i276: i32, in_$p279: ref, in_$p280: ref, in_$p281: ref, in_$p282: ref, in_$p283: ref, in_$i284: i32, in_$i285: i8, in_$i286: i32, in_$i287: i1, in_$i299: i32, in_$i300: i32, in_$i301: i64, in_$p302: ref, in_$i303: i8, in_$i304: i64, in_$p305: ref, in_$i306: i64, in_$p307: ref, in_$i308: i8, in_$i309: i32, in_$i310: i1, in_$i311: i1, in_$i312: i32, in_$i313: i32, in_$i314: i1, in_$i316: i32, in_$i317: i32, in_$i318: i64, in_$p319: ref, in_$i320: i8, in_$p321: ref, in_$p322: ref, in_$i323: i32, in_$i324: i32, in_$i325: i32, in_$i326: i64, in_$p327: ref, in_$i328: i8, in_$i329: i32, in_$i330: i32, in_$i331: i32, in_$i332: i8, in_$p333: ref, in_$i334: i32, in_$i335: i8, in_$i336: i32, in_$i337: i1, in_$i338: i32, in_$i339: i32, in_$i340: i32, in_$i341: i1, in_$i343: i64, in_$p344: ref, in_$i345: i8, in_$p346: ref, in_$p347: ref, in_$i348: i32, in_$i349: i32, in_$i350: i32, in_$i351: i32, in_$i352: i32, in_$i353: i64, in_$p354: ref, in_$i355: i32, in_$i356: i32, in_$i357: i1, in_$p358: ref, in_$p359: ref, in_$i360: i32, in_$i361: i32, in_$i362: i32, in_$i363: i32, in_$i364: i64, in_$p365: ref, in_$i366: i8, in_$i367: i32, in_$i368: i32, in_$i369: i32, in_$i370: i32, in_$i371: i32, in_$i373: i32, in_$i374: i32, in_$i375: i1, in_$p376: ref, in_$p377: ref, in_$i378: i32, in_$i379: i32, in_$i380: i32, in_$i381: i32, in_$i382: i32, in_$i383: i64, in_$p384: ref, in_$i385: i8, in_$i386: i32, in_$i387: i64, in_$p388: ref, in_$i389: i8, in_$i390: i32, in_$i392: i32, in_$i393: i1, in_$i342: i32, in_$i395: i32, in_$i396: i32, in_$i397: i1, in_$i400: i32, in_$i401: i32, in_$i402: i64, in_$p403: ref, in_$i404: i8, in_$p405: ref, in_$p406: ref, in_$i407: i32, in_$i408: i32, in_$i409: i32, in_$i410: i64, in_$p411: ref, in_$i399: i32, in_$i413: i32, in_$i414: i32, in_$i415: i64, in_$p416: ref, in_$i417: i8, in_$p418: ref, in_$p419: ref, in_$i420: i32, in_$i421: i32, in_$i422: i32, in_$i423: i64, in_$p424: ref, in_$i412: i32, in_$i425: i32, in_$i426: i1, in_$i298: i32, in_$i394: i16, in_$i427: i32, in_$i428: i32, in_$i429: i16, in_$i430: i32, in_$i431: i1, in_$i278: i16, in_$p566: ref, in_$p567: ref, in_$p568: ref, in_$p569: ref, in_$p570: ref, in_$p571: ref, in_$p572: ref, in_$p573: ref, in_$p574: ref, in_$p575: ref, in_$p576: ref, in_$p577: ref, in_$p578: ref, in_$p579: ref, in_$p580: ref, in_$p581: ref, in_$p582: ref, in_$p583: ref, in_$p584: ref, in_$p585: ref, in_$p586: ref, in_vslice_dummy_var_204: i32, in_vslice_dummy_var_205: i32, in_vslice_dummy_var_206: i32, in_vslice_dummy_var_207: i32) returns (out_$p279: ref, out_$p280: ref, out_$p281: ref, out_$p282: ref, out_$p283: ref, out_$i284: i32, out_$i285: i8, out_$i286: i32, out_$i287: i1, out_$i299: i32, out_$i300: i32, out_$i301: i64, out_$p302: ref, out_$i303: i8, out_$i304: i64, out_$p305: ref, out_$i306: i64, out_$p307: ref, out_$i308: i8, out_$i309: i32, out_$i310: i1, out_$i311: i1, out_$i312: i32, out_$i313: i32, out_$i314: i1, out_$i316: i32, out_$i317: i32, out_$i318: i64, out_$p319: ref, out_$i320: i8, out_$p321: ref, out_$p322: ref, out_$i323: i32, out_$i324: i32, out_$i325: i32, out_$i326: i64, out_$p327: ref, out_$i328: i8, out_$i329: i32, out_$i330: i32, out_$i331: i32, out_$i332: i8, out_$p333: ref, out_$i334: i32, out_$i335: i8, out_$i336: i32, out_$i337: i1, out_$i338: i32, out_$i339: i32, out_$i340: i32, out_$i341: i1, out_$i343: i64, out_$p344: ref, out_$i345: i8, out_$p346: ref, out_$p347: ref, out_$i348: i32, out_$i349: i32, out_$i350: i32, out_$i351: i32, out_$i352: i32, out_$i353: i64, out_$p354: ref, out_$i355: i32, out_$i356: i32, out_$i357: i1, out_$p358: ref, out_$p359: ref, out_$i360: i32, out_$i361: i32, out_$i362: i32, out_$i363: i32, out_$i364: i64, out_$p365: ref, out_$i366: i8, out_$i367: i32, out_$i368: i32, out_$i369: i32, out_$i370: i32, out_$i371: i32, out_$i373: i32, out_$i374: i32, out_$i375: i1, out_$p376: ref, out_$p377: ref, out_$i378: i32, out_$i379: i32, out_$i380: i32, out_$i381: i32, out_$i382: i32, out_$i383: i64, out_$p384: ref, out_$i385: i8, out_$i386: i32, out_$i387: i64, out_$p388: ref, out_$i389: i8, out_$i390: i32, out_$i392: i32, out_$i393: i1, out_$i342: i32, out_$i395: i32, out_$i396: i32, out_$i397: i1, out_$i400: i32, out_$i401: i32, out_$i402: i64, out_$p403: ref, out_$i404: i8, out_$p405: ref, out_$p406: ref, out_$i407: i32, out_$i408: i32, out_$i409: i32, out_$i410: i64, out_$p411: ref, out_$i399: i32, out_$i413: i32, out_$i414: i32, out_$i415: i64, out_$p416: ref, out_$i417: i8, out_$p418: ref, out_$p419: ref, out_$i420: i32, out_$i421: i32, out_$i422: i32, out_$i423: i64, out_$p424: ref, out_$i412: i32, out_$i425: i32, out_$i426: i1, out_$i298: i32, out_$i394: i16, out_$i427: i32, out_$i428: i32, out_$i429: i16, out_$i430: i32, out_$i431: i1, out_$i278: i16, out_$p566: ref, out_$p567: ref, out_$p568: ref, out_$p569: ref, out_$p570: ref, out_$p571: ref, out_$p572: ref, out_$p573: ref, out_$p574: ref, out_$p575: ref, out_$p576: ref, out_$p577: ref, out_$p578: ref, out_$p579: ref, out_$p580: ref, out_$p581: ref, out_$p582: ref, out_$p583: ref, out_$p584: ref, out_$p585: ref, out_$p586: ref, out_vslice_dummy_var_204: i32, out_vslice_dummy_var_205: i32, out_vslice_dummy_var_206: i32, out_vslice_dummy_var_207: i32);
  modifies $M.8, $M.15, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.28, $CurrAddr, $M.27;



implementation mxl111sf_i2c_hw_xfer_msg_loop_$bb59(in_$p1: ref, in_$p2: ref, in_$i112: i16, in_$i152: i32, in_$i155: i32, in_$i156: i32, in_$i157: i64, in_$p158: ref, in_$p159: ref, in_$p160: ref, in_$i161: i32, in_$i162: i32, in_$i163: i32, in_$i164: i64, in_$p165: ref, in_$i166: i8, in_$i167: i32, in_$i168: i32, in_$i169: i64, in_$p170: ref, in_$i171: i32, in_$i172: i32, in_$i173: i1, in_$i174: i32, in_$p175: ref, in_$p176: ref, in_$i177: i32, in_$i178: i32, in_$i179: i32, in_$i180: i64, in_$p181: ref, in_$i182: i8, in_$i183: i32, in_$i185: i32, in_$i186: i32, in_$i187: i64, in_$p188: ref, in_$i189: i32, in_$i190: i1, in_$i154: i32, in_vslice_dummy_var_198: i32) returns (out_$i155: i32, out_$i156: i32, out_$i157: i64, out_$p158: ref, out_$p159: ref, out_$p160: ref, out_$i161: i32, out_$i162: i32, out_$i163: i32, out_$i164: i64, out_$p165: ref, out_$i166: i8, out_$i167: i32, out_$i168: i32, out_$i169: i64, out_$p170: ref, out_$i171: i32, out_$i172: i32, out_$i173: i1, out_$i174: i32, out_$p175: ref, out_$p176: ref, out_$i177: i32, out_$i178: i32, out_$i179: i32, out_$i180: i64, out_$p181: ref, out_$i182: i8, out_$i183: i32, out_$i185: i32, out_$i186: i32, out_$i187: i64, out_$p188: ref, out_$i189: i32, out_$i190: i1, out_$i154: i32, out_vslice_dummy_var_198: i32)
{

  entry:
    out_$i155, out_$i156, out_$i157, out_$p158, out_$p159, out_$p160, out_$i161, out_$i162, out_$i163, out_$i164, out_$p165, out_$i166, out_$i167, out_$i168, out_$i169, out_$p170, out_$i171, out_$i172, out_$i173, out_$i174, out_$p175, out_$p176, out_$i177, out_$i178, out_$i179, out_$i180, out_$p181, out_$i182, out_$i183, out_$i185, out_$i186, out_$i187, out_$p188, out_$i189, out_$i190, out_$i154, out_vslice_dummy_var_198 := in_$i155, in_$i156, in_$i157, in_$p158, in_$p159, in_$p160, in_$i161, in_$i162, in_$i163, in_$i164, in_$p165, in_$i166, in_$i167, in_$i168, in_$i169, in_$p170, in_$i171, in_$i172, in_$i173, in_$i174, in_$p175, in_$p176, in_$i177, in_$i178, in_$i179, in_$i180, in_$p181, in_$i182, in_$i183, in_$i185, in_$i186, in_$i187, in_$p188, in_$i189, in_$i190, in_$i154, in_vslice_dummy_var_198;
    goto $bb59, exit;

  $bb59:
    assume {:verifier.code 0} true;
    goto corral_source_split_5696;

  $bb64:
    assume out_$i190 == 1;
    assume {:verifier.code 0} true;
    out_$i154 := out_$i189;
    goto $bb64_dummy;

  corral_source_split_5739:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    out_$i190 := $slt.i32(out_$i189, in_$i152);
    goto corral_source_split_5739;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    out_$i189 := $add.i32(out_$i154, 1);
    call {:si_unique_call 832} {:cexpr "i"} boogie_si_record_i32(out_$i189);
    goto corral_source_split_5738;

  corral_source_split_5736:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, out_$p188, 0);
    goto corral_source_split_5737;

  corral_source_split_5735:
    assume {:verifier.code 0} true;
    out_$p188 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(out_$i187, 1));
    goto corral_source_split_5736;

  corral_source_split_5734:
    assume {:verifier.code 0} true;
    out_$i187 := $sext.i32.i64(out_$i186);
    goto corral_source_split_5735;

  corral_source_split_5733:
    assume {:verifier.code 0} true;
    out_$i186 := $add.i32(out_$i185, 4);
    goto corral_source_split_5734;

  $bb63:
    assume {:verifier.code 0} true;
    out_$i185 := $mul.i32(out_$i154, 3);
    goto corral_source_split_5733;

  $bb62:
    assume !(out_$i173 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  corral_source_split_5731:
    assume {:verifier.code 0} true;
    goto $bb63;

  corral_source_split_5730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 831} out_vslice_dummy_var_198 := printk.ref.ref.i32.i32.i32(.str.128, .str.124, out_$i174, out_$i154, out_$i183);
    goto corral_source_split_5731;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    out_$i183 := $zext.i8.i32(out_$i182);
    goto corral_source_split_5730;

  corral_source_split_5728:
    assume {:verifier.code 0} true;
    out_$i182 := $load.i8($M.8, out_$p181);
    goto corral_source_split_5729;

  corral_source_split_5727:
    assume {:verifier.code 0} true;
    out_$p181 := $add.ref(out_$p176, $mul.ref(out_$i180, 1));
    goto corral_source_split_5728;

  corral_source_split_5726:
    assume {:verifier.code 0} true;
    out_$i180 := $sext.i32.i64(out_$i179);
    goto corral_source_split_5727;

  corral_source_split_5725:
    assume {:verifier.code 0} true;
    out_$i179 := $add.i32(out_$i178, out_$i154);
    goto corral_source_split_5726;

  corral_source_split_5724:
    assume {:verifier.code 0} true;
    out_$i178 := $mul.i32(out_$i177, 8);
    goto corral_source_split_5725;

  corral_source_split_5723:
    assume {:verifier.code 0} true;
    out_$i177 := $zext.i16.i32(in_$i112);
    goto corral_source_split_5724;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    out_$p176 := $load.ref($M.8, out_$p175);
    goto corral_source_split_5723;

  corral_source_split_5721:
    assume {:verifier.code 0} true;
    out_$p175 := $add.ref($add.ref(in_$p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5722;

  corral_source_split_5720:
    assume {:verifier.code 0} true;
    out_$i174 := $zext.i16.i32(in_$i112);
    goto corral_source_split_5721;

  $bb61:
    assume out_$i173 == 1;
    goto corral_source_split_5720;

  corral_source_split_5718:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  corral_source_split_5717:
    assume {:verifier.code 0} true;
    out_$i173 := $ne.i32(out_$i172, 0);
    goto corral_source_split_5718;

  corral_source_split_5716:
    assume {:verifier.code 0} true;
    out_$i172 := $and.i32(out_$i171, 4);
    goto corral_source_split_5717;

  corral_source_split_5715:
    assume {:verifier.code 0} true;
    out_$i171 := $M.10;
    goto corral_source_split_5716;

  corral_source_split_5714:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, out_$p170, out_$i166);
    goto corral_source_split_5715;

  corral_source_split_5713:
    assume {:verifier.code 0} true;
    out_$p170 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(out_$i169, 1));
    goto corral_source_split_5714;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    out_$i169 := $sext.i32.i64(out_$i168);
    goto corral_source_split_5713;

  corral_source_split_5711:
    assume {:verifier.code 0} true;
    out_$i168 := $mul.i32(out_$i167, 3);
    goto corral_source_split_5712;

  corral_source_split_5710:
    assume {:verifier.code 0} true;
    out_$i167 := $add.i32(out_$i154, 1);
    goto corral_source_split_5711;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    out_$i166 := $load.i8($M.8, out_$p165);
    goto corral_source_split_5710;

  corral_source_split_5708:
    assume {:verifier.code 0} true;
    out_$p165 := $add.ref(out_$p160, $mul.ref(out_$i164, 1));
    goto corral_source_split_5709;

  corral_source_split_5707:
    assume {:verifier.code 0} true;
    out_$i164 := $sext.i32.i64(out_$i163);
    goto corral_source_split_5708;

  corral_source_split_5706:
    assume {:verifier.code 0} true;
    out_$i163 := $add.i32(out_$i162, out_$i154);
    goto corral_source_split_5707;

  corral_source_split_5705:
    assume {:verifier.code 0} true;
    out_$i162 := $mul.i32(out_$i161, 8);
    goto corral_source_split_5706;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    out_$i161 := $zext.i16.i32(in_$i112);
    goto corral_source_split_5705;

  corral_source_split_5703:
    assume {:verifier.code 0} true;
    out_$p160 := $load.ref($M.8, out_$p159);
    goto corral_source_split_5704;

  corral_source_split_5702:
    assume {:verifier.code 0} true;
    out_$p159 := $add.ref($add.ref(in_$p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5703;

  corral_source_split_5701:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, out_$p158, 12);
    goto corral_source_split_5702;

  corral_source_split_5700:
    assume {:verifier.code 0} true;
    out_$p158 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(out_$i157, 1));
    goto corral_source_split_5701;

  corral_source_split_5699:
    assume {:verifier.code 0} true;
    out_$i157 := $sext.i32.i64(out_$i156);
    goto corral_source_split_5700;

  corral_source_split_5698:
    assume {:verifier.code 0} true;
    out_$i156 := $add.i32(out_$i155, 2);
    goto corral_source_split_5699;

  $bb60:
    assume {:verifier.code 0} true;
    out_$i155 := $mul.i32(out_$i154, 3);
    goto corral_source_split_5698;

  corral_source_split_5696:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb64_dummy:
    call {:si_unique_call 1} out_$i155, out_$i156, out_$i157, out_$p158, out_$p159, out_$p160, out_$i161, out_$i162, out_$i163, out_$i164, out_$p165, out_$i166, out_$i167, out_$i168, out_$i169, out_$p170, out_$i171, out_$i172, out_$i173, out_$i174, out_$p175, out_$p176, out_$i177, out_$i178, out_$i179, out_$i180, out_$p181, out_$i182, out_$i183, out_$i185, out_$i186, out_$i187, out_$p188, out_$i189, out_$i190, out_$i154, out_vslice_dummy_var_198 := mxl111sf_i2c_hw_xfer_msg_loop_$bb59(in_$p1, in_$p2, in_$i112, in_$i152, out_$i155, out_$i156, out_$i157, out_$p158, out_$p159, out_$p160, out_$i161, out_$i162, out_$i163, out_$i164, out_$p165, out_$i166, out_$i167, out_$i168, out_$i169, out_$p170, out_$i171, out_$i172, out_$i173, out_$i174, out_$p175, out_$p176, out_$i177, out_$i178, out_$i179, out_$i180, out_$p181, out_$i182, out_$i183, out_$i185, out_$i186, out_$i187, out_$p188, out_$i189, out_$i190, out_$i154, out_vslice_dummy_var_198);
    return;

  exit:
    return;
}



procedure mxl111sf_i2c_hw_xfer_msg_loop_$bb59(in_$p1: ref, in_$p2: ref, in_$i112: i16, in_$i152: i32, in_$i155: i32, in_$i156: i32, in_$i157: i64, in_$p158: ref, in_$p159: ref, in_$p160: ref, in_$i161: i32, in_$i162: i32, in_$i163: i32, in_$i164: i64, in_$p165: ref, in_$i166: i8, in_$i167: i32, in_$i168: i32, in_$i169: i64, in_$p170: ref, in_$i171: i32, in_$i172: i32, in_$i173: i1, in_$i174: i32, in_$p175: ref, in_$p176: ref, in_$i177: i32, in_$i178: i32, in_$i179: i32, in_$i180: i64, in_$p181: ref, in_$i182: i8, in_$i183: i32, in_$i185: i32, in_$i186: i32, in_$i187: i64, in_$p188: ref, in_$i189: i32, in_$i190: i1, in_$i154: i32, in_vslice_dummy_var_198: i32) returns (out_$i155: i32, out_$i156: i32, out_$i157: i64, out_$p158: ref, out_$p159: ref, out_$p160: ref, out_$i161: i32, out_$i162: i32, out_$i163: i32, out_$i164: i64, out_$p165: ref, out_$i166: i8, out_$i167: i32, out_$i168: i32, out_$i169: i64, out_$p170: ref, out_$i171: i32, out_$i172: i32, out_$i173: i1, out_$i174: i32, out_$p175: ref, out_$p176: ref, out_$i177: i32, out_$i178: i32, out_$i179: i32, out_$i180: i64, out_$p181: ref, out_$i182: i8, out_$i183: i32, out_$i185: i32, out_$i186: i32, out_$i187: i64, out_$p188: ref, out_$i189: i32, out_$i190: i1, out_$i154: i32, out_vslice_dummy_var_198: i32);
  modifies $M.15;



implementation mxl111sf_i2c_hw_xfer_msg_loop_$bb35(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i110: i32, in_$p115: ref, in_$p116: ref, in_$p117: ref, in_$i118: i32, in_$i119: i32, in_$i120: i64, in_$p121: ref, in_$i122: i8, in_$p123: ref, in_$p124: ref, in_$p125: ref, in_$i126: i32, in_$i127: i8, in_$i128: i32, in_$i129: i1, in_$i140: i32, in_$i141: i32, in_$i142: i16, in_$i143: i32, in_$i144: i1, in_$i114: i16, in_$i145: i16, in_$i146: i32, in_$p612: ref, in_$p613: ref, in_$p614: ref, in_$i615: i32, in_$i616: i32, in_$i617: i32, in_$i618: i64, in_$p619: ref, in_$i620: i8, in_$p621: ref, in_$p622: ref, in_$p623: ref, in_$p624: ref, in_$p625: ref, in_$i626: i32, in_$i627: i32, in_$i628: i32, in_$i629: i64, in_$p630: ref, in_$i631: i8, in_$p632: ref, in_$p633: ref, in_$p634: ref, in_$p635: ref, in_$p636: ref, in_$i637: i32, in_$i638: i32, in_$i639: i32, in_$i640: i64, in_$p641: ref, in_$i642: i8, in_$p643: ref, in_$p644: ref, in_$p645: ref, in_$p646: ref, in_$p647: ref, in_$i648: i32, in_$i649: i32, in_$i650: i32, in_$i651: i64, in_$p652: ref, in_$i653: i8, in_$p654: ref, in_$p655: ref, in_$p656: ref, in_$p657: ref, in_$p658: ref, in_$i659: i32, in_$i660: i32, in_$i661: i32, in_$i662: i64, in_$p663: ref, in_$i664: i8, in_$p665: ref, in_$p666: ref, in_$p667: ref, in_$p668: ref, in_$p669: ref, in_$i670: i32, in_$i671: i32, in_$i672: i32, in_$i673: i64, in_$p674: ref, in_$i675: i8, in_$p676: ref, in_$p677: ref, in_$p678: ref, in_$p679: ref, in_$p680: ref, in_$i681: i32, in_$i682: i32, in_$i683: i32, in_$i684: i64, in_$p685: ref, in_$i686: i8, in_$p687: ref, in_$p688: ref) returns (out_$p115: ref, out_$p116: ref, out_$p117: ref, out_$i118: i32, out_$i119: i32, out_$i120: i64, out_$p121: ref, out_$i122: i8, out_$p123: ref, out_$p124: ref, out_$p125: ref, out_$i126: i32, out_$i127: i8, out_$i128: i32, out_$i129: i1, out_$i140: i32, out_$i141: i32, out_$i142: i16, out_$i143: i32, out_$i144: i1, out_$i114: i16, out_$i145: i16, out_$i146: i32, out_$p612: ref, out_$p613: ref, out_$p614: ref, out_$i615: i32, out_$i616: i32, out_$i617: i32, out_$i618: i64, out_$p619: ref, out_$i620: i8, out_$p621: ref, out_$p622: ref, out_$p623: ref, out_$p624: ref, out_$p625: ref, out_$i626: i32, out_$i627: i32, out_$i628: i32, out_$i629: i64, out_$p630: ref, out_$i631: i8, out_$p632: ref, out_$p633: ref, out_$p634: ref, out_$p635: ref, out_$p636: ref, out_$i637: i32, out_$i638: i32, out_$i639: i32, out_$i640: i64, out_$p641: ref, out_$i642: i8, out_$p643: ref, out_$p644: ref, out_$p645: ref, out_$p646: ref, out_$p647: ref, out_$i648: i32, out_$i649: i32, out_$i650: i32, out_$i651: i64, out_$p652: ref, out_$i653: i8, out_$p654: ref, out_$p655: ref, out_$p656: ref, out_$p657: ref, out_$p658: ref, out_$i659: i32, out_$i660: i32, out_$i661: i32, out_$i662: i64, out_$p663: ref, out_$i664: i8, out_$p665: ref, out_$p666: ref, out_$p667: ref, out_$p668: ref, out_$p669: ref, out_$i670: i32, out_$i671: i32, out_$i672: i32, out_$i673: i64, out_$p674: ref, out_$i675: i8, out_$p676: ref, out_$p677: ref, out_$p678: ref, out_$p679: ref, out_$p680: ref, out_$i681: i32, out_$i682: i32, out_$i683: i32, out_$i684: i64, out_$p685: ref, out_$i686: i8, out_$p687: ref, out_$p688: ref)
{

  entry:
    out_$p115, out_$p116, out_$p117, out_$i118, out_$i119, out_$i120, out_$p121, out_$i122, out_$p123, out_$p124, out_$p125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i114, out_$i145, out_$i146, out_$p612, out_$p613, out_$p614, out_$i615, out_$i616, out_$i617, out_$i618, out_$p619, out_$i620, out_$p621, out_$p622, out_$p623, out_$p624, out_$p625, out_$i626, out_$i627, out_$i628, out_$i629, out_$p630, out_$i631, out_$p632, out_$p633, out_$p634, out_$p635, out_$p636, out_$i637, out_$i638, out_$i639, out_$i640, out_$p641, out_$i642, out_$p643, out_$p644, out_$p645, out_$p646, out_$p647, out_$i648, out_$i649, out_$i650, out_$i651, out_$p652, out_$i653, out_$p654, out_$p655, out_$p656, out_$p657, out_$p658, out_$i659, out_$i660, out_$i661, out_$i662, out_$p663, out_$i664, out_$p665, out_$p666, out_$p667, out_$p668, out_$p669, out_$i670, out_$i671, out_$i672, out_$i673, out_$p674, out_$i675, out_$p676, out_$p677, out_$p678, out_$p679, out_$p680, out_$i681, out_$i682, out_$i683, out_$i684, out_$p685, out_$i686, out_$p687, out_$p688 := in_$p115, in_$p116, in_$p117, in_$i118, in_$i119, in_$i120, in_$p121, in_$i122, in_$p123, in_$p124, in_$p125, in_$i126, in_$i127, in_$i128, in_$i129, in_$i140, in_$i141, in_$i142, in_$i143, in_$i144, in_$i114, in_$i145, in_$i146, in_$p612, in_$p613, in_$p614, in_$i615, in_$i616, in_$i617, in_$i618, in_$p619, in_$i620, in_$p621, in_$p622, in_$p623, in_$p624, in_$p625, in_$i626, in_$i627, in_$i628, in_$i629, in_$p630, in_$i631, in_$p632, in_$p633, in_$p634, in_$p635, in_$p636, in_$i637, in_$i638, in_$i639, in_$i640, in_$p641, in_$i642, in_$p643, in_$p644, in_$p645, in_$p646, in_$p647, in_$i648, in_$i649, in_$i650, in_$i651, in_$p652, in_$i653, in_$p654, in_$p655, in_$p656, in_$p657, in_$p658, in_$i659, in_$i660, in_$i661, in_$i662, in_$p663, in_$i664, in_$p665, in_$p666, in_$p667, in_$p668, in_$p669, in_$i670, in_$i671, in_$i672, in_$i673, in_$p674, in_$i675, in_$p676, in_$p677, in_$p678, in_$p679, in_$p680, in_$i681, in_$i682, in_$i683, in_$i684, in_$p685, in_$i686, in_$p687, in_$p688;
    goto $bb35, exit;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_5613;

  $bb47:
    assume out_$i144 == 1;
    assume {:verifier.code 0} true;
    out_$i114 := out_$i142;
    goto $bb47_dummy;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    out_$i145, out_$i146 := out_$i142, out_$i126;
    assume true;
    goto $bb47;

  corral_source_split_5671:
    assume {:verifier.code 0} true;
    out_$i144 := $slt.i32(out_$i143, in_$i110);
    goto corral_source_split_5672;

  corral_source_split_5670:
    assume {:verifier.code 0} true;
    out_$i143 := $zext.i16.i32(out_$i142);
    goto corral_source_split_5671;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    out_$i142 := $trunc.i32.i16(out_$i141);
    call {:si_unique_call 830} {:cexpr "index"} boogie_si_record_i16(out_$i142);
    goto corral_source_split_5670;

  corral_source_split_5668:
    assume {:verifier.code 0} true;
    out_$i141 := $add.i32(out_$i140, 1);
    goto corral_source_split_5669;

  $bb46:
    assume {:verifier.code 0} true;
    out_$i140 := $zext.i16.i32(out_$i114);
    goto corral_source_split_5668;

  $bb42:
    assume !(out_$i129 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  corral_source_split_5648:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42;

  corral_source_split_5647:
    assume {:verifier.code 0} true;
    out_$i129 := $eq.i32(out_$i128, 1);
    goto corral_source_split_5648;

  corral_source_split_5646:
    assume {:verifier.code 0} true;
    out_$i128 := $zext.i8.i32(out_$i127);
    goto corral_source_split_5647;

  corral_source_split_5645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 827} out_$i127 := mxl111sf_i2c_check_status(in_$p0);
    call {:si_unique_call 828} {:cexpr "tmp___0"} boogie_si_record_i8(out_$i127);
    goto corral_source_split_5646;

  corral_source_split_5644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 825} out_$i126 := mxl111sf_i2c_send_data(in_$p0, 0, out_$p125);
    call {:si_unique_call 826} {:cexpr "ret"} boogie_si_record_i32(out_$i126);
    goto corral_source_split_5645;

  $bb40:
    assume {:verifier.code 0} true;
    out_$p125 := $bitcast.ref.ref(in_$p2);
    goto corral_source_split_5644;

  corral_source_split_6494:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, out_$p688, 0);
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_6493:
    assume {:verifier.code 0} true;
    out_$p688 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(25, 1));
    goto corral_source_split_6494;

  corral_source_split_6492:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, out_$p687, out_$i686);
    goto corral_source_split_6493;

  corral_source_split_6491:
    assume {:verifier.code 0} true;
    out_$p687 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(24, 1));
    goto corral_source_split_6492;

  corral_source_split_6490:
    assume {:verifier.code 0} true;
    out_$i686 := $load.i8($M.8, out_$p685);
    goto corral_source_split_6491;

  corral_source_split_6489:
    assume {:verifier.code 0} true;
    out_$p685 := $add.ref(out_$p680, $mul.ref(out_$i684, 1));
    goto corral_source_split_6490;

  corral_source_split_6488:
    assume {:verifier.code 0} true;
    out_$i684 := $sext.i32.i64(out_$i683);
    goto corral_source_split_6489;

  corral_source_split_6487:
    assume {:verifier.code 0} true;
    out_$i683 := $add.i32(out_$i682, 7);
    goto corral_source_split_6488;

  corral_source_split_6486:
    assume {:verifier.code 0} true;
    out_$i682 := $mul.i32(out_$i681, 8);
    goto corral_source_split_6487;

  corral_source_split_6485:
    assume {:verifier.code 0} true;
    out_$i681 := $zext.i16.i32(out_$i114);
    goto corral_source_split_6486;

  corral_source_split_6484:
    assume {:verifier.code 0} true;
    out_$p680 := $load.ref($M.8, out_$p679);
    goto corral_source_split_6485;

  corral_source_split_6483:
    assume {:verifier.code 0} true;
    out_$p679 := $add.ref($add.ref(in_$p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6484;

  corral_source_split_6482:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, out_$p678, 12);
    goto corral_source_split_6483;

  $bb237:
    assume {:verifier.code 0} true;
    out_$p678 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(23, 1));
    goto corral_source_split_6482;

  corral_source_split_6480:
    assume {:verifier.code 0} true;
    goto $bb237;

  corral_source_split_6479:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, out_$p677, 0);
    goto corral_source_split_6480;

  corral_source_split_6478:
    assume {:verifier.code 0} true;
    out_$p677 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(22, 1));
    goto corral_source_split_6479;

  corral_source_split_6477:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, out_$p676, out_$i675);
    goto corral_source_split_6478;

  corral_source_split_6476:
    assume {:verifier.code 0} true;
    out_$p676 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(21, 1));
    goto corral_source_split_6477;

  corral_source_split_6475:
    assume {:verifier.code 0} true;
    out_$i675 := $load.i8($M.8, out_$p674);
    goto corral_source_split_6476;

  corral_source_split_6474:
    assume {:verifier.code 0} true;
    out_$p674 := $add.ref(out_$p669, $mul.ref(out_$i673, 1));
    goto corral_source_split_6475;

  corral_source_split_6473:
    assume {:verifier.code 0} true;
    out_$i673 := $sext.i32.i64(out_$i672);
    goto corral_source_split_6474;

  corral_source_split_6472:
    assume {:verifier.code 0} true;
    out_$i672 := $add.i32(out_$i671, 6);
    goto corral_source_split_6473;

  corral_source_split_6471:
    assume {:verifier.code 0} true;
    out_$i671 := $mul.i32(out_$i670, 8);
    goto corral_source_split_6472;

  corral_source_split_6470:
    assume {:verifier.code 0} true;
    out_$i670 := $zext.i16.i32(out_$i114);
    goto corral_source_split_6471;

  corral_source_split_6469:
    assume {:verifier.code 0} true;
    out_$p669 := $load.ref($M.8, out_$p668);
    goto corral_source_split_6470;

  corral_source_split_6468:
    assume {:verifier.code 0} true;
    out_$p668 := $add.ref($add.ref(in_$p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6469;

  corral_source_split_6467:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, out_$p667, 12);
    goto corral_source_split_6468;

  $bb236:
    assume {:verifier.code 0} true;
    out_$p667 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(20, 1));
    goto corral_source_split_6467;

  corral_source_split_6465:
    assume {:verifier.code 0} true;
    goto $bb236;

  corral_source_split_6464:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, out_$p666, 0);
    goto corral_source_split_6465;

  corral_source_split_6463:
    assume {:verifier.code 0} true;
    out_$p666 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(19, 1));
    goto corral_source_split_6464;

  corral_source_split_6462:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, out_$p665, out_$i664);
    goto corral_source_split_6463;

  corral_source_split_6461:
    assume {:verifier.code 0} true;
    out_$p665 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(18, 1));
    goto corral_source_split_6462;

  corral_source_split_6460:
    assume {:verifier.code 0} true;
    out_$i664 := $load.i8($M.8, out_$p663);
    goto corral_source_split_6461;

  corral_source_split_6459:
    assume {:verifier.code 0} true;
    out_$p663 := $add.ref(out_$p658, $mul.ref(out_$i662, 1));
    goto corral_source_split_6460;

  corral_source_split_6458:
    assume {:verifier.code 0} true;
    out_$i662 := $sext.i32.i64(out_$i661);
    goto corral_source_split_6459;

  corral_source_split_6457:
    assume {:verifier.code 0} true;
    out_$i661 := $add.i32(out_$i660, 5);
    goto corral_source_split_6458;

  corral_source_split_6456:
    assume {:verifier.code 0} true;
    out_$i660 := $mul.i32(out_$i659, 8);
    goto corral_source_split_6457;

  corral_source_split_6455:
    assume {:verifier.code 0} true;
    out_$i659 := $zext.i16.i32(out_$i114);
    goto corral_source_split_6456;

  corral_source_split_6454:
    assume {:verifier.code 0} true;
    out_$p658 := $load.ref($M.8, out_$p657);
    goto corral_source_split_6455;

  corral_source_split_6453:
    assume {:verifier.code 0} true;
    out_$p657 := $add.ref($add.ref(in_$p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6454;

  corral_source_split_6452:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, out_$p656, 12);
    goto corral_source_split_6453;

  $bb235:
    assume {:verifier.code 0} true;
    out_$p656 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(17, 1));
    goto corral_source_split_6452;

  corral_source_split_6450:
    assume {:verifier.code 0} true;
    goto $bb235;

  corral_source_split_6449:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, out_$p655, 0);
    goto corral_source_split_6450;

  corral_source_split_6448:
    assume {:verifier.code 0} true;
    out_$p655 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(16, 1));
    goto corral_source_split_6449;

  corral_source_split_6447:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, out_$p654, out_$i653);
    goto corral_source_split_6448;

  corral_source_split_6446:
    assume {:verifier.code 0} true;
    out_$p654 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(15, 1));
    goto corral_source_split_6447;

  corral_source_split_6445:
    assume {:verifier.code 0} true;
    out_$i653 := $load.i8($M.8, out_$p652);
    goto corral_source_split_6446;

  corral_source_split_6444:
    assume {:verifier.code 0} true;
    out_$p652 := $add.ref(out_$p647, $mul.ref(out_$i651, 1));
    goto corral_source_split_6445;

  corral_source_split_6443:
    assume {:verifier.code 0} true;
    out_$i651 := $sext.i32.i64(out_$i650);
    goto corral_source_split_6444;

  corral_source_split_6442:
    assume {:verifier.code 0} true;
    out_$i650 := $add.i32(out_$i649, 4);
    goto corral_source_split_6443;

  corral_source_split_6441:
    assume {:verifier.code 0} true;
    out_$i649 := $mul.i32(out_$i648, 8);
    goto corral_source_split_6442;

  corral_source_split_6440:
    assume {:verifier.code 0} true;
    out_$i648 := $zext.i16.i32(out_$i114);
    goto corral_source_split_6441;

  corral_source_split_6439:
    assume {:verifier.code 0} true;
    out_$p647 := $load.ref($M.8, out_$p646);
    goto corral_source_split_6440;

  corral_source_split_6438:
    assume {:verifier.code 0} true;
    out_$p646 := $add.ref($add.ref(in_$p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6439;

  corral_source_split_6437:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, out_$p645, 12);
    goto corral_source_split_6438;

  $bb234:
    assume {:verifier.code 0} true;
    out_$p645 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(14, 1));
    goto corral_source_split_6437;

  corral_source_split_6435:
    assume {:verifier.code 0} true;
    goto $bb234;

  corral_source_split_6434:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, out_$p644, 0);
    goto corral_source_split_6435;

  corral_source_split_6433:
    assume {:verifier.code 0} true;
    out_$p644 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(13, 1));
    goto corral_source_split_6434;

  corral_source_split_6432:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, out_$p643, out_$i642);
    goto corral_source_split_6433;

  corral_source_split_6431:
    assume {:verifier.code 0} true;
    out_$p643 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(12, 1));
    goto corral_source_split_6432;

  corral_source_split_6430:
    assume {:verifier.code 0} true;
    out_$i642 := $load.i8($M.8, out_$p641);
    goto corral_source_split_6431;

  corral_source_split_6429:
    assume {:verifier.code 0} true;
    out_$p641 := $add.ref(out_$p636, $mul.ref(out_$i640, 1));
    goto corral_source_split_6430;

  corral_source_split_6428:
    assume {:verifier.code 0} true;
    out_$i640 := $sext.i32.i64(out_$i639);
    goto corral_source_split_6429;

  corral_source_split_6427:
    assume {:verifier.code 0} true;
    out_$i639 := $add.i32(out_$i638, 3);
    goto corral_source_split_6428;

  corral_source_split_6426:
    assume {:verifier.code 0} true;
    out_$i638 := $mul.i32(out_$i637, 8);
    goto corral_source_split_6427;

  corral_source_split_6425:
    assume {:verifier.code 0} true;
    out_$i637 := $zext.i16.i32(out_$i114);
    goto corral_source_split_6426;

  corral_source_split_6424:
    assume {:verifier.code 0} true;
    out_$p636 := $load.ref($M.8, out_$p635);
    goto corral_source_split_6425;

  corral_source_split_6423:
    assume {:verifier.code 0} true;
    out_$p635 := $add.ref($add.ref(in_$p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6424;

  corral_source_split_6422:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, out_$p634, 12);
    goto corral_source_split_6423;

  $bb233:
    assume {:verifier.code 0} true;
    out_$p634 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(11, 1));
    goto corral_source_split_6422;

  corral_source_split_6420:
    assume {:verifier.code 0} true;
    goto $bb233;

  corral_source_split_6419:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, out_$p633, 0);
    goto corral_source_split_6420;

  corral_source_split_6418:
    assume {:verifier.code 0} true;
    out_$p633 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(10, 1));
    goto corral_source_split_6419;

  corral_source_split_6417:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, out_$p632, out_$i631);
    goto corral_source_split_6418;

  corral_source_split_6416:
    assume {:verifier.code 0} true;
    out_$p632 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(9, 1));
    goto corral_source_split_6417;

  corral_source_split_6415:
    assume {:verifier.code 0} true;
    out_$i631 := $load.i8($M.8, out_$p630);
    goto corral_source_split_6416;

  corral_source_split_6414:
    assume {:verifier.code 0} true;
    out_$p630 := $add.ref(out_$p625, $mul.ref(out_$i629, 1));
    goto corral_source_split_6415;

  corral_source_split_6413:
    assume {:verifier.code 0} true;
    out_$i629 := $sext.i32.i64(out_$i628);
    goto corral_source_split_6414;

  corral_source_split_6412:
    assume {:verifier.code 0} true;
    out_$i628 := $add.i32(out_$i627, 2);
    goto corral_source_split_6413;

  corral_source_split_6411:
    assume {:verifier.code 0} true;
    out_$i627 := $mul.i32(out_$i626, 8);
    goto corral_source_split_6412;

  corral_source_split_6410:
    assume {:verifier.code 0} true;
    out_$i626 := $zext.i16.i32(out_$i114);
    goto corral_source_split_6411;

  corral_source_split_6409:
    assume {:verifier.code 0} true;
    out_$p625 := $load.ref($M.8, out_$p624);
    goto corral_source_split_6410;

  corral_source_split_6408:
    assume {:verifier.code 0} true;
    out_$p624 := $add.ref($add.ref(in_$p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6409;

  corral_source_split_6407:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, out_$p623, 12);
    goto corral_source_split_6408;

  $bb232:
    assume {:verifier.code 0} true;
    out_$p623 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(8, 1));
    goto corral_source_split_6407;

  corral_source_split_5642:
    assume {:verifier.code 0} true;
    goto $bb232;

  corral_source_split_5641:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, out_$p622, 0);
    goto corral_source_split_5642;

  corral_source_split_5640:
    assume {:verifier.code 0} true;
    out_$p622 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(7, 1));
    goto corral_source_split_5641;

  corral_source_split_5639:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, out_$p621, out_$i620);
    goto corral_source_split_5640;

  corral_source_split_5638:
    assume {:verifier.code 0} true;
    out_$p621 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(6, 1));
    goto corral_source_split_5639;

  corral_source_split_5637:
    assume {:verifier.code 0} true;
    out_$i620 := $load.i8($M.8, out_$p619);
    goto corral_source_split_5638;

  corral_source_split_5636:
    assume {:verifier.code 0} true;
    out_$p619 := $add.ref(out_$p614, $mul.ref(out_$i618, 1));
    goto corral_source_split_5637;

  corral_source_split_5635:
    assume {:verifier.code 0} true;
    out_$i618 := $sext.i32.i64(out_$i617);
    goto corral_source_split_5636;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    out_$i617 := $add.i32(out_$i616, 1);
    goto corral_source_split_5635;

  corral_source_split_5633:
    assume {:verifier.code 0} true;
    out_$i616 := $mul.i32(out_$i615, 8);
    goto corral_source_split_5634;

  corral_source_split_5632:
    assume {:verifier.code 0} true;
    out_$i615 := $zext.i16.i32(out_$i114);
    goto corral_source_split_5633;

  corral_source_split_5631:
    assume {:verifier.code 0} true;
    out_$p614 := $load.ref($M.8, out_$p613);
    goto corral_source_split_5632;

  corral_source_split_5630:
    assume {:verifier.code 0} true;
    out_$p613 := $add.ref($add.ref(in_$p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5631;

  corral_source_split_5629:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, out_$p612, 12);
    goto corral_source_split_5630;

  $bb39:
    assume {:verifier.code 0} true;
    out_$p612 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(5, 1));
    goto corral_source_split_5629;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    goto $bb39;

  corral_source_split_5626:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, out_$p124, 0);
    goto corral_source_split_5627;

  corral_source_split_5625:
    assume {:verifier.code 0} true;
    out_$p124 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(4, 1));
    goto corral_source_split_5626;

  corral_source_split_5624:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, out_$p123, out_$i122);
    goto corral_source_split_5625;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    out_$p123 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(3, 1));
    goto corral_source_split_5624;

  corral_source_split_5622:
    assume {:verifier.code 0} true;
    out_$i122 := $load.i8($M.8, out_$p121);
    goto corral_source_split_5623;

  corral_source_split_5621:
    assume {:verifier.code 0} true;
    out_$p121 := $add.ref(out_$p117, $mul.ref(out_$i120, 1));
    goto corral_source_split_5622;

  corral_source_split_5620:
    assume {:verifier.code 0} true;
    out_$i120 := $sext.i32.i64(out_$i119);
    goto corral_source_split_5621;

  corral_source_split_5619:
    assume {:verifier.code 0} true;
    out_$i119 := $mul.i32(out_$i118, 8);
    goto corral_source_split_5620;

  corral_source_split_5618:
    assume {:verifier.code 0} true;
    out_$i118 := $zext.i16.i32(out_$i114);
    goto corral_source_split_5619;

  corral_source_split_5617:
    assume {:verifier.code 0} true;
    out_$p117 := $load.ref($M.8, out_$p116);
    goto corral_source_split_5618;

  corral_source_split_5616:
    assume {:verifier.code 0} true;
    out_$p116 := $add.ref($add.ref(in_$p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5617;

  corral_source_split_5615:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, out_$p115, 12);
    goto corral_source_split_5616;

  $bb38:
    assume {:verifier.code 0} true;
    out_$p115 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(2, 1));
    goto corral_source_split_5615;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb37;

  corral_source_split_5613:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb47_dummy:
    call {:si_unique_call 1} out_$p115, out_$p116, out_$p117, out_$i118, out_$i119, out_$i120, out_$p121, out_$i122, out_$p123, out_$p124, out_$p125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i114, out_$i145, out_$i146, out_$p612, out_$p613, out_$p614, out_$i615, out_$i616, out_$i617, out_$i618, out_$p619, out_$i620, out_$p621, out_$p622, out_$p623, out_$p624, out_$p625, out_$i626, out_$i627, out_$i628, out_$i629, out_$p630, out_$i631, out_$p632, out_$p633, out_$p634, out_$p635, out_$p636, out_$i637, out_$i638, out_$i639, out_$i640, out_$p641, out_$i642, out_$p643, out_$p644, out_$p645, out_$p646, out_$p647, out_$i648, out_$i649, out_$i650, out_$i651, out_$p652, out_$i653, out_$p654, out_$p655, out_$p656, out_$p657, out_$p658, out_$i659, out_$i660, out_$i661, out_$i662, out_$p663, out_$i664, out_$p665, out_$p666, out_$p667, out_$p668, out_$p669, out_$i670, out_$i671, out_$i672, out_$i673, out_$p674, out_$i675, out_$p676, out_$p677, out_$p678, out_$p679, out_$p680, out_$i681, out_$i682, out_$i683, out_$i684, out_$p685, out_$i686, out_$p687, out_$p688 := mxl111sf_i2c_hw_xfer_msg_loop_$bb35(in_$p0, in_$p1, in_$p2, in_$i110, out_$p115, out_$p116, out_$p117, out_$i118, out_$i119, out_$i120, out_$p121, out_$i122, out_$p123, out_$p124, out_$p125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i114, out_$i145, out_$i146, out_$p612, out_$p613, out_$p614, out_$i615, out_$i616, out_$i617, out_$i618, out_$p619, out_$i620, out_$p621, out_$p622, out_$p623, out_$p624, out_$p625, out_$i626, out_$i627, out_$i628, out_$i629, out_$p630, out_$i631, out_$p632, out_$p633, out_$p634, out_$p635, out_$p636, out_$i637, out_$i638, out_$i639, out_$i640, out_$p641, out_$i642, out_$p643, out_$p644, out_$p645, out_$p646, out_$p647, out_$i648, out_$i649, out_$i650, out_$i651, out_$p652, out_$i653, out_$p654, out_$p655, out_$p656, out_$p657, out_$p658, out_$i659, out_$i660, out_$i661, out_$i662, out_$p663, out_$i664, out_$p665, out_$p666, out_$p667, out_$p668, out_$p669, out_$i670, out_$i671, out_$i672, out_$i673, out_$p674, out_$i675, out_$p676, out_$p677, out_$p678, out_$p679, out_$p680, out_$i681, out_$i682, out_$i683, out_$i684, out_$p685, out_$i686, out_$p687, out_$p688);
    return;

  exit:
    return;
}



procedure mxl111sf_i2c_hw_xfer_msg_loop_$bb35(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i110: i32, in_$p115: ref, in_$p116: ref, in_$p117: ref, in_$i118: i32, in_$i119: i32, in_$i120: i64, in_$p121: ref, in_$i122: i8, in_$p123: ref, in_$p124: ref, in_$p125: ref, in_$i126: i32, in_$i127: i8, in_$i128: i32, in_$i129: i1, in_$i140: i32, in_$i141: i32, in_$i142: i16, in_$i143: i32, in_$i144: i1, in_$i114: i16, in_$i145: i16, in_$i146: i32, in_$p612: ref, in_$p613: ref, in_$p614: ref, in_$i615: i32, in_$i616: i32, in_$i617: i32, in_$i618: i64, in_$p619: ref, in_$i620: i8, in_$p621: ref, in_$p622: ref, in_$p623: ref, in_$p624: ref, in_$p625: ref, in_$i626: i32, in_$i627: i32, in_$i628: i32, in_$i629: i64, in_$p630: ref, in_$i631: i8, in_$p632: ref, in_$p633: ref, in_$p634: ref, in_$p635: ref, in_$p636: ref, in_$i637: i32, in_$i638: i32, in_$i639: i32, in_$i640: i64, in_$p641: ref, in_$i642: i8, in_$p643: ref, in_$p644: ref, in_$p645: ref, in_$p646: ref, in_$p647: ref, in_$i648: i32, in_$i649: i32, in_$i650: i32, in_$i651: i64, in_$p652: ref, in_$i653: i8, in_$p654: ref, in_$p655: ref, in_$p656: ref, in_$p657: ref, in_$p658: ref, in_$i659: i32, in_$i660: i32, in_$i661: i32, in_$i662: i64, in_$p663: ref, in_$i664: i8, in_$p665: ref, in_$p666: ref, in_$p667: ref, in_$p668: ref, in_$p669: ref, in_$i670: i32, in_$i671: i32, in_$i672: i32, in_$i673: i64, in_$p674: ref, in_$i675: i8, in_$p676: ref, in_$p677: ref, in_$p678: ref, in_$p679: ref, in_$p680: ref, in_$i681: i32, in_$i682: i32, in_$i683: i32, in_$i684: i64, in_$p685: ref, in_$i686: i8, in_$p687: ref, in_$p688: ref) returns (out_$p115: ref, out_$p116: ref, out_$p117: ref, out_$i118: i32, out_$i119: i32, out_$i120: i64, out_$p121: ref, out_$i122: i8, out_$p123: ref, out_$p124: ref, out_$p125: ref, out_$i126: i32, out_$i127: i8, out_$i128: i32, out_$i129: i1, out_$i140: i32, out_$i141: i32, out_$i142: i16, out_$i143: i32, out_$i144: i1, out_$i114: i16, out_$i145: i16, out_$i146: i32, out_$p612: ref, out_$p613: ref, out_$p614: ref, out_$i615: i32, out_$i616: i32, out_$i617: i32, out_$i618: i64, out_$p619: ref, out_$i620: i8, out_$p621: ref, out_$p622: ref, out_$p623: ref, out_$p624: ref, out_$p625: ref, out_$i626: i32, out_$i627: i32, out_$i628: i32, out_$i629: i64, out_$p630: ref, out_$i631: i8, out_$p632: ref, out_$p633: ref, out_$p634: ref, out_$p635: ref, out_$p636: ref, out_$i637: i32, out_$i638: i32, out_$i639: i32, out_$i640: i64, out_$p641: ref, out_$i642: i8, out_$p643: ref, out_$p644: ref, out_$p645: ref, out_$p646: ref, out_$p647: ref, out_$i648: i32, out_$i649: i32, out_$i650: i32, out_$i651: i64, out_$p652: ref, out_$i653: i8, out_$p654: ref, out_$p655: ref, out_$p656: ref, out_$p657: ref, out_$p658: ref, out_$i659: i32, out_$i660: i32, out_$i661: i32, out_$i662: i64, out_$p663: ref, out_$i664: i8, out_$p665: ref, out_$p666: ref, out_$p667: ref, out_$p668: ref, out_$p669: ref, out_$i670: i32, out_$i671: i32, out_$i672: i32, out_$i673: i64, out_$p674: ref, out_$i675: i8, out_$p676: ref, out_$p677: ref, out_$p678: ref, out_$p679: ref, out_$p680: ref, out_$i681: i32, out_$i682: i32, out_$i683: i32, out_$i684: i64, out_$p685: ref, out_$i686: i8, out_$p687: ref, out_$p688: ref);
  modifies $M.15, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation mxl111sf_i2c_sw_xfer_msg_loop_$bb76(in_$p0: ref, in_$p1: ref, in_$p108: ref, in_$p114: ref, in_$p115: ref, in_$i116: i64, in_$p117: ref, in_$i118: i8, in_$i119: i32, in_$i120: i8, in_$i121: i32, in_$i122: i1, in_$i123: i32, in_$i124: i1, in_$i125: i32, in_$i126: i32, in_$i127: i1, in_$i129: i1, in_$i130: i32, in_$i132: i32, in_$i133: i16, in_$i134: i32, in_$i135: i1, in_$i113: i32, in_$i136: i32, in_vslice_dummy_var_222: i32) returns (out_$p114: ref, out_$p115: ref, out_$i116: i64, out_$p117: ref, out_$i118: i8, out_$i119: i32, out_$i120: i8, out_$i121: i32, out_$i122: i1, out_$i123: i32, out_$i124: i1, out_$i125: i32, out_$i126: i32, out_$i127: i1, out_$i129: i1, out_$i130: i32, out_$i132: i32, out_$i133: i16, out_$i134: i32, out_$i135: i1, out_$i113: i32, out_$i136: i32, out_vslice_dummy_var_222: i32)
{

  entry:
    out_$p114, out_$p115, out_$i116, out_$p117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i129, out_$i130, out_$i132, out_$i133, out_$i134, out_$i135, out_$i113, out_$i136, out_vslice_dummy_var_222 := in_$p114, in_$p115, in_$i116, in_$p117, in_$i118, in_$i119, in_$i120, in_$i121, in_$i122, in_$i123, in_$i124, in_$i125, in_$i126, in_$i127, in_$i129, in_$i130, in_$i132, in_$i133, in_$i134, in_$i135, in_$i113, in_$i136, in_vslice_dummy_var_222;
    goto $bb76, exit;

  $bb76:
    assume {:verifier.code 0} true;
    goto corral_source_split_6746;

  $bb87:
    assume out_$i135 == 1;
    assume {:verifier.code 0} true;
    out_$i113 := out_$i132;
    goto $bb87_dummy;

  corral_source_split_6776:
    assume {:verifier.code 0} true;
    out_$i136 := out_$i121;
    assume true;
    goto $bb87;

  corral_source_split_6775:
    assume {:verifier.code 0} true;
    out_$i135 := $slt.i32(out_$i132, out_$i134);
    goto corral_source_split_6776;

  corral_source_split_6774:
    assume {:verifier.code 0} true;
    out_$i134 := $zext.i16.i32(out_$i133);
    goto corral_source_split_6775;

  corral_source_split_6773:
    assume {:verifier.code 0} true;
    out_$i133 := $load.i16($M.8, in_$p108);
    goto corral_source_split_6774;

  $bb86:
    assume {:verifier.code 0} true;
    out_$i132 := $add.i32(out_$i113, 1);
    call {:si_unique_call 908} {:cexpr "i"} boogie_si_record_i32(out_$i132);
    goto corral_source_split_6773;

  $bb85:
    assume !(out_$i129 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  corral_source_split_6768:
    assume {:verifier.code 0} true;
    out_$i130 := out_$i121;
    assume true;
    goto $bb85;

  $bb83:
    assume {:verifier.code 0} true;
    out_$i129 := $ne.i32(out_$i123, 0);
    goto corral_source_split_6768;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb83;

  corral_source_split_6766:
    assume {:verifier.code 0} true;
    goto $bb83;

  corral_source_split_6765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 906} out_vslice_dummy_var_222 := printk.ref.ref.i32.i32(.str.5, .str.143, out_$i121, 292);
    goto corral_source_split_6766;

  $bb81:
    assume out_$i127 == 1;
    goto corral_source_split_6765;

  corral_source_split_6763:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  corral_source_split_6762:
    assume {:verifier.code 0} true;
    out_$i127 := $ne.i32(out_$i126, 0);
    goto corral_source_split_6763;

  corral_source_split_6761:
    assume {:verifier.code 0} true;
    out_$i126 := $and.i32(out_$i125, 16);
    goto corral_source_split_6762;

  corral_source_split_6760:
    assume {:verifier.code 0} true;
    out_$i125 := $M.10;
    goto corral_source_split_6761;

  $bb78:
    assume out_$i124 == 1;
    goto corral_source_split_6760;

  corral_source_split_6758:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  corral_source_split_6757:
    assume {:verifier.code 0} true;
    out_$i124 := $ne.i32(out_$i123, 0);
    goto corral_source_split_6758;

  corral_source_split_6756:
    assume {:verifier.code 0} true;
    out_$i123 := $zext.i1.i32(out_$i122);
    call {:si_unique_call 905} {:cexpr "__ret___5"} boogie_si_record_i32(out_$i123);
    goto corral_source_split_6757;

  corral_source_split_6755:
    assume {:verifier.code 0} true;
    out_$i122 := $slt.i32(out_$i121, 0);
    goto corral_source_split_6756;

  corral_source_split_6754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 903} out_$i121 := mxl111sf_i2c_bitbang_sendbyte(in_$p0, out_$i120);
    call {:si_unique_call 904} {:cexpr "ret"} boogie_si_record_i32(out_$i121);
    goto corral_source_split_6755;

  corral_source_split_6753:
    assume {:verifier.code 0} true;
    out_$i120 := $trunc.i32.i8(out_$i119);
    goto corral_source_split_6754;

  corral_source_split_6752:
    assume {:verifier.code 0} true;
    out_$i119 := $zext.i8.i32(out_$i118);
    goto corral_source_split_6753;

  corral_source_split_6751:
    assume {:verifier.code 0} true;
    out_$i118 := $load.i8($M.8, out_$p117);
    goto corral_source_split_6752;

  corral_source_split_6750:
    assume {:verifier.code 0} true;
    out_$p117 := $add.ref(out_$p115, $mul.ref(out_$i116, 1));
    goto corral_source_split_6751;

  corral_source_split_6749:
    assume {:verifier.code 0} true;
    out_$i116 := $sext.i32.i64(out_$i113);
    goto corral_source_split_6750;

  corral_source_split_6748:
    assume {:verifier.code 0} true;
    out_$p115 := $load.ref($M.8, out_$p114);
    goto corral_source_split_6749;

  $bb77:
    assume {:verifier.code 0} true;
    out_$p114 := $add.ref($add.ref(in_$p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6748;

  corral_source_split_6746:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb79:
    assume {:verifier.code 0} true;
    assume !(out_$i124 == 1);
    goto $bb80;

  $bb82:
    assume {:verifier.code 0} true;
    assume !(out_$i127 == 1);
    goto $bb80;

  $bb87_dummy:
    call {:si_unique_call 1} out_$p114, out_$p115, out_$i116, out_$p117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i129, out_$i130, out_$i132, out_$i133, out_$i134, out_$i135, out_$i113, out_$i136, out_vslice_dummy_var_222 := mxl111sf_i2c_sw_xfer_msg_loop_$bb76(in_$p0, in_$p1, in_$p108, out_$p114, out_$p115, out_$i116, out_$p117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i129, out_$i130, out_$i132, out_$i133, out_$i134, out_$i135, out_$i113, out_$i136, out_vslice_dummy_var_222);
    return;

  exit:
    return;
}



procedure mxl111sf_i2c_sw_xfer_msg_loop_$bb76(in_$p0: ref, in_$p1: ref, in_$p108: ref, in_$p114: ref, in_$p115: ref, in_$i116: i64, in_$p117: ref, in_$i118: i8, in_$i119: i32, in_$i120: i8, in_$i121: i32, in_$i122: i1, in_$i123: i32, in_$i124: i1, in_$i125: i32, in_$i126: i32, in_$i127: i1, in_$i129: i1, in_$i130: i32, in_$i132: i32, in_$i133: i16, in_$i134: i32, in_$i135: i1, in_$i113: i32, in_$i136: i32, in_vslice_dummy_var_222: i32) returns (out_$p114: ref, out_$p115: ref, out_$i116: i64, out_$p117: ref, out_$i118: i8, out_$i119: i32, out_$i120: i8, out_$i121: i32, out_$i122: i1, out_$i123: i32, out_$i124: i1, out_$i125: i32, out_$i126: i32, out_$i127: i1, out_$i129: i1, out_$i130: i32, out_$i132: i32, out_$i133: i16, out_$i134: i32, out_$i135: i1, out_$i113: i32, out_$i136: i32, out_vslice_dummy_var_222: i32);
  modifies $M.7, $M.15, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation mxl111sf_i2c_sw_xfer_msg_loop_$bb28(in_$p0: ref, in_$p1: ref, in_$p41: ref, in_$p46: ref, in_$p47: ref, in_$i48: i64, in_$p49: ref, in_$i50: i32, in_$i51: i1, in_$i52: i32, in_$i53: i1, in_$i54: i32, in_$i55: i32, in_$i56: i1, in_$i58: i1, in_$i59: i32, in_$p61: ref, in_$i62: i16, in_$i63: i32, in_$i64: i32, in_$i65: i1, in_$i67: i32, in_$i68: i16, in_$i69: i32, in_$i70: i1, in_$i45: i32, in_vslice_dummy_var_214: i32, in_vslice_dummy_var_216: i32) returns (out_$p46: ref, out_$p47: ref, out_$i48: i64, out_$p49: ref, out_$i50: i32, out_$i51: i1, out_$i52: i32, out_$i53: i1, out_$i54: i32, out_$i55: i32, out_$i56: i1, out_$i58: i1, out_$i59: i32, out_$p61: ref, out_$i62: i16, out_$i63: i32, out_$i64: i32, out_$i65: i1, out_$i67: i32, out_$i68: i16, out_$i69: i32, out_$i70: i1, out_$i45: i32, out_vslice_dummy_var_214: i32, out_vslice_dummy_var_216: i32)
{

  entry:
    out_$p46, out_$p47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i58, out_$i59, out_$p61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i67, out_$i68, out_$i69, out_$i70, out_$i45, out_vslice_dummy_var_214, out_vslice_dummy_var_216 := in_$p46, in_$p47, in_$i48, in_$p49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i58, in_$i59, in_$p61, in_$i62, in_$i63, in_$i64, in_$i65, in_$i67, in_$i68, in_$i69, in_$i70, in_$i45, in_vslice_dummy_var_214, in_vslice_dummy_var_216;
    goto $bb28, exit;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_6642;

  $bb42:
    assume out_$i70 == 1;
    assume {:verifier.code 0} true;
    out_$i45 := out_$i67;
    goto $bb42_dummy;

  corral_source_split_6678:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42;

  corral_source_split_6677:
    assume {:verifier.code 0} true;
    out_$i70 := $slt.i32(out_$i67, out_$i69);
    goto corral_source_split_6678;

  corral_source_split_6676:
    assume {:verifier.code 0} true;
    out_$i69 := $zext.i16.i32(out_$i68);
    goto corral_source_split_6677;

  corral_source_split_6675:
    assume {:verifier.code 0} true;
    out_$i68 := $load.i16($M.8, in_$p41);
    goto corral_source_split_6676;

  $bb41:
    assume {:verifier.code 0} true;
    out_$i67 := $add.i32(out_$i45, 1);
    call {:si_unique_call 891} {:cexpr "i"} boogie_si_record_i32(out_$i67);
    goto corral_source_split_6675;

  $bb40:
    assume !(out_$i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  corral_source_split_6673:
    assume {:verifier.code 0} true;
    goto $bb41;

  corral_source_split_6672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} out_vslice_dummy_var_216 := mxl111sf_i2c_ack(in_$p0);
    goto corral_source_split_6673;

  $bb39:
    assume out_$i65 == 1;
    goto corral_source_split_6672;

  corral_source_split_6670:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  corral_source_split_6669:
    assume {:verifier.code 0} true;
    out_$i65 := $slt.i32(out_$i45, out_$i64);
    goto corral_source_split_6670;

  corral_source_split_6668:
    assume {:verifier.code 0} true;
    out_$i64 := $add.i32(out_$i63, $sub.i32(0, 1));
    goto corral_source_split_6669;

  corral_source_split_6667:
    assume {:verifier.code 0} true;
    out_$i63 := $zext.i16.i32(out_$i62);
    goto corral_source_split_6668;

  corral_source_split_6666:
    assume {:verifier.code 0} true;
    out_$i62 := $load.i16($M.8, out_$p61);
    goto corral_source_split_6667;

  $bb38:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(in_$p1, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_6666;

  $bb37:
    assume !(out_$i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  corral_source_split_6661:
    assume {:verifier.code 0} true;
    out_$i59 := out_$i50;
    assume true;
    goto $bb37;

  $bb35:
    assume {:verifier.code 0} true;
    out_$i58 := $ne.i32(out_$i52, 0);
    goto corral_source_split_6661;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_6659:
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_6658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 888} out_vslice_dummy_var_214 := printk.ref.ref.i32.i32(.str.5, .str.143, out_$i50, 261);
    goto corral_source_split_6659;

  $bb33:
    assume out_$i56 == 1;
    goto corral_source_split_6658;

  corral_source_split_6656:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  corral_source_split_6655:
    assume {:verifier.code 0} true;
    out_$i56 := $ne.i32(out_$i55, 0);
    goto corral_source_split_6656;

  corral_source_split_6654:
    assume {:verifier.code 0} true;
    out_$i55 := $and.i32(out_$i54, 16);
    goto corral_source_split_6655;

  corral_source_split_6653:
    assume {:verifier.code 0} true;
    out_$i54 := $M.10;
    goto corral_source_split_6654;

  $bb30:
    assume out_$i53 == 1;
    goto corral_source_split_6653;

  corral_source_split_6651:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  corral_source_split_6650:
    assume {:verifier.code 0} true;
    out_$i53 := $ne.i32(out_$i52, 0);
    goto corral_source_split_6651;

  corral_source_split_6649:
    assume {:verifier.code 0} true;
    out_$i52 := $zext.i1.i32(out_$i51);
    call {:si_unique_call 887} {:cexpr "__ret___1"} boogie_si_record_i32(out_$i52);
    goto corral_source_split_6650;

  corral_source_split_6648:
    assume {:verifier.code 0} true;
    out_$i51 := $slt.i32(out_$i50, 0);
    goto corral_source_split_6649;

  corral_source_split_6647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 885} out_$i50 := mxl111sf_i2c_bitbang_recvbyte(in_$p0, out_$p49);
    call {:si_unique_call 886} {:cexpr "ret"} boogie_si_record_i32(out_$i50);
    goto corral_source_split_6648;

  corral_source_split_6646:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref(out_$p47, $mul.ref(out_$i48, 1));
    goto corral_source_split_6647;

  corral_source_split_6645:
    assume {:verifier.code 0} true;
    out_$i48 := $sext.i32.i64(out_$i45);
    goto corral_source_split_6646;

  corral_source_split_6644:
    assume {:verifier.code 0} true;
    out_$p47 := $load.ref($M.8, out_$p46);
    goto corral_source_split_6645;

  $bb29:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(in_$p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6644;

  corral_source_split_6642:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb31:
    assume {:verifier.code 0} true;
    assume !(out_$i53 == 1);
    goto $bb32;

  $bb34:
    assume {:verifier.code 0} true;
    assume !(out_$i56 == 1);
    goto $bb32;

  $bb42_dummy:
    call {:si_unique_call 1} out_$p46, out_$p47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i58, out_$i59, out_$p61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i67, out_$i68, out_$i69, out_$i70, out_$i45, out_vslice_dummy_var_214, out_vslice_dummy_var_216 := mxl111sf_i2c_sw_xfer_msg_loop_$bb28(in_$p0, in_$p1, in_$p41, out_$p46, out_$p47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i58, out_$i59, out_$p61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i67, out_$i68, out_$i69, out_$i70, out_$i45, out_vslice_dummy_var_214, out_vslice_dummy_var_216);
    return;

  exit:
    return;
}



procedure mxl111sf_i2c_sw_xfer_msg_loop_$bb28(in_$p0: ref, in_$p1: ref, in_$p41: ref, in_$p46: ref, in_$p47: ref, in_$i48: i64, in_$p49: ref, in_$i50: i32, in_$i51: i1, in_$i52: i32, in_$i53: i1, in_$i54: i32, in_$i55: i32, in_$i56: i1, in_$i58: i1, in_$i59: i32, in_$p61: ref, in_$i62: i16, in_$i63: i32, in_$i64: i32, in_$i65: i1, in_$i67: i32, in_$i68: i16, in_$i69: i32, in_$i70: i1, in_$i45: i32, in_vslice_dummy_var_214: i32, in_vslice_dummy_var_216: i32) returns (out_$p46: ref, out_$p47: ref, out_$i48: i64, out_$p49: ref, out_$i50: i32, out_$i51: i1, out_$i52: i32, out_$i53: i1, out_$i54: i32, out_$i55: i32, out_$i56: i1, out_$i58: i1, out_$i59: i32, out_$p61: ref, out_$i62: i16, out_$i63: i32, out_$i64: i32, out_$i65: i1, out_$i67: i32, out_$i68: i16, out_$i69: i32, out_$i70: i1, out_$i45: i32, out_vslice_dummy_var_214: i32, out_vslice_dummy_var_216: i32);
  modifies $M.7, $M.15, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, $M.8;



implementation mxl111sf_i2c_readagain_loop_$bb33(in_$p2: ref, in_$p4: ref, in_$i56: i32, in_$i59: i32, in_$i60: i32, in_$i61: i32, in_$i62: i64, in_$p63: ref, in_$i64: i8, in_$i65: i64, in_$p66: ref, in_$i67: i32, in_$i68: i32, in_$i69: i1, in_$i70: i32, in_$i71: i32, in_$i72: i32, in_$i73: i64, in_$p74: ref, in_$i75: i8, in_$i76: i32, in_$i77: i32, in_$i78: i32, in_$i79: i32, in_$i80: i64, in_$p81: ref, in_$i82: i8, in_$i83: i32, in_$i85: i32, in_$i86: i32, in_$i87: i8, in_$i88: i32, in_$i89: i1, in_$i58: i8, in_vslice_dummy_var_305: i32) returns (out_$i59: i32, out_$i60: i32, out_$i61: i32, out_$i62: i64, out_$p63: ref, out_$i64: i8, out_$i65: i64, out_$p66: ref, out_$i67: i32, out_$i68: i32, out_$i69: i1, out_$i70: i32, out_$i71: i32, out_$i72: i32, out_$i73: i64, out_$p74: ref, out_$i75: i8, out_$i76: i32, out_$i77: i32, out_$i78: i32, out_$i79: i32, out_$i80: i64, out_$p81: ref, out_$i82: i8, out_$i83: i32, out_$i85: i32, out_$i86: i32, out_$i87: i8, out_$i88: i32, out_$i89: i1, out_$i58: i8, out_vslice_dummy_var_305: i32)
{

  entry:
    out_$i59, out_$i60, out_$i61, out_$i62, out_$p63, out_$i64, out_$i65, out_$p66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$p74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$p81, out_$i82, out_$i83, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i58, out_vslice_dummy_var_305 := in_$i59, in_$i60, in_$i61, in_$i62, in_$p63, in_$i64, in_$i65, in_$p66, in_$i67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$p74, in_$i75, in_$i76, in_$i77, in_$i78, in_$i79, in_$i80, in_$p81, in_$i82, in_$i83, in_$i85, in_$i86, in_$i87, in_$i88, in_$i89, in_$i58, in_vslice_dummy_var_305;
    goto $bb33, exit;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_8111;

  $bb38:
    assume out_$i89 == 1;
    assume {:verifier.code 0} true;
    out_$i58 := out_$i87;
    goto $bb38_dummy;

  corral_source_split_8147:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38;

  corral_source_split_8146:
    assume {:verifier.code 0} true;
    out_$i89 := $slt.i32(out_$i88, in_$i56);
    goto corral_source_split_8147;

  corral_source_split_8145:
    assume {:verifier.code 0} true;
    out_$i88 := $zext.i8.i32(out_$i87);
    goto corral_source_split_8146;

  corral_source_split_8144:
    assume {:verifier.code 0} true;
    out_$i87 := $trunc.i32.i8(out_$i86);
    call {:si_unique_call 1127} {:cexpr "i"} boogie_si_record_i8(out_$i87);
    goto corral_source_split_8145;

  corral_source_split_8143:
    assume {:verifier.code 0} true;
    out_$i86 := $add.i32(out_$i85, 1);
    goto corral_source_split_8144;

  $bb37:
    assume {:verifier.code 0} true;
    out_$i85 := $zext.i8.i32(out_$i58);
    goto corral_source_split_8143;

  $bb36:
    assume !(out_$i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  corral_source_split_8141:
    assume {:verifier.code 0} true;
    goto $bb37;

  corral_source_split_8140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1126} out_vslice_dummy_var_305 := printk.ref.ref.i32.i32(.str.140, .str.138, out_$i76, out_$i83);
    goto corral_source_split_8141;

  corral_source_split_8139:
    assume {:verifier.code 0} true;
    out_$i83 := $zext.i8.i32(out_$i82);
    goto corral_source_split_8140;

  corral_source_split_8138:
    assume {:verifier.code 0} true;
    out_$i82 := $load.i8($M.30, out_$p81);
    goto corral_source_split_8139;

  corral_source_split_8137:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref($add.ref(in_$p4, $mul.ref(0, 24)), $mul.ref(out_$i80, 1));
    goto corral_source_split_8138;

  corral_source_split_8136:
    assume {:verifier.code 0} true;
    out_$i80 := $sext.i32.i64(out_$i79);
    goto corral_source_split_8137;

  corral_source_split_8135:
    assume {:verifier.code 0} true;
    out_$i79 := $add.i32(out_$i78, 2);
    goto corral_source_split_8136;

  corral_source_split_8134:
    assume {:verifier.code 0} true;
    out_$i78 := $mul.i32(out_$i77, 3);
    goto corral_source_split_8135;

  corral_source_split_8133:
    assume {:verifier.code 0} true;
    out_$i77 := $zext.i8.i32(out_$i58);
    goto corral_source_split_8134;

  corral_source_split_8132:
    assume {:verifier.code 0} true;
    out_$i76 := $zext.i8.i32(out_$i75);
    goto corral_source_split_8133;

  corral_source_split_8131:
    assume {:verifier.code 0} true;
    out_$i75 := $load.i8($M.30, out_$p74);
    goto corral_source_split_8132;

  corral_source_split_8130:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref(in_$p4, $mul.ref(0, 24)), $mul.ref(out_$i73, 1));
    goto corral_source_split_8131;

  corral_source_split_8129:
    assume {:verifier.code 0} true;
    out_$i73 := $sext.i32.i64(out_$i72);
    goto corral_source_split_8130;

  corral_source_split_8128:
    assume {:verifier.code 0} true;
    out_$i72 := $add.i32(out_$i71, 1);
    goto corral_source_split_8129;

  corral_source_split_8127:
    assume {:verifier.code 0} true;
    out_$i71 := $mul.i32(out_$i70, 3);
    goto corral_source_split_8128;

  corral_source_split_8126:
    assume {:verifier.code 0} true;
    out_$i70 := $zext.i8.i32(out_$i58);
    goto corral_source_split_8127;

  $bb35:
    assume out_$i69 == 1;
    goto corral_source_split_8126;

  corral_source_split_8124:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  corral_source_split_8123:
    assume {:verifier.code 0} true;
    out_$i69 := $ne.i32(out_$i68, 0);
    goto corral_source_split_8124;

  corral_source_split_8122:
    assume {:verifier.code 0} true;
    out_$i68 := $and.i32(out_$i67, 4);
    goto corral_source_split_8123;

  corral_source_split_8121:
    assume {:verifier.code 0} true;
    out_$i67 := $M.10;
    goto corral_source_split_8122;

  corral_source_split_8120:
    assume {:verifier.code 0} true;
    $M.28 := $store.i8($M.28, out_$p66, out_$i64);
    goto corral_source_split_8121;

  corral_source_split_8119:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref(in_$p2, $mul.ref(out_$i65, 1));
    goto corral_source_split_8120;

  corral_source_split_8118:
    assume {:verifier.code 0} true;
    out_$i65 := $zext.i8.i64(out_$i58);
    goto corral_source_split_8119;

  corral_source_split_8117:
    assume {:verifier.code 0} true;
    out_$i64 := $load.i8($M.30, out_$p63);
    goto corral_source_split_8118;

  corral_source_split_8116:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref(in_$p4, $mul.ref(0, 24)), $mul.ref(out_$i62, 1));
    goto corral_source_split_8117;

  corral_source_split_8115:
    assume {:verifier.code 0} true;
    out_$i62 := $sext.i32.i64(out_$i61);
    goto corral_source_split_8116;

  corral_source_split_8114:
    assume {:verifier.code 0} true;
    out_$i61 := $add.i32(out_$i60, 1);
    goto corral_source_split_8115;

  corral_source_split_8113:
    assume {:verifier.code 0} true;
    out_$i60 := $mul.i32(out_$i59, 3);
    goto corral_source_split_8114;

  $bb34:
    assume {:verifier.code 0} true;
    out_$i59 := $zext.i8.i32(out_$i58);
    goto corral_source_split_8113;

  corral_source_split_8111:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb38_dummy:
    call {:si_unique_call 1} out_$i59, out_$i60, out_$i61, out_$i62, out_$p63, out_$i64, out_$i65, out_$p66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$p74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$p81, out_$i82, out_$i83, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i58, out_vslice_dummy_var_305 := mxl111sf_i2c_readagain_loop_$bb33(in_$p2, in_$p4, in_$i56, out_$i59, out_$i60, out_$i61, out_$i62, out_$p63, out_$i64, out_$i65, out_$p66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$p74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$p81, out_$i82, out_$i83, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i58, out_vslice_dummy_var_305);
    return;

  exit:
    return;
}



procedure mxl111sf_i2c_readagain_loop_$bb33(in_$p2: ref, in_$p4: ref, in_$i56: i32, in_$i59: i32, in_$i60: i32, in_$i61: i32, in_$i62: i64, in_$p63: ref, in_$i64: i8, in_$i65: i64, in_$p66: ref, in_$i67: i32, in_$i68: i32, in_$i69: i1, in_$i70: i32, in_$i71: i32, in_$i72: i32, in_$i73: i64, in_$p74: ref, in_$i75: i8, in_$i76: i32, in_$i77: i32, in_$i78: i32, in_$i79: i32, in_$i80: i64, in_$p81: ref, in_$i82: i8, in_$i83: i32, in_$i85: i32, in_$i86: i32, in_$i87: i8, in_$i88: i32, in_$i89: i1, in_$i58: i8, in_vslice_dummy_var_305: i32) returns (out_$i59: i32, out_$i60: i32, out_$i61: i32, out_$i62: i64, out_$p63: ref, out_$i64: i8, out_$i65: i64, out_$p66: ref, out_$i67: i32, out_$i68: i32, out_$i69: i1, out_$i70: i32, out_$i71: i32, out_$i72: i32, out_$i73: i64, out_$p74: ref, out_$i75: i8, out_$i76: i32, out_$i77: i32, out_$i78: i32, out_$i79: i32, out_$i80: i64, out_$p81: ref, out_$i82: i8, out_$i83: i32, out_$i85: i32, out_$i86: i32, out_$i87: i8, out_$i88: i32, out_$i89: i1, out_$i58: i8, out_vslice_dummy_var_305: i32);
  modifies $M.28;



implementation mxl111sf_i2c_readagain_loop_$bb19(in_$p3: ref, in_$i22: i32, in_$i25: i32, in_$i26: i32, in_$i27: i32, in_$i28: i64, in_$p29: ref, in_$i30: i32, in_$i31: i32, in_$i32: i32, in_$i33: i64, in_$p34: ref, in_$i35: i32, in_$i36: i32, in_$i37: i32, in_$i38: i64, in_$p39: ref, in_$i40: i32, in_$i41: i32, in_$i42: i8, in_$i43: i32, in_$i44: i1, in_$i24: i8) returns (out_$i25: i32, out_$i26: i32, out_$i27: i32, out_$i28: i64, out_$p29: ref, out_$i30: i32, out_$i31: i32, out_$i32: i32, out_$i33: i64, out_$p34: ref, out_$i35: i32, out_$i36: i32, out_$i37: i32, out_$i38: i64, out_$p39: ref, out_$i40: i32, out_$i41: i32, out_$i42: i8, out_$i43: i32, out_$i44: i1, out_$i24: i8)
{

  entry:
    out_$i25, out_$i26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i24 := in_$i25, in_$i26, in_$i27, in_$i28, in_$p29, in_$i30, in_$i31, in_$i32, in_$i33, in_$p34, in_$i35, in_$i36, in_$i37, in_$i38, in_$p39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i24;
    goto $bb19, exit;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_8060;

  $bb21:
    assume out_$i44 == 1;
    assume {:verifier.code 0} true;
    out_$i24 := out_$i42;
    goto $bb21_dummy;

  corral_source_split_8084:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21;

  corral_source_split_8083:
    assume {:verifier.code 0} true;
    out_$i44 := $slt.i32(out_$i43, in_$i22);
    goto corral_source_split_8084;

  corral_source_split_8082:
    assume {:verifier.code 0} true;
    out_$i43 := $zext.i8.i32(out_$i42);
    goto corral_source_split_8083;

  corral_source_split_8081:
    assume {:verifier.code 0} true;
    out_$i42 := $trunc.i32.i8(out_$i41);
    call {:si_unique_call 1121} {:cexpr "i"} boogie_si_record_i8(out_$i42);
    goto corral_source_split_8082;

  corral_source_split_8080:
    assume {:verifier.code 0} true;
    out_$i41 := $add.i32(out_$i40, 1);
    goto corral_source_split_8081;

  corral_source_split_8079:
    assume {:verifier.code 0} true;
    out_$i40 := $zext.i8.i32(out_$i24);
    goto corral_source_split_8080;

  corral_source_split_8078:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, out_$p39, 0);
    goto corral_source_split_8079;

  corral_source_split_8077:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(in_$p3, $mul.ref(0, 26)), $mul.ref(out_$i38, 1));
    goto corral_source_split_8078;

  corral_source_split_8076:
    assume {:verifier.code 0} true;
    out_$i38 := $sext.i32.i64(out_$i37);
    goto corral_source_split_8077;

  corral_source_split_8075:
    assume {:verifier.code 0} true;
    out_$i37 := $add.i32(out_$i36, 4);
    goto corral_source_split_8076;

  corral_source_split_8074:
    assume {:verifier.code 0} true;
    out_$i36 := $mul.i32(out_$i35, 3);
    goto corral_source_split_8075;

  corral_source_split_8073:
    assume {:verifier.code 0} true;
    out_$i35 := $zext.i8.i32(out_$i24);
    goto corral_source_split_8074;

  corral_source_split_8072:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, out_$p34, 0);
    goto corral_source_split_8073;

  corral_source_split_8071:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(in_$p3, $mul.ref(0, 26)), $mul.ref(out_$i33, 1));
    goto corral_source_split_8072;

  corral_source_split_8070:
    assume {:verifier.code 0} true;
    out_$i33 := $sext.i32.i64(out_$i32);
    goto corral_source_split_8071;

  corral_source_split_8069:
    assume {:verifier.code 0} true;
    out_$i32 := $mul.i32(out_$i31, 3);
    goto corral_source_split_8070;

  corral_source_split_8068:
    assume {:verifier.code 0} true;
    out_$i31 := $add.i32(out_$i30, 1);
    goto corral_source_split_8069;

  corral_source_split_8067:
    assume {:verifier.code 0} true;
    out_$i30 := $zext.i8.i32(out_$i24);
    goto corral_source_split_8068;

  corral_source_split_8066:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, out_$p29, 12);
    goto corral_source_split_8067;

  corral_source_split_8065:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(in_$p3, $mul.ref(0, 26)), $mul.ref(out_$i28, 1));
    goto corral_source_split_8066;

  corral_source_split_8064:
    assume {:verifier.code 0} true;
    out_$i28 := $sext.i32.i64(out_$i27);
    goto corral_source_split_8065;

  corral_source_split_8063:
    assume {:verifier.code 0} true;
    out_$i27 := $add.i32(out_$i26, 2);
    goto corral_source_split_8064;

  corral_source_split_8062:
    assume {:verifier.code 0} true;
    out_$i26 := $mul.i32(out_$i25, 3);
    goto corral_source_split_8063;

  $bb20:
    assume {:verifier.code 0} true;
    out_$i25 := $zext.i8.i32(out_$i24);
    goto corral_source_split_8062;

  corral_source_split_8060:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb21_dummy:
    call {:si_unique_call 1} out_$i25, out_$i26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i24 := mxl111sf_i2c_readagain_loop_$bb19(in_$p3, in_$i22, out_$i25, out_$i26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i24);
    return;

  exit:
    return;
}



procedure mxl111sf_i2c_readagain_loop_$bb19(in_$p3: ref, in_$i22: i32, in_$i25: i32, in_$i26: i32, in_$i27: i32, in_$i28: i64, in_$p29: ref, in_$i30: i32, in_$i31: i32, in_$i32: i32, in_$i33: i64, in_$p34: ref, in_$i35: i32, in_$i36: i32, in_$i37: i32, in_$i38: i64, in_$p39: ref, in_$i40: i32, in_$i41: i32, in_$i42: i8, in_$i43: i32, in_$i44: i1, in_$i24: i8) returns (out_$i25: i32, out_$i26: i32, out_$i27: i32, out_$i28: i64, out_$p29: ref, out_$i30: i32, out_$i31: i32, out_$i32: i32, out_$i33: i64, out_$p34: ref, out_$i35: i32, out_$i36: i32, out_$i37: i32, out_$i38: i64, out_$p39: ref, out_$i40: i32, out_$i41: i32, out_$i42: i8, out_$i43: i32, out_$i44: i1, out_$i24: i8);
  modifies $M.15;



implementation mxl111sf_i2c_readagain_loop_$bb4(in_$p0: ref, in_$i11: i8, in_$i12: i32, in_$i13: i1, in_$i10: i8, in_$i14: i32, in_$i15: i32, in_$i16: i8, in_$i17: i32, in_$i18: i1) returns (out_$i11: i8, out_$i12: i32, out_$i13: i1, out_$i10: i8, out_$i14: i32, out_$i15: i32, out_$i16: i8, out_$i17: i32, out_$i18: i1)
{

  entry:
    out_$i11, out_$i12, out_$i13, out_$i10, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18 := in_$i11, in_$i12, in_$i13, in_$i10, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_8029;

  $bb6:
    assume out_$i13 == 1;
    assume {:verifier.code 0} true;
    out_$i10 := out_$i16;
    goto $bb6_dummy;

  corral_source_split_8038:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_8037:
    assume {:verifier.code 0} true;
    out_$i13 := $eq.i32(out_$i12, 0);
    goto corral_source_split_8038;

  corral_source_split_8036:
    assume {:verifier.code 0} true;
    out_$i12 := $zext.i8.i32(out_$i11);
    goto corral_source_split_8037;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1119} out_$i11 := mxl111sf_i2c_check_fifo(in_$p0);
    call {:si_unique_call 1120} {:cexpr "fifo_status"} boogie_si_record_i8(out_$i11);
    goto corral_source_split_8036;

  corral_source_split_8040:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb8:
    assume out_$i18 == 1;
    goto corral_source_split_8040;

  corral_source_split_8034:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8;

  corral_source_split_8033:
    assume {:verifier.code 0} true;
    out_$i18 := $ule.i32(out_$i17, 4);
    goto corral_source_split_8034;

  corral_source_split_8032:
    assume {:verifier.code 0} true;
    out_$i17 := $zext.i8.i32(out_$i10);
    goto corral_source_split_8033;

  corral_source_split_8031:
    assume {:verifier.code 0} true;
    out_$i16 := $trunc.i32.i8(out_$i15);
    call {:si_unique_call 1118} {:cexpr "i"} boogie_si_record_i8(out_$i16);
    goto corral_source_split_8032;

  corral_source_split_8030:
    assume {:verifier.code 0} true;
    out_$i15 := $add.i32(out_$i14, 1);
    goto corral_source_split_8031;

  corral_source_split_8029:
    assume {:verifier.code 0} true;
    out_$i14 := $zext.i8.i32(out_$i10);
    goto corral_source_split_8030;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i11, out_$i12, out_$i13, out_$i10, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18 := mxl111sf_i2c_readagain_loop_$bb4(in_$p0, out_$i11, out_$i12, out_$i13, out_$i10, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18);
    return;

  exit:
    return;
}



procedure mxl111sf_i2c_readagain_loop_$bb4(in_$p0: ref, in_$i11: i8, in_$i12: i32, in_$i13: i1, in_$i10: i8, in_$i14: i32, in_$i15: i32, in_$i16: i8, in_$i17: i32, in_$i18: i1) returns (out_$i11: i8, out_$i12: i32, out_$i13: i1, out_$i10: i8, out_$i14: i32, out_$i15: i32, out_$i16: i8, out_$i17: i32, out_$i18: i1);
  modifies $M.15, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation ldv_assume_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} ldv_assume_loop_$bb3();
    return;

  exit:
    return;
}



procedure ldv_assume_loop_$bb3();



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();



implementation ldv_struct_dvb_usb_adapter_properties_dummy_resourceless_instance_0_loop_$bb1(in_$i1: i32, in_$i2: i1, in_$i3: i1, in_$i4: i1, in_$i5: i1, in_$i6: i1, in_$i7: i1, in_$i8: i1, in_$i9: i32, in_$p11: ref) returns (out_$i1: i32, out_$i2: i1, out_$i3: i1, out_$i4: i1, out_$i5: i1, out_$i6: i1, out_$i7: i1, out_$i8: i1, out_$i9: i32, out_$p11: ref)
{

  entry:
    out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$p11 := in_$i1, in_$i2, in_$i3, in_$i4, in_$i5, in_$i6, in_$i7, in_$i8, in_$i9, in_$p11;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1491} out_$i1 := ldv_undef_int();
    call {:si_unique_call 1492} {:cexpr "tmp"} boogie_si_record_i32(out_$i1);
    goto corral_source_split_9970;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb35_dummy;

  corral_source_split_10013:
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_10007:
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_10001:
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_9993:
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_9987:
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_9981:
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_9975:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1493} ldv_dummy_resourceless_instance_callback_0_18($u3, $u4);
    goto corral_source_split_9975;

  corral_source_split_9973:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb2:
    assume out_$i2 == 1;
    goto corral_source_split_9973;

  corral_source_split_9971:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  corral_source_split_9970:
    assume {:verifier.code 0} true;
    out_$i2 := $eq.i32(out_$i1, 1);
    goto corral_source_split_9971;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1494} ldv_dummy_resourceless_instance_callback_0_15($u5, $u6, $u1);
    goto corral_source_split_9981;

  corral_source_split_9979:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb6:
    assume out_$i3 == 1;
    goto corral_source_split_9979;

  corral_source_split_9977:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i3 := $eq.i32(out_$i1, 2);
    goto corral_source_split_9977;

  $bb3:
    assume !(out_$i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_123:
    goto corral_source_split_9987;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1495} ldv_dummy_resourceless_instance_callback_0_12($u7, $u8, $u9, $u1);
    goto SeqInstr_122;

  corral_source_split_9985:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb10:
    assume out_$i4 == 1;
    goto corral_source_split_9985;

  corral_source_split_9983:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i4 := $eq.i32(out_$i1, 3);
    goto corral_source_split_9983;

  $bb7:
    assume !(out_$i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1496} ldv_dummy_resourceless_instance_callback_0_11($u10, $u11);
    goto corral_source_split_9993;

  corral_source_split_9991:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb14:
    assume out_$i5 == 1;
    goto corral_source_split_9991;

  corral_source_split_9989:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb13:
    assume {:verifier.code 0} true;
    out_$i5 := $eq.i32(out_$i1, 4);
    goto corral_source_split_9989;

  $bb11:
    assume !(out_$i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_10000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1499} ldv_free(out_$p11);
    goto corral_source_split_10001;

  corral_source_split_9999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1498} ldv_dummy_resourceless_instance_callback_0_8($u12, $u6, out_$p11, $u13);
    goto corral_source_split_10000;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1497} out_$p11 := ldv_xmalloc(1);
    goto corral_source_split_9999;

  corral_source_split_9997:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb18:
    assume out_$i6 == 1;
    goto corral_source_split_9997;

  corral_source_split_9995:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb17:
    assume {:verifier.code 0} true;
    out_$i6 := $eq.i32(out_$i1, 5);
    goto corral_source_split_9995;

  $bb15:
    assume !(out_$i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1500} ldv_dummy_resourceless_instance_callback_0_7($u14, $u8);
    goto corral_source_split_10007;

  corral_source_split_10005:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb22:
    assume out_$i7 == 1;
    goto corral_source_split_10005;

  corral_source_split_10003:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb21:
    assume {:verifier.code 0} true;
    out_$i7 := $eq.i32(out_$i1, 6);
    goto corral_source_split_10003;

  $bb19:
    assume !(out_$i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1501} ldv_dummy_resourceless_instance_callback_0_3($u3, $u4);
    goto corral_source_split_10013;

  corral_source_split_10011:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb26:
    assume out_$i8 == 1;
    goto corral_source_split_10011;

  corral_source_split_10009:
    assume {:verifier.code 0} true;
    out_$i9 := out_$i1;
    assume true;
    goto $bb26;

  $bb25:
    assume {:verifier.code 0} true;
    out_$i8 := $eq.i32(out_$i1, 7);
    goto corral_source_split_10009;

  $bb23:
    assume !(out_$i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb35_dummy:
    call {:si_unique_call 1} out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$p11 := ldv_struct_dvb_usb_adapter_properties_dummy_resourceless_instance_0_loop_$bb1(out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$p11);
    return;

  exit:
    return;
}



procedure ldv_struct_dvb_usb_adapter_properties_dummy_resourceless_instance_0_loop_$bb1(in_$i1: i32, in_$i2: i1, in_$i3: i1, in_$i4: i1, in_$i5: i1, in_$i6: i1, in_$i7: i1, in_$i8: i1, in_$i9: i32, in_$p11: ref) returns (out_$i1: i32, out_$i2: i1, out_$i3: i1, out_$i4: i1, out_$i5: i1, out_$i6: i1, out_$i7: i1, out_$i8: i1, out_$i9: i32, out_$p11: ref);
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr, $M.15, $M.27, $M.8, $M.29, $M.28, assertsPassed, $M.11, $M.12, $M.18, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25;



implementation ldv_struct_dvb_usb_adapter_properties_dummy_resourceless_instance_1_loop_$bb1(in_$i1: i32, in_$i2: i1, in_$i3: i1, in_$i4: i1, in_$i5: i1, in_$i6: i1, in_$i7: i1, in_$i8: i1, in_$i9: i32, in_$p11: ref) returns (out_$i1: i32, out_$i2: i1, out_$i3: i1, out_$i4: i1, out_$i5: i1, out_$i6: i1, out_$i7: i1, out_$i8: i1, out_$i9: i32, out_$p11: ref)
{

  entry:
    out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$p11 := in_$i1, in_$i2, in_$i3, in_$i4, in_$i5, in_$i6, in_$i7, in_$i8, in_$i9, in_$p11;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1503} out_$i1 := ldv_undef_int();
    call {:si_unique_call 1504} {:cexpr "tmp"} boogie_si_record_i32(out_$i1);
    goto corral_source_split_10023;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb35_dummy;

  corral_source_split_10066:
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_10060:
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_10054:
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_10046:
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_10040:
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_10034:
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_10028:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1505} ldv_dummy_resourceless_instance_callback_1_18($u3, $u4);
    goto corral_source_split_10028;

  corral_source_split_10026:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb2:
    assume out_$i2 == 1;
    goto corral_source_split_10026;

  corral_source_split_10024:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  corral_source_split_10023:
    assume {:verifier.code 0} true;
    out_$i2 := $eq.i32(out_$i1, 1);
    goto corral_source_split_10024;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1506} ldv_dummy_resourceless_instance_callback_1_15($u5, $u6, $u1);
    goto corral_source_split_10034;

  corral_source_split_10032:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb6:
    assume out_$i3 == 1;
    goto corral_source_split_10032;

  corral_source_split_10030:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i3 := $eq.i32(out_$i1, 2);
    goto corral_source_split_10030;

  $bb3:
    assume !(out_$i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_126:
    goto corral_source_split_10040;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1507} ldv_dummy_resourceless_instance_callback_1_12($u7, $u8, $u9, $u1);
    goto SeqInstr_125;

  corral_source_split_10038:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb10:
    assume out_$i4 == 1;
    goto corral_source_split_10038;

  corral_source_split_10036:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i4 := $eq.i32(out_$i1, 3);
    goto corral_source_split_10036;

  $bb7:
    assume !(out_$i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1508} ldv_dummy_resourceless_instance_callback_1_11($u10, $u11);
    goto corral_source_split_10046;

  corral_source_split_10044:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb14:
    assume out_$i5 == 1;
    goto corral_source_split_10044;

  corral_source_split_10042:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb13:
    assume {:verifier.code 0} true;
    out_$i5 := $eq.i32(out_$i1, 4);
    goto corral_source_split_10042;

  $bb11:
    assume !(out_$i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_10053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1511} ldv_free(out_$p11);
    goto corral_source_split_10054;

  corral_source_split_10052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1510} ldv_dummy_resourceless_instance_callback_1_8($u12, $u6, out_$p11, $u13);
    goto corral_source_split_10053;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1509} out_$p11 := ldv_xmalloc(1);
    goto corral_source_split_10052;

  corral_source_split_10050:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb18:
    assume out_$i6 == 1;
    goto corral_source_split_10050;

  corral_source_split_10048:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb17:
    assume {:verifier.code 0} true;
    out_$i6 := $eq.i32(out_$i1, 5);
    goto corral_source_split_10048;

  $bb15:
    assume !(out_$i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1512} ldv_dummy_resourceless_instance_callback_1_7($u14, $u8);
    goto corral_source_split_10060;

  corral_source_split_10058:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb22:
    assume out_$i7 == 1;
    goto corral_source_split_10058;

  corral_source_split_10056:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb21:
    assume {:verifier.code 0} true;
    out_$i7 := $eq.i32(out_$i1, 6);
    goto corral_source_split_10056;

  $bb19:
    assume !(out_$i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1513} ldv_dummy_resourceless_instance_callback_1_3($u3, $u4);
    goto corral_source_split_10066;

  corral_source_split_10064:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb26:
    assume out_$i8 == 1;
    goto corral_source_split_10064;

  corral_source_split_10062:
    assume {:verifier.code 0} true;
    out_$i9 := out_$i1;
    assume true;
    goto $bb26;

  $bb25:
    assume {:verifier.code 0} true;
    out_$i8 := $eq.i32(out_$i1, 7);
    goto corral_source_split_10062;

  $bb23:
    assume !(out_$i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb35_dummy:
    call {:si_unique_call 1} out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$p11 := ldv_struct_dvb_usb_adapter_properties_dummy_resourceless_instance_1_loop_$bb1(out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$p11);
    return;

  exit:
    return;
}



procedure ldv_struct_dvb_usb_adapter_properties_dummy_resourceless_instance_1_loop_$bb1(in_$i1: i32, in_$i2: i1, in_$i3: i1, in_$i4: i1, in_$i5: i1, in_$i6: i1, in_$i7: i1, in_$i8: i1, in_$i9: i32, in_$p11: ref) returns (out_$i1: i32, out_$i2: i1, out_$i3: i1, out_$i4: i1, out_$i5: i1, out_$i6: i1, out_$i7: i1, out_$i8: i1, out_$i9: i32, out_$p11: ref);
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr, $M.15, $M.27, $M.8, $M.29, $M.28, assertsPassed, $M.11, $M.12, $M.18, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25;



implementation ldv_struct_dvb_usb_adapter_properties_dummy_resourceless_instance_2_loop_$bb1(in_$i1: i32, in_$i2: i1, in_$i3: i1, in_$i4: i1, in_$i5: i1, in_$i6: i1, in_$i7: i1, in_$i8: i1, in_$i9: i32, in_$p11: ref) returns (out_$i1: i32, out_$i2: i1, out_$i3: i1, out_$i4: i1, out_$i5: i1, out_$i6: i1, out_$i7: i1, out_$i8: i1, out_$i9: i32, out_$p11: ref)
{

  entry:
    out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$p11 := in_$i1, in_$i2, in_$i3, in_$i4, in_$i5, in_$i6, in_$i7, in_$i8, in_$i9, in_$p11;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1515} out_$i1 := ldv_undef_int();
    call {:si_unique_call 1516} {:cexpr "tmp"} boogie_si_record_i32(out_$i1);
    goto corral_source_split_10076;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb35_dummy;

  corral_source_split_10119:
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_10113:
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_10107:
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_10099:
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_10093:
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_10087:
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_10081:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1517} ldv_dummy_resourceless_instance_callback_2_18($u3, $u4);
    goto corral_source_split_10081;

  corral_source_split_10079:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb2:
    assume out_$i2 == 1;
    goto corral_source_split_10079;

  corral_source_split_10077:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  corral_source_split_10076:
    assume {:verifier.code 0} true;
    out_$i2 := $eq.i32(out_$i1, 1);
    goto corral_source_split_10077;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1518} ldv_dummy_resourceless_instance_callback_2_15($u5, $u6, $u1);
    goto corral_source_split_10087;

  corral_source_split_10085:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb6:
    assume out_$i3 == 1;
    goto corral_source_split_10085;

  corral_source_split_10083:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i3 := $eq.i32(out_$i1, 2);
    goto corral_source_split_10083;

  $bb3:
    assume !(out_$i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_129:
    goto corral_source_split_10093;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1519} ldv_dummy_resourceless_instance_callback_2_12($u7, $u8, $u9, $u1);
    goto SeqInstr_128;

  corral_source_split_10091:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb10:
    assume out_$i4 == 1;
    goto corral_source_split_10091;

  corral_source_split_10089:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i4 := $eq.i32(out_$i1, 3);
    goto corral_source_split_10089;

  $bb7:
    assume !(out_$i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1520} ldv_dummy_resourceless_instance_callback_2_11($u10, $u11);
    goto corral_source_split_10099;

  corral_source_split_10097:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb14:
    assume out_$i5 == 1;
    goto corral_source_split_10097;

  corral_source_split_10095:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb13:
    assume {:verifier.code 0} true;
    out_$i5 := $eq.i32(out_$i1, 4);
    goto corral_source_split_10095;

  $bb11:
    assume !(out_$i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_10106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1523} ldv_free(out_$p11);
    goto corral_source_split_10107;

  corral_source_split_10105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1522} ldv_dummy_resourceless_instance_callback_2_8($u12, $u6, out_$p11, $u13);
    goto corral_source_split_10106;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1521} out_$p11 := ldv_xmalloc(1);
    goto corral_source_split_10105;

  corral_source_split_10103:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb18:
    assume out_$i6 == 1;
    goto corral_source_split_10103;

  corral_source_split_10101:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb17:
    assume {:verifier.code 0} true;
    out_$i6 := $eq.i32(out_$i1, 5);
    goto corral_source_split_10101;

  $bb15:
    assume !(out_$i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1524} ldv_dummy_resourceless_instance_callback_2_7($u14, $u8);
    goto corral_source_split_10113;

  corral_source_split_10111:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb22:
    assume out_$i7 == 1;
    goto corral_source_split_10111;

  corral_source_split_10109:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb21:
    assume {:verifier.code 0} true;
    out_$i7 := $eq.i32(out_$i1, 6);
    goto corral_source_split_10109;

  $bb19:
    assume !(out_$i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1525} ldv_dummy_resourceless_instance_callback_2_3($u3, $u4);
    goto corral_source_split_10119;

  corral_source_split_10117:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb26:
    assume out_$i8 == 1;
    goto corral_source_split_10117;

  corral_source_split_10115:
    assume {:verifier.code 0} true;
    out_$i9 := out_$i1;
    assume true;
    goto $bb26;

  $bb25:
    assume {:verifier.code 0} true;
    out_$i8 := $eq.i32(out_$i1, 7);
    goto corral_source_split_10115;

  $bb23:
    assume !(out_$i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb35_dummy:
    call {:si_unique_call 1} out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$p11 := ldv_struct_dvb_usb_adapter_properties_dummy_resourceless_instance_2_loop_$bb1(out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$p11);
    return;

  exit:
    return;
}



procedure ldv_struct_dvb_usb_adapter_properties_dummy_resourceless_instance_2_loop_$bb1(in_$i1: i32, in_$i2: i1, in_$i3: i1, in_$i4: i1, in_$i5: i1, in_$i6: i1, in_$i7: i1, in_$i8: i1, in_$i9: i32, in_$p11: ref) returns (out_$i1: i32, out_$i2: i1, out_$i3: i1, out_$i4: i1, out_$i5: i1, out_$i6: i1, out_$i7: i1, out_$i8: i1, out_$i9: i32, out_$p11: ref);
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr, $M.15, $M.27, $M.8, $M.29, $M.28, assertsPassed, $M.11, $M.12, $M.18, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25;



implementation ldv_struct_dvb_usb_adapter_properties_dummy_resourceless_instance_3_loop_$bb1(in_$i1: i32, in_$i2: i1, in_$i3: i1, in_$i4: i1, in_$i5: i1, in_$i6: i1, in_$i7: i1, in_$i8: i1, in_$i9: i32, in_$p11: ref) returns (out_$i1: i32, out_$i2: i1, out_$i3: i1, out_$i4: i1, out_$i5: i1, out_$i6: i1, out_$i7: i1, out_$i8: i1, out_$i9: i32, out_$p11: ref)
{

  entry:
    out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$p11 := in_$i1, in_$i2, in_$i3, in_$i4, in_$i5, in_$i6, in_$i7, in_$i8, in_$i9, in_$p11;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1527} out_$i1 := ldv_undef_int();
    call {:si_unique_call 1528} {:cexpr "tmp"} boogie_si_record_i32(out_$i1);
    goto corral_source_split_10129;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb35_dummy;

  corral_source_split_10172:
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_10166:
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_10160:
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_10152:
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_10146:
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_10140:
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_10134:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1529} ldv_dummy_resourceless_instance_callback_3_18($u3, $u4);
    goto corral_source_split_10134;

  corral_source_split_10132:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb2:
    assume out_$i2 == 1;
    goto corral_source_split_10132;

  corral_source_split_10130:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  corral_source_split_10129:
    assume {:verifier.code 0} true;
    out_$i2 := $eq.i32(out_$i1, 1);
    goto corral_source_split_10130;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1530} ldv_dummy_resourceless_instance_callback_3_15($u5, $u6, $u1);
    goto corral_source_split_10140;

  corral_source_split_10138:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb6:
    assume out_$i3 == 1;
    goto corral_source_split_10138;

  corral_source_split_10136:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i3 := $eq.i32(out_$i1, 2);
    goto corral_source_split_10136;

  $bb3:
    assume !(out_$i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_132:
    goto corral_source_split_10146;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1531} ldv_dummy_resourceless_instance_callback_3_12($u7, $u8, $u9, $u1);
    goto SeqInstr_131;

  corral_source_split_10144:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb10:
    assume out_$i4 == 1;
    goto corral_source_split_10144;

  corral_source_split_10142:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i4 := $eq.i32(out_$i1, 3);
    goto corral_source_split_10142;

  $bb7:
    assume !(out_$i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1532} ldv_dummy_resourceless_instance_callback_3_11($u10, $u11);
    goto corral_source_split_10152;

  corral_source_split_10150:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb14:
    assume out_$i5 == 1;
    goto corral_source_split_10150;

  corral_source_split_10148:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb13:
    assume {:verifier.code 0} true;
    out_$i5 := $eq.i32(out_$i1, 4);
    goto corral_source_split_10148;

  $bb11:
    assume !(out_$i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_10159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1535} ldv_free(out_$p11);
    goto corral_source_split_10160;

  corral_source_split_10158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1534} ldv_dummy_resourceless_instance_callback_3_8($u12, $u6, out_$p11, $u13);
    goto corral_source_split_10159;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1533} out_$p11 := ldv_xmalloc(1);
    goto corral_source_split_10158;

  corral_source_split_10156:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb18:
    assume out_$i6 == 1;
    goto corral_source_split_10156;

  corral_source_split_10154:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb17:
    assume {:verifier.code 0} true;
    out_$i6 := $eq.i32(out_$i1, 5);
    goto corral_source_split_10154;

  $bb15:
    assume !(out_$i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1536} ldv_dummy_resourceless_instance_callback_3_7($u14, $u8);
    goto corral_source_split_10166;

  corral_source_split_10164:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb22:
    assume out_$i7 == 1;
    goto corral_source_split_10164;

  corral_source_split_10162:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb21:
    assume {:verifier.code 0} true;
    out_$i7 := $eq.i32(out_$i1, 6);
    goto corral_source_split_10162;

  $bb19:
    assume !(out_$i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1537} ldv_dummy_resourceless_instance_callback_3_3($u3, $u4);
    goto corral_source_split_10172;

  corral_source_split_10170:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb26:
    assume out_$i8 == 1;
    goto corral_source_split_10170;

  corral_source_split_10168:
    assume {:verifier.code 0} true;
    out_$i9 := out_$i1;
    assume true;
    goto $bb26;

  $bb25:
    assume {:verifier.code 0} true;
    out_$i8 := $eq.i32(out_$i1, 7);
    goto corral_source_split_10168;

  $bb23:
    assume !(out_$i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb35_dummy:
    call {:si_unique_call 1} out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$p11 := ldv_struct_dvb_usb_adapter_properties_dummy_resourceless_instance_3_loop_$bb1(out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$p11);
    return;

  exit:
    return;
}



procedure ldv_struct_dvb_usb_adapter_properties_dummy_resourceless_instance_3_loop_$bb1(in_$i1: i32, in_$i2: i1, in_$i3: i1, in_$i4: i1, in_$i5: i1, in_$i6: i1, in_$i7: i1, in_$i8: i1, in_$i9: i32, in_$p11: ref) returns (out_$i1: i32, out_$i2: i1, out_$i3: i1, out_$i4: i1, out_$i5: i1, out_$i6: i1, out_$i7: i1, out_$i8: i1, out_$i9: i32, out_$p11: ref);
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr, $M.15, $M.27, $M.8, $M.29, $M.28, assertsPassed, $M.11, $M.12, $M.18, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25;



implementation ldv_struct_dvb_usb_adapter_properties_dummy_resourceless_instance_4_loop_$bb1(in_$i1: i32, in_$i2: i1, in_$i3: i1, in_$i4: i1, in_$i5: i1, in_$i6: i1, in_$i7: i1, in_$i8: i1, in_$i9: i32, in_$p11: ref) returns (out_$i1: i32, out_$i2: i1, out_$i3: i1, out_$i4: i1, out_$i5: i1, out_$i6: i1, out_$i7: i1, out_$i8: i1, out_$i9: i32, out_$p11: ref)
{

  entry:
    out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$p11 := in_$i1, in_$i2, in_$i3, in_$i4, in_$i5, in_$i6, in_$i7, in_$i8, in_$i9, in_$p11;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1539} out_$i1 := ldv_undef_int();
    call {:si_unique_call 1540} {:cexpr "tmp"} boogie_si_record_i32(out_$i1);
    goto corral_source_split_10182;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb35_dummy;

  corral_source_split_10225:
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_10219:
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_10213:
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_10205:
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_10199:
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_10193:
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_10187:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1541} ldv_dummy_resourceless_instance_callback_4_18($u3, $u4);
    goto corral_source_split_10187;

  corral_source_split_10185:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb2:
    assume out_$i2 == 1;
    goto corral_source_split_10185;

  corral_source_split_10183:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  corral_source_split_10182:
    assume {:verifier.code 0} true;
    out_$i2 := $eq.i32(out_$i1, 1);
    goto corral_source_split_10183;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1542} ldv_dummy_resourceless_instance_callback_4_15($u5, $u6, $u1);
    goto corral_source_split_10193;

  corral_source_split_10191:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb6:
    assume out_$i3 == 1;
    goto corral_source_split_10191;

  corral_source_split_10189:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i3 := $eq.i32(out_$i1, 2);
    goto corral_source_split_10189;

  $bb3:
    assume !(out_$i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_135:
    goto corral_source_split_10199;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1543} ldv_dummy_resourceless_instance_callback_4_12($u7, $u8, $u9, $u1);
    goto SeqInstr_134;

  corral_source_split_10197:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb10:
    assume out_$i4 == 1;
    goto corral_source_split_10197;

  corral_source_split_10195:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i4 := $eq.i32(out_$i1, 3);
    goto corral_source_split_10195;

  $bb7:
    assume !(out_$i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1544} ldv_dummy_resourceless_instance_callback_4_11($u10, $u11);
    goto corral_source_split_10205;

  corral_source_split_10203:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb14:
    assume out_$i5 == 1;
    goto corral_source_split_10203;

  corral_source_split_10201:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb13:
    assume {:verifier.code 0} true;
    out_$i5 := $eq.i32(out_$i1, 4);
    goto corral_source_split_10201;

  $bb11:
    assume !(out_$i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_10212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1547} ldv_free(out_$p11);
    goto corral_source_split_10213;

  corral_source_split_10211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1546} ldv_dummy_resourceless_instance_callback_4_8($u12, $u6, out_$p11, $u13);
    goto corral_source_split_10212;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1545} out_$p11 := ldv_xmalloc(1);
    goto corral_source_split_10211;

  corral_source_split_10209:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb18:
    assume out_$i6 == 1;
    goto corral_source_split_10209;

  corral_source_split_10207:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb17:
    assume {:verifier.code 0} true;
    out_$i6 := $eq.i32(out_$i1, 5);
    goto corral_source_split_10207;

  $bb15:
    assume !(out_$i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1548} ldv_dummy_resourceless_instance_callback_4_7($u14, $u8);
    goto corral_source_split_10219;

  corral_source_split_10217:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb22:
    assume out_$i7 == 1;
    goto corral_source_split_10217;

  corral_source_split_10215:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb21:
    assume {:verifier.code 0} true;
    out_$i7 := $eq.i32(out_$i1, 6);
    goto corral_source_split_10215;

  $bb19:
    assume !(out_$i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1549} ldv_dummy_resourceless_instance_callback_4_3($u3, $u4);
    goto corral_source_split_10225;

  corral_source_split_10223:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb26:
    assume out_$i8 == 1;
    goto corral_source_split_10223;

  corral_source_split_10221:
    assume {:verifier.code 0} true;
    out_$i9 := out_$i1;
    assume true;
    goto $bb26;

  $bb25:
    assume {:verifier.code 0} true;
    out_$i8 := $eq.i32(out_$i1, 7);
    goto corral_source_split_10221;

  $bb23:
    assume !(out_$i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb35_dummy:
    call {:si_unique_call 1} out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$p11 := ldv_struct_dvb_usb_adapter_properties_dummy_resourceless_instance_4_loop_$bb1(out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$p11);
    return;

  exit:
    return;
}



procedure ldv_struct_dvb_usb_adapter_properties_dummy_resourceless_instance_4_loop_$bb1(in_$i1: i32, in_$i2: i1, in_$i3: i1, in_$i4: i1, in_$i5: i1, in_$i6: i1, in_$i7: i1, in_$i8: i1, in_$i9: i32, in_$p11: ref) returns (out_$i1: i32, out_$i2: i1, out_$i3: i1, out_$i4: i1, out_$i5: i1, out_$i6: i1, out_$i7: i1, out_$i8: i1, out_$i9: i32, out_$p11: ref);
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr, $M.15, $M.27, $M.8, $M.29, $M.28, assertsPassed, $M.11, $M.12, $M.18, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25;



implementation ldv_struct_dvb_usb_adapter_properties_dummy_resourceless_instance_5_loop_$bb1(in_$i1: i32, in_$i2: i1, in_$i3: i1, in_$i4: i1, in_$i5: i1, in_$i6: i1, in_$i7: i1, in_$i8: i1, in_$i9: i32, in_$p11: ref) returns (out_$i1: i32, out_$i2: i1, out_$i3: i1, out_$i4: i1, out_$i5: i1, out_$i6: i1, out_$i7: i1, out_$i8: i1, out_$i9: i32, out_$p11: ref)
{

  entry:
    out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$p11 := in_$i1, in_$i2, in_$i3, in_$i4, in_$i5, in_$i6, in_$i7, in_$i8, in_$i9, in_$p11;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1551} out_$i1 := ldv_undef_int();
    call {:si_unique_call 1552} {:cexpr "tmp"} boogie_si_record_i32(out_$i1);
    goto corral_source_split_10235;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb35_dummy;

  corral_source_split_10278:
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_10272:
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_10266:
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_10258:
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_10252:
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_10246:
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_10240:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1553} ldv_dummy_resourceless_instance_callback_5_18($u3, $u4);
    goto corral_source_split_10240;

  corral_source_split_10238:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb2:
    assume out_$i2 == 1;
    goto corral_source_split_10238;

  corral_source_split_10236:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  corral_source_split_10235:
    assume {:verifier.code 0} true;
    out_$i2 := $eq.i32(out_$i1, 1);
    goto corral_source_split_10236;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1554} ldv_dummy_resourceless_instance_callback_5_15($u5, $u6, $u1);
    goto corral_source_split_10246;

  corral_source_split_10244:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb6:
    assume out_$i3 == 1;
    goto corral_source_split_10244;

  corral_source_split_10242:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i3 := $eq.i32(out_$i1, 2);
    goto corral_source_split_10242;

  $bb3:
    assume !(out_$i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_138:
    goto corral_source_split_10252;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1555} ldv_dummy_resourceless_instance_callback_5_12($u7, $u8, $u9, $u1);
    goto SeqInstr_137;

  corral_source_split_10250:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb10:
    assume out_$i4 == 1;
    goto corral_source_split_10250;

  corral_source_split_10248:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i4 := $eq.i32(out_$i1, 3);
    goto corral_source_split_10248;

  $bb7:
    assume !(out_$i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1556} ldv_dummy_resourceless_instance_callback_5_11($u10, $u11);
    goto corral_source_split_10258;

  corral_source_split_10256:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb14:
    assume out_$i5 == 1;
    goto corral_source_split_10256;

  corral_source_split_10254:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb13:
    assume {:verifier.code 0} true;
    out_$i5 := $eq.i32(out_$i1, 4);
    goto corral_source_split_10254;

  $bb11:
    assume !(out_$i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_10265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1559} ldv_free(out_$p11);
    goto corral_source_split_10266;

  corral_source_split_10264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1558} ldv_dummy_resourceless_instance_callback_5_8($u12, $u6, out_$p11, $u13);
    goto corral_source_split_10265;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1557} out_$p11 := ldv_xmalloc(1);
    goto corral_source_split_10264;

  corral_source_split_10262:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb18:
    assume out_$i6 == 1;
    goto corral_source_split_10262;

  corral_source_split_10260:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb17:
    assume {:verifier.code 0} true;
    out_$i6 := $eq.i32(out_$i1, 5);
    goto corral_source_split_10260;

  $bb15:
    assume !(out_$i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1560} ldv_dummy_resourceless_instance_callback_5_7($u14, $u8);
    goto corral_source_split_10272;

  corral_source_split_10270:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb22:
    assume out_$i7 == 1;
    goto corral_source_split_10270;

  corral_source_split_10268:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb21:
    assume {:verifier.code 0} true;
    out_$i7 := $eq.i32(out_$i1, 6);
    goto corral_source_split_10268;

  $bb19:
    assume !(out_$i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1561} ldv_dummy_resourceless_instance_callback_5_3($u3, $u4);
    goto corral_source_split_10278;

  corral_source_split_10276:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb26:
    assume out_$i8 == 1;
    goto corral_source_split_10276;

  corral_source_split_10274:
    assume {:verifier.code 0} true;
    out_$i9 := out_$i1;
    assume true;
    goto $bb26;

  $bb25:
    assume {:verifier.code 0} true;
    out_$i8 := $eq.i32(out_$i1, 7);
    goto corral_source_split_10274;

  $bb23:
    assume !(out_$i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb35_dummy:
    call {:si_unique_call 1} out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$p11 := ldv_struct_dvb_usb_adapter_properties_dummy_resourceless_instance_5_loop_$bb1(out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$p11);
    return;

  exit:
    return;
}



procedure ldv_struct_dvb_usb_adapter_properties_dummy_resourceless_instance_5_loop_$bb1(in_$i1: i32, in_$i2: i1, in_$i3: i1, in_$i4: i1, in_$i5: i1, in_$i6: i1, in_$i7: i1, in_$i8: i1, in_$i9: i32, in_$p11: ref) returns (out_$i1: i32, out_$i2: i1, out_$i3: i1, out_$i4: i1, out_$i5: i1, out_$i6: i1, out_$i7: i1, out_$i8: i1, out_$i9: i32, out_$p11: ref);
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr, $M.15, $M.27, $M.8, $M.29, $M.28, assertsPassed, $M.11, $M.12, $M.18, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25;



implementation ldv_struct_mxl111sf_tuner_config_dummy_resourceless_instance_6_loop_$bb1(in_$i1: i32, in_$i2: i1, in_$i3: i1, in_$i4: i1, in_$i5: i1, in_$i6: i1, in_$i7: i32, in_$i9: i32, in_$i10: i8, in_$i11: i32, in_$i12: i8, in_$p13: ref, in_$i14: i32, in_$i15: i8) returns (out_$i1: i32, out_$i2: i1, out_$i3: i1, out_$i4: i1, out_$i5: i1, out_$i6: i1, out_$i7: i32, out_$i9: i32, out_$i10: i8, out_$i11: i32, out_$i12: i8, out_$p13: ref, out_$i14: i32, out_$i15: i8)
{

  entry:
    out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i9, out_$i10, out_$i11, out_$i12, out_$p13, out_$i14, out_$i15 := in_$i1, in_$i2, in_$i3, in_$i4, in_$i5, in_$i6, in_$i7, in_$i9, in_$i10, in_$i11, in_$i12, in_$p13, in_$i14, in_$i15;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1619} out_$i1 := ldv_undef_int();
    call {:si_unique_call 1620} {:cexpr "tmp"} boogie_si_record_i32(out_$i1);
    goto corral_source_split_10420;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb27_dummy;

  corral_source_split_10457:
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_10451:
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_10445:
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_10435:
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_10429:
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_10428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1621} ldv_dummy_resourceless_instance_callback_6_14($u16, $u17, out_$i10, out_$i12);
    goto corral_source_split_10429;

  corral_source_split_10427:
    assume {:verifier.code 0} true;
    out_$i12 := $trunc.i32.i8(out_$i11);
    goto corral_source_split_10428;

  corral_source_split_10426:
    assume {:verifier.code 0} true;
    out_$i11 := $zext.i8.i32($u15);
    goto corral_source_split_10427;

  corral_source_split_10425:
    assume {:verifier.code 0} true;
    out_$i10 := $trunc.i32.i8(out_$i9);
    goto corral_source_split_10426;

  $bb4:
    assume {:verifier.code 0} true;
    out_$i9 := $zext.i8.i32($u15);
    goto corral_source_split_10425;

  corral_source_split_10423:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb2:
    assume out_$i2 == 1;
    goto corral_source_split_10423;

  corral_source_split_10421:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  corral_source_split_10420:
    assume {:verifier.code 0} true;
    out_$i2 := $eq.i32(out_$i1, 1);
    goto corral_source_split_10421;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1622} ldv_dummy_resourceless_instance_callback_6_11($u18, $u17, $u1);
    goto corral_source_split_10435;

  corral_source_split_10433:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb6:
    assume out_$i3 == 1;
    goto corral_source_split_10433;

  corral_source_split_10431:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i3 := $eq.i32(out_$i1, 2);
    goto corral_source_split_10431;

  $bb3:
    assume !(out_$i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  corral_source_split_10444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1625} ldv_free(out_$p13);
    goto corral_source_split_10445;

  corral_source_split_10443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1624} ldv_dummy_resourceless_instance_callback_6_8($u19, $u17, out_$i15, out_$p13);
    goto corral_source_split_10444;

  corral_source_split_10442:
    assume {:verifier.code 0} true;
    out_$i15 := $trunc.i32.i8(out_$i14);
    goto corral_source_split_10443;

  corral_source_split_10441:
    assume {:verifier.code 0} true;
    out_$i14 := $zext.i8.i32($u15);
    goto corral_source_split_10442;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1623} out_$p13 := ldv_xmalloc(1);
    goto corral_source_split_10441;

  corral_source_split_10439:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb10:
    assume out_$i4 == 1;
    goto corral_source_split_10439;

  corral_source_split_10437:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i4 := $eq.i32(out_$i1, 3);
    goto corral_source_split_10437;

  $bb7:
    assume !(out_$i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1626} ldv_dummy_resourceless_instance_callback_6_7($u20, $u17, $u21);
    goto corral_source_split_10451;

  corral_source_split_10449:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb14:
    assume out_$i5 == 1;
    goto corral_source_split_10449;

  corral_source_split_10447:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb13:
    assume {:verifier.code 0} true;
    out_$i5 := $eq.i32(out_$i1, 4);
    goto corral_source_split_10447;

  $bb11:
    assume !(out_$i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1627} ldv_dummy_resourceless_instance_callback_6_3($u22, $u6);
    goto corral_source_split_10457;

  corral_source_split_10455:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb18:
    assume out_$i6 == 1;
    goto corral_source_split_10455;

  corral_source_split_10453:
    assume {:verifier.code 0} true;
    out_$i7 := out_$i1;
    assume true;
    goto $bb18;

  $bb17:
    assume {:verifier.code 0} true;
    out_$i6 := $eq.i32(out_$i1, 5);
    goto corral_source_split_10453;

  $bb15:
    assume !(out_$i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb27_dummy:
    call {:si_unique_call 1} out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i9, out_$i10, out_$i11, out_$i12, out_$p13, out_$i14, out_$i15 := ldv_struct_mxl111sf_tuner_config_dummy_resourceless_instance_6_loop_$bb1(out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i9, out_$i10, out_$i11, out_$i12, out_$p13, out_$i14, out_$i15);
    return;

  exit:
    return;
}



procedure ldv_struct_mxl111sf_tuner_config_dummy_resourceless_instance_6_loop_$bb1(in_$i1: i32, in_$i2: i1, in_$i3: i1, in_$i4: i1, in_$i5: i1, in_$i6: i1, in_$i7: i32, in_$i9: i32, in_$i10: i8, in_$i11: i32, in_$i12: i8, in_$p13: ref, in_$i14: i32, in_$i15: i8) returns (out_$i1: i32, out_$i2: i1, out_$i3: i1, out_$i4: i1, out_$i5: i1, out_$i6: i1, out_$i7: i32, out_$i9: i32, out_$i10: i8, out_$i11: i32, out_$i12: i8, out_$p13: ref, out_$i14: i32, out_$i15: i8);
  modifies $M.15, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, $M.7;


