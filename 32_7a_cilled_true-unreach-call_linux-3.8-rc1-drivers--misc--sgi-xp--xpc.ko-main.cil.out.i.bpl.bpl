var $M.0: i32;

var $M.1: [ref]i8;

var $M.2: i32;

var $M.3: ref;

var $M.4: [ref]i8;

var $M.5: ref;

var $M.6: ref;

var $M.7: i32;

var $M.8: [ref]ref;

var $M.9: [ref]ref;

var $M.10: [ref]ref;

var $M.11: [ref]ref;

var $M.12: [ref]i24;

var $M.13: [ref]i8;

var $M.14: ref;

var $M.15: ref;

var $M.16: ref;

var $M.17: ref;

var $M.18: [ref]i32;

var $M.19: [ref]ref;

var $M.20: [ref]ref;

var $M.21: [ref]ref;

var $M.22: [ref]ref;

var $M.23: i32;

var $M.24: ref;

var $M.25: [ref]ref;

var $M.28: i32;

var $M.31: [ref]i8;

var $M.32: i32;

var $M.33: i32;

var $M.34: i32;

var $M.35: i32;

var $M.36: ref;

var $M.37: ref;

var $M.39: [ref]i32;

var $M.40: i64;

var $M.41: [ref]ref;

var $M.42: [ref]i64;

var $M.43: [ref]i64;

var $M.44: [ref]i64;

var $M.45: [ref]i64;

var $M.47: i32;

var $M.48: i32;

var $M.49: i32;

var $M.50: i32;

var $M.51: i32;

var $M.52: i32;

var $M.53: ref;

var $M.54: i64;

var $M.55: ref;

var $M.56: ref;

var $M.57: i64;

var $M.58: ref;

var $M.59: i32;

var $M.60: i32;

var $M.61: i32;

var $M.62: ref;

var $M.63: ref;

var $M.64: ref;

var $M.65: i16;

var $M.66: i16;

var $M.67: i32;

var $M.68: ref;

var $M.69: i16;

var $M.70: i8;

var $M.71: ref;

var $M.72: ref;

var $M.73: ref;

var $M.74: ref;

var $M.75: i16;

var $M.77: ref;

var $M.78: ref;

var $M.79: i64;

var $M.80: i32;

var $M.81: ref;

var $M.82: i64;

var $M.83: ref;

var $M.84: ref;

var $M.85: ref;

var $M.86: ref;

var $M.87: i32;

var $M.88: ref;

var $M.89: i16;

var $M.90: [ref]i8;

var $M.93: [ref]i32;

var $M.94: [ref]i32;

var $M.95: [ref]ref;

var $M.96: [ref]ref;

var $M.97: [ref]i32;

var $M.98: [ref]i16;

var $M.99: [ref]ref;

var $M.100: [ref]ref;

var $M.101: [ref]ref;

var $M.102: [ref]ref;

var $M.103: [ref]ref;

var $M.104: [ref]ref;

var $M.105: [ref]ref;

var $M.106: [ref]i32;

var $M.107: [ref]i16;

var $M.108: [ref]ref;

var $M.109: [ref]ref;

var $M.110: [ref]ref;

var $M.111: [ref]ref;

var $M.112: [ref]ref;

var $M.113: [ref]ref;

var $M.114: [ref]ref;

var $M.115: [ref]i32;

var $M.116: [ref]i16;

var $M.117: [ref]ref;

var $M.118: [ref]ref;

var $M.119: [ref]ref;

var $M.120: [ref]ref;

var $M.121: [ref]ref;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 597871);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32952));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const xpc_dbg_name: ref;

axiom xpc_dbg_name == $sub.ref(0, 1144);

const .str: ref;

axiom .str == $sub.ref(0, 2172);

const xpc_part_dbg_subname: ref;

axiom xpc_part_dbg_subname == $sub.ref(0, 4340);

const .str.1: ref;

axiom .str.1 == $sub.ref(0, 5365);

const xpc_chan_dbg_subname: ref;

axiom xpc_chan_dbg_subname == $sub.ref(0, 7533);

const xpc_part: ref;

axiom xpc_part == $sub.ref(0, 8565);

const xpc_chan: ref;

axiom xpc_chan == $sub.ref(0, 9597);

const xpc_disengage_timelimit: ref;

axiom xpc_disengage_timelimit == $sub.ref(0, 10625);

const xpc_activate_IRQ_rcvd_lock: ref;

axiom xpc_activate_IRQ_rcvd_lock == $sub.ref(0, 11721);

const {:count 27} .str.2: ref;

axiom .str.2 == $sub.ref(0, 12772);

const xpc_activate_IRQ_wq: ref;

axiom xpc_activate_IRQ_wq == $sub.ref(0, 13884);

const {:count 25} .str.3: ref;

axiom .str.3 == $sub.ref(0, 14933);

const xpc_partitions: ref;

axiom xpc_partitions == $sub.ref(0, 15965);

const xpc_arch_ops: ref;

axiom xpc_arch_ops == $sub.ref(0, 17317);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 18345);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 19373);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 20401);

const ldv_state_variable_3: ref;

axiom ldv_state_variable_3 == $sub.ref(0, 21429);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 22457);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 23485);

const ldvarg24: ref;

axiom ldvarg24 == $sub.ref(0, 24517);

const ldvarg26: ref;

axiom ldvarg26 == $sub.ref(0, 25549);

const ldvarg25: ref;

axiom ldvarg25 == $sub.ref(0, 26581);

const ldvarg27: ref;

axiom ldvarg27 == $sub.ref(0, 27613);

const ldvarg29: ref;

axiom ldvarg29 == $sub.ref(0, 28645);

const ldvarg28: ref;

axiom ldvarg28 == $sub.ref(0, 29677);

const xpc_nasid_mask_nlongs: ref;

axiom xpc_nasid_mask_nlongs == $sub.ref(0, 30705);

const xpc_mach_nasids: ref;

axiom xpc_mach_nasids == $sub.ref(0, 31737);

const xpc_rsvd_page: ref;

axiom xpc_rsvd_page == $sub.ref(0, 32769);

const xpc_disengage_timedout: ref;

axiom xpc_disengage_timedout == $sub.ref(0, 33797);

const xpc_exiting: ref;

axiom xpc_exiting == $sub.ref(0, 34825);

const xpc_arch_ops_uv_group1: ref;

axiom xpc_arch_ops_uv_group1 == $sub.ref(0, 35857);

const xpc_arch_ops_uv_group2: ref;

axiom xpc_arch_ops_uv_group2 == $sub.ref(0, 36889);

const ldvarg23: ref;

axiom ldvarg23 == $sub.ref(0, 37921);

const ldvarg22: ref;

axiom ldvarg22 == $sub.ref(0, 38947);

const ldvarg21: ref;

axiom ldvarg21 == $sub.ref(0, 39973);

const ldvarg19: ref;

axiom ldvarg19 == $sub.ref(0, 41001);

const ldvarg17: ref;

axiom ldvarg17 == $sub.ref(0, 42033);

const ldvarg16: ref;

axiom ldvarg16 == $sub.ref(0, 43059);

const ldvarg20: ref;

axiom ldvarg20 == $sub.ref(0, 44084);

const ldvarg15: ref;

axiom ldvarg15 == $sub.ref(0, 45116);

const ldvarg18: ref;

axiom ldvarg18 == $sub.ref(0, 46148);

const ldvarg14: ref;

axiom ldvarg14 == $sub.ref(0, 47180);

const ldvarg13: ref;

axiom ldvarg13 == $sub.ref(0, 48212);

const ldvarg12: ref;

axiom ldvarg12 == $sub.ref(0, 49238);

const ldvarg11: ref;

axiom ldvarg11 == $sub.ref(0, 50270);

const xpc_arch_ops_uv_group0: ref;

axiom xpc_arch_ops_uv_group0 == $sub.ref(0, 51302);

const ldvarg10: ref;

axiom ldvarg10 == $sub.ref(0, 52334);

const ldvarg9: ref;

axiom ldvarg9 == $sub.ref(0, 53362);

const ldvarg8: ref;

axiom ldvarg8 == $sub.ref(0, 54394);

const ldvarg7: ref;

axiom ldvarg7 == $sub.ref(0, 55426);

const ldvarg4: ref;

axiom ldvarg4 == $sub.ref(0, 56458);

const ldvarg6: ref;

axiom ldvarg6 == $sub.ref(0, 57490);

const ldvarg5: ref;

axiom ldvarg5 == $sub.ref(0, 58522);

const ldvarg3: ref;

axiom ldvarg3 == $sub.ref(0, 59554);

const ldvarg2: ref;

axiom ldvarg2 == $sub.ref(0, 60582);

const ldvarg1: ref;

axiom ldvarg1 == $sub.ref(0, 61614);

const ldvarg0: ref;

axiom ldvarg0 == $sub.ref(0, 62640);

const xpc_activate_IRQ_rcvd: ref;

axiom xpc_activate_IRQ_rcvd == $sub.ref(0, 63668);

const xpc_heartbeat_uv: ref;

axiom xpc_heartbeat_uv == $sub.ref(0, 64700);

const xpc_mq_node: ref;

axiom xpc_mq_node == $sub.ref(0, 65728);

const xpc_arch_ops_uv: ref;

axiom xpc_arch_ops_uv == $sub.ref(0, 67080);

const xpc_die_disconnecting: ref;

axiom xpc_die_disconnecting == $sub.ref(0, 68108);

const xpc_discovery_exited: ref;

axiom xpc_discovery_exited == $sub.ref(0, 69228);

const xpc_hb_checker_exited: ref;

axiom xpc_hb_checker_exited == $sub.ref(0, 70348);

const xpc_hb_timer: ref;

axiom xpc_hb_timer == $sub.ref(0, 71500);

const xpc_hb_check_timeout: ref;

axiom xpc_hb_check_timeout == $sub.ref(0, 72532);

const xpc_die_notifier: ref;

axiom xpc_die_notifier == $sub.ref(0, 73580);

const xpc_reboot_notifier: ref;

axiom xpc_reboot_notifier == $sub.ref(0, 74628);

const xpc_disengage_max_timelimit: ref;

axiom xpc_disengage_max_timelimit == $sub.ref(0, 75656);

const xpc_disengage_min_timelimit: ref;

axiom xpc_disengage_min_timelimit == $sub.ref(0, 76684);

const xpc_hb_check_max_interval: ref;

axiom xpc_hb_check_max_interval == $sub.ref(0, 77712);

const xpc_hb_check_min_interval: ref;

axiom xpc_hb_check_min_interval == $sub.ref(0, 78740);

const xpc_hb_check_interval: ref;

axiom xpc_hb_check_interval == $sub.ref(0, 79768);

const xpc_hb_max_interval: ref;

axiom xpc_hb_max_interval == $sub.ref(0, 80796);

const xpc_hb_min_interval: ref;

axiom xpc_hb_min_interval == $sub.ref(0, 81824);

const xpc_hb_interval: ref;

axiom xpc_hb_interval == $sub.ref(0, 82852);

const {:count 3} xpc_sys_xpc_hb_dir: ref;

axiom xpc_sys_xpc_hb_dir == $sub.ref(0, 84068);

const {:count 3} xpc_sys_xpc_dir: ref;

axiom xpc_sys_xpc_dir == $sub.ref(0, 85284);

const {:count 2} xpc_sys_dir: ref;

axiom xpc_sys_dir == $sub.ref(0, 86436);

const ldv_mutex_mutex_of_xpc_registration: ref;

axiom ldv_mutex_mutex_of_xpc_registration == $sub.ref(0, 87464);

const ldv_mutex_mutex_of_device: ref;

axiom ldv_mutex_mutex_of_device == $sub.ref(0, 88492);

const ldv_mutex_lock: ref;

axiom ldv_mutex_lock == $sub.ref(0, 89520);

const ldv_mutex_cred_guard_mutex_of_signal_struct: ref;

axiom ldv_mutex_cred_guard_mutex_of_signal_struct == $sub.ref(0, 90548);

const ldv_mutex_cached_activate_gru_mq_desc_mutex_of_xpc_partition_uv: ref;

axiom ldv_mutex_cached_activate_gru_mq_desc_mutex_of_xpc_partition_uv == $sub.ref(0, 91576);

const xpc_notify_mq_uv: ref;

axiom xpc_notify_mq_uv == $sub.ref(0, 92608);

const xpc_activate_mq_uv: ref;

axiom xpc_activate_mq_uv == $sub.ref(0, 93640);

const xpc_nasid_mask_nbytes: ref;

axiom xpc_nasid_mask_nbytes == $sub.ref(0, 94668);

const xpc_part_nasids: ref;

axiom xpc_part_nasids == $sub.ref(0, 95700);

const xpc_sysctl: ref;

axiom xpc_sysctl == $sub.ref(0, 96732);

const {:count 3} .str.72: ref;

axiom .str.72 == $sub.ref(0, 97759);

const {:count 20} .str.73: ref;

axiom .str.73 == $sub.ref(0, 98803);

const {:count 12} .str.74: ref;

axiom .str.74 == $sub.ref(0, 99839);

const {:count 18} .str.75: ref;

axiom .str.75 == $sub.ref(0, 100881);

const jiffies: ref;

axiom jiffies == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const xp_max_npartitions: ref;

axiom xp_max_npartitions == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 69} .str.86: ref;

axiom .str.86 == $sub.ref(0, 101974);

const {:count 43} .str.87: ref;

axiom .str.87 == $sub.ref(0, 103041);

const {:count 33} .str.88: ref;

axiom .str.88 == $sub.ref(0, 104098);

const xp_pa: ref;

axiom xp_pa == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const xp_restrict_memprotect: ref;

axiom xp_restrict_memprotect == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32800));

const {:count 228} .str.114: ref;

axiom .str.114 == $sub.ref(0, 105350);

const uv_blade_info: ref;

axiom uv_blade_info == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32808));

const {:count 25} .str.43: ref;

axiom .str.43 == $sub.ref(0, 106399);

const {:count 235} .str.38: ref;

axiom .str.38 == $sub.ref(0, 107658);

const {:count 41} .str.44: ref;

axiom .str.44 == $sub.ref(0, 108723);

const {:count 25} .str.20: ref;

axiom .str.20 == $sub.ref(0, 109772);

const {:count 233} .str.21: ref;

axiom .str.21 == $sub.ref(0, 111029);

const {:count 38} .str.22: ref;

axiom .str.22 == $sub.ref(0, 112091);

const {:count 23} .str.26: ref;

axiom .str.26 == $sub.ref(0, 113138);

const {:count 43} .str.27: ref;

axiom .str.27 == $sub.ref(0, 114205);

const {:count 230} .str.6: ref;

axiom .str.6 == $sub.ref(0, 115459);

const {:count 11} .str.9: ref;

axiom .str.9 == $sub.ref(0, 116494);

const {:count 18} .str.64: ref;

axiom .str.64 == $sub.ref(0, 117536);

const {:count 41} .str.65: ref;

axiom .str.65 == $sub.ref(0, 118601);

const {:count 40} .str.66: ref;

axiom .str.66 == $sub.ref(0, 119665);

const {:count 23} .str.28: ref;

axiom .str.28 == $sub.ref(0, 120712);

const {:count 53} .str.29: ref;

axiom .str.29 == $sub.ref(0, 121789);

const {:count 55} .str.30: ref;

axiom .str.30 == $sub.ref(0, 122868);

const {:count 21} .str.67: ref;

axiom .str.67 == $sub.ref(0, 123913);

const {:count 59} .str.68: ref;

axiom .str.68 == $sub.ref(0, 124996);

const current_task: ref;

axiom current_task == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32816));

const {:count 20} .str.34: ref;

axiom .str.34 == $sub.ref(0, 126040);

const {:count 54} .str.35: ref;

axiom .str.35 == $sub.ref(0, 127118);

const {:count 56} .str.36: ref;

axiom .str.36 == $sub.ref(0, 128198);

const {:count 22} .str.5: ref;

axiom .str.5 == $sub.ref(0, 129244);

const {:count 48} .str.7: ref;

axiom .str.7 == $sub.ref(0, 130316);

const {:count 47} .str.8: ref;

axiom .str.8 == $sub.ref(0, 131387);

const {:count 22} .str.23: ref;

axiom .str.23 == $sub.ref(0, 132433);

const {:count 62} .str.24: ref;

axiom .str.24 == $sub.ref(0, 133519);

const {:count 64} .str.25: ref;

axiom .str.25 == $sub.ref(0, 134607);

const {:count 53} .str.40: ref;

axiom .str.40 == $sub.ref(0, 135684);

const kernel_stack: ref;

axiom kernel_stack == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32824));

const {:count 47} .str.89: ref;

axiom .str.89 == $sub.ref(0, 136755);

const {:count 34} .str.82: ref;

axiom .str.82 == $sub.ref(0, 137813);

const {:count 33} .str.85: ref;

axiom .str.85 == $sub.ref(0, 138870);

const {:count 21} .str.120: ref;

axiom .str.120 == $sub.ref(0, 139915);

const {:count 80} .str.121: ref;

axiom .str.121 == $sub.ref(0, 141019);

const {:count 82} .str.122: ref;

axiom .str.122 == $sub.ref(0, 142125);

const xp_partition_id: ref;

axiom xp_partition_id == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32832));

const {:count 17} .str.124: ref;

axiom .str.124 == $sub.ref(0, 143166);

const {:count 54} .str.125: ref;

axiom .str.125 == $sub.ref(0, 144244);

const {:count 54} .str.126: ref;

axiom .str.126 == $sub.ref(0, 145322);

const {:count 42} .str.127: ref;

axiom .str.127 == $sub.ref(0, 146388);

const xp_remote_memcpy: ref;

axiom xp_remote_memcpy == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32840));

const this_cpu_off: ref;

axiom this_cpu_off == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32848));

const __uv_hub_info: ref;

axiom __uv_hub_info == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32856));

const {:count 22} .str.123: ref;

axiom .str.123 == $sub.ref(0, 147434);

const {:count 26} .str.128: ref;

axiom .str.128 == $sub.ref(0, 148484);

const {:count 49} .str.129: ref;

axiom .str.129 == $sub.ref(0, 149557);

const sn_partition_id: ref;

axiom sn_partition_id == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32864));

const {:count 8} .str.4: ref;

axiom .str.4 == $sub.ref(0, 150589);

const {:count 15} .str.54: ref;

axiom .str.54 == $sub.ref(0, 151628);

const {:count 25} .str.55: ref;

axiom .str.55 == $sub.ref(0, 152677);

const {:count 28} .str.45: ref;

axiom .str.45 == $sub.ref(0, 153729);

const {:count 34} .str.46: ref;

axiom .str.46 == $sub.ref(0, 154787);

const xpc_registrations: ref;

axiom xpc_registrations == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32872));

const {:count 38} .str.98: ref;

axiom .str.98 == $sub.ref(0, 155849);

const {:count 52} .str.99: ref;

axiom .str.99 == $sub.ref(0, 156925);

const {:count 34} .str.90: ref;

axiom .str.90 == $sub.ref(0, 157983);

const {:count 72} .str.91: ref;

axiom .str.91 == $sub.ref(0, 159079);

const {:count 58} .str.92: ref;

axiom .str.92 == $sub.ref(0, 160161);

const {:count 94} .str.93: ref;

axiom .str.93 == $sub.ref(0, 161279);

const {:count 122} .str.94: ref;

axiom .str.94 == $sub.ref(0, 162425);

const {:count 92} .str.95: ref;

axiom .str.95 == $sub.ref(0, 163541);

const {:count 90} .str.96: ref;

axiom .str.96 == $sub.ref(0, 164655);

const {:count 60} .str.97: ref;

axiom .str.97 == $sub.ref(0, 165739);

const {:count 26} .str.41: ref;

axiom .str.41 == $sub.ref(0, 166789);

const {:count 32} .str.42: ref;

axiom .str.42 == $sub.ref(0, 167845);

const {:count 31} .str.56: ref;

axiom .str.56 == $sub.ref(0, 168900);

const {:count 42} .str.57: ref;

axiom .str.57 == $sub.ref(0, 169966);

const {:count 28} .str.58: ref;

axiom .str.58 == $sub.ref(0, 171018);

const {:count 22} .str.59: ref;

axiom .str.59 == $sub.ref(0, 172064);

const {:count 20} .str.60: ref;

axiom .str.60 == $sub.ref(0, 173108);

const {:count 21} .str.61: ref;

axiom .str.61 == $sub.ref(0, 174153);

const {:count 13} .str.62: ref;

axiom .str.62 == $sub.ref(0, 175190);

const {:count 9} .str.63: ref;

axiom .str.63 == $sub.ref(0, 176223);

const {:count 44} .str.130: ref;

axiom .str.130 == $sub.ref(0, 177291);

const {:count 31} .str.131: ref;

axiom .str.131 == $sub.ref(0, 178346);

const {:count 5} .str.10: ref;

axiom .str.10 == $sub.ref(0, 179375);

const {:count 5} .str.11: ref;

axiom .str.11 == $sub.ref(0, 180404);

const {:count 42} .str.12: ref;

axiom .str.12 == $sub.ref(0, 181470);

const {:count 31} .str.13: ref;

axiom .str.13 == $sub.ref(0, 182525);

const {:count 32} .str.14: ref;

axiom .str.14 == $sub.ref(0, 183581);

const {:count 29} .str.15: ref;

axiom .str.15 == $sub.ref(0, 184634);

const {:count 7} .str.16: ref;

axiom .str.16 == $sub.ref(0, 185665);

const {:count 38} .str.17: ref;

axiom .str.17 == $sub.ref(0, 186727);

const {:count 14} .str.18: ref;

axiom .str.18 == $sub.ref(0, 187765);

const {:count 39} .str.19: ref;

axiom .str.19 == $sub.ref(0, 188828);

const {:count 25} .str.33: ref;

axiom .str.33 == $sub.ref(0, 189877);

const {:count 37} .str.32: ref;

axiom .str.32 == $sub.ref(0, 190938);

const {:count 18} .str.31: ref;

axiom .str.31 == $sub.ref(0, 191980);

const {:count 23} .str.83: ref;

axiom .str.83 == $sub.ref(0, 193027);

const {:count 29} .str.84: ref;

axiom .str.84 == $sub.ref(0, 194080);

const xp_region_size: ref;

axiom xp_region_size == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32880));

const {:count 21} .str.47: ref;

axiom .str.47 == $sub.ref(0, 195125);

const {:count 19} .str.48: ref;

axiom .str.48 == $sub.ref(0, 196168);

const {:count 73} .str.49: ref;

axiom .str.49 == $sub.ref(0, 197265);

const {:count 63} .str.50: ref;

axiom .str.50 == $sub.ref(0, 198352);

const {:count 65} .str.51: ref;

axiom .str.51 == $sub.ref(0, 199441);

const {:count 54} .str.52: ref;

axiom .str.52 == $sub.ref(0, 200519);

const {:count 21} .str.100: ref;

axiom .str.100 == $sub.ref(0, 201564);

const {:count 75} .str.101: ref;

axiom .str.101 == $sub.ref(0, 202663);

const {:count 32} .str.102: ref;

axiom .str.102 == $sub.ref(0, 203719);

const {:count 28} .str.103: ref;

axiom .str.103 == $sub.ref(0, 204771);

const {:count 40} .str.104: ref;

axiom .str.104 == $sub.ref(0, 205835);

const {:count 15} .str.76: ref;

axiom .str.76 == $sub.ref(0, 206874);

const {:count 55} .str.77: ref;

axiom .str.77 == $sub.ref(0, 207953);

const {:count 28} .str.78: ref;

axiom .str.78 == $sub.ref(0, 209005);

const {:count 35} .str.79: ref;

axiom .str.79 == $sub.ref(0, 210064);

const {:count 30} .str.80: ref;

axiom .str.80 == $sub.ref(0, 211118);

const {:count 16} .str.81: ref;

axiom .str.81 == $sub.ref(0, 212158);

const cpu_bit_bitmap: ref;

axiom cpu_bit_bitmap == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32888));

const cpu_number: ref;

axiom cpu_number == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32896));

const xp_cpu_to_nasid: ref;

axiom xp_cpu_to_nasid == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32904));

const {:count 40} .str.37: ref;

axiom .str.37 == $sub.ref(0, 213222);

const xp_socket_pa: ref;

axiom xp_socket_pa == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32912));

const {:count 76} .str.39: ref;

axiom .str.39 == $sub.ref(0, 214322);

const {:count 26} .str.69: ref;

axiom .str.69 == $sub.ref(0, 215372);

const {:count 25} .str.70: ref;

axiom .str.70 == $sub.ref(0, 216421);

const {:count 19} .str.71: ref;

axiom .str.71 == $sub.ref(0, 217464);

const node_states: ref;

axiom node_states == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32920));

const {:count 38} .str.53: ref;

axiom .str.53 == $sub.ref(0, 218526);

const {:count 13} .str.105: ref;

axiom .str.105 == $sub.ref(0, 219563);

const nr_cpu_ids: ref;

axiom nr_cpu_ids == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32928));

const {:count 11} .str.106: ref;

axiom .str.106 == $sub.ref(0, 220598);

const {:count 68} .str.118: ref;

axiom .str.118 == $sub.ref(0, 221690);

const {:count 91} .str.119: ref;

axiom .str.119 == $sub.ref(0, 222805);

const {:count 24} .str.117: ref;

axiom .str.117 == $sub.ref(0, 223853);

const {:count 70} .str.107: ref;

axiom .str.107 == $sub.ref(0, 224947);

const {:count 79} .str.108: ref;

axiom .str.108 == $sub.ref(0, 226050);

const {:count 80} .str.109: ref;

axiom .str.109 == $sub.ref(0, 227154);

const {:count 39} .str.110: ref;

axiom .str.110 == $sub.ref(0, 228217);

const {:count 46} .str.111: ref;

axiom .str.111 == $sub.ref(0, 229287);

const xp_expand_memprotect: ref;

axiom xp_expand_memprotect == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32936));

const {:count 45} .str.113: ref;

axiom .str.113 == $sub.ref(0, 230356);

const {:count 20} .str.112: ref;

axiom .str.112 == $sub.ref(0, 231400);

const node_data: ref;

axiom node_data == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32944));

const uv_cpu_to_blade: ref;

axiom uv_cpu_to_blade == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32952));

const {:count 70} .str.115: ref;

axiom .str.115 == $sub.ref(0, 232494);

const {:count 60} .str.116: ref;

axiom .str.116 == $sub.ref(0, 233578);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 234610);

const {:count 3} .str.1.274: ref;

axiom .str.1.274 == $sub.ref(0, 235637);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 236675);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 237703);

const ldv_is_err: ref;

axiom ldv_is_err == $sub.ref(0, 238735);

procedure ldv_is_err($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation ldv_is_err($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 18446744073709547521);
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 239767);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const proc_dointvec_minmax: ref;

axiom proc_dointvec_minmax == $sub.ref(0, 240799);

procedure proc_dointvec_minmax($p0: ref, $i1: i32, $p2: ref, $p3: ref, $p4: ref) returns ($r: i32);



const xpc_system_reboot: ref;

axiom xpc_system_reboot == $sub.ref(0, 241831);

procedure xpc_system_reboot($p0: ref, $i1: i64, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.1, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.23, $CurrAddr, $M.28, assertsPassed;



implementation xpc_system_reboot($p0: ref, $i1: i64, $p2: ref) returns ($r: i32)
{
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i32;

  $bb0:
    call {:si_unique_call 0} {:cexpr "xpc_system_reboot:arg:event"} boogie_si_record_i64($i1);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i3 := $slt.i64($i1, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $slt.i64($i1, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i1, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i7 := 45;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1} xpc_do_exit($i7);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_1:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i5 == 1;
    goto corral_source_split_9;

  corral_source_split_9:
    assume {:verifier.code 0} true;
    $i7 := 48;
    goto $bb11;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    $i7 := 46;
    goto $bb11;

  $bb2:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i1, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb8;

  $bb9:
    assume $i6 == 1;
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 0} true;
    $i7 := 47;
    goto $bb11;
}



const xpc_do_exit: ref;

axiom xpc_do_exit == $sub.ref(0, 242863);

procedure xpc_do_exit($i0: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.1, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.23, $CurrAddr, $M.28, assertsPassed;



implementation xpc_do_exit($i0: i32)
{
  var $i2: i64;
  var $i3: i64;
  var $i4: i64;
  var $i5: i32;
  var $i6: i64;
  var $i7: i16;
  var $i8: i32;
  var $i9: i1;
  var $p15: ref;
  var $i16: i64;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i8;
  var $i22: i32;
  var $i23: i1;
  var $i26: i32;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $p30: ref;
  var $i31: i64;
  var $i32: i64;
  var $i24: i32;
  var $i25: i64;
  var $i33: i32;
  var $i34: i32;
  var $i35: i16;
  var $i36: i32;
  var $i37: i16;
  var $i38: i32;
  var $i39: i1;
  var $i12: i64;
  var $i13: i16;
  var $i14: i32;
  var $i40: i32;
  var $i41: i64;
  var $i10: i32;
  var $i11: i64;
  var $p42: ref;
  var $i43: i32;
  var $i44: i1;
  var $i45: i64;
  var $i46: i64;
  var $i47: i1;
  var $p48: ref;
  var $i49: i64;
  var $i50: i64;
  var $i51: i64;
  var $i53: i64;
  var $i54: i64;
  var $i57: i1;
  var $i58: i1;
  var $p59: ref;
  var $i61: i32;
  var $i62: i1;
  var $p63: ref;
  var $i65: i32;
  var $i55: i64;
  var $i56: i32;
  var $i66: i64;
  var $i67: i32;
  var $i69: i1;
  var $p72: ref;
  var $i73: i64;
  var $i74: i1;
  var $p75: ref;
  var $i76: i32;
  var $i77: i1;
  var vslice_dummy_var_9: i64;
  var vslice_dummy_var_10: i32;
  var vslice_dummy_var_11: i32;
  var vslice_dummy_var_12: i32;
  var vslice_dummy_var_13: i64;
  var vslice_dummy_var_14: i32;
  var vslice_dummy_var_15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2} {:cexpr "xpc_do_exit:arg:reason"} boogie_si_record_i32($i0);
    goto corral_source_split_16;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    $M.0 := 1;
    call {:si_unique_call 3} {:cexpr "xpc_exiting"} boogie_si_record_i32(1);
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4} __wake_up(xpc_activate_IRQ_wq, 1, 1, $0.ref);
    goto corral_source_split_18;

  corral_source_split_18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5} wait_for_completion(xpc_discovery_exited);
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6} wait_for_completion(xpc_hb_checker_exited);
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 7} vslice_dummy_var_9 := msleep_interruptible(300);
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.1, jiffies);
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i2, 2500);
    call {:si_unique_call 8} {:cexpr "printmsg_time"} boogie_si_record_i64($i3);
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    $M.2 := 0;
    call {:si_unique_call 9} {:cexpr "xpc_disengage_timedout"} boogie_si_record_i32(0);
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    $i4, $i5, $i6 := $i3, 0, 0;
    goto $bb1;

  $bb1:
    call $i4, $i5, $i6, $i7, $i8, $i9, $p15, $i16, $p17, $i18, $i19, $p20, $i21, $i22, $i23, $i26, $p27, $i28, $i29, $p30, $i31, $i32, $i24, $i25, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i12, $i13, $i14, $i40, $i41, $i10, $i11, $p42, $i43, $i44, $i45, $i46, $i47, $p48, $i49, $i50, $i51, $i53, $i54, $i57, $i58, $p59, $i65, $i55, $i56, $i66, $i67, vslice_dummy_var_10, vslice_dummy_var_11, vslice_dummy_var_13 := xpc_do_exit_loop_$bb1($i0, $i4, $i5, $i6, $i7, $i8, $i9, $p15, $i16, $p17, $i18, $i19, $p20, $i21, $i22, $i23, $i26, $p27, $i28, $i29, $p30, $i31, $i32, $i24, $i25, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i12, $i13, $i14, $i40, $i41, $i10, $i11, $p42, $i43, $i44, $i45, $i46, $i47, $p48, $i49, $i50, $i51, $i53, $i54, $i57, $i58, $p59, $i65, $i55, $i56, $i66, $i67, vslice_dummy_var_10, vslice_dummy_var_11, vslice_dummy_var_13);
    goto $bb1_last;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    $i7 := $load.i16($M.1, xp_max_npartitions);
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    $i8 := $sext.i16.i32($i7);
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    $i9 := $slt.i32(0, $i8);
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    $i10, $i11 := 0, $i6;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(280, 1)));
    call {:si_unique_call 16} $i43 := devirtbounce($p42);
    call {:si_unique_call 17} {:cexpr "tmp___0"} boogie_si_record_i32($i43);
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 0);
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    $i66, $i67 := $i4, $i5;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 23} vslice_dummy_var_13 := msleep_interruptible(300);
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    $i4, $i5, $i6 := $i66, $i67, $i11;
    goto corral_source_split_115_dummy;

  $bb20:
    assume $i44 == 1;
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    $i45 := $load.i64($M.1, jiffies);
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    $i46 := $sub.i64($i4, $i45);
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    $i47 := $slt.i64($i46, 0);
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i47 == 1);
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    $i57 := $sgt.i32($i10, 0);
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    $i65 := $i5;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i55, $i56 := $i4, $i65;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    $i66, $i67 := $i55, $i56;
    goto $bb35;

  $bb25:
    assume $i57 == 1;
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    $i58 := $ne.i32($i5, 0);
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i58 == 1);
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    $i61 := $M.2;
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    $i62 := $eq.i32($i61, 0);
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 22} xpc_teardown_rsvd_page();
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    $i69 := $eq.i32($i0, 19);
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 26} xpc_clear_interface();
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    $p72 := $M.6;
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    $i73 := $p2i.ref.i64($p72);
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    $i74 := $ne.i64($i73, 0);
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 28} xpc_teardown_partitions();
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 29} $i76 := is_uv_system();
    call {:si_unique_call 30} {:cexpr "tmp___1"} boogie_si_record_i32($i76);
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    $i77 := $ne.i32($i76, 0);
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    assume {:branchcond $i77} true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    return;

  $bb42:
    assume $i77 == 1;
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 31} xpc_exit_uv();
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    goto $bb44;

  SeqInstr_10:
    assume !assertsPassed;
    return;

  $bb39:
    assume $i74 == 1;
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    $p75 := $M.6;
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 27} unregister_sysctl_table($p75);
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb36:
    assume $i69 == 1;
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} vslice_dummy_var_14 := unregister_die_notifier(xpc_die_notifier);
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 25} vslice_dummy_var_15 := unregister_reboot_notifier(xpc_reboot_notifier);
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb30:
    assume $i62 == 1;
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    $p63 := $M.5;
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 21} vslice_dummy_var_12 := _dev_info.ref.ref($p63, .str.88);
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb27:
    assume $i58 == 1;
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    $p59 := $M.5;
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 20} vslice_dummy_var_11 := _dev_info.ref.ref($p59, .str.87);
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i65 := 0;
    goto $bb34;

  $bb22:
    assume $i47 == 1;
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    $p48 := $M.5;
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    $i49 := $load.i64($M.1, jiffies);
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    $i50 := $sub.i64($i11, $i49);
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    $i51 := $udiv.i64($i50, 250);
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    call {:si_unique_call 18} vslice_dummy_var_10 := _dev_info.ref.ref.i64($p48, .str.86, $i51);
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    $i53 := $load.i64($M.1, jiffies);
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    $i54 := $add.i64($i53, 2500);
    call {:si_unique_call 19} {:cexpr "printmsg_time"} boogie_si_record_i64($i54);
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    $i55, $i56 := $i54, 1;
    goto $bb24;

  $bb2:
    assume $i9 == 1;
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    $i12, $i13, $i14 := $i6, 0, 0;
    goto $bb5;

  $bb5:
    call $p15, $i16, $p17, $i18, $i19, $p20, $i21, $i22, $i23, $i26, $p27, $i28, $i29, $p30, $i31, $i32, $i24, $i25, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i12, $i13, $i14, $i40, $i41 := xpc_do_exit_loop_$bb5($i0, $p15, $i16, $p17, $i18, $i19, $p20, $i21, $i22, $i23, $i26, $p27, $i28, $i29, $p30, $i31, $i32, $i24, $i25, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i12, $i13, $i14, $i40, $i41);
    goto $bb5_last;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p15 := $M.3;
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    $i16 := $sext.i16.i64($i13);
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p15, $mul.ref($i16, 872));
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 10} $i18 := xpc_partition_disengaged($p17);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    call {:si_unique_call 11} {:cexpr "tmp"} boogie_si_record_i32($i18);
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i14, 1);
    call {:si_unique_call 13} {:cexpr "active_part_count"} boogie_si_record_i32($i26);
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} xpc_deactivate_partition(1055, $p17, $i0);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p15, $mul.ref($i16, 872)), $mul.ref(128, 1));
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    $i28 := $load.i64($M.1, $p27);
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    $i29 := $ugt.i64($i28, $i12);
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    $i32 := $i12;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    $i24, $i25 := $i26, $i32;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    $i33 := $sext.i16.i32($i13);
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    $i34 := $add.i32($i33, 1);
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i32.i16($i34);
    call {:si_unique_call 12} {:cexpr "partid"} boogie_si_record_i16($i35);
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    $i36 := $sext.i16.i32($i35);
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    $i37 := $load.i16($M.1, xp_max_npartitions);
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    $i38 := $sext.i16.i32($i37);
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    $i39 := $slt.i32($i36, $i38);
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    $i40, $i41 := $i24, $i25;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    $i10, $i11 := $i40, $i41;
    goto $bb4;

  $bb17:
    assume $i39 == 1;
    assume {:verifier.code 0} true;
    $i12, $i13, $i14 := $i25, $i35, $i24;
    goto $bb17_dummy;

  $bb14:
    assume $i29 == 1;
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p15, $mul.ref($i16, 872)), $mul.ref(128, 1));
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    $i31 := $load.i64($M.1, $p30);
    call {:si_unique_call 15} {:cexpr "disengage_timeout"} boogie_si_record_i64($i31);
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    $i32 := $i31;
    goto $bb16;

  SeqInstr_7:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i19 == 1;
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p15, $mul.ref($i16, 872)), $mul.ref(112, 1));
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.1, $p20);
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i21);
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 0);
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb9;

  $bb10:
    assume $i23 == 1;
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    $i24, $i25 := $i14, $i12;
    goto $bb12;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb17_dummy:
    assume false;
    return;

  $bb5_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_35;

  corral_source_split_115_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_26;
}



const __wake_up: ref;

axiom __wake_up == $sub.ref(0, 243895);

procedure __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref);
  free requires assertsPassed;



implementation __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 32} {:cexpr "__wake_up:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 33} {:cexpr "__wake_up:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    return;
}



const wait_for_completion: ref;

axiom wait_for_completion == $sub.ref(0, 244927);

procedure wait_for_completion($p0: ref);
  free requires assertsPassed;



implementation wait_for_completion($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    return;
}



const msleep_interruptible: ref;

axiom msleep_interruptible == $sub.ref(0, 245959);

procedure msleep_interruptible($i0: i32) returns ($r: i64);
  free requires assertsPassed;



implementation msleep_interruptible($i0: i32) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 34} {:cexpr "msleep_interruptible:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 1} true;
    call {:si_unique_call 35} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 36} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const xpc_partition_disengaged: ref;

axiom xpc_partition_disengaged == $sub.ref(0, 246991);

procedure xpc_partition_disengaged($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.1, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.23, $CurrAddr, $M.28, $M.0, assertsPassed;



implementation xpc_partition_disengaged($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i5: i64;
  var $i6: i16;
  var $p7: ref;
  var $i8: i32;
  var $i9: i16;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $i16: i1;
  var $i17: i64;
  var $p18: ref;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $p23: ref;
  var $i24: i32;
  var $p26: ref;
  var $i27: i32;
  var $i28: i16;
  var $i29: i32;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i64;
  var $i35: i64;
  var $i36: i1;
  var $p37: ref;
  var $p39: ref;
  var $i40: i8;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $i44: i32;
  var $i22: i32;
  var vslice_dummy_var_16: i32;
  var vslice_dummy_var_17: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    $p2 := $M.3;
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    $i4 := $sub.i64($i1, $i3);
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    $i5 := $sdiv.i64($i4, 896);
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i64.i16($i5);
    call {:si_unique_call 37} {:cexpr "partid"} boogie_si_record_i16($i6);
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(272, 1)));
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    $i8 := $sext.i16.i32($i6);
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i16($i8);
    call {:si_unique_call 38} $i10 := devirtbounce.1($p7, $i9);
    call {:si_unique_call 39} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    call {:si_unique_call 40} {:cexpr "disengaged"} boogie_si_record_i32($i12);
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(128, 1));
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    $i14 := $load.i64($M.1, $p13);
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i44 := $i12;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    $i22 := $i44;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    $r := $i22;
    return;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i12, 0);
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i29 := $i12;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(128, 1));
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p30, 0);
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} $p31 := current_thread_info();
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 104)), $mul.ref(28, 1));
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.1, $p32);
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    $i34 := $sext.i32.i64($i33);
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    $i35 := $and.i64($i34, 134217472);
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    $i36 := $eq.i64($i35, 0);
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(112, 1));
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.1, $p39);
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i32($i40);
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(136, 1)));
    call {:si_unique_call 47} devirtbounce.3($p43, $p0);
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    $i44 := $i29;
    goto $bb16;

  SeqInstr_19:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i42 == 1;
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} xpc_wakeup_channel_mgr($p0);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_16:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i36 == 1;
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(136, 1));
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 45} vslice_dummy_var_17 := del_timer_sync($p37);
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb3:
    assume $i16 == 1;
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    $i17 := $load.i64($M.1, jiffies);
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(128, 1));
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    $i19 := $load.i64($M.1, $p18);
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    $i20 := $sub.i64($i17, $i19);
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    $i21 := $slt.i64($i20, 0);
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p23 := $M.5;
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    $i24 := $sext.i16.i32($i6);
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 41} vslice_dummy_var_16 := _dev_info.ref.ref.i32($p23, .str.40, $i24);
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    $M.2 := 1;
    call {:si_unique_call 42} {:cexpr "xpc_disengage_timedout"} boogie_si_record_i32(1);
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(264, 1)));
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    $i27 := $sext.i16.i32($i6);
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i32.i16($i27);
    call {:si_unique_call 43} devirtbounce.2($p26, $i28);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    $i29 := 1;
    goto $bb9;

  SeqInstr_13:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i21 == 1;
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    $i22 := 0;
    goto $bb7;
}



const xpc_deactivate_partition: ref;

axiom xpc_deactivate_partition == $sub.ref(0, 248023);

procedure xpc_deactivate_partition($i0: i32, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.1, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $CurrAddr, $M.23, $M.28, $M.0, $M.2, assertsPassed;



implementation xpc_deactivate_partition($i0: i32, $p1: ref, $i2: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i32;
  var $i35: i64;
  var $i36: i64;
  var $i37: i64;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i24;
  var $i51: i24;
  var $i52: i24;
  var $p53: ref;
  var $p54: ref;
  var $i55: i8;
  var $i56: i64;
  var $i57: i64;
  var $i58: i64;
  var $i59: i1;
  var $p60: ref;
  var $i61: i64;
  var $p62: ref;
  var $i63: i64;
  var $i64: i64;
  var $i65: i64;
  var $i66: i16;
  var $i67: i32;
  var vslice_dummy_var_18: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 49} {:cexpr "xpc_deactivate_partition:arg:line"} boogie_si_record_i32($i0);
    call {:si_unique_call 50} {:cexpr "xpc_deactivate_partition:arg:reason"} boogie_si_record_i32($i2);
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 872)), $mul.ref(40, 1));
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 51} $p5 := spinlock_check($p4);
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} $i6 := _raw_spin_lock_irqsave($p5);
    call {:si_unique_call 53} {:cexpr "irq_flags"} boogie_si_record_i64($i6);
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 872)), $mul.ref(112, 1));
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.1, $p7);
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 872)), $mul.ref(112, 1));
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.1, $p16);
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 4);
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 872)), $mul.ref(112, 1));
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p28, 4);
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 872)), $mul.ref(116, 1));
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p29, $i2);
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 872)), $mul.ref(120, 1));
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p30, $i0);
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 872)), $mul.ref(40, 1));
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} spin_unlock_irqrestore($p31, $i6);
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(128, 1)));
    call {:si_unique_call 58} devirtbounce.3($p32, $p1);
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    $i33 := $M.7;
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    $i34 := $mul.i32($i33, 250);
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    $i35 := $sext.i32.i64($i34);
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    $i36 := $load.i64($M.1, jiffies);
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    $i37 := $add.i64($i35, $i36);
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p1, $mul.ref(0, 872)), $mul.ref(128, 1));
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p38, $i37);
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 872)), $mul.ref(128, 1));
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    $i40 := $load.i64($M.1, $p39);
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 872)), $mul.ref(136, 1)), $mul.ref(16, 1));
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p42, $i40);
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p1, $mul.ref(0, 872)), $mul.ref(136, 1));
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 59} add_timer($p43);
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p44, .str);
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p45, .str.43);
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p46, .str.38);
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p47, .str.44);
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p48);
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    $i50 := $load.i24($M.12, $p49);
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    $i51 := $and.i24($i50, $sub.i24(0, 262144));
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    $i52 := $or.i24($i51, 431);
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p49, $i52);
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p53, 0);
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    $i55 := $load.i8($M.13, $p54);
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    $i56 := $zext.i8.i64($i55);
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    $i57 := $and.i64($i56, 1);
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 60} $i58 := ldv__builtin_expect($i57, 0);
    call {:si_unique_call 61} {:cexpr "tmp___0"} boogie_si_record_i64($i58);
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    $i59 := $ne.i64($i58, 0);
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 63} xpc_partition_going_down($p1, $i2);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_28:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i59 == 1;
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    $p60 := $M.5;
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    $i61 := $p2i.ref.i64($p1);
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    $p62 := $M.3;
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    $i63 := $p2i.ref.i64($p62);
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    $i64 := $sub.i64($i61, $i63);
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    $i65 := $sdiv.i64($i64, 896);
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    $i66 := $trunc.i64.i16($i65);
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    $i67 := $sext.i16.i32($i66);
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} vslice_dummy_var_18 := __dynamic_dev_dbg.ref.ref.ref.i32.i32($p3, $p60, .str.44, $i67, $i2);
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    goto $bb22;

  SeqInstr_25:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i19 == 1;
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 872)), $mul.ref(116, 1));
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.1, $p20);
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 19);
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i2, 21);
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 872)), $mul.ref(40, 1));
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 56} spin_unlock_irqrestore($p27, $i6);
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 872)), $mul.ref(116, 1));
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p25, $i2);
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 872)), $mul.ref(120, 1));
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p26, $i0);
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb10:
    assume $i22 == 1;
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i2, 19);
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb12;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb14;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 872)), $mul.ref(116, 1));
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p11, $i2);
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 872)), $mul.ref(120, 1));
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p12, $i0);
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 872)), $mul.ref(40, 1));
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 54} spin_unlock_irqrestore($p13, $i6);
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i2, 21);
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i14 == 1;
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(120, 1)));
    call {:si_unique_call 55} devirtbounce.3($p15, $p1);
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_22:
    assume !assertsPassed;
    return;
}



const _dev_info: ref;

axiom _dev_info == $sub.ref(0, 249055);

procedure _dev_info.ref.ref.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 1} true;
    call {:si_unique_call 64} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 65} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure _dev_info.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 1} true;
    call {:si_unique_call 66} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 67} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure _dev_info.ref.ref.i64($p0: ref, $p1: ref, p.2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref.i64($p0: ref, $p1: ref, p.2: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 1} true;
    call {:si_unique_call 68} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 69} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure _dev_info.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 1} true;
    call {:si_unique_call 70} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 71} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure _dev_info.ref.ref($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb4:
    assume {:verifier.code 1} true;
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 1} true;
    call {:si_unique_call 72} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 73} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const xpc_teardown_rsvd_page: ref;

axiom xpc_teardown_rsvd_page == $sub.ref(0, 250087);

procedure xpc_teardown_rsvd_page();
  free requires assertsPassed;
  modifies $M.1;



implementation xpc_teardown_rsvd_page()
{
  var $p0: ref;
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    $p0 := $M.14;
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(24, 1));
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p1, 0);
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    return;
}



const unregister_die_notifier: ref;

axiom unregister_die_notifier == $sub.ref(0, 251119);

procedure unregister_die_notifier($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation unregister_die_notifier($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 1} true;
    call {:si_unique_call 74} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 75} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const unregister_reboot_notifier: ref;

axiom unregister_reboot_notifier == $sub.ref(0, 252151);

procedure unregister_reboot_notifier($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation unregister_reboot_notifier($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 1} true;
    call {:si_unique_call 76} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 77} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const xpc_clear_interface: ref;

axiom xpc_clear_interface == $sub.ref(0, 253183);

procedure xpc_clear_interface();
  free requires assertsPassed;



implementation xpc_clear_interface()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    return;
}



const unregister_sysctl_table: ref;

axiom unregister_sysctl_table == $sub.ref(0, 254215);

procedure unregister_sysctl_table($p0: ref);
  free requires assertsPassed;



implementation unregister_sysctl_table($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    return;
}



const xpc_teardown_partitions: ref;

axiom xpc_teardown_partitions == $sub.ref(0, 255247);

procedure xpc_teardown_partitions();
  free requires assertsPassed;
  modifies $M.1, $M.23, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.28, assertsPassed, $CurrAddr, $M.0, $M.2;



implementation xpc_teardown_partitions()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    $p0 := $load.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(8, 1)));
    call {:si_unique_call 78} devirtbounce.4($p0);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    $p1 := $M.3;
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 79} kfree($p2);
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_31:
    assume !assertsPassed;
    return;
}



const is_uv_system: ref;

axiom is_uv_system == $sub.ref(0, 256279);

procedure is_uv_system() returns ($r: i32);
  free requires assertsPassed;



implementation is_uv_system() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 1} true;
    call {:si_unique_call 80} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 81} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const xpc_exit_uv: ref;

axiom xpc_exit_uv == $sub.ref(0, 257311);

procedure xpc_exit_uv();
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation xpc_exit_uv()
{
  var $p0: ref;
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    $p0 := $M.15;
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 82} xpc_destroy_gru_mq_uv($p0);
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    $p1 := $M.16;
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 83} xpc_destroy_gru_mq_uv($p1);
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    return;
}



const xpc_destroy_gru_mq_uv: ref;

axiom xpc_destroy_gru_mq_uv == $sub.ref(0, 258343);

procedure xpc_destroy_gru_mq_uv($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation xpc_destroy_gru_mq_uv($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i64;
  var $i4: i64;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $i11: i64;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $p26: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.1, $p1);
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    $i3 := $zext.i32.i64($i2);
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    $i4 := $shl.i64(1, $i3);
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i4);
    call {:si_unique_call 84} {:cexpr "mq_size"} boogie_si_record_i32($i5);
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, xp_pa);
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.1, $p7);
    call {:si_unique_call 85} $i9 := devirtbounce.5($p6, $p8);
    call {:si_unique_call 86} {:cexpr "tmp"} boogie_si_record_i64($i9);
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.1, xp_restrict_memprotect);
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    $i11 := $zext.i32.i64($i5);
    call {:si_unique_call 87} $i12 := devirtbounce.6($p10, $i9, $i11);
    call {:si_unique_call 88} {:cexpr "tmp___0"} boogie_si_record_i32($i12);
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i13);
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 89} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 90} {:cexpr "tmp___1"} boogie_si_record_i64($i16);
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(12, 1));
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.1, $p18);
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 92} free_irq($i19, $0.ref);
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 93} xpc_release_gru_mq_irq_uv($p0);
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 94} xpc_gru_mq_watchlist_free_uv($p0);
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.1, $p20);
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32($i21, 12);
    call {:si_unique_call 95} {:cexpr "pg_order"} boogie_si_record_i32($i22);
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.1, $p23);
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 96} free_pages($i25, $i22);
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p0);
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 97} kfree($p26);
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i17 == 1;
    call {:si_unique_call 91} devirtbounce.7(0, .str.114, 372, 12);
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call xpc_destroy_gru_mq_uv_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 259375);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 98} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 99} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const free_irq: ref;

axiom free_irq == $sub.ref(0, 260407);

procedure free_irq($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation free_irq($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 100} {:cexpr "free_irq:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    return;
}



const xpc_release_gru_mq_irq_uv: ref;

axiom xpc_release_gru_mq_irq_uv == $sub.ref(0, 261439);

procedure xpc_release_gru_mq_irq_uv($p0: ref);
  free requires assertsPassed;



implementation xpc_release_gru_mq_irq_uv($p0: ref)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(12, 1));
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.1, $p1);
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 101} uv_teardown_irq($i2);
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    return;
}



const xpc_gru_mq_watchlist_free_uv: ref;

axiom xpc_gru_mq_watchlist_free_uv == $sub.ref(0, 262471);

procedure xpc_gru_mq_watchlist_free_uv($p0: ref);
  free requires assertsPassed;



implementation xpc_gru_mq_watchlist_free_uv($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.1, $p1);
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 102} $i3 := uv_blade_to_pnode($i2);
    call {:si_unique_call 103} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(40, 1));
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.1, $p4);
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 104} $i6 := uv_bios_mq_watchlist_free($i3, $i5);
    call {:si_unique_call 105} {:cexpr "ret"} boogie_si_record_i32($i6);
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 106} $i10 := ldv__builtin_expect($i9, 0);
    call {:si_unique_call 107} {:cexpr "tmp___0"} boogie_si_record_i64($i10);
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i11 == 1;
    call {:si_unique_call 108} devirtbounce.7(0, .str.114, 251, 12);
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call xpc_gru_mq_watchlist_free_uv_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const free_pages: ref;

axiom free_pages == $sub.ref(0, 263503);

procedure free_pages($i0: i64, $i1: i32);
  free requires assertsPassed;



implementation free_pages($i0: i64, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 109} {:cexpr "free_pages:arg:arg0"} boogie_si_record_i64($i0);
    call {:si_unique_call 110} {:cexpr "free_pages:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    return;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 264535);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 111} free_($p0);
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 265567);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 112} $free($p0);
    return;
}



const uv_blade_to_pnode: ref;

axiom uv_blade_to_pnode == $sub.ref(0, 266599);

procedure uv_blade_to_pnode($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation uv_blade_to_pnode($i0: i32) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i64;
  var $p4: ref;
  var $i5: i16;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 113} {:cexpr "uv_blade_to_pnode:arg:bid"} boogie_si_record_i32($i0);
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    $p1 := $load.ref($M.1, uv_blade_info);
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    $i2 := $sext.i32.i64($i0);
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref($i2, 88)), $mul.ref(4, 1));
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.1, $p4);
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i5);
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const uv_bios_mq_watchlist_free: ref;

axiom uv_bios_mq_watchlist_free == $sub.ref(0, 267631);

procedure uv_bios_mq_watchlist_free($i0: i32, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation uv_bios_mq_watchlist_free($i0: i32, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 114} {:cexpr "uv_bios_mq_watchlist_free:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 115} {:cexpr "uv_bios_mq_watchlist_free:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 1} true;
    call {:si_unique_call 116} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 117} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const uv_teardown_irq: ref;

axiom uv_teardown_irq == $sub.ref(0, 268663);

procedure uv_teardown_irq($i0: i32);
  free requires assertsPassed;



implementation uv_teardown_irq($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 118} {:cexpr "uv_teardown_irq:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    return;
}



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 269695);

procedure spinlock_check($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spinlock_check($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const _raw_spin_lock_irqsave: ref;

axiom _raw_spin_lock_irqsave == $sub.ref(0, 270727);

procedure _raw_spin_lock_irqsave($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation _raw_spin_lock_irqsave($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 1} true;
    call {:si_unique_call 119} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 120} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const spin_unlock_irqrestore: ref;

axiom spin_unlock_irqrestore == $sub.ref(0, 271759);

procedure spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation spin_unlock_irqrestore($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 121} {:cexpr "spin_unlock_irqrestore:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 122} _raw_spin_unlock_irqrestore($p3, $i1);
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    return;
}



const add_timer: ref;

axiom add_timer == $sub.ref(0, 272791);

procedure add_timer($p0: ref);
  free requires assertsPassed;



implementation add_timer($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    return;
}



const __dynamic_dev_dbg: ref;

axiom __dynamic_dev_dbg == $sub.ref(0, 273823);

procedure __dynamic_dev_dbg.ref.ref.ref($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 1} true;
    call {:si_unique_call 123} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 124} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 1} true;
    call {:si_unique_call 125} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 126} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.i64($p0: ref, $p1: ref, $p2: ref, p.3: i64) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.i64($p0: ref, $p1: ref, $p2: ref, p.3: i64) returns ($r: i32)
{
  var $i3: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 1} true;
    call {:si_unique_call 127} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 128} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 1} true;
    call {:si_unique_call 129} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 130} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.i32.i64.i64.i64($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i64, p.5: i64, p.6: i64) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.i32.i64.i64.i64($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i64, p.5: i64, p.6: i64) returns ($r: i32)
{
  var $i3: i32;

  $bb4:
    assume {:verifier.code 1} true;
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 1} true;
    call {:si_unique_call 131} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 132} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb5:
    assume {:verifier.code 1} true;
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 1} true;
    call {:si_unique_call 133} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 134} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.i32.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.i32.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb6:
    assume {:verifier.code 1} true;
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 1} true;
    call {:si_unique_call 135} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 136} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.i64.i32.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i64, p.4: i32, p.5: i32, p.6: i32, p.7: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.i64.i32.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i64, p.4: i32, p.5: i32, p.6: i32, p.7: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb7:
    assume {:verifier.code 1} true;
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 1} true;
    call {:si_unique_call 137} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 138} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32, p.5: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32, p.5: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 1} true;
    call {:si_unique_call 139} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 140} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i32, p.6: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i32, p.6: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb9:
    assume {:verifier.code 1} true;
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 1} true;
    call {:si_unique_call 141} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 142} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const xpc_partition_going_down: ref;

axiom xpc_partition_going_down == $sub.ref(0, 274855);

procedure xpc_partition_going_down($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.1, $CurrAddr, $M.23, $M.0, $M.2, $M.28, assertsPassed;



implementation xpc_partition_going_down($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i24;
  var $i11: i24;
  var $i12: i24;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $i21: i64;
  var $p22: ref;
  var $i23: i64;
  var $i24: i64;
  var $i25: i64;
  var $i26: i16;
  var $i27: i32;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $i32: i8;
  var $i33: i32;
  var $i34: i1;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $p43: ref;
  var $i44: i64;
  var $i45: i32;
  var $i46: i8;
  var $i47: i32;
  var $i48: i1;
  var $i35: i32;
  var vslice_dummy_var_19: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 143} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 144} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 145} {:cexpr "xpc_partition_going_down:arg:reason"} boogie_si_record_i32($i1);
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p4, .str);
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p5, .str.20);
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p6, .str.21);
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p7, .str.22);
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    $i10 := $load.i24($M.12, $p9);
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    $i11 := $and.i24($i10, $sub.i24(0, 262144));
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    $i12 := $or.i24($i11, 678);
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p9, $i12);
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p13, 0);
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.13, $p14);
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i64($i15);
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    $i17 := $and.i64($i16, 1);
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 146} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 147} {:cexpr "tmp"} boogie_si_record_i64($i18);
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 149} $i29 := xpc_part_ref($p0);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    call {:si_unique_call 150} {:cexpr "tmp___0"} boogie_si_record_i32($i29);
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 0);
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(364, 1));
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.1, $p31);
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i32($i32);
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    $i34 := $sgt.i32($i33, 0);
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} xpc_wakeup_channel_mgr($p0);
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} xpc_part_deref($p0);
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_49:
    assume !assertsPassed;
    return;

  SeqInstr_46:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i34 == 1;
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    $i35 := 0;
    goto $bb11;

  $bb11:
    call $p36, $p37, $i38, $p39, $p40, $p41, $i42, $p43, $i44, $i45, $i46, $i47, $i48, $i35 := xpc_partition_going_down_loop_$bb11($p0, $i1, $p2, $p31, $p36, $p37, $i38, $p39, $p40, $p41, $i42, $p43, $i44, $i45, $i46, $i47, $i48, $i35);
    goto $bb11_last;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(376, 1));
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.1, $p36);
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    $i38 := $sext.i32.i64($i35);
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($p37, $mul.ref($i38, 720));
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 151} xpc_msgqueue_ref($p39);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p37, $mul.ref($i38, 720)), $mul.ref(8, 1));
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 152} $p41 := spinlock_check($p40);
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 153} $i42 := _raw_spin_lock_irqsave($p41);
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p2, $i42);
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} xpc_disconnect_channel(693, $p39, $i1, $p2);
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p37, $mul.ref($i38, 720)), $mul.ref(8, 1));
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    $i44 := $load.i64($M.1, $p2);
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} spin_unlock_irqrestore($p43, $i44);
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} xpc_msgqueue_deref($p39);
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    $i45 := $add.i32($i35, 1);
    call {:si_unique_call 157} {:cexpr "ch_number"} boogie_si_record_i32($i45);
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.1, $p31);
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i46);
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    $i48 := $sgt.i32($i47, $i45);
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i48 == 1);
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb13:
    assume $i48 == 1;
    assume {:verifier.code 0} true;
    $i35 := $i45;
    goto $bb13_dummy;

  SeqInstr_43:
    assume !assertsPassed;
    return;

  SeqInstr_40:
    assume !assertsPassed;
    return;

  SeqInstr_37:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i30 == 1;
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_34:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    $p20 := $M.17;
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p0);
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    $p22 := $M.3;
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    $i24 := $sub.i64($i21, $i23);
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    $i25 := $sdiv.i64($i24, 896);
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i64.i16($i25);
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    $i27 := $sext.i16.i32($i26);
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 148} vslice_dummy_var_19 := __dynamic_dev_dbg.ref.ref.ref.i32.i32($p3, $p20, .str.22, $i27, $i1);
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb13_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_522;
}



const xpc_part_ref: ref;

axiom xpc_part_ref == $sub.ref(0, 275887);

procedure xpc_part_ref($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $CurrAddr, $M.23, $M.28, $M.0, $M.2, assertsPassed;



implementation xpc_part_ref($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(360, 1));
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} atomic_inc($p1);
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(264, 1));
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.1, $p2);
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 1);
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    call {:si_unique_call 161} {:cexpr "setup"} boogie_si_record_i32($i6);
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 162} xpc_part_deref($p0);
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_55:
    assume !assertsPassed;
    return;

  SeqInstr_52:
    assume !assertsPassed;
    return;
}



const xpc_msgqueue_ref: ref;

axiom xpc_msgqueue_ref == $sub.ref(0, 276919);

procedure xpc_msgqueue_ref($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $CurrAddr, $M.23, $M.28, assertsPassed, $M.0, $M.2;



implementation xpc_msgqueue_ref($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(100, 1));
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 163} atomic_inc($p1);
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_58:
    assume !assertsPassed;
    return;
}



const xpc_disconnect_channel: ref;

axiom xpc_disconnect_channel == $sub.ref(0, 277951);

procedure xpc_disconnect_channel($i0: i32, $p1: ref, $i2: i32, $p3: ref);
  free requires assertsPassed;
  modifies $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.1, $CurrAddr, $M.23, $M.0, $M.2, $M.28, assertsPassed;



implementation xpc_disconnect_channel($i0: i32, $p1: ref, $i2: i32, $p3: ref)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i24;
  var $i19: i24;
  var $i20: i24;
  var $p21: ref;
  var $p22: ref;
  var $i23: i8;
  var $i24: i64;
  var $i25: i64;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $i30: i16;
  var $i31: i32;
  var $p32: ref;
  var $i33: i16;
  var $i34: i32;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i32;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $i44: i32;
  var $p45: ref;
  var $p46: ref;
  var $i47: i1;
  var $p48: ref;
  var $i49: i32;
  var $i50: i32;
  var $p51: ref;
  var $p52: ref;
  var $i53: i64;
  var $p54: ref;
  var $i55: i32;
  var $i56: i1;
  var $p57: ref;
  var $p58: ref;
  var $i59: i32;
  var $i60: i32;
  var $i61: i1;
  var $p62: ref;
  var $i63: i32;
  var $i64: i32;
  var $i65: i1;
  var $p66: ref;
  var $i67: i32;
  var $i68: i1;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $i72: i64;
  var vslice_dummy_var_20: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 164} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 165} {:cexpr "xpc_disconnect_channel:arg:line"} boogie_si_record_i32($i0);
    call {:si_unique_call 166} {:cexpr "xpc_disconnect_channel:arg:reason"} boogie_si_record_i32($i2);
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 720)), $mul.ref(80, 1));
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.1, $p5);
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 1024);
    call {:si_unique_call 167} {:cexpr "channel_was_connected"} boogie_si_record_i32($i7);
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 720)), $mul.ref(80, 1));
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.1, $p8);
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 196608);
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p12, .str);
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p13, .str.26);
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p14, .str.21);
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p15, .str.27);
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    $i18 := $load.i24($M.12, $p17);
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    $i19 := $and.i24($i18, $sub.i24(0, 262144));
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    $i20 := $or.i24($i19, 823);
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p17, $i20);
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p21, 0);
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.13, $p22);
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i64($i23);
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    $i25 := $and.i64($i24, 1);
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} $i26 := ldv__builtin_expect($i25, 0);
    call {:si_unique_call 169} {:cexpr "tmp"} boogie_si_record_i64($i26);
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 720)), $mul.ref(84, 1));
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p36, $i2);
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 720)), $mul.ref(88, 1));
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p37, $i0);
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p1, $mul.ref(0, 720)), $mul.ref(80, 1));
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.1, $p38);
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    $i40 := $or.i32($i39, 163840);
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p1, $mul.ref(0, 720)), $mul.ref(80, 1));
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p41, $i40);
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p1, $mul.ref(0, 720)), $mul.ref(80, 1));
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.1, $p42);
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    $i44 := $and.i32($i43, $sub.i32(0, 3193));
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p1, $mul.ref(0, 720)), $mul.ref(80, 1));
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p45, $i44);
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(176, 1)));
    call {:si_unique_call 171} devirtbounce.8($p46, $p1, $p3);
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i7, 0);
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p1, $mul.ref(0, 720)), $mul.ref(8, 1));
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    $i53 := $load.i64($M.1, $p3);
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 172} spin_unlock_irqrestore($p52, $i53);
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p1, $mul.ref(0, 720)), $mul.ref(328, 1));
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} $i55 := atomic_read($p54);
    call {:si_unique_call 174} {:cexpr "tmp___0"} boogie_si_record_i32($i55);
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    $i56 := $sgt.i32($i55, 0);
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i56 == 1);
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p1, $mul.ref(0, 720)), $mul.ref(80, 1));
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.1, $p58);
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    $i60 := $and.i32($i59, 512);
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    $i61 := $ne.i32($i60, 0);
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i61 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p1, $mul.ref(0, 720)), $mul.ref(104, 1));
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 176} $i67 := atomic_read($p66);
    call {:si_unique_call 177} {:cexpr "tmp___1"} boogie_si_record_i32($i67);
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    $i68 := $sgt.i32($i67, 0);
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p1, $mul.ref(0, 720)), $mul.ref(8, 1));
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 180} $p71 := spinlock_check($p70);
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 181} $i72 := _raw_spin_lock_irqsave($p71);
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p3, $i72);
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb20:
    assume $i68 == 1;
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p1, $mul.ref(0, 720)), $mul.ref(112, 1));
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 179} __wake_up($p69, 3, 1, $0.ref);
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb14:
    assume $i61 == 1;
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p1, $mul.ref(0, 720)), $mul.ref(80, 1));
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.1, $p62);
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    $i64 := $and.i32($i63, 262144);
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    $i65 := $eq.i32($i64, 0);
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i65 == 1);
    goto $bb16;

  $bb17:
    assume $i65 == 1;
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 178} xpc_create_kthreads($p1, 1, 1);
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    goto $bb19;

  SeqInstr_64:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i56 == 1;
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p1, $mul.ref(0, 720)), $mul.ref(344, 1));
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 175} __wake_up($p57, 3, 0, $0.ref);
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i47 == 1;
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p1, $mul.ref(0, 720)), $mul.ref(80, 1));
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.1, $p48);
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    $i50 := $or.i32($i49, 1);
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p1, $mul.ref(0, 720)), $mul.ref(80, 1));
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p51, $i50);
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    goto $bb10;

  SeqInstr_61:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i27 == 1;
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    $p28 := $M.17;
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 720)), $mul.ref(0, 1));
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    $i30 := $load.i16($M.1, $p29);
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    $i31 := $sext.i16.i32($i30);
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref(0, 720)), $mul.ref(92, 1));
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    $i33 := $load.i16($M.1, $p32);
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    $i34 := $zext.i16.i32($i33);
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 170} vslice_dummy_var_20 := __dynamic_dev_dbg.ref.ref.ref.i32.i32.i32.i32($p4, $p28, .str.27, $i2, $i0, $i31, $i34);
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const xpc_msgqueue_deref: ref;

axiom xpc_msgqueue_deref == $sub.ref(0, 278983);

procedure xpc_msgqueue_deref($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.1, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.23, $M.28, $CurrAddr, assertsPassed;



implementation xpc_msgqueue_deref($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $i6: i16;
  var $i7: i64;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(100, 1));
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 182} $i2 := atomic_sub_return(1, $p1);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    call {:si_unique_call 183} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    $p4 := $M.3;
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(0, 1));
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    $i6 := $load.i16($M.1, $p5);
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    $i7 := $sext.i16.i64($i6);
    goto corral_source_split_681;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p4, $mul.ref($i7, 872));
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 184} xpc_wakeup_channel_mgr($p8);
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_70:
    assume !assertsPassed;
    return;

  SeqInstr_67:
    assume !assertsPassed;
    return;
}



const xpc_wakeup_channel_mgr: ref;

axiom xpc_wakeup_channel_mgr == $sub.ref(0, 280015);

procedure xpc_wakeup_channel_mgr($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.1, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.23, $M.28, $CurrAddr, assertsPassed;



implementation xpc_wakeup_channel_mgr($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(480, 1));
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 185} $i2 := atomic_add_return(1, $p1);
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    call {:si_unique_call 186} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 1);
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(488, 1));
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 187} __wake_up($p4, 3, 1, $0.ref);
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_73:
    assume !assertsPassed;
    return;
}



const xpc_part_deref: ref;

axiom xpc_part_deref == $sub.ref(0, 281047);

procedure xpc_part_deref($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.1, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.23, $M.28, $CurrAddr, assertsPassed;



implementation xpc_part_deref($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $i5: i8;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(360, 1));
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} $i2 := atomic_sub_return(1, $p1);
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    call {:si_unique_call 189} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(264, 1));
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.1, $p4);
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 2);
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(272, 1));
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} __wake_up($p8, 3, 1, $0.ref);
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_76:
    assume !assertsPassed;
    return;
}



const atomic_sub_return: ref;

axiom atomic_sub_return == $sub.ref(0, 282079);

procedure atomic_sub_return($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.1, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.23, $M.28, $CurrAddr, assertsPassed;



implementation atomic_sub_return($i0: i32, $p1: ref) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} {:cexpr "atomic_sub_return:arg:i"} boogie_si_record_i32($i0);
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    $i2 := $sub.i32(0, $i0);
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 192} $i3 := atomic_add_return($i2, $p1);
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    call {:si_unique_call 193} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  SeqInstr_79:
    assume !assertsPassed;
    return;
}



const atomic_add_return: ref;

axiom atomic_add_return == $sub.ref(0, 283111);

procedure atomic_add_return($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.1, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.23, $M.28, $CurrAddr, assertsPassed;



implementation atomic_add_return($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 194} {:cexpr "atomic_add_return:arg:i"} boogie_si_record_i32($i0);
    call {:si_unique_call 195} {:cexpr "atomic_add_return:arg:__ret"} boogie_si_record_i32($i0);
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 196} $i3 := devirtbounce.9(0, $p2, $i0, $p2);
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    call {:si_unique_call 197} {:cexpr "__ret"} boogie_si_record_i32($i3);
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, $i0);
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_82:
    assume !assertsPassed;
    return;
}



const atomic_read: ref;

axiom atomic_read == $sub.ref(0, 284143);

procedure atomic_read($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_read($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.1, $p1);
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const xpc_create_kthreads: ref;

axiom xpc_create_kthreads == $sub.ref(0, 285175);

procedure xpc_create_kthreads($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;
  modifies $M.1, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $CurrAddr, $M.0, $M.2, $M.23, $M.28, assertsPassed;



implementation xpc_create_kthreads($p0: ref, $i1: i32, $i2: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i16;
  var $i6: i64;
  var $i7: i64;
  var $p8: ref;
  var $i9: i16;
  var $i10: i64;
  var $i11: i64;
  var $i12: i64;
  var $p13: ref;
  var $p14: ref;
  var $i15: i16;
  var $i16: i64;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $i22: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i64;
  var $i32: i64;
  var $i33: i1;
  var $p34: ref;
  var $i35: i32;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i16;
  var $i49: i32;
  var $p50: ref;
  var $i51: i16;
  var $i52: i32;
  var $p53: ref;
  var $p54: ref;
  var $i55: i64;
  var $i56: i1;
  var $p58: ref;
  var $i59: i64;
  var $i60: i1;
  var $p61: ref;
  var $i62: i32;
  var $i63: i1;
  var $p64: ref;
  var $i65: i32;
  var $i66: i1;
  var $p67: ref;
  var $i68: i32;
  var $p69: ref;
  var $i70: i32;
  var $i71: i1;
  var $p72: ref;
  var $p73: ref;
  var $i74: i64;
  var $p75: ref;
  var $i76: i64;
  var $i77: i32;
  var $i78: i1;
  var $i21: i32;
  var vslice_dummy_var_21: i32;
  var vslice_dummy_var_22: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 198} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 199} {:cexpr "xpc_create_kthreads:arg:needed"} boogie_si_record_i32($i1);
    call {:si_unique_call 200} {:cexpr "xpc_create_kthreads:arg:ignore_disconnecting"} boogie_si_record_i32($i2);
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(0, 1));
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.1, $p4);
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    $i6 := $sext.i16.i64($i5);
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    $i7 := $and.i64($i6, 4294967295);
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(92, 1));
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    $i9 := $load.i16($M.1, $p8);
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i64($i9);
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    $i11 := $shl.i64($i10, 32);
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    $i12 := $or.i64($i7, $i11);
    call {:si_unique_call 201} {:cexpr "args"} boogie_si_record_i64($i12);
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    $p13 := $M.3;
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(0, 1));
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    $i15 := $load.i16($M.1, $p14);
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    $i16 := $sext.i16.i64($i15);
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p13, $mul.ref($i16, 872));
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(256, 1)));
    call {:si_unique_call 202} {:cexpr "xpc_create_kthreads:arg:tmp___10"} boogie_si_record_i32($i1);
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32($i1, 1);
    call {:si_unique_call 203} {:cexpr "needed"} boogie_si_record_i32($i19);
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    $i20 := $sgt.i32($i1, 0);
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    $i21 := $i19;
    goto $bb4;

  $bb4:
    call $i22, $p23, $i24, $i25, $p34, $i35, $i36, $i37, $p38, $i39, $i40, $p41, $i42, $i43, $p44, $p46, $p47, $i48, $i49, $p50, $i51, $i52, $p53, $p54, $i55, $i56, $p58, $i59, $i60, $i77, $i78, $i21, vslice_dummy_var_21, vslice_dummy_var_22 := xpc_create_kthreads_loop_$bb4($p0, $i2, $i12, $p13, $i16, $p17, $i22, $p23, $i24, $i25, $p34, $i35, $i36, $i37, $p38, $i39, $i40, $p41, $i42, $i43, $p44, $p46, $p47, $i48, $i49, $p50, $i51, $i52, $p53, $p54, $i55, $i56, $p58, $i59, $i60, $i77, $i78, $i21, vslice_dummy_var_21, vslice_dummy_var_22);
    goto $bb4_last;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i2, 0);
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 214} vslice_dummy_var_21 := xpc_part_ref($p17);
    goto SeqInstr_94, SeqInstr_95;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  SeqInstr_96:
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 215} xpc_msgqueue_ref($p0);
    goto SeqInstr_97, SeqInstr_98;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  SeqInstr_99:
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    $p46 := $i2p.i64.ref($i12);
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(0, 1));
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    $i48 := $load.i16($M.1, $p47);
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    $i49 := $sext.i16.i32($i48);
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(92, 1));
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    $i51 := $load.i16($M.1, $p50);
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    $i52 := $zext.i16.i32($i51);
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 216} $p53 := kthread_create_on_node.ref.ref.i32.ref.i32.i32(xpc_kthread_start, $p46, $sub.i32(0, 1), .str.9, $i49, $i52);
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p53);
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 217} $i55 := IS_ERR($p54);
    call {:si_unique_call 218} {:cexpr "tmp___4"} boogie_si_record_i64($i55);
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    $i56 := $eq.i64($i55, 0);
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p53);
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 220} $i59 := IS_ERR($p58);
    call {:si_unique_call 221} {:cexpr "tmp___9"} boogie_si_record_i64($i59);
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    $i60 := $ne.i64($i59, 0);
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i77 := $sub.i32($i21, 1);
    call {:si_unique_call 235} {:cexpr "needed"} boogie_si_record_i32($i77);
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    $i78 := $sgt.i32($i21, 0);
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i78 == 1);
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb41:
    assume $i78 == 1;
    assume {:verifier.code 0} true;
    $i21 := $i77;
    goto $bb41_dummy;

  $bb29:
    assume $i60 == 1;
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(320, 1));
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 222} $i62 := atomic_sub_return(1, $p61);
    goto SeqInstr_100, SeqInstr_101;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  SeqInstr_102:
    call {:si_unique_call 223} {:cexpr "tmp___5"} boogie_si_record_i32($i62);
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    $i63 := $eq.i32($i62, 0);
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    assume {:branchcond $i63} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 227} xpc_msgqueue_deref($p0);
    goto SeqInstr_109, SeqInstr_110;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  SeqInstr_111:
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 228} xpc_part_deref($p17);
    goto SeqInstr_112, SeqInstr_113;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  SeqInstr_114:
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(320, 1));
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 229} $i68 := atomic_read($p67);
    call {:si_unique_call 230} {:cexpr "tmp___8"} boogie_si_record_i32($i68);
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(332, 1));
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    $i70 := $load.i32($M.1, $p69);
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    $i71 := $ult.i32($i68, $i70);
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb37:
    assume $i71 == 1;
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(8, 1));
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 231} $p73 := spinlock_check($p72);
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 232} $i74 := _raw_spin_lock_irqsave($p73);
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p3, $i74);
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 233} xpc_disconnect_channel(900, $p0, 14, $p3);
    goto SeqInstr_115, SeqInstr_116;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  SeqInstr_117:
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(8, 1));
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    $i76 := $load.i64($M.1, $p3);
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 234} spin_unlock_irqrestore($p75, $i76);
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    goto $bb39;

  SeqInstr_115:
    assume !assertsPassed;
    return;

  SeqInstr_112:
    assume !assertsPassed;
    return;

  SeqInstr_109:
    assume !assertsPassed;
    return;

  $bb31:
    assume $i63 == 1;
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p13, $mul.ref($i16, 872)), $mul.ref(372, 1));
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 224} $i65 := atomic_sub_return(1, $p64);
    goto SeqInstr_103, SeqInstr_104;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  SeqInstr_105:
    call {:si_unique_call 225} {:cexpr "tmp___6"} boogie_si_record_i32($i65);
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    $i66 := $eq.i32($i65, 0);
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    assume {:branchcond $i66} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb33:
    assume $i66 == 1;
    call {:si_unique_call 226} devirtbounce.3($p18, $p17);
    goto SeqInstr_106, SeqInstr_107;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  SeqInstr_108:
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    goto $bb35;

  SeqInstr_106:
    assume !assertsPassed;
    return;

  SeqInstr_103:
    assume !assertsPassed;
    return;

  SeqInstr_100:
    assume !assertsPassed;
    return;

  $bb26:
    assume $i56 == 1;
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 219} vslice_dummy_var_22 := wake_up_process($p53);
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    goto $bb28;

  SeqInstr_97:
    assume !assertsPassed;
    return;

  SeqInstr_94:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i22 == 1;
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(320, 1));
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 204} $i24 := atomic_add_unless($p23, 1, 0);
    call {:si_unique_call 205} {:cexpr "tmp___2"} boogie_si_record_i32($i24);
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 0);
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i25 == 1);
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(80, 1));
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.1, $p34);
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    $i36 := $and.i32($i35, 131072);
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i37 == 1);
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(320, 1));
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} $i39 := atomic_add_return(1, $p38);
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    call {:si_unique_call 210} {:cexpr "tmp___0"} boogie_si_record_i32($i39);
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i39, 1);
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb17:
    assume $i40 == 1;
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p13, $mul.ref($i16, 872)), $mul.ref(372, 1));
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 211} $i42 := atomic_add_return(1, $p41);
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    call {:si_unique_call 212} {:cexpr "tmp___1"} boogie_si_record_i32($i42);
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i42, 1);
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb19:
    assume $i43 == 1;
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(248, 1)));
    call {:si_unique_call 213} devirtbounce.3($p44, $p17);
    goto SeqInstr_91, SeqInstr_92;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  SeqInstr_93:
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    goto $bb21;

  SeqInstr_91:
    assume !assertsPassed;
    return;

  SeqInstr_88:
    assume !assertsPassed;
    return;

  SeqInstr_85:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i37 == 1;
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb8:
    assume $i25 == 1;
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(80, 1));
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.1, $p26);
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    $i28 := $and.i32($i27, 524288);
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 0);
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    $i30 := $zext.i1.i32($i29);
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    $i31 := $sext.i32.i64($i30);
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} $i32 := ldv__builtin_expect($i31, 0);
    call {:si_unique_call 207} {:cexpr "tmp"} boogie_si_record_i64($i32);
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    $i33 := $ne.i64($i32, 0);
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb10:
    assume $i33 == 1;
    call {:si_unique_call 208} devirtbounce.7(0, .str.6, 855, 12);
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    call xpc_create_kthreads_loop_$bb12();
    goto $bb12_last;

  $bb12_dummy:
    assume false;
    return;

  $bb12_last:
    assume {:verifier.code 0} true;
    goto $bb12_dummy;

  $bb41_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_743;
}



const atomic_add_unless: ref;

axiom atomic_add_unless == $sub.ref(0, 286207);

procedure atomic_add_unless($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_add_unless($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 236} {:cexpr "atomic_add_unless:arg:a"} boogie_si_record_i32($i1);
    call {:si_unique_call 237} {:cexpr "atomic_add_unless:arg:u"} boogie_si_record_i32($i2);
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 238} $i3 := __atomic_add_unless($p0, $i1, $i2);
    call {:si_unique_call 239} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, $i2);
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const xpc_kthread_start: ref;

axiom xpc_kthread_start == $sub.ref(0, 287239);

procedure xpc_kthread_start($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.1, $M.24, $M.40, $M.18, $M.19, $M.20, $M.21, $M.22, $CurrAddr, $M.2, $M.23, $M.31, $M.28, $M.41, $M.42, $M.0, assertsPassed, $M.43, $M.44, $M.45, $M.32;



implementation xpc_kthread_start($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i16;
  var $i5: i64;
  var $i6: i64;
  var $i7: i16;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i24;
  var $i19: i24;
  var $i20: i24;
  var $p21: ref;
  var $p22: ref;
  var $i23: i8;
  var $i24: i64;
  var $i25: i64;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $p43: ref;
  var $i44: i32;
  var $i45: i32;
  var $i46: i1;
  var $p47: ref;
  var $i48: i32;
  var $i49: i32;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i64;
  var $p55: ref;
  var $i56: i32;
  var $i57: i32;
  var $p58: ref;
  var $p59: ref;
  var $i60: i32;
  var $i61: i32;
  var $i62: i1;
  var $p63: ref;
  var $i64: i32;
  var $i65: i32;
  var $i66: i1;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $i70: i64;
  var $p71: ref;
  var $i72: i32;
  var $i73: i32;
  var $i74: i1;
  var $p75: ref;
  var $i76: i32;
  var $i77: i32;
  var $i78: i1;
  var $p79: ref;
  var $i80: i32;
  var $i81: i32;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $i86: i64;
  var $p87: ref;
  var $i88: i32;
  var $i89: i32;
  var $p90: ref;
  var $i91: i64;
  var $p92: ref;
  var $p93: ref;
  var $i94: i32;
  var $i95: i1;
  var $p96: ref;
  var $i97: i32;
  var $i98: i1;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $i106: i24;
  var $i107: i24;
  var $i108: i24;
  var $p109: ref;
  var $p110: ref;
  var $i111: i8;
  var $i112: i64;
  var $i113: i64;
  var $i114: i64;
  var $i115: i1;
  var $p116: ref;
  var $i117: i32;
  var $i118: i32;
  var vslice_dummy_var_23: i32;
  var vslice_dummy_var_24: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 240} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 241} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i16($i3);
    call {:si_unique_call 242} {:cexpr "partid"} boogie_si_record_i16($i4);
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p0);
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    $i6 := $lshr.i64($i5, 32);
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i64.i16($i6);
    call {:si_unique_call 243} {:cexpr "ch_number"} boogie_si_record_i16($i7);
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    $p8 := $M.3;
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    $i9 := $sext.i16.i64($i4);
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p8, $mul.ref($i9, 872));
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(288, 1)));
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p12, .str);
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p13, .str.64);
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p14, .str.6);
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p15, .str.65);
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    $i18 := $load.i24($M.12, $p17);
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    $i19 := $and.i24($i18, $sub.i24(0, 262144));
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    $i20 := $or.i24($i19, 755);
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p17, $i20);
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p21, 0);
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.13, $p22);
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i64($i23);
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    $i25 := $and.i64($i24, 1);
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} $i26 := ldv__builtin_expect($i25, 0);
    call {:si_unique_call 245} {:cexpr "tmp"} boogie_si_record_i64($i26);
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p8, $mul.ref($i9, 872)), $mul.ref(376, 1));
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.1, $p32);
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    $i34 := $zext.i16.i64($i7);
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($p33, $mul.ref($i34, 720));
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p33, $mul.ref($i34, 720)), $mul.ref(80, 1));
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.1, $p36);
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    $i38 := $and.i32($i37, 131072);
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 0);
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p33, $mul.ref($i34, 720)), $mul.ref(8, 1));
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 262} $p69 := spinlock_check($p68);
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 263} $i70 := _raw_spin_lock_irqsave($p69);
    call {:si_unique_call 264} {:cexpr "irq_flags"} boogie_si_record_i64($i70);
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p33, $mul.ref($i34, 720)), $mul.ref(80, 1));
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.1, $p71);
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    $i73 := $and.i32($i72, 512);
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    $i74 := $ne.i32($i73, 0);
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i74 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i91 := $i70;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p33, $mul.ref($i34, 720)), $mul.ref(8, 1));
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 270} spin_unlock_irqrestore($p92, $i91);
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p33, $mul.ref($i34, 720)), $mul.ref(320, 1));
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 271} $i94 := atomic_sub_return(1, $p93);
    goto SeqInstr_127, SeqInstr_128;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  SeqInstr_129:
    call {:si_unique_call 272} {:cexpr "tmp___5"} boogie_si_record_i32($i94);
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    $i95 := $eq.i32($i94, 0);
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    assume {:branchcond $i95} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 276} xpc_msgqueue_deref($p35);
    goto SeqInstr_136, SeqInstr_137;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  SeqInstr_138:
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p100, .str);
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p101, .str.64);
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p102, .str.6);
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p103, .str.66);
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    $p105 := $bitcast.ref.ref($p104);
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    $i106 := $load.i24($M.12, $p105);
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    $i107 := $and.i24($i106, $sub.i24(0, 262144));
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    $i108 := $or.i24($i107, 815);
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p105, $i108);
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p109, 0);
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    $i111 := $load.i8($M.13, $p110);
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    $i112 := $zext.i8.i64($i111);
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    $i113 := $and.i64($i112, 1);
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 277} $i114 := ldv__builtin_expect($i113, 0);
    call {:si_unique_call 278} {:cexpr "tmp___7"} boogie_si_record_i64($i114);
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    $i115 := $ne.i64($i114, 0);
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 280} xpc_part_deref($p10);
    goto SeqInstr_139, SeqInstr_140;

  SeqInstr_140:
    assume assertsPassed;
    goto SeqInstr_141;

  SeqInstr_141:
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_139:
    assume !assertsPassed;
    return;

  $bb28:
    assume $i115 == 1;
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    $p116 := $M.17;
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    $i117 := $sext.i16.i32($i4);
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    $i118 := $zext.i16.i32($i7);
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 279} vslice_dummy_var_24 := __dynamic_dev_dbg.ref.ref.ref.i32.i32($p2, $p116, .str.66, $i117, $i118);
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    goto $bb30;

  SeqInstr_136:
    assume !assertsPassed;
    return;

  $bb22:
    assume $i95 == 1;
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p8, $mul.ref($i9, 872)), $mul.ref(372, 1));
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 273} $i97 := atomic_sub_return(1, $p96);
    goto SeqInstr_130, SeqInstr_131;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  SeqInstr_132:
    call {:si_unique_call 274} {:cexpr "tmp___6"} boogie_si_record_i32($i97);
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    $i98 := $eq.i32($i97, 0);
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb24:
    assume $i98 == 1;
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    $p99 := $load.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(256, 1)));
    call {:si_unique_call 275} devirtbounce.3($p99, $p10);
    goto SeqInstr_133, SeqInstr_134;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  SeqInstr_135:
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    goto $bb26;

  SeqInstr_133:
    assume !assertsPassed;
    return;

  SeqInstr_130:
    assume !assertsPassed;
    return;

  SeqInstr_127:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i74 == 1;
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p33, $mul.ref($i34, 720)), $mul.ref(80, 1));
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.1, $p75);
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    $i77 := $and.i32($i76, 262144);
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    $i78 := $eq.i32($i77, 0);
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i78 == 1);
    goto $bb18;

  $bb19:
    assume $i78 == 1;
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p33, $mul.ref($i34, 720)), $mul.ref(80, 1));
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    $i80 := $load.i32($M.1, $p79);
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    $i81 := $or.i32($i80, 262144);
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p33, $mul.ref($i34, 720)), $mul.ref(80, 1));
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p82, $i81);
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p33, $mul.ref($i34, 720)), $mul.ref(8, 1));
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 265} spin_unlock_irqrestore($p83, $i70);
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 266} xpc_disconnect_callout($p35, 49);
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p33, $mul.ref($i34, 720)), $mul.ref(8, 1));
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 267} $p85 := spinlock_check($p84);
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 268} $i86 := _raw_spin_lock_irqsave($p85);
    call {:si_unique_call 269} {:cexpr "irq_flags"} boogie_si_record_i64($i86);
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p33, $mul.ref($i34, 720)), $mul.ref(80, 1));
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    $i88 := $load.i32($M.1, $p87);
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    $i89 := $or.i32($i88, 524288);
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p33, $mul.ref($i34, 720)), $mul.ref(80, 1));
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p90, $i89);
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    $i91 := $i86;
    goto $bb21;

  $bb4:
    assume $i39 == 1;
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p33, $mul.ref($i34, 720)), $mul.ref(8, 1));
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 247} $p41 := spinlock_check($p40);
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 248} $i42 := _raw_spin_lock_irqsave($p41);
    call {:si_unique_call 249} {:cexpr "irq_flags"} boogie_si_record_i64($i42);
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p33, $mul.ref($i34, 720)), $mul.ref(80, 1));
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.1, $p43);
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    $i45 := $and.i32($i44, 256);
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i45, 0);
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i46 == 1);
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p33, $mul.ref($i34, 720)), $mul.ref(8, 1));
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 259} spin_unlock_irqrestore($p67, $i42);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 261} xpc_kthread_waitmsgs($p10, $p35);
    goto SeqInstr_124, SeqInstr_125;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  SeqInstr_126:
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_124:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i46 == 1;
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p33, $mul.ref($i34, 720)), $mul.ref(80, 1));
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.1, $p47);
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    $i49 := $or.i32($i48, 256);
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p33, $mul.ref($i34, 720)), $mul.ref(80, 1));
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p50, $i49);
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p33, $mul.ref($i34, 720)), $mul.ref(8, 1));
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 250} spin_unlock_irqrestore($p51, $i42);
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 251} xpc_connected_callout($p35);
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p33, $mul.ref($i34, 720)), $mul.ref(8, 1));
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 252} $p53 := spinlock_check($p52);
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 253} $i54 := _raw_spin_lock_irqsave($p53);
    call {:si_unique_call 254} {:cexpr "irq_flags"} boogie_si_record_i64($i54);
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p33, $mul.ref($i34, 720)), $mul.ref(80, 1));
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.1, $p55);
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    $i57 := $or.i32($i56, 512);
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p33, $mul.ref($i34, 720)), $mul.ref(80, 1));
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p58, $i57);
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p33, $mul.ref($i34, 720)), $mul.ref(8, 1));
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 255} spin_unlock_irqrestore($p59, $i54);
    call {:si_unique_call 256} $i60 := devirtbounce.10($p11, $p35);
    goto SeqInstr_118, SeqInstr_119;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  SeqInstr_120:
    call {:si_unique_call 257} {:cexpr "tmp___2"} boogie_si_record_i32($i60);
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    $i61 := $add.i32($i60, $sub.i32(0, 1));
    call {:si_unique_call 258} {:cexpr "n_needed"} boogie_si_record_i32($i61);
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    $i62 := $sgt.i32($i61, 0);
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i62 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb8:
    assume $i62 == 1;
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p33, $mul.ref($i34, 720)), $mul.ref(80, 1));
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.1, $p63);
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    $i65 := $and.i32($i64, 131072);
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    $i66 := $eq.i32($i65, 0);
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    assume {:branchcond $i66} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i66 == 1);
    goto $bb10;

  $bb11:
    assume $i66 == 1;
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 260} xpc_activate_kthreads($p35, $i61);
    goto SeqInstr_121, SeqInstr_122;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  SeqInstr_123:
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_121:
    assume !assertsPassed;
    return;

  SeqInstr_118:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i27 == 1;
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    $p28 := $M.17;
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    $i29 := $sext.i16.i32($i4);
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    $i30 := $zext.i16.i32($i7);
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 246} vslice_dummy_var_23 := __dynamic_dev_dbg.ref.ref.ref.i32.i32($p1, $p28, .str.65, $i29, $i30);
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const kthread_create_on_node: ref;

axiom kthread_create_on_node == $sub.ref(0, 288271);

procedure kthread_create_on_node.ref.ref.i32.ref($p0: ref, $p1: ref, $i2: i32, $p3: ref) returns ($r: ref);
  free requires assertsPassed;



implementation kthread_create_on_node.ref.ref.i32.ref($p0: ref, $p1: ref, $i2: i32, $p3: ref) returns ($r: ref)
{
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 281} {:cexpr "kthread_create_on_node:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} $p4 := external_alloc();
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



procedure kthread_create_on_node.ref.ref.i32.ref.i32($p0: ref, $p1: ref, $i2: i32, $p3: ref, p.4: i32) returns ($r: ref);
  free requires assertsPassed;



implementation kthread_create_on_node.ref.ref.i32.ref.i32($p0: ref, $p1: ref, $i2: i32, $p3: ref, p.4: i32) returns ($r: ref)
{
  var $p4: ref;
  var $p5: ref;

  $bb1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 283} {:cexpr "kthread_create_on_node:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 284} $p4 := external_alloc();
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



procedure kthread_create_on_node.ref.ref.i32.ref.i32.i32($p0: ref, $p1: ref, $i2: i32, $p3: ref, p.4: i32, p.5: i32) returns ($r: ref);
  free requires assertsPassed;



implementation kthread_create_on_node.ref.ref.i32.ref.i32.i32($p0: ref, $p1: ref, $i2: i32, $p3: ref, p.4: i32, p.5: i32) returns ($r: ref)
{
  var $p4: ref;
  var $p5: ref;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 285} {:cexpr "kthread_create_on_node:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} $p4 := external_alloc();
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const IS_ERR: ref;

axiom IS_ERR == $sub.ref(0, 289303);

procedure IS_ERR($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation IS_ERR($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 18446744073709547520);
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 287} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 288} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const wake_up_process: ref;

axiom wake_up_process == $sub.ref(0, 290335);

procedure wake_up_process($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation wake_up_process($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 1} true;
    call {:si_unique_call 289} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 290} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 291367);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 1} true;
    call {:si_unique_call 291} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 292} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const xpc_connected_callout: ref;

axiom xpc_connected_callout == $sub.ref(0, 292399);

procedure xpc_connected_callout($p0: ref);
  free requires assertsPassed;
  modifies $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $CurrAddr;



implementation xpc_connected_callout($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i24;
  var $i14: i24;
  var $i15: i24;
  var $p16: ref;
  var $p17: ref;
  var $i18: i8;
  var $i19: i64;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $i25: i16;
  var $i26: i32;
  var $p27: ref;
  var $i28: i16;
  var $i29: i32;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i16;
  var $i35: i32;
  var $i36: i16;
  var $p37: ref;
  var $i38: i16;
  var $i39: i32;
  var $p40: ref;
  var $i41: i16;
  var $i42: i64;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i24;
  var $i53: i24;
  var $i54: i24;
  var $p55: ref;
  var $p56: ref;
  var $i57: i8;
  var $i58: i64;
  var $i59: i64;
  var $i60: i64;
  var $i61: i1;
  var $p62: ref;
  var $p63: ref;
  var $i64: i16;
  var $i65: i32;
  var $p66: ref;
  var $i67: i16;
  var $i68: i32;
  var vslice_dummy_var_25: i32;
  var vslice_dummy_var_26: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 293} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 294} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(208, 1));
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p7, .str);
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p8, .str.23);
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p9, .str.21);
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p10, .str.24);
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    $i13 := $load.i24($M.12, $p12);
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    $i14 := $and.i24($i13, $sub.i24(0, 262144));
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    $i15 := $or.i24($i14, 740);
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p12, $i15);
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p16, 0);
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.13, $p17);
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i64($i18);
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    $i20 := $and.i64($i19, 1);
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 295} $i21 := ldv__builtin_expect($i20, 0);
    call {:si_unique_call 296} {:cexpr "tmp"} boogie_si_record_i64($i21);
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(208, 1));
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.1, $p31);
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(0, 1));
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    $i34 := $load.i16($M.1, $p33);
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    $i35 := $sext.i16.i32($i34);
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i32.i16($i35);
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(92, 1));
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    $i38 := $load.i16($M.1, $p37);
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    $i39 := $zext.i16.i32($i38);
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(96, 1));
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    $i41 := $load.i16($M.1, $p40);
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    $i42 := $zext.i16.i64($i41);
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    $p43 := $i2p.i64.ref($i42);
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(216, 1));
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.1, $p44);
    call {:si_unique_call 298} devirtbounce.11($p32, 2, $i36, $i39, $p43, $p45);
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p46, .str);
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p47, .str.23);
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p48, .str.21);
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p49, .str.25);
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p50);
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    $i52 := $load.i24($M.12, $p51);
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    $i53 := $and.i24($i52, $sub.i24(0, 262144));
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    $i54 := $or.i24($i53, 746);
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p51, $i54);
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p55, 0);
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    $i57 := $load.i8($M.13, $p56);
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    $i58 := $zext.i8.i64($i57);
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    $i59 := $and.i64($i58, 1);
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 299} $i60 := ldv__builtin_expect($i59, 0);
    call {:si_unique_call 300} {:cexpr "tmp___0"} boogie_si_record_i64($i60);
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    $i61 := $ne.i64($i60, 0);
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i61 == 1;
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    $p62 := $M.17;
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(0, 1));
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    $i64 := $load.i16($M.1, $p63);
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    $i65 := $sext.i16.i32($i64);
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(92, 1));
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    $i67 := $load.i16($M.1, $p66);
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    $i68 := $zext.i16.i32($i67);
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 301} vslice_dummy_var_26 := __dynamic_dev_dbg.ref.ref.ref.i32.i32($p2, $p62, .str.25, $i65, $i68);
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume $i22 == 1;
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    $p23 := $M.17;
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(0, 1));
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    $i25 := $load.i16($M.1, $p24);
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    $i26 := $sext.i16.i32($i25);
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(92, 1));
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    $i28 := $load.i16($M.1, $p27);
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    $i29 := $zext.i16.i32($i28);
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 297} vslice_dummy_var_25 := __dynamic_dev_dbg.ref.ref.ref.i32.i32($p1, $p23, .str.24, $i26, $i29);
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const xpc_activate_kthreads: ref;

axiom xpc_activate_kthreads == $sub.ref(0, 293431);

procedure xpc_activate_kthreads($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.1, $CurrAddr, $M.0, $M.2, $M.23, $M.28, assertsPassed;



implementation xpc_activate_kthreads($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i1;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i24;
  var $i19: i24;
  var $i20: i24;
  var $p21: ref;
  var $p22: ref;
  var $i23: i8;
  var $i24: i64;
  var $i25: i64;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $i30: i16;
  var $i31: i32;
  var $p32: ref;
  var $i33: i16;
  var $i34: i32;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $i39: i32;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $i44: i32;
  var $i45: i32;
  var $i46: i1;
  var $i47: i32;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i24;
  var $i55: i24;
  var $i56: i24;
  var $p57: ref;
  var $p58: ref;
  var $i59: i8;
  var $i60: i64;
  var $i61: i64;
  var $i62: i64;
  var $i63: i1;
  var $p64: ref;
  var $p65: ref;
  var $i66: i16;
  var $i67: i32;
  var $p68: ref;
  var $i69: i16;
  var $i70: i32;
  var vslice_dummy_var_27: i32;
  var vslice_dummy_var_28: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 302} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 303} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 304} {:cexpr "xpc_activate_kthreads:arg:needed"} boogie_si_record_i32($i1);
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(328, 1));
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 305} $i5 := atomic_read($p4);
    call {:si_unique_call 306} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(320, 1));
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} $i7 := atomic_read($p6);
    call {:si_unique_call 308} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    $i8 := $sgt.i32($i5, 0);
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i37 := $i1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    $i38 := $sle.i32($i37, 0);
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i39 := $add.i32($i37, $i7);
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(324, 1));
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.1, $p40);
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    $i42 := $ugt.i32($i39, $i41);
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    $i47 := $i37;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p48, .str);
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p49, .str.5);
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p50, .str.6);
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p51, .str.8);
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p52);
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    $i54 := $load.i24($M.12, $p53);
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    $i55 := $and.i24($i54, $sub.i24(0, 262144));
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    $i56 := $or.i24($i55, 701);
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p53, $i56);
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p57, 0);
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    $i59 := $load.i8($M.13, $p58);
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    $i60 := $zext.i8.i64($i59);
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    $i61 := $and.i64($i60, 1);
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 316} $i62 := ldv__builtin_expect($i61, 0);
    call {:si_unique_call 317} {:cexpr "tmp___2"} boogie_si_record_i64($i62);
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    $i63 := $ne.i64($i62, 0);
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    assume {:branchcond $i63} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 319} xpc_create_kthreads($p0, $i47, 0);
    goto SeqInstr_142, SeqInstr_143;

  SeqInstr_143:
    assume assertsPassed;
    goto SeqInstr_144;

  SeqInstr_144:
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_142:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i63 == 1;
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    $p64 := $M.17;
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(0, 1));
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    $i66 := $load.i16($M.1, $p65);
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    $i67 := $sext.i16.i32($i66);
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(92, 1));
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    $i69 := $load.i16($M.1, $p68);
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    $i70 := $zext.i16.i32($i69);
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 318} vslice_dummy_var_28 := __dynamic_dev_dbg.ref.ref.ref.i32.i32.i32($p3, $p64, .str.8, $i47, $i67, $i70);
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb14:
    assume $i42 == 1;
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(324, 1));
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.1, $p43);
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    $i45 := $sub.i32($i44, $i7);
    call {:si_unique_call 315} {:cexpr "needed"} boogie_si_record_i32($i45);
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    $i46 := $sle.i32($i45, 0);
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i47 := $i45;
    goto $bb19;

  $bb16:
    assume $i46 == 1;
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb10:
    assume $i38 == 1;
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i5, $i1);
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i9 == 1);
    call {:si_unique_call 309} {:cexpr "xpc_activate_kthreads:arg:wakeup"} boogie_si_record_i32($i1);
    assume {:verifier.code 0} true;
    $i10 := $i1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32($i1, $i10);
    call {:si_unique_call 310} {:cexpr "needed"} boogie_si_record_i32($i11);
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p12, .str);
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p13, .str.5);
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p14, .str.6);
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p15, .str.7);
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    $i18 := $load.i24($M.12, $p17);
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    $i19 := $and.i24($i18, $sub.i24(0, 262144));
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    $i20 := $or.i24($i19, 685);
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p17, $i20);
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p21, 0);
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.13, $p22);
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i64($i23);
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    $i25 := $and.i64($i24, 1);
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 311} $i26 := ldv__builtin_expect($i25, 0);
    call {:si_unique_call 312} {:cexpr "tmp___1"} boogie_si_record_i64($i26);
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(344, 1));
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 314} __wake_up($p36, 3, $i10, $0.ref);
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    $i37 := $i11;
    goto $bb9;

  $bb6:
    assume $i27 == 1;
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    $p28 := $M.17;
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(0, 1));
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    $i30 := $load.i16($M.1, $p29);
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    $i31 := $sext.i16.i32($i30);
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(92, 1));
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    $i33 := $load.i16($M.1, $p32);
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    $i34 := $zext.i16.i32($i33);
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 313} vslice_dummy_var_27 := __dynamic_dev_dbg.ref.ref.ref.i32.i32.i32($p2, $p28, .str.7, $i10, $i31, $i34);
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume $i9 == 1;
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    $i10 := $i5;
    goto $bb5;
}



const xpc_kthread_waitmsgs: ref;

axiom xpc_kthread_waitmsgs == $sub.ref(0, 294463);

procedure xpc_kthread_waitmsgs($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.18, $M.19, $M.20, $M.21, $M.22, $M.1, $M.24, $M.40, $CurrAddr, $M.2, $M.23, $M.0, $M.31, $M.28, $M.41, $M.42, assertsPassed, $M.43, $M.44, $M.45, $M.32;



implementation xpc_kthread_waitmsgs($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i24;
  var $i26: i24;
  var $i27: i24;
  var $p28: ref;
  var $p29: ref;
  var $i30: i8;
  var $i31: i64;
  var $i32: i64;
  var $i33: i64;
  var $i34: i1;
  var $p35: ref;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $i40: i32;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p50: ref;
  var $p51: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i32;
  var $i56: i1;
  var $p57: ref;
  var $i58: i32;
  var $i59: i32;
  var $i60: i1;
  var $p61: ref;
  var $p62: ref;
  var $i63: i32;
  var $i64: i1;
  var $p65: ref;
  var $i66: i32;
  var $i67: i1;
  var $p68: ref;
  var $p69: ref;
  var $i70: i32;
  var $i71: i32;
  var $i72: i1;
  var vslice_dummy_var_29: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 320} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 321} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(288, 1)));
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $p5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $p13, $i14, $p15, $i16, $i17, $p19, $p20, $p21, $p22, $p23, $p24, $i25, $i26, $i27, $p28, $p29, $i30, $i31, $i32, $i33, $i34, $p35, $i37, $i38, $p39, $i40, $i41, $i42, $p43, $p44, $p46, $p47, $p48, $p50, $p51, $p53, $p54, $i55, $i56, $p57, $i58, $i59, $i60, $p61, $p62, $i63, $i64, $p65, $i66, $i67, $p68, $p69, $i70, $i71, $i72, vslice_dummy_var_29 := xpc_kthread_waitmsgs_loop_$bb1($p1, $p2, $p3, $p4, $p5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $p13, $i14, $p15, $i16, $i17, $p19, $p20, $p21, $p22, $p23, $p24, $i25, $i26, $i27, $p28, $p29, $i30, $i31, $i32, $i33, $i34, $p35, $i37, $i38, $p39, $i40, $i41, $i42, $p43, $p44, $p46, $p47, $p48, $p50, $p51, $p53, $p54, $i55, $i56, $p57, $i58, $i59, $i60, $p61, $p62, $i63, $i64, $p65, $i66, $i67, $p68, $p69, $i70, $i71, $i72, vslice_dummy_var_29);
    goto $bb1_last;

  SeqInstr_146:
    assume assertsPassed;
    goto SeqInstr_147;

  SeqInstr_147:
    call {:si_unique_call 323} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    $i7 := $sgt.i32($i6, 0);
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 720)), $mul.ref(328, 1));
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 327} $i14 := atomic_add_return(1, $p13);
    goto SeqInstr_154, SeqInstr_155;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  SeqInstr_156:
    call {:si_unique_call 328} {:cexpr "tmp___0"} boogie_si_record_i32($i14);
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 720)), $mul.ref(332, 1));
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.1, $p15);
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    $i17 := $ugt.i32($i14, $i16);
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p19, .str);
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p20, .str.67);
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p21, .str.6);
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p22, .str.68);
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    $i25 := $load.i24($M.12, $p24);
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    $i26 := $and.i24($i25, $sub.i24(0, 262144));
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    $i27 := $or.i24($i26, 731);
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p24, $i27);
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p28, 0);
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.13, $p29);
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i64($i30);
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    $i32 := $and.i64($i31, 1);
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 330} $i33 := ldv__builtin_expect($i32, 0);
    call {:si_unique_call 331} {:cexpr "tmp___1"} boogie_si_record_i64($i33);
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i33, 0);
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    call {:si_unique_call 333} $i37 := devirtbounce.10($p4, $p1);
    goto SeqInstr_160, SeqInstr_161;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  SeqInstr_162:
    call {:si_unique_call 334} {:cexpr "tmp___6"} boogie_si_record_i32($i37);
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    $i38 := $sle.i32($i37, 0);
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i38 == 1);
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p1, $mul.ref(0, 720)), $mul.ref(328, 1));
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} atomic_dec($p68);
    goto SeqInstr_169, SeqInstr_170;

  SeqInstr_170:
    assume assertsPassed;
    goto SeqInstr_171;

  SeqInstr_171:
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p1, $mul.ref(0, 720)), $mul.ref(80, 1));
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    $i70 := $load.i32($M.1, $p69);
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    $i71 := $and.i32($i70, 131072);
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    $i72 := $eq.i32($i71, 0);
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i72 == 1);
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    return;

  $bb39:
    assume {:verifier.code 0} true;
    assume $i72 == 1;
    goto $bb39_dummy;

  SeqInstr_169:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i38 == 1;
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 720)), $mul.ref(80, 1));
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.1, $p39);
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    $i41 := $and.i32($i40, 131072);
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i41, 0);
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb21;

  $bb22:
    assume $i42 == 1;
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} $p43 := get_current();
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    $M.18 := $store.i32($M.18, $p44, 0);
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    $M.19 := $store.ref($M.19, $p46, $p43);
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    $M.20 := $store.ref($M.20, $p47, autoremove_wake_function);
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    $M.21 := $store.ref($M.21, $p50, $p48);
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(8, 1));
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    $M.22 := $store.ref($M.22, $p53, $p51);
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p1, $mul.ref(0, 720)), $mul.ref(344, 1));
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} prepare_to_wait_exclusive($p54, $p3, 1);
    call {:si_unique_call 337} $i55 := devirtbounce.10($p4, $p1);
    goto SeqInstr_163, SeqInstr_164;

  SeqInstr_164:
    assume assertsPassed;
    goto SeqInstr_165;

  SeqInstr_165:
    call {:si_unique_call 338} {:cexpr "tmp___3"} boogie_si_record_i32($i55);
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    $i56 := $sgt.i32($i55, 0);
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb26;

  $bb26:
    assume !($i56 == 1);
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    call $p57, $i58, $i59, $i60, $p62, $i63, $i64, $i66, $i67 := xpc_kthread_waitmsgs_loop_$bb27($p1, $p3, $p4, $p54, $p57, $i58, $i59, $i60, $p62, $i63, $i64, $i66, $i67);
    goto $bb27_last;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.1, $p57);
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    $i59 := $and.i32($i58, 131072);
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    $i60 := $ne.i32($i59, 0);
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 340} $p62 := get_current();
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 341} $i63 := signal_pending($p62);
    call {:si_unique_call 342} {:cexpr "tmp___5"} boogie_si_record_i32($i63);
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    $i64 := $eq.i32($i63, 0);
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p1, $mul.ref(0, 720)), $mul.ref(344, 1));
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 347} abort_exclusive_wait($p65, $p3, 1, $0.ref);
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb33:
    assume $i64 == 1;
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 343} schedule();
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} prepare_to_wait_exclusive($p54, $p3, 1);
    call {:si_unique_call 345} $i66 := devirtbounce.10($p4, $p1);
    goto SeqInstr_166, SeqInstr_167;

  SeqInstr_167:
    assume assertsPassed;
    goto SeqInstr_168;

  SeqInstr_168:
    call {:si_unique_call 346} {:cexpr "tmp___3"} boogie_si_record_i32($i66);
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    $i67 := $sgt.i32($i66, 0);
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume !($i67 == 1);
    goto $bb37_dummy;

  $bb30:
    assume $i67 == 1;
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p1, $mul.ref(0, 720)), $mul.ref(344, 1));
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} finish_wait($p61, $p3);
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    goto $bb31;

  SeqInstr_166:
    assume !assertsPassed;
    return;

  $bb28:
    assume $i60 == 1;
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb24:
    assume {:verifier.code 0} true;
    assume $i56 == 1;
    goto $bb25;

  SeqInstr_163:
    assume !assertsPassed;
    return;

  SeqInstr_160:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i34 == 1;
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    $p35 := $M.17;
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} vslice_dummy_var_29 := __dynamic_dev_dbg.ref.ref.ref($p2, $p35, .str.68);
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb12:
    assume $i17 == 1;
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 720)), $mul.ref(328, 1));
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 329} atomic_dec($p18);
    goto SeqInstr_157, SeqInstr_158;

  SeqInstr_158:
    assume assertsPassed;
    goto SeqInstr_159;

  SeqInstr_159:
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    goto $bb14;

  SeqInstr_157:
    assume !assertsPassed;
    return;

  SeqInstr_154:
    assume !assertsPassed;
    return;

  $bb2:
    assume $i7 == 1;
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    call $i8, $i9, $i10, $i11, $i12 := xpc_kthread_waitmsgs_loop_$bb5($p1, $p4, $p5, $i8, $i9, $i10, $i11, $i12);
    goto $bb5_last;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 131072);
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i12 == 1);
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb9:
    assume $i12 == 1;
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} xpc_deliver_payload($p1);
    goto SeqInstr_148, SeqInstr_149;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  SeqInstr_150:
    call {:si_unique_call 325} $i8 := devirtbounce.10($p4, $p1);
    goto SeqInstr_151, SeqInstr_152;

  SeqInstr_152:
    assume assertsPassed;
    goto SeqInstr_153;

  SeqInstr_153:
    call {:si_unique_call 326} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    $i9 := $sgt.i32($i8, 0);
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i9 == 1);
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb7_dummy;

  SeqInstr_151:
    assume !assertsPassed;
    return;

  SeqInstr_148:
    assume !assertsPassed;
    return;

  SeqInstr_145:
    assume !assertsPassed;
    return;

  $bb37_dummy:
    assume false;
    return;

  $bb27_last:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p1, $mul.ref(0, 720)), $mul.ref(80, 1));
    goto corral_source_split_1326;

  $bb7_dummy:
    assume false;
    return;

  $bb5_last:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.1, $p5);
    goto corral_source_split_1243;

  $bb39_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 720)), $mul.ref(80, 1));
    call {:si_unique_call 322} $i6 := devirtbounce.10($p4, $p1);
    goto SeqInstr_145, SeqInstr_146;
}



const xpc_disconnect_callout: ref;

axiom xpc_disconnect_callout == $sub.ref(0, 295495);

procedure xpc_disconnect_callout($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $CurrAddr;



implementation xpc_disconnect_callout($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i24;
  var $i15: i24;
  var $i16: i24;
  var $p17: ref;
  var $p18: ref;
  var $i19: i8;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $i26: i16;
  var $i27: i32;
  var $p28: ref;
  var $i29: i16;
  var $i30: i32;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i16;
  var $i36: i32;
  var $i37: i16;
  var $p38: ref;
  var $i39: i16;
  var $i40: i32;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i24;
  var $i50: i24;
  var $i51: i24;
  var $p52: ref;
  var $p53: ref;
  var $i54: i8;
  var $i55: i64;
  var $i56: i64;
  var $i57: i64;
  var $i58: i1;
  var $p59: ref;
  var $p60: ref;
  var $i61: i16;
  var $i62: i32;
  var $p63: ref;
  var $i64: i16;
  var $i65: i32;
  var vslice_dummy_var_30: i32;
  var vslice_dummy_var_31: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 349} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 350} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 351} {:cexpr "xpc_disconnect_callout:arg:reason"} boogie_si_record_i32($i1);
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(208, 1));
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p8, .str);
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p9, .str.28);
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p10, .str.21);
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p11, .str.29);
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    $i14 := $load.i24($M.12, $p13);
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    $i15 := $and.i24($i14, $sub.i24(0, 262144));
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    $i16 := $or.i24($i15, 868);
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p13, $i16);
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p17, 0);
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.13, $p18);
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i64($i19);
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    $i21 := $and.i64($i20, 1);
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 352} $i22 := ldv__builtin_expect($i21, 0);
    call {:si_unique_call 353} {:cexpr "tmp"} boogie_si_record_i64($i22);
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(208, 1));
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.1, $p32);
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(0, 1));
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    $i35 := $load.i16($M.1, $p34);
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    $i36 := $sext.i16.i32($i35);
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i32.i16($i36);
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(92, 1));
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    $i39 := $load.i16($M.1, $p38);
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    $i40 := $zext.i16.i32($i39);
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(216, 1));
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.1, $p41);
    call {:si_unique_call 355} devirtbounce.11($p33, $i1, $i37, $i40, $0.ref, $p42);
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p43, .str);
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p44, .str.28);
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p45, .str.21);
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p46, .str.30);
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    $i49 := $load.i24($M.12, $p48);
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    $i50 := $and.i24($i49, $sub.i24(0, 262144));
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    $i51 := $or.i24($i50, 873);
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p48, $i51);
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p52, 0);
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    $i54 := $load.i8($M.13, $p53);
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    $i55 := $zext.i8.i64($i54);
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    $i56 := $and.i64($i55, 1);
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 356} $i57 := ldv__builtin_expect($i56, 0);
    call {:si_unique_call 357} {:cexpr "tmp___0"} boogie_si_record_i64($i57);
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    $i58 := $ne.i64($i57, 0);
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i58 == 1;
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $p59 := $M.17;
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(0, 1));
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    $i61 := $load.i16($M.1, $p60);
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    $i62 := $sext.i16.i32($i61);
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(92, 1));
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    $i64 := $load.i16($M.1, $p63);
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    $i65 := $zext.i16.i32($i64);
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 358} vslice_dummy_var_31 := __dynamic_dev_dbg.ref.ref.ref.i32.i32.i32($p3, $p59, .str.30, $i1, $i62, $i65);
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume $i23 == 1;
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    $p24 := $M.17;
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(0, 1));
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    $i26 := $load.i16($M.1, $p25);
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    $i27 := $sext.i16.i32($i26);
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(92, 1));
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    $i29 := $load.i16($M.1, $p28);
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    $i30 := $zext.i16.i32($i29);
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 354} vslice_dummy_var_30 := __dynamic_dev_dbg.ref.ref.ref.i32.i32.i32($p2, $p24, .str.29, $i1, $i27, $i30);
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const xpc_deliver_payload: ref;

axiom xpc_deliver_payload == $sub.ref(0, 296527);

procedure xpc_deliver_payload($p0: ref);
  free requires assertsPassed;
  modifies $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $CurrAddr, $M.1, $M.23, $M.28, assertsPassed, $M.0, $M.2;



implementation xpc_deliver_payload($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i24;
  var $i19: i24;
  var $i20: i24;
  var $p21: ref;
  var $p22: ref;
  var $i23: i8;
  var $i24: i64;
  var $i25: i64;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $i30: i16;
  var $i31: i32;
  var $p32: ref;
  var $i33: i16;
  var $i34: i32;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i16;
  var $i40: i32;
  var $i41: i16;
  var $p42: ref;
  var $i43: i16;
  var $i44: i32;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i24;
  var $i54: i24;
  var $i55: i24;
  var $p56: ref;
  var $p57: ref;
  var $i58: i8;
  var $i59: i64;
  var $i60: i64;
  var $i61: i64;
  var $i62: i1;
  var $p63: ref;
  var $p64: ref;
  var $i65: i16;
  var $i66: i32;
  var $p67: ref;
  var $i68: i16;
  var $i69: i32;
  var $p71: ref;
  var vslice_dummy_var_32: i32;
  var vslice_dummy_var_33: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 359} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 360} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(304, 1)));
    call {:si_unique_call 361} $p4 := devirtbounce.12($p3, $p0);
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 362} xpc_msgqueue_ref($p0);
    goto SeqInstr_172, SeqInstr_173;

  SeqInstr_173:
    assume assertsPassed;
    goto SeqInstr_174;

  SeqInstr_174:
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(336, 1));
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 363} atomic_inc($p7);
    goto SeqInstr_175, SeqInstr_176;

  SeqInstr_176:
    assume assertsPassed;
    goto SeqInstr_177;

  SeqInstr_177:
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(208, 1));
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(336, 1));
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 371} atomic_dec($p71);
    goto SeqInstr_178, SeqInstr_179;

  SeqInstr_179:
    assume assertsPassed;
    goto SeqInstr_180;

  SeqInstr_180:
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_178:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i11 == 1;
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p12, .str);
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p13, .str.34);
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p14, .str.21);
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p15, .str.35);
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    $i18 := $load.i24($M.12, $p17);
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    $i19 := $and.i24($i18, $sub.i24(0, 262144));
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    $i20 := $or.i24($i19, 1022);
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p17, $i20);
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p21, 0);
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.13, $p22);
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i64($i23);
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    $i25 := $and.i64($i24, 1);
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 364} $i26 := ldv__builtin_expect($i25, 0);
    call {:si_unique_call 365} {:cexpr "tmp"} boogie_si_record_i64($i26);
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(208, 1));
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.1, $p36);
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(0, 1));
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    $i39 := $load.i16($M.1, $p38);
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    $i40 := $sext.i16.i32($i39);
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i32.i16($i40);
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(92, 1));
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    $i43 := $load.i16($M.1, $p42);
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    $i44 := $zext.i16.i32($i43);
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(216, 1));
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.1, $p45);
    call {:si_unique_call 367} devirtbounce.11($p37, 4, $i41, $i44, $p4, $p46);
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p47, .str);
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p48, .str.34);
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p49, .str.21);
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p50, .str.36);
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    $i53 := $load.i24($M.12, $p52);
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    $i54 := $and.i24($i53, $sub.i24(0, 262144));
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    $i55 := $or.i24($i54, 1030);
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p52, $i55);
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p56, 0);
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    $i58 := $load.i8($M.13, $p57);
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    $i59 := $zext.i8.i64($i58);
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    $i60 := $and.i64($i59, 1);
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 368} $i61 := ldv__builtin_expect($i60, 0);
    call {:si_unique_call 369} {:cexpr "tmp___0"} boogie_si_record_i64($i61);
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    $i62 := $ne.i64($i61, 0);
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb8:
    assume $i62 == 1;
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    $p63 := $M.17;
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(0, 1));
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    $i65 := $load.i16($M.1, $p64);
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    $i66 := $sext.i16.i32($i65);
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(92, 1));
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    $i68 := $load.i16($M.1, $p67);
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    $i69 := $zext.i16.i32($i68);
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 370} vslice_dummy_var_33 := __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32($p2, $p63, .str.36, $p4, $i66, $i69);
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i27 == 1;
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    $p28 := $M.17;
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(0, 1));
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    $i30 := $load.i16($M.1, $p29);
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    $i31 := $sext.i16.i32($i30);
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(92, 1));
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    $i33 := $load.i16($M.1, $p32);
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    $i34 := $zext.i16.i32($i33);
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 366} vslice_dummy_var_32 := __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32($p1, $p28, .str.35, $p4, $i31, $i34);
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_175:
    assume !assertsPassed;
    return;

  SeqInstr_172:
    assume !assertsPassed;
    return;
}



const atomic_dec: ref;

axiom atomic_dec == $sub.ref(0, 297559);

procedure atomic_dec($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $CurrAddr, $M.23, $M.28, assertsPassed, $M.0, $M.2;



implementation atomic_dec($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 372} devirtbounce.13(0, $p1, $p1);
    goto SeqInstr_181, SeqInstr_182;

  SeqInstr_182:
    assume assertsPassed;
    goto SeqInstr_183;

  SeqInstr_183:
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_181:
    assume !assertsPassed;
    return;
}



const get_current: ref;

axiom get_current == $sub.ref(0, 298591);

procedure get_current() returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation get_current() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 373} $p0 := devirtbounce.14(0, current_task);
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const autoremove_wake_function: ref;

axiom autoremove_wake_function == $sub.ref(0, 299623);

procedure autoremove_wake_function($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32);



const prepare_to_wait_exclusive: ref;

axiom prepare_to_wait_exclusive == $sub.ref(0, 300655);

procedure prepare_to_wait_exclusive($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;



implementation prepare_to_wait_exclusive($p0: ref, $p1: ref, $i2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 374} {:cexpr "prepare_to_wait_exclusive:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    return;
}



const finish_wait: ref;

axiom finish_wait == $sub.ref(0, 301687);

procedure finish_wait($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation finish_wait($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    return;
}



const signal_pending: ref;

axiom signal_pending == $sub.ref(0, 302719);

procedure signal_pending($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation signal_pending($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 375} $i1 := test_tsk_thread_flag($p0, 2);
    call {:si_unique_call 376} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 377} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 378} {:cexpr "tmp___0"} boogie_si_record_i64($i5);
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i64.i32($i5);
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const schedule: ref;

axiom schedule == $sub.ref(0, 303751);

procedure schedule();
  free requires assertsPassed;



implementation schedule()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    return;
}



const abort_exclusive_wait: ref;

axiom abort_exclusive_wait == $sub.ref(0, 304783);

procedure abort_exclusive_wait($p0: ref, $p1: ref, $i2: i32, $p3: ref);
  free requires assertsPassed;



implementation abort_exclusive_wait($p0: ref, $p1: ref, $i2: i32, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 379} {:cexpr "abort_exclusive_wait:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    return;
}



const test_tsk_thread_flag: ref;

axiom test_tsk_thread_flag == $sub.ref(0, 305815);

procedure test_tsk_thread_flag($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation test_tsk_thread_flag($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} {:cexpr "test_tsk_thread_flag:arg:flag"} boogie_si_record_i32($i1);
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 9576)), $mul.ref(8, 1));
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.1, $p2);
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 381} $i5 := test_ti_thread_flag($p4, $i1);
    call {:si_unique_call 382} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const test_ti_thread_flag: ref;

axiom test_ti_thread_flag == $sub.ref(0, 306847);

procedure test_ti_thread_flag($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation test_ti_thread_flag($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 383} {:cexpr "test_ti_thread_flag:arg:flag"} boogie_si_record_i32($i1);
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(16, 1));
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 384} $i4 := variable_test_bit($i1, $p3);
    call {:si_unique_call 385} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const variable_test_bit: ref;

axiom variable_test_bit == $sub.ref(0, 307879);

procedure variable_test_bit($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation variable_test_bit($i0: i32, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} {:cexpr "variable_test_bit:arg:nr"} boogie_si_record_i32($i0);
    call {:si_unique_call 387} $i2 := devirtbounce.15(0, $p1, $i0);
    call {:si_unique_call 388} {:cexpr "oldbit"} boogie_si_record_i32($i2);
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const atomic_inc: ref;

axiom atomic_inc == $sub.ref(0, 308911);

procedure atomic_inc($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $CurrAddr, $M.23, $M.28, assertsPassed, $M.0, $M.2;



implementation atomic_inc($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 389} devirtbounce.13(0, $p1, $p1);
    goto SeqInstr_184, SeqInstr_185;

  SeqInstr_185:
    assume assertsPassed;
    goto SeqInstr_186;

  SeqInstr_186:
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_184:
    assume !assertsPassed;
    return;
}



const __atomic_add_unless: ref;

axiom __atomic_add_unless == $sub.ref(0, 309943);

procedure __atomic_add_unless($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __atomic_add_unless($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $i11: i32;
  var $i9: i32;
  var $i10: i32;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 390} {:cexpr "__atomic_add_unless:arg:a"} boogie_si_record_i32($i1);
    call {:si_unique_call 391} {:cexpr "__atomic_add_unless:arg:u"} boogie_si_record_i32($i2);
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} $i3 := atomic_read($p0);
    call {:si_unique_call 393} {:cexpr "c"} boogie_si_record_i32($i3);
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, $i2);
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 394} $i7 := ldv__builtin_expect($i6, 0);
    call {:si_unique_call 395} {:cexpr "tmp"} boogie_si_record_i64($i7);
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    $i9 := $i3;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i8 == 1);
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    $i10 := $i3;
    goto $bb4;

  $bb4:
    call $i11, $i10, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25 := __atomic_add_unless_loop_$bb4($p0, $i1, $i2, $i11, $i10, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25);
    goto $bb4_last;

  $bb7:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i10, $i1);
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 396} $i14 := atomic_cmpxchg($p0, $i10, $i13);
    call {:si_unique_call 397} {:cexpr "old"} boogie_si_record_i32($i14);
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, $i10);
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 398} $i18 := ldv__builtin_expect($i17, 1);
    call {:si_unique_call 399} {:cexpr "tmp___0"} boogie_si_record_i64($i18);
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    $i20 := $i10;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i14, $i2);
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    $i22 := $zext.i1.i32($i21);
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i22);
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 400} $i24 := ldv__builtin_expect($i23, 0);
    call {:si_unique_call 401} {:cexpr "tmp"} boogie_si_record_i64($i24);
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    $i11 := $i14;
    assume true;
    goto $bb5, $bb11;

  $bb11:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i10 := $i14;
    goto $bb11_dummy;

  $bb5:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    $i9 := $i11;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    $i12 := $i9;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb8:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    $i12 := $i20;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb2;

  $bb11_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb7;
}



const atomic_cmpxchg: ref;

axiom atomic_cmpxchg == $sub.ref(0, 310975);

procedure atomic_cmpxchg($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_cmpxchg($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 402} {:cexpr "atomic_cmpxchg:arg:old"} boogie_si_record_i32($i1);
    call {:si_unique_call 403} {:cexpr "atomic_cmpxchg:arg:new"} boogie_si_record_i32($i2);
    call {:si_unique_call 404} {:cexpr "atomic_cmpxchg:arg:__old"} boogie_si_record_i32($i1);
    call {:si_unique_call 405} {:cexpr "atomic_cmpxchg:arg:__new"} boogie_si_record_i32($i2);
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 406} $i4 := devirtbounce.16(0, $p3, $i2, $i1, $p3);
    call {:si_unique_call 407} {:cexpr "__ret"} boogie_si_record_i32($i4);
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const _raw_spin_unlock_irqrestore: ref;

axiom _raw_spin_unlock_irqrestore == $sub.ref(0, 312007);

procedure _raw_spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation _raw_spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} {:cexpr "_raw_spin_unlock_irqrestore:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    return;
}



const current_thread_info: ref;

axiom current_thread_info == $sub.ref(0, 313039);

procedure current_thread_info() returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation current_thread_info() returns ($r: ref)
{
  var $i0: i64;
  var $i1: i64;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 409} $i0 := devirtbounce.17(0, kernel_stack);
    call {:si_unique_call 410} {:cexpr "pfo_ret__"} boogie_si_record_i64($i0);
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $sub.i64($i0, 8152);
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    $p2 := $i2p.i64.ref($i1);
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const del_timer_sync: ref;

axiom del_timer_sync == $sub.ref(0, 314071);

procedure del_timer_sync($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation del_timer_sync($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 1} true;
    call {:si_unique_call 411} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 412} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const xpc_system_die: ref;

axiom xpc_system_die == $sub.ref(0, 315103);

procedure xpc_system_die($p0: ref, $i1: i64, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.23, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.28, assertsPassed, $CurrAddr, $M.2;



implementation xpc_system_die($p0: ref, $i1: i64, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 413} {:cexpr "xpc_system_die:arg:event"} boogie_si_record_i64($i1);
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i4 := $slt.i64($i1, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $slt.i64($i1, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $slt.i64($i1, 9);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i1, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 418} xpc_die_deactivate();
    goto SeqInstr_193, SeqInstr_194;

  SeqInstr_194:
    assume assertsPassed;
    goto SeqInstr_195;

  SeqInstr_195:
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_193:
    assume !assertsPassed;
    return;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb6:
    assume $i6 == 1;
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.1, $p11);
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 8);
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.1, $p14);
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 16);
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb24;

  $bb24:
    assume !($i16 == 1);
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.1, $p17);
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 19);
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.1, $p20);
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 415} $i22 := user_mode_vm($p21);
    call {:si_unique_call 416} {:cexpr "tmp"} boogie_si_record_i32($i22);
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 0);
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb27:
    assume $i23 == 1;
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 417} xpc_die_deactivate();
    goto SeqInstr_190, SeqInstr_191;

  SeqInstr_191:
    assume assertsPassed;
    goto SeqInstr_192;

  SeqInstr_192:
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    goto $bb29;

  SeqInstr_190:
    assume !assertsPassed;
    return;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb23;

  $bb19:
    assume $i13 == 1;
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} xpc_die_deactivate();
    goto SeqInstr_187, SeqInstr_188;

  SeqInstr_188:
    assume assertsPassed;
    goto SeqInstr_189;

  SeqInstr_189:
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    goto $bb21;

  SeqInstr_187:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i1, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb11;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb2:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i9 := $slt.i64($i1, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i9 == 1);
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb15:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i1, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb11;

  $bb17:
    assume $i10 == 1;
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    goto $bb9;
}



const xpc_die_deactivate: ref;

axiom xpc_die_deactivate == $sub.ref(0, 316135);

procedure xpc_die_deactivate();
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.23, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.28, assertsPassed, $CurrAddr, $M.2;



implementation xpc_die_deactivate()
{
  var $i0: i32;
  var $i1: i1;
  var $p2: ref;
  var $i3: i16;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i16;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i8;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $i23: i16;
  var $i24: i32;
  var $i25: i16;
  var $i26: i32;
  var $i27: i1;
  var $i6: i16;
  var $i28: i32;
  var $i29: i32;
  var $i30: i64;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $p36: ref;
  var $i34: i64;
  var $i35: i64;
  var $i38: i64;
  var $i39: i1;
  var $i40: i16;
  var $i41: i32;
  var $i42: i1;
  var $p44: ref;
  var $i45: i32;
  var $i46: i16;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $i50: i32;
  var $i52: i32;
  var $i53: i32;
  var $i54: i16;
  var $i55: i32;
  var $i56: i16;
  var $i57: i32;
  var $i58: i1;
  var $i43: i16;
  var $i59: i64;
  var $i60: i1;
  var $p61: ref;
  var $i62: i64;
  var $i64: i64;
  var $p65: ref;
  var $i66: i32;
  var $i67: i1;
  var vslice_dummy_var_34: i32;
  var vslice_dummy_var_35: i32;
  var vslice_dummy_var_36: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 419} $i0 := devirtbounce.16(0, xpc_die_disconnecting, 1, 0, xpc_die_disconnecting);
    call {:si_unique_call 420} {:cexpr "__ret"} boogie_si_record_i32($i0);
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $M.0 := 1;
    call {:si_unique_call 421} {:cexpr "xpc_exiting"} boogie_si_record_i32(1);
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(56, 1)));
    call {:si_unique_call 422} devirtbounce.4($p2);
    goto SeqInstr_196, SeqInstr_197;

  SeqInstr_197:
    assume assertsPassed;
    goto SeqInstr_198;

  SeqInstr_198:
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    $i3 := $load.i16($M.1, xp_max_npartitions);
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    $i4 := $sext.i16.i32($i3);
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32(0, $i4);
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i28 := $M.7;
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    $i29 := $mul.i32($i28, 5000);
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64($i29);
    call {:si_unique_call 428} {:cexpr "keep_waiting"} boogie_si_record_i64($i30);
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(280, 1)));
    call {:si_unique_call 429} $i32 := devirtbounce($p31);
    call {:si_unique_call 430} {:cexpr "any_engaged"} boogie_si_record_i32($i32);
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 0);
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i33 == 1);
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    $i34, $i35 := 50000, $i30;
    goto $bb23;

  $bb23:
    call $i34, $i35, $i38, $i39, $i59, $i60, $p61, $i62, $i64, $p65, $i66, $i67, vslice_dummy_var_36 := xpc_die_deactivate_loop_$bb23($i34, $i35, $i38, $i39, $i59, $i60, $p61, $i62, $i64, $p65, $i66, $i67, vslice_dummy_var_36);
    goto $bb23_last;

  $bb26:
    assume {:verifier.code 0} true;
    $i38 := $sub.i64($i35, 1);
    call {:si_unique_call 432} {:cexpr "keep_waiting"} boogie_si_record_i64($i38);
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    $i39 := $eq.i64($i35, 0);
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i59 := $sub.i64($i34, 1);
    call {:si_unique_call 437} {:cexpr "wait_to_print"} boogie_si_record_i64($i59);
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    $i60 := $eq.i64($i34, 0);
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    $i64 := $i59;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 439} __const_udelay(859000);
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(280, 1)));
    call {:si_unique_call 440} $i66 := devirtbounce($p65);
    call {:si_unique_call 441} {:cexpr "any_engaged"} boogie_si_record_i32($i66);
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    $i67 := $eq.i32($i66, 0);
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb44;

  $bb44:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    $i34, $i35 := $i64, $i38;
    goto $bb44_dummy;

  $bb24:
    assume $i67 == 1;
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p36 := $M.5;
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 431} vslice_dummy_var_34 := _dev_info.ref.ref($p36, .str.88);
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    return;

  $bb41:
    assume $i60 == 1;
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    $p61 := $M.5;
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    $i62 := $sdiv.i64($i38, 5000);
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} vslice_dummy_var_36 := _dev_info.ref.ref.i64($p61, .str.86, $i62);
    goto corral_source_split_1745;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    $i64 := 50000;
    goto $bb43;

  $bb27:
    assume $i39 == 1;
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    $i40 := $load.i16($M.1, xp_max_npartitions);
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    $i41 := $sext.i16.i32($i40);
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    $i42 := $slt.i32(0, $i41);
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb29:
    assume $i42 == 1;
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    $i43 := 0;
    goto $bb32;

  $bb32:
    call $p44, $i45, $i46, $i47, $i48, $p49, $i50, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i43, vslice_dummy_var_35 := xpc_die_deactivate_loop_$bb32($p44, $i45, $i46, $i47, $i48, $p49, $i50, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i43, vslice_dummy_var_35);
    goto $bb32_last;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(272, 1)));
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    $i45 := $sext.i16.i32($i43);
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i32.i16($i45);
    call {:si_unique_call 433} $i47 := devirtbounce.1($p44, $i46);
    call {:si_unique_call 434} {:cexpr "tmp___0"} boogie_si_record_i32($i47);
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i52 := $sext.i16.i32($i43);
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    $i53 := $add.i32($i52, 1);
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    $i54 := $trunc.i32.i16($i53);
    call {:si_unique_call 436} {:cexpr "partid"} boogie_si_record_i16($i54);
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    $i55 := $sext.i16.i32($i54);
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    $i56 := $load.i16($M.1, xp_max_npartitions);
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    $i57 := $sext.i16.i32($i56);
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    $i58 := $slt.i32($i55, $i57);
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i58 == 1);
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb37:
    assume $i58 == 1;
    assume {:verifier.code 0} true;
    $i43 := $i54;
    goto $bb37_dummy;

  $bb34:
    assume $i48 == 1;
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    $p49 := $M.5;
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    $i50 := $sext.i16.i32($i43);
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 435} vslice_dummy_var_35 := _dev_info.ref.ref.i32($p49, .str.89, $i50);
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i33 == 1;
    goto $bb21;

  $bb6:
    assume $i5 == 1;
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb9;

  $bb9:
    call $p7, $i8, $p9, $p10, $i11, $i12, $i13, $i14, $p15, $i16, $i17, $i18, $p19, $p20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i6 := xpc_die_deactivate_loop_$bb9($p7, $i8, $p9, $p10, $i11, $i12, $i13, $i14, $p15, $i16, $i17, $i18, $p19, $p20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i6);
    goto $bb9_last;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p7 := $M.3;
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    $i8 := $sext.i16.i64($i6);
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p7, $mul.ref($i8, 872));
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(272, 1)));
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    $i11 := $sext.i16.i32($i6);
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i16($i11);
    call {:si_unique_call 423} $i13 := devirtbounce.1($p10, $i12);
    call {:si_unique_call 424} {:cexpr "tmp"} boogie_si_record_i32($i13);
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb13;

  $bb13:
    assume !($i14 == 1);
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p7, $mul.ref($i8, 872)), $mul.ref(112, 1));
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.1, $p15);
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i21 := $sext.i16.i32($i6);
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    $i22 := $add.i32($i21, 1);
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i32.i16($i22);
    call {:si_unique_call 427} {:cexpr "partid"} boogie_si_record_i16($i23);
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    $i24 := $sext.i16.i32($i23);
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    $i25 := $load.i16($M.1, xp_max_npartitions);
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    $i26 := $sext.i16.i32($i25);
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    $i27 := $slt.i32($i24, $i26);
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i27 == 1);
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb17:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    $i6 := $i23;
    goto $bb17_dummy;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(128, 1)));
    call {:si_unique_call 425} devirtbounce.3($p19, $p9);
    goto SeqInstr_199, SeqInstr_200;

  SeqInstr_200:
    assume assertsPassed;
    goto SeqInstr_201;

  SeqInstr_201:
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(256, 1)));
    call {:si_unique_call 426} devirtbounce.3($p20, $p9);
    goto SeqInstr_202, SeqInstr_203;

  SeqInstr_203:
    assume assertsPassed;
    goto SeqInstr_204;

  SeqInstr_204:
    goto corral_source_split_1676;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    goto $bb16;

  SeqInstr_202:
    assume !assertsPassed;
    return;

  SeqInstr_199:
    assume !assertsPassed;
    return;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb12;

  SeqInstr_196:
    assume !assertsPassed;
    return;

  $bb2:
    assume $i1 == 1;
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb37_dummy:
    assume false;
    return;

  $bb32_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1717;

  $bb44_dummy:
    assume false;
    return;

  $bb23_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb17_dummy:
    assume false;
    return;

  $bb9_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1665;
}



const user_mode_vm: ref;

axiom user_mode_vm == $sub.ref(0, 317167);

procedure user_mode_vm($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation user_mode_vm($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 442} $i1 := user_mode($p0);
    call {:si_unique_call 443} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const user_mode: ref;

axiom user_mode == $sub.ref(0, 318199);

procedure user_mode($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation user_mode($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(136, 1));
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.1, $p1);
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    $i3 := $and.i64($i2, 3);
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const __const_udelay: ref;

axiom __const_udelay == $sub.ref(0, 319231);

procedure __const_udelay($i0: i64);
  free requires assertsPassed;



implementation __const_udelay($i0: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 444} {:cexpr "__const_udelay:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    return;
}



const xpc_setup_partitions_uv: ref;

axiom xpc_setup_partitions_uv == $sub.ref(0, 320263);

procedure xpc_setup_partitions_uv() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation xpc_setup_partitions_uv() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p3: ref;
  var $i4: i64;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i17: i16;
  var $i18: i32;
  var $i19: i1;
  var $i2: i16;
  var vslice_dummy_var_37: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 445} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    $i2 := 0;
    goto $bb1;

  $bb1:
    call $p3, $i4, $p6, $p7, $p8, $p9, $p12, $p13, $p14, $i15, $i16, $i17, $i18, $i19, $i2, vslice_dummy_var_37 := xpc_setup_partitions_uv_loop_$bb1($p0, $p1, $p3, $i4, $p6, $p7, $p8, $p9, $p12, $p13, $p14, $i15, $i16, $i17, $i18, $i19, $i2, vslice_dummy_var_37);
    goto $bb1_last;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p3 := $M.3;
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    $i4 := $sext.i16.i64($i2);
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref($i4, 872)), $mul.ref(576, 1));
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 296)), $mul.ref(40, 1));
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 447} __mutex_init($p8, .str.130, $p0);
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p7, $mul.ref(0, 296)), $mul.ref(208, 1));
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} vslice_dummy_var_37 := spinlock_check($p9);
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 296)), $mul.ref(208, 1)), $mul.ref(0, 1));
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 449} __raw_spin_lock_init($p13, .str.131, $p1);
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p7, $mul.ref(0, 296)), $mul.ref(284, 1));
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p14, 0);
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    $i15 := $sext.i16.i32($i2);
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    $i16 := $add.i32($i15, 1);
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i16($i16);
    call {:si_unique_call 450} {:cexpr "partid"} boogie_si_record_i16($i17);
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    $i18 := $sext.i16.i32($i17);
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    $i19 := $sle.i32($i18, 255);
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i19 == 1);
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb3:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    $i2 := $i17;
    goto $bb3_dummy;

  $bb3_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1766;
}



const xpc_teardown_partitions_uv: ref;

axiom xpc_teardown_partitions_uv == $sub.ref(0, 321295);

procedure xpc_teardown_partitions_uv();
  free requires assertsPassed;
  modifies $M.1, $M.28, assertsPassed;



implementation xpc_teardown_partitions_uv()
{
  var $p1: ref;
  var $i2: i64;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $i25: i16;
  var $i26: i32;
  var $i27: i1;
  var $i0: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    $i0 := 0;
    goto $bb1;

  $bb1:
    call $p1, $i2, $p4, $p5, $p6, $p7, $i8, $i9, $p10, $p11, $p12, $i13, $p14, $i15, $i16, $p17, $p18, $p19, $p20, $p21, $p22, $i23, $i24, $i25, $i26, $i27, $i0 := xpc_teardown_partitions_uv_loop_$bb1($p1, $i2, $p4, $p5, $p6, $p7, $i8, $i9, $p10, $p11, $p12, $i13, $p14, $i15, $i16, $p17, $p18, $p19, $p20, $p21, $p22, $i23, $i24, $i25, $i26, $i27, $i0);
    goto $bb1_last;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p1 := $M.3;
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    $i2 := $sext.i16.i64($i0);
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref($i2, 872)), $mul.ref(576, 1));
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 296)), $mul.ref(32, 1));
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i23 := $sext.i16.i32($i0);
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    $i24 := $add.i32($i23, 1);
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i32.i16($i24);
    call {:si_unique_call 458} {:cexpr "partid"} boogie_si_record_i16($i25);
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    $i26 := $sext.i16.i32($i25);
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    $i27 := $sle.i32($i26, 255);
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i27 == 1);
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    $i0 := $i25;
    goto $bb6_dummy;

  $bb3:
    assume $i9 == 1;
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 296)), $mul.ref(40, 1));
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 451} ldv_mutex_lock_60($p10);
    goto SeqInstr_205, SeqInstr_206;

  SeqInstr_206:
    assume assertsPassed;
    goto SeqInstr_207;

  SeqInstr_207:
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p5, $mul.ref(0, 296)), $mul.ref(208, 1));
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} $p12 := spinlock_check($p11);
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 453} $i13 := _raw_spin_lock_irqsave($p12);
    call {:si_unique_call 454} {:cexpr "irq_flags"} boogie_si_record_i64($i13);
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p5, $mul.ref(0, 296)), $mul.ref(280, 1));
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.1, $p14);
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i15, $sub.i32(0, 2));
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p5, $mul.ref(0, 296)), $mul.ref(280, 1));
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p17, $i16);
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p5, $mul.ref(0, 296)), $mul.ref(208, 1));
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 455} spin_unlock_irqrestore($p18, $i13);
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p5, $mul.ref(0, 296)), $mul.ref(32, 1));
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.1, $p19);
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 456} kfree($p20);
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p5, $mul.ref(0, 296)), $mul.ref(32, 1));
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p21, $0.ref);
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p5, $mul.ref(0, 296)), $mul.ref(40, 1));
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 457} ldv_mutex_unlock_61($p22);
    goto SeqInstr_208, SeqInstr_209;

  SeqInstr_209:
    assume assertsPassed;
    goto SeqInstr_210;

  SeqInstr_210:
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_208:
    assume !assertsPassed;
    return;

  SeqInstr_205:
    assume !assertsPassed;
    return;

  $bb6_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1792;
}



const xpc_process_activate_IRQ_rcvd_uv: ref;

axiom xpc_process_activate_IRQ_rcvd_uv == $sub.ref(0, 322327);

procedure xpc_process_activate_IRQ_rcvd_uv();
  free requires assertsPassed;
  modifies $M.23, $M.1, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $CurrAddr, $M.28, $M.0, $M.2, assertsPassed;



implementation xpc_process_activate_IRQ_rcvd_uv()
{
  var $p0: ref;
  var $i1: i64;
  var $p4: ref;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i12: i1;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i8;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $i32: i8;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $i36: i8;
  var $i37: i32;
  var $i38: i1;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $i42: i8;
  var $i43: i32;
  var $i44: i1;
  var $i45: i32;
  var $i46: i1;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $p51: ref;
  var $i52: i64;
  var $i53: i32;
  var $i54: i1;
  var $i55: i64;
  var $i13: i64;
  var $i57: i32;
  var $i58: i32;
  var $i59: i16;
  var $i60: i32;
  var $i61: i1;
  var $i2: i64;
  var $i3: i16;
  var $i62: i64;
  var $i56: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 459} $p0 := spinlock_check(xpc_activate_IRQ_rcvd_lock);
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 460} $i1 := _raw_spin_lock_irqsave($p0);
    call {:si_unique_call 461} {:cexpr "irq_flags"} boogie_si_record_i64($i1);
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    $i2, $i3 := $i1, 0;
    goto $bb1;

  $bb1:
    call $p4, $i5, $p6, $p7, $p8, $p9, $i10, $i11, $i12, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $p22, $p23, $p24, $i25, $p26, $p27, $p28, $i29, $i30, $p31, $i32, $i33, $i34, $p35, $i36, $i37, $i38, $i39, $i40, $p41, $i42, $i43, $i44, $i45, $i46, $p47, $p48, $p49, $i50, $p51, $i52, $i53, $i54, $i55, $i13, $i57, $i58, $i59, $i60, $i61, $i2, $i3, $i62 := xpc_process_activate_IRQ_rcvd_uv_loop_$bb1($p4, $i5, $p6, $p7, $p8, $p9, $i10, $i11, $i12, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $p22, $p23, $p24, $i25, $p26, $p27, $p28, $i29, $i30, $p31, $i32, $i33, $i34, $p35, $i36, $i37, $i38, $i39, $i40, $p41, $i42, $i43, $i44, $i45, $i46, $p47, $p48, $p49, $i50, $p51, $i52, $i53, $i54, $i55, $i13, $i57, $i58, $i59, $i60, $i61, $i2, $i3, $i62);
    goto $bb1_last;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p4 := $M.3;
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    $i5 := $sext.i16.i64($i3);
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p4, $mul.ref($i5, 872));
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref($i5, 872)), $mul.ref(576, 1));
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 296)), $mul.ref(285, 1));
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.1, $p9);
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i14 := $M.23;
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32($i14, 1);
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    $M.23 := $i15;
    call {:si_unique_call 463} {:cexpr "xpc_activate_IRQ_rcvd"} boogie_si_record_i32($i15);
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    $i16 := $M.23;
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i16, 0);
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    $i18 := $zext.i1.i32($i17);
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i18);
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 464} $i20 := ldv__builtin_expect($i19, 0);
    call {:si_unique_call 465} {:cexpr "tmp___0"} boogie_si_record_i64($i20);
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p4, $mul.ref($i5, 872)), $mul.ref(576, 1));
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 296)), $mul.ref(285, 1));
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.1, $p24);
    call {:si_unique_call 467} {:cexpr "act_state_req"} boogie_si_record_i8($i25);
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p4, $mul.ref($i5, 872)), $mul.ref(576, 1));
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 296)), $mul.ref(285, 1));
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p28, 0);
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} spin_unlock_irqrestore(xpc_activate_IRQ_rcvd_lock, $i2);
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i25);
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 1);
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 475} $p51 := spinlock_check(xpc_activate_IRQ_rcvd_lock);
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 476} $i52 := _raw_spin_lock_irqsave($p51);
    call {:si_unique_call 477} {:cexpr "irq_flags"} boogie_si_record_i64($i52);
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    $i53 := $M.23;
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i53, 0);
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    $i55 := $i52;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i13 := $i52;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    $i57 := $sext.i16.i32($i3);
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    $i58 := $add.i32($i57, 1);
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    $i59 := $trunc.i32.i16($i58);
    call {:si_unique_call 462} {:cexpr "partid"} boogie_si_record_i16($i59);
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    $i60 := $sext.i16.i32($i59);
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    $i61 := $sle.i32($i60, 255);
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    $i62 := $i13;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    $i56 := $i62;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 478} spin_unlock_irqrestore(xpc_activate_IRQ_rcvd_lock, $i56);
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    return;

  $bb34:
    assume $i61 == 1;
    assume {:verifier.code 0} true;
    $i2, $i3 := $i13, $i59;
    goto $bb34_dummy;

  $bb30:
    assume $i54 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    $i56 := $i55;
    goto $bb32;

  $bb11:
    assume $i30 == 1;
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p4, $mul.ref($i5, 872)), $mul.ref(112, 1));
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.1, $p31);
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i32($i32);
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 0);
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i34 == 1);
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p4, $mul.ref($i5, 872)), $mul.ref(112, 1));
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.1, $p35);
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i36);
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 4);
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i38 == 1);
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i25);
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i39, 2);
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i40 == 1);
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i25);
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i45, 3);
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i46 == 1);
    call {:si_unique_call 474} devirtbounce.7(0, .str.114, 463, 12);
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    call xpc_process_activate_IRQ_rcvd_uv_loop_$bb28();
    goto $bb28_last;

  $bb25:
    assume $i46 == 1;
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p4, $mul.ref($i5, 872)), $mul.ref(576, 1));
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p48, $mul.ref(0, 296)), $mul.ref(288, 1));
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.1, $p49);
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 473} xpc_deactivate_partition(460, $p6, $i50);
    goto SeqInstr_217, SeqInstr_218;

  SeqInstr_218:
    assume assertsPassed;
    goto SeqInstr_219;

  SeqInstr_219:
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb29;

  SeqInstr_217:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i40 == 1;
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p4, $mul.ref($i5, 872)), $mul.ref(112, 1));
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    $i42 := $load.i8($M.1, $p41);
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i32($i42);
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i43, 0);
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i44 == 1);
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 472} xpc_deactivate_partition(457, $p6, 21);
    goto SeqInstr_214, SeqInstr_215;

  SeqInstr_215:
    assume assertsPassed;
    goto SeqInstr_216;

  SeqInstr_216:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  SeqInstr_214:
    assume !assertsPassed;
    return;

  $bb21:
    assume $i44 == 1;
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 471} xpc_activate_partition($p6);
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb16:
    assume $i38 == 1;
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 470} xpc_deactivate_partition(451, $p6, 21);
    goto SeqInstr_211, SeqInstr_212;

  SeqInstr_212:
    assume assertsPassed;
    goto SeqInstr_213;

  SeqInstr_213:
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    goto $bb18;

  SeqInstr_211:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i34 == 1;
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 469} xpc_activate_partition($p6);
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb7:
    assume $i21 == 1;
    call {:si_unique_call 466} devirtbounce.7(0, .str.114, 441, 12);
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    call xpc_process_activate_IRQ_rcvd_uv_loop_$bb9();
    goto $bb9_last;

  $bb3:
    assume $i12 == 1;
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    $i13 := $i2;
    goto $bb5;

  $bb28_dummy:
    assume false;
    return;

  $bb28_last:
    assume {:verifier.code 0} true;
    goto $bb28_dummy;

  $bb9_dummy:
    assume false;
    return;

  $bb9_last:
    assume {:verifier.code 0} true;
    goto $bb9_dummy;

  $bb34_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1837;
}



const xpc_get_partition_rsvd_page_pa_uv: ref;

axiom xpc_get_partition_rsvd_page_pa_uv == $sub.ref(0, 323359);

procedure xpc_get_partition_rsvd_page_pa_uv($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation xpc_get_partition_rsvd_page_pa_uv($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i8: i1;
  var $i9: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 479} $i5 := uv_bios_reserved_page_pa($i4, $p1, $p2, $p3);
    call {:si_unique_call 480} {:cexpr "status"} boogie_si_record_i64($i5);
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i5, 1);
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := 62;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i7 := $i9;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    $i9 := 57;
    goto $bb6;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;
}



const xpc_setup_rsvd_page_uv: ref;

axiom xpc_setup_rsvd_page_uv == $sub.ref(0, 324391);

procedure xpc_setup_rsvd_page_uv($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.24, $M.1;



implementation xpc_setup_rsvd_page_uv($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i64;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    $p1 := $M.3;
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.1, sn_partition_id);
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref($i2, 872)), $mul.ref(576, 1));
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 296)), $mul.ref(8, 1));
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    $M.24 := $p6;
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    $p7 := $M.24;
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 481} $i9 := uv_gpa($p8);
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_1965;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p12, $i9);
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    $p13 := $M.16;
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.1, $p14);
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 482} $i16 := uv_gpa($p15);
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p19, $i16);
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const xpc_allow_hb_uv: ref;

axiom xpc_allow_hb_uv == $sub.ref(0, 325423);

procedure xpc_allow_hb_uv($i0: i16);
  free requires assertsPassed;



implementation xpc_allow_hb_uv($i0: i16)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 483} {:cexpr "xpc_allow_hb_uv:arg:partid"} boogie_si_record_i16($i0);
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    return;
}



const xpc_disallow_hb_uv: ref;

axiom xpc_disallow_hb_uv == $sub.ref(0, 326455);

procedure xpc_disallow_hb_uv($i0: i16);
  free requires assertsPassed;



implementation xpc_disallow_hb_uv($i0: i16)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 484} {:cexpr "xpc_disallow_hb_uv:arg:partid"} boogie_si_record_i16($i0);
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    return;
}



const xpc_disallow_all_hbs_uv: ref;

axiom xpc_disallow_all_hbs_uv == $sub.ref(0, 327487);

procedure xpc_disallow_all_hbs_uv();
  free requires assertsPassed;



implementation xpc_disallow_all_hbs_uv()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    return;
}



const xpc_increment_heartbeat_uv: ref;

axiom xpc_increment_heartbeat_uv == $sub.ref(0, 328519);

procedure xpc_increment_heartbeat_uv();
  free requires assertsPassed;
  modifies $M.1;



implementation xpc_increment_heartbeat_uv()
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    $p0 := $M.24;
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.1, $p1);
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i2, 1);
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    $p4 := $M.24;
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p5, $i3);
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    return;
}



const xpc_offline_heartbeat_uv: ref;

axiom xpc_offline_heartbeat_uv == $sub.ref(0, 329551);

procedure xpc_offline_heartbeat_uv();
  free requires assertsPassed;
  modifies $M.1;



implementation xpc_offline_heartbeat_uv()
{
  var $p0: ref;
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} xpc_increment_heartbeat_uv();
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    $p0 := $M.24;
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p1, 1);
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    return;
}



const xpc_online_heartbeat_uv: ref;

axiom xpc_online_heartbeat_uv == $sub.ref(0, 330583);

procedure xpc_online_heartbeat_uv();
  free requires assertsPassed;
  modifies $M.1;



implementation xpc_online_heartbeat_uv()
{
  var $p0: ref;
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 486} xpc_increment_heartbeat_uv();
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    $p0 := $M.24;
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p1, 0);
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    return;
}



const xpc_heartbeat_init_uv: ref;

axiom xpc_heartbeat_init_uv == $sub.ref(0, 331615);

procedure xpc_heartbeat_init_uv();
  free requires assertsPassed;
  modifies $M.1;



implementation xpc_heartbeat_init_uv()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    $p0 := $M.24;
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p1, 1);
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    $p2 := $M.24;
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p3, 0);
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    return;
}



const xpc_heartbeat_exit_uv: ref;

axiom xpc_heartbeat_exit_uv == $sub.ref(0, 332647);

procedure xpc_heartbeat_exit_uv();
  free requires assertsPassed;
  modifies $M.1;



implementation xpc_heartbeat_exit_uv()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 487} xpc_offline_heartbeat_uv();
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    return;
}



const xpc_get_remote_heartbeat_uv: ref;

axiom xpc_get_remote_heartbeat_uv == $sub.ref(0, 333679);

procedure xpc_get_remote_heartbeat_uv($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation xpc_get_remote_heartbeat_uv($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i32;
  var $i10: i1;
  var $p13: ref;
  var $i14: i64;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p24: ref;
  var $i25: i64;
  var $p26: ref;
  var $i22: i32;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(576, 1));
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 296)), $mul.ref(8, 1));
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} $i5 := uv_gpa($p4);
    call {:si_unique_call 489} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, xp_remote_memcpy);
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 296)), $mul.ref(0, 1));
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.1, $p7);
    call {:si_unique_call 490} $i9 := devirtbounce.18($p6, $i5, $i8, 16);
    call {:si_unique_call 491} {:cexpr "ret"} boogie_si_record_i32($i9);
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 296)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    $i14 := $load.i64($M.1, $p13);
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(24, 1));
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    $i16 := $load.i64($M.1, $p15);
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i14, $i16);
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 296)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    $i25 := $load.i64($M.1, $p24);
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(24, 1));
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p26, $i25);
    assume {:verifier.code 0} true;
    $i22 := $i9;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    $i11 := $i22;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb5:
    assume $i17 == 1;
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 296)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    $i20 := $load.i64($M.1, $p19);
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    $i21 := $eq.i64($i20, 0);
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb7;

  $bb8:
    assume $i21 == 1;
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    $i22 := 26;
    goto $bb10;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    $i11 := $i9;
    goto $bb3;
}



const xpc_request_partition_activation_uv: ref;

axiom xpc_request_partition_activation_uv == $sub.ref(0, 334711);

procedure xpc_request_partition_activation_uv($p0: ref, $i1: i64, $i2: i32);
  free requires assertsPassed;
  modifies $M.1, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.23, $CurrAddr, $M.28, assertsPassed, $M.0, $M.2;



implementation xpc_request_partition_activation_uv($p0: ref, $i1: i64, $i2: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i16;
  var $p6: ref;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i8;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i64;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i8;
  var $i52: i32;
  var $i53: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 493} {:cexpr "xpc_request_partition_activation_uv:arg:remote_rp_gpa"} boogie_si_record_i64($i1);
    call {:si_unique_call 494} {:cexpr "xpc_request_partition_activation_uv:arg:nasid"} boogie_si_record_i32($i2);
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(16, 1));
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.1, $p4);
    call {:si_unique_call 495} {:cexpr "partid"} boogie_si_record_i16($i5);
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    $p6 := $M.3;
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    $i7 := $sext.i16.i64($i5);
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p6, $mul.ref($i7, 872));
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p6, $mul.ref($i7, 872)), $mul.ref(16, 1));
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p9, $i1);
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(24, 1));
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.1, $p10);
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p6, $mul.ref($i7, 872)), $mul.ref(8, 1));
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p12, $i11);
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    $i16 := $load.i64($M.1, $p15);
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p6, $mul.ref($i7, 872)), $mul.ref(576, 1));
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 296)), $mul.ref(0, 1));
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p19, $i16);
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    $i23 := $load.i64($M.1, $p22);
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p6, $mul.ref($i7, 872)), $mul.ref(576, 1));
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 296)), $mul.ref(24, 1));
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p26, $i23);
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p6, $mul.ref($i7, 872)), $mul.ref(576, 1));
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 296)), $mul.ref(284, 1));
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.1, $p29);
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i32($i30);
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i31, 0);
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p6, $mul.ref($i7, 872)), $mul.ref(112, 1));
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    $i51 := $load.i8($M.1, $p50);
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    $i52 := $zext.i8.i32($i51);
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i52, 0);
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i53 == 1;
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 498} xpc_send_local_activate_IRQ_uv($p8, 1);
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i32 == 1;
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    $p33 := $M.14;
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} $i35 := uv_gpa($p34);
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p36, $i35);
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    $p37 := $M.14;
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    $i41 := $load.i64($M.1, $p40);
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p42, $i41);
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    $p43 := $M.14;
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p43, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p45, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    $i47 := $load.i64($M.1, $p46);
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p48, $i47);
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p3);
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 497} xpc_send_activate_IRQ_part_uv($p8, $p49, 40, 1);
    goto SeqInstr_220, SeqInstr_221;

  SeqInstr_221:
    assume assertsPassed;
    goto SeqInstr_222;

  SeqInstr_222:
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_220:
    assume !assertsPassed;
    return;
}



const xpc_request_partition_reactivation_uv: ref;

axiom xpc_request_partition_reactivation_uv == $sub.ref(0, 335743);

procedure xpc_request_partition_reactivation_uv($p0: ref);
  free requires assertsPassed;
  modifies $M.23, $M.1;



implementation xpc_request_partition_reactivation_uv($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} xpc_send_local_activate_IRQ_uv($p0, 1);
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    return;
}



const xpc_request_partition_deactivation_uv: ref;

axiom xpc_request_partition_deactivation_uv == $sub.ref(0, 336775);

procedure xpc_request_partition_deactivation_uv($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $CurrAddr, $M.23, $M.28, assertsPassed, $M.0, $M.2;



implementation xpc_request_partition_deactivation_uv($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} $p1 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(576, 1));
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 296)), $mul.ref(284, 1));
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.1, $p4);
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 4);
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(576, 1));
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 296)), $mul.ref(284, 1));
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.1, $p10);
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb3;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(116, 1));
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.1, $p14);
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p16, $i15);
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p1);
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} xpc_send_activate_IRQ_part_uv($p0, $p17, 24, 2);
    goto SeqInstr_223, SeqInstr_224;

  SeqInstr_224:
    assume assertsPassed;
    goto SeqInstr_225;

  SeqInstr_225:
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_223:
    assume !assertsPassed;
    return;
}



const xpc_cancel_partition_deactivation_request_uv: ref;

axiom xpc_cancel_partition_deactivation_request_uv == $sub.ref(0, 337807);

procedure xpc_cancel_partition_deactivation_request_uv($p0: ref);
  free requires assertsPassed;



implementation xpc_cancel_partition_deactivation_request_uv($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    return;
}



const xpc_setup_ch_structures_uv: ref;

axiom xpc_setup_ch_structures_uv == $sub.ref(0, 338839);

procedure xpc_setup_ch_structures_uv($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation xpc_setup_ch_structures_uv($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i8;
  var $i16: i32;
  var $i17: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(364, 1));
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.1, $p1);
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    $i4 := $sgt.i32($i3, 0);
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb4;

  $bb4:
    call $p6, $p7, $i8, $p10, $p11, $p12, $p13, $i14, $i15, $i16, $i17, $i5 := xpc_setup_ch_structures_uv_loop_$bb4($p0, $p1, $p6, $p7, $i8, $p10, $p11, $p12, $p13, $i14, $i15, $i16, $i17, $i5);
    goto $bb4_last;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(376, 1));
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i5);
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p7, $mul.ref($i8, 720)), $mul.ref(432, 1));
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 216)), $mul.ref(24, 1));
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 502} xpc_init_fifo_uv($p12);
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p11, $mul.ref(0, 216)), $mul.ref(120, 1));
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} xpc_init_fifo_uv($p13);
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    $i14 := $add.i32($i5, 1);
    call {:si_unique_call 504} {:cexpr "ch_number"} boogie_si_record_i32($i14);
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.1, $p1);
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    $i17 := $sgt.i32($i16, $i14);
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i17 == 1);
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    $i5 := $i14;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2153;
}



const xpc_teardown_ch_structures_uv: ref;

axiom xpc_teardown_ch_structures_uv == $sub.ref(0, 339871);

procedure xpc_teardown_ch_structures_uv($p0: ref);
  free requires assertsPassed;



implementation xpc_teardown_ch_structures_uv($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    return;
}



const xpc_make_first_contact_uv: ref;

axiom xpc_make_first_contact_uv == $sub.ref(0, 340903);

procedure xpc_make_first_contact_uv($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.1, $CurrAddr, $M.23, $M.28, assertsPassed, $M.0, $M.2;



implementation xpc_make_first_contact_uv($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i24;
  var $i17: i24;
  var $i18: i24;
  var $p19: ref;
  var $p20: ref;
  var $i21: i8;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $i27: i64;
  var $p28: ref;
  var $i29: i64;
  var $i30: i64;
  var $i31: i64;
  var $i32: i16;
  var $i33: i32;
  var $p36: ref;
  var $i37: i8;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $i41: i32;
  var $i43: i8;
  var $i44: i32;
  var $i45: i1;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i8;
  var $i50: i32;
  var $i51: i1;
  var $i42: i32;
  var vslice_dummy_var_38: i32;
  var vslice_dummy_var_39: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 505} $p1 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 506} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} xpc_send_activate_IRQ_part_uv($p0, $p3, 16, 0);
    goto SeqInstr_226, SeqInstr_227;

  SeqInstr_227:
    assume assertsPassed;
    goto SeqInstr_228;

  SeqInstr_228:
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(576, 1));
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 296)), $mul.ref(284, 1));
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.1, $p6);
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 2);
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i42 := 0;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    $r := $i42;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p10, $p11, $p12, $p13, $p14, $p15, $i16, $i17, $i18, $p19, $p20, $i21, $i22, $i23, $i24, $i25, $p26, $i27, $p28, $i29, $i30, $i31, $i32, $i33, $p36, $i37, $i38, $i39, $i43, $i44, $i45, $p46, $p47, $p48, $i49, $i50, $i51, vslice_dummy_var_38, vslice_dummy_var_39 := xpc_make_first_contact_uv_loop_$bb4($p0, $p2, $p6, $p10, $p11, $p12, $p13, $p14, $p15, $i16, $i17, $i18, $p19, $p20, $i21, $i22, $i23, $i24, $i25, $p26, $i27, $p28, $i29, $i30, $i31, $i32, $i33, $p36, $i37, $i38, $i39, $i43, $i44, $i45, $p46, $p47, $p48, $i49, $i50, $i51, vslice_dummy_var_38, vslice_dummy_var_39);
    goto $bb4_last;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p47, $mul.ref(0, 296)), $mul.ref(284, 1));
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    $i49 := $load.i8($M.1, $p48);
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i32($i49);
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i50, 3);
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i51 == 1);
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb15:
    assume $i51 == 1;
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p10, .str);
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p11, .str.128);
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p12, .str.114);
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p13, .str.129);
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    $i16 := $load.i24($M.12, $p15);
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    $i17 := $and.i24($i16, $sub.i24(0, 262144));
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    $i18 := $or.i24($i17, 1109);
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p15, $i18);
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p19, 0);
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.13, $p20);
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i64($i21);
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    $i23 := $and.i64($i22, 1);
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 508} $i24 := ldv__builtin_expect($i23, 0);
    call {:si_unique_call 509} {:cexpr "tmp"} boogie_si_record_i64($i24);
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} vslice_dummy_var_39 := msleep_interruptible(250);
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(112, 1));
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.1, $p36);
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i32($i37);
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 4);
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i43 := $load.i8($M.1, $p6);
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i32($i43);
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 2);
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i45 == 1);
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i45 == 1;
    goto $bb13_dummy;

  $bb9:
    assume $i39 == 1;
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(116, 1));
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.1, $p40);
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    $i42 := $i41;
    goto $bb11;

  $bb6:
    assume $i25 == 1;
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    $p26 := $M.5;
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p0);
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    $p28 := $M.3;
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    $i30 := $sub.i64($i27, $i29);
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    $i31 := $sdiv.i64($i30, 896);
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i64.i16($i31);
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    $i33 := $sext.i16.i32($i32);
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 510} vslice_dummy_var_38 := __dynamic_dev_dbg.ref.ref.ref.i32($p2, $p26, .str.129, $i33);
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_226:
    assume !assertsPassed;
    return;

  $bb13_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(576, 1));
    goto corral_source_split_2186;
}



const xpc_get_chctl_all_flags_uv: ref;

axiom xpc_get_chctl_all_flags_uv == $sub.ref(0, 341935);

procedure xpc_get_chctl_all_flags_uv($p0: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation xpc_get_chctl_all_flags_uv($p0: ref) returns ($r: i64)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(392, 1));
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} $p3 := spinlock_check($p2);
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} $i4 := _raw_spin_lock_irqsave($p3);
    call {:si_unique_call 515} {:cexpr "irq_flags"} boogie_si_record_i64($i4);
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(384, 1));
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p1);
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p5);
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.1;
    cmdloc_dummy_var_1 := $M.1;
    call {:si_unique_call 516} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p6, $p7, 8, $zext.i32.i64(8), 0 == 1);
    $M.1 := cmdloc_dummy_var_2;
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.1, $p8);
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(392, 1));
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} spin_unlock_irqrestore($p13, $i4);
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p1);
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    $i15 := $load.i64($M.1, $p14);
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(384, 1));
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p12, 0);
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const xpc_send_chctl_closerequest_uv: ref;

axiom xpc_send_chctl_closerequest_uv == $sub.ref(0, 342967);

procedure xpc_send_chctl_closerequest_uv($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $CurrAddr, $M.23, $M.28, assertsPassed, $M.0, $M.2;



implementation xpc_send_chctl_closerequest_uv($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i16;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 518} $p2 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(92, 1));
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.1, $p3);
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p5, $i4);
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(84, 1));
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.1, $p6);
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(20, 1));
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p8, $i7);
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p2);
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} xpc_send_activate_IRQ_ch_uv($p0, $p1, $p9, 24, 3);
    goto SeqInstr_229, SeqInstr_230;

  SeqInstr_230:
    assume assertsPassed;
    goto SeqInstr_231;

  SeqInstr_231:
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_229:
    assume !assertsPassed;
    return;
}



const xpc_send_chctl_closereply_uv: ref;

axiom xpc_send_chctl_closereply_uv == $sub.ref(0, 343999);

procedure xpc_send_chctl_closereply_uv($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $CurrAddr, $M.23, $M.28, assertsPassed, $M.0, $M.2;



implementation xpc_send_chctl_closereply_uv($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i16;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 520} $p2 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(92, 1));
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.1, $p3);
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p5, $i4);
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p2);
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 521} xpc_send_activate_IRQ_ch_uv($p0, $p1, $p6, 24, 4);
    goto SeqInstr_232, SeqInstr_233;

  SeqInstr_233:
    assume assertsPassed;
    goto SeqInstr_234;

  SeqInstr_234:
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_232:
    assume !assertsPassed;
    return;
}



const xpc_send_chctl_openrequest_uv: ref;

axiom xpc_send_chctl_openrequest_uv == $sub.ref(0, 345031);

procedure xpc_send_chctl_openrequest_uv($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $CurrAddr, $M.23, $M.28, assertsPassed, $M.0, $M.2;



implementation xpc_send_chctl_openrequest_uv($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i16;
  var $p5: ref;
  var $p6: ref;
  var $i7: i16;
  var $p8: ref;
  var $p9: ref;
  var $i10: i16;
  var $p11: ref;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 522} $p2 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(92, 1));
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.1, $p3);
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p5, $i4);
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(94, 1));
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    $i7 := $load.i16($M.1, $p6);
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(18, 1));
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p8, $i7);
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(96, 1));
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    $i10 := $load.i16($M.1, $p9);
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(20, 1));
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p11, $i10);
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p2);
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 523} xpc_send_activate_IRQ_ch_uv($p0, $p1, $p12, 24, 5);
    goto SeqInstr_235, SeqInstr_236;

  SeqInstr_236:
    assume assertsPassed;
    goto SeqInstr_237;

  SeqInstr_237:
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_235:
    assume !assertsPassed;
    return;
}



const xpc_send_chctl_openreply_uv: ref;

axiom xpc_send_chctl_openreply_uv == $sub.ref(0, 346063);

procedure xpc_send_chctl_openreply_uv($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $CurrAddr, $M.23, $M.28, assertsPassed, $M.0, $M.2;



implementation xpc_send_chctl_openreply_uv($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i16;
  var $p5: ref;
  var $p6: ref;
  var $i7: i16;
  var $p8: ref;
  var $p9: ref;
  var $i10: i16;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $p16: ref;
  var $p17: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 524} $p2 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(92, 1));
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.1, $p3);
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p5, $i4);
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(96, 1));
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    $i7 := $load.i16($M.1, $p6);
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(20, 1));
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p8, $i7);
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(98, 1));
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    $i10 := $load.i16($M.1, $p9);
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(18, 1));
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p11, $i10);
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    $p12 := $M.15;
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.1, $p13);
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 525} $i15 := uv_gpa($p14);
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p16, $i15);
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p2);
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 526} xpc_send_activate_IRQ_ch_uv($p0, $p1, $p17, 32, 6);
    goto SeqInstr_238, SeqInstr_239;

  SeqInstr_239:
    assume assertsPassed;
    goto SeqInstr_240;

  SeqInstr_240:
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_238:
    assume !assertsPassed;
    return;
}



const xpc_send_chctl_opencomplete_uv: ref;

axiom xpc_send_chctl_opencomplete_uv == $sub.ref(0, 347095);

procedure xpc_send_chctl_opencomplete_uv($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $CurrAddr, $M.23, $M.28, assertsPassed, $M.0, $M.2;



implementation xpc_send_chctl_opencomplete_uv($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i16;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 527} $p2 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(92, 1));
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.1, $p3);
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p5, $i4);
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p2);
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} xpc_send_activate_IRQ_ch_uv($p0, $p1, $p6, 24, 7);
    goto SeqInstr_241, SeqInstr_242;

  SeqInstr_242:
    assume assertsPassed;
    goto SeqInstr_243;

  SeqInstr_243:
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_241:
    assume !assertsPassed;
    return;
}



const xpc_process_msg_chctl_flags_uv: ref;

axiom xpc_process_msg_chctl_flags_uv == $sub.ref(0, 348127);

procedure xpc_process_msg_chctl_flags_uv($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.1, $CurrAddr, $M.0, $M.2, $M.23, $M.28, assertsPassed;



implementation xpc_process_msg_chctl_flags_uv($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 529} {:cexpr "xpc_process_msg_chctl_flags_uv:arg:ch_number"} boogie_si_record_i32($i1);
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(376, 1));
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.1, $p2);
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i1);
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p3, $mul.ref($i4, 720));
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 530} xpc_msgqueue_ref($p5);
    goto SeqInstr_244, SeqInstr_245;

  SeqInstr_245:
    assume assertsPassed;
    goto SeqInstr_246;

  SeqInstr_246:
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 531} $i6 := xpc_n_of_deliverable_payloads_uv($p5);
    call {:si_unique_call 532} {:cexpr "ndeliverable_payloads"} boogie_si_record_i32($i6);
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    $i7 := $sgt.i32($i6, 0);
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 534} xpc_msgqueue_deref($p5);
    goto SeqInstr_250, SeqInstr_251;

  SeqInstr_251:
    assume assertsPassed;
    goto SeqInstr_252;

  SeqInstr_252:
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_250:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref($i4, 720)), $mul.ref(80, 1));
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.1, $p8);
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 1024);
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb3;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref($i4, 720)), $mul.ref(80, 1));
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.1, $p12);
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, 512);
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb3;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 533} xpc_activate_kthreads($p5, $i6);
    goto SeqInstr_247, SeqInstr_248;

  SeqInstr_248:
    assume assertsPassed;
    goto SeqInstr_249;

  SeqInstr_249:
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_247:
    assume !assertsPassed;
    return;

  SeqInstr_244:
    assume !assertsPassed;
    return;
}



const xpc_save_remote_msgqueue_pa_uv: ref;

axiom xpc_save_remote_msgqueue_pa_uv == $sub.ref(0, 349159);

procedure xpc_save_remote_msgqueue_pa_uv($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation xpc_save_remote_msgqueue_pa_uv($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} {:cexpr "xpc_save_remote_msgqueue_pa_uv:arg:gru_mq_desc_gpa"} boogie_si_record_i64($i1);
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(432, 1));
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 216)), $mul.ref(0, 1));
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 536} $i7 := xpc_cache_remote_gru_mq_desc_uv($p6, $i1);
    call {:si_unique_call 537} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const xpc_setup_msg_structures_uv: ref;

axiom xpc_setup_msg_structures_uv == $sub.ref(0, 350191);

procedure xpc_setup_msg_structures_uv($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation xpc_setup_msg_structures_uv($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(432, 1));
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} $p3 := kmalloc(32, 208);
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 216)), $mul.ref(0, 1));
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p4, $p3);
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 216)), $mul.ref(0, 1));
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} $i10 := xpc_allocate_send_msg_slot_uv($p0);
    call {:si_unique_call 540} {:cexpr "ret"} boogie_si_record_i32($i10);
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i18 := $i10;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    $i9 := $i18;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} $i12 := xpc_allocate_recv_msg_slot_uv($p0);
    call {:si_unique_call 542} {:cexpr "ret"} boogie_si_record_i32($i12);
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i18 := $i12;
    goto $bb10;

  $bb7:
    assume $i13 == 1;
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 216)), $mul.ref(8, 1));
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.1, $p14);
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 543} kfree($p16);
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 216)), $mul.ref(24, 1));
    goto corral_source_split_2398;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} xpc_init_fifo_uv($p17);
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    $i9 := 13;
    goto $bb3;
}



const xpc_teardown_msg_structures_uv: ref;

axiom xpc_teardown_msg_structures_uv == $sub.ref(0, 351223);

procedure xpc_teardown_msg_structures_uv($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation xpc_teardown_msg_structures_uv($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(432, 1));
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 216)), $mul.ref(0, 1));
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 545} kfree($p4);
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 216)), $mul.ref(0, 1));
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p5, $0.ref);
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(80, 1));
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.1, $p6);
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 128);
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 216)), $mul.ref(24, 1));
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 546} xpc_init_fifo_uv($p10);
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 216)), $mul.ref(8, 1));
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.1, $p11);
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 547} kfree($p13);
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 216)), $mul.ref(120, 1));
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} xpc_init_fifo_uv($p14);
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 216)), $mul.ref(16, 1));
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.1, $p15);
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 549} kfree($p16);
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const xpc_indicate_partition_engaged_uv: ref;

axiom xpc_indicate_partition_engaged_uv == $sub.ref(0, 352255);

procedure xpc_indicate_partition_engaged_uv($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $CurrAddr, $M.23, $M.28, assertsPassed, $M.0, $M.2;



implementation xpc_indicate_partition_engaged_uv($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} $p1 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 551} xpc_send_activate_IRQ_part_uv($p0, $p2, 16, 8);
    goto SeqInstr_253, SeqInstr_254;

  SeqInstr_254:
    assume assertsPassed;
    goto SeqInstr_255;

  SeqInstr_255:
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_253:
    assume !assertsPassed;
    return;
}



const xpc_indicate_partition_disengaged_uv: ref;

axiom xpc_indicate_partition_disengaged_uv == $sub.ref(0, 353287);

procedure xpc_indicate_partition_disengaged_uv($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $CurrAddr, $M.23, $M.28, assertsPassed, $M.0, $M.2;



implementation xpc_indicate_partition_disengaged_uv($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} $p1 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 553} xpc_send_activate_IRQ_part_uv($p0, $p2, 16, 9);
    goto SeqInstr_256, SeqInstr_257;

  SeqInstr_257:
    assume assertsPassed;
    goto SeqInstr_258;

  SeqInstr_258:
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_256:
    assume !assertsPassed;
    return;
}



const xpc_assume_partition_disengaged_uv: ref;

axiom xpc_assume_partition_disengaged_uv == $sub.ref(0, 354319);

procedure xpc_assume_partition_disengaged_uv($i0: i16);
  free requires assertsPassed;
  modifies $M.1;



implementation xpc_assume_partition_disengaged_uv($i0: i16)
{
  var $p1: ref;
  var $i2: i64;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} {:cexpr "xpc_assume_partition_disengaged_uv:arg:partid"} boogie_si_record_i16($i0);
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    $p1 := $M.3;
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    $i2 := $sext.i16.i64($i0);
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref($i2, 872)), $mul.ref(576, 1));
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 296)), $mul.ref(208, 1));
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 555} $p7 := spinlock_check($p6);
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} $i8 := _raw_spin_lock_irqsave($p7);
    call {:si_unique_call 557} {:cexpr "irq_flags"} boogie_si_record_i64($i8);
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0, 296)), $mul.ref(280, 1));
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.1, $p9);
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, $sub.i32(0, 3));
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 296)), $mul.ref(280, 1));
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p12, $i11);
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p5, $mul.ref(0, 296)), $mul.ref(208, 1));
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 558} spin_unlock_irqrestore($p13, $i8);
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    return;
}



const xpc_partition_engaged_uv: ref;

axiom xpc_partition_engaged_uv == $sub.ref(0, 355351);

procedure xpc_partition_engaged_uv($i0: i16) returns ($r: i32);
  free requires assertsPassed;



implementation xpc_partition_engaged_uv($i0: i16) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i64;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 559} {:cexpr "xpc_partition_engaged_uv:arg:partid"} boogie_si_record_i16($i0);
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    $p1 := $M.3;
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    $i2 := $sext.i16.i64($i0);
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref($i2, 872)), $mul.ref(576, 1));
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 296)), $mul.ref(280, 1));
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.1, $p6);
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 2);
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const xpc_any_partition_engaged_uv: ref;

axiom xpc_any_partition_engaged_uv == $sub.ref(0, 356383);

procedure xpc_any_partition_engaged_uv() returns ($r: i32);
  free requires assertsPassed;



implementation xpc_any_partition_engaged_uv() returns ($r: i32)
{
  var $p1: ref;
  var $i2: i64;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $i11: i32;
  var $i12: i32;
  var $i13: i16;
  var $i14: i32;
  var $i15: i1;
  var $i0: i16;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    $i0 := 0;
    goto $bb1;

  $bb1:
    call $p1, $i2, $p4, $p5, $p6, $i7, $i8, $i9, $i11, $i12, $i13, $i14, $i15, $i0 := xpc_any_partition_engaged_uv_loop_$bb1($p1, $i2, $p4, $p5, $p6, $i7, $i8, $i9, $i11, $i12, $i13, $i14, $i15, $i0);
    goto $bb1_last;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p1 := $M.3;
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    $i2 := $sext.i16.i64($i0);
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref($i2, 872)), $mul.ref(576, 1));
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 296)), $mul.ref(280, 1));
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.1, $p6);
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 2);
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i11 := $sext.i16.i32($i0);
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    $i12 := $add.i32($i11, 1);
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i32.i16($i12);
    call {:si_unique_call 560} {:cexpr "partid"} boogie_si_record_i16($i13);
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    $i14 := $sext.i16.i32($i13);
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    $i15 := $sle.i32($i14, 255);
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i15 == 1);
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb7:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i0 := $i13;
    goto $bb7_dummy;

  $bb3:
    assume $i9 == 1;
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    $i10 := 1;
    goto $bb5;

  $bb7_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2468;
}



const xpc_n_of_deliverable_payloads_uv: ref;

axiom xpc_n_of_deliverable_payloads_uv == $sub.ref(0, 357415);

procedure xpc_n_of_deliverable_payloads_uv($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation xpc_n_of_deliverable_payloads_uv($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(432, 1));
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 216)), $mul.ref(120, 1));
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 561} $i4 := xpc_n_of_fifo_entries_uv($p3);
    call {:si_unique_call 562} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const xpc_send_payload_uv: ref;

axiom xpc_send_payload_uv == $sub.ref(0, 358447);

procedure xpc_send_payload_uv($p0: ref, $i1: i32, $p2: ref, $i3: i16, $i4: i8, $p5: ref, $p6: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.25, $M.1, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.23, $CurrAddr, $M.28, assertsPassed, $M.0, $M.2;



implementation xpc_send_payload_uv($p0: ref, $i1: i32, $p2: ref, $i3: i16, $i4: i8, $p5: ref, $p6: ref) returns ($r: i32)
{
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i64;
  var $p11: ref;
  var $i12: i16;
  var $i13: i64;
  var $i14: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i1;
  var $i29: i64;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $i41: i32;
  var $p43: ref;
  var $i44: i16;
  var $p46: ref;
  var $p47: ref;
  var $i48: i16;
  var $i49: i8;
  var $p51: ref;
  var $i52: i8;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i32;
  var $p59: ref;
  var $i60: i64;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i32;
  var $i70: i1;
  var $p71: ref;
  var $p72: ref;
  var $i73: i16;
  var $i74: i64;
  var $p75: ref;
  var $i42: i32;
  var $i76: i64;
  var $i77: i1;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $i82: i64;
  var $i83: i64;
  var $i84: i1;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $i22: i32;
  var $i15: i32;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 563} $p7 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 564} $p8 := $alloc($mul.ref(128, $zext.i32.i64(1)));
    call {:si_unique_call 565} {:cexpr "xpc_send_payload_uv:arg:flags"} boogie_si_record_i32($i1);
    call {:si_unique_call 566} {:cexpr "xpc_send_payload_uv:arg:payload_size"} boogie_si_record_i16($i3);
    call {:si_unique_call 567} {:cexpr "xpc_send_payload_uv:arg:notify_type"} boogie_si_record_i8($i4);
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p7, $0.ref);
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i64($i3);
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    $i10 := $add.i64($i9, 16);
    call {:si_unique_call 568} {:cexpr "msg_size"} boogie_si_record_i64($i10);
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(94, 1));
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    $i12 := $load.i16($M.1, $p11);
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i64($i12);
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    $i14 := $ult.i64($i13, $i10);
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 569} xpc_msgqueue_ref($p0);
    goto SeqInstr_259, SeqInstr_260;

  SeqInstr_260:
    assume assertsPassed;
    goto SeqInstr_261;

  SeqInstr_261:
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(80, 1));
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.1, $p16);
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    $i18 := $and.i32($i17, 131072);
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(80, 1));
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.1, $p23);
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    $i25 := $and.i32($i24, 1024);
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 0);
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 572} $i27 := xpc_allocate_msg_slot_uv($p0, $i1, $p7);
    goto SeqInstr_265, SeqInstr_266;

  SeqInstr_266:
    assume assertsPassed;
    goto SeqInstr_267;

  SeqInstr_267:
    call {:si_unique_call 573} {:cexpr "ret"} boogie_si_record_i32($i27);
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p5);
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p8);
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    $i44 := $load.i16($M.1, xp_partition_id);
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p43, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p46, $i44);
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(92, 1));
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    $i48 := $load.i16($M.1, $p47);
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    $i49 := $trunc.i16.i8($i48);
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p43, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(10, 1));
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p51, $i49);
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    $i52 := $trunc.i64.i8($i10);
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($p43, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(11, 1));
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p54, $i52);
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.25, $p7);
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p55, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.1, $p56);
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($p43, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p59, $i57);
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    $i60 := $zext.i16.i64($i3);
    call {:si_unique_call 577} {:cexpr "__len"} boogie_si_record_i64($i60);
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p43, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p61);
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.1;
    cmdloc_dummy_var_4 := $M.1;
    call {:si_unique_call 578} cmdloc_dummy_var_5 := $memcpy.i8(cmdloc_dummy_var_3, cmdloc_dummy_var_4, $p62, $p2, $i60, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_5;
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(432, 1));
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p63);
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p64, $mul.ref(0, 216)), $mul.ref(0, 1));
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.1, $p65);
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p66);
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p43);
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 579} $i69 := xpc_send_gru_msg($p67, $p68, $i10);
    call {:si_unique_call 580} {:cexpr "ret"} boogie_si_record_i32($i69);
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    $i70 := $eq.i32($i69, 0);
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p71 := $M.3;
    goto corral_source_split_2593;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(0, 1));
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    $i73 := $load.i16($M.1, $p72);
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    $i74 := $sext.i16.i64($i73);
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($p71, $mul.ref($i74, 872));
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 581} xpc_deactivate_partition(1641, $p75, $i69);
    goto SeqInstr_274, SeqInstr_275;

  SeqInstr_275:
    assume assertsPassed;
    goto SeqInstr_276;

  SeqInstr_276:
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    $i42 := $i69;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    $i76 := $p2i.ref.i64($p5);
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    $i77 := $ne.i64($i76, 0);
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    assume {:branchcond $i77} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.25, $p7);
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 584} xpc_free_msg_slot_uv($p0, $p88);
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    $i22 := $i42;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 571} xpc_msgqueue_deref($p0);
    goto SeqInstr_262, SeqInstr_263;

  SeqInstr_263:
    assume assertsPassed;
    goto SeqInstr_264;

  SeqInstr_264:
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    $i15 := $i22;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  SeqInstr_262:
    assume !assertsPassed;
    return;

  $bb25:
    assume $i77 == 1;
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.25, $p7);
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p78, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    $p80 := $bitcast.ref.ref($p79);
    call {:si_unique_call 582} $p81 := devirtbounce.19(0, $p80, $0.ref, $p5, $p80);
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i82 := $p2i.ref.i64($p81);
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    $i83 := $p2i.ref.i64($p5);
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    $i84 := $ne.i64($i82, $i83);
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    assume {:branchcond $i84} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.25, $p7);
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p85, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p86, $0.ref);
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(204, 1));
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 583} atomic_dec($p87);
    goto SeqInstr_277, SeqInstr_278;

  SeqInstr_278:
    assume assertsPassed;
    goto SeqInstr_279;

  SeqInstr_279:
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    goto $bb31;

  SeqInstr_277:
    assume !assertsPassed;
    return;

  $bb28:
    assume $i84 == 1;
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    $i22 := 0;
    goto $bb7;

  SeqInstr_274:
    assume !assertsPassed;
    return;

  $bb22:
    assume $i70 == 1;
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    $i22 := $i69;
    goto $bb7;

  $bb15:
    assume $i30 == 1;
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(204, 1));
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} atomic_inc($p31);
    goto SeqInstr_268, SeqInstr_269;

  SeqInstr_269:
    assume assertsPassed;
    goto SeqInstr_270;

  SeqInstr_270:
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.25, $p7);
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p33, $p6);
    call {:si_unique_call 575} devirtbounce.4(0);
    goto SeqInstr_271, SeqInstr_272;

  SeqInstr_272:
    assume assertsPassed;
    goto SeqInstr_273;

  SeqInstr_273:
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.25, $p7);
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p35, $p5);
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(80, 1));
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.1, $p36);
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    $i38 := $and.i32($i37, 131072);
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb17:
    assume $i39 == 1;
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(84, 1));
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.1, $p40);
    call {:si_unique_call 576} {:cexpr "ret"} boogie_si_record_i32($i41);
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    $i42 := $i41;
    goto $bb19;

  SeqInstr_271:
    assume !assertsPassed;
    return;

  SeqInstr_268:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i28 == 1;
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    $i22 := $i27;
    goto $bb7;

  SeqInstr_265:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i26 == 1;
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    $i22 := 1;
    goto $bb7;

  $bb5:
    assume $i19 == 1;
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(84, 1));
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.1, $p20);
    call {:si_unique_call 570} {:cexpr "ret"} boogie_si_record_i32($i21);
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    $i22 := $i21;
    goto $bb7;

  SeqInstr_259:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    $i15 := 55;
    goto $bb3;
}



const xpc_get_deliverable_payload_uv: ref;

axiom xpc_get_deliverable_payload_uv == $sub.ref(0, 359479);

procedure xpc_get_deliverable_payload_uv($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation xpc_get_deliverable_payload_uv($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $p16: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(80, 1));
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.1, $p1);
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 131072);
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 0);
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $p16 := $0.ref;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    $r := $p16;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(432, 1));
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 216)), $mul.ref(120, 1));
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 585} $p8 := xpc_get_fifo_entry_uv($p7);
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $p15 := $0.ref;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    $p16 := $p15;
    goto $bb6;

  $bb3:
    assume $i11 == 1;
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p9);
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    $p15 := $p13;
    goto $bb5;
}



const xpc_received_payload_uv: ref;

axiom xpc_received_payload_uv == $sub.ref(0, 360511);

procedure xpc_received_payload_uv($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $CurrAddr, $M.23, $M.28, $M.0, $M.2, assertsPassed;



implementation xpc_received_payload_uv($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i16;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i16;
  var $i21: i64;
  var $p22: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref($sub.ref(0, 16), 24));
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.1, xp_partition_id);
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p3, $mul.ref($sub.ref(0, 16), 24)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p7, $i5);
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p3, $mul.ref($sub.ref(0, 16), 24)), $mul.ref(0, 1)), $mul.ref(11, 1));
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p9, 0);
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(432, 1));
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 216)), $mul.ref(0, 1));
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.1, $p12);
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p4);
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 586} $i16 := xpc_send_gru_msg($p14, $p15, 16);
    call {:si_unique_call 587} {:cexpr "ret"} boogie_si_record_i32($i16);
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    $p18 := $M.3;
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(0, 1));
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    $i20 := $load.i16($M.1, $p19);
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    $i21 := $sext.i16.i64($i20);
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p18, $mul.ref($i21, 872));
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 588} xpc_deactivate_partition(1731, $p22, $i16);
    goto SeqInstr_280, SeqInstr_281;

  SeqInstr_281:
    assume assertsPassed;
    goto SeqInstr_282;

  SeqInstr_282:
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_280:
    assume !assertsPassed;
    return;
}



const xpc_notify_senders_of_disconnect_uv: ref;

axiom xpc_notify_senders_of_disconnect_uv == $sub.ref(0, 361543);

procedure xpc_notify_senders_of_disconnect_uv($p0: ref);
  free requires assertsPassed;
  modifies $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.1, $CurrAddr, $M.23, $M.28, assertsPassed, $M.0, $M.2;



implementation xpc_notify_senders_of_disconnect_uv($p0: ref)
{
  var $p1: ref;
  var $i2: i16;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $i22: i16;
  var $i23: i32;
  var $i24: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(96, 1));
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    $i2 := $load.i16($M.1, $p1);
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i32($i2);
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    $i4 := $sgt.i32($i3, 0);
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb4;

  $bb4:
    call $p6, $i7, $i8, $p9, $p10, $p11, $p12, $i13, $p14, $p15, $p16, $i17, $i18, $p19, $i20, $i21, $i22, $i23, $i24, $i5 := xpc_notify_senders_of_disconnect_uv_loop_$bb4($p0, $p1, $p6, $i7, $i8, $p9, $p10, $p11, $p12, $i13, $p14, $p15, $p16, $i17, $i18, $p19, $i20, $i21, $i22, $i23, $i24, $i5);
    goto $bb4_last;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(204, 1));
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} $i7 := atomic_read($p6);
    call {:si_unique_call 590} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(432, 1));
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 216)), $mul.ref(8, 1));
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.1, $p11);
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i5);
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p12, $mul.ref($i13, 32));
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p12, $mul.ref($i13, 32)), $mul.ref(16, 1));
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.1, $p15);
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i21 := $add.i32($i5, 1);
    call {:si_unique_call 592} {:cexpr "entry"} boogie_si_record_i32($i21);
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    $i22 := $load.i16($M.1, $p1);
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    $i23 := $zext.i16.i32($i22);
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    $i24 := $sgt.i32($i23, $i21);
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i24 == 1);
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb13:
    assume $i24 == 1;
    assume {:verifier.code 0} true;
    $i5 := $i21;
    goto $bb13_dummy;

  $bb10:
    assume $i18 == 1;
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(84, 1));
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.1, $p19);
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} xpc_notify_sender_uv($p0, $p14, $i20);
    goto SeqInstr_283, SeqInstr_284;

  SeqInstr_284:
    assume assertsPassed;
    goto SeqInstr_285;

  SeqInstr_285:
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_283:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb13_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2678;
}



const xpc_notify_sender_uv: ref;

axiom xpc_notify_sender_uv == $sub.ref(0, 362575);

procedure xpc_notify_sender_uv($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.1, $CurrAddr, $M.23, $M.28, assertsPassed, $M.0, $M.2;



implementation xpc_notify_sender_uv($p0: ref, $p1: ref, $i2: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i24;
  var $i23: i24;
  var $i24: i24;
  var $p25: ref;
  var $p26: ref;
  var $i27: i8;
  var $i28: i64;
  var $i29: i64;
  var $i30: i64;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $p35: ref;
  var $i36: i16;
  var $i37: i32;
  var $p38: ref;
  var $i39: i16;
  var $i40: i32;
  var $p42: ref;
  var $i43: i16;
  var $i44: i32;
  var $i45: i16;
  var $p46: ref;
  var $i47: i16;
  var $i48: i32;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i24;
  var $i58: i24;
  var $i59: i24;
  var $p60: ref;
  var $p61: ref;
  var $i62: i8;
  var $i63: i64;
  var $i64: i64;
  var $i65: i64;
  var $i66: i1;
  var $p67: ref;
  var $p68: ref;
  var $i69: i32;
  var $p70: ref;
  var $i71: i16;
  var $i72: i32;
  var $p73: ref;
  var $i74: i16;
  var $i75: i32;
  var vslice_dummy_var_40: i32;
  var vslice_dummy_var_41: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 593} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 594} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 595} {:cexpr "xpc_notify_sender_uv:arg:reason"} boogie_si_record_i32($i2);
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    call {:si_unique_call 596} $p11 := devirtbounce.19(0, $p10, $0.ref, $p6, $p10);
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p6);
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i12, $i13);
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(204, 1));
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 597} atomic_dec($p15);
    goto SeqInstr_286, SeqInstr_287;

  SeqInstr_287:
    assume assertsPassed;
    goto SeqInstr_288;

  SeqInstr_288:
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p16, .str);
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p17, .str.120);
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p18, .str.114);
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p19, .str.121);
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    $i22 := $load.i24($M.12, $p21);
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    $i23 := $and.i24($i22, $sub.i24(0, 262144));
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    $i24 := $or.i24($i23, 1432);
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p21, $i24);
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p25, 0);
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.13, $p26);
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i64($i27);
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    $i29 := $and.i64($i28, 1);
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 598} $i30 := ldv__builtin_expect($i29, 0);
    call {:si_unique_call 599} {:cexpr "tmp"} boogie_si_record_i64($i30);
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i30, 0);
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(0, 1));
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    $i43 := $load.i16($M.1, $p42);
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    $i44 := $sext.i16.i32($i43);
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i32.i16($i44);
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(92, 1));
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    $i47 := $load.i16($M.1, $p46);
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    $i48 := $zext.i16.i32($i47);
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.1, $p49);
    call {:si_unique_call 601} devirtbounce.20($p6, $i2, $i45, $i48, $p50);
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p51, .str);
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p52, .str.120);
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p53, .str.114);
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p54, .str.122);
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p55);
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    $i57 := $load.i24($M.12, $p56);
    goto corral_source_split_2780;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    $i58 := $and.i24($i57, $sub.i24(0, 262144));
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    $i59 := $or.i24($i58, 1438);
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p56, $i59);
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p60, 0);
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    $i62 := $load.i8($M.13, $p61);
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    $i63 := $zext.i8.i64($i62);
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    $i64 := $and.i64($i63, 1);
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 602} $i65 := ldv__builtin_expect($i64, 0);
    call {:si_unique_call 603} {:cexpr "tmp___0"} boogie_si_record_i64($i65);
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    $i66 := $ne.i64($i65, 0);
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    assume {:branchcond $i66} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i66 == 1;
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    $p67 := $M.17;
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.1, $p68);
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(0, 1));
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    $i71 := $load.i16($M.1, $p70);
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    $i72 := $sext.i16.i32($i71);
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(92, 1));
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    $i74 := $load.i16($M.1, $p73);
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    $i75 := $zext.i16.i32($i74);
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 604} vslice_dummy_var_41 := __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32.i32($p4, $p67, .str.122, $p1, $i69, $i72, $i75);
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb6:
    assume $i31 == 1;
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    $p32 := $M.17;
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.1, $p33);
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(0, 1));
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    $i36 := $load.i16($M.1, $p35);
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    $i37 := $sext.i16.i32($i36);
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(92, 1));
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    $i39 := $load.i16($M.1, $p38);
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    $i40 := $zext.i16.i32($i39);
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 600} vslice_dummy_var_40 := __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32.i32($p3, $p32, .str.121, $p1, $i34, $i37, $i40);
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_286:
    assume !assertsPassed;
    return;
}



const xpc_send_gru_msg: ref;

axiom xpc_send_gru_msg == $sub.ref(0, 363607);

procedure xpc_send_gru_msg($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $CurrAddr;



implementation xpc_send_gru_msg($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i24;
  var $i18: i24;
  var $i19: i24;
  var $p20: ref;
  var $p21: ref;
  var $i22: i8;
  var $i23: i64;
  var $i24: i64;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $i30: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i24;
  var $i39: i24;
  var $i40: i24;
  var $p41: ref;
  var $p42: ref;
  var $i43: i8;
  var $i44: i64;
  var $i45: i64;
  var $i46: i64;
  var $i47: i1;
  var $p48: ref;
  var $i31: i32;
  var $p50: ref;
  var $i52: i32;
  var $i53: i1;
  var $i9: i32;
  var vslice_dummy_var_42: i32;
  var vslice_dummy_var_43: i64;
  var vslice_dummy_var_44: i32;
  var vslice_dummy_var_45: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 605} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 606} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 607} {:cexpr "xpc_send_gru_msg:arg:msg_size"} boogie_si_record_i64($i2);
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i2);
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 608} $i6 := gru_send_message_gpa($p0, $p1, $i5);
    call {:si_unique_call 609} {:cexpr "ret"} boogie_si_record_i32($i6);
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i7 == 1);
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    $i8 := $i6;
    goto $bb4;

  $bb4:
    call $i8, $i10, $p11, $p12, $p13, $p14, $p15, $p16, $i17, $i18, $i19, $p20, $p21, $i22, $i23, $i24, $i25, $i26, $p27, $i30, $p32, $p33, $p34, $p35, $p36, $p37, $i38, $i39, $i40, $p41, $p42, $i43, $i44, $i45, $i46, $i47, $p48, $i31, $i52, $i53, vslice_dummy_var_42, vslice_dummy_var_43, vslice_dummy_var_45 := xpc_send_gru_msg_loop_$bb4($p0, $p1, $p3, $p4, $i5, $i8, $i10, $p11, $p12, $p13, $p14, $p15, $p16, $i17, $i18, $i19, $p20, $p21, $i22, $i23, $i24, $i25, $i26, $p27, $i30, $p32, $p33, $p34, $p35, $p36, $p37, $i38, $i39, $i40, $p41, $p42, $i43, $i44, $i45, $i46, $i47, $p48, $i31, $i52, $i53, vslice_dummy_var_42, vslice_dummy_var_43, vslice_dummy_var_45);
    goto $bb4_last;

  $bb7:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i8, 2);
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i10 == 1);
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i8, 1);
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    $i31 := $i8;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    $p50 := $M.17;
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 618} vslice_dummy_var_44 := dev_err.ref.ref.i32($p50, .str.127, $i31);
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    $i9 := 59;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb14:
    assume $i30 == 1;
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p32, .str);
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p33, .str.124);
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p34, .str.114);
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p35, .str.126);
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    $i38 := $load.i24($M.12, $p37);
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    $i39 := $and.i24($i38, $sub.i24(0, 262144));
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    $i40 := $or.i24($i39, 409);
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p37, $i40);
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p41, 0);
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    $i43 := $load.i8($M.13, $p42);
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i64($i43);
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    $i45 := $and.i64($i44, 1);
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 616} $i46 := ldv__builtin_expect($i45, 0);
    call {:si_unique_call 617} {:cexpr "tmp___0"} boogie_si_record_i64($i46);
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    $i47 := $ne.i64($i46, 0);
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 614} $i52 := gru_send_message_gpa($p0, $p1, $i5);
    call {:si_unique_call 615} {:cexpr "ret"} boogie_si_record_i32($i52);
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i52, 0);
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb20;

  $bb20:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    $i8 := $i52;
    goto $bb20_dummy;

  $bb5:
    assume $i53 == 1;
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb6;

  $bb16:
    assume $i47 == 1;
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    $p48 := $M.17;
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 619} vslice_dummy_var_45 := __dynamic_dev_dbg.ref.ref.ref($p4, $p48, .str.126);
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb8:
    assume $i10 == 1;
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p11, .str);
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p12, .str.124);
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p13, .str.114);
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p14, .str.125);
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    $i17 := $load.i24($M.12, $p16);
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    $i18 := $and.i24($i17, $sub.i24(0, 262144));
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    $i19 := $or.i24($i18, 403);
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p16, $i19);
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p20, 0);
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.13, $p21);
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i64($i22);
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    $i24 := $and.i64($i23, 1);
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 610} $i25 := ldv__builtin_expect($i24, 0);
    call {:si_unique_call 611} {:cexpr "tmp"} boogie_si_record_i64($i25);
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} vslice_dummy_var_43 := msleep_interruptible(10);
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i26 == 1;
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    $p27 := $M.17;
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} vslice_dummy_var_42 := __dynamic_dev_dbg.ref.ref.ref($p3, $p27, .str.125);
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb2;

  $bb20_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb7;
}



const gru_send_message_gpa: ref;

axiom gru_send_message_gpa == $sub.ref(0, 364639);

procedure gru_send_message_gpa($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation gru_send_message_gpa($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 620} {:cexpr "gru_send_message_gpa:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 1} true;
    call {:si_unique_call 621} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 622} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const dev_err: ref;

axiom dev_err == $sub.ref(0, 365671);

procedure dev_err.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 1} true;
    call {:si_unique_call 623} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 624} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure dev_err.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 1} true;
    call {:si_unique_call 625} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 626} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure dev_err.ref.ref($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 1} true;
    call {:si_unique_call 627} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 628} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure dev_err.ref.ref.i64($p0: ref, $p1: ref, p.2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.i64($p0: ref, $p1: ref, p.2: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 1} true;
    call {:si_unique_call 629} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 630} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const xpc_get_fifo_entry_uv: ref;

axiom xpc_get_fifo_entry_uv == $sub.ref(0, 366703);

procedure xpc_get_fifo_entry_uv($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation xpc_get_fifo_entry_uv($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i64;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} $p2 := spinlock_check($p1);
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} $i3 := _raw_spin_lock_irqsave($p2);
    call {:si_unique_call 633} {:cexpr "irq_flags"} boogie_si_record_i64($i3);
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} spin_unlock_irqrestore($p30, $i3);
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p5);
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    $r := $p31;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.1, $p10);
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p12, $p11);
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.1, $p13);
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, 0);
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(88, 1));
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.1, $p18);
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32($i19, 1);
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(88, 1));
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p21, $i20);
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(88, 1));
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.1, $p22);
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i23, 0);
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    $i25 := $zext.i1.i32($i24);
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i25);
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 634} $i27 := ldv__builtin_expect($i26, 0);
    call {:si_unique_call 635} {:cexpr "tmp___0"} boogie_si_record_i64($i27);
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p29, $0.ref);
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb6:
    assume $i28 == 1;
    call {:si_unique_call 636} devirtbounce.7(0, .str.114, 1032, 12);
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    call xpc_get_fifo_entry_uv_loop_$bb8();
    goto $bb8_last;

  $bb3:
    assume $i16 == 1;
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(8, 1));
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p17, $0.ref);
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb8_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto $bb8_dummy;
}



const xpc_allocate_msg_slot_uv: ref;

axiom xpc_allocate_msg_slot_uv == $sub.ref(0, 367735);

procedure xpc_allocate_msg_slot_uv($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.25, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $CurrAddr, $M.23, $M.28, assertsPassed, $M.0, $M.2;



implementation xpc_allocate_msg_slot_uv($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p11: ref;
  var $p10: ref;
  var $i12: i32;
  var $i13: i1;
  var $i15: i32;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $i14: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} {:cexpr "xpc_allocate_msg_slot_uv:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(432, 1));
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 216)), $mul.ref(24, 1));
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 639} $p6 := xpc_get_fifo_entry_uv($p5);
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    $p10 := $p6;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i9 == 1);
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p11, $i12, $i13, $i15, $i16, $i17, $i18, $p19, $p20, $i21, $i22 := xpc_allocate_msg_slot_uv_loop_$bb4($p0, $i1, $p5, $p11, $i12, $i13, $i15, $i16, $i17, $i18, $p19, $p20, $i21, $i22);
    goto $bb4_last;

  $bb7:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i1, 1);
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 640} $i15 := xpc_allocate_msg_wait($p0);
    goto SeqInstr_289, SeqInstr_290;

  SeqInstr_290:
    assume assertsPassed;
    goto SeqInstr_291;

  SeqInstr_291:
    call {:si_unique_call 641} {:cexpr "ret"} boogie_si_record_i32($i15);
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 10);
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 642} $p19 := xpc_get_fifo_entry_uv($p5);
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    $p11 := $p19;
    assume true;
    goto $bb5, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb18_dummy;

  $bb5:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    $p10 := $p11;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p2, $p10);
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb12:
    assume $i16 == 1;
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i15, 9);
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    $i18 := $i15;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb14;

  $bb15:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    $i14 := $i18;
    goto $bb10;

  SeqInstr_289:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i13 == 1;
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    $i14 := 7;
    goto $bb10;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb2;

  $bb18_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto $bb7;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 368767);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const xpc_free_msg_slot_uv: ref;

axiom xpc_free_msg_slot_uv == $sub.ref(0, 369799);

procedure xpc_free_msg_slot_uv($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation xpc_free_msg_slot_uv($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(432, 1));
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 216)), $mul.ref(24, 1));
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 643} xpc_put_fifo_entry_uv($p4, $p5);
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(104, 1));
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 644} $i7 := atomic_read($p6);
    call {:si_unique_call 645} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_2993;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    $i8 := $sgt.i32($i7, 0);
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(112, 1));
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} __wake_up($p9, 3, 1, $0.ref);
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const xpc_put_fifo_entry_uv: ref;

axiom xpc_put_fifo_entry_uv == $sub.ref(0, 370831);

procedure xpc_put_fifo_entry_uv($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation xpc_put_fifo_entry_uv($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p2, $0.ref);
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 647} $p4 := spinlock_check($p3);
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 648} $i5 := _raw_spin_lock_irqsave($p4);
    call {:si_unique_call 649} {:cexpr "irq_flags"} boogie_si_record_i64($i5);
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(8, 1));
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_3009;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p13, $p1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(8, 1));
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p14, $p1);
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(88, 1));
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.1, $p15);
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    $i17 := $add.i32($i16, 1);
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(88, 1));
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p18, $i17);
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 650} spin_unlock_irqrestore($p19, $i5);
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(8, 1));
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.1, $p10);
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p12, $p1);
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const xpc_allocate_msg_wait: ref;

axiom xpc_allocate_msg_wait == $sub.ref(0, 371863);

procedure xpc_allocate_msg_wait($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $CurrAddr, $M.23, $M.28, assertsPassed, $M.0, $M.2;



implementation xpc_allocate_msg_wait($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $i6: i32;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $i18: i32;
  var $i20: i1;
  var $i21: i32;
  var $i19: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(80, 1));
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.1, $p1);
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 131072);
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(104, 1));
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} atomic_inc($p8);
    goto SeqInstr_292, SeqInstr_293;

  SeqInstr_293:
    assume assertsPassed;
    goto SeqInstr_294;

  SeqInstr_294:
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(112, 1));
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} $i10 := interruptible_sleep_on_timeout($p9, 1);
    call {:si_unique_call 653} {:cexpr "tmp"} boogie_si_record_i64($i10);
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i64.i32($i10);
    call {:si_unique_call 654} {:cexpr "ret"} boogie_si_record_i32($i11);
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(104, 1));
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 655} atomic_dec($p12);
    goto SeqInstr_295, SeqInstr_296;

  SeqInstr_296:
    assume assertsPassed;
    goto SeqInstr_297;

  SeqInstr_297:
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(80, 1));
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.1, $p13);
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i14, 131072);
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i11, 0);
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i21 := 10;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i19 := $i21;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    $i7 := $i19;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb8:
    assume $i20 == 1;
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    $i21 := 9;
    goto $bb10;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(84, 1));
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.1, $p17);
    call {:si_unique_call 656} {:cexpr "ret"} boogie_si_record_i32($i18);
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    $i19 := $i18;
    goto $bb7;

  SeqInstr_295:
    assume !assertsPassed;
    return;

  SeqInstr_292:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(84, 1));
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.1, $p5);
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    $i7 := $i6;
    goto $bb3;
}



const interruptible_sleep_on_timeout: ref;

axiom interruptible_sleep_on_timeout == $sub.ref(0, 372895);

procedure interruptible_sleep_on_timeout($p0: ref, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation interruptible_sleep_on_timeout($p0: ref, $i1: i64) returns ($r: i64)
{
  var $i2: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 657} {:cexpr "interruptible_sleep_on_timeout:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 1} true;
    call {:si_unique_call 658} $i2 := __VERIFIER_nondet_long();
    call {:si_unique_call 659} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i2);
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const xpc_n_of_fifo_entries_uv: ref;

axiom xpc_n_of_fifo_entries_uv == $sub.ref(0, 373927);

procedure xpc_n_of_fifo_entries_uv($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation xpc_n_of_fifo_entries_uv($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(88, 1));
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.1, $p1);
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const xpc_send_activate_IRQ_part_uv: ref;

axiom xpc_send_activate_IRQ_part_uv == $sub.ref(0, 374959);

procedure xpc_send_activate_IRQ_part_uv($p0: ref, $p1: ref, $i2: i64, $i3: i32);
  free requires assertsPassed;
  modifies $M.1, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.23, $CurrAddr, $M.28, assertsPassed, $M.0, $M.2;



implementation xpc_send_activate_IRQ_part_uv($p0: ref, $p1: ref, $i2: i64, $i3: i32)
{
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 660} {:cexpr "xpc_send_activate_IRQ_part_uv:arg:msg_size"} boogie_si_record_i64($i2);
    call {:si_unique_call 661} {:cexpr "xpc_send_activate_IRQ_part_uv:arg:msg_type"} boogie_si_record_i32($i3);
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 662} $i4 := xpc_send_activate_IRQ_uv($p0, $p1, $i2, $i3);
    goto SeqInstr_298, SeqInstr_299;

  SeqInstr_299:
    assume assertsPassed;
    goto SeqInstr_300;

  SeqInstr_300:
    call {:si_unique_call 663} {:cexpr "ret"} boogie_si_record_i32($i4);
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 664} $i8 := ldv__builtin_expect($i7, 0);
    call {:si_unique_call 665} {:cexpr "tmp"} boogie_si_record_i64($i8);
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} xpc_deactivate_partition(790, $p0, $i4);
    goto SeqInstr_301, SeqInstr_302;

  SeqInstr_302:
    assume assertsPassed;
    goto SeqInstr_303;

  SeqInstr_303:
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_301:
    assume !assertsPassed;
    return;

  SeqInstr_298:
    assume !assertsPassed;
    return;
}



const xpc_send_activate_IRQ_uv: ref;

axiom xpc_send_activate_IRQ_uv == $sub.ref(0, 375991);

procedure xpc_send_activate_IRQ_uv($p0: ref, $p1: ref, $i2: i64, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.23, $M.28, $CurrAddr, assertsPassed, $M.0, $M.2;



implementation xpc_send_activate_IRQ_uv($p0: ref, $p1: ref, $i2: i64, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i8;
  var $p8: ref;
  var $i9: i16;
  var $p10: ref;
  var $p11: ref;
  var $i12: i8;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $i38: i32;
  var $i39: i1;
  var $i40: i32;
  var $p41: ref;
  var $p42: ref;
  var $i43: i64;
  var $p44: ref;
  var $i45: i32;
  var $i46: i32;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $i53: i1;
  var $p55: ref;
  var $i56: i32;
  var $i57: i32;
  var $i58: i1;
  var $i59: i32;
  var $i54: i32;
  var $i60: i32;
  var $i32: i32;
  var $p61: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 667} {:cexpr "xpc_send_activate_IRQ_uv:arg:msg_size"} boogie_si_record_i64($i2);
    call {:si_unique_call 668} {:cexpr "xpc_send_activate_IRQ_uv:arg:msg_type"} boogie_si_record_i32($i3);
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(576, 1));
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i8($i3);
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(7, 1));
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p8, $i7);
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    $i9 := $load.i16($M.1, xp_partition_id);
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p10, $i9);
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(112, 1));
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.1, $p11);
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(6, 1));
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p13, $i12);
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    $p14 := $M.14;
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 128)), $mul.ref(24, 1));
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    $i16 := $load.i64($M.1, $p15);
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p17, $i16);
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p6, $mul.ref(0, 296)), $mul.ref(40, 1));
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 669} ldv_mutex_lock_62($p18);
    goto SeqInstr_304, SeqInstr_305;

  SeqInstr_305:
    assume assertsPassed;
    goto SeqInstr_306;

  SeqInstr_306:
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $p19, $i20, $i21, $i22, $p23, $p24, $p25, $i26, $i27, $p28, $p29, $i30, $i31, $p34, $p35, $p36, $i37, $i38, $i39, $i40, $p41, $p42, $i43, $p44, $i45, $i46, $p47, $p48, $p49, $p50, $p51, $i52, $i53, $p55, $i56, $i57, $i58, $i59, $i54 := xpc_send_activate_IRQ_uv_loop_$bb1($p1, $i2, $p6, $p19, $i20, $i21, $i22, $p23, $p24, $p25, $i26, $i27, $p28, $p29, $i30, $i31, $p34, $p35, $p36, $i37, $i38, $i39, $i40, $p41, $p42, $i43, $p44, $i45, $i46, $p47, $p48, $p49, $p50, $p51, $i52, $i53, $p55, $i56, $i57, $i58, $i59, $i54);
    goto $bb1_last;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.1, $p19);
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    $i21 := $and.i32($i20, 1);
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 0);
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p6, $mul.ref(0, 296)), $mul.ref(32, 1));
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.1, $p49);
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p50);
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 678} $i52 := xpc_send_gru_msg($p51, $p1, $i2);
    call {:si_unique_call 679} {:cexpr "ret"} boogie_si_record_i32($i52);
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    $i54 := $i52;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i60 := $i54;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    $i32 := $i60;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p6, $mul.ref(0, 296)), $mul.ref(40, 1));
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 671} ldv_mutex_unlock_63($p61);
    goto SeqInstr_307, SeqInstr_308;

  SeqInstr_308:
    assume assertsPassed;
    goto SeqInstr_309;

  SeqInstr_309:
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    $r := $i32;
    return;

  SeqInstr_307:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i53 == 1;
    call {:si_unique_call 680} devirtbounce.4(0);
    goto SeqInstr_310, SeqInstr_311;

  SeqInstr_311:
    assume assertsPassed;
    goto SeqInstr_312;

  SeqInstr_312:
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p6, $mul.ref(0, 296)), $mul.ref(280, 1));
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.1, $p55);
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    $i57 := $and.i32($i56, 1);
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    $i58 := $eq.i32($i57, 0);
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    $i59 := $i52;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i60 := $i59;
    goto $bb20;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i58 == 1;
    goto $bb17_dummy;

  SeqInstr_310:
    assume !assertsPassed;
    return;

  $bb2:
    assume $i22 == 1;
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p6, $mul.ref(0, 296)), $mul.ref(32, 1));
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.1, $p23);
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p25);
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    $i27 := $eq.i64($i26, 0);
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    $p35 := $p24;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p6, $mul.ref(0, 296)), $mul.ref(24, 1));
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    $i37 := $load.i64($M.1, $p36);
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 672} $i38 := xpc_cache_remote_gru_mq_desc_uv($p35, $i37);
    call {:si_unique_call 673} {:cexpr "ret"} boogie_si_record_i32($i38);
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    $i40 := $i38;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p6, $mul.ref(0, 296)), $mul.ref(208, 1));
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 674} $p42 := spinlock_check($p41);
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 675} $i43 := _raw_spin_lock_irqsave($p42);
    call {:si_unique_call 676} {:cexpr "irq_flags"} boogie_si_record_i64($i43);
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p6, $mul.ref(0, 296)), $mul.ref(280, 1));
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.1, $p44);
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    $i46 := $or.i32($i45, 1);
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p6, $mul.ref(0, 296)), $mul.ref(280, 1));
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p47, $i46);
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p6, $mul.ref(0, 296)), $mul.ref(208, 1));
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 677} spin_unlock_irqrestore($p48, $i43);
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb11:
    assume $i39 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3139;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    $i32 := $i40;
    goto $bb8;

  $bb4:
    assume $i27 == 1;
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 670} $p28 := kmalloc(32, 208);
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    $i31 := $eq.i64($i30, 0);
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p6, $mul.ref(0, 296)), $mul.ref(32, 1));
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p34, $p28);
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    $p35 := $p28;
    goto $bb10;

  $bb6:
    assume $i31 == 1;
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    $i32 := 13;
    goto $bb8;

  SeqInstr_304:
    assume !assertsPassed;
    return;

  $bb17_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p6, $mul.ref(0, 296)), $mul.ref(280, 1));
    goto corral_source_split_3105;
}



const ldv_mutex_lock_62: ref;

axiom ldv_mutex_lock_62 == $sub.ref(0, 377023);

procedure ldv_mutex_lock_62($p0: ref);
  free requires assertsPassed;
  modifies $M.28, assertsPassed;



implementation ldv_mutex_lock_62($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} ldv_mutex_lock_cached_activate_gru_mq_desc_mutex_of_xpc_partition_uv($p0);
    goto SeqInstr_313, SeqInstr_314;

  SeqInstr_314:
    assume assertsPassed;
    goto SeqInstr_315;

  SeqInstr_315:
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 682} mutex_lock($p0);
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_313:
    assume !assertsPassed;
    return;
}



const kmalloc: ref;

axiom kmalloc == $sub.ref(0, 378055);

procedure kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 683} {:cexpr "kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 684} {:cexpr "kmalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 685} $p2 := __kmalloc($i0, $i1);
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const xpc_cache_remote_gru_mq_desc_uv: ref;

axiom xpc_cache_remote_gru_mq_desc_uv == $sub.ref(0, 379087);

procedure xpc_cache_remote_gru_mq_desc_uv($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation xpc_cache_remote_gru_mq_desc_uv($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 686} {:cexpr "xpc_cache_remote_gru_mq_desc_uv:arg:gru_mq_desc_gpa"} boogie_si_record_i64($i1);
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 687} $i3 := uv_gpa($p2);
    call {:si_unique_call 688} {:cexpr "tmp"} boogie_si_record_i64($i3);
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, xp_remote_memcpy);
    call {:si_unique_call 689} $i5 := devirtbounce.18($p4, $i3, $i1, 32);
    call {:si_unique_call 690} {:cexpr "ret"} boogie_si_record_i32($i5);
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p7, $0.ref);
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_mutex_unlock_63: ref;

axiom ldv_mutex_unlock_63 == $sub.ref(0, 380119);

procedure ldv_mutex_unlock_63($p0: ref);
  free requires assertsPassed;
  modifies $M.28, assertsPassed;



implementation ldv_mutex_unlock_63($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} ldv_mutex_unlock_cached_activate_gru_mq_desc_mutex_of_xpc_partition_uv($p0);
    goto SeqInstr_316, SeqInstr_317;

  SeqInstr_317:
    assume assertsPassed;
    goto SeqInstr_318;

  SeqInstr_318:
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 692} mutex_unlock($p0);
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_316:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_cached_activate_gru_mq_desc_mutex_of_xpc_partition_uv: ref;

axiom ldv_mutex_unlock_cached_activate_gru_mq_desc_mutex_of_xpc_partition_uv == $sub.ref(0, 381151);

procedure ldv_mutex_unlock_cached_activate_gru_mq_desc_mutex_of_xpc_partition_uv($p0: ref);
  free requires assertsPassed;
  modifies $M.28, assertsPassed;



implementation ldv_mutex_unlock_cached_activate_gru_mq_desc_mutex_of_xpc_partition_uv($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    $i1 := $M.28;
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 2);
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 693} ldv_error();
    goto SeqInstr_319, SeqInstr_320;

  SeqInstr_320:
    assume assertsPassed;
    goto SeqInstr_321;

  SeqInstr_321:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.28 := 1;
    call {:si_unique_call 694} {:cexpr "ldv_mutex_cached_activate_gru_mq_desc_mutex_of_xpc_partition_uv"} boogie_si_record_i32(1);
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_319:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mutex_unlock: ref;

axiom mutex_unlock == $sub.ref(0, 382183);

procedure mutex_unlock($p0: ref);
  free requires assertsPassed;



implementation mutex_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    return;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 383215);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 695} __VERIFIER_error();
    goto SeqInstr_322, SeqInstr_323;

  SeqInstr_323:
    assume assertsPassed;
    goto SeqInstr_324;

  SeqInstr_324:
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_322:
    assume !assertsPassed;
    return;
}



const uv_gpa: ref;

axiom uv_gpa == $sub.ref(0, 384247);

procedure uv_gpa($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation uv_gpa($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i64;
  var $i3: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 696} $i2 := __phys_addr($i1);
    call {:si_unique_call 697} {:cexpr "tmp"} boogie_si_record_i64($i2);
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 698} $i3 := uv_soc_phys_ram_to_gpa($i2);
    call {:si_unique_call 699} {:cexpr "tmp___0"} boogie_si_record_i64($i3);
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __phys_addr: ref;

axiom __phys_addr == $sub.ref(0, 385279);

procedure __phys_addr($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation __phys_addr($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 700} {:cexpr "__phys_addr:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 1} true;
    call {:si_unique_call 701} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 702} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const uv_soc_phys_ram_to_gpa: ref;

axiom uv_soc_phys_ram_to_gpa == $sub.ref(0, 386311);

procedure uv_soc_phys_ram_to_gpa($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation uv_soc_phys_ram_to_gpa($i0: i64) returns ($r: i64)
{
  var $i1: i64;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i64;
  var $i11: i64;
  var $i12: i64;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $i20: i64;
  var $p21: ref;
  var $p22: ref;
  var $i23: i8;
  var $i24: i32;
  var $i25: i64;
  var $i26: i64;
  var $p27: ref;
  var $p28: ref;
  var $i29: i8;
  var $i30: i32;
  var $i31: i64;
  var $i32: i64;
  var $p33: ref;
  var $p34: ref;
  var $i35: i8;
  var $i36: i32;
  var $i37: i64;
  var $i38: i64;
  var $p39: ref;
  var $p40: ref;
  var $i41: i8;
  var $i42: i32;
  var $i43: i64;
  var $i44: i64;
  var $i45: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 703} {:cexpr "uv_soc_phys_ram_to_gpa:arg:paddr"} boogie_si_record_i64($i0);
    call {:si_unique_call 704} $i1 := devirtbounce.21(0, this_cpu_off, __uv_hub_info);
    call {:si_unique_call 705} {:cexpr "tcp_ptr_____0"} boogie_si_record_i64($i1);
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    $p2 := $i2p.i64.ref($i1);
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(32, 1));
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.1, $p3);
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    $i5 := $ugt.i64($i4, $i0);
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i11 := $i0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 709} $i12 := devirtbounce.21(0, this_cpu_off, __uv_hub_info);
    call {:si_unique_call 710} {:cexpr "tcp_ptr_____1"} boogie_si_record_i64($i12);
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    $p13 := $i2p.i64.ref($i12);
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 232)), $mul.ref(24, 1));
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    $i15 := $load.i64($M.1, $p14);
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    $i16 := $or.i64($i15, $i11);
    call {:si_unique_call 711} {:cexpr "paddr"} boogie_si_record_i64($i16);
    call {:si_unique_call 712} $i17 := devirtbounce.21(0, this_cpu_off, __uv_hub_info);
    call {:si_unique_call 713} {:cexpr "tcp_ptr_____2"} boogie_si_record_i64($i17);
    call {:si_unique_call 714} $i18 := devirtbounce.21(0, this_cpu_off, __uv_hub_info);
    call {:si_unique_call 715} {:cexpr "tcp_ptr_____3"} boogie_si_record_i64($i18);
    call {:si_unique_call 716} $i19 := devirtbounce.21(0, this_cpu_off, __uv_hub_info);
    call {:si_unique_call 717} {:cexpr "tcp_ptr_____4"} boogie_si_record_i64($i19);
    call {:si_unique_call 718} $i20 := devirtbounce.21(0, this_cpu_off, __uv_hub_info);
    call {:si_unique_call 719} {:cexpr "tcp_ptr_____5"} boogie_si_record_i64($i20);
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    $p21 := $i2p.i64.ref($i17);
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 232)), $mul.ref(22, 1));
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.1, $p22);
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    $i25 := $zext.i32.i64($i24);
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    $i26 := $shl.i64($i16, $i25);
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    $p27 := $i2p.i64.ref($i18);
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 232)), $mul.ref(22, 1));
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.1, $p28);
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i29);
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    $i31 := $zext.i32.i64($i30);
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    $i32 := $lshr.i64($i26, $i31);
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    $p33 := $i2p.i64.ref($i19);
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 232)), $mul.ref(57, 1));
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.1, $p34);
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i35);
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    $i37 := $zext.i32.i64($i36);
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    $i38 := $lshr.i64($i16, $i37);
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    $p39 := $i2p.i64.ref($i20);
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 232)), $mul.ref(23, 1));
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    $i41 := $load.i8($M.1, $p40);
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i41);
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    $i43 := $zext.i32.i64($i42);
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    $i44 := $shl.i64($i38, $i43);
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    $i45 := $or.i64($i32, $i44);
    call {:si_unique_call 720} {:cexpr "paddr"} boogie_si_record_i64($i45);
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    $r := $i45;
    return;

  $bb1:
    assume $i5 == 1;
    call {:si_unique_call 706} $i6 := devirtbounce.21(0, this_cpu_off, __uv_hub_info);
    call {:si_unique_call 707} {:cexpr "tcp_ptr__"} boogie_si_record_i64($i6);
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    $p7 := $i2p.i64.ref($i6);
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.1, $p8);
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    $i10 := $or.i64($i9, $i0);
    call {:si_unique_call 708} {:cexpr "paddr"} boogie_si_record_i64($i10);
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    $i11 := $i10;
    goto $bb3;
}



const __kmalloc: ref;

axiom __kmalloc == $sub.ref(0, 387343);

procedure __kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} {:cexpr "__kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 722} {:cexpr "__kmalloc:arg:t"} boogie_si_record_i32($i1);
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 723} $p2 := ldv_malloc($i0);
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_malloc: ref;

axiom ldv_malloc == $sub.ref(0, 388375);

procedure ldv_malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_malloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i6: i1;
  var $i7: i32;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 724} {:cexpr "ldv_malloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 1} true;
    call {:si_unique_call 725} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 726} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    $p8 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    $r := $p8;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 727} $p3 := malloc($i0);
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 728} $i4 := ldv_is_err($p3);
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 1} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 1} true;
    $i6 := $xor.i1($i5, 1);
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 1} true;
    call {:si_unique_call 729} __VERIFIER_assume($i7);
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    $p8 := $p3;
    goto $bb3;
}



const malloc: ref;

axiom malloc == $sub.ref(0, 389407);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 730} $r := $malloc($i0);
    return;
}



const ldv_mutex_lock_cached_activate_gru_mq_desc_mutex_of_xpc_partition_uv: ref;

axiom ldv_mutex_lock_cached_activate_gru_mq_desc_mutex_of_xpc_partition_uv == $sub.ref(0, 390439);

procedure ldv_mutex_lock_cached_activate_gru_mq_desc_mutex_of_xpc_partition_uv($p0: ref);
  free requires assertsPassed;
  modifies $M.28, assertsPassed;



implementation ldv_mutex_lock_cached_activate_gru_mq_desc_mutex_of_xpc_partition_uv($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    $i1 := $M.28;
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 731} ldv_error();
    goto SeqInstr_325, SeqInstr_326;

  SeqInstr_326:
    assume assertsPassed;
    goto SeqInstr_327;

  SeqInstr_327:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.28 := 2;
    call {:si_unique_call 732} {:cexpr "ldv_mutex_cached_activate_gru_mq_desc_mutex_of_xpc_partition_uv"} boogie_si_record_i32(2);
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_325:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mutex_lock: ref;

axiom mutex_lock == $sub.ref(0, 391471);

procedure mutex_lock($p0: ref);
  free requires assertsPassed;



implementation mutex_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    return;
}



const xpc_init_fifo_uv: ref;

axiom xpc_init_fifo_uv == $sub.ref(0, 392503);

procedure xpc_init_fifo_uv($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation xpc_init_fifo_uv($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var vslice_dummy_var_46: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 733} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p2, $0.ref);
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(8, 1));
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p3, $0.ref);
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 734} vslice_dummy_var_46 := spinlock_check($p4);
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 735} __raw_spin_lock_init($p8, .str.123, $p1);
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(88, 1));
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p9, 0);
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    return;
}



const __raw_spin_lock_init: ref;

axiom __raw_spin_lock_init == $sub.ref(0, 393535);

procedure __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    return;
}



const xpc_allocate_send_msg_slot_uv: ref;

axiom xpc_allocate_send_msg_slot_uv == $sub.ref(0, 394567);

procedure xpc_allocate_send_msg_slot_uv($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation xpc_allocate_send_msg_slot_uv($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i16;
  var $i5: i32;
  var $i6: i1;
  var $i8: i64;
  var $i9: i64;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $i19: i32;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $p32: ref;
  var $i33: i16;
  var $i34: i32;
  var $i35: i1;
  var $i36: i16;
  var $p37: ref;
  var $p38: ref;
  var $i40: i32;
  var $i41: i1;
  var $i7: i32;
  var $i39: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(432, 1));
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(96, 1));
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.1, $p3);
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i4);
    call {:si_unique_call 736} {:cexpr "nentries"} boogie_si_record_i32($i5);
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    $i6 := $sgt.i32($i5, 0);
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i39 := 13;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    $r := $i39;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    $i7 := $i5;
    goto $bb4;

  $bb4:
    call $i8, $i9, $p10, $p12, $p13, $p14, $i15, $i16, $i17, $i40, $i41, $i7 := xpc_allocate_send_msg_slot_uv_loop_$bb4($p2, $i8, $i9, $p10, $p12, $p13, $p14, $i15, $i16, $i17, $i40, $i41, $i7);
    goto $bb4_last;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    $i9 := $mul.i64($i8, 32);
    call {:si_unique_call 737} {:cexpr "nbytes"} boogie_si_record_i64($i9);
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 738} $p10 := kzalloc($i9, 208);
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 216)), $mul.ref(8, 1));
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p12, $p10);
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 216)), $mul.ref(8, 1));
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.1, $p13);
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, 0);
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    $i17 := $i7;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i18 := $slt.i32(0, $i17);
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(8, 1));
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 742} $p30 := spinlock_check($p29);
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 743} $i31 := _raw_spin_lock_irqsave($p30);
    call {:si_unique_call 744} {:cexpr "irq_flags"} boogie_si_record_i64($i31);
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(96, 1));
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    $i33 := $load.i16($M.1, $p32);
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    $i34 := $zext.i16.i32($i33);
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    $i35 := $sgt.i32($i34, $i17);
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(8, 1));
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 745} spin_unlock_irqrestore($p38, $i31);
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    $i39 := 0;
    goto $bb21;

  $bb18:
    assume $i35 == 1;
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i32.i16($i17);
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(96, 1));
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p37, $i36);
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb10:
    assume $i18 == 1;
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb13;

  $bb13:
    call $p20, $p21, $i22, $p24, $p25, $p26, $i27, $i28, $i19 := xpc_allocate_send_msg_slot_uv_loop_$bb13($p2, $i17, $p20, $p21, $i22, $p24, $p25, $p26, $i27, $i28, $i19);
    goto $bb13_last;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 216)), $mul.ref(8, 1));
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.1, $p20);
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i19);
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p21, $mul.ref($i22, 32)), $mul.ref(8, 1));
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p24, $i19);
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 216)), $mul.ref(24, 1));
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p21, $mul.ref($i22, 32)), $mul.ref(0, 1));
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 740} xpc_put_fifo_entry_uv($p25, $p26);
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    $i27 := $add.i32($i19, 1);
    call {:si_unique_call 741} {:cexpr "entry"} boogie_si_record_i32($i27);
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    $i28 := $slt.i32($i27, $i17);
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i28 == 1);
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb15:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    $i19 := $i27;
    goto $bb15_dummy;

  $bb6:
    assume $i16 == 1;
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i40 := $sub.i32($i7, 1);
    call {:si_unique_call 739} {:cexpr "nentries"} boogie_si_record_i32($i40);
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    $i41 := $sgt.i32($i40, 0);
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i41 == 1);
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb22:
    assume $i41 == 1;
    assume {:verifier.code 0} true;
    $i7 := $i40;
    goto $bb22_dummy;

  $bb15_dummy:
    assume false;
    return;

  $bb13_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3332;

  $bb22_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3310;
}



const xpc_allocate_recv_msg_slot_uv: ref;

axiom xpc_allocate_recv_msg_slot_uv == $sub.ref(0, 395599);

procedure xpc_allocate_recv_msg_slot_uv($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation xpc_allocate_recv_msg_slot_uv($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i16;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $i9: i16;
  var $i10: i32;
  var $i11: i32;
  var $i12: i64;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i16;
  var $i27: i32;
  var $i28: i32;
  var $i29: i64;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $i21: i32;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $p38: ref;
  var $i39: i16;
  var $i40: i32;
  var $i41: i1;
  var $i42: i16;
  var $p43: ref;
  var $p44: ref;
  var $i46: i32;
  var $i47: i1;
  var $i7: i32;
  var $i45: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(432, 1));
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(98, 1));
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.1, $p3);
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i4);
    call {:si_unique_call 746} {:cexpr "nentries"} boogie_si_record_i32($i5);
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    $i6 := $sgt.i32($i5, 0);
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i45 := 13;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    $r := $i45;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    $i7 := $i5;
    goto $bb4;

  $bb4:
    call $p8, $i9, $i10, $i11, $i12, $p13, $p14, $p15, $p16, $i17, $i18, $i19, $i46, $i47, $i7 := xpc_allocate_recv_msg_slot_uv_loop_$bb4($p0, $p2, $p8, $i9, $i10, $i11, $i12, $p13, $p14, $p15, $p16, $i17, $i18, $i19, $i46, $i47, $i7);
    goto $bb4_last;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(94, 1));
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    $i9 := $load.i16($M.1, $p8);
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i9);
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    $i11 := $mul.i32($i10, $i7);
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    call {:si_unique_call 747} {:cexpr "nbytes"} boogie_si_record_i64($i12);
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} $p13 := kzalloc($i12, 208);
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 216)), $mul.ref(16, 1));
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p14, $p13);
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 216)), $mul.ref(16, 1));
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.1, $p15);
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i17, 0);
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    $i19 := $i7;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i20 := $slt.i32(0, $i19);
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(8, 1));
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 751} $p36 := spinlock_check($p35);
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 752} $i37 := _raw_spin_lock_irqsave($p36);
    call {:si_unique_call 753} {:cexpr "irq_flags"} boogie_si_record_i64($i37);
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(98, 1));
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    $i39 := $load.i16($M.1, $p38);
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    $i40 := $zext.i16.i32($i39);
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    $i41 := $sgt.i32($i40, $i19);
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(8, 1));
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 754} spin_unlock_irqrestore($p44, $i37);
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    $i45 := 0;
    goto $bb21;

  $bb18:
    assume $i41 == 1;
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i32.i16($i19);
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(98, 1));
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p43, $i42);
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb10:
    assume $i20 == 1;
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    $i21 := 0;
    goto $bb13;

  $bb13:
    call $p22, $p23, $p24, $p25, $i26, $i27, $i28, $i29, $p32, $i33, $i34, $i21 := xpc_allocate_recv_msg_slot_uv_loop_$bb13($p0, $p2, $i19, $p22, $p23, $p24, $p25, $i26, $i27, $i28, $i29, $p32, $i33, $i34, $i21);
    goto $bb13_last;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 216)), $mul.ref(16, 1));
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.1, $p22);
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(94, 1));
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    $i26 := $load.i16($M.1, $p25);
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    $i27 := $zext.i16.i32($i26);
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    $i28 := $mul.i32($i27, $i21);
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    $i29 := $sext.i32.i64($i28);
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p24, $mul.ref($i29, 24)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p32, $i21);
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    $i33 := $add.i32($i21, 1);
    call {:si_unique_call 750} {:cexpr "entry"} boogie_si_record_i32($i33);
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    $i34 := $slt.i32($i33, $i19);
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i34 == 1);
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb15:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    $i21 := $i33;
    goto $bb15_dummy;

  $bb6:
    assume $i18 == 1;
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i46 := $sub.i32($i7, 1);
    call {:si_unique_call 749} {:cexpr "nentries"} boogie_si_record_i32($i46);
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    $i47 := $sgt.i32($i46, 0);
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i47 == 1);
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb22:
    assume $i47 == 1;
    assume {:verifier.code 0} true;
    $i7 := $i46;
    goto $bb22_dummy;

  $bb15_dummy:
    assume false;
    return;

  $bb13_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3402;

  $bb22_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3378;
}



const kzalloc: ref;

axiom kzalloc == $sub.ref(0, 396631);

procedure kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $i2: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 755} {:cexpr "kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 756} {:cexpr "kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    $i2 := $or.i32($i1, 32768);
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 757} $p3 := kmalloc($i0, $i2);
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const xpc_send_activate_IRQ_ch_uv: ref;

axiom xpc_send_activate_IRQ_ch_uv == $sub.ref(0, 397663);

procedure xpc_send_activate_IRQ_ch_uv($p0: ref, $p1: ref, $p2: ref, $i3: i64, $i4: i32);
  free requires assertsPassed;
  modifies $M.1, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.23, $M.28, $CurrAddr, assertsPassed, $M.0, $M.2;



implementation xpc_send_activate_IRQ_ch_uv($p0: ref, $p1: ref, $p2: ref, $i3: i64, $i4: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $i7: i16;
  var $i8: i64;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} {:cexpr "xpc_send_activate_IRQ_ch_uv:arg:msg_size"} boogie_si_record_i64($i3);
    call {:si_unique_call 759} {:cexpr "xpc_send_activate_IRQ_ch_uv:arg:msg_type"} boogie_si_record_i32($i4);
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    $p5 := $M.3;
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(0, 1));
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    $i7 := $load.i16($M.1, $p6);
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    $i8 := $sext.i16.i64($i7);
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p5, $mul.ref($i8, 872));
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} $i10 := xpc_send_activate_IRQ_uv($p9, $p2, $i3, $i4);
    goto SeqInstr_328, SeqInstr_329;

  SeqInstr_329:
    assume assertsPassed;
    goto SeqInstr_330;

  SeqInstr_330:
    call {:si_unique_call 761} {:cexpr "ret"} boogie_si_record_i32($i10);
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} $i14 := ldv__builtin_expect($i13, 0);
    call {:si_unique_call 763} {:cexpr "tmp___0"} boogie_si_record_i64($i14);
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p1);
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 765} xpc_deactivate_partition(805, $p9, $i10);
    goto SeqInstr_331, SeqInstr_332;

  SeqInstr_332:
    assume assertsPassed;
    goto SeqInstr_333;

  SeqInstr_333:
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p1);
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i21 == 1;
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(8, 1));
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} $p23 := spinlock_check($p22);
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 767} $i24 := _raw_spin_lock_irqsave($p23);
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p1, $i24);
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_331:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i17 == 1;
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(8, 1));
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    $i19 := $load.i64($M.1, $p1);
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} spin_unlock_irqrestore($p18, $i19);
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_328:
    assume !assertsPassed;
    return;
}



const xpc_send_local_activate_IRQ_uv: ref;

axiom xpc_send_local_activate_IRQ_uv == $sub.ref(0, 398695);

procedure xpc_send_local_activate_IRQ_uv($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.23, $M.1;



implementation xpc_send_local_activate_IRQ_uv($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i32;
  var $i12: i8;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 768} {:cexpr "xpc_send_local_activate_IRQ_uv:arg:act_state_req"} boogie_si_record_i32($i1);
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(576, 1));
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 769} $p4 := spinlock_check(xpc_activate_IRQ_rcvd_lock);
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 770} $i5 := _raw_spin_lock_irqsave($p4);
    call {:si_unique_call 771} {:cexpr "irq_flags"} boogie_si_record_i64($i5);
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 296)), $mul.ref(285, 1));
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.1, $p6);
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i8($i1);
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 296)), $mul.ref(285, 1));
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p13, $i12);
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 773} spin_unlock_irqrestore(xpc_activate_IRQ_rcvd_lock, $i5);
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 774} __wake_up(xpc_activate_IRQ_wq, 1, 1, $0.ref);
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    $i10 := $M.23;
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    $i11 := $add.i32($i10, 1);
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    $M.23 := $i11;
    call {:si_unique_call 772} {:cexpr "xpc_activate_IRQ_rcvd"} boogie_si_record_i32($i11);
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const uv_bios_reserved_page_pa: ref;

axiom uv_bios_reserved_page_pa == $sub.ref(0, 399727);

procedure uv_bios_reserved_page_pa($i0: i64, $p1: ref, $p2: ref, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation uv_bios_reserved_page_pa($i0: i64, $p1: ref, $p2: ref, $p3: ref) returns ($r: i64)
{
  var $i4: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 775} {:cexpr "uv_bios_reserved_page_pa:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 1} true;
    call {:si_unique_call 776} $i4 := __VERIFIER_nondet_long();
    call {:si_unique_call 777} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i4);
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const xpc_activate_partition: ref;

axiom xpc_activate_partition == $sub.ref(0, 400759);

procedure xpc_activate_partition($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation xpc_activate_partition($p0: ref)
{
  var $i1: i64;
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i5: i64;
  var $i6: i16;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var vslice_dummy_var_47: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    $p2 := $M.3;
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    $i4 := $sub.i64($i1, $i3);
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    $i5 := $sdiv.i64($i4, 896);
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i64.i16($i5);
    call {:si_unique_call 778} {:cexpr "partid"} boogie_si_record_i16($i6);
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(40, 1));
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} $p8 := spinlock_check($p7);
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 780} $i9 := _raw_spin_lock_irqsave($p8);
    call {:si_unique_call 781} {:cexpr "irq_flags"} boogie_si_record_i64($i9);
    goto corral_source_split_3509;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(112, 1));
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p10, 1);
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(116, 1));
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p11, 24);
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(120, 1));
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p12, 657);
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(40, 1));
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} spin_unlock_irqrestore($p13, $i9);
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    $i14 := $sext.i16.i64($i6);
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    $p15 := $i2p.i64.ref($i14);
    goto corral_source_split_3519;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    $i16 := $sext.i16.i32($i6);
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 783} $p17 := kthread_create_on_node.ref.ref.i32.ref.i32(xpc_activating, $p15, $sub.i32(0, 1), .str.4, $i16);
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} $i19 := IS_ERR($p18);
    call {:si_unique_call 785} {:cexpr "tmp___1"} boogie_si_record_i64($i19);
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    $i20 := $eq.i64($i19, 0);
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p17);
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 787} $i23 := IS_ERR($p22);
    call {:si_unique_call 788} {:cexpr "tmp___3"} boogie_si_record_i64($i23);
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i24 == 1;
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(40, 1));
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 789} $p26 := spinlock_check($p25);
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 790} $i27 := _raw_spin_lock_irqsave($p26);
    call {:si_unique_call 791} {:cexpr "irq_flags"} boogie_si_record_i64($i27);
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(112, 1));
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p28, 0);
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(116, 1));
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p29, 25);
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(120, 1));
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p30, 666);
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(40, 1));
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 792} spin_unlock_irqrestore($p31, $i27);
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 786} vslice_dummy_var_47 := wake_up_process($p17);
    goto corral_source_split_3527;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const xpc_activating: ref;

axiom xpc_activating == $sub.ref(0, 401791);

procedure xpc_activating($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.2, $M.24, $M.40, $M.18, $M.19, $M.20, $M.21, $M.22, $CurrAddr, $M.23, $M.31, $M.28, $M.41, $M.42, $M.0, assertsPassed, $M.43, $M.44, $M.45, $M.32;



implementation xpc_activating($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i16;
  var $p4: ref;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i24;
  var $i28: i24;
  var $i29: i24;
  var $p30: ref;
  var $p31: ref;
  var $i32: i8;
  var $i33: i64;
  var $i34: i64;
  var $i35: i64;
  var $i36: i1;
  var $p37: ref;
  var $i38: i32;
  var $p40: ref;
  var $i41: i32;
  var $i42: i16;
  var $i43: i32;
  var $i44: i1;
  var $p46: ref;
  var $i47: i32;
  var $i48: i1;
  var $p50: ref;
  var $i51: i32;
  var $i52: i16;
  var $p53: ref;
  var $i54: i32;
  var $i55: i1;
  var $p56: ref;
  var vslice_dummy_var_48: i32;
  var vslice_dummy_var_49: i32;
  var vslice_dummy_var_50: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 793} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i64.i16($i2);
    call {:si_unique_call 794} {:cexpr "partid"} boogie_si_record_i16($i3);
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    $p4 := $M.3;
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    $i5 := $sext.i16.i64($i3);
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p4, $mul.ref($i5, 872));
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref($i5, 872)), $mul.ref(40, 1));
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 795} $p8 := spinlock_check($p7);
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 796} $i9 := _raw_spin_lock_irqsave($p8);
    call {:si_unique_call 797} {:cexpr "irq_flags"} boogie_si_record_i64($i9);
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref($i5, 872)), $mul.ref(112, 1));
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.1, $p10);
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 4);
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p4, $mul.ref($i5, 872)), $mul.ref(112, 1));
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p17, 2);
    goto corral_source_split_3569;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p4, $mul.ref($i5, 872)), $mul.ref(116, 1));
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p18, 0);
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p4, $mul.ref($i5, 872)), $mul.ref(120, 1));
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p19, 0);
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p4, $mul.ref($i5, 872)), $mul.ref(40, 1));
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 799} spin_unlock_irqrestore($p20, $i9);
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p21, .str);
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p22, .str.54);
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3580;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p23, .str.6);
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p24, .str.55);
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    $i27 := $load.i24($M.12, $p26);
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    $i28 := $and.i24($i27, $sub.i24(0, 262144));
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    $i29 := $or.i24($i28, 617);
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p26, $i29);
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p30, 0);
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.13, $p31);
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i64($i32);
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    $i34 := $and.i64($i33, 1);
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} $i35 := ldv__builtin_expect($i34, 0);
    call {:si_unique_call 801} {:cexpr "tmp___0"} boogie_si_record_i64($i35);
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i35, 0);
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(40, 1)));
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    $i41 := $sext.i16.i32($i3);
    goto corral_source_split_3605;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i32.i16($i41);
    call {:si_unique_call 803} devirtbounce.2($p40, $i42);
    goto SeqInstr_334, SeqInstr_335;

  SeqInstr_335:
    assume assertsPassed;
    goto SeqInstr_336;

  SeqInstr_336:
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 804} $i43 := xpc_setup_ch_structures($p6);
    goto SeqInstr_337, SeqInstr_338;

  SeqInstr_338:
    assume assertsPassed;
    goto SeqInstr_339;

  SeqInstr_339:
    call {:si_unique_call 805} {:cexpr "tmp___2"} boogie_si_record_i32($i43);
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i43, 0);
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(48, 1)));
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    $i51 := $sext.i16.i32($i3);
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    $i52 := $trunc.i32.i16($i51);
    call {:si_unique_call 813} devirtbounce.2($p50, $i52);
    goto SeqInstr_355, SeqInstr_356;

  SeqInstr_356:
    assume assertsPassed;
    goto SeqInstr_357;

  SeqInstr_357:
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 814} xpc_mark_partition_inactive($p6);
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p4, $mul.ref($i5, 872)), $mul.ref(116, 1));
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.1, $p53);
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i54, 21);
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    assume {:branchcond $i55} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb14:
    assume $i55 == 1;
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(120, 1)));
    call {:si_unique_call 815} devirtbounce.3($p56, $p6);
    goto SeqInstr_358, SeqInstr_359;

  SeqInstr_359:
    assume assertsPassed;
    goto SeqInstr_360;

  SeqInstr_360:
    goto corral_source_split_3631;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    goto $bb16;

  SeqInstr_358:
    assume !assertsPassed;
    return;

  SeqInstr_355:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i44 == 1;
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 806} vslice_dummy_var_49 := xpc_part_ref($p6);
    goto SeqInstr_340, SeqInstr_341;

  SeqInstr_341:
    assume assertsPassed;
    goto SeqInstr_342;

  SeqInstr_342:
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(160, 1)));
    call {:si_unique_call 807} $i47 := devirtbounce.22($p46, $p6);
    goto SeqInstr_343, SeqInstr_344;

  SeqInstr_344:
    assume assertsPassed;
    goto SeqInstr_345;

  SeqInstr_345:
    call {:si_unique_call 808} {:cexpr "tmp___1"} boogie_si_record_i32($i47);
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i47, 0);
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 811} xpc_part_deref($p6);
    goto SeqInstr_349, SeqInstr_350;

  SeqInstr_350:
    assume assertsPassed;
    goto SeqInstr_351;

  SeqInstr_351:
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 812} xpc_teardown_ch_structures($p6);
    goto SeqInstr_352, SeqInstr_353;

  SeqInstr_353:
    assume assertsPassed;
    goto SeqInstr_354;

  SeqInstr_354:
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_352:
    assume !assertsPassed;
    return;

  SeqInstr_349:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i48 == 1;
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 809} vslice_dummy_var_50 := xpc_mark_partition_active($p6);
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} xpc_channel_mgr($p6);
    goto SeqInstr_346, SeqInstr_347;

  SeqInstr_347:
    assume assertsPassed;
    goto SeqInstr_348;

  SeqInstr_348:
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_346:
    assume !assertsPassed;
    return;

  SeqInstr_343:
    assume !assertsPassed;
    return;

  SeqInstr_340:
    assume !assertsPassed;
    return;

  SeqInstr_337:
    assume !assertsPassed;
    return;

  SeqInstr_334:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i36 == 1;
    goto corral_source_split_3599;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    $p37 := $M.5;
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    $i38 := $sext.i16.i32($i3);
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} vslice_dummy_var_48 := __dynamic_dev_dbg.ref.ref.ref.i32($p1, $p37, .str.55, $i38);
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref($i5, 872)), $mul.ref(112, 1));
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p14, 0);
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref($i5, 872)), $mul.ref(40, 1));
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 798} spin_unlock_irqrestore($p15, $i9);
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p4, $mul.ref($i5, 872)), $mul.ref(16, 1));
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p16, 0);
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const xpc_setup_ch_structures: ref;

axiom xpc_setup_ch_structures == $sub.ref(0, 402823);

procedure xpc_setup_ch_structures($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.24, $M.40, $M.18, $M.19, $M.20, $M.21, $M.22, $CurrAddr, $M.2, $M.23, $M.31, $M.28, $M.41, $M.42, $M.0, assertsPassed, $M.43, $M.44, $M.45, $M.32;



implementation xpc_setup_ch_structures($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $i8: i64;
  var $i9: i64;
  var $i10: i64;
  var $i11: i16;
  var $p12: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p22: ref;
  var $p23: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $p30: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i8;
  var $i47: i32;
  var $i48: i1;
  var $p50: ref;
  var $p51: ref;
  var $i52: i64;
  var $p54: ref;
  var $i55: i16;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $i72: i32;
  var $i73: i8;
  var $i74: i32;
  var $i75: i1;
  var $i49: i32;
  var $p76: ref;
  var $i77: i32;
  var $i78: i1;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $i32: i32;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $i21: i32;
  var vslice_dummy_var_51: i32;
  var vslice_dummy_var_52: i32;
  var vslice_dummy_var_53: ref;
  var vslice_dummy_var_54: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 816} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 817} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 818} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 819} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 820} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p0);
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    $p7 := $M.3;
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    $i9 := $sub.i64($i6, $i8);
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    $i10 := $sdiv.i64($i9, 896);
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i64.i16($i10);
    call {:si_unique_call 821} {:cexpr "partid"} boogie_si_record_i16($i11);
    goto corral_source_split_3639;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 822} $p12 := kzalloc(1536, 208);
    goto corral_source_split_3640;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(376, 1));
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p14, $p12);
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(376, 1));
    goto corral_source_split_3644;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.1, $p15);
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i17, 0);
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(464, 1));
    goto corral_source_split_3655;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 824} $p23 := xpc_kzalloc_cacheline_aligned(64, 208, $p22);
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(472, 1));
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p25, $p23);
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(472, 1));
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.1, $p26);
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p27);
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    $i29 := $eq.i64($i28, 0);
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(384, 1));
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p34, 0);
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(392, 1));
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 827} vslice_dummy_var_53 := spinlock_check($p35);
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(392, 1)), $mul.ref(0, 1));
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 828} __raw_spin_lock_init($p39, .str.58, $p1);
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(480, 1));
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 829} atomic_set($p40, 1);
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(488, 1));
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 830} __init_waitqueue_head($p41, .str.59, $p2);
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(364, 1));
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p42, 2);
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(368, 1));
    goto corral_source_split_3691;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 831} atomic_set($p43, 0);
    goto corral_source_split_3692;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(372, 1));
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 832} atomic_set($p44, 0);
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(364, 1));
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.1, $p45);
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i46);
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    $i48 := $sgt.i32($i47, 0);
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i48 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(144, 1)));
    call {:si_unique_call 845} $i77 := devirtbounce.22($p76, $p0);
    goto SeqInstr_361, SeqInstr_362;

  SeqInstr_362:
    assume assertsPassed;
    goto SeqInstr_363;

  SeqInstr_363:
    call {:si_unique_call 846} {:cexpr "ret"} boogie_si_record_i32($i77);
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    $i78 := $ne.i32($i77, 0);
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(264, 1));
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p79, 1);
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    $i21 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    $r := $i21;
    return;

  $bb17:
    assume $i78 == 1;
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(464, 1));
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.1, $p80);
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 847} kfree($p81);
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(472, 1));
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p82, $0.ref);
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    $i32 := $i77;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(376, 1));
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.1, $p83);
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    $p85 := $bitcast.ref.ref($p84);
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 826} kfree($p85);
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(376, 1));
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p86, $0.ref);
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    $i21 := $i32;
    goto $bb3;

  SeqInstr_361:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i48 == 1;
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    $i49 := 0;
    goto $bb12;

  $bb12:
    call $p50, $p51, $i52, $p54, $i55, $p56, $p57, $p58, $p59, $p60, $p61, $p62, $p63, $p66, $p67, $p68, $p69, $p70, $p71, $i72, $i73, $i74, $i75, $i49, vslice_dummy_var_54 := xpc_setup_ch_structures_loop_$bb12($p0, $p3, $p4, $p5, $i11, $p45, $p50, $p51, $i52, $p54, $i55, $p56, $p57, $p58, $p59, $p60, $p61, $p62, $p63, $p66, $p67, $p68, $p69, $p70, $p71, $i72, $i73, $i74, $i75, $i49, vslice_dummy_var_54);
    goto $bb12_last;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(376, 1));
    goto corral_source_split_3704;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.1, $p50);
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    $i52 := $sext.i32.i64($i49);
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    goto corral_source_split_3707;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p51, $mul.ref($i52, 720)), $mul.ref(0, 1));
    goto corral_source_split_3708;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p54, $i11);
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    $i55 := $trunc.i32.i16($i49);
    goto corral_source_split_3710;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p51, $mul.ref($i52, 720)), $mul.ref(92, 1));
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p56, $i55);
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p51, $mul.ref($i52, 720)), $mul.ref(80, 1));
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p57, 65536);
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p51, $mul.ref($i52, 720)), $mul.ref(320, 1));
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} atomic_set($p58, 0);
    goto corral_source_split_3716;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p51, $mul.ref($i52, 720)), $mul.ref(328, 1));
    goto corral_source_split_3717;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 834} atomic_set($p59, 0);
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p51, $mul.ref($i52, 720)), $mul.ref(336, 1));
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} atomic_set($p60, 0);
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p51, $mul.ref($i52, 720)), $mul.ref(100, 1));
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 836} atomic_set($p61, 0);
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p51, $mul.ref($i52, 720)), $mul.ref(204, 1));
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 837} atomic_set($p62, 0);
    goto corral_source_split_3724;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p51, $mul.ref($i52, 720)), $mul.ref(8, 1));
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 838} vslice_dummy_var_54 := spinlock_check($p63);
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($p51, $mul.ref($i52, 720)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_3727;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p66);
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 839} __raw_spin_lock_init($p67, .str.60, $p3);
    goto corral_source_split_3729;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p51, $mul.ref($i52, 720)), $mul.ref(224, 1));
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 840} init_completion($p68);
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p51, $mul.ref($i52, 720)), $mul.ref(104, 1));
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 841} atomic_set($p69, 0);
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p51, $mul.ref($i52, 720)), $mul.ref(112, 1));
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 842} __init_waitqueue_head($p70, .str.61, $p4);
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p51, $mul.ref($i52, 720)), $mul.ref(344, 1));
    goto corral_source_split_3736;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 843} __init_waitqueue_head($p71, .str.62, $p5);
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    $i72 := $add.i32($i49, 1);
    call {:si_unique_call 844} {:cexpr "ch_number"} boogie_si_record_i32($i72);
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    $i73 := $load.i8($M.1, $p45);
    goto corral_source_split_3739;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    $i74 := $zext.i8.i32($i73);
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    $i75 := $sgt.i32($i74, $i72);
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i75 == 1);
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb14:
    assume $i75 == 1;
    assume {:verifier.code 0} true;
    $i49 := $i72;
    goto $bb14_dummy;

  $bb5:
    assume $i29 == 1;
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    $p30 := $M.17;
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 825} vslice_dummy_var_52 := dev_err.ref.ref($p30, .str.57);
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    $i32 := 13;
    goto $bb7;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    $p19 := $M.17;
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 823} vslice_dummy_var_51 := dev_err.ref.ref($p19, .str.56);
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    $i21 := 13;
    goto $bb3;

  $bb14_dummy:
    assume false;
    return;

  $bb12_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3702;
}



const xpc_mark_partition_active: ref;

axiom xpc_mark_partition_active == $sub.ref(0, 403855);

procedure xpc_mark_partition_active($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.1, $CurrAddr;



implementation xpc_mark_partition_active($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i24;
  var $i9: i24;
  var $i10: i24;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i64;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $i19: i64;
  var $p20: ref;
  var $i21: i64;
  var $i22: i64;
  var $i23: i64;
  var $i24: i16;
  var $i25: i32;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $p30: ref;
  var $i31: i8;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $p36: ref;
  var $i37: i32;
  var $i35: i32;
  var $p38: ref;
  var vslice_dummy_var_55: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 848} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3760;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p2, .str);
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p3, .str.41);
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3764;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p4, .str.38);
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p5, .str.42);
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    $i8 := $load.i24($M.12, $p7);
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    $i9 := $and.i24($i8, $sub.i24(0, 262144));
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    $i10 := $or.i24($i9, 373);
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p7, $i10);
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p11, 0);
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.13, $p12);
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i64($i13);
    goto corral_source_split_3778;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    $i15 := $and.i64($i14, 1);
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 849} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 850} {:cexpr "tmp"} boogie_si_record_i64($i16);
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(40, 1));
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 852} $p28 := spinlock_check($p27);
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 853} $i29 := _raw_spin_lock_irqsave($p28);
    call {:si_unique_call 854} {:cexpr "irq_flags"} boogie_si_record_i64($i29);
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(112, 1));
    goto corral_source_split_3797;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.1, $p30);
    goto corral_source_split_3798;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i31);
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 2);
    goto corral_source_split_3800;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i33 == 1);
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(116, 1));
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.1, $p36);
    call {:si_unique_call 855} {:cexpr "ret"} boogie_si_record_i32($i37);
    assume {:verifier.code 0} true;
    $i35 := $i37;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(40, 1));
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 856} spin_unlock_irqrestore($p38, $i29);
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    $r := $i35;
    return;

  $bb4:
    assume $i33 == 1;
    goto corral_source_split_3802;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(112, 1));
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p34, 3);
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    $i35 := 0;
    goto $bb6;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    $p18 := $M.5;
    goto corral_source_split_3784;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p0);
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    $p20 := $M.3;
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    $i22 := $sub.i64($i19, $i21);
    goto corral_source_split_3788;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    $i23 := $sdiv.i64($i22, 896);
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i64.i16($i23);
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    $i25 := $sext.i16.i32($i24);
    goto corral_source_split_3791;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 851} vslice_dummy_var_55 := __dynamic_dev_dbg.ref.ref.ref.i32($p1, $p18, .str.42, $i25);
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const xpc_channel_mgr: ref;

axiom xpc_channel_mgr == $sub.ref(0, 404887);

procedure xpc_channel_mgr($p0: ref);
  free requires assertsPassed;
  modifies $M.18, $M.19, $M.20, $M.21, $M.22, $M.2, $M.1, $M.31, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $CurrAddr, $M.23, $M.28, $M.24, $M.40, $M.0, $M.32, assertsPassed, $M.41, $M.42, $M.43, $M.44, $M.45;



implementation xpc_channel_mgr($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p26: ref;
  var $p27: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $i37: i1;
  var $p38: ref;
  var $i39: i8;
  var $i40: i32;
  var $i41: i1;
  var $p42: ref;
  var $i43: i32;
  var $i44: i1;
  var $i45: i32;
  var $i46: i1;
  var $p47: ref;
  var $i48: i32;
  var $i49: i1;
  var $i50: i32;
  var $i51: i1;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i8;
  var $i56: i32;
  var $i57: i1;
  var $p58: ref;
  var $i59: i32;
  var $i60: i1;
  var $i61: i32;
  var $i62: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 857} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3813;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $p2, $p3, $i4, $i5, $p6, $p7, $i8, $i9, $p10, $i11, $i12, $i13, $p14, $i15, $i16, $i17, $i18, $p19, $p20, $p22, $p23, $p24, $p26, $p27, $p29, $p30, $p31, $i32, $i33, $p34, $p35, $i36, $i37, $p38, $i39, $i40, $i41, $p42, $i43, $i44, $i45, $i46, $p47, $i48, $i49, $i50, $i51, $p52, $p53, $p54, $i55, $i56, $i57, $p58, $i59, $i60, $i61, $i62 := xpc_channel_mgr_loop_$bb1($p0, $p1, $p2, $p3, $i4, $i5, $p6, $p7, $i8, $i9, $p10, $i11, $i12, $i13, $p14, $i15, $i16, $i17, $i18, $p19, $p20, $p22, $p23, $p24, $p26, $p27, $p29, $p30, $p31, $i32, $i33, $p34, $p35, $i36, $i37, $p38, $i39, $i40, $i41, $p42, $i43, $i44, $i45, $i46, $p47, $i48, $i49, $i50, $i51, $p52, $p53, $p54, $i55, $i56, $i57, $p58, $i59, $i60, $i61, $i62);
    goto $bb1_last;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    $i55 := $load.i8($M.1, $p54);
    goto corral_source_split_3816;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    $i56 := $zext.i8.i32($i55);
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    $i57 := $ne.i32($i56, 4);
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i57 == 1);
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(368, 1));
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 883} $i59 := atomic_read($p58);
    call {:si_unique_call 884} {:cexpr "tmp___8"} boogie_si_record_i32($i59);
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    $i60 := $sgt.i32($i59, 0);
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i60 == 1);
    goto corral_source_split_3928;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 885} $i61 := xpc_partition_disengaged($p0);
    goto SeqInstr_376, SeqInstr_377;

  SeqInstr_377:
    assume assertsPassed;
    goto SeqInstr_378;

  SeqInstr_378:
    call {:si_unique_call 886} {:cexpr "tmp___9"} boogie_si_record_i32($i61);
    goto corral_source_split_3929;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    $i62 := $eq.i32($i61, 0);
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i62 == 1);
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    return;

  $bb46:
    assume $i62 == 1;
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 858} xpc_process_sent_chctl_flags($p0);
    goto SeqInstr_364, SeqInstr_365;

  SeqInstr_365:
    assume assertsPassed;
    goto SeqInstr_366;

  SeqInstr_366:
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(480, 1));
    goto corral_source_split_3821;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 859} atomic_dec($p2);
    goto SeqInstr_367, SeqInstr_368;

  SeqInstr_368:
    assume assertsPassed;
    goto SeqInstr_369;

  SeqInstr_369:
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(480, 1));
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 860} $i4 := atomic_read($p3);
    call {:si_unique_call 861} {:cexpr "tmp___5"} boogie_si_record_i32($i4);
    goto corral_source_split_3824;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    $i5 := $sle.i32($i4, 0);
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(480, 1));
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 882} atomic_set($p53, 1);
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    goto corral_source_split_3917_dummy;

  $bb3:
    assume $i5 == 1;
    goto corral_source_split_3827;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(384, 1));
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_3829;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.1, $p7);
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb5;

  $bb6:
    assume $i9 == 1;
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(112, 1));
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.1, $p10);
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 4);
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i13 == 1);
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(368, 1));
    goto corral_source_split_3842;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 862} $i15 := atomic_read($p14);
    call {:si_unique_call 863} {:cexpr "tmp___6"} boogie_si_record_i32($i15);
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i16 == 1);
    goto corral_source_split_3868;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 868} $i17 := xpc_partition_disengaged($p0);
    goto SeqInstr_370, SeqInstr_371;

  SeqInstr_371:
    assume assertsPassed;
    goto SeqInstr_372;

  SeqInstr_372:
    call {:si_unique_call 869} {:cexpr "tmp___7"} boogie_si_record_i32($i17);
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 0);
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb13:
    assume $i18 == 1;
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 864} $p19 := get_current();
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    $M.18 := $store.i32($M.18, $p20, 0);
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    goto corral_source_split_3849;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    $M.19 := $store.ref($M.19, $p22, $p19);
    goto corral_source_split_3851;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    $M.20 := $store.ref($M.20, $p23, autoremove_wake_function);
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3854;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    $M.21 := $store.ref($M.21, $p26, $p24);
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(8, 1));
    goto corral_source_split_3858;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    $M.22 := $store.ref($M.22, $p29, $p27);
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(488, 1));
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 865} prepare_to_wait($p30, $p1, 1);
    goto corral_source_split_3861;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(480, 1));
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 866} $i32 := atomic_read($p31);
    call {:si_unique_call 867} {:cexpr "tmp___0"} boogie_si_record_i32($i32);
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    $i33 := $sgt.i32($i32, 0);
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb17;

  $bb17:
    assume !($i33 == 1);
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    call $p34, $p35, $i36, $i37, $p38, $i39, $i40, $i41, $p42, $i43, $i44, $i45, $i46, $p47, $i48, $i49, $i50, $i51 := xpc_channel_mgr_loop_$bb18($p0, $p1, $p30, $p31, $p34, $p35, $i36, $i37, $p38, $i39, $i40, $i41, $p42, $i43, $i44, $i45, $i46, $p47, $i48, $i49, $i50, $i51);
    goto $bb18_last;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    $i36 := $load.i64($M.1, $p35);
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    $i37 := $ne.i64($i36, 0);
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i37 == 1);
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(112, 1));
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.1, $p38);
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i39);
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i40, 4);
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 875} $p47 := get_current();
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 876} $i48 := signal_pending($p47);
    call {:si_unique_call 877} {:cexpr "tmp___4"} boogie_si_record_i32($i48);
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i48, 0);
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(488, 1));
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 870} finish_wait($p52, $p1);
    goto corral_source_split_3892;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb33:
    assume $i49 == 1;
    goto corral_source_split_3909;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 878} schedule();
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 879} prepare_to_wait($p30, $p1, 1);
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 880} $i50 := atomic_read($p31);
    call {:si_unique_call 881} {:cexpr "tmp___0"} boogie_si_record_i32($i50);
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    $i51 := $sgt.i32($i50, 0);
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume !($i51 == 1);
    goto $bb37_dummy;

  $bb21:
    assume $i51 == 1;
    goto corral_source_split_3889;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb23:
    assume $i41 == 1;
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(368, 1));
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 871} $i43 := atomic_read($p42);
    call {:si_unique_call 872} {:cexpr "tmp___1"} boogie_si_record_i32($i43);
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i43, 0);
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb25:
    assume $i44 == 1;
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 873} $i45 := xpc_partition_disengaged($p0);
    goto SeqInstr_373, SeqInstr_374;

  SeqInstr_374:
    assume assertsPassed;
    goto SeqInstr_375;

  SeqInstr_375:
    call {:si_unique_call 874} {:cexpr "tmp___2"} boogie_si_record_i32($i45);
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb27:
    assume $i46 == 1;
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    goto $bb22;

  SeqInstr_373:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i37 == 1;
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb15:
    assume {:verifier.code 0} true;
    assume $i33 == 1;
    goto $bb16;

  SeqInstr_370:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i16 == 1;
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb8:
    assume $i13 == 1;
    goto corral_source_split_3839;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    goto $bb10;

  SeqInstr_367:
    assume !assertsPassed;
    return;

  SeqInstr_364:
    assume !assertsPassed;
    return;

  SeqInstr_376:
    assume !assertsPassed;
    return;

  $bb44:
    assume $i60 == 1;
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb42:
    assume $i57 == 1;
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb37_dummy:
    assume false;
    return;

  $bb18_last:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(384, 1));
    goto corral_source_split_3876;

  corral_source_split_3917_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(112, 1));
    goto corral_source_split_3815;
}



const xpc_teardown_ch_structures: ref;

axiom xpc_teardown_ch_structures == $sub.ref(0, 405919);

procedure xpc_teardown_ch_structures($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.18, $M.19, $M.20, $M.21, $M.22, $CurrAddr, $M.23, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.28, assertsPassed, $M.0, $M.2;



implementation xpc_teardown_ch_structures($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p13: ref;
  var $p14: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 887} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(264, 1));
    goto corral_source_split_3937;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p2, 2);
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(360, 1));
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 888} $i4 := atomic_read($p3);
    call {:si_unique_call 889} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 893} $p6 := get_current();
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    $M.18 := $store.i32($M.18, $p7, 0);
    goto corral_source_split_3962;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3964;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    $M.19 := $store.ref($M.19, $p9, $p6);
    goto corral_source_split_3965;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3966;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    $M.20 := $store.ref($M.20, $p10, autoremove_wake_function);
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3968;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    $M.21 := $store.ref($M.21, $p13, $p11);
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(8, 1));
    goto corral_source_split_3972;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    $M.22 := $store.ref($M.22, $p16, $p14);
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(272, 1));
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 894} prepare_to_wait($p17, $p1, 2);
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(360, 1));
    goto corral_source_split_3976;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 895} $i19 := atomic_read($p18);
    call {:si_unique_call 896} {:cexpr "tmp___1"} boogie_si_record_i32($i19);
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 0);
    goto corral_source_split_3978;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i20 == 1);
    goto corral_source_split_3980;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    call $i21, $i22 := xpc_teardown_ch_structures_loop_$bb8($p1, $p17, $p18, $i21, $i22);
    goto $bb8_last;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 898} schedule();
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 899} prepare_to_wait($p17, $p1, 2);
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 900} $i21 := atomic_read($p18);
    call {:si_unique_call 901} {:cexpr "tmp___1"} boogie_si_record_i32($i21);
    goto corral_source_split_3989;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 0);
    goto corral_source_split_3990;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb12_dummy;

  $bb9:
    assume $i22 == 1;
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(272, 1));
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 897} finish_wait($p23, $p1);
    goto corral_source_split_3985;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(152, 1)));
    call {:si_unique_call 890} devirtbounce.3($p24, $p0);
    goto SeqInstr_379, SeqInstr_380;

  SeqInstr_380:
    assume assertsPassed;
    goto SeqInstr_381;

  SeqInstr_381:
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(464, 1));
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.1, $p25);
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 891} kfree($p26);
    goto corral_source_split_3948;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(472, 1));
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p27, $0.ref);
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(376, 1));
    goto corral_source_split_3951;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.1, $p28);
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 892} kfree($p30);
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(376, 1));
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p31, $0.ref);
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(264, 1));
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p32, 3);
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_379:
    assume !assertsPassed;
    return;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb12_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto $bb11;
}



const xpc_mark_partition_inactive: ref;

axiom xpc_mark_partition_inactive == $sub.ref(0, 406951);

procedure xpc_mark_partition_inactive($p0: ref);
  free requires assertsPassed;
  modifies $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.1, $CurrAddr;



implementation xpc_mark_partition_inactive($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i24;
  var $i9: i24;
  var $i10: i24;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i64;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $i19: i64;
  var $p20: ref;
  var $i21: i64;
  var $i22: i64;
  var $i23: i64;
  var $i24: i16;
  var $i25: i32;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var vslice_dummy_var_56: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 902} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3992;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p2, .str);
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3995;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p3, .str.45);
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3997;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p4, .str.38);
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p5, .str.46);
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    $i8 := $load.i24($M.12, $p7);
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    $i9 := $and.i24($i8, $sub.i24(0, 262144));
    goto corral_source_split_4004;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    $i10 := $or.i24($i9, 445);
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p7, $i10);
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p11, 0);
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.13, $p12);
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i64($i13);
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    $i15 := $and.i64($i14, 1);
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 903} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 904} {:cexpr "tmp"} boogie_si_record_i64($i16);
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(40, 1));
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 906} $p28 := spinlock_check($p27);
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 907} $i29 := _raw_spin_lock_irqsave($p28);
    call {:si_unique_call 908} {:cexpr "irq_flags"} boogie_si_record_i64($i29);
    goto corral_source_split_4029;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(112, 1));
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p30, 0);
    goto corral_source_split_4031;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(40, 1));
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 909} spin_unlock_irqrestore($p31, $i29);
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(16, 1));
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p32, 0);
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    $p18 := $M.5;
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p0);
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    $p20 := $M.3;
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    $i22 := $sub.i64($i19, $i21);
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    $i23 := $sdiv.i64($i22, 896);
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i64.i16($i23);
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    $i25 := $sext.i16.i32($i24);
    goto corral_source_split_4024;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 905} vslice_dummy_var_56 := __dynamic_dev_dbg.ref.ref.ref.i32($p1, $p18, .str.46, $i25);
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const prepare_to_wait: ref;

axiom prepare_to_wait == $sub.ref(0, 407983);

procedure prepare_to_wait($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;



implementation prepare_to_wait($p0: ref, $p1: ref, $i2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 910} {:cexpr "prepare_to_wait:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    return;
}



const xpc_process_sent_chctl_flags: ref;

axiom xpc_process_sent_chctl_flags == $sub.ref(0, 409015);

procedure xpc_process_sent_chctl_flags($p0: ref);
  free requires assertsPassed;
  modifies $M.31, $M.1, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $CurrAddr, $M.24, $M.40, $M.18, $M.19, $M.20, $M.21, $M.22, $M.0, $M.2, $M.23, $M.32, assertsPassed, $M.28, $M.41, $M.42, $M.43, $M.44, $M.45;



implementation xpc_process_sent_chctl_flags($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $p14: ref;
  var $i15: i64;
  var $p16: ref;
  var $p17: ref;
  var $i18: i8;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $i22: i64;
  var $p23: ref;
  var $p24: ref;
  var $i25: i8;
  var $i26: i32;
  var $i27: i8;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $p35: ref;
  var $i36: i64;
  var $p37: ref;
  var $i38: i8;
  var $i39: i32;
  var $i40: i1;
  var $i41: i32;
  var $i42: i1;
  var $i43: i32;
  var $i44: i1;
  var $i46: i64;
  var $p47: ref;
  var $p48: ref;
  var $i49: i8;
  var $i50: i32;
  var $i51: i32;
  var $i52: i1;
  var $p53: ref;
  var $i54: i32;
  var $i55: i8;
  var $i56: i32;
  var $i57: i1;
  var $i10: i32;
  var vslice_dummy_var_57: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 911} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 912} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(168, 1)));
    call {:si_unique_call 913} $i4 := devirtbounce.23($p3, $p0);
    goto corral_source_split_4040;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p2);
    goto corral_source_split_4041;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    $M.31 := $store.i64($M.31, $p5, $i4);
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(364, 1));
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.1, $p6);
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    $i9 := $sgt.i32($i8, 0);
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb4;

  $bb4:
    call $p11, $p12, $i13, $p14, $i15, $p16, $p17, $i18, $i19, $i20, $i21, $i22, $p23, $p24, $i25, $i26, $i27, $p28, $i29, $i30, $i31, $p32, $p33, $i34, $p35, $i36, $p37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i46, $p47, $p48, $i49, $i50, $i51, $i52, $p53, $i54, $i55, $i56, $i57, $i10, vslice_dummy_var_57 := xpc_process_sent_chctl_flags_loop_$bb4($p0, $p1, $p2, $p6, $p11, $p12, $i13, $p14, $i15, $p16, $p17, $i18, $i19, $i20, $i21, $i22, $p23, $p24, $i25, $i26, $i27, $p28, $i29, $i30, $i31, $p32, $p33, $i34, $p35, $i36, $p37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i46, $p47, $p48, $i49, $i50, $i51, $i52, $p53, $i54, $i55, $i56, $i57, $i10, vslice_dummy_var_57);
    goto $bb4_last;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(376, 1));
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.1, $p11);
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i10);
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p12, $mul.ref($i13, 720));
    goto corral_source_split_4055;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i10);
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p2);
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 2)), $mul.ref($i15, 1));
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.31, $p17);
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_4060;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    $i20 := $and.i32($i19, 31);
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p12, $mul.ref($i13, 720)), $mul.ref(80, 1));
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.1, $p28);
    call {:si_unique_call 915} {:cexpr "ch_flags"} boogie_si_record_i32($i29);
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    $i30 := $and.i32($i29, 131072);
    goto corral_source_split_4075;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_4076;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(112, 1));
    goto corral_source_split_4093;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.1, $p37);
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i38);
    goto corral_source_split_4095;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i39, 4);
    goto corral_source_split_4096;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i41 := $and.i32($i29, 1024);
    goto corral_source_split_4100;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i41, 0);
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i46 := $sext.i32.i64($i10);
    goto corral_source_split_4110;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p2);
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p47, $mul.ref(0, 2)), $mul.ref($i46, 1));
    goto corral_source_split_4112;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    $i49 := $load.i8($M.31, $p48);
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i32($i49);
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    $i51 := $and.i32($i50, 32);
    goto corral_source_split_4115;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, 0);
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i54 := $add.i32($i10, 1);
    call {:si_unique_call 920} {:cexpr "ch_number"} boogie_si_record_i32($i54);
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    $i55 := $load.i8($M.1, $p6);
    goto corral_source_split_4089;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    $i56 := $zext.i8.i32($i55);
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    $i57 := $sgt.i32($i56, $i54);
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i57 == 1);
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb25:
    assume $i57 == 1;
    assume {:verifier.code 0} true;
    $i10 := $i54;
    goto $bb25_dummy;

  $bb22:
    assume $i52 == 1;
    goto corral_source_split_4118;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(216, 1)));
    call {:si_unique_call 922} devirtbounce.24($p53, $p0, $i10);
    goto SeqInstr_391, SeqInstr_392;

  SeqInstr_392:
    assume assertsPassed;
    goto SeqInstr_393;

  SeqInstr_393:
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    goto $bb24;

  SeqInstr_391:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i42 == 1;
    goto corral_source_split_4103;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    $i43 := $and.i32($i29, 64);
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i43, 0);
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb18:
    assume $i44 == 1;
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 921} vslice_dummy_var_57 := xpc_connect_channel($p14);
    goto SeqInstr_388, SeqInstr_389;

  SeqInstr_389:
    assume assertsPassed;
    goto SeqInstr_390;

  SeqInstr_390:
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    goto $bb20;

  SeqInstr_388:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i40 == 1;
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb9:
    assume $i31 == 1;
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p12, $mul.ref($i13, 720)), $mul.ref(8, 1));
    goto corral_source_split_4079;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 916} $p33 := spinlock_check($p32);
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 917} $i34 := _raw_spin_lock_irqsave($p33);
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p1, $i34);
    goto corral_source_split_4082;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 918} xpc_process_disconnect($p14, $p1);
    goto SeqInstr_385, SeqInstr_386;

  SeqInstr_386:
    assume assertsPassed;
    goto SeqInstr_387;

  SeqInstr_387:
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p12, $mul.ref($i13, 720)), $mul.ref(8, 1));
    goto corral_source_split_4084;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    $i36 := $load.i64($M.1, $p1);
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 919} spin_unlock_irqrestore($p35, $i36);
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    goto $bb11;

  SeqInstr_385:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i21 == 1;
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i10);
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p2);
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 2)), $mul.ref($i22, 1));
    goto corral_source_split_4067;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.31, $p24);
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i25);
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i32.i8($i26);
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 914} xpc_process_openclose_chctl_flags($p0, $i10, $i27);
    goto SeqInstr_382, SeqInstr_383;

  SeqInstr_383:
    assume assertsPassed;
    goto SeqInstr_384;

  SeqInstr_384:
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_382:
    assume !assertsPassed;
    return;

  $bb25_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4050;
}



const atomic_set: ref;

axiom atomic_set == $sub.ref(0, 410047);

procedure atomic_set($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation atomic_set($p0: ref, $i1: i32)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 923} {:cexpr "atomic_set:arg:i"} boogie_si_record_i32($i1);
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_4124;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p2, $i1);
    goto corral_source_split_4125;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    return;
}



const xpc_process_openclose_chctl_flags: ref;

axiom xpc_process_openclose_chctl_flags == $sub.ref(0, 411079);

procedure xpc_process_openclose_chctl_flags($p0: ref, $i1: i32, $i2: i8);
  free requires assertsPassed;
  modifies $M.1, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $CurrAddr, $M.24, $M.40, $M.18, $M.19, $M.20, $M.21, $M.22, $M.0, $M.2, $M.23, $M.28, $M.31, $M.41, $M.42, assertsPassed, $M.43, $M.44, $M.45, $M.32;



implementation xpc_process_openclose_chctl_flags($p0: ref, $i1: i32, $i2: i8)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i8;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $i31: i8;
  var $p32: ref;
  var $i33: i8;
  var $i34: i32;
  var $i35: i32;
  var $i36: i32;
  var $i37: i8;
  var $p38: ref;
  var $i40: i32;
  var $i41: i32;
  var $i42: i1;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i24;
  var $i51: i24;
  var $i52: i24;
  var $p53: ref;
  var $p54: ref;
  var $i55: i8;
  var $i56: i64;
  var $i57: i64;
  var $i58: i64;
  var $i59: i1;
  var $p60: ref;
  var $p61: ref;
  var $i62: i16;
  var $i63: i32;
  var $p64: ref;
  var $i65: i16;
  var $i66: i32;
  var $p67: ref;
  var $i68: i16;
  var $i69: i32;
  var $p71: ref;
  var $i72: i32;
  var $i73: i32;
  var $i74: i1;
  var $i76: i32;
  var $i77: i32;
  var $i78: i8;
  var $p79: ref;
  var $i80: i32;
  var $i81: i32;
  var $p82: ref;
  var $i75: i8;
  var $p83: ref;
  var $i84: i32;
  var $i85: i32;
  var $i86: i1;
  var $i87: i32;
  var $i88: i32;
  var $i89: i1;
  var $i90: i64;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $i94: i8;
  var $i95: i32;
  var $i96: i32;
  var $i97: i1;
  var $p98: ref;
  var $i99: i64;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $i103: i8;
  var $i104: i32;
  var $i105: i32;
  var $i106: i8;
  var $i107: i64;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $i115: i32;
  var $i116: i32;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $i120: i32;
  var $i121: i32;
  var $p122: ref;
  var $i123: i32;
  var $i124: i32;
  var $i125: i8;
  var $p126: ref;
  var $i127: i32;
  var $i128: i32;
  var $p129: ref;
  var $p130: ref;
  var $i131: i32;
  var $i132: i32;
  var $i133: i1;
  var $p134: ref;
  var $i135: i16;
  var $i136: i32;
  var $i137: i1;
  var $i138: i1;
  var $i140: i1;
  var $i141: i32;
  var $i139: i32;
  var $i43: i8;
  var $i142: i8;
  var $i143: i32;
  var $i144: i32;
  var $i145: i1;
  var $p146: ref;
  var $p147: ref;
  var $p148: ref;
  var $p149: ref;
  var $p150: ref;
  var $p151: ref;
  var $i152: i24;
  var $i153: i24;
  var $i154: i24;
  var $p155: ref;
  var $p156: ref;
  var $i157: i8;
  var $i158: i64;
  var $i159: i64;
  var $i160: i64;
  var $i161: i1;
  var $p162: ref;
  var $p163: ref;
  var $i164: i16;
  var $i165: i32;
  var $p166: ref;
  var $i167: i16;
  var $i168: i32;
  var $p170: ref;
  var $i171: i32;
  var $i172: i32;
  var $i173: i1;
  var $p174: ref;
  var $i175: i32;
  var $i176: i32;
  var $i177: i1;
  var $i178: i64;
  var $p179: ref;
  var $p180: ref;
  var $p181: ref;
  var $i182: i8;
  var $i183: i32;
  var $i184: i32;
  var $i185: i1;
  var $p186: ref;
  var $i187: i64;
  var $p188: ref;
  var $p189: ref;
  var $p190: ref;
  var $i191: i8;
  var $i192: i32;
  var $i193: i32;
  var $i194: i8;
  var $i195: i64;
  var $p196: ref;
  var $p197: ref;
  var $p198: ref;
  var $p199: ref;
  var $p200: ref;
  var $i201: i32;
  var $i202: i32;
  var $p203: ref;
  var $p204: ref;
  var $i205: i32;
  var $i206: i32;
  var $i207: i1;
  var $i208: i32;
  var $i209: i32;
  var $i210: i1;
  var $p211: ref;
  var $p212: ref;
  var $p213: ref;
  var $p214: ref;
  var $p215: ref;
  var $p216: ref;
  var $i217: i24;
  var $i218: i24;
  var $i219: i24;
  var $p220: ref;
  var $p221: ref;
  var $i222: i8;
  var $i223: i64;
  var $i224: i64;
  var $i225: i64;
  var $i226: i1;
  var $p227: ref;
  var $p228: ref;
  var $i229: i16;
  var $i230: i32;
  var $p231: ref;
  var $i232: i16;
  var $i233: i32;
  var $p234: ref;
  var $i235: i16;
  var $i236: i32;
  var $p237: ref;
  var $i238: i16;
  var $i239: i32;
  var $p241: ref;
  var $i242: i8;
  var $i243: i32;
  var $i244: i1;
  var $p245: ref;
  var $i246: i32;
  var $i247: i32;
  var $i248: i1;
  var $p249: ref;
  var $i250: i32;
  var $i251: i32;
  var $i252: i1;
  var $p253: ref;
  var $i254: i8;
  var $i255: i32;
  var $i256: i32;
  var $i257: i8;
  var $p258: ref;
  var $p259: ref;
  var $i260: i16;
  var $i261: i32;
  var $i262: i1;
  var $p263: ref;
  var $i264: i16;
  var $i265: i32;
  var $i266: i1;
  var $p267: ref;
  var $i268: i32;
  var $i269: i32;
  var $p270: ref;
  var $p271: ref;
  var $i272: i16;
  var $p273: ref;
  var $p274: ref;
  var $i275: i32;
  var $i276: i32;
  var $i277: i1;
  var $p278: ref;
  var $i279: i16;
  var $i280: i32;
  var $p281: ref;
  var $i282: i16;
  var $i283: i32;
  var $i284: i1;
  var $p285: ref;
  var $i286: i16;
  var $p287: ref;
  var $p288: ref;
  var $p289: ref;
  var $p290: ref;
  var $i291: i32;
  var $i292: i32;
  var $p293: ref;
  var $p294: ref;
  var $i295: i32;
  var $i296: i32;
  var $i297: i1;
  var $p298: ref;
  var $p299: ref;
  var $p300: ref;
  var $p301: ref;
  var $p302: ref;
  var $p303: ref;
  var $i304: i24;
  var $i305: i24;
  var $i306: i24;
  var $p307: ref;
  var $p308: ref;
  var $i309: i8;
  var $i310: i64;
  var $i311: i64;
  var $i312: i64;
  var $i313: i1;
  var $p314: ref;
  var $p315: ref;
  var $i316: i64;
  var $p317: ref;
  var $i318: i16;
  var $i319: i32;
  var $p320: ref;
  var $i321: i16;
  var $i322: i32;
  var $p323: ref;
  var $i324: i16;
  var $i325: i32;
  var $p326: ref;
  var $i327: i16;
  var $i328: i32;
  var $p330: ref;
  var $i331: i32;
  var $i332: i32;
  var $i333: i1;
  var $p334: ref;
  var $i335: i32;
  var $i336: i32;
  var $i337: i1;
  var $p338: ref;
  var $p339: ref;
  var $i340: i64;
  var $i341: i32;
  var $i342: i1;
  var $p343: ref;
  var $i344: i32;
  var $i345: i32;
  var $p346: ref;
  var $p347: ref;
  var $i348: i16;
  var $i349: i32;
  var $p350: ref;
  var $i351: i16;
  var $i352: i32;
  var $i353: i1;
  var $p354: ref;
  var $p355: ref;
  var $p356: ref;
  var $p357: ref;
  var $p358: ref;
  var $p359: ref;
  var $i360: i24;
  var $i361: i24;
  var $i362: i24;
  var $p363: ref;
  var $p364: ref;
  var $i365: i8;
  var $i366: i64;
  var $i367: i64;
  var $i368: i64;
  var $i369: i1;
  var $p370: ref;
  var $p371: ref;
  var $i372: i16;
  var $i373: i32;
  var $p374: ref;
  var $i375: i16;
  var $i376: i32;
  var $p377: ref;
  var $i378: i16;
  var $i379: i32;
  var $p380: ref;
  var $i381: i16;
  var $i382: i32;
  var $p384: ref;
  var $i385: i16;
  var $p386: ref;
  var $p387: ref;
  var $i388: i16;
  var $i389: i32;
  var $p390: ref;
  var $i391: i16;
  var $i392: i32;
  var $i393: i1;
  var $p394: ref;
  var $p395: ref;
  var $p396: ref;
  var $p397: ref;
  var $p398: ref;
  var $p399: ref;
  var $i400: i24;
  var $i401: i24;
  var $i402: i24;
  var $p403: ref;
  var $p404: ref;
  var $i405: i8;
  var $i406: i64;
  var $i407: i64;
  var $i408: i64;
  var $i409: i1;
  var $p410: ref;
  var $p411: ref;
  var $i412: i16;
  var $i413: i32;
  var $p414: ref;
  var $i415: i16;
  var $i416: i32;
  var $p417: ref;
  var $i418: i16;
  var $i419: i32;
  var $p420: ref;
  var $i421: i16;
  var $i422: i32;
  var $p424: ref;
  var $i425: i16;
  var $p426: ref;
  var $i427: i32;
  var $i428: i32;
  var $i429: i1;
  var $p430: ref;
  var $p431: ref;
  var $p432: ref;
  var $p433: ref;
  var $p434: ref;
  var $p435: ref;
  var $i436: i24;
  var $i437: i24;
  var $i438: i24;
  var $p439: ref;
  var $p440: ref;
  var $i441: i8;
  var $i442: i64;
  var $i443: i64;
  var $i444: i64;
  var $i445: i1;
  var $p446: ref;
  var $p447: ref;
  var $i448: i16;
  var $i449: i32;
  var $p450: ref;
  var $i451: i16;
  var $i452: i32;
  var $p454: ref;
  var $i455: i32;
  var $i456: i32;
  var $i457: i1;
  var $p458: ref;
  var $i459: i32;
  var $i460: i32;
  var $i461: i1;
  var $p462: ref;
  var $i463: i32;
  var $i464: i32;
  var $i465: i1;
  var $p466: ref;
  var $i467: i32;
  var $i468: i32;
  var $p469: ref;
  var $i470: i32;
  var $i39: i32;
  var $p471: ref;
  var $i472: i64;
  var $i473: i1;
  var vslice_dummy_var_58: i32;
  var vslice_dummy_var_59: i32;
  var vslice_dummy_var_60: i32;
  var vslice_dummy_var_61: i32;
  var vslice_dummy_var_62: i32;
  var vslice_dummy_var_63: i32;
  var vslice_dummy_var_64: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 924} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 925} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 926} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 927} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 928} $p7 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 929} $p8 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 930} $p9 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 931} $p10 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 932} {:cexpr "xpc_process_openclose_chctl_flags:arg:ch_number"} boogie_si_record_i32($i1);
    call {:si_unique_call 933} {:cexpr "xpc_process_openclose_chctl_flags:arg:chctl_flags"} boogie_si_record_i8($i2);
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(472, 1));
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.1, $p11);
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i1);
    goto corral_source_split_4130;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(376, 1));
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.1, $p15);
    goto corral_source_split_4133;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i1);
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($p16, $mul.ref($i17, 720));
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p16, $mul.ref($i17, 720)), $mul.ref(8, 1));
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 934} $p20 := spinlock_check($p19);
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 935} $i21 := _raw_spin_lock_irqsave($p20);
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p3, $i21);
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    $i22 := $i2;
    goto $bb1;

  $bb1:
    call $i22, $p23, $i24, $i25, $i26, $p27, $i28, $i29, $i30, $i31, $i40, $i41, $i42, $p44, $p45, $p46, $p47, $p48, $p49, $i50, $i51, $i52, $p53, $p54, $i55, $i56, $i57, $i58, $i59, $p60, $p61, $i62, $i63, $p64, $i65, $i66, $p67, $i68, $i69, $p71, $i72, $i73, $i74, $i76, $i77, $i78, $p79, $i80, $i81, $p82, $i75, $i43, vslice_dummy_var_58 := xpc_process_openclose_chctl_flags_loop_$bb1($p3, $p4, $p12, $i13, $p16, $i17, $p18, $i22, $p23, $i24, $i25, $i26, $p27, $i28, $i29, $i30, $i31, $i40, $i41, $i42, $p44, $p45, $p46, $p47, $p48, $p49, $i50, $i51, $i52, $p53, $p54, $i55, $i56, $i57, $i58, $i59, $p60, $p61, $i62, $i63, $p64, $i65, $i66, $p67, $i68, $i69, $p71, $i72, $i73, $i74, $i76, $i77, $i78, $p79, $i80, $i81, $p82, $i75, $i43, vslice_dummy_var_58);
    goto $bb1_last;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p16, $mul.ref($i17, 720)), $mul.ref(80, 1));
    goto corral_source_split_4142;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.1, $p23);
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    $i25 := $and.i32($i24, 65536);
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_4145;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i22);
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    $i41 := $and.i32($i40, 1);
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    $i43 := $i22;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i142 := $i43;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    $i143 := $zext.i8.i32($i142);
    goto corral_source_split_4315;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    $i144 := $and.i32($i143, 2);
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    $i145 := $ne.i32($i144, 0);
    goto corral_source_split_4317;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    assume {:branchcond $i145} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i145 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $i208 := $zext.i8.i32($i142);
    goto corral_source_split_4407;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    $i209 := $and.i32($i208, 4);
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    $i210 := $ne.i32($i209, 0);
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    assume {:branchcond $i210} true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i210 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $i295 := $zext.i8.i32($i142);
    goto corral_source_split_4531;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    $i296 := $and.i32($i295, 8);
    goto corral_source_split_4532;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    $i297 := $ne.i32($i296, 0);
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    assume {:branchcond $i297} true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i297 == 1);
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    $i427 := $zext.i8.i32($i142);
    goto corral_source_split_4713;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    $i428 := $and.i32($i427, 16);
    goto corral_source_split_4714;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    $i429 := $ne.i32($i428, 0);
    goto corral_source_split_4715;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    assume {:branchcond $i429} true;
    goto $bb111, $bb112;

  $bb112:
    assume !($i429 == 1);
    assume {:verifier.code 0} true;
    $i470 := 0;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    goto corral_source_split_4778;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    $i39 := $i470;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    $p471 := $add.ref($add.ref($p16, $mul.ref($i17, 720)), $mul.ref(8, 1));
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    $i472 := $load.i64($M.1, $p3);
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 936} spin_unlock_irqrestore($p471, $i472);
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    $i473 := $ne.i32($i39, 0);
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    assume {:branchcond $i473} true;
    goto $bb126, $bb127;

  $bb127:
    assume !($i473 == 1);
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    return;

  $bb126:
    assume $i473 == 1;
    goto corral_source_split_4780;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 980} xpc_create_kthreads($p18, 1, 0);
    goto SeqInstr_433, SeqInstr_434;

  SeqInstr_434:
    assume assertsPassed;
    goto SeqInstr_435;

  SeqInstr_435:
    goto corral_source_split_4781;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    goto $bb128;

  SeqInstr_433:
    assume !assertsPassed;
    return;

  $bb111:
    assume $i429 == 1;
    goto corral_source_split_4717;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    $p430 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4718;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p430, .str);
    goto corral_source_split_4719;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    $p431 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p431, .str.90);
    goto corral_source_split_4721;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    $p432 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4722;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p432, .str.21);
    goto corral_source_split_4723;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    $p433 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4724;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p433, .str.97);
    goto corral_source_split_4725;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    $p434 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    $p435 := $bitcast.ref.ref($p434);
    goto corral_source_split_4727;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    $i436 := $load.i24($M.12, $p435);
    goto corral_source_split_4728;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    $i437 := $and.i24($i436, $sub.i24(0, 262144));
    goto corral_source_split_4729;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    $i438 := $or.i24($i437, 486);
    goto corral_source_split_4730;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p435, $i438);
    goto corral_source_split_4731;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    $p439 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4732;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p439, 0);
    goto corral_source_split_4733;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    $p440 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    $i441 := $load.i8($M.13, $p440);
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    $i442 := $zext.i8.i64($i441);
    goto corral_source_split_4736;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    $i443 := $and.i64($i442, 1);
    goto corral_source_split_4737;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 975} $i444 := ldv__builtin_expect($i443, 0);
    call {:si_unique_call 976} {:cexpr "tmp___6"} boogie_si_record_i64($i444);
    goto corral_source_split_4738;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    $i445 := $ne.i64($i444, 0);
    goto corral_source_split_4739;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    assume {:branchcond $i445} true;
    goto $bb113, $bb114;

  $bb114:
    assume !($i445 == 1);
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    $p454 := $add.ref($add.ref($p16, $mul.ref($i17, 720)), $mul.ref(80, 1));
    goto corral_source_split_4751;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    $i455 := $load.i32($M.1, $p454);
    goto corral_source_split_4752;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    $i456 := $and.i32($i455, 196608);
    goto corral_source_split_4753;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    $i457 := $ne.i32($i456, 0);
    goto corral_source_split_4754;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    assume {:branchcond $i457} true;
    goto $bb116, $bb117;

  $bb117:
    assume !($i457 == 1);
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    $p458 := $add.ref($add.ref($p16, $mul.ref($i17, 720)), $mul.ref(80, 1));
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    $i459 := $load.i32($M.1, $p458);
    goto corral_source_split_4759;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    $i460 := $and.i32($i459, 64);
    goto corral_source_split_4760;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    $i461 := $eq.i32($i460, 0);
    goto corral_source_split_4761;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    assume {:branchcond $i461} true;
    goto $bb119, $bb121;

  $bb121:
    assume !($i461 == 1);
    goto corral_source_split_4765;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    $p462 := $add.ref($add.ref($p16, $mul.ref($i17, 720)), $mul.ref(80, 1));
    goto corral_source_split_4766;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    $i463 := $load.i32($M.1, $p462);
    goto corral_source_split_4767;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    $i464 := $and.i32($i463, 16);
    goto corral_source_split_4768;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    $i465 := $eq.i32($i464, 0);
    goto corral_source_split_4769;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    assume {:branchcond $i465} true;
    goto $bb122, $bb123;

  $bb123:
    assume !($i465 == 1);
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    $p466 := $add.ref($add.ref($p16, $mul.ref($i17, 720)), $mul.ref(80, 1));
    goto corral_source_split_4771;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    $i467 := $load.i32($M.1, $p466);
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    $i468 := $or.i32($i467, 2);
    goto corral_source_split_4773;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    $p469 := $add.ref($add.ref($p16, $mul.ref($i17, 720)), $mul.ref(80, 1));
    goto corral_source_split_4774;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p469, $i468);
    goto corral_source_split_4775;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 979} xpc_process_connect($p18, $p3);
    goto SeqInstr_430, SeqInstr_431;

  SeqInstr_431:
    assume assertsPassed;
    goto SeqInstr_432;

  SeqInstr_432:
    goto corral_source_split_4776;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    $i470 := 1;
    goto $bb125;

  SeqInstr_430:
    assume !assertsPassed;
    return;

  $bb122:
    assume {:verifier.code 0} true;
    assume $i465 == 1;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 978} xpc_disconnect_channel(494, $p18, 50, $p3);
    goto SeqInstr_427, SeqInstr_428;

  SeqInstr_428:
    assume assertsPassed;
    goto SeqInstr_429;

  SeqInstr_429:
    goto corral_source_split_4763;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    $i39 := 0;
    goto $bb7;

  SeqInstr_427:
    assume !assertsPassed;
    return;

  $bb119:
    assume {:verifier.code 0} true;
    assume $i461 == 1;
    goto $bb120;

  $bb116:
    assume $i457 == 1;
    goto corral_source_split_4756;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    $i39 := 0;
    goto $bb7;

  $bb113:
    assume $i445 == 1;
    goto corral_source_split_4741;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    $p446 := $M.17;
    goto corral_source_split_4742;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    $p447 := $add.ref($add.ref($p16, $mul.ref($i17, 720)), $mul.ref(0, 1));
    goto corral_source_split_4743;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    $i448 := $load.i16($M.1, $p447);
    goto corral_source_split_4744;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    $i449 := $sext.i16.i32($i448);
    goto corral_source_split_4745;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    $p450 := $add.ref($add.ref($p16, $mul.ref($i17, 720)), $mul.ref(92, 1));
    goto corral_source_split_4746;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    $i451 := $load.i16($M.1, $p450);
    goto corral_source_split_4747;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    $i452 := $zext.i16.i32($i451);
    goto corral_source_split_4748;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 977} vslice_dummy_var_64 := __dynamic_dev_dbg.ref.ref.ref.i32.i32($p10, $p446, .str.97, $i449, $i452);
    goto corral_source_split_4749;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb84:
    assume $i297 == 1;
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    $p298 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4536;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p298, .str);
    goto corral_source_split_4537;

  corral_source_split_4537:
    assume {:verifier.code 0} true;
    $p299 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p299, .str.90);
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    $p300 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4540;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p300, .str.21);
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    $p301 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4542;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p301, .str.94);
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    $p302 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    $p303 := $bitcast.ref.ref($p302);
    goto corral_source_split_4545;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    $i304 := $load.i24($M.12, $p303);
    goto corral_source_split_4546;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    $i305 := $and.i24($i304, $sub.i24(0, 262144));
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    $i306 := $or.i24($i305, 428);
    goto corral_source_split_4548;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p303, $i306);
    goto corral_source_split_4549;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    $p307 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4550;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p307, 0);
    goto corral_source_split_4551;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    $p308 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4552;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    $i309 := $load.i8($M.13, $p308);
    goto corral_source_split_4553;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    $i310 := $zext.i8.i64($i309);
    goto corral_source_split_4554;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    $i311 := $and.i64($i310, 1);
    goto corral_source_split_4555;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 961} $i312 := ldv__builtin_expect($i311, 0);
    call {:si_unique_call 962} {:cexpr "tmp___3"} boogie_si_record_i64($i312);
    goto corral_source_split_4556;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    $i313 := $ne.i64($i312, 0);
    goto corral_source_split_4557;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    assume {:branchcond $i313} true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i313 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    $p330 := $add.ref($add.ref($p16, $mul.ref($i17, 720)), $mul.ref(80, 1));
    goto corral_source_split_4577;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    $i331 := $load.i32($M.1, $p330);
    goto corral_source_split_4578;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    $i332 := $and.i32($i331, 196608);
    goto corral_source_split_4579;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    $i333 := $ne.i32($i332, 0);
    goto corral_source_split_4580;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    assume {:branchcond $i333} true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i333 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    $p334 := $add.ref($add.ref($p16, $mul.ref($i17, 720)), $mul.ref(80, 1));
    goto corral_source_split_4584;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    $i335 := $load.i32($M.1, $p334);
    goto corral_source_split_4585;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    $i336 := $and.i32($i335, 64);
    goto corral_source_split_4586;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    $i337 := $eq.i32($i336, 0);
    goto corral_source_split_4587;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    assume {:branchcond $i337} true;
    goto $bb92, $bb93;

  $bb93:
    assume !($i337 == 1);
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    $p338 := $load.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(224, 1)));
    goto corral_source_split_4592;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    $p339 := $add.ref($add.ref($p12, $mul.ref($i13, 16)), $mul.ref(8, 1));
    goto corral_source_split_4593;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    $i340 := $load.i64($M.1, $p339);
    call {:si_unique_call 965} $i341 := devirtbounce.25($p338, $p18, $i340);
    call {:si_unique_call 966} {:cexpr "ret"} boogie_si_record_i32($i341);
    goto corral_source_split_4594;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    $i342 := $ne.i32($i341, 0);
    goto corral_source_split_4595;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    assume {:branchcond $i342} true;
    goto $bb95, $bb96;

  $bb96:
    assume !($i342 == 1);
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    $p343 := $add.ref($add.ref($p16, $mul.ref($i17, 720)), $mul.ref(80, 1));
    goto corral_source_split_4600;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    $i344 := $load.i32($M.1, $p343);
    goto corral_source_split_4601;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    $i345 := $or.i32($i344, 8);
    goto corral_source_split_4602;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    $p346 := $add.ref($add.ref($p16, $mul.ref($i17, 720)), $mul.ref(80, 1));
    goto corral_source_split_4603;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p346, $i345);
    goto corral_source_split_4604;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    $p347 := $add.ref($add.ref($p12, $mul.ref($i13, 16)), $mul.ref(6, 1));
    goto corral_source_split_4605;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    $i348 := $load.i16($M.1, $p347);
    goto corral_source_split_4606;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    $i349 := $zext.i16.i32($i348);
    goto corral_source_split_4607;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    $p350 := $add.ref($add.ref($p16, $mul.ref($i17, 720)), $mul.ref(98, 1));
    goto corral_source_split_4608;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    $i351 := $load.i16($M.1, $p350);
    goto corral_source_split_4609;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    $i352 := $zext.i16.i32($i351);
    goto corral_source_split_4610;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    $i353 := $slt.i32($i349, $i352);
    goto corral_source_split_4611;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    assume {:branchcond $i353} true;
    goto $bb98, $bb99;

  $bb99:
    assume !($i353 == 1);
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    $p387 := $add.ref($add.ref($p12, $mul.ref($i13, 16)), $mul.ref(4, 1));
    goto corral_source_split_4658;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    $i388 := $load.i16($M.1, $p387);
    goto corral_source_split_4659;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    $i389 := $zext.i16.i32($i388);
    goto corral_source_split_4660;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    $p390 := $add.ref($add.ref($p16, $mul.ref($i17, 720)), $mul.ref(96, 1));
    goto corral_source_split_4661;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    $i391 := $load.i16($M.1, $p390);
    goto corral_source_split_4662;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    $i392 := $zext.i16.i32($i391);
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    $i393 := $slt.i32($i389, $i392);
    goto corral_source_split_4664;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    assume {:branchcond $i393} true;
    goto $bb104, $bb105;

  $bb105:
    assume !($i393 == 1);
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 974} xpc_process_connect($p18, $p3);
    goto SeqInstr_424, SeqInstr_425;

  SeqInstr_425:
    assume assertsPassed;
    goto SeqInstr_426;

  SeqInstr_426:
    goto corral_source_split_4711;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    goto $bb110;

  SeqInstr_424:
    assume !assertsPassed;
    return;

  $bb104:
    assume $i393 == 1;
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    $p394 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4667;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p394, .str);
    goto corral_source_split_4668;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    $p395 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4669;

  corral_source_split_4669:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p395, .str.90);
    goto corral_source_split_4670;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    $p396 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4671;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p396, .str.21);
    goto corral_source_split_4672;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    $p397 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4673;

  corral_source_split_4673:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p397, .str.96);
    goto corral_source_split_4674;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    $p398 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4675;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    $p399 := $bitcast.ref.ref($p398);
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    $i400 := $load.i24($M.12, $p399);
    goto corral_source_split_4677;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    $i401 := $and.i24($i400, $sub.i24(0, 262144));
    goto corral_source_split_4678;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    $i402 := $or.i24($i401, 475);
    goto corral_source_split_4679;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p399, $i402);
    goto corral_source_split_4680;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    $p403 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4681;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p403, 0);
    goto corral_source_split_4682;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    $p404 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4683;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    $i405 := $load.i8($M.13, $p404);
    goto corral_source_split_4684;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    $i406 := $zext.i8.i64($i405);
    goto corral_source_split_4685;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    $i407 := $and.i64($i406, 1);
    goto corral_source_split_4686;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 971} $i408 := ldv__builtin_expect($i407, 0);
    call {:si_unique_call 972} {:cexpr "tmp___5"} boogie_si_record_i64($i408);
    goto corral_source_split_4687;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    $i409 := $ne.i64($i408, 0);
    goto corral_source_split_4688;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    assume {:branchcond $i409} true;
    goto $bb106, $bb107;

  $bb107:
    assume !($i409 == 1);
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    $p424 := $add.ref($add.ref($p12, $mul.ref($i13, 16)), $mul.ref(4, 1));
    goto corral_source_split_4706;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    $i425 := $load.i16($M.1, $p424);
    goto corral_source_split_4707;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    $p426 := $add.ref($add.ref($p16, $mul.ref($i17, 720)), $mul.ref(96, 1));
    goto corral_source_split_4708;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p426, $i425);
    goto corral_source_split_4709;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb106:
    assume $i409 == 1;
    goto corral_source_split_4690;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    $p410 := $M.17;
    goto corral_source_split_4691;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    $p411 := $add.ref($add.ref($p12, $mul.ref($i13, 16)), $mul.ref(4, 1));
    goto corral_source_split_4692;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    $i412 := $load.i16($M.1, $p411);
    goto corral_source_split_4693;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    $i413 := $zext.i16.i32($i412);
    goto corral_source_split_4694;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    $p414 := $add.ref($add.ref($p16, $mul.ref($i17, 720)), $mul.ref(96, 1));
    goto corral_source_split_4695;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    $i415 := $load.i16($M.1, $p414);
    goto corral_source_split_4696;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    $i416 := $zext.i16.i32($i415);
    goto corral_source_split_4697;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    $p417 := $add.ref($add.ref($p16, $mul.ref($i17, 720)), $mul.ref(0, 1));
    goto corral_source_split_4698;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    $i418 := $load.i16($M.1, $p417);
    goto corral_source_split_4699;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    $i419 := $sext.i16.i32($i418);
    goto corral_source_split_4700;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    $p420 := $add.ref($add.ref($p16, $mul.ref($i17, 720)), $mul.ref(92, 1));
    goto corral_source_split_4701;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    $i421 := $load.i16($M.1, $p420);
    goto corral_source_split_4702;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    $i422 := $zext.i16.i32($i421);
    goto corral_source_split_4703;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 973} vslice_dummy_var_63 := __dynamic_dev_dbg.ref.ref.ref.i32.i32.i32.i32($p9, $p410, .str.96, $i413, $i416, $i419, $i422);
    goto corral_source_split_4704;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb98:
    assume $i353 == 1;
    goto corral_source_split_4613;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    $p354 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4614;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p354, .str);
    goto corral_source_split_4615;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    $p355 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4616;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p355, .str.90);
    goto corral_source_split_4617;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    $p356 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4618;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p356, .str.21);
    goto corral_source_split_4619;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    $p357 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4620;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p357, .str.95);
    goto corral_source_split_4621;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    $p358 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    $p359 := $bitcast.ref.ref($p358);
    goto corral_source_split_4623;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    $i360 := $load.i24($M.12, $p359);
    goto corral_source_split_4624;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    $i361 := $and.i24($i360, $sub.i24(0, 262144));
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    $i362 := $or.i24($i361, 466);
    goto corral_source_split_4626;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p359, $i362);
    goto corral_source_split_4627;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    $p363 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4628;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p363, 0);
    goto corral_source_split_4629;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    $p364 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4630;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    $i365 := $load.i8($M.13, $p364);
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    $i366 := $zext.i8.i64($i365);
    goto corral_source_split_4632;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    $i367 := $and.i64($i366, 1);
    goto corral_source_split_4633;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 968} $i368 := ldv__builtin_expect($i367, 0);
    call {:si_unique_call 969} {:cexpr "tmp___4"} boogie_si_record_i64($i368);
    goto corral_source_split_4634;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    $i369 := $ne.i64($i368, 0);
    goto corral_source_split_4635;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    assume {:branchcond $i369} true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i369 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    $p384 := $add.ref($add.ref($p12, $mul.ref($i13, 16)), $mul.ref(6, 1));
    goto corral_source_split_4653;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    $i385 := $load.i16($M.1, $p384);
    goto corral_source_split_4654;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    $p386 := $add.ref($add.ref($p16, $mul.ref($i17, 720)), $mul.ref(98, 1));
    goto corral_source_split_4655;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p386, $i385);
    goto corral_source_split_4656;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb100:
    assume $i369 == 1;
    goto corral_source_split_4637;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    $p370 := $M.17;
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    $p371 := $add.ref($add.ref($p12, $mul.ref($i13, 16)), $mul.ref(6, 1));
    goto corral_source_split_4639;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    $i372 := $load.i16($M.1, $p371);
    goto corral_source_split_4640;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    $i373 := $zext.i16.i32($i372);
    goto corral_source_split_4641;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    $p374 := $add.ref($add.ref($p16, $mul.ref($i17, 720)), $mul.ref(98, 1));
    goto corral_source_split_4642;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    $i375 := $load.i16($M.1, $p374);
    goto corral_source_split_4643;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    $i376 := $zext.i16.i32($i375);
    goto corral_source_split_4644;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    $p377 := $add.ref($add.ref($p16, $mul.ref($i17, 720)), $mul.ref(0, 1));
    goto corral_source_split_4645;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    $i378 := $load.i16($M.1, $p377);
    goto corral_source_split_4646;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    $i379 := $sext.i16.i32($i378);
    goto corral_source_split_4647;

  corral_source_split_4647:
    assume {:verifier.code 0} true;
    $p380 := $add.ref($add.ref($p16, $mul.ref($i17, 720)), $mul.ref(92, 1));
    goto corral_source_split_4648;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    $i381 := $load.i16($M.1, $p380);
    goto corral_source_split_4649;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    $i382 := $zext.i16.i32($i381);
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 970} vslice_dummy_var_62 := __dynamic_dev_dbg.ref.ref.ref.i32.i32.i32.i32($p8, $p370, .str.95, $i373, $i376, $i379, $i382);
    goto corral_source_split_4651;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb95:
    assume $i342 == 1;
    goto corral_source_split_4597;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 967} xpc_disconnect_channel(456, $p18, $i341, $p3);
    goto SeqInstr_421, SeqInstr_422;

  SeqInstr_422:
    assume assertsPassed;
    goto SeqInstr_423;

  SeqInstr_423:
    goto corral_source_split_4598;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    $i39 := 0;
    goto $bb7;

  SeqInstr_421:
    assume !assertsPassed;
    return;

  $bb92:
    assume $i337 == 1;
    goto corral_source_split_4589;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 964} xpc_disconnect_channel(435, $p18, 50, $p3);
    goto SeqInstr_418, SeqInstr_419;

  SeqInstr_419:
    assume assertsPassed;
    goto SeqInstr_420;

  SeqInstr_420:
    goto corral_source_split_4590;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    $i39 := 0;
    goto $bb7;

  SeqInstr_418:
    assume !assertsPassed;
    return;

  $bb89:
    assume $i333 == 1;
    goto corral_source_split_4582;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    $i39 := 0;
    goto $bb7;

  $bb86:
    assume $i313 == 1;
    goto corral_source_split_4559;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    $p314 := $M.17;
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    $p315 := $add.ref($add.ref($p12, $mul.ref($i13, 16)), $mul.ref(8, 1));
    goto corral_source_split_4561;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    $i316 := $load.i64($M.1, $p315);
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    $p317 := $add.ref($add.ref($p12, $mul.ref($i13, 16)), $mul.ref(6, 1));
    goto corral_source_split_4563;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    $i318 := $load.i16($M.1, $p317);
    goto corral_source_split_4564;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    $i319 := $zext.i16.i32($i318);
    goto corral_source_split_4565;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    $p320 := $add.ref($add.ref($p12, $mul.ref($i13, 16)), $mul.ref(4, 1));
    goto corral_source_split_4566;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    $i321 := $load.i16($M.1, $p320);
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    $i322 := $zext.i16.i32($i321);
    goto corral_source_split_4568;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    $p323 := $add.ref($add.ref($p16, $mul.ref($i17, 720)), $mul.ref(0, 1));
    goto corral_source_split_4569;

  corral_source_split_4569:
    assume {:verifier.code 0} true;
    $i324 := $load.i16($M.1, $p323);
    goto corral_source_split_4570;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    $i325 := $sext.i16.i32($i324);
    goto corral_source_split_4571;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    $p326 := $add.ref($add.ref($p16, $mul.ref($i17, 720)), $mul.ref(92, 1));
    goto corral_source_split_4572;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    $i327 := $load.i16($M.1, $p326);
    goto corral_source_split_4573;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    $i328 := $zext.i16.i32($i327);
    goto corral_source_split_4574;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 963} vslice_dummy_var_61 := __dynamic_dev_dbg.ref.ref.ref.i64.i32.i32.i32.i32($p7, $p314, .str.94, $i316, $i319, $i322, $i325, $i328);
    goto corral_source_split_4575;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb57:
    assume $i210 == 1;
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4412;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p211, .str);
    goto corral_source_split_4413;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p212, .str.90);
    goto corral_source_split_4415;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p213, .str.21);
    goto corral_source_split_4417;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4418;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p214, .str.93);
    goto corral_source_split_4419;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    $p216 := $bitcast.ref.ref($p215);
    goto corral_source_split_4421;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    $i217 := $load.i24($M.12, $p216);
    goto corral_source_split_4422;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    $i218 := $and.i24($i217, $sub.i24(0, 262144));
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    $i219 := $or.i24($i218, 375);
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p216, $i219);
    goto corral_source_split_4425;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4426;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p220, 0);
    goto corral_source_split_4427;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4428;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    $i222 := $load.i8($M.13, $p221);
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    $i223 := $zext.i8.i64($i222);
    goto corral_source_split_4430;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    $i224 := $and.i64($i223, 1);
    goto corral_source_split_4431;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 955} $i225 := ldv__builtin_expect($i224, 0);
    call {:si_unique_call 956} {:cexpr "tmp___2"} boogie_si_record_i64($i225);
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    $i226 := $ne.i64($i225, 0);
    goto corral_source_split_4433;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    assume {:branchcond $i226} true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i226 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $p241 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(112, 1));
    goto corral_source_split_4451;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    $i242 := $load.i8($M.1, $p241);
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    $i243 := $zext.i8.i32($i242);
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    $i244 := $eq.i32($i243, 4);
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    assume {:branchcond $i244} true;
    goto $bb62, $bb64;

  $bb64:
    assume !($i244 == 1);
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($add.ref($p16, $mul.ref($i17, 720)), $mul.ref(80, 1));
    goto corral_source_split_4457;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    $i246 := $load.i32($M.1, $p245);
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    $i247 := $and.i32($i246, 32);
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    $i248 := $ne.i32($i247, 0);
    goto corral_source_split_4460;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    assume {:branchcond $i248} true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i248 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($add.ref($p16, $mul.ref($i17, 720)), $mul.ref(80, 1));
    goto corral_source_split_4462;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    $i250 := $load.i32($M.1, $p249);
    goto corral_source_split_4463;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    $i251 := $and.i32($i250, 1179648);
    goto corral_source_split_4464;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    $i252 := $ne.i32($i251, 0);
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    assume {:branchcond $i252} true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i252 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $p259 := $add.ref($add.ref($p12, $mul.ref($i13, 16)), $mul.ref(2, 1));
    goto corral_source_split_4476;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    $i260 := $load.i16($M.1, $p259);
    goto corral_source_split_4477;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    $i261 := $zext.i16.i32($i260);
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    $i262 := $eq.i32($i261, 0);
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    assume {:branchcond $i262} true;
    goto $bb71, $bb73;

  $bb73:
    assume !($i262 == 1);
    goto corral_source_split_4481;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    $p263 := $add.ref($add.ref($p12, $mul.ref($i13, 16)), $mul.ref(6, 1));
    goto corral_source_split_4482;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    $i264 := $load.i16($M.1, $p263);
    goto corral_source_split_4483;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    $i265 := $zext.i16.i32($i264);
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    $i266 := $eq.i32($i265, 0);
    goto corral_source_split_4485;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    assume {:branchcond $i266} true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i266 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $p267 := $add.ref($add.ref($p16, $mul.ref($i17, 720)), $mul.ref(80, 1));
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    $i268 := $load.i32($M.1, $p267);
    goto corral_source_split_4488;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    $i269 := $or.i32($i268, 2080);
    goto corral_source_split_4489;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    $p270 := $add.ref($add.ref($p16, $mul.ref($i17, 720)), $mul.ref(80, 1));
    goto corral_source_split_4490;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p270, $i269);
    goto corral_source_split_4491;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    $p271 := $add.ref($add.ref($p12, $mul.ref($i13, 16)), $mul.ref(6, 1));
    goto corral_source_split_4492;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    $i272 := $load.i16($M.1, $p271);
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    $p273 := $add.ref($add.ref($p16, $mul.ref($i17, 720)), $mul.ref(98, 1));
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p273, $i272);
    goto corral_source_split_4495;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    $p274 := $add.ref($add.ref($p16, $mul.ref($i17, 720)), $mul.ref(80, 1));
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    $i275 := $load.i32($M.1, $p274);
    goto corral_source_split_4497;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    $i276 := $and.i32($i275, 64);
    goto corral_source_split_4498;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    $i277 := $ne.i32($i276, 0);
    goto corral_source_split_4499;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    assume {:branchcond $i277} true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i277 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    call {:si_unique_call 960} xpc_process_connect($p18, $p3);
    goto SeqInstr_415, SeqInstr_416;

  SeqInstr_416:
    assume assertsPassed;
    goto SeqInstr_417;

  SeqInstr_417:
    goto corral_source_split_4529;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    goto $bb83;

  SeqInstr_415:
    assume !assertsPassed;
    return;

  $bb77:
    assume $i277 == 1;
    goto corral_source_split_4501;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    $p278 := $add.ref($add.ref($p12, $mul.ref($i13, 16)), $mul.ref(2, 1));
    goto corral_source_split_4502;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    $i279 := $load.i16($M.1, $p278);
    goto corral_source_split_4503;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    $i280 := $zext.i16.i32($i279);
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    $p281 := $add.ref($add.ref($p16, $mul.ref($i17, 720)), $mul.ref(94, 1));
    goto corral_source_split_4505;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    $i282 := $load.i16($M.1, $p281);
    goto corral_source_split_4506;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    $i283 := $zext.i16.i32($i282);
    goto corral_source_split_4507;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    $i284 := $ne.i32($i280, $i283);
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    assume {:branchcond $i284} true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i284 == 1);
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    $p285 := $add.ref($add.ref($p12, $mul.ref($i13, 16)), $mul.ref(2, 1));
    goto corral_source_split_4514;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    $i286 := $load.i16($M.1, $p285);
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    $p287 := $add.ref($add.ref($p16, $mul.ref($i17, 720)), $mul.ref(94, 1));
    goto corral_source_split_4516;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p287, $i286);
    goto corral_source_split_4517;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    $p288 := $add.ref($add.ref($p16, $mul.ref($i17, 720)), $mul.ref(84, 1));
    goto corral_source_split_4518;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p288, 0);
    goto corral_source_split_4519;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    $p289 := $add.ref($add.ref($p16, $mul.ref($i17, 720)), $mul.ref(88, 1));
    goto corral_source_split_4520;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p289, 0);
    goto corral_source_split_4521;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    $p290 := $add.ref($add.ref($p16, $mul.ref($i17, 720)), $mul.ref(80, 1));
    goto corral_source_split_4522;

  corral_source_split_4522:
    assume {:verifier.code 0} true;
    $i291 := $load.i32($M.1, $p290);
    goto corral_source_split_4523;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    $i292 := $and.i32($i291, $sub.i32(0, 65537));
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    $p293 := $add.ref($add.ref($p16, $mul.ref($i17, 720)), $mul.ref(80, 1));
    goto corral_source_split_4525;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p293, $i292);
    goto corral_source_split_4526;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    $p294 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(368, 1));
    goto corral_source_split_4527;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 959} atomic_inc($p294);
    goto SeqInstr_412, SeqInstr_413;

  SeqInstr_413:
    assume assertsPassed;
    goto SeqInstr_414;

  SeqInstr_414:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    goto $bb82;

  SeqInstr_412:
    assume !assertsPassed;
    return;

  $bb79:
    assume $i284 == 1;
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 958} xpc_disconnect_channel(407, $p18, 11, $p3);
    goto SeqInstr_409, SeqInstr_410;

  SeqInstr_410:
    assume assertsPassed;
    goto SeqInstr_411;

  SeqInstr_411:
    goto corral_source_split_4511;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    $i39 := 0;
    goto $bb7;

  SeqInstr_409:
    assume !assertsPassed;
    return;

  $bb74:
    assume {:verifier.code 0} true;
    assume $i266 == 1;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $i39 := 0;
    goto $bb7;

  $bb71:
    assume {:verifier.code 0} true;
    assume $i262 == 1;
    goto $bb72;

  $bb68:
    assume $i252 == 1;
    goto corral_source_split_4467;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    $p253 := $add.ref($add.ref($p16, $mul.ref($i17, 720)), $mul.ref(200, 1));
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    $i254 := $load.i8($M.1, $p253);
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    $i255 := $zext.i8.i32($i254);
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    $i256 := $or.i32($i255, 4);
    goto corral_source_split_4471;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    $i257 := $trunc.i32.i8($i256);
    goto corral_source_split_4472;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    $p258 := $add.ref($add.ref($p16, $mul.ref($i17, 720)), $mul.ref(200, 1));
    goto corral_source_split_4473;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p258, $i257);
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    $i39 := 0;
    goto $bb7;

  $bb65:
    assume {:verifier.code 0} true;
    assume $i248 == 1;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $i39 := 0;
    goto $bb7;

  $bb62:
    assume {:verifier.code 0} true;
    assume $i244 == 1;
    goto $bb63;

  $bb59:
    assume $i226 == 1;
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    $p227 := $M.17;
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($add.ref($p12, $mul.ref($i13, 16)), $mul.ref(2, 1));
    goto corral_source_split_4437;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    $i229 := $load.i16($M.1, $p228);
    goto corral_source_split_4438;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    $i230 := $zext.i16.i32($i229);
    goto corral_source_split_4439;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($add.ref($p12, $mul.ref($i13, 16)), $mul.ref(6, 1));
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    $i232 := $load.i16($M.1, $p231);
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    $i233 := $zext.i16.i32($i232);
    goto corral_source_split_4442;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($add.ref($p16, $mul.ref($i17, 720)), $mul.ref(0, 1));
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    $i235 := $load.i16($M.1, $p234);
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    $i236 := $sext.i16.i32($i235);
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($p16, $mul.ref($i17, 720)), $mul.ref(92, 1));
    goto corral_source_split_4446;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    $i238 := $load.i16($M.1, $p237);
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    $i239 := $zext.i16.i32($i238);
    goto corral_source_split_4448;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 957} vslice_dummy_var_60 := __dynamic_dev_dbg.ref.ref.ref.i32.i32.i32.i32($p6, $p227, .str.93, $i230, $i233, $i236, $i239);
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb39:
    assume $i145 == 1;
    goto corral_source_split_4319;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p146, .str);
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4322;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p147, .str.90);
    goto corral_source_split_4323;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p148, .str.21);
    goto corral_source_split_4325;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p149, .str.92);
    goto corral_source_split_4327;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    $p151 := $bitcast.ref.ref($p150);
    goto corral_source_split_4329;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    $i152 := $load.i24($M.12, $p151);
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    $i153 := $and.i24($i152, $sub.i24(0, 262144));
    goto corral_source_split_4331;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    $i154 := $or.i24($i153, 340);
    goto corral_source_split_4332;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p151, $i154);
    goto corral_source_split_4333;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4334;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p155, 0);
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    $i157 := $load.i8($M.13, $p156);
    goto corral_source_split_4337;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    $i158 := $zext.i8.i64($i157);
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    $i159 := $and.i64($i158, 1);
    goto corral_source_split_4339;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 949} $i160 := ldv__builtin_expect($i159, 0);
    call {:si_unique_call 950} {:cexpr "tmp___1"} boogie_si_record_i64($i160);
    goto corral_source_split_4340;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    $i161 := $ne.i64($i160, 0);
    goto corral_source_split_4341;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    assume {:branchcond $i161} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i161 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p16, $mul.ref($i17, 720)), $mul.ref(80, 1));
    goto corral_source_split_4353;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    $i171 := $load.i32($M.1, $p170);
    goto corral_source_split_4354;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    $i172 := $and.i32($i171, 65536);
    goto corral_source_split_4355;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    $i173 := $ne.i32($i172, 0);
    goto corral_source_split_4356;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i173 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($p16, $mul.ref($i17, 720)), $mul.ref(80, 1));
    goto corral_source_split_4360;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    $i175 := $load.i32($M.1, $p174);
    goto corral_source_split_4361;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    $i176 := $and.i32($i175, 16384);
    goto corral_source_split_4362;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    $i177 := $eq.i32($i176, 0);
    goto corral_source_split_4363;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    assume {:branchcond $i177} true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($p16, $mul.ref($i17, 720)), $mul.ref(80, 1));
    goto corral_source_split_4394;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    $i201 := $load.i32($M.1, $p200);
    goto corral_source_split_4395;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    $i202 := $or.i32($i201, 4096);
    goto corral_source_split_4396;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($p16, $mul.ref($i17, 720)), $mul.ref(80, 1));
    goto corral_source_split_4397;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p203, $i202);
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($p16, $mul.ref($i17, 720)), $mul.ref(80, 1));
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    $i205 := $load.i32($M.1, $p204);
    goto corral_source_split_4400;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    $i206 := $and.i32($i205, 8192);
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    $i207 := $ne.i32($i206, 0);
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    assume {:branchcond $i207} true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i207 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb53:
    assume $i207 == 1;
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 954} xpc_process_disconnect($p18, $p3);
    goto SeqInstr_406, SeqInstr_407;

  SeqInstr_407:
    assume assertsPassed;
    goto SeqInstr_408;

  SeqInstr_408:
    goto corral_source_split_4405;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    goto $bb55;

  SeqInstr_406:
    assume !assertsPassed;
    return;

  $bb47:
    assume $i177 == 1;
    goto corral_source_split_4365;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    $i178 := $sext.i32.i64($i1);
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(384, 1));
    goto corral_source_split_4367;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    $p180 := $bitcast.ref.ref($p179);
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($p180, $mul.ref(0, 2)), $mul.ref($i178, 1));
    goto corral_source_split_4369;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    $i182 := $load.i8($M.1, $p181);
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    $i183 := $zext.i8.i32($i182);
    goto corral_source_split_4371;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    $i184 := $and.i32($i183, 1);
    goto corral_source_split_4372;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    $i185 := $ne.i32($i184, 0);
    goto corral_source_split_4373;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    assume {:branchcond $i185} true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i185 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $i39 := 0;
    goto $bb7;

  $bb49:
    assume $i185 == 1;
    goto corral_source_split_4375;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(392, 1));
    goto corral_source_split_4376;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 952} spin_lock($p186);
    goto corral_source_split_4377;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    $i187 := $sext.i32.i64($i1);
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(384, 1));
    goto corral_source_split_4379;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    $p189 := $bitcast.ref.ref($p188);
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($p189, $mul.ref(0, 2)), $mul.ref($i187, 1));
    goto corral_source_split_4381;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    $i191 := $load.i8($M.1, $p190);
    goto corral_source_split_4382;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    $i192 := $zext.i8.i32($i191);
    goto corral_source_split_4383;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    $i193 := $or.i32($i192, 2);
    goto corral_source_split_4384;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    $i194 := $trunc.i32.i8($i193);
    goto corral_source_split_4385;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    $i195 := $sext.i32.i64($i1);
    goto corral_source_split_4386;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(384, 1));
    goto corral_source_split_4387;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    $p197 := $bitcast.ref.ref($p196);
    goto corral_source_split_4388;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($p197, $mul.ref(0, 2)), $mul.ref($i195, 1));
    goto corral_source_split_4389;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p198, $i194);
    goto corral_source_split_4390;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(392, 1));
    goto corral_source_split_4391;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 953} spin_unlock($p199);
    goto corral_source_split_4392;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb44:
    assume $i173 == 1;
    goto corral_source_split_4358;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    $i39 := 0;
    goto $bb7;

  $bb41:
    assume $i161 == 1;
    goto corral_source_split_4343;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    $p162 := $M.17;
    goto corral_source_split_4344;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p16, $mul.ref($i17, 720)), $mul.ref(0, 1));
    goto corral_source_split_4345;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    $i164 := $load.i16($M.1, $p163);
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    $i165 := $sext.i16.i32($i164);
    goto corral_source_split_4347;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p16, $mul.ref($i17, 720)), $mul.ref(92, 1));
    goto corral_source_split_4348;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    $i167 := $load.i16($M.1, $p166);
    goto corral_source_split_4349;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    $i168 := $zext.i16.i32($i167);
    goto corral_source_split_4350;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 951} vslice_dummy_var_59 := __dynamic_dev_dbg.ref.ref.ref.i32.i32($p5, $p162, .str.92, $i165, $i168);
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb9:
    assume $i42 == 1;
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4174;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p44, .str);
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p45, .str.90);
    goto corral_source_split_4177;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p46, .str.21);
    goto corral_source_split_4179;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4180;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p47, .str.91);
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p48);
    goto corral_source_split_4183;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    $i50 := $load.i24($M.12, $p49);
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    $i51 := $and.i24($i50, $sub.i24(0, 262144));
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    $i52 := $or.i24($i51, 266);
    goto corral_source_split_4186;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p49, $i52);
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4188;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p53, 0);
    goto corral_source_split_4189;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    $i55 := $load.i8($M.13, $p54);
    goto corral_source_split_4191;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    $i56 := $zext.i8.i64($i55);
    goto corral_source_split_4192;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    $i57 := $and.i64($i56, 1);
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 937} $i58 := ldv__builtin_expect($i57, 0);
    call {:si_unique_call 938} {:cexpr "tmp___0"} boogie_si_record_i64($i58);
    goto corral_source_split_4194;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    $i59 := $ne.i64($i58, 0);
    goto corral_source_split_4195;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p16, $mul.ref($i17, 720)), $mul.ref(80, 1));
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.1, $p71);
    goto corral_source_split_4211;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    $i73 := $and.i32($i72, 16384);
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    $i74 := $ne.i32($i73, 0);
    goto corral_source_split_4213;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    $i75 := $i22;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p16, $mul.ref($i17, 720)), $mul.ref(80, 1));
    goto corral_source_split_4226;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    $i84 := $load.i32($M.1, $p83);
    goto corral_source_split_4227;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    $i85 := $and.i32($i84, 65536);
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    $i86 := $ne.i32($i85, 0);
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i123 := $zext.i8.i32($i75);
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    $i124 := $and.i32($i123, 227);
    goto corral_source_split_4283;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    $i125 := $trunc.i32.i8($i124);
    call {:si_unique_call 945} {:cexpr "chctl_flags"} boogie_si_record_i8($i125);
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p16, $mul.ref($i17, 720)), $mul.ref(80, 1));
    goto corral_source_split_4285;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    $i127 := $load.i32($M.1, $p126);
    goto corral_source_split_4286;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    $i128 := $or.i32($i127, 16384);
    goto corral_source_split_4287;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p16, $mul.ref($i17, 720)), $mul.ref(80, 1));
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p129, $i128);
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p16, $mul.ref($i17, 720)), $mul.ref(80, 1));
    goto corral_source_split_4290;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    $i131 := $load.i32($M.1, $p130);
    goto corral_source_split_4291;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    $i132 := $and.i32($i131, 131072);
    goto corral_source_split_4292;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    $i133 := $eq.i32($i132, 0);
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    assume {:branchcond $i133} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i133 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 948} xpc_process_disconnect($p18, $p3);
    goto SeqInstr_403, SeqInstr_404;

  SeqInstr_404:
    assume assertsPassed;
    goto SeqInstr_405;

  SeqInstr_405:
    goto corral_source_split_4312;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    $i142 := $i125;
    goto $bb38;

  SeqInstr_403:
    assume !assertsPassed;
    return;

  $bb26:
    assume $i133 == 1;
    goto corral_source_split_4295;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p12, $mul.ref($i13, 16)), $mul.ref(0, 1));
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    $i135 := $load.i16($M.1, $p134);
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    $i136 := $zext.i16.i32($i135);
    call {:si_unique_call 946} {:cexpr "reason"} boogie_si_record_i32($i136);
    goto corral_source_split_4298;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    $i137 := $eq.i32($i136, 0);
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb30;

  $bb30:
    assume !($i137 == 1);
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    $i138 := $ugt.i32($i136, 63);
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    assume {:branchcond $i138} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i138 == 1);
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    $i140 := $eq.i32($i136, 22);
    goto corral_source_split_4305;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    assume {:branchcond $i140} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i140 == 1);
    assume {:verifier.code 0} true;
    $i141 := $i136;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i139 := $i141;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_4307;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 947} xpc_disconnect_channel(328, $p18, $i139, $p3);
    goto SeqInstr_400, SeqInstr_401;

  SeqInstr_401:
    assume assertsPassed;
    goto SeqInstr_402;

  SeqInstr_402:
    goto corral_source_split_4308;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    $i39 := 0;
    goto $bb7;

  SeqInstr_400:
    assume !assertsPassed;
    return;

  $bb34:
    assume $i140 == 1;
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    $i141 := 23;
    goto $bb36;

  $bb31:
    assume {:verifier.code 0} true;
    assume $i138 == 1;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i139 := 63;
    goto $bb33;

  $bb28:
    assume {:verifier.code 0} true;
    assume $i137 == 1;
    goto $bb29;

  $bb17:
    assume $i86 == 1;
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    $i87 := $zext.i8.i32($i75);
    goto corral_source_split_4232;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    $i88 := $and.i32($i87, 4);
    goto corral_source_split_4233;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    $i89 := $eq.i32($i88, 0);
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    assume {:branchcond $i89} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p16, $mul.ref($i17, 720)), $mul.ref(84, 1));
    goto corral_source_split_4265;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p112, 0);
    goto corral_source_split_4266;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p16, $mul.ref($i17, 720)), $mul.ref(88, 1));
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p113, 0);
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p16, $mul.ref($i17, 720)), $mul.ref(80, 1));
    goto corral_source_split_4269;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    $i115 := $load.i32($M.1, $p114);
    goto corral_source_split_4270;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    $i116 := $and.i32($i115, $sub.i32(0, 65537));
    goto corral_source_split_4271;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p16, $mul.ref($i17, 720)), $mul.ref(80, 1));
    goto corral_source_split_4272;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p117, $i116);
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(368, 1));
    goto corral_source_split_4274;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 944} atomic_inc($p118);
    goto SeqInstr_397, SeqInstr_398;

  SeqInstr_398:
    assume assertsPassed;
    goto SeqInstr_399;

  SeqInstr_399:
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p16, $mul.ref($i17, 720)), $mul.ref(80, 1));
    goto corral_source_split_4276;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    $i120 := $load.i32($M.1, $p119);
    goto corral_source_split_4277;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    $i121 := $or.i32($i120, 2080);
    goto corral_source_split_4278;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p16, $mul.ref($i17, 720)), $mul.ref(80, 1));
    goto corral_source_split_4279;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p122, $i121);
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    goto $bb25;

  SeqInstr_397:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i89 == 1;
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    $i90 := $sext.i32.i64($i1);
    goto corral_source_split_4237;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(384, 1));
    goto corral_source_split_4238;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    $p92 := $bitcast.ref.ref($p91);
    goto corral_source_split_4239;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p92, $mul.ref(0, 2)), $mul.ref($i90, 1));
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    $i94 := $load.i8($M.1, $p93);
    goto corral_source_split_4241;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    $i95 := $zext.i8.i32($i94);
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    $i96 := $and.i32($i95, 4);
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    $i97 := $ne.i32($i96, 0);
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    assume {:branchcond $i97} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i39 := 0;
    goto $bb7;

  $bb21:
    assume $i97 == 1;
    goto corral_source_split_4246;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(392, 1));
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 942} spin_lock($p98);
    goto corral_source_split_4248;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    $i99 := $sext.i32.i64($i1);
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(384, 1));
    goto corral_source_split_4250;

  corral_source_split_4250:
    assume {:verifier.code 0} true;
    $p101 := $bitcast.ref.ref($p100);
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p101, $mul.ref(0, 2)), $mul.ref($i99, 1));
    goto corral_source_split_4252;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    $i103 := $load.i8($M.1, $p102);
    goto corral_source_split_4253;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    $i104 := $zext.i8.i32($i103);
    goto corral_source_split_4254;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    $i105 := $or.i32($i104, 1);
    goto corral_source_split_4255;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    $i106 := $trunc.i32.i8($i105);
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    $i107 := $sext.i32.i64($i1);
    goto corral_source_split_4257;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(384, 1));
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    $p109 := $bitcast.ref.ref($p108);
    goto corral_source_split_4259;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p109, $mul.ref(0, 2)), $mul.ref($i107, 1));
    goto corral_source_split_4260;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p110, $i106);
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(392, 1));
    goto corral_source_split_4262;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 943} spin_unlock($p111);
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb14:
    assume $i74 == 1;
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    $i76 := $zext.i8.i32($i22);
    goto corral_source_split_4216;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    $i77 := $and.i32($i76, 253);
    goto corral_source_split_4217;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    $i78 := $trunc.i32.i8($i77);
    call {:si_unique_call 940} {:cexpr "chctl_flags"} boogie_si_record_i8($i78);
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p16, $mul.ref($i17, 720)), $mul.ref(80, 1));
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    $i80 := $load.i32($M.1, $p79);
    goto corral_source_split_4220;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    $i81 := $or.i32($i80, 4096);
    goto corral_source_split_4221;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p16, $mul.ref($i17, 720)), $mul.ref(80, 1));
    goto corral_source_split_4222;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p82, $i81);
    goto corral_source_split_4223;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 941} xpc_process_disconnect($p18, $p3);
    goto SeqInstr_394, SeqInstr_395;

  SeqInstr_395:
    assume assertsPassed;
    goto SeqInstr_396;

  SeqInstr_396:
    goto corral_source_split_4224;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    $i22 := $i78;
    goto corral_source_split_4224_dummy;

  SeqInstr_394:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i59 == 1;
    goto corral_source_split_4197;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    $p60 := $M.17;
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p12, $mul.ref($i13, 16)), $mul.ref(0, 1));
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    $i62 := $load.i16($M.1, $p61);
    goto corral_source_split_4200;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    $i63 := $zext.i16.i32($i62);
    goto corral_source_split_4201;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p16, $mul.ref($i17, 720)), $mul.ref(0, 1));
    goto corral_source_split_4202;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    $i65 := $load.i16($M.1, $p64);
    goto corral_source_split_4203;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    $i66 := $sext.i16.i32($i65);
    goto corral_source_split_4204;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p16, $mul.ref($i17, 720)), $mul.ref(92, 1));
    goto corral_source_split_4205;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    $i68 := $load.i16($M.1, $p67);
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    $i69 := $zext.i16.i32($i68);
    goto corral_source_split_4207;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 939} vslice_dummy_var_58 := __dynamic_dev_dbg.ref.ref.ref.i32.i32.i32($p4, $p60, .str.91, $i63, $i66, $i69);
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb2:
    assume $i26 == 1;
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p16, $mul.ref($i17, 720)), $mul.ref(80, 1));
    goto corral_source_split_4148;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.1, $p27);
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i28, 1048576);
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_4151;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    $i31 := $i22;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb4;

  $bb5:
    assume $i30 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4153;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p16, $mul.ref($i17, 720)), $mul.ref(200, 1));
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.1, $p32);
    goto corral_source_split_4155;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i33);
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i31);
    goto corral_source_split_4157;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    $i36 := $or.i32($i34, $i35);
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i32.i8($i36);
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p16, $mul.ref($i17, 720)), $mul.ref(200, 1));
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p38, $i37);
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    $i39 := 0;
    goto $bb7;

  corral_source_split_4224_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4141;
}



const xpc_process_disconnect: ref;

axiom xpc_process_disconnect == $sub.ref(0, 412111);

procedure xpc_process_disconnect($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.23, $CurrAddr, $M.28, assertsPassed, $M.0, $M.2;



implementation xpc_process_disconnect($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i16;
  var $i5: i64;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i8;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $i26: i16;
  var $i27: i32;
  var $i28: i16;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $i36: i32;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $i40: i32;
  var $i41: i32;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $i46: i32;
  var $i47: i1;
  var $p48: ref;
  var $i49: i32;
  var $i50: i1;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $i54: i32;
  var $i55: i1;
  var $p56: ref;
  var $i57: i64;
  var $p58: ref;
  var $p59: ref;
  var $i60: i64;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $i70: i32;
  var $i71: i32;
  var $i72: i32;
  var $p73: ref;
  var $p74: ref;
  var $i75: i1;
  var $p76: ref;
  var $p77: ref;
  var $i78: i16;
  var $i79: i32;
  var $p80: ref;
  var $i81: i16;
  var $i82: i32;
  var $p83: ref;
  var $i84: i32;
  var $p86: ref;
  var $i87: i32;
  var $i88: i32;
  var $i89: i1;
  var $p90: ref;
  var $p91: ref;
  var $i92: i8;
  var $i93: i32;
  var $i94: i1;
  var $p95: ref;
  var $i96: i8;
  var $i97: i32;
  var $i98: i1;
  var $p99: ref;
  var $p100: ref;
  var $i101: i16;
  var $i102: i32;
  var $i103: i64;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $i107: i8;
  var $i108: i32;
  var $p109: ref;
  var $i110: i8;
  var $i111: i32;
  var $i112: i32;
  var $i113: i8;
  var $p114: ref;
  var $i115: i16;
  var $i116: i32;
  var $i117: i64;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var vslice_dummy_var_65: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4783;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    $p2 := $M.3;
    goto corral_source_split_4784;

  corral_source_split_4784:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(0, 1));
    goto corral_source_split_4785;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.1, $p3);
    goto corral_source_split_4786;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    $i5 := $sext.i16.i64($i4);
    goto corral_source_split_4787;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    goto corral_source_split_4788;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(80, 1));
    goto corral_source_split_4789;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.1, $p7);
    goto corral_source_split_4790;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 1);
    call {:si_unique_call 981} {:cexpr "channel_was_connected"} boogie_si_record_i32($i9);
    goto corral_source_split_4791;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(80, 1));
    goto corral_source_split_4792;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.1, $p10);
    goto corral_source_split_4793;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 131072);
    goto corral_source_split_4794;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_4795;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(320, 1));
    goto corral_source_split_4799;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 982} $i15 := atomic_read($p14);
    call {:si_unique_call 983} {:cexpr "tmp"} boogie_si_record_i32($i15);
    goto corral_source_split_4800;

  corral_source_split_4800:
    assume {:verifier.code 0} true;
    $i16 := $sgt.i32($i15, 0);
    goto corral_source_split_4801;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    goto corral_source_split_4805;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(100, 1));
    goto corral_source_split_4806;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 984} $i18 := atomic_read($p17);
    call {:si_unique_call 985} {:cexpr "tmp___0"} boogie_si_record_i32($i18);
    goto corral_source_split_4807;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    $i19 := $sgt.i32($i18, 0);
    goto corral_source_split_4808;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref($i5, 872)), $mul.ref(112, 1));
    goto corral_source_split_4812;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.1, $p20);
    goto corral_source_split_4813;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i21);
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 4);
    goto corral_source_split_4815;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(204, 1));
    goto corral_source_split_4855;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 989} $i49 := atomic_read($p48);
    call {:si_unique_call 990} {:cexpr "tmp___2"} boogie_si_record_i32($i49);
    goto corral_source_split_4856;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    $i50 := $sgt.i32($i49, 0);
    goto corral_source_split_4857;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(80, 1));
    goto corral_source_split_4862;

  corral_source_split_4862:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.1, $p52);
    goto corral_source_split_4863;

  corral_source_split_4863:
    assume {:verifier.code 0} true;
    $i54 := $and.i32($i53, 524288);
    goto corral_source_split_4864;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i54, 0);
    goto corral_source_split_4865;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    assume {:branchcond $i55} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(240, 1)));
    call {:si_unique_call 996} devirtbounce.26($p61, $p0);
    goto SeqInstr_442, SeqInstr_443;

  SeqInstr_443:
    assume assertsPassed;
    goto SeqInstr_444;

  SeqInstr_444:
    goto corral_source_split_4877;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(208, 1));
    goto corral_source_split_4878;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p62, $0.ref);
    goto corral_source_split_4879;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(216, 1));
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p63, $0.ref);
    goto corral_source_split_4881;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(94, 1));
    goto corral_source_split_4882;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p64, 0);
    goto corral_source_split_4883;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(96, 1));
    goto corral_source_split_4884;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p65, 0);
    goto corral_source_split_4885;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(98, 1));
    goto corral_source_split_4886;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p66, 0);
    goto corral_source_split_4887;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(324, 1));
    goto corral_source_split_4888;

  corral_source_split_4888:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p67, 0);
    goto corral_source_split_4889;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(332, 1));
    goto corral_source_split_4890;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p68, 0);
    goto corral_source_split_4891;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(80, 1));
    goto corral_source_split_4892;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    $i70 := $load.i32($M.1, $p69);
    goto corral_source_split_4893;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    $i71 := $and.i32($i70, 1048576);
    goto corral_source_split_4894;

  corral_source_split_4894:
    assume {:verifier.code 0} true;
    $i72 := $or.i32($i71, 65536);
    goto corral_source_split_4895;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(80, 1));
    goto corral_source_split_4896;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p73, $i72);
    goto corral_source_split_4897;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p2, $mul.ref($i5, 872)), $mul.ref(368, 1));
    goto corral_source_split_4898;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 997} atomic_dec($p74);
    goto SeqInstr_445, SeqInstr_446;

  SeqInstr_446:
    assume assertsPassed;
    goto SeqInstr_447;

  SeqInstr_447:
    goto corral_source_split_4899;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    $i75 := $ne.i32($i9, 0);
    goto corral_source_split_4900;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(80, 1));
    goto corral_source_split_4914;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    $i87 := $load.i32($M.1, $p86);
    goto corral_source_split_4915;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    $i88 := $and.i32($i87, 1048576);
    goto corral_source_split_4916;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    $i89 := $ne.i32($i88, 0);
    goto corral_source_split_4917;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    assume {:branchcond $i89} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i89 == 1);
    goto corral_source_split_4923;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(200, 1));
    goto corral_source_split_4924;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    $i92 := $load.i8($M.1, $p91);
    goto corral_source_split_4925;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    $i93 := $zext.i8.i32($i92);
    goto corral_source_split_4926;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    $i94 := $ne.i32($i93, 0);
    goto corral_source_split_4927;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb38:
    assume $i94 == 1;
    goto corral_source_split_4929;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p2, $mul.ref($i5, 872)), $mul.ref(112, 1));
    goto corral_source_split_4930;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    $i96 := $load.i8($M.1, $p95);
    goto corral_source_split_4931;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    $i97 := $zext.i8.i32($i96);
    goto corral_source_split_4932;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    $i98 := $ne.i32($i97, 4);
    goto corral_source_split_4933;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(200, 1));
    goto corral_source_split_4963;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p122, 0);
    goto corral_source_split_4964;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb40:
    assume $i98 == 1;
    goto corral_source_split_4935;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p2, $mul.ref($i5, 872)), $mul.ref(392, 1));
    goto corral_source_split_4936;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1000} spin_lock($p99);
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(92, 1));
    goto corral_source_split_4938;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    $i101 := $load.i16($M.1, $p100);
    goto corral_source_split_4939;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    $i102 := $zext.i16.i32($i101);
    goto corral_source_split_4940;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    $i103 := $sext.i32.i64($i102);
    goto corral_source_split_4941;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p2, $mul.ref($i5, 872)), $mul.ref(384, 1));
    goto corral_source_split_4942;

  corral_source_split_4942:
    assume {:verifier.code 0} true;
    $p105 := $bitcast.ref.ref($p104);
    goto corral_source_split_4943;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p105, $mul.ref(0, 2)), $mul.ref($i103, 1));
    goto corral_source_split_4944;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    $i107 := $load.i8($M.1, $p106);
    goto corral_source_split_4945;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    $i108 := $zext.i8.i32($i107);
    goto corral_source_split_4946;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(200, 1));
    goto corral_source_split_4947;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    $i110 := $load.i8($M.1, $p109);
    goto corral_source_split_4948;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    $i111 := $zext.i8.i32($i110);
    goto corral_source_split_4949;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    $i112 := $or.i32($i108, $i111);
    goto corral_source_split_4950;

  corral_source_split_4950:
    assume {:verifier.code 0} true;
    $i113 := $trunc.i32.i8($i112);
    goto corral_source_split_4951;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(92, 1));
    goto corral_source_split_4952;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    $i115 := $load.i16($M.1, $p114);
    goto corral_source_split_4953;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    $i116 := $zext.i16.i32($i115);
    goto corral_source_split_4954;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    $i117 := $sext.i32.i64($i116);
    goto corral_source_split_4955;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p2, $mul.ref($i5, 872)), $mul.ref(384, 1));
    goto corral_source_split_4956;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    $p119 := $bitcast.ref.ref($p118);
    goto corral_source_split_4957;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p119, $mul.ref(0, 2)), $mul.ref($i117, 1));
    goto corral_source_split_4958;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p120, $i113);
    goto corral_source_split_4959;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p2, $mul.ref($i5, 872)), $mul.ref(392, 1));
    goto corral_source_split_4960;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1001} spin_unlock($p121);
    goto corral_source_split_4961;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb35:
    assume $i89 == 1;
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(224, 1));
    goto corral_source_split_4920;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 999} complete_($p90);
    goto corral_source_split_4921;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb32:
    assume $i75 == 1;
    goto corral_source_split_4902;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    $p76 := $M.17;
    goto corral_source_split_4903;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(92, 1));
    goto corral_source_split_4904;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    $i78 := $load.i16($M.1, $p77);
    goto corral_source_split_4905;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    $i79 := $zext.i16.i32($i78);
    goto corral_source_split_4906;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(0, 1));
    goto corral_source_split_4907;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    $i81 := $load.i16($M.1, $p80);
    goto corral_source_split_4908;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    $i82 := $sext.i16.i32($i81);
    goto corral_source_split_4909;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(84, 1));
    goto corral_source_split_4910;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    $i84 := $load.i32($M.1, $p83);
    goto corral_source_split_4911;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 998} vslice_dummy_var_65 := _dev_info.ref.ref.i32.i32.i32($p76, .str.99, $i79, $i82, $i84);
    goto corral_source_split_4912;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    goto $bb34;

  SeqInstr_445:
    assume !assertsPassed;
    return;

  SeqInstr_442:
    assume !assertsPassed;
    return;

  $bb29:
    assume $i55 == 1;
    goto corral_source_split_4867;

  corral_source_split_4867:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(8, 1));
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    $i57 := $load.i64($M.1, $p1);
    goto corral_source_split_4869;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 992} spin_unlock_irqrestore($p56, $i57);
    goto corral_source_split_4870;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 993} xpc_disconnect_callout($p0, 51);
    goto corral_source_split_4871;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(8, 1));
    goto corral_source_split_4872;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 994} $p59 := spinlock_check($p58);
    goto corral_source_split_4873;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 995} $i60 := _raw_spin_lock_irqsave($p59);
    goto corral_source_split_4874;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p1, $i60);
    goto corral_source_split_4875;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb26:
    assume $i50 == 1;
    goto corral_source_split_4859;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(320, 1)));
    call {:si_unique_call 991} devirtbounce.26($p51, $p0);
    goto SeqInstr_439, SeqInstr_440;

  SeqInstr_440:
    assume assertsPassed;
    goto SeqInstr_441;

  SeqInstr_441:
    goto corral_source_split_4860;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    goto $bb28;

  SeqInstr_439:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i23 == 1;
    goto corral_source_split_4817;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(272, 1)));
    goto corral_source_split_4818;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(0, 1));
    goto corral_source_split_4819;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    $i26 := $load.i16($M.1, $p25);
    goto corral_source_split_4820;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    $i27 := $sext.i16.i32($i26);
    goto corral_source_split_4821;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i32.i16($i27);
    call {:si_unique_call 986} $i29 := devirtbounce.1($p24, $i28);
    call {:si_unique_call 987} {:cexpr "tmp___1"} boogie_si_record_i32($i29);
    goto corral_source_split_4822;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_4823;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i30 == 1);
    goto corral_source_split_4827;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(80, 1));
    goto corral_source_split_4828;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.1, $p31);
    goto corral_source_split_4829;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    $i33 := $and.i32($i32, 16384);
    goto corral_source_split_4830;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 0);
    goto corral_source_split_4831;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(80, 1));
    goto corral_source_split_4835;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.1, $p35);
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    $i37 := $and.i32($i36, 8192);
    goto corral_source_split_4837;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 0);
    goto corral_source_split_4838;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(80, 1));
    goto corral_source_split_4848;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.1, $p44);
    goto corral_source_split_4849;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    $i46 := $and.i32($i45, 4096);
    goto corral_source_split_4850;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i46, 0);
    goto corral_source_split_4851;

  corral_source_split_4851:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb21:
    assume $i47 == 1;
    goto corral_source_split_4853;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb18:
    assume $i38 == 1;
    goto corral_source_split_4840;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(80, 1));
    goto corral_source_split_4841;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.1, $p39);
    goto corral_source_split_4842;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    $i41 := $or.i32($i40, 8192);
    goto corral_source_split_4843;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(80, 1));
    goto corral_source_split_4844;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p42, $i41);
    goto corral_source_split_4845;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(184, 1)));
    call {:si_unique_call 988} devirtbounce.8($p43, $p0, $p1);
    goto SeqInstr_436, SeqInstr_437;

  SeqInstr_437:
    assume assertsPassed;
    goto SeqInstr_438;

  SeqInstr_438:
    goto corral_source_split_4846;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    goto $bb20;

  SeqInstr_436:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i34 == 1;
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb13:
    assume $i30 == 1;
    goto corral_source_split_4825;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb7:
    assume $i19 == 1;
    goto corral_source_split_4810;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_4803;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_4797;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const xpc_connect_channel: ref;

axiom xpc_connect_channel == $sub.ref(0, 413143);

procedure xpc_connect_channel($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $CurrAddr, $M.32, $M.24, $M.40, $M.18, $M.19, $M.20, $M.21, $M.22, assertsPassed, $M.23, $M.0, $M.2, $M.28, $M.31, $M.41, $M.42, $M.43, $M.44, $M.45;



implementation xpc_connect_channel($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i16;
  var $i4: i64;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $i11: i16;
  var $i12: i32;
  var $i13: i64;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $i28: i64;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $p32: ref;
  var $i33: i32;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i16;
  var $p46: ref;
  var $p47: ref;
  var $i48: i32;
  var $i49: i32;
  var $i50: i1;
  var $p51: ref;
  var $i52: i16;
  var $i53: i32;
  var $p54: ref;
  var $i55: i16;
  var $i56: i32;
  var $i57: i1;
  var $p58: ref;
  var $p59: ref;
  var $i60: i64;
  var $p61: ref;
  var $i62: i16;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $i67: i32;
  var $i68: i32;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $i72: i16;
  var $i73: i64;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: i32;
  var $i79: i32;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $i83: i64;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1002} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_4966;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(92, 1));
    goto corral_source_split_4967;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    $i3 := $load.i16($M.1, $p2);
    goto corral_source_split_4968;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i64($i3);
    $p6 := $add.ref($add.ref($add.ref(xpc_registrations, $mul.ref(0, 0)), $mul.ref($i4, 200)), $mul.ref(0, 1));
    goto corral_source_split_4969;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1003} $i7 := ldv_mutex_trylock_22($p6);
    goto SeqInstr_448, SeqInstr_449;

  SeqInstr_449:
    assume assertsPassed;
    goto SeqInstr_450;

  SeqInstr_450:
    call {:si_unique_call 1004} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_4970;

  corral_source_split_4970:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_4971;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(92, 1));
    goto corral_source_split_4977;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    $i11 := $load.i16($M.1, $p10);
    goto corral_source_split_4978;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    $i12 := $zext.i16.i32($i11);
    goto corral_source_split_4979;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_4980;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref(xpc_registrations, $mul.ref(0, 0)), $mul.ref($i13, 200)), $mul.ref(168, 1));
    goto corral_source_split_4981;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.1, $p15);
    goto corral_source_split_4982;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_4983;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i17, 0);
    goto corral_source_split_4984;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(8, 1));
    goto corral_source_split_4989;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1006} $p21 := spinlock_check($p20);
    goto corral_source_split_4990;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1007} $i22 := _raw_spin_lock_irqsave($p21);
    goto corral_source_split_4991;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p1, $i22);
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(80, 1));
    goto corral_source_split_4993;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.1, $p23);
    goto corral_source_split_4994;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    $i25 := $and.i32($i24, 131072);
    goto corral_source_split_4995;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_4996;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    $p32 := $add.ref($add.ref($add.ref(xpc_registrations, $mul.ref(0, 0)), $mul.ref($i4, 200)), $mul.ref(188, 1));
    goto corral_source_split_5006;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.1, $p32);
    goto corral_source_split_5007;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(324, 1));
    goto corral_source_split_5008;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p34, $i33);
    $p35 := $add.ref($add.ref($add.ref(xpc_registrations, $mul.ref(0, 0)), $mul.ref($i4, 200)), $mul.ref(192, 1));
    goto corral_source_split_5009;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.1, $p35);
    goto corral_source_split_5010;

  corral_source_split_5010:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(332, 1));
    goto corral_source_split_5011;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p37, $i36);
    $p38 := $add.ref($add.ref($add.ref(xpc_registrations, $mul.ref(0, 0)), $mul.ref($i4, 200)), $mul.ref(168, 1));
    goto corral_source_split_5012;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.1, $p38);
    goto corral_source_split_5013;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(208, 1));
    goto corral_source_split_5014;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p40, $p39);
    $p41 := $add.ref($add.ref($add.ref(xpc_registrations, $mul.ref(0, 0)), $mul.ref($i4, 200)), $mul.ref(176, 1));
    goto corral_source_split_5015;

  corral_source_split_5015:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.1, $p41);
    goto corral_source_split_5016;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(216, 1));
    goto corral_source_split_5017;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p43, $p42);
    $p44 := $add.ref($add.ref($add.ref(xpc_registrations, $mul.ref(0, 0)), $mul.ref($i4, 200)), $mul.ref(184, 1));
    goto corral_source_split_5018;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    $i45 := $load.i16($M.1, $p44);
    goto corral_source_split_5019;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(96, 1));
    goto corral_source_split_5020;

  corral_source_split_5020:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p46, $i45);
    goto corral_source_split_5021;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(80, 1));
    goto corral_source_split_5022;

  corral_source_split_5022:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.1, $p47);
    goto corral_source_split_5023;

  corral_source_split_5023:
    assume {:verifier.code 0} true;
    $i49 := $and.i32($i48, 32);
    goto corral_source_split_5024;

  corral_source_split_5024:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i49, 0);
    goto corral_source_split_5025;

  corral_source_split_5025:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    $p76 := $add.ref($add.ref($add.ref(xpc_registrations, $mul.ref(0, 0)), $mul.ref($i4, 200)), $mul.ref(0, 1));
    goto corral_source_split_5062;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1014} ldv_mutex_unlock_26($p76);
    goto SeqInstr_466, SeqInstr_467;

  SeqInstr_467:
    assume assertsPassed;
    goto SeqInstr_468;

  SeqInstr_468:
    goto corral_source_split_5063;

  corral_source_split_5063:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(80, 1));
    goto corral_source_split_5064;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.1, $p77);
    goto corral_source_split_5065;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    $i79 := $or.i32($i78, 2112);
    goto corral_source_split_5066;

  corral_source_split_5066:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(80, 1));
    goto corral_source_split_5067;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p80, $i79);
    goto corral_source_split_5068;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(192, 1)));
    call {:si_unique_call 1015} devirtbounce.8($p81, $p0, $p1);
    goto SeqInstr_469, SeqInstr_470;

  SeqInstr_470:
    assume assertsPassed;
    goto SeqInstr_471;

  SeqInstr_471:
    goto corral_source_split_5069;

  corral_source_split_5069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1016} xpc_process_connect($p0, $p1);
    goto SeqInstr_472, SeqInstr_473;

  SeqInstr_473:
    assume assertsPassed;
    goto SeqInstr_474;

  SeqInstr_474:
    goto corral_source_split_5070;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(8, 1));
    goto corral_source_split_5071;

  corral_source_split_5071:
    assume {:verifier.code 0} true;
    $i83 := $load.i64($M.1, $p1);
    goto corral_source_split_5072;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1017} spin_unlock_irqrestore($p82, $i83);
    goto corral_source_split_5073;

  corral_source_split_5073:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4975;

  corral_source_split_4975:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  SeqInstr_472:
    assume !assertsPassed;
    return;

  SeqInstr_469:
    assume !assertsPassed;
    return;

  SeqInstr_466:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i50 == 1;
    $p51 := $add.ref($add.ref($add.ref(xpc_registrations, $mul.ref(0, 0)), $mul.ref($i4, 200)), $mul.ref(186, 1));
    goto corral_source_split_5027;

  corral_source_split_5027:
    assume {:verifier.code 0} true;
    $i52 := $load.i16($M.1, $p51);
    goto corral_source_split_5028;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    $i53 := $zext.i16.i32($i52);
    goto corral_source_split_5029;

  corral_source_split_5029:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(94, 1));
    goto corral_source_split_5030;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    $i55 := $load.i16($M.1, $p54);
    goto corral_source_split_5031;

  corral_source_split_5031:
    assume {:verifier.code 0} true;
    $i56 := $zext.i16.i32($i55);
    goto corral_source_split_5032;

  corral_source_split_5032:
    assume {:verifier.code 0} true;
    $i57 := $ne.i32($i53, $i56);
    goto corral_source_split_5033;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i57 == 1);
    $p61 := $add.ref($add.ref($add.ref(xpc_registrations, $mul.ref(0, 0)), $mul.ref($i4, 200)), $mul.ref(186, 1));
    goto corral_source_split_5042;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    $i62 := $load.i16($M.1, $p61);
    goto corral_source_split_5043;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(94, 1));
    goto corral_source_split_5044;

  corral_source_split_5044:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p63, $i62);
    goto corral_source_split_5045;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(84, 1));
    goto corral_source_split_5046;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p64, 0);
    goto corral_source_split_5047;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(88, 1));
    goto corral_source_split_5048;

  corral_source_split_5048:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p65, 0);
    goto corral_source_split_5049;

  corral_source_split_5049:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(80, 1));
    goto corral_source_split_5050;

  corral_source_split_5050:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.1, $p66);
    goto corral_source_split_5051;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    $i68 := $and.i32($i67, $sub.i32(0, 65537));
    goto corral_source_split_5052;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(80, 1));
    goto corral_source_split_5053;

  corral_source_split_5053:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p69, $i68);
    goto corral_source_split_5054;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    $p70 := $M.3;
    goto corral_source_split_5055;

  corral_source_split_5055:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(0, 1));
    goto corral_source_split_5056;

  corral_source_split_5056:
    assume {:verifier.code 0} true;
    $i72 := $load.i16($M.1, $p71);
    goto corral_source_split_5057;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    $i73 := $sext.i16.i64($i72);
    goto corral_source_split_5058;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    goto corral_source_split_5059;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p70, $mul.ref($i73, 872)), $mul.ref(368, 1));
    goto corral_source_split_5060;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1013} atomic_inc($p75);
    goto SeqInstr_463, SeqInstr_464;

  SeqInstr_464:
    assume assertsPassed;
    goto SeqInstr_465;

  SeqInstr_465:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  SeqInstr_463:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i57 == 1;
    $p58 := $add.ref($add.ref($add.ref(xpc_registrations, $mul.ref(0, 0)), $mul.ref($i4, 200)), $mul.ref(0, 1));
    goto corral_source_split_5035;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1010} ldv_mutex_unlock_25($p58);
    goto SeqInstr_457, SeqInstr_458;

  SeqInstr_458:
    assume assertsPassed;
    goto SeqInstr_459;

  SeqInstr_459:
    goto corral_source_split_5036;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1011} xpc_disconnect_channel(572, $p0, 11, $p1);
    goto SeqInstr_460, SeqInstr_461;

  SeqInstr_461:
    assume assertsPassed;
    goto SeqInstr_462;

  SeqInstr_462:
    goto corral_source_split_5037;

  corral_source_split_5037:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(8, 1));
    goto corral_source_split_5038;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    $i60 := $load.i64($M.1, $p1);
    goto corral_source_split_5039;

  corral_source_split_5039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1012} spin_unlock_irqrestore($p59, $i60);
    goto corral_source_split_5040;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    $i9 := 11;
    goto $bb3;

  SeqInstr_460:
    assume !assertsPassed;
    return;

  SeqInstr_457:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i26 == 1;
    goto corral_source_split_4998;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(8, 1));
    goto corral_source_split_4999;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    $i28 := $load.i64($M.1, $p1);
    goto corral_source_split_5000;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1008} spin_unlock_irqrestore($p27, $i28);
    $p29 := $add.ref($add.ref($add.ref(xpc_registrations, $mul.ref(0, 0)), $mul.ref($i4, 200)), $mul.ref(0, 1));
    goto corral_source_split_5001;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1009} ldv_mutex_unlock_24($p29);
    goto SeqInstr_454, SeqInstr_455;

  SeqInstr_455:
    assume assertsPassed;
    goto SeqInstr_456;

  SeqInstr_456:
    goto corral_source_split_5002;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(84, 1));
    goto corral_source_split_5003;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.1, $p30);
    goto corral_source_split_5004;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    $i9 := $i31;
    goto $bb3;

  SeqInstr_454:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i18 == 1;
    $p19 := $add.ref($add.ref($add.ref(xpc_registrations, $mul.ref(0, 0)), $mul.ref($i4, 200)), $mul.ref(0, 1));
    goto corral_source_split_4986;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1005} ldv_mutex_unlock_23($p19);
    goto SeqInstr_451, SeqInstr_452;

  SeqInstr_452:
    assume assertsPassed;
    goto SeqInstr_453;

  SeqInstr_453:
    goto corral_source_split_4987;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    $i9 := 15;
    goto $bb3;

  SeqInstr_451:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_4973;

  corral_source_split_4973:
    assume {:verifier.code 0} true;
    $i9 := 8;
    goto $bb3;

  SeqInstr_448:
    assume !assertsPassed;
    return;
}



const ldv_mutex_trylock_22: ref;

axiom ldv_mutex_trylock_22 == $sub.ref(0, 414175);

procedure ldv_mutex_trylock_22($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.32, assertsPassed;



implementation ldv_mutex_trylock_22($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5075;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1018} $i1 := mutex_trylock($p0);
    call {:si_unique_call 1019} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_5076;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1020} $i2 := ldv_mutex_trylock_mutex_of_xpc_registration($p0);
    goto SeqInstr_475, SeqInstr_476;

  SeqInstr_476:
    assume assertsPassed;
    goto SeqInstr_477;

  SeqInstr_477:
    call {:si_unique_call 1021} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_5077;

  corral_source_split_5077:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_475:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_23: ref;

axiom ldv_mutex_unlock_23 == $sub.ref(0, 415207);

procedure ldv_mutex_unlock_23($p0: ref);
  free requires assertsPassed;
  modifies $M.32, assertsPassed;



implementation ldv_mutex_unlock_23($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5079;

  corral_source_split_5079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1022} ldv_mutex_unlock_mutex_of_xpc_registration($p0);
    goto SeqInstr_478, SeqInstr_479;

  SeqInstr_479:
    assume assertsPassed;
    goto SeqInstr_480;

  SeqInstr_480:
    goto corral_source_split_5080;

  corral_source_split_5080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1023} mutex_unlock($p0);
    goto corral_source_split_5081;

  corral_source_split_5081:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_478:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_24: ref;

axiom ldv_mutex_unlock_24 == $sub.ref(0, 416239);

procedure ldv_mutex_unlock_24($p0: ref);
  free requires assertsPassed;
  modifies $M.32, assertsPassed;



implementation ldv_mutex_unlock_24($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5083;

  corral_source_split_5083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1024} ldv_mutex_unlock_mutex_of_xpc_registration($p0);
    goto SeqInstr_481, SeqInstr_482;

  SeqInstr_482:
    assume assertsPassed;
    goto SeqInstr_483;

  SeqInstr_483:
    goto corral_source_split_5084;

  corral_source_split_5084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1025} mutex_unlock($p0);
    goto corral_source_split_5085;

  corral_source_split_5085:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_481:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_25: ref;

axiom ldv_mutex_unlock_25 == $sub.ref(0, 417271);

procedure ldv_mutex_unlock_25($p0: ref);
  free requires assertsPassed;
  modifies $M.32, assertsPassed;



implementation ldv_mutex_unlock_25($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5087;

  corral_source_split_5087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1026} ldv_mutex_unlock_mutex_of_xpc_registration($p0);
    goto SeqInstr_484, SeqInstr_485;

  SeqInstr_485:
    assume assertsPassed;
    goto SeqInstr_486;

  SeqInstr_486:
    goto corral_source_split_5088;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1027} mutex_unlock($p0);
    goto corral_source_split_5089;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_484:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_26: ref;

axiom ldv_mutex_unlock_26 == $sub.ref(0, 418303);

procedure ldv_mutex_unlock_26($p0: ref);
  free requires assertsPassed;
  modifies $M.32, assertsPassed;



implementation ldv_mutex_unlock_26($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5091;

  corral_source_split_5091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1028} ldv_mutex_unlock_mutex_of_xpc_registration($p0);
    goto SeqInstr_487, SeqInstr_488;

  SeqInstr_488:
    assume assertsPassed;
    goto SeqInstr_489;

  SeqInstr_489:
    goto corral_source_split_5092;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1029} mutex_unlock($p0);
    goto corral_source_split_5093;

  corral_source_split_5093:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_487:
    assume !assertsPassed;
    return;
}



const xpc_process_connect: ref;

axiom xpc_process_connect == $sub.ref(0, 419335);

procedure xpc_process_connect($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.24, $M.40, $M.18, $M.19, $M.20, $M.21, $M.22, $M.2, $M.23, $CurrAddr, $M.31, $M.28, $M.41, $M.42, $M.0, assertsPassed, $M.43, $M.44, $M.45, $M.32;



implementation xpc_process_connect($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i64;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i32;
  var $i36: i32;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $i44: i32;
  var $i45: i32;
  var $i46: i1;
  var $p47: ref;
  var $i48: i32;
  var $i49: i32;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $i54: i32;
  var $i55: i1;
  var $p56: ref;
  var $p57: ref;
  var $i58: i16;
  var $i59: i32;
  var $p60: ref;
  var $i61: i16;
  var $i62: i32;
  var $p64: ref;
  var vslice_dummy_var_66: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5095;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(80, 1));
    goto corral_source_split_5096;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.1, $p2);
    goto corral_source_split_5097;

  corral_source_split_5097:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 64);
    goto corral_source_split_5098;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_5099;

  corral_source_split_5099:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_5101;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(80, 1));
    goto corral_source_split_5102;

  corral_source_split_5102:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.1, $p6);
    goto corral_source_split_5103;

  corral_source_split_5103:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 32);
    goto corral_source_split_5104;

  corral_source_split_5104:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_5105;

  corral_source_split_5105:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(80, 1));
    goto corral_source_split_5107;

  corral_source_split_5107:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.1, $p10);
    goto corral_source_split_5108;

  corral_source_split_5108:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 128);
    goto corral_source_split_5109;

  corral_source_split_5109:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_5110;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(80, 1));
    goto corral_source_split_5139;

  corral_source_split_5139:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.1, $p30);
    goto corral_source_split_5140;

  corral_source_split_5140:
    assume {:verifier.code 0} true;
    $i32 := $and.i32($i31, 16);
    goto corral_source_split_5141;

  corral_source_split_5141:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 0);
    goto corral_source_split_5142;

  corral_source_split_5142:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(80, 1));
    goto corral_source_split_5152;

  corral_source_split_5152:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.1, $p39);
    goto corral_source_split_5153;

  corral_source_split_5153:
    assume {:verifier.code 0} true;
    $i41 := $and.i32($i40, 8);
    goto corral_source_split_5154;

  corral_source_split_5154:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i41, 0);
    goto corral_source_split_5155;

  corral_source_split_5155:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(80, 1));
    goto corral_source_split_5159;

  corral_source_split_5159:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.1, $p43);
    goto corral_source_split_5160;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    $i45 := $and.i32($i44, 4);
    goto corral_source_split_5161;

  corral_source_split_5161:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i45, 0);
    goto corral_source_split_5162;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(80, 1));
    goto corral_source_split_5172;

  corral_source_split_5172:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.1, $p52);
    goto corral_source_split_5173;

  corral_source_split_5173:
    assume {:verifier.code 0} true;
    $i54 := $and.i32($i53, 2);
    goto corral_source_split_5174;

  corral_source_split_5174:
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i54, 0);
    goto corral_source_split_5175;

  corral_source_split_5175:
    assume {:verifier.code 0} true;
    assume {:branchcond $i55} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p56 := $M.17;
    goto corral_source_split_5179;

  corral_source_split_5179:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(92, 1));
    goto corral_source_split_5180;

  corral_source_split_5180:
    assume {:verifier.code 0} true;
    $i58 := $load.i16($M.1, $p57);
    goto corral_source_split_5181;

  corral_source_split_5181:
    assume {:verifier.code 0} true;
    $i59 := $zext.i16.i32($i58);
    goto corral_source_split_5182;

  corral_source_split_5182:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(0, 1));
    goto corral_source_split_5183;

  corral_source_split_5183:
    assume {:verifier.code 0} true;
    $i61 := $load.i16($M.1, $p60);
    goto corral_source_split_5184;

  corral_source_split_5184:
    assume {:verifier.code 0} true;
    $i62 := $sext.i16.i32($i61);
    goto corral_source_split_5185;

  corral_source_split_5185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1038} vslice_dummy_var_66 := _dev_info.ref.ref.i32.i32($p56, .str.98, $i59, $i62);
    goto corral_source_split_5186;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(80, 1));
    goto corral_source_split_5187;

  corral_source_split_5187:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p64, 1152);
    goto corral_source_split_5188;

  corral_source_split_5188:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb26:
    assume $i55 == 1;
    goto corral_source_split_5177;

  corral_source_split_5177:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb23:
    assume $i46 == 1;
    goto corral_source_split_5164;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(80, 1));
    goto corral_source_split_5165;

  corral_source_split_5165:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.1, $p47);
    goto corral_source_split_5166;

  corral_source_split_5166:
    assume {:verifier.code 0} true;
    $i49 := $or.i32($i48, 1028);
    goto corral_source_split_5167;

  corral_source_split_5167:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(80, 1));
    goto corral_source_split_5168;

  corral_source_split_5168:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p50, $i49);
    goto corral_source_split_5169;

  corral_source_split_5169:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(208, 1)));
    call {:si_unique_call 1037} devirtbounce.8($p51, $p0, $p1);
    goto SeqInstr_499, SeqInstr_500;

  SeqInstr_500:
    assume assertsPassed;
    goto SeqInstr_501;

  SeqInstr_501:
    goto corral_source_split_5170;

  corral_source_split_5170:
    assume {:verifier.code 0} true;
    goto $bb25;

  SeqInstr_499:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i42 == 1;
    goto corral_source_split_5157;

  corral_source_split_5157:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb17:
    assume $i33 == 1;
    goto corral_source_split_5144;

  corral_source_split_5144:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(80, 1));
    goto corral_source_split_5145;

  corral_source_split_5145:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.1, $p34);
    goto corral_source_split_5146;

  corral_source_split_5146:
    assume {:verifier.code 0} true;
    $i36 := $or.i32($i35, 16);
    goto corral_source_split_5147;

  corral_source_split_5147:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(80, 1));
    goto corral_source_split_5148;

  corral_source_split_5148:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p37, $i36);
    goto corral_source_split_5149;

  corral_source_split_5149:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(200, 1)));
    call {:si_unique_call 1036} devirtbounce.8($p38, $p0, $p1);
    goto SeqInstr_496, SeqInstr_497;

  SeqInstr_497:
    assume assertsPassed;
    goto SeqInstr_498;

  SeqInstr_498:
    goto corral_source_split_5150;

  corral_source_split_5150:
    assume {:verifier.code 0} true;
    goto $bb19;

  SeqInstr_496:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i13 == 1;
    goto corral_source_split_5112;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(8, 1));
    goto corral_source_split_5113;

  corral_source_split_5113:
    assume {:verifier.code 0} true;
    $i15 := $load.i64($M.1, $p1);
    goto corral_source_split_5114;

  corral_source_split_5114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1030} spin_unlock_irqrestore($p14, $i15);
    goto corral_source_split_5115;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(232, 1)));
    call {:si_unique_call 1031} $i17 := devirtbounce.10($p16, $p0);
    goto SeqInstr_490, SeqInstr_491;

  SeqInstr_491:
    assume assertsPassed;
    goto SeqInstr_492;

  SeqInstr_492:
    call {:si_unique_call 1032} {:cexpr "ret"} boogie_si_record_i32($i17);
    goto corral_source_split_5116;

  corral_source_split_5116:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(8, 1));
    goto corral_source_split_5117;

  corral_source_split_5117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1033} $p19 := spinlock_check($p18);
    goto corral_source_split_5118;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1034} $i20 := _raw_spin_lock_irqsave($p19);
    goto corral_source_split_5119;

  corral_source_split_5119:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p1, $i20);
    goto corral_source_split_5120;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i17, 0);
    goto corral_source_split_5121;

  corral_source_split_5121:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i21 == 1);
    goto corral_source_split_5126;

  corral_source_split_5126:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(80, 1));
    goto corral_source_split_5127;

  corral_source_split_5127:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.1, $p22);
    goto corral_source_split_5128;

  corral_source_split_5128:
    assume {:verifier.code 0} true;
    $i24 := $or.i32($i23, 128);
    goto corral_source_split_5129;

  corral_source_split_5129:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(80, 1));
    goto corral_source_split_5130;

  corral_source_split_5130:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p25, $i24);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 720)), $mul.ref(80, 1));
    goto corral_source_split_5132;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.1, $p26);
    goto corral_source_split_5133;

  corral_source_split_5133:
    assume {:verifier.code 0} true;
    $i28 := $and.i32($i27, 131072);
    goto corral_source_split_5134;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_5135;

  corral_source_split_5135:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i29 == 1;
    goto corral_source_split_5137;

  corral_source_split_5137:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb10:
    assume $i21 == 1;
    goto corral_source_split_5123;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1035} xpc_disconnect_channel(100, $p0, $i17, $p1);
    goto SeqInstr_493, SeqInstr_494;

  SeqInstr_494:
    assume assertsPassed;
    goto SeqInstr_495;

  SeqInstr_495:
    goto corral_source_split_5124;

  corral_source_split_5124:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_493:
    assume !assertsPassed;
    return;

  SeqInstr_490:
    assume !assertsPassed;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const ldv_mutex_unlock_mutex_of_xpc_registration: ref;

axiom ldv_mutex_unlock_mutex_of_xpc_registration == $sub.ref(0, 420367);

procedure ldv_mutex_unlock_mutex_of_xpc_registration($p0: ref);
  free requires assertsPassed;
  modifies $M.32, assertsPassed;



implementation ldv_mutex_unlock_mutex_of_xpc_registration($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5190;

  corral_source_split_5190:
    assume {:verifier.code 0} true;
    $i1 := $M.32;
    goto corral_source_split_5191;

  corral_source_split_5191:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 2);
    goto corral_source_split_5192;

  corral_source_split_5192:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_5196;

  corral_source_split_5196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1039} ldv_error();
    goto SeqInstr_502, SeqInstr_503;

  SeqInstr_503:
    assume assertsPassed;
    goto SeqInstr_504;

  SeqInstr_504:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.32 := 1;
    call {:si_unique_call 1040} {:cexpr "ldv_mutex_mutex_of_xpc_registration"} boogie_si_record_i32(1);
    goto corral_source_split_5198;

  corral_source_split_5198:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_502:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5194;

  corral_source_split_5194:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mutex_trylock: ref;

axiom mutex_trylock == $sub.ref(0, 421399);

procedure mutex_trylock($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation mutex_trylock($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5200;

  corral_source_split_5200:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1041} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1042} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_5201;

  corral_source_split_5201:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_mutex_trylock_mutex_of_xpc_registration: ref;

axiom ldv_mutex_trylock_mutex_of_xpc_registration == $sub.ref(0, 422431);

procedure ldv_mutex_trylock_mutex_of_xpc_registration($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.32, assertsPassed;



implementation ldv_mutex_trylock_mutex_of_xpc_registration($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5203;

  corral_source_split_5203:
    assume {:verifier.code 0} true;
    $i1 := $M.32;
    goto corral_source_split_5204;

  corral_source_split_5204:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_5205;

  corral_source_split_5205:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_5209;

  corral_source_split_5209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1043} ldv_error();
    goto SeqInstr_505, SeqInstr_506;

  SeqInstr_506:
    assume assertsPassed;
    goto SeqInstr_507;

  SeqInstr_507:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1044} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1045} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    call {:si_unique_call 1046} {:cexpr "is_mutex_held_by_another_thread"} boogie_si_record_i32($i3);
    goto corral_source_split_5211;

  corral_source_split_5211:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_5212;

  corral_source_split_5212:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i4 == 1);
    goto corral_source_split_5216;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    $M.32 := 2;
    call {:si_unique_call 1047} {:cexpr "ldv_mutex_mutex_of_xpc_registration"} boogie_si_record_i32(2);
    goto corral_source_split_5217;

  corral_source_split_5217:
    assume {:verifier.code 0} true;
    $i5 := 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5219;

  corral_source_split_5219:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_5214;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb6;

  SeqInstr_505:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5207;

  corral_source_split_5207:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const complete_: ref;

axiom complete_ == $sub.ref(0, 423463);

procedure complete_($p0: ref);
  free requires assertsPassed;



implementation complete_($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5221;

  corral_source_split_5221:
    assume {:verifier.code 0} true;
    return;
}



const spin_lock: ref;

axiom spin_lock == $sub.ref(0, 424495);

procedure spin_lock($p0: ref);
  free requires assertsPassed;



implementation spin_lock($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5223;

  corral_source_split_5223:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_5224;

  corral_source_split_5224:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5225;

  corral_source_split_5225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1048} _raw_spin_lock($p2);
    goto corral_source_split_5226;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    return;
}



const spin_unlock: ref;

axiom spin_unlock == $sub.ref(0, 425527);

procedure spin_unlock($p0: ref);
  free requires assertsPassed;



implementation spin_unlock($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5228;

  corral_source_split_5228:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_5229;

  corral_source_split_5229:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5230;

  corral_source_split_5230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1049} _raw_spin_unlock($p2);
    goto corral_source_split_5231;

  corral_source_split_5231:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock: ref;

axiom _raw_spin_unlock == $sub.ref(0, 426559);

procedure _raw_spin_unlock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5233;

  corral_source_split_5233:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock: ref;

axiom _raw_spin_lock == $sub.ref(0, 427591);

procedure _raw_spin_lock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5235;

  corral_source_split_5235:
    assume {:verifier.code 0} true;
    return;
}



const xpc_kzalloc_cacheline_aligned: ref;

axiom xpc_kzalloc_cacheline_aligned == $sub.ref(0, 428623);

procedure xpc_kzalloc_cacheline_aligned($i0: i64, $i1: i32, $p2: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation xpc_kzalloc_cacheline_aligned($i0: i64, $i1: i32, $p2: ref) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $i11: i64;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $i23: i64;
  var $i24: i64;
  var $i25: i64;
  var $p26: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1050} {:cexpr "xpc_kzalloc_cacheline_aligned:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 1051} {:cexpr "xpc_kzalloc_cacheline_aligned:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_5237;

  corral_source_split_5237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1052} $p3 := kzalloc($i0, $i1);
    goto corral_source_split_5238;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p2, $p3);
    goto corral_source_split_5239;

  corral_source_split_5239:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p2);
    goto corral_source_split_5240;

  corral_source_split_5240:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_5241;

  corral_source_split_5241:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_5242;

  corral_source_split_5242:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.1, $p2);
    goto corral_source_split_5248;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_5249;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.1, $p2);
    goto corral_source_split_5250;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_5251;

  corral_source_split_5251:
    assume {:verifier.code 0} true;
    $i12 := $add.i64($i11, 63);
    goto corral_source_split_5252;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    $i13 := $and.i64($i12, $sub.i64(0, 64));
    goto corral_source_split_5253;

  corral_source_split_5253:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i9, $i13);
    goto corral_source_split_5254;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.1, $p2);
    goto corral_source_split_5259;

  corral_source_split_5259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1053} kfree($p16);
    goto corral_source_split_5260;

  corral_source_split_5260:
    assume {:verifier.code 0} true;
    $i17 := $add.i64($i0, 64);
    goto corral_source_split_5261;

  corral_source_split_5261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1054} $p18 := kzalloc($i17, $i1);
    goto corral_source_split_5262;

  corral_source_split_5262:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p2, $p18);
    goto corral_source_split_5263;

  corral_source_split_5263:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.1, $p2);
    goto corral_source_split_5264;

  corral_source_split_5264:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_5265;

  corral_source_split_5265:
    assume {:verifier.code 0} true;
    $i21 := $eq.i64($i20, 0);
    goto corral_source_split_5266;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.1, $p2);
    goto corral_source_split_5270;

  corral_source_split_5270:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_5271;

  corral_source_split_5271:
    assume {:verifier.code 0} true;
    $i24 := $add.i64($i23, 63);
    goto corral_source_split_5272;

  corral_source_split_5272:
    assume {:verifier.code 0} true;
    $i25 := $and.i64($i24, $sub.i64(0, 64));
    goto corral_source_split_5273;

  corral_source_split_5273:
    assume {:verifier.code 0} true;
    $p26 := $i2p.i64.ref($i25);
    goto corral_source_split_5274;

  corral_source_split_5274:
    assume {:verifier.code 0} true;
    $p7 := $p26;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5246;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  $bb8:
    assume $i21 == 1;
    goto corral_source_split_5268;

  corral_source_split_5268:
    assume {:verifier.code 0} true;
    $p7 := $0.ref;
    goto $bb3;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_5256;

  corral_source_split_5256:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.1, $p2);
    goto corral_source_split_5257;

  corral_source_split_5257:
    assume {:verifier.code 0} true;
    $p7 := $p15;
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_5244;

  corral_source_split_5244:
    assume {:verifier.code 0} true;
    $p7 := $0.ref;
    goto $bb3;
}



const __init_waitqueue_head: ref;

axiom __init_waitqueue_head == $sub.ref(0, 429655);

procedure __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5276;

  corral_source_split_5276:
    assume {:verifier.code 0} true;
    return;
}



const init_completion: ref;

axiom init_completion == $sub.ref(0, 430687);

procedure init_completion($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation init_completion($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1055} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_5278;

  corral_source_split_5278:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_5279;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p2, 0);
    goto corral_source_split_5280;

  corral_source_split_5280:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(8, 1));
    goto corral_source_split_5281;

  corral_source_split_5281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1056} __init_waitqueue_head($p3, .str.63, $p1);
    goto corral_source_split_5282;

  corral_source_split_5282:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_lock_60: ref;

axiom ldv_mutex_lock_60 == $sub.ref(0, 431719);

procedure ldv_mutex_lock_60($p0: ref);
  free requires assertsPassed;
  modifies $M.28, assertsPassed;



implementation ldv_mutex_lock_60($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5284;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1057} ldv_mutex_lock_cached_activate_gru_mq_desc_mutex_of_xpc_partition_uv($p0);
    goto SeqInstr_508, SeqInstr_509;

  SeqInstr_509:
    assume assertsPassed;
    goto SeqInstr_510;

  SeqInstr_510:
    goto corral_source_split_5285;

  corral_source_split_5285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1058} mutex_lock($p0);
    goto corral_source_split_5286;

  corral_source_split_5286:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_508:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_61: ref;

axiom ldv_mutex_unlock_61 == $sub.ref(0, 432751);

procedure ldv_mutex_unlock_61($p0: ref);
  free requires assertsPassed;
  modifies $M.28, assertsPassed;



implementation ldv_mutex_unlock_61($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5288;

  corral_source_split_5288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1059} ldv_mutex_unlock_cached_activate_gru_mq_desc_mutex_of_xpc_partition_uv($p0);
    goto SeqInstr_511, SeqInstr_512;

  SeqInstr_512:
    assume assertsPassed;
    goto SeqInstr_513;

  SeqInstr_513:
    goto corral_source_split_5289;

  corral_source_split_5289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1060} mutex_unlock($p0);
    goto corral_source_split_5290;

  corral_source_split_5290:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_511:
    assume !assertsPassed;
    return;
}



const __mutex_init: ref;

axiom __mutex_init == $sub.ref(0, 433783);

procedure __mutex_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __mutex_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5292;

  corral_source_split_5292:
    assume {:verifier.code 0} true;
    return;
}



const xpc_disconnect_wait: ref;

axiom xpc_disconnect_wait == $sub.ref(0, 434815);

procedure xpc_disconnect_wait($i0: i32);
  free requires assertsPassed;
  modifies $M.1, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.0, $M.2, $CurrAddr, $M.23, $M.28, assertsPassed;



implementation xpc_disconnect_wait($i0: i32)
{
  var $i1: i16;
  var $i2: i32;
  var $i3: i1;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $p22: ref;
  var $i23: i8;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $i27: i8;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $i32: i16;
  var $i33: i32;
  var $i34: i64;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i8;
  var $i39: i32;
  var $p40: ref;
  var $i41: i8;
  var $i42: i32;
  var $i43: i32;
  var $i44: i8;
  var $p45: ref;
  var $i46: i16;
  var $i47: i32;
  var $i48: i64;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $p54: ref;
  var $i55: i32;
  var $p56: ref;
  var $i57: i32;
  var $i58: i32;
  var $p59: ref;
  var $p60: ref;
  var $i61: i1;
  var $i62: i32;
  var $i63: i32;
  var $i64: i16;
  var $i65: i32;
  var $i66: i16;
  var $i67: i32;
  var $i68: i1;
  var $i4: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1061} {:cexpr "xpc_disconnect_wait:arg:ch_number"} boogie_si_record_i32($i0);
    goto corral_source_split_5294;

  corral_source_split_5294:
    assume {:verifier.code 0} true;
    $i1 := $load.i16($M.1, xp_max_npartitions);
    goto corral_source_split_5295;

  corral_source_split_5295:
    assume {:verifier.code 0} true;
    $i2 := $sext.i16.i32($i1);
    goto corral_source_split_5296;

  corral_source_split_5296:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32(0, $i2);
    goto corral_source_split_5297;

  corral_source_split_5297:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5299;

  corral_source_split_5299:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb4;

  $bb4:
    call $p5, $i6, $p7, $i8, $i9, $p10, $p11, $i12, $p14, $i15, $i16, $i17, $p18, $p19, $p20, $i21, $p22, $i23, $i24, $i25, $p26, $i27, $i28, $i29, $p30, $p31, $i32, $i33, $i34, $p35, $p36, $p37, $i38, $i39, $p40, $i41, $i42, $i43, $i44, $p45, $i46, $i47, $i48, $p49, $p50, $p51, $p52, $i53, $p54, $i55, $p56, $i57, $i58, $p59, $p60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i4 := xpc_disconnect_wait_loop_$bb4($i0, $p5, $i6, $p7, $i8, $i9, $p10, $p11, $i12, $p14, $i15, $i16, $i17, $p18, $p19, $p20, $i21, $p22, $i23, $i24, $i25, $p26, $i27, $i28, $i29, $p30, $p31, $i32, $i33, $i34, $p35, $p36, $p37, $i38, $i39, $p40, $i41, $i42, $i43, $i44, $p45, $i46, $i47, $i48, $p49, $p50, $p51, $p52, $i53, $p54, $i55, $p56, $i57, $i58, $p59, $p60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i4);
    goto $bb4_last;

  corral_source_split_5301:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p5 := $M.3;
    goto corral_source_split_5303;

  corral_source_split_5303:
    assume {:verifier.code 0} true;
    $i6 := $sext.i16.i64($i4);
    goto corral_source_split_5304;

  corral_source_split_5304:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p5, $mul.ref($i6, 872));
    goto corral_source_split_5305;

  corral_source_split_5305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1062} $i8 := xpc_part_ref($p7);
    goto SeqInstr_514, SeqInstr_515;

  SeqInstr_515:
    assume assertsPassed;
    goto SeqInstr_516;

  SeqInstr_516:
    call {:si_unique_call 1063} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_5306;

  corral_source_split_5306:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_5307;

  corral_source_split_5307:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref($i6, 872)), $mul.ref(376, 1));
    goto corral_source_split_5319;

  corral_source_split_5319:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.1, $p10);
    goto corral_source_split_5320;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i0);
    goto corral_source_split_5321;

  corral_source_split_5321:
    assume {:verifier.code 0} true;
    goto corral_source_split_5322;

  corral_source_split_5322:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p11, $mul.ref($i12, 720)), $mul.ref(80, 1));
    goto corral_source_split_5323;

  corral_source_split_5323:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.1, $p14);
    goto corral_source_split_5324;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i15, 1048576);
    goto corral_source_split_5325;

  corral_source_split_5325:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 0);
    goto corral_source_split_5326;

  corral_source_split_5326:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p11, $mul.ref($i12, 720)), $mul.ref(224, 1));
    goto corral_source_split_5331;

  corral_source_split_5331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1066} wait_for_completion($p18);
    goto corral_source_split_5332;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p11, $mul.ref($i12, 720)), $mul.ref(8, 1));
    goto corral_source_split_5333;

  corral_source_split_5333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1067} $p20 := spinlock_check($p19);
    goto corral_source_split_5334;

  corral_source_split_5334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1068} $i21 := _raw_spin_lock_irqsave($p20);
    call {:si_unique_call 1069} {:cexpr "irq_flags"} boogie_si_record_i64($i21);
    goto corral_source_split_5335;

  corral_source_split_5335:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p11, $mul.ref($i12, 720)), $mul.ref(200, 1));
    goto corral_source_split_5336;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.1, $p22);
    goto corral_source_split_5337;

  corral_source_split_5337:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    goto corral_source_split_5338;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_5339;

  corral_source_split_5339:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i55 := 0;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_5379;

  corral_source_split_5379:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p11, $mul.ref($i12, 720)), $mul.ref(80, 1));
    goto corral_source_split_5380;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.1, $p56);
    goto corral_source_split_5381;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    $i58 := $and.i32($i57, $sub.i32(0, 1048577));
    goto corral_source_split_5382;

  corral_source_split_5382:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p11, $mul.ref($i12, 720)), $mul.ref(80, 1));
    goto corral_source_split_5383;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p59, $i58);
    goto corral_source_split_5384;

  corral_source_split_5384:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p11, $mul.ref($i12, 720)), $mul.ref(8, 1));
    goto corral_source_split_5385;

  corral_source_split_5385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1072} spin_unlock_irqrestore($p60, $i21);
    goto corral_source_split_5386;

  corral_source_split_5386:
    assume {:verifier.code 0} true;
    $i61 := $ne.i32($i55, 0);
    goto corral_source_split_5387;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1074} xpc_part_deref($p7);
    goto SeqInstr_523, SeqInstr_524;

  SeqInstr_524:
    assume assertsPassed;
    goto SeqInstr_525;

  SeqInstr_525:
    goto corral_source_split_5392;

  corral_source_split_5392:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i62 := $sext.i16.i32($i4);
    goto corral_source_split_5311;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    $i63 := $add.i32($i62, 1);
    goto corral_source_split_5312;

  corral_source_split_5312:
    assume {:verifier.code 0} true;
    $i64 := $trunc.i32.i16($i63);
    call {:si_unique_call 1064} {:cexpr "partid"} boogie_si_record_i16($i64);
    goto corral_source_split_5313;

  corral_source_split_5313:
    assume {:verifier.code 0} true;
    $i65 := $sext.i16.i32($i64);
    goto corral_source_split_5314;

  corral_source_split_5314:
    assume {:verifier.code 0} true;
    $i66 := $load.i16($M.1, xp_max_npartitions);
    goto corral_source_split_5315;

  corral_source_split_5315:
    assume {:verifier.code 0} true;
    $i67 := $sext.i16.i32($i66);
    goto corral_source_split_5316;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    $i68 := $slt.i32($i65, $i67);
    goto corral_source_split_5317;

  corral_source_split_5317:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i68 == 1);
    goto corral_source_split_5394;

  corral_source_split_5394:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb22:
    assume $i68 == 1;
    assume {:verifier.code 0} true;
    $i4 := $i64;
    goto $bb22_dummy;

  SeqInstr_523:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i61 == 1;
    goto corral_source_split_5389;

  corral_source_split_5389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1073} xpc_wakeup_channel_mgr($p7);
    goto SeqInstr_520, SeqInstr_521;

  SeqInstr_521:
    assume assertsPassed;
    goto SeqInstr_522;

  SeqInstr_522:
    goto corral_source_split_5390;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    goto $bb21;

  SeqInstr_520:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i25 == 1;
    goto corral_source_split_5341;

  corral_source_split_5341:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p5, $mul.ref($i6, 872)), $mul.ref(112, 1));
    goto corral_source_split_5342;

  corral_source_split_5342:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.1, $p26);
    goto corral_source_split_5343;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i27);
    goto corral_source_split_5344;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 4);
    goto corral_source_split_5345;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    $i53 := 0;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_5375;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p11, $mul.ref($i12, 720)), $mul.ref(200, 1));
    goto corral_source_split_5376;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p54, 0);
    goto corral_source_split_5377;

  corral_source_split_5377:
    assume {:verifier.code 0} true;
    $i55 := $i53;
    goto $bb18;

  $bb15:
    assume $i29 == 1;
    goto corral_source_split_5347;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p5, $mul.ref($i6, 872)), $mul.ref(392, 1));
    goto corral_source_split_5348;

  corral_source_split_5348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1070} spin_lock($p30);
    goto corral_source_split_5349;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p11, $mul.ref($i12, 720)), $mul.ref(92, 1));
    goto corral_source_split_5350;

  corral_source_split_5350:
    assume {:verifier.code 0} true;
    $i32 := $load.i16($M.1, $p31);
    goto corral_source_split_5351;

  corral_source_split_5351:
    assume {:verifier.code 0} true;
    $i33 := $zext.i16.i32($i32);
    goto corral_source_split_5352;

  corral_source_split_5352:
    assume {:verifier.code 0} true;
    $i34 := $sext.i32.i64($i33);
    goto corral_source_split_5353;

  corral_source_split_5353:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p5, $mul.ref($i6, 872)), $mul.ref(384, 1));
    goto corral_source_split_5354;

  corral_source_split_5354:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_5355;

  corral_source_split_5355:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 2)), $mul.ref($i34, 1));
    goto corral_source_split_5356;

  corral_source_split_5356:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.1, $p37);
    goto corral_source_split_5357;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i38);
    goto corral_source_split_5358;

  corral_source_split_5358:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p11, $mul.ref($i12, 720)), $mul.ref(200, 1));
    goto corral_source_split_5359;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    $i41 := $load.i8($M.1, $p40);
    goto corral_source_split_5360;

  corral_source_split_5360:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i41);
    goto corral_source_split_5361;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    $i43 := $or.i32($i39, $i42);
    goto corral_source_split_5362;

  corral_source_split_5362:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i32.i8($i43);
    goto corral_source_split_5363;

  corral_source_split_5363:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p11, $mul.ref($i12, 720)), $mul.ref(92, 1));
    goto corral_source_split_5364;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    $i46 := $load.i16($M.1, $p45);
    goto corral_source_split_5365;

  corral_source_split_5365:
    assume {:verifier.code 0} true;
    $i47 := $zext.i16.i32($i46);
    goto corral_source_split_5366;

  corral_source_split_5366:
    assume {:verifier.code 0} true;
    $i48 := $sext.i32.i64($i47);
    goto corral_source_split_5367;

  corral_source_split_5367:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p5, $mul.ref($i6, 872)), $mul.ref(384, 1));
    goto corral_source_split_5368;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_5369;

  corral_source_split_5369:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p50, $mul.ref(0, 2)), $mul.ref($i48, 1));
    goto corral_source_split_5370;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p51, $i44);
    goto corral_source_split_5371;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p5, $mul.ref($i6, 872)), $mul.ref(392, 1));
    goto corral_source_split_5372;

  corral_source_split_5372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1071} spin_unlock($p52);
    goto corral_source_split_5373;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    $i53 := 1;
    goto $bb17;

  $bb10:
    assume $i17 == 1;
    goto corral_source_split_5328;

  corral_source_split_5328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1065} xpc_part_deref($p7);
    goto SeqInstr_517, SeqInstr_518;

  SeqInstr_518:
    assume assertsPassed;
    goto SeqInstr_519;

  SeqInstr_519:
    goto corral_source_split_5329;

  corral_source_split_5329:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_517:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i9 == 1;
    goto corral_source_split_5309;

  corral_source_split_5309:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_514:
    assume !assertsPassed;
    return;

  $bb22_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5301;
}



const xpc_init: ref;

axiom xpc_init == $sub.ref(0, 435847);

procedure xpc_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.1, $M.0, $M.2, $M.4, $M.3, $M.34, $M.35, $M.36, $M.37, $M.14, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.23, $M.16, $M.15, $M.24, $M.40, $M.18, $M.19, $M.20, $M.21, $M.22, $M.43, $M.44, $M.45, $M.41, $M.28, $CurrAddr, assertsPassed, $M.31, $M.42, $M.32;



implementation xpc_init() returns ($r: i32)
{
  var $p0: ref;
  var $p2: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;
  var $p34: ref;
  var $i35: i64;
  var $i36: i1;
  var $p37: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i1;
  var $p44: ref;
  var $i45: i64;
  var $i46: i1;
  var $p47: ref;
  var $i20: i32;
  var $p51: ref;
  var $i52: i64;
  var $i53: i1;
  var $p54: ref;
  var $i14: i32;
  var $i55: i32;
  var $i56: i1;
  var $i9: i32;
  var vslice_dummy_var_67: i32;
  var vslice_dummy_var_68: i32;
  var vslice_dummy_var_69: i32;
  var vslice_dummy_var_70: i32;
  var vslice_dummy_var_71: i32;
  var vslice_dummy_var_72: i32;
  var vslice_dummy_var_73: i32;
  var vslice_dummy_var_74: i32;
  var vslice_dummy_var_75: i32;
  var vslice_dummy_var_76: i32;
  var vslice_dummy_var_77: i32;
  var vslice_dummy_var_78: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5396;

  corral_source_split_5396:
    assume {:verifier.code 0} true;
    $p0 := $M.5;
    goto corral_source_split_5397;

  corral_source_split_5397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1075} vslice_dummy_var_67 := dev_set_name.ref.ref($p0, .str.10);
    goto corral_source_split_5398;

  corral_source_split_5398:
    assume {:verifier.code 0} true;
    $p2 := $M.17;
    goto corral_source_split_5399;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1076} vslice_dummy_var_68 := dev_set_name.ref.ref($p2, .str.11);
    goto corral_source_split_5400;

  corral_source_split_5400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1077} $i4 := is_uv_system();
    call {:si_unique_call 1078} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_5401;

  corral_source_split_5401:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_5402;

  corral_source_split_5402:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 19);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5407;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_5408;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1081} $i10 := xpc_setup_partitions();
    call {:si_unique_call 1082} {:cexpr "ret"} boogie_si_record_i32($i10);
    goto corral_source_split_5414;

  corral_source_split_5414:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_5415;

  corral_source_split_5415:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1086} $p15 := register_sysctl_table(xpc_sys_dir);
    goto corral_source_split_5425;

  corral_source_split_5425:
    assume {:verifier.code 0} true;
    $M.6 := $p15;
    goto corral_source_split_5426;

  corral_source_split_5426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1087} $i16 := xpc_setup_rsvd_page();
    goto SeqInstr_526, SeqInstr_527;

  SeqInstr_527:
    assume assertsPassed;
    goto SeqInstr_528;

  SeqInstr_528:
    call {:si_unique_call 1088} {:cexpr "ret"} boogie_si_record_i32($i16);
    goto corral_source_split_5427;

  corral_source_split_5427:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_5428;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1090} $i21 := register_reboot_notifier(xpc_reboot_notifier);
    call {:si_unique_call 1091} {:cexpr "ret"} boogie_si_record_i32($i21);
    goto corral_source_split_5439;

  corral_source_split_5439:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_5440;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1093} $i25 := register_die_notifier(xpc_die_notifier);
    call {:si_unique_call 1094} {:cexpr "ret"} boogie_si_record_i32($i25);
    goto corral_source_split_5446;

  corral_source_split_5446:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_5447;

  corral_source_split_5447:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1096} $p29 := kthread_create_on_node.ref.ref.i32.ref(xpc_hb_checker, $0.ref, $sub.i32(0, 1), .str.16);
    goto corral_source_split_5453;

  corral_source_split_5453:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_5454;

  corral_source_split_5454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1097} $i31 := IS_ERR($p30);
    call {:si_unique_call 1098} {:cexpr "tmp___1"} boogie_si_record_i64($i31);
    goto corral_source_split_5455;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    $i32 := $eq.i64($i31, 0);
    goto corral_source_split_5456;

  corral_source_split_5456:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p29);
    goto corral_source_split_5461;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1100} $i35 := IS_ERR($p34);
    call {:si_unique_call 1101} {:cexpr "tmp___2"} boogie_si_record_i64($i35);
    goto corral_source_split_5462;

  corral_source_split_5462:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i35, 0);
    goto corral_source_split_5463;

  corral_source_split_5463:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1106} $p39 := kthread_create_on_node.ref.ref.i32.ref(xpc_initiate_discovery, $0.ref, $sub.i32(0, 1), .str.18);
    goto corral_source_split_5473;

  corral_source_split_5473:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_5474;

  corral_source_split_5474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1107} $i41 := IS_ERR($p40);
    call {:si_unique_call 1108} {:cexpr "tmp___4"} boogie_si_record_i64($i41);
    goto corral_source_split_5475;

  corral_source_split_5475:
    assume {:verifier.code 0} true;
    $i42 := $eq.i64($i41, 0);
    goto corral_source_split_5476;

  corral_source_split_5476:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p39);
    goto corral_source_split_5481;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1110} $i45 := IS_ERR($p44);
    call {:si_unique_call 1111} {:cexpr "tmp___5"} boogie_si_record_i64($i45);
    goto corral_source_split_5482;

  corral_source_split_5482:
    assume {:verifier.code 0} true;
    $i46 := $ne.i64($i45, 0);
    goto corral_source_split_5483;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1115} xpc_set_interface(xpc_initiate_connect, xpc_initiate_disconnect, xpc_initiate_send, xpc_initiate_send_notify, xpc_initiate_received, xpc_initiate_partid_to_nasids);
    goto corral_source_split_5491;

  corral_source_split_5491:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5412;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb32:
    assume $i46 == 1;
    goto corral_source_split_5485;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    $p47 := $M.5;
    goto corral_source_split_5486;

  corral_source_split_5486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1112} vslice_dummy_var_78 := dev_err.ref.ref($p47, .str.19);
    goto corral_source_split_5487;

  corral_source_split_5487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1113} complete_(xpc_discovery_exited);
    goto corral_source_split_5488;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1114} xpc_do_exit(19);
    goto SeqInstr_529, SeqInstr_530;

  SeqInstr_530:
    assume assertsPassed;
    goto SeqInstr_531;

  SeqInstr_531:
    goto corral_source_split_5489;

  corral_source_split_5489:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 16);
    goto $bb6;

  SeqInstr_529:
    assume !assertsPassed;
    return;

  $bb29:
    assume $i42 == 1;
    goto corral_source_split_5478;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1109} vslice_dummy_var_77 := wake_up_process($p39);
    goto corral_source_split_5479;

  corral_source_split_5479:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb25:
    assume $i36 == 1;
    goto corral_source_split_5465;

  corral_source_split_5465:
    assume {:verifier.code 0} true;
    $p37 := $M.5;
    goto corral_source_split_5466;

  corral_source_split_5466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1102} vslice_dummy_var_74 := dev_err.ref.ref($p37, .str.17);
    goto corral_source_split_5467;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1103} xpc_teardown_rsvd_page();
    goto corral_source_split_5469;

  corral_source_split_5469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1104} vslice_dummy_var_75 := unregister_die_notifier(xpc_die_notifier);
    goto corral_source_split_5470;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1105} vslice_dummy_var_76 := unregister_reboot_notifier(xpc_reboot_notifier);
    goto corral_source_split_5471;

  corral_source_split_5471:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(0, 16);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_5434;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    $p51 := $M.6;
    goto corral_source_split_5435;

  corral_source_split_5435:
    assume {:verifier.code 0} true;
    $i52 := $p2i.ref.i64($p51);
    goto corral_source_split_5436;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    $i53 := $ne.i64($i52, 0);
    goto corral_source_split_5437;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1117} xpc_teardown_partitions();
    goto SeqInstr_532, SeqInstr_533;

  SeqInstr_533:
    assume assertsPassed;
    goto SeqInstr_534;

  SeqInstr_534:
    goto corral_source_split_5497;

  corral_source_split_5497:
    assume {:verifier.code 0} true;
    $i14 := $i20;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_5421;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1084} $i55 := is_uv_system();
    call {:si_unique_call 1085} {:cexpr "tmp___6"} boogie_si_record_i32($i55);
    goto corral_source_split_5422;

  corral_source_split_5422:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 0);
    goto corral_source_split_5423;

  corral_source_split_5423:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i9 := $i14;
    goto $bb6;

  $bb38:
    assume $i56 == 1;
    goto corral_source_split_5499;

  corral_source_split_5499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1118} xpc_exit_uv();
    goto corral_source_split_5500;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    goto $bb40;

  SeqInstr_532:
    assume !assertsPassed;
    return;

  $bb35:
    assume $i53 == 1;
    goto corral_source_split_5493;

  corral_source_split_5493:
    assume {:verifier.code 0} true;
    $p54 := $M.6;
    goto corral_source_split_5494;

  corral_source_split_5494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1116} unregister_sysctl_table($p54);
    goto corral_source_split_5495;

  corral_source_split_5495:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb22:
    assume $i32 == 1;
    goto corral_source_split_5458;

  corral_source_split_5458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1099} vslice_dummy_var_73 := wake_up_process($p29);
    goto corral_source_split_5459;

  corral_source_split_5459:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb19:
    assume $i26 == 1;
    goto corral_source_split_5449;

  corral_source_split_5449:
    assume {:verifier.code 0} true;
    $p27 := $M.5;
    goto corral_source_split_5450;

  corral_source_split_5450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1095} vslice_dummy_var_72 := dev_warn.ref.ref($p27, .str.15);
    goto corral_source_split_5451;

  corral_source_split_5451:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb16:
    assume $i22 == 1;
    goto corral_source_split_5442;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    $p23 := $M.5;
    goto corral_source_split_5443;

  corral_source_split_5443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1092} vslice_dummy_var_71 := dev_warn.ref.ref($p23, .str.14);
    goto corral_source_split_5444;

  corral_source_split_5444:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb12:
    assume $i17 == 1;
    goto corral_source_split_5430;

  corral_source_split_5430:
    assume {:verifier.code 0} true;
    $p18 := $M.5;
    goto corral_source_split_5431;

  corral_source_split_5431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1089} vslice_dummy_var_70 := dev_err.ref.ref($p18, .str.13);
    goto corral_source_split_5432;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    $i20 := $i16;
    goto $bb14;

  SeqInstr_526:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i11 == 1;
    goto corral_source_split_5417;

  corral_source_split_5417:
    assume {:verifier.code 0} true;
    $p12 := $M.5;
    goto corral_source_split_5418;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1083} vslice_dummy_var_69 := dev_err.ref.ref($p12, .str.12);
    goto corral_source_split_5419;

  corral_source_split_5419:
    assume {:verifier.code 0} true;
    $i14 := $i10;
    goto $bb10;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_5410;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    $i9 := $i7;
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5404;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1079} $i6 := xpc_init_uv();
    call {:si_unique_call 1080} {:cexpr "ret"} boogie_si_record_i32($i6);
    goto corral_source_split_5405;

  corral_source_split_5405:
    assume {:verifier.code 0} true;
    $i7 := $i6;
    goto $bb3;
}



const dev_set_name: ref;

axiom dev_set_name == $sub.ref(0, 436879);

procedure dev_set_name.ref.ref($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_set_name.ref.ref($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5502;

  corral_source_split_5502:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1119} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1120} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_5503;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const xpc_init_uv: ref;

axiom xpc_init_uv == $sub.ref(0, 437911);

procedure xpc_init_uv() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.16, $M.15, $M.1, $CurrAddr;



implementation xpc_init_uv() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i10: i32;
  var $i11: i1;
  var $i5: i32;
  var $i12: i32;
  var $i4: i32;
  var $i9: i32;
  var $i14: i32;
  var $i15: i32;
  var $i13: i32;
  var $i16: i1;
  var $p17: ref;
  var $i18: i32;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var cmdloc_dummy_var_8: [ref]i8;
  var vslice_dummy_var_79: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5505;

  corral_source_split_5505:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_6 := $M.4;
    cmdloc_dummy_var_7 := $M.4;
    call {:si_unique_call 1121} cmdloc_dummy_var_8 := $memcpy.i8(cmdloc_dummy_var_6, cmdloc_dummy_var_7, xpc_arch_ops, xpc_arch_ops_uv, 328, $zext.i32.i64(8), 0 == 1);
    $M.4 := cmdloc_dummy_var_8;
    goto corral_source_split_5506;

  corral_source_split_5506:
    assume {:verifier.code 0} true;
    $i0 := $M.33;
    goto corral_source_split_5507;

  corral_source_split_5507:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 0);
    goto corral_source_split_5508;

  corral_source_split_5508:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_5514;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    $i14 := $M.33;
    goto corral_source_split_5515;

  corral_source_split_5515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1124} $i15 := xpc_init_mq_node($i14);
    call {:si_unique_call 1125} {:cexpr "ret"} boogie_si_record_i32($i15);
    assume {:verifier.code 0} true;
    $i13 := $i15;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_5535;

  corral_source_split_5535:
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i13, 0);
    goto corral_source_split_5536;

  corral_source_split_5536:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb15:
    assume $i16 == 1;
    goto corral_source_split_5538;

  corral_source_split_5538:
    assume {:verifier.code 0} true;
    $p17 := $M.5;
    goto corral_source_split_5539;

  corral_source_split_5539:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, $i13);
    goto corral_source_split_5540;

  corral_source_split_5540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1130} vslice_dummy_var_79 := dev_err.ref.ref.i32($p17, .str.53, $i18);
    goto corral_source_split_5541;

  corral_source_split_5541:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_5510;

  corral_source_split_5510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1122} $i2 := __first_node($add.ref($add.ref(node_states, $mul.ref(0, 640)), $mul.ref(1, 128)));
    call {:si_unique_call 1123} {:cexpr "nid"} boogie_si_record_i32($i2);
    goto corral_source_split_5511;

  corral_source_split_5511:
    assume {:verifier.code 0} true;
    $i3 := $sle.i32($i2, 1023);
    goto corral_source_split_5512;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_5519;

  corral_source_split_5519:
    assume {:verifier.code 0} true;
    $i9 := $i4;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_5528;

  corral_source_split_5528:
    assume {:verifier.code 0} true;
    $i13 := $i9;
    goto $bb14;

  $bb3:
    assume $i3 == 1;
    goto corral_source_split_5517;

  corral_source_split_5517:
    assume {:verifier.code 0} true;
    $i5 := $i2;
    goto $bb6;

  $bb6:
    call $i6, $i7, $i8, $i10, $i11, $i5, $i12 := xpc_init_uv_loop_$bb6($i6, $i7, $i8, $i10, $i11, $i5, $i12);
    goto $bb6_last;

  corral_source_split_5521:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1126} $i6 := xpc_init_mq_node($i5);
    call {:si_unique_call 1127} {:cexpr "ret"} boogie_si_record_i32($i6);
    goto corral_source_split_5523;

  corral_source_split_5523:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_5524;

  corral_source_split_5524:
    assume {:verifier.code 0} true;
    $i8 := $i6;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1128} $i10 := __next_node($i5, $add.ref($add.ref(node_states, $mul.ref(0, 640)), $mul.ref(1, 128)));
    call {:si_unique_call 1129} {:cexpr "nid"} boogie_si_record_i32($i10);
    goto corral_source_split_5530;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    $i11 := $sle.i32($i10, 1023);
    goto corral_source_split_5531;

  corral_source_split_5531:
    assume {:verifier.code 0} true;
    $i12 := $i6;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_5533;

  corral_source_split_5533:
    assume {:verifier.code 0} true;
    $i4 := $i12;
    goto $bb5;

  $bb12:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    $i5 := $i10;
    goto $bb12_dummy;

  $bb8:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_5526;

  corral_source_split_5526:
    assume {:verifier.code 0} true;
    $i9 := $i8;
    goto $bb10;

  $bb12_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5521;
}



const xpc_setup_partitions: ref;

axiom xpc_setup_partitions == $sub.ref(0, 438943);

procedure xpc_setup_partitions() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3, $M.1, $CurrAddr;



implementation xpc_setup_partitions() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i16;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $i14: i16;
  var $i15: i32;
  var $i16: i1;
  var $p18: ref;
  var $i19: i64;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p32: ref;
  var $i33: i64;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i32;
  var $i41: i16;
  var $i42: i32;
  var $i43: i16;
  var $i44: i32;
  var $i45: i1;
  var $i17: i16;
  var $p46: ref;
  var $i47: i32;
  var $i13: i32;
  var vslice_dummy_var_80: i32;
  var vslice_dummy_var_81: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1131} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1132} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1133} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_5543;

  corral_source_split_5543:
    assume {:verifier.code 0} true;
    $i3 := $load.i16($M.1, xp_max_npartitions);
    goto corral_source_split_5544;

  corral_source_split_5544:
    assume {:verifier.code 0} true;
    $i4 := $sext.i16.i64($i3);
    goto corral_source_split_5545;

  corral_source_split_5545:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i4, 896);
    goto corral_source_split_5546;

  corral_source_split_5546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1134} $p6 := kzalloc($i5, 208);
    goto corral_source_split_5547;

  corral_source_split_5547:
    assume {:verifier.code 0} true;
    goto corral_source_split_5548;

  corral_source_split_5548:
    assume {:verifier.code 0} true;
    $M.3 := $p6;
    goto corral_source_split_5549;

  corral_source_split_5549:
    assume {:verifier.code 0} true;
    $p8 := $M.3;
    goto corral_source_split_5550;

  corral_source_split_5550:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_5551;

  corral_source_split_5551:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_5552;

  corral_source_split_5552:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i14 := $load.i16($M.1, xp_max_npartitions);
    goto corral_source_split_5560;

  corral_source_split_5560:
    assume {:verifier.code 0} true;
    $i15 := $sext.i16.i32($i14);
    goto corral_source_split_5561;

  corral_source_split_5561:
    assume {:verifier.code 0} true;
    $i16 := $slt.i32(0, $i15);
    goto corral_source_split_5562;

  corral_source_split_5562:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.4, xpc_arch_ops);
    call {:si_unique_call 1142} $i47 := devirtbounce($p46);
    call {:si_unique_call 1143} {:cexpr "tmp___0"} boogie_si_record_i32($i47);
    goto corral_source_split_5607;

  corral_source_split_5607:
    assume {:verifier.code 0} true;
    $i13 := $i47;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5558;

  corral_source_split_5558:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_5564;

  corral_source_split_5564:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb8;

  $bb8:
    call $p18, $i19, $p20, $p21, $p22, $p25, $p26, $p27, $p28, $p29, $p30, $p32, $i33, $p35, $p36, $p37, $p38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i17, vslice_dummy_var_81 := xpc_setup_partitions_loop_$bb8($p0, $p1, $p2, $p18, $i19, $p20, $p21, $p22, $p25, $p26, $p27, $p28, $p29, $p30, $p32, $i33, $p35, $p36, $p37, $p38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i17, vslice_dummy_var_81);
    goto $bb8_last;

  corral_source_split_5566:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p18 := $M.3;
    goto corral_source_split_5568;

  corral_source_split_5568:
    assume {:verifier.code 0} true;
    $i19 := $sext.i16.i64($i17);
    goto corral_source_split_5569;

  corral_source_split_5569:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($p18, $mul.ref($i19, 872));
    goto corral_source_split_5570;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p18, $mul.ref($i19, 872)), $mul.ref(32, 1));
    goto corral_source_split_5571;

  corral_source_split_5571:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p21, 0);
    goto corral_source_split_5572;

  corral_source_split_5572:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p18, $mul.ref($i19, 872)), $mul.ref(40, 1));
    goto corral_source_split_5573;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1136} vslice_dummy_var_81 := spinlock_check($p22);
    goto corral_source_split_5574;

  corral_source_split_5574:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p18, $mul.ref($i19, 872)), $mul.ref(40, 1)), $mul.ref(0, 1));
    goto corral_source_split_5575;

  corral_source_split_5575:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_5576;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1137} __raw_spin_lock_init($p26, .str.69, $p0);
    goto corral_source_split_5577;

  corral_source_split_5577:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p18, $mul.ref($i19, 872)), $mul.ref(112, 1));
    goto corral_source_split_5578;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p27, 0);
    goto corral_source_split_5579;

  corral_source_split_5579:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p18, $mul.ref($i19, 872)), $mul.ref(116, 1));
    goto corral_source_split_5580;

  corral_source_split_5580:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p28, 0);
    goto corral_source_split_5581;

  corral_source_split_5581:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p18, $mul.ref($i19, 872)), $mul.ref(120, 1));
    goto corral_source_split_5582;

  corral_source_split_5582:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p29, 0);
    goto corral_source_split_5583;

  corral_source_split_5583:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p18, $mul.ref($i19, 872)), $mul.ref(136, 1));
    goto corral_source_split_5584;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1138} init_timer_key($p30, 0, .str.70, $p1);
    goto corral_source_split_5585;

  corral_source_split_5585:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p18, $mul.ref($i19, 872)), $mul.ref(136, 1)), $mul.ref(32, 1));
    goto corral_source_split_5586;

  corral_source_split_5586:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p32, xpc_timeout_partition_disengage);
    goto corral_source_split_5587;

  corral_source_split_5587:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p20);
    goto corral_source_split_5588;

  corral_source_split_5588:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p18, $mul.ref($i19, 872)), $mul.ref(136, 1)), $mul.ref(40, 1));
    goto corral_source_split_5589;

  corral_source_split_5589:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p35, $i33);
    goto corral_source_split_5590;

  corral_source_split_5590:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p18, $mul.ref($i19, 872)), $mul.ref(264, 1));
    goto corral_source_split_5591;

  corral_source_split_5591:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p36, 0);
    goto corral_source_split_5592;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p18, $mul.ref($i19, 872)), $mul.ref(272, 1));
    goto corral_source_split_5593;

  corral_source_split_5593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1139} __init_waitqueue_head($p37, .str.71, $p2);
    goto corral_source_split_5594;

  corral_source_split_5594:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p18, $mul.ref($i19, 872)), $mul.ref(360, 1));
    goto corral_source_split_5595;

  corral_source_split_5595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1140} atomic_set($p38, 0);
    goto corral_source_split_5596;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    $i39 := $sext.i16.i32($i17);
    goto corral_source_split_5597;

  corral_source_split_5597:
    assume {:verifier.code 0} true;
    $i40 := $add.i32($i39, 1);
    goto corral_source_split_5598;

  corral_source_split_5598:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i32.i16($i40);
    call {:si_unique_call 1141} {:cexpr "partid"} boogie_si_record_i16($i41);
    goto corral_source_split_5599;

  corral_source_split_5599:
    assume {:verifier.code 0} true;
    $i42 := $sext.i16.i32($i41);
    goto corral_source_split_5600;

  corral_source_split_5600:
    assume {:verifier.code 0} true;
    $i43 := $load.i16($M.1, xp_max_npartitions);
    goto corral_source_split_5601;

  corral_source_split_5601:
    assume {:verifier.code 0} true;
    $i44 := $sext.i16.i32($i43);
    goto corral_source_split_5602;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    $i45 := $slt.i32($i42, $i44);
    goto corral_source_split_5603;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i45 == 1);
    goto corral_source_split_5605;

  corral_source_split_5605:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb10:
    assume $i45 == 1;
    assume {:verifier.code 0} true;
    $i17 := $i41;
    goto $bb10_dummy;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_5554;

  corral_source_split_5554:
    assume {:verifier.code 0} true;
    $p11 := $M.5;
    goto corral_source_split_5555;

  corral_source_split_5555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1135} vslice_dummy_var_80 := dev_err.ref.ref($p11, .str.12);
    goto corral_source_split_5556;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 12);
    goto $bb3;

  $bb10_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5566;
}



const register_sysctl_table: ref;

axiom register_sysctl_table == $sub.ref(0, 439975);

procedure register_sysctl_table($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation register_sysctl_table($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5609;

  corral_source_split_5609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1144} $p1 := external_alloc();
    goto corral_source_split_5610;

  corral_source_split_5610:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5611;

  corral_source_split_5611:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const xpc_setup_rsvd_page: ref;

axiom xpc_setup_rsvd_page == $sub.ref(0, 441007);

procedure xpc_setup_rsvd_page() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.34, $M.35, $M.36, $M.37, $M.14, $M.23, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.24, $M.40, $M.18, $M.19, $M.20, $M.21, $M.22, $M.43, $M.44, $M.45, $M.41, $M.28, $M.2, $CurrAddr, assertsPassed, $M.31, $M.42, $M.0, $M.32;



implementation xpc_setup_rsvd_page() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $p4: ref;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $i13: i32;
  var $p17: ref;
  var $i18: i32;
  var $i19: i64;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $p24: ref;
  var $i25: i1;
  var $p26: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i64;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $p36: ref;
  var $i37: i16;
  var $i38: i32;
  var $i39: i32;
  var $i40: i16;
  var $p41: ref;
  var $p42: ref;
  var $i43: i16;
  var $i44: i32;
  var $i45: i16;
  var $i46: i32;
  var $i47: i1;
  var $i48: i32;
  var $i49: i64;
  var $i50: i64;
  var $i51: i1;
  var $p52: ref;
  var $i53: i16;
  var $i54: i32;
  var $i55: i1;
  var $p56: ref;
  var $i57: i16;
  var $i58: i32;
  var $i59: i16;
  var $i60: i32;
  var $i61: i1;
  var $p62: ref;
  var $p63: ref;
  var $i64: i16;
  var $i65: i32;
  var $i66: i16;
  var $i67: i32;
  var $p69: ref;
  var $i70: i16;
  var $p71: ref;
  var $p72: ref;
  var $i73: i64;
  var $i74: i1;
  var $p75: ref;
  var $p76: ref;
  var $i77: i64;
  var $i78: i32;
  var $p79: ref;
  var $i80: i64;
  var $i81: i64;
  var $i82: i64;
  var $i83: i64;
  var $i84: i64;
  var $i85: i32;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $i89: i32;
  var $i90: i64;
  var $i91: i64;
  var $p92: ref;
  var $p93: ref;
  var $i94: i32;
  var $i95: i1;
  var $i96: i64;
  var $i97: i1;
  var $p98: ref;
  var $i99: i64;
  var $i100: i1;
  var $i101: i64;
  var $i102: i64;
  var $p103: ref;
  var $i28: i32;
  var vslice_dummy_var_82: i32;
  var vslice_dummy_var_83: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5613;

  corral_source_split_5613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1145} $p0 := current_thread_info();
    goto corral_source_split_5614;

  corral_source_split_5614:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(28, 1));
    goto corral_source_split_5615;

  corral_source_split_5615:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.1, $p1);
    goto corral_source_split_5616;

  corral_source_split_5616:
    assume {:verifier.code 0} true;
    $i3 := $add.i32($i2, 1);
    goto corral_source_split_5617;

  corral_source_split_5617:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(28, 1));
    goto corral_source_split_5618;

  corral_source_split_5618:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p4, $i3);
    call {:si_unique_call 1146} devirtbounce.4(0);
    goto SeqInstr_535, SeqInstr_536;

  SeqInstr_536:
    assume assertsPassed;
    goto SeqInstr_537;

  SeqInstr_537:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i5 := $slt.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $slt.i64(4, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $eq.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1162} __bad_size_call_parameter();
    goto corral_source_split_5639;

  corral_source_split_5639:
    assume {:verifier.code 0} true;
    $i13 := $u0;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_5628;

  corral_source_split_5628:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.1, xp_cpu_to_nasid);
    call {:si_unique_call 1155} $i18 := devirtbounce.28($p17, $i13);
    call {:si_unique_call 1156} {:cexpr "tmp___0"} boogie_si_record_i32($i18);
    goto corral_source_split_5629;

  corral_source_split_5629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1157} $i19 := xpc_get_rsvd_page_pa($i18);
    call {:si_unique_call 1158} {:cexpr "rp_pa"} boogie_si_record_i64($i19);
    call {:si_unique_call 1159} devirtbounce.4(0);
    goto SeqInstr_550, SeqInstr_551;

  SeqInstr_551:
    assume assertsPassed;
    goto SeqInstr_552;

  SeqInstr_552:
    goto corral_source_split_5630;

  corral_source_split_5630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1160} $p20 := current_thread_info();
    goto corral_source_split_5631;

  corral_source_split_5631:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 104)), $mul.ref(28, 1));
    goto corral_source_split_5632;

  corral_source_split_5632:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.1, $p21);
    goto corral_source_split_5633;

  corral_source_split_5633:
    assume {:verifier.code 0} true;
    $i23 := $add.i32($i22, $sub.i32(0, 1));
    goto corral_source_split_5634;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p20, $mul.ref(0, 104)), $mul.ref(28, 1));
    goto corral_source_split_5635;

  corral_source_split_5635:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p24, $i23);
    call {:si_unique_call 1161} devirtbounce.4(0);
    goto SeqInstr_553, SeqInstr_554;

  SeqInstr_554:
    assume assertsPassed;
    goto SeqInstr_555;

  SeqInstr_555:
    goto corral_source_split_5636;

  corral_source_split_5636:
    assume {:verifier.code 0} true;
    $i25 := $eq.i64($i19, 0);
    goto corral_source_split_5637;

  corral_source_split_5637:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.1, xp_socket_pa);
    call {:si_unique_call 1164} $i30 := devirtbounce.29($p29, $i19);
    call {:si_unique_call 1165} {:cexpr "tmp___2"} boogie_si_record_i64($i30);
    goto corral_source_split_5647;

  corral_source_split_5647:
    assume {:verifier.code 0} true;
    $i31 := $add.i64($i30, $sub.i64(0, 131941395333120));
    goto corral_source_split_5648;

  corral_source_split_5648:
    assume {:verifier.code 0} true;
    $p32 := $i2p.i64.ref($i31);
    goto corral_source_split_5649;

  corral_source_split_5649:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 128)), $mul.ref(8, 1));
    goto corral_source_split_5650;

  corral_source_split_5650:
    assume {:verifier.code 0} true;
    $i34 := $load.i64($M.1, $p33);
    goto corral_source_split_5651;

  corral_source_split_5651:
    assume {:verifier.code 0} true;
    $i35 := $ule.i64($i34, 2);
    goto corral_source_split_5652;

  corral_source_split_5652:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p32, $mul.ref(0, 128)), $mul.ref(16, 1));
    goto corral_source_split_5663;

  corral_source_split_5663:
    assume {:verifier.code 0} true;
    $i43 := $load.i16($M.1, $p42);
    goto corral_source_split_5664;

  corral_source_split_5664:
    assume {:verifier.code 0} true;
    $i44 := $sext.i16.i32($i43);
    goto corral_source_split_5665;

  corral_source_split_5665:
    assume {:verifier.code 0} true;
    $i45 := $load.i16($M.1, xp_partition_id);
    goto corral_source_split_5666;

  corral_source_split_5666:
    assume {:verifier.code 0} true;
    $i46 := $sext.i16.i32($i45);
    goto corral_source_split_5667;

  corral_source_split_5667:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i44, $i46);
    goto corral_source_split_5668;

  corral_source_split_5668:
    assume {:verifier.code 0} true;
    $i48 := $zext.i1.i32($i47);
    goto corral_source_split_5669;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    $i49 := $sext.i32.i64($i48);
    goto corral_source_split_5670;

  corral_source_split_5670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1166} $i50 := ldv__builtin_expect($i49, 0);
    call {:si_unique_call 1167} {:cexpr "tmp___3"} boogie_si_record_i64($i50);
    goto corral_source_split_5671;

  corral_source_split_5671:
    assume {:verifier.code 0} true;
    $i51 := $ne.i64($i50, 0);
    goto corral_source_split_5672;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p32, $mul.ref(0, 128)), $mul.ref(16, 1));
    goto corral_source_split_5676;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    $i53 := $load.i16($M.1, $p52);
    goto corral_source_split_5677;

  corral_source_split_5677:
    assume {:verifier.code 0} true;
    $i54 := $sext.i16.i32($i53);
    goto corral_source_split_5678;

  corral_source_split_5678:
    assume {:verifier.code 0} true;
    $i55 := $slt.i32($i54, 0);
    goto corral_source_split_5679;

  corral_source_split_5679:
    assume {:verifier.code 0} true;
    assume {:branchcond $i55} true;
    goto $bb34, $bb36;

  $bb36:
    assume !($i55 == 1);
    goto corral_source_split_5689;

  corral_source_split_5689:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p32, $mul.ref(0, 128)), $mul.ref(16, 1));
    goto corral_source_split_5690;

  corral_source_split_5690:
    assume {:verifier.code 0} true;
    $i57 := $load.i16($M.1, $p56);
    goto corral_source_split_5691;

  corral_source_split_5691:
    assume {:verifier.code 0} true;
    $i58 := $sext.i16.i32($i57);
    goto corral_source_split_5692;

  corral_source_split_5692:
    assume {:verifier.code 0} true;
    $i59 := $load.i16($M.1, xp_max_npartitions);
    goto corral_source_split_5693;

  corral_source_split_5693:
    assume {:verifier.code 0} true;
    $i60 := $sext.i16.i32($i59);
    goto corral_source_split_5694;

  corral_source_split_5694:
    assume {:verifier.code 0} true;
    $i61 := $sge.i32($i58, $i60);
    goto corral_source_split_5695;

  corral_source_split_5695:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p32, $mul.ref(0, 128)), $mul.ref(20, 1));
    goto corral_source_split_5697;

  corral_source_split_5697:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p69, 48);
    goto corral_source_split_5698;

  corral_source_split_5698:
    assume {:verifier.code 0} true;
    $i70 := $load.i16($M.1, xp_max_npartitions);
    goto corral_source_split_5699;

  corral_source_split_5699:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p32, $mul.ref(0, 128)), $mul.ref(18, 1));
    goto corral_source_split_5700;

  corral_source_split_5700:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p71, $i70);
    goto corral_source_split_5701;

  corral_source_split_5701:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p32, $mul.ref(0, 128)), $mul.ref(8, 1));
    goto corral_source_split_5702;

  corral_source_split_5702:
    assume {:verifier.code 0} true;
    $i73 := $load.i64($M.1, $p72);
    goto corral_source_split_5703;

  corral_source_split_5703:
    assume {:verifier.code 0} true;
    $i74 := $eq.i64($i73, 1);
    goto corral_source_split_5704;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p32, $mul.ref(0, 128)), $mul.ref(120, 1));
    goto corral_source_split_5710;

  corral_source_split_5710:
    assume {:verifier.code 0} true;
    $i77 := $load.i64($M.1, $p76);
    goto corral_source_split_5711;

  corral_source_split_5711:
    assume {:verifier.code 0} true;
    $i78 := $trunc.i64.i32($i77);
    goto corral_source_split_5712;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    $M.34 := $i78;
    call {:si_unique_call 1170} {:cexpr "xpc_nasid_mask_nbytes"} boogie_si_record_i32($i78);
    goto corral_source_split_5713;

  corral_source_split_5713:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p32, $mul.ref(0, 128)), $mul.ref(120, 1));
    goto corral_source_split_5714;

  corral_source_split_5714:
    assume {:verifier.code 0} true;
    $i80 := $load.i64($M.1, $p79);
    goto corral_source_split_5715;

  corral_source_split_5715:
    assume {:verifier.code 0} true;
    $i81 := $add.i64($i80, 8);
    goto corral_source_split_5716;

  corral_source_split_5716:
    assume {:verifier.code 0} true;
    $i82 := $mul.i64($i81, 8);
    goto corral_source_split_5717;

  corral_source_split_5717:
    assume {:verifier.code 0} true;
    $i83 := $sub.i64($i82, 1);
    goto corral_source_split_5718;

  corral_source_split_5718:
    assume {:verifier.code 0} true;
    $i84 := $udiv.i64($i83, 64);
    goto corral_source_split_5719;

  corral_source_split_5719:
    assume {:verifier.code 0} true;
    $i85 := $trunc.i64.i32($i84);
    goto corral_source_split_5720;

  corral_source_split_5720:
    assume {:verifier.code 0} true;
    $M.35 := $i85;
    call {:si_unique_call 1171} {:cexpr "xpc_nasid_mask_nlongs"} boogie_si_record_i32($i85);
    goto corral_source_split_5721;

  corral_source_split_5721:
    assume {:verifier.code 0} true;
    $p86 := $bitcast.ref.ref($p32);
    goto corral_source_split_5722;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($p86, $mul.ref(128, 8));
    goto corral_source_split_5723;

  corral_source_split_5723:
    assume {:verifier.code 0} true;
    $M.36 := $p87;
    goto corral_source_split_5724;

  corral_source_split_5724:
    assume {:verifier.code 0} true;
    $p88 := $bitcast.ref.ref($p32);
    goto corral_source_split_5725;

  corral_source_split_5725:
    assume {:verifier.code 0} true;
    $i89 := $M.35;
    goto corral_source_split_5726;

  corral_source_split_5726:
    assume {:verifier.code 0} true;
    $i90 := $sext.i32.i64($i89);
    goto corral_source_split_5727;

  corral_source_split_5727:
    assume {:verifier.code 0} true;
    $i91 := $add.i64($i90, 128);
    goto corral_source_split_5728;

  corral_source_split_5728:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($p88, $mul.ref($i91, 8));
    goto corral_source_split_5729;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    $M.37 := $p92;
    goto corral_source_split_5730;

  corral_source_split_5730:
    assume {:verifier.code 0} true;
    $p93 := $load.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(32, 1)));
    call {:si_unique_call 1172} $i94 := devirtbounce.30($p93, $p32);
    goto SeqInstr_556, SeqInstr_557;

  SeqInstr_557:
    assume assertsPassed;
    goto SeqInstr_558;

  SeqInstr_558:
    call {:si_unique_call 1173} {:cexpr "ret"} boogie_si_record_i32($i94);
    goto corral_source_split_5731;

  corral_source_split_5731:
    assume {:verifier.code 0} true;
    $i95 := $ne.i32($i94, 0);
    goto corral_source_split_5732;

  corral_source_split_5732:
    assume {:verifier.code 0} true;
    assume {:branchcond $i95} true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $i96 := $load.i64($M.1, jiffies);
    call {:si_unique_call 1174} {:cexpr "new_ts_jiffies"} boogie_si_record_i64($i96);
    goto corral_source_split_5736;

  corral_source_split_5736:
    assume {:verifier.code 0} true;
    $i97 := $eq.i64($i96, 0);
    goto corral_source_split_5737;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    assume {:branchcond $i97} true;
    goto $bb46, $bb48;

  $bb48:
    assume !($i97 == 1);
    goto corral_source_split_5741;

  corral_source_split_5741:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p32, $mul.ref(0, 128)), $mul.ref(24, 1));
    goto corral_source_split_5742;

  corral_source_split_5742:
    assume {:verifier.code 0} true;
    $i99 := $load.i64($M.1, $p98);
    goto corral_source_split_5743;

  corral_source_split_5743:
    assume {:verifier.code 0} true;
    $i100 := $eq.i64($i99, $i96);
    goto corral_source_split_5744;

  corral_source_split_5744:
    assume {:verifier.code 0} true;
    assume {:branchcond $i100} true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    $i102 := $i96;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto corral_source_split_5746;

  corral_source_split_5746:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p32, $mul.ref(0, 128)), $mul.ref(24, 1));
    goto corral_source_split_5747;

  corral_source_split_5747:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p103, $i102);
    goto corral_source_split_5748;

  corral_source_split_5748:
    assume {:verifier.code 0} true;
    $M.14 := $p32;
    goto corral_source_split_5749;

  corral_source_split_5749:
    assume {:verifier.code 0} true;
    $i28 := 0;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_5645;

  corral_source_split_5645:
    assume {:verifier.code 0} true;
    $r := $i28;
    return;

  $bb49:
    assume {:verifier.code 0} true;
    assume $i100 == 1;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i101 := $add.i64($i96, 1);
    call {:si_unique_call 1175} {:cexpr "new_ts_jiffies"} boogie_si_record_i64($i101);
    goto corral_source_split_5739;

  corral_source_split_5739:
    assume {:verifier.code 0} true;
    $i102 := $i101;
    goto $bb51;

  $bb46:
    assume {:verifier.code 0} true;
    assume $i97 == 1;
    goto $bb47;

  $bb43:
    assume $i95 == 1;
    goto corral_source_split_5734;

  corral_source_split_5734:
    assume {:verifier.code 0} true;
    $i28 := $i94;
    goto $bb25;

  SeqInstr_556:
    assume !assertsPassed;
    return;

  $bb40:
    assume $i74 == 1;
    goto corral_source_split_5706;

  corral_source_split_5706:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p32, $mul.ref(0, 128)), $mul.ref(120, 1));
    goto corral_source_split_5707;

  corral_source_split_5707:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p75, 128);
    goto corral_source_split_5708;

  corral_source_split_5708:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb37:
    assume {:verifier.code 0} true;
    assume $i61 == 1;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p62 := $M.5;
    goto corral_source_split_5681;

  corral_source_split_5681:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p32, $mul.ref(0, 128)), $mul.ref(16, 1));
    goto corral_source_split_5682;

  corral_source_split_5682:
    assume {:verifier.code 0} true;
    $i64 := $load.i16($M.1, $p63);
    goto corral_source_split_5683;

  corral_source_split_5683:
    assume {:verifier.code 0} true;
    $i65 := $sext.i16.i32($i64);
    goto corral_source_split_5684;

  corral_source_split_5684:
    assume {:verifier.code 0} true;
    $i66 := $load.i16($M.1, xp_max_npartitions);
    goto corral_source_split_5685;

  corral_source_split_5685:
    assume {:verifier.code 0} true;
    $i67 := $sext.i16.i32($i66);
    goto corral_source_split_5686;

  corral_source_split_5686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1169} vslice_dummy_var_83 := dev_err.ref.ref.i32.i32($p62, .str.39, $i65, $i67);
    goto corral_source_split_5687;

  corral_source_split_5687:
    assume {:verifier.code 0} true;
    $i28 := $sub.i32(0, 22);
    goto $bb25;

  $bb34:
    assume {:verifier.code 0} true;
    assume $i55 == 1;
    goto $bb35;

  $bb30:
    assume $i51 == 1;
    call {:si_unique_call 1168} devirtbounce.7(0, .str.38, 212, 12);
    goto corral_source_split_5674;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    call xpc_setup_rsvd_page_loop_$bb32();
    goto $bb32_last;

  $bb27:
    assume $i35 == 1;
    goto corral_source_split_5654;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p32, $mul.ref(0, 128)), $mul.ref(16, 1));
    goto corral_source_split_5655;

  corral_source_split_5655:
    assume {:verifier.code 0} true;
    $i37 := $load.i16($M.1, $p36);
    goto corral_source_split_5656;

  corral_source_split_5656:
    assume {:verifier.code 0} true;
    $i38 := $sext.i16.i32($i37);
    goto corral_source_split_5657;

  corral_source_split_5657:
    assume {:verifier.code 0} true;
    $i39 := $and.i32($i38, 255);
    goto corral_source_split_5658;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i32.i16($i39);
    goto corral_source_split_5659;

  corral_source_split_5659:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p32, $mul.ref(0, 128)), $mul.ref(16, 1));
    goto corral_source_split_5660;

  corral_source_split_5660:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p41, $i40);
    goto corral_source_split_5661;

  corral_source_split_5661:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb23:
    assume $i25 == 1;
    goto corral_source_split_5641;

  corral_source_split_5641:
    assume {:verifier.code 0} true;
    $p26 := $M.5;
    goto corral_source_split_5642;

  corral_source_split_5642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1163} vslice_dummy_var_82 := dev_err.ref.ref($p26, .str.37);
    goto corral_source_split_5643;

  corral_source_split_5643:
    assume {:verifier.code 0} true;
    $i28 := $sub.i32(0, 3);
    goto $bb25;

  SeqInstr_553:
    assume !assertsPassed;
    return;

  SeqInstr_550:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i7 == 1;
    call {:si_unique_call 1147} $i16 := devirtbounce.27(0, cpu_number);
    goto SeqInstr_538, SeqInstr_539;

  SeqInstr_539:
    assume assertsPassed;
    goto SeqInstr_540;

  SeqInstr_540:
    call {:si_unique_call 1148} {:cexpr "pfo_ret_____2"} boogie_si_record_i32($i16);
    goto corral_source_split_5620;

  corral_source_split_5620:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i13 := $i16;
    goto $bb18;

  SeqInstr_538:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i6 == 1;
    assume {:verifier.code 0} true;
    $i8 := $eq.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb9:
    assume $i8 == 1;
    call {:si_unique_call 1149} $i15 := devirtbounce.27(0, cpu_number);
    goto SeqInstr_541, SeqInstr_542;

  SeqInstr_542:
    assume assertsPassed;
    goto SeqInstr_543;

  SeqInstr_543:
    call {:si_unique_call 1150} {:cexpr "pfo_ret_____1"} boogie_si_record_i32($i15);
    goto corral_source_split_5622;

  corral_source_split_5622:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i13 := $i15;
    goto $bb18;

  SeqInstr_541:
    assume !assertsPassed;
    return;

  $bb2:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i9 := $slt.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := $eq.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb8;

  $bb13:
    assume $i10 == 1;
    call {:si_unique_call 1151} $i14 := devirtbounce.27(0, cpu_number);
    goto SeqInstr_544, SeqInstr_545;

  SeqInstr_545:
    assume assertsPassed;
    goto SeqInstr_546;

  SeqInstr_546:
    call {:si_unique_call 1152} {:cexpr "pfo_ret_____0"} boogie_si_record_i32($i14);
    goto corral_source_split_5624;

  corral_source_split_5624:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i13 := $i14;
    goto $bb18;

  SeqInstr_544:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    $i11 := $eq.i64(4, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb8;

  $bb15:
    assume $i11 == 1;
    call {:si_unique_call 1153} $i12 := devirtbounce.27(0, cpu_number);
    goto SeqInstr_547, SeqInstr_548;

  SeqInstr_548:
    assume assertsPassed;
    goto SeqInstr_549;

  SeqInstr_549:
    call {:si_unique_call 1154} {:cexpr "pfo_ret__"} boogie_si_record_i32($i12);
    goto corral_source_split_5626;

  corral_source_split_5626:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb18;

  SeqInstr_547:
    assume !assertsPassed;
    return;

  SeqInstr_535:
    assume !assertsPassed;
    return;

  $bb32_dummy:
    assume false;
    return;

  $bb32_last:
    assume {:verifier.code 0} true;
    goto $bb32_dummy;
}



const register_reboot_notifier: ref;

axiom register_reboot_notifier == $sub.ref(0, 442039);

procedure register_reboot_notifier($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation register_reboot_notifier($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5751;

  corral_source_split_5751:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1176} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1177} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_5752;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const dev_warn: ref;

axiom dev_warn == $sub.ref(0, 443071);

procedure dev_warn.ref.ref($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_warn.ref.ref($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5754;

  corral_source_split_5754:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1178} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1179} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_5755;

  corral_source_split_5755:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const register_die_notifier: ref;

axiom register_die_notifier == $sub.ref(0, 444103);

procedure register_die_notifier($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation register_die_notifier($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5757;

  corral_source_split_5757:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1180} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1181} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_5758;

  corral_source_split_5758:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const xpc_hb_checker: ref;

axiom xpc_hb_checker == $sub.ref(0, 445135);

procedure xpc_hb_checker($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.40, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.18, $M.19, $M.20, $M.21, $M.22, $M.1, $M.23, $CurrAddr, $M.24, $M.28, $M.2, assertsPassed, $M.31, $M.41, $M.42, $M.0, $M.43, $M.44, $M.45, $M.32;



implementation xpc_hb_checker($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i64;
  var $i14: i32;
  var $i15: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i24;
  var $i24: i24;
  var $i25: i24;
  var $p26: ref;
  var $p27: ref;
  var $i28: i8;
  var $i29: i64;
  var $i30: i64;
  var $i31: i64;
  var $i32: i1;
  var $p33: ref;
  var $i34: i64;
  var $i35: i32;
  var $i36: i64;
  var $i37: i32;
  var $i38: i32;
  var $i39: i32;
  var $i41: i64;
  var $i42: i64;
  var $i43: i64;
  var $i44: i1;
  var $i45: i32;
  var $i46: i32;
  var $i47: i64;
  var $i48: i64;
  var $i49: i64;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i24;
  var $i57: i24;
  var $i58: i24;
  var $p59: ref;
  var $p60: ref;
  var $i61: i8;
  var $i62: i64;
  var $i63: i64;
  var $i64: i64;
  var $i65: i1;
  var $p66: ref;
  var $i68: i32;
  var $i69: i1;
  var $i70: i1;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $i77: i24;
  var $i78: i24;
  var $i79: i24;
  var $p80: ref;
  var $p81: ref;
  var $i82: i8;
  var $i83: i64;
  var $i84: i64;
  var $i85: i64;
  var $i86: i1;
  var $p87: ref;
  var $p89: ref;
  var $i90: i32;
  var $i91: i64;
  var $i92: i64;
  var $i93: i64;
  var $i94: i1;
  var $i95: i32;
  var $i96: i1;
  var $i97: i32;
  var $i98: i1;
  var $p99: ref;
  var $p100: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p106: ref;
  var $p107: ref;
  var $p109: ref;
  var $i110: i64;
  var $i111: i64;
  var $i112: i64;
  var $i113: i1;
  var $i114: i32;
  var $i115: i1;
  var $i116: i32;
  var $i117: i1;
  var $p118: ref;
  var $i119: i32;
  var $i120: i1;
  var $i121: i64;
  var $i122: i64;
  var $i123: i64;
  var $i124: i1;
  var $i125: i32;
  var $i126: i1;
  var $i16: i32;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $i133: i24;
  var $i134: i24;
  var $i135: i24;
  var $p136: ref;
  var $p137: ref;
  var $i138: i8;
  var $i139: i64;
  var $i140: i64;
  var $i141: i64;
  var $i142: i1;
  var $p143: ref;
  var vslice_dummy_var_84: i32;
  var vslice_dummy_var_85: i32;
  var vslice_dummy_var_86: i32;
  var vslice_dummy_var_87: i32;
  var vslice_dummy_var_88: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1182} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1183} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1184} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1185} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1186} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_5760;

  corral_source_split_5760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1187} $p6 := get_cpu_mask(0);
    goto corral_source_split_5761;

  corral_source_split_5761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1188} $p7 := get_current();
    goto corral_source_split_5762;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1189} vslice_dummy_var_84 := set_cpus_allowed_ptr($p7, $p6);
    goto corral_source_split_5763;

  corral_source_split_5763:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.39, xpc_hb_check_interval);
    goto corral_source_split_5764;

  corral_source_split_5764:
    assume {:verifier.code 0} true;
    $i10 := $mul.i32($i9, 250);
    goto corral_source_split_5765;

  corral_source_split_5765:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_5766;

  corral_source_split_5766:
    assume {:verifier.code 0} true;
    $i12 := $load.i64($M.1, jiffies);
    goto corral_source_split_5767;

  corral_source_split_5767:
    assume {:verifier.code 0} true;
    $i13 := $add.i64($i11, $i12);
    goto corral_source_split_5768;

  corral_source_split_5768:
    assume {:verifier.code 0} true;
    $M.40 := $i13;
    call {:si_unique_call 1190} {:cexpr "xpc_hb_check_timeout"} boogie_si_record_i64($i13);
    goto corral_source_split_5769;

  corral_source_split_5769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1191} xpc_start_hb_beater();
    goto SeqInstr_559, SeqInstr_560;

  SeqInstr_560:
    assume assertsPassed;
    goto SeqInstr_561;

  SeqInstr_561:
    goto corral_source_split_5770;

  corral_source_split_5770:
    assume {:verifier.code 0} true;
    $i14 := $M.0;
    goto corral_source_split_5771;

  corral_source_split_5771:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 0);
    goto corral_source_split_5772;

  corral_source_split_5772:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1212} xpc_stop_hb_beater();
    goto SeqInstr_568, SeqInstr_569;

  SeqInstr_569:
    assume assertsPassed;
    goto SeqInstr_570;

  SeqInstr_570:
    goto corral_source_split_5957;

  corral_source_split_5957:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5958;

  corral_source_split_5958:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p127, .str);
    goto corral_source_split_5959;

  corral_source_split_5959:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5960;

  corral_source_split_5960:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p128, .str.76);
    goto corral_source_split_5961;

  corral_source_split_5961:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5962;

  corral_source_split_5962:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p129, .str.6);
    goto corral_source_split_5963;

  corral_source_split_5963:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5964;

  corral_source_split_5964:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p130, .str.80);
    goto corral_source_split_5965;

  corral_source_split_5965:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5966;

  corral_source_split_5966:
    assume {:verifier.code 0} true;
    $p132 := $bitcast.ref.ref($p131);
    goto corral_source_split_5967;

  corral_source_split_5967:
    assume {:verifier.code 0} true;
    $i133 := $load.i24($M.12, $p132);
    goto corral_source_split_5968;

  corral_source_split_5968:
    assume {:verifier.code 0} true;
    $i134 := $and.i24($i133, $sub.i24(0, 262144));
    goto corral_source_split_5969;

  corral_source_split_5969:
    assume {:verifier.code 0} true;
    $i135 := $or.i24($i134, 365);
    goto corral_source_split_5970;

  corral_source_split_5970:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p132, $i135);
    goto corral_source_split_5971;

  corral_source_split_5971:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5972;

  corral_source_split_5972:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p136, 0);
    goto corral_source_split_5973;

  corral_source_split_5973:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5974;

  corral_source_split_5974:
    assume {:verifier.code 0} true;
    $i138 := $load.i8($M.13, $p137);
    goto corral_source_split_5975;

  corral_source_split_5975:
    assume {:verifier.code 0} true;
    $i139 := $zext.i8.i64($i138);
    goto corral_source_split_5976;

  corral_source_split_5976:
    assume {:verifier.code 0} true;
    $i140 := $and.i64($i139, 1);
    goto corral_source_split_5977;

  corral_source_split_5977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1213} $i141 := ldv__builtin_expect($i140, 0);
    call {:si_unique_call 1214} {:cexpr "tmp___7"} boogie_si_record_i64($i141);
    goto corral_source_split_5978;

  corral_source_split_5978:
    assume {:verifier.code 0} true;
    $i142 := $ne.i64($i141, 0);
    goto corral_source_split_5979;

  corral_source_split_5979:
    assume {:verifier.code 0} true;
    assume {:branchcond $i142} true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i142 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1216} complete_(xpc_hb_checker_exited);
    goto corral_source_split_5985;

  corral_source_split_5985:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb51:
    assume $i142 == 1;
    goto corral_source_split_5981;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    $p143 := $M.5;
    goto corral_source_split_5982;

  corral_source_split_5982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1215} vslice_dummy_var_88 := __dynamic_dev_dbg.ref.ref.ref($p5, $p143, .str.80);
    goto corral_source_split_5983;

  corral_source_split_5983:
    assume {:verifier.code 0} true;
    goto $bb53;

  SeqInstr_568:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_5774;

  corral_source_split_5774:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb4;

  $bb4:
    call $p17, $p18, $p19, $p20, $p21, $p22, $i23, $i24, $i25, $p26, $p27, $i28, $i29, $i30, $i31, $i32, $p33, $i34, $i35, $i36, $i37, $i38, $i39, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $p50, $p51, $p52, $p53, $p54, $p55, $i56, $i57, $i58, $p59, $p60, $i61, $i62, $i63, $i64, $i65, $p66, $i68, $i69, $i70, $p71, $p72, $p73, $p74, $p75, $p76, $i77, $i78, $i79, $p80, $p81, $i82, $i83, $i84, $i85, $i86, $p87, $p89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $p99, $p100, $p102, $p103, $p104, $p106, $p107, $p109, $i110, $i111, $i112, $i113, $i114, $i115, $i116, $i117, $p118, $i119, $i120, $i121, $i122, $i123, $i124, $i125, $i126, $i16, vslice_dummy_var_85, vslice_dummy_var_86, vslice_dummy_var_87 := xpc_hb_checker_loop_$bb4($p1, $p2, $p3, $p4, $p17, $p18, $p19, $p20, $p21, $p22, $i23, $i24, $i25, $p26, $p27, $i28, $i29, $i30, $i31, $i32, $p33, $i34, $i35, $i36, $i37, $i38, $i39, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $p50, $p51, $p52, $p53, $p54, $p55, $i56, $i57, $i58, $p59, $p60, $i61, $i62, $i63, $i64, $i65, $p66, $i68, $i69, $i70, $p71, $p72, $p73, $p74, $p75, $p76, $i77, $i78, $i79, $p80, $p81, $i82, $i83, $i84, $i85, $i86, $p87, $p89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $p99, $p100, $p102, $p103, $p104, $p106, $p107, $p109, $i110, $i111, $i112, $i113, $i114, $i115, $i116, $i117, $p118, $i119, $i120, $i121, $i122, $i123, $i124, $i125, $i126, $i16, vslice_dummy_var_85, vslice_dummy_var_86, vslice_dummy_var_87);
    goto $bb4_last;

  corral_source_split_5776:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5778;

  corral_source_split_5778:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p17, .str);
    goto corral_source_split_5779;

  corral_source_split_5779:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5780;

  corral_source_split_5780:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p18, .str.76);
    goto corral_source_split_5781;

  corral_source_split_5781:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5782;

  corral_source_split_5782:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p19, .str.6);
    goto corral_source_split_5783;

  corral_source_split_5783:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5784;

  corral_source_split_5784:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p20, .str.77);
    goto corral_source_split_5785;

  corral_source_split_5785:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5786;

  corral_source_split_5786:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_5787;

  corral_source_split_5787:
    assume {:verifier.code 0} true;
    $i23 := $load.i24($M.12, $p22);
    goto corral_source_split_5788;

  corral_source_split_5788:
    assume {:verifier.code 0} true;
    $i24 := $and.i24($i23, $sub.i24(0, 262144));
    goto corral_source_split_5789;

  corral_source_split_5789:
    assume {:verifier.code 0} true;
    $i25 := $or.i24($i24, 329);
    goto corral_source_split_5790;

  corral_source_split_5790:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p22, $i25);
    goto corral_source_split_5791;

  corral_source_split_5791:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5792;

  corral_source_split_5792:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p26, 0);
    goto corral_source_split_5793;

  corral_source_split_5793:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5794;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.13, $p27);
    goto corral_source_split_5795;

  corral_source_split_5795:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i64($i28);
    goto corral_source_split_5796;

  corral_source_split_5796:
    assume {:verifier.code 0} true;
    $i30 := $and.i64($i29, 1);
    goto corral_source_split_5797;

  corral_source_split_5797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1192} $i31 := ldv__builtin_expect($i30, 0);
    call {:si_unique_call 1193} {:cexpr "tmp___1"} boogie_si_record_i64($i31);
    goto corral_source_split_5798;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, 0);
    goto corral_source_split_5799;

  corral_source_split_5799:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i41 := $load.i64($M.1, jiffies);
    goto corral_source_split_5811;

  corral_source_split_5811:
    assume {:verifier.code 0} true;
    $i42 := $M.40;
    goto corral_source_split_5812;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    $i43 := $sub.i64($i41, $i42);
    goto corral_source_split_5813;

  corral_source_split_5813:
    assume {:verifier.code 0} true;
    $i44 := $sge.i64($i43, 0);
    goto corral_source_split_5814;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i68 := $M.23;
    goto corral_source_split_5852;

  corral_source_split_5852:
    assume {:verifier.code 0} true;
    $i69 := $sgt.i32($i68, 0);
    goto corral_source_split_5853;

  corral_source_split_5853:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb17;

  $bb17:
    assume !($i69 == 1);
    goto corral_source_split_5878;

  corral_source_split_5878:
    assume {:verifier.code 0} true;
    $i70 := $ne.i32($i16, 0);
    goto corral_source_split_5879;

  corral_source_split_5879:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    $i90 := $i16;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_5887;

  corral_source_split_5887:
    assume {:verifier.code 0} true;
    $i91 := $load.i64($M.1, jiffies);
    goto corral_source_split_5888;

  corral_source_split_5888:
    assume {:verifier.code 0} true;
    $i92 := $M.40;
    goto corral_source_split_5889;

  corral_source_split_5889:
    assume {:verifier.code 0} true;
    $i93 := $sub.i64($i91, $i92);
    goto corral_source_split_5890;

  corral_source_split_5890:
    assume {:verifier.code 0} true;
    $i94 := $slt.i64($i93, 0);
    goto corral_source_split_5891;

  corral_source_split_5891:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i94 == 1);
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i125 := $M.0;
    goto corral_source_split_5952;

  corral_source_split_5952:
    assume {:verifier.code 0} true;
    $i126 := $eq.i32($i125, 0);
    goto corral_source_split_5953;

  corral_source_split_5953:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i126 == 1);
    goto corral_source_split_5955;

  corral_source_split_5955:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb48:
    assume $i126 == 1;
    assume {:verifier.code 0} true;
    $i16 := $i90;
    goto $bb48_dummy;

  $bb24:
    assume $i94 == 1;
    goto corral_source_split_5893;

  corral_source_split_5893:
    assume {:verifier.code 0} true;
    $i95 := $M.23;
    goto corral_source_split_5894;

  corral_source_split_5894:
    assume {:verifier.code 0} true;
    $i96 := $sle.i32($i95, 0);
    goto corral_source_split_5895;

  corral_source_split_5895:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i96 == 1);
    goto $bb26;

  $bb27:
    assume $i96 == 1;
    goto corral_source_split_5897;

  corral_source_split_5897:
    assume {:verifier.code 0} true;
    $i97 := $M.0;
    goto corral_source_split_5898;

  corral_source_split_5898:
    assume {:verifier.code 0} true;
    $i98 := $eq.i32($i97, 0);
    goto corral_source_split_5899;

  corral_source_split_5899:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i98 == 1);
    goto $bb26;

  $bb29:
    assume $i98 == 1;
    goto corral_source_split_5901;

  corral_source_split_5901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1204} $p99 := get_current();
    goto corral_source_split_5902;

  corral_source_split_5902:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5903;

  corral_source_split_5903:
    assume {:verifier.code 0} true;
    $M.18 := $store.i32($M.18, $p100, 0);
    goto corral_source_split_5904;

  corral_source_split_5904:
    assume {:verifier.code 0} true;
    goto corral_source_split_5905;

  corral_source_split_5905:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5906;

  corral_source_split_5906:
    assume {:verifier.code 0} true;
    $M.19 := $store.ref($M.19, $p102, $p99);
    goto corral_source_split_5907;

  corral_source_split_5907:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5908;

  corral_source_split_5908:
    assume {:verifier.code 0} true;
    $M.20 := $store.ref($M.20, $p103, autoremove_wake_function);
    goto corral_source_split_5909;

  corral_source_split_5909:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5910;

  corral_source_split_5910:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_5911;

  corral_source_split_5911:
    assume {:verifier.code 0} true;
    $M.21 := $store.ref($M.21, $p106, $p104);
    goto corral_source_split_5912;

  corral_source_split_5912:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5913;

  corral_source_split_5913:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(8, 1));
    goto corral_source_split_5914;

  corral_source_split_5914:
    assume {:verifier.code 0} true;
    $M.22 := $store.ref($M.22, $p109, $p107);
    goto corral_source_split_5915;

  corral_source_split_5915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1205} prepare_to_wait(xpc_activate_IRQ_wq, $p4, 1);
    goto corral_source_split_5916;

  corral_source_split_5916:
    assume {:verifier.code 0} true;
    $i110 := $load.i64($M.1, jiffies);
    goto corral_source_split_5917;

  corral_source_split_5917:
    assume {:verifier.code 0} true;
    $i111 := $M.40;
    goto corral_source_split_5918;

  corral_source_split_5918:
    assume {:verifier.code 0} true;
    $i112 := $sub.i64($i110, $i111);
    goto corral_source_split_5919;

  corral_source_split_5919:
    assume {:verifier.code 0} true;
    $i113 := $sge.i64($i112, 0);
    goto corral_source_split_5920;

  corral_source_split_5920:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb33;

  $bb33:
    assume !($i113 == 1);
    goto corral_source_split_5922;

  corral_source_split_5922:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    call $i114, $i115, $i116, $i117, $p118, $i119, $i120, $i121, $i122, $i123, $i124 := xpc_hb_checker_loop_$bb34($p4, $i114, $i115, $i116, $i117, $p118, $i119, $i120, $i121, $i122, $i123, $i124);
    goto $bb34_last;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    $i115 := $sgt.i32($i114, 0);
    goto corral_source_split_5925;

  corral_source_split_5925:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i115 == 1);
    goto corral_source_split_5929;

  corral_source_split_5929:
    assume {:verifier.code 0} true;
    $i116 := $M.0;
    goto corral_source_split_5930;

  corral_source_split_5930:
    assume {:verifier.code 0} true;
    $i117 := $ne.i32($i116, 0);
    goto corral_source_split_5931;

  corral_source_split_5931:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i117 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1207} $p118 := get_current();
    goto corral_source_split_5939;

  corral_source_split_5939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1208} $i119 := signal_pending($p118);
    call {:si_unique_call 1209} {:cexpr "tmp___6"} boogie_si_record_i32($i119);
    goto corral_source_split_5940;

  corral_source_split_5940:
    assume {:verifier.code 0} true;
    $i120 := $eq.i32($i119, 0);
    goto corral_source_split_5941;

  corral_source_split_5941:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1206} finish_wait(xpc_activate_IRQ_wq, $p4);
    goto corral_source_split_5937;

  corral_source_split_5937:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb42:
    assume $i120 == 1;
    goto corral_source_split_5943;

  corral_source_split_5943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1210} schedule();
    goto corral_source_split_5944;

  corral_source_split_5944:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1211} prepare_to_wait(xpc_activate_IRQ_wq, $p4, 1);
    goto corral_source_split_5946;

  corral_source_split_5946:
    assume {:verifier.code 0} true;
    $i121 := $load.i64($M.1, jiffies);
    goto corral_source_split_5947;

  corral_source_split_5947:
    assume {:verifier.code 0} true;
    $i122 := $M.40;
    goto corral_source_split_5948;

  corral_source_split_5948:
    assume {:verifier.code 0} true;
    $i123 := $sub.i64($i121, $i122);
    goto corral_source_split_5949;

  corral_source_split_5949:
    assume {:verifier.code 0} true;
    $i124 := $sge.i64($i123, 0);
    goto corral_source_split_5950;

  corral_source_split_5950:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    assume !($i124 == 1);
    goto $bb46_dummy;

  $bb39:
    assume $i124 == 1;
    goto corral_source_split_5935;

  corral_source_split_5935:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb37:
    assume $i117 == 1;
    goto corral_source_split_5933;

  corral_source_split_5933:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb35:
    assume $i115 == 1;
    goto corral_source_split_5927;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb31:
    assume {:verifier.code 0} true;
    assume $i113 == 1;
    goto $bb32;

  $bb18:
    assume {:verifier.code 0} true;
    assume $i70 == 1;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5855;

  corral_source_split_5855:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p71, .str);
    goto corral_source_split_5856;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5857;

  corral_source_split_5857:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p72, .str.76);
    goto corral_source_split_5858;

  corral_source_split_5858:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5859;

  corral_source_split_5859:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p73, .str.6);
    goto corral_source_split_5860;

  corral_source_split_5860:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5861;

  corral_source_split_5861:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p74, .str.79);
    goto corral_source_split_5862;

  corral_source_split_5862:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5863;

  corral_source_split_5863:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p75);
    goto corral_source_split_5864;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    $i77 := $load.i24($M.12, $p76);
    goto corral_source_split_5865;

  corral_source_split_5865:
    assume {:verifier.code 0} true;
    $i78 := $and.i24($i77, $sub.i24(0, 262144));
    goto corral_source_split_5866;

  corral_source_split_5866:
    assume {:verifier.code 0} true;
    $i79 := $or.i24($i78, 351);
    goto corral_source_split_5867;

  corral_source_split_5867:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p76, $i79);
    goto corral_source_split_5868;

  corral_source_split_5868:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5869;

  corral_source_split_5869:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p80, 0);
    goto corral_source_split_5870;

  corral_source_split_5870:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5871;

  corral_source_split_5871:
    assume {:verifier.code 0} true;
    $i82 := $load.i8($M.13, $p81);
    goto corral_source_split_5872;

  corral_source_split_5872:
    assume {:verifier.code 0} true;
    $i83 := $zext.i8.i64($i82);
    goto corral_source_split_5873;

  corral_source_split_5873:
    assume {:verifier.code 0} true;
    $i84 := $and.i64($i83, 1);
    goto corral_source_split_5874;

  corral_source_split_5874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1200} $i85 := ldv__builtin_expect($i84, 0);
    call {:si_unique_call 1201} {:cexpr "tmp___3"} boogie_si_record_i64($i85);
    goto corral_source_split_5875;

  corral_source_split_5875:
    assume {:verifier.code 0} true;
    $i86 := $ne.i64($i85, 0);
    goto corral_source_split_5876;

  corral_source_split_5876:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p89 := $load.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(16, 1)));
    call {:si_unique_call 1203} devirtbounce.4($p89);
    goto SeqInstr_565, SeqInstr_566;

  SeqInstr_566:
    assume assertsPassed;
    goto SeqInstr_567;

  SeqInstr_567:
    goto corral_source_split_5885;

  corral_source_split_5885:
    assume {:verifier.code 0} true;
    $i90 := 0;
    goto $bb23;

  SeqInstr_565:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i86 == 1;
    goto corral_source_split_5881;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    $p87 := $M.5;
    goto corral_source_split_5882;

  corral_source_split_5882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1202} vslice_dummy_var_87 := __dynamic_dev_dbg.ref.ref.ref($p3, $p87, .str.79);
    goto corral_source_split_5883;

  corral_source_split_5883:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb15:
    assume {:verifier.code 0} true;
    assume $i69 == 1;
    goto $bb16;

  $bb9:
    assume $i44 == 1;
    goto corral_source_split_5816;

  corral_source_split_5816:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.39, xpc_hb_check_interval);
    goto corral_source_split_5817;

  corral_source_split_5817:
    assume {:verifier.code 0} true;
    $i46 := $mul.i32($i45, 250);
    goto corral_source_split_5818;

  corral_source_split_5818:
    assume {:verifier.code 0} true;
    $i47 := $sext.i32.i64($i46);
    goto corral_source_split_5819;

  corral_source_split_5819:
    assume {:verifier.code 0} true;
    $i48 := $load.i64($M.1, jiffies);
    goto corral_source_split_5820;

  corral_source_split_5820:
    assume {:verifier.code 0} true;
    $i49 := $add.i64($i47, $i48);
    goto corral_source_split_5821;

  corral_source_split_5821:
    assume {:verifier.code 0} true;
    $M.40 := $i49;
    call {:si_unique_call 1195} {:cexpr "xpc_hb_check_timeout"} boogie_si_record_i64($i49);
    goto corral_source_split_5822;

  corral_source_split_5822:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5823;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p50, .str);
    goto corral_source_split_5824;

  corral_source_split_5824:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5825;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p51, .str.76);
    goto corral_source_split_5826;

  corral_source_split_5826:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5827;

  corral_source_split_5827:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p52, .str.6);
    goto corral_source_split_5828;

  corral_source_split_5828:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5829;

  corral_source_split_5829:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p53, .str.78);
    goto corral_source_split_5830;

  corral_source_split_5830:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5831;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p54);
    goto corral_source_split_5832;

  corral_source_split_5832:
    assume {:verifier.code 0} true;
    $i56 := $load.i24($M.12, $p55);
    goto corral_source_split_5833;

  corral_source_split_5833:
    assume {:verifier.code 0} true;
    $i57 := $and.i24($i56, $sub.i24(0, 262144));
    goto corral_source_split_5834;

  corral_source_split_5834:
    assume {:verifier.code 0} true;
    $i58 := $or.i24($i57, 336);
    goto corral_source_split_5835;

  corral_source_split_5835:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p55, $i58);
    goto corral_source_split_5836;

  corral_source_split_5836:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5837;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p59, 0);
    goto corral_source_split_5838;

  corral_source_split_5838:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5839;

  corral_source_split_5839:
    assume {:verifier.code 0} true;
    $i61 := $load.i8($M.13, $p60);
    goto corral_source_split_5840;

  corral_source_split_5840:
    assume {:verifier.code 0} true;
    $i62 := $zext.i8.i64($i61);
    goto corral_source_split_5841;

  corral_source_split_5841:
    assume {:verifier.code 0} true;
    $i63 := $and.i64($i62, 1);
    goto corral_source_split_5842;

  corral_source_split_5842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1196} $i64 := ldv__builtin_expect($i63, 0);
    call {:si_unique_call 1197} {:cexpr "tmp___2"} boogie_si_record_i64($i64);
    goto corral_source_split_5843;

  corral_source_split_5843:
    assume {:verifier.code 0} true;
    $i65 := $ne.i64($i64, 0);
    goto corral_source_split_5844;

  corral_source_split_5844:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1199} xpc_check_remote_hb();
    goto SeqInstr_562, SeqInstr_563;

  SeqInstr_563:
    assume assertsPassed;
    goto SeqInstr_564;

  SeqInstr_564:
    goto corral_source_split_5850;

  corral_source_split_5850:
    assume {:verifier.code 0} true;
    goto $bb14;

  SeqInstr_562:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i65 == 1;
    goto corral_source_split_5846;

  corral_source_split_5846:
    assume {:verifier.code 0} true;
    $p66 := $M.5;
    goto corral_source_split_5847;

  corral_source_split_5847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1198} vslice_dummy_var_86 := __dynamic_dev_dbg.ref.ref.ref($p2, $p66, .str.78);
    goto corral_source_split_5848;

  corral_source_split_5848:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb6:
    assume $i32 == 1;
    goto corral_source_split_5801;

  corral_source_split_5801:
    assume {:verifier.code 0} true;
    $p33 := $M.5;
    goto corral_source_split_5802;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    $i34 := $M.40;
    goto corral_source_split_5803;

  corral_source_split_5803:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i64.i32($i34);
    goto corral_source_split_5804;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    $i36 := $load.i64($M.1, jiffies);
    goto corral_source_split_5805;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i64.i32($i36);
    goto corral_source_split_5806;

  corral_source_split_5806:
    assume {:verifier.code 0} true;
    $i38 := $sub.i32($i35, $i37);
    goto corral_source_split_5807;

  corral_source_split_5807:
    assume {:verifier.code 0} true;
    $i39 := $M.23;
    goto corral_source_split_5808;

  corral_source_split_5808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1194} vslice_dummy_var_85 := __dynamic_dev_dbg.ref.ref.ref.i32.i32($p1, $p33, .str.77, $i38, $i39);
    goto corral_source_split_5809;

  corral_source_split_5809:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_559:
    assume !assertsPassed;
    return;

  $bb46_dummy:
    assume false;
    return;

  $bb34_last:
    assume {:verifier.code 0} true;
    $i114 := $M.23;
    goto corral_source_split_5924;

  $bb48_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5776;
}



const xpc_initiate_discovery: ref;

axiom xpc_initiate_discovery == $sub.ref(0, 446167);

procedure xpc_initiate_discovery($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $CurrAddr, $M.41, $M.42, $M.1, $M.43, $M.44, $M.45, $M.23, $M.28, assertsPassed, $M.0, $M.2;



implementation xpc_initiate_discovery($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i24;
  var $i9: i24;
  var $i10: i24;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i64;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var vslice_dummy_var_89: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1217} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_5987;

  corral_source_split_5987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1218} xpc_discovery();
    goto SeqInstr_571, SeqInstr_572;

  SeqInstr_572:
    assume assertsPassed;
    goto SeqInstr_573;

  SeqInstr_573:
    goto corral_source_split_5988;

  corral_source_split_5988:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5989;

  corral_source_split_5989:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p2, .str);
    goto corral_source_split_5990;

  corral_source_split_5990:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5991;

  corral_source_split_5991:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p3, .str.83);
    goto corral_source_split_5992;

  corral_source_split_5992:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5993;

  corral_source_split_5993:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p4, .str.6);
    goto corral_source_split_5994;

  corral_source_split_5994:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5995;

  corral_source_split_5995:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p5, .str.84);
    goto corral_source_split_5996;

  corral_source_split_5996:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5997;

  corral_source_split_5997:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_5998;

  corral_source_split_5998:
    assume {:verifier.code 0} true;
    $i8 := $load.i24($M.12, $p7);
    goto corral_source_split_5999;

  corral_source_split_5999:
    assume {:verifier.code 0} true;
    $i9 := $and.i24($i8, $sub.i24(0, 262144));
    goto corral_source_split_6000;

  corral_source_split_6000:
    assume {:verifier.code 0} true;
    $i10 := $or.i24($i9, 382);
    goto corral_source_split_6001;

  corral_source_split_6001:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p7, $i10);
    goto corral_source_split_6002;

  corral_source_split_6002:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6003;

  corral_source_split_6003:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p11, 0);
    goto corral_source_split_6004;

  corral_source_split_6004:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6005;

  corral_source_split_6005:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.13, $p12);
    goto corral_source_split_6006;

  corral_source_split_6006:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i64($i13);
    goto corral_source_split_6007;

  corral_source_split_6007:
    assume {:verifier.code 0} true;
    $i15 := $and.i64($i14, 1);
    goto corral_source_split_6008;

  corral_source_split_6008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1219} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 1220} {:cexpr "tmp"} boogie_si_record_i64($i16);
    goto corral_source_split_6009;

  corral_source_split_6009:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_6010;

  corral_source_split_6010:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1222} complete_(xpc_discovery_exited);
    goto corral_source_split_6016;

  corral_source_split_6016:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_6012;

  corral_source_split_6012:
    assume {:verifier.code 0} true;
    $p18 := $M.5;
    goto corral_source_split_6013;

  corral_source_split_6013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1221} vslice_dummy_var_89 := __dynamic_dev_dbg.ref.ref.ref($p1, $p18, .str.84);
    goto corral_source_split_6014;

  corral_source_split_6014:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_571:
    assume !assertsPassed;
    return;
}



const xpc_initiate_connect: ref;

axiom xpc_initiate_connect == $sub.ref(0, 447199);

procedure xpc_initiate_connect($i0: i32);
  free requires assertsPassed;
  modifies $M.1, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.0, $M.2, $CurrAddr, $M.23, $M.28, assertsPassed;



implementation xpc_initiate_connect($i0: i32)
{
  var $i1: i16;
  var $i2: i32;
  var $i3: i1;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i32;
  var $i12: i16;
  var $i13: i32;
  var $i14: i16;
  var $i15: i32;
  var $i16: i1;
  var $i4: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1223} {:cexpr "xpc_initiate_connect:arg:ch_number"} boogie_si_record_i32($i0);
    goto corral_source_split_6018;

  corral_source_split_6018:
    assume {:verifier.code 0} true;
    $i1 := $load.i16($M.1, xp_max_npartitions);
    goto corral_source_split_6019;

  corral_source_split_6019:
    assume {:verifier.code 0} true;
    $i2 := $sext.i16.i32($i1);
    goto corral_source_split_6020;

  corral_source_split_6020:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32(0, $i2);
    goto corral_source_split_6021;

  corral_source_split_6021:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_6023;

  corral_source_split_6023:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb4;

  $bb4:
    call $p5, $i6, $p7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i4 := xpc_initiate_connect_loop_$bb4($p5, $i6, $p7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i4);
    goto $bb4_last;

  corral_source_split_6025:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p5 := $M.3;
    goto corral_source_split_6027;

  corral_source_split_6027:
    assume {:verifier.code 0} true;
    $i6 := $sext.i16.i64($i4);
    goto corral_source_split_6028;

  corral_source_split_6028:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p5, $mul.ref($i6, 872));
    goto corral_source_split_6029;

  corral_source_split_6029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1224} $i8 := xpc_part_ref($p7);
    goto SeqInstr_574, SeqInstr_575;

  SeqInstr_575:
    assume assertsPassed;
    goto SeqInstr_576;

  SeqInstr_576:
    call {:si_unique_call 1225} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_6030;

  corral_source_split_6030:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_6031;

  corral_source_split_6031:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i10 := $sext.i16.i32($i4);
    goto corral_source_split_6037;

  corral_source_split_6037:
    assume {:verifier.code 0} true;
    $i11 := $add.i32($i10, 1);
    goto corral_source_split_6038;

  corral_source_split_6038:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i16($i11);
    call {:si_unique_call 1228} {:cexpr "partid"} boogie_si_record_i16($i12);
    goto corral_source_split_6039;

  corral_source_split_6039:
    assume {:verifier.code 0} true;
    $i13 := $sext.i16.i32($i12);
    goto corral_source_split_6040;

  corral_source_split_6040:
    assume {:verifier.code 0} true;
    $i14 := $load.i16($M.1, xp_max_npartitions);
    goto corral_source_split_6041;

  corral_source_split_6041:
    assume {:verifier.code 0} true;
    $i15 := $sext.i16.i32($i14);
    goto corral_source_split_6042;

  corral_source_split_6042:
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i13, $i15);
    goto corral_source_split_6043;

  corral_source_split_6043:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    goto corral_source_split_6045;

  corral_source_split_6045:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb9:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i4 := $i12;
    goto $bb9_dummy;

  $bb6:
    assume $i9 == 1;
    goto corral_source_split_6033;

  corral_source_split_6033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1226} xpc_wakeup_channel_mgr($p7);
    goto SeqInstr_577, SeqInstr_578;

  SeqInstr_578:
    assume assertsPassed;
    goto SeqInstr_579;

  SeqInstr_579:
    goto corral_source_split_6034;

  corral_source_split_6034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1227} xpc_part_deref($p7);
    goto SeqInstr_580, SeqInstr_581;

  SeqInstr_581:
    assume assertsPassed;
    goto SeqInstr_582;

  SeqInstr_582:
    goto corral_source_split_6035;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_580:
    assume !assertsPassed;
    return;

  SeqInstr_577:
    assume !assertsPassed;
    return;

  SeqInstr_574:
    assume !assertsPassed;
    return;

  $bb9_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6025;
}



const xpc_initiate_disconnect: ref;

axiom xpc_initiate_disconnect == $sub.ref(0, 448231);

procedure xpc_initiate_disconnect($i0: i32);
  free requires assertsPassed;
  modifies $M.1, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $CurrAddr, $M.23, $M.0, $M.2, $M.28, assertsPassed;



implementation xpc_initiate_disconnect($i0: i32)
{
  var $p1: ref;
  var $i2: i16;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $i7: i64;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i32;
  var $i29: i32;
  var $i30: i16;
  var $i31: i32;
  var $i32: i16;
  var $i33: i32;
  var $i34: i1;
  var $i5: i16;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1229} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 1230} {:cexpr "xpc_initiate_disconnect:arg:ch_number"} boogie_si_record_i32($i0);
    goto corral_source_split_6047;

  corral_source_split_6047:
    assume {:verifier.code 0} true;
    $i2 := $load.i16($M.1, xp_max_npartitions);
    goto corral_source_split_6048;

  corral_source_split_6048:
    assume {:verifier.code 0} true;
    $i3 := $sext.i16.i32($i2);
    goto corral_source_split_6049;

  corral_source_split_6049:
    assume {:verifier.code 0} true;
    $i4 := $slt.i32(0, $i3);
    goto corral_source_split_6050;

  corral_source_split_6050:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1241} xpc_disconnect_wait($i0);
    goto SeqInstr_598, SeqInstr_599;

  SeqInstr_599:
    assume assertsPassed;
    goto SeqInstr_600;

  SeqInstr_600:
    goto corral_source_split_6101;

  corral_source_split_6101:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_598:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_6052;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb4;

  $bb4:
    call $p6, $i7, $p8, $i9, $i10, $p11, $p12, $i13, $p14, $p15, $p16, $i17, $p18, $i19, $i20, $i21, $p22, $i23, $i24, $p25, $p26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i5 := xpc_initiate_disconnect_loop_$bb4($i0, $p1, $p6, $i7, $p8, $i9, $i10, $p11, $p12, $i13, $p14, $p15, $p16, $i17, $p18, $i19, $i20, $i21, $p22, $i23, $i24, $p25, $p26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i5);
    goto $bb4_last;

  corral_source_split_6054:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p6 := $M.3;
    goto corral_source_split_6056;

  corral_source_split_6056:
    assume {:verifier.code 0} true;
    $i7 := $sext.i16.i64($i5);
    goto corral_source_split_6057;

  corral_source_split_6057:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p6, $mul.ref($i7, 872));
    goto corral_source_split_6058;

  corral_source_split_6058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1231} $i9 := xpc_part_ref($p8);
    goto SeqInstr_583, SeqInstr_584;

  SeqInstr_584:
    assume assertsPassed;
    goto SeqInstr_585;

  SeqInstr_585:
    call {:si_unique_call 1232} {:cexpr "tmp___0"} boogie_si_record_i32($i9);
    goto corral_source_split_6059;

  corral_source_split_6059:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_6060;

  corral_source_split_6060:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i28 := $sext.i16.i32($i5);
    goto corral_source_split_6091;

  corral_source_split_6091:
    assume {:verifier.code 0} true;
    $i29 := $add.i32($i28, 1);
    goto corral_source_split_6092;

  corral_source_split_6092:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i32.i16($i29);
    call {:si_unique_call 1240} {:cexpr "partid"} boogie_si_record_i16($i30);
    goto corral_source_split_6093;

  corral_source_split_6093:
    assume {:verifier.code 0} true;
    $i31 := $sext.i16.i32($i30);
    goto corral_source_split_6094;

  corral_source_split_6094:
    assume {:verifier.code 0} true;
    $i32 := $load.i16($M.1, xp_max_npartitions);
    goto corral_source_split_6095;

  corral_source_split_6095:
    assume {:verifier.code 0} true;
    $i33 := $sext.i16.i32($i32);
    goto corral_source_split_6096;

  corral_source_split_6096:
    assume {:verifier.code 0} true;
    $i34 := $slt.i32($i31, $i33);
    goto corral_source_split_6097;

  corral_source_split_6097:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i34 == 1);
    goto corral_source_split_6099;

  corral_source_split_6099:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb12:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    $i5 := $i30;
    goto $bb12_dummy;

  $bb6:
    assume $i10 == 1;
    goto corral_source_split_6062;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p6, $mul.ref($i7, 872)), $mul.ref(376, 1));
    goto corral_source_split_6063;

  corral_source_split_6063:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.1, $p11);
    goto corral_source_split_6064;

  corral_source_split_6064:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i0);
    goto corral_source_split_6065;

  corral_source_split_6065:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p12, $mul.ref($i13, 720));
    goto corral_source_split_6066;

  corral_source_split_6066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1233} xpc_msgqueue_ref($p14);
    goto SeqInstr_586, SeqInstr_587;

  SeqInstr_587:
    assume assertsPassed;
    goto SeqInstr_588;

  SeqInstr_588:
    goto corral_source_split_6067;

  corral_source_split_6067:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p12, $mul.ref($i13, 720)), $mul.ref(8, 1));
    goto corral_source_split_6068;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1234} $p16 := spinlock_check($p15);
    goto corral_source_split_6069;

  corral_source_split_6069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1235} $i17 := _raw_spin_lock_irqsave($p16);
    goto corral_source_split_6070;

  corral_source_split_6070:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p1, $i17);
    goto corral_source_split_6071;

  corral_source_split_6071:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p12, $mul.ref($i13, 720)), $mul.ref(80, 1));
    goto corral_source_split_6072;

  corral_source_split_6072:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.1, $p18);
    goto corral_source_split_6073;

  corral_source_split_6073:
    assume {:verifier.code 0} true;
    $i20 := $and.i32($i19, 65536);
    goto corral_source_split_6074;

  corral_source_split_6074:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 0);
    goto corral_source_split_6075;

  corral_source_split_6075:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p12, $mul.ref($i13, 720)), $mul.ref(8, 1));
    goto corral_source_split_6085;

  corral_source_split_6085:
    assume {:verifier.code 0} true;
    $i27 := $load.i64($M.1, $p1);
    goto corral_source_split_6086;

  corral_source_split_6086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1237} spin_unlock_irqrestore($p26, $i27);
    goto corral_source_split_6087;

  corral_source_split_6087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1238} xpc_msgqueue_deref($p14);
    goto SeqInstr_592, SeqInstr_593;

  SeqInstr_593:
    assume assertsPassed;
    goto SeqInstr_594;

  SeqInstr_594:
    goto corral_source_split_6088;

  corral_source_split_6088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1239} xpc_part_deref($p8);
    goto SeqInstr_595, SeqInstr_596;

  SeqInstr_596:
    assume assertsPassed;
    goto SeqInstr_597;

  SeqInstr_597:
    goto corral_source_split_6089;

  corral_source_split_6089:
    assume {:verifier.code 0} true;
    goto $bb11;

  SeqInstr_595:
    assume !assertsPassed;
    return;

  SeqInstr_592:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i21 == 1;
    goto corral_source_split_6077;

  corral_source_split_6077:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p12, $mul.ref($i13, 720)), $mul.ref(80, 1));
    goto corral_source_split_6078;

  corral_source_split_6078:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.1, $p22);
    goto corral_source_split_6079;

  corral_source_split_6079:
    assume {:verifier.code 0} true;
    $i24 := $or.i32($i23, 1048576);
    goto corral_source_split_6080;

  corral_source_split_6080:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p12, $mul.ref($i13, 720)), $mul.ref(80, 1));
    goto corral_source_split_6081;

  corral_source_split_6081:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p25, $i24);
    goto corral_source_split_6082;

  corral_source_split_6082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1236} xpc_disconnect_channel(787, $p14, 22, $p1);
    goto SeqInstr_589, SeqInstr_590;

  SeqInstr_590:
    assume assertsPassed;
    goto SeqInstr_591;

  SeqInstr_591:
    goto corral_source_split_6083;

  corral_source_split_6083:
    assume {:verifier.code 0} true;
    goto $bb10;

  SeqInstr_589:
    assume !assertsPassed;
    return;

  SeqInstr_586:
    assume !assertsPassed;
    return;

  SeqInstr_583:
    assume !assertsPassed;
    return;

  $bb12_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6054;
}



const xpc_initiate_send: ref;

axiom xpc_initiate_send == $sub.ref(0, 449263);

procedure xpc_initiate_send($i0: i16, $i1: i32, $i2: i32, $p3: ref, $i4: i16) returns ($r: i32);



const xpc_initiate_send_notify: ref;

axiom xpc_initiate_send_notify == $sub.ref(0, 450295);

procedure xpc_initiate_send_notify($i0: i16, $i1: i32, $i2: i32, $p3: ref, $i4: i16, $p5: ref, $p6: ref) returns ($r: i32);



const xpc_initiate_received: ref;

axiom xpc_initiate_received == $sub.ref(0, 451327);

procedure xpc_initiate_received($i0: i16, $i1: i32, $p2: ref);



const xpc_initiate_partid_to_nasids: ref;

axiom xpc_initiate_partid_to_nasids == $sub.ref(0, 452359);

procedure xpc_initiate_partid_to_nasids($i0: i16, $p1: ref) returns ($r: i32);



const xpc_set_interface: ref;

axiom xpc_set_interface == $sub.ref(0, 453391);

procedure xpc_set_interface($p0: ref, $p1: ref, $p2: ref, $p3: ref, $p4: ref, $p5: ref);
  free requires assertsPassed;



implementation xpc_set_interface($p0: ref, $p1: ref, $p2: ref, $p3: ref, $p4: ref, $p5: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6103;

  corral_source_split_6103:
    assume {:verifier.code 0} true;
    return;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 454423);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const xpc_discovery: ref;

axiom xpc_discovery == $sub.ref(0, 455455);

procedure xpc_discovery();
  free requires assertsPassed;
  modifies $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.41, $M.42, $M.1, $CurrAddr, $M.43, $M.44, $M.45, $M.23, $M.28, assertsPassed, $M.0, $M.2;



implementation xpc_discovery()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $i15: i32;
  var $i16: i64;
  var $i17: i64;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $i23: i8;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i34: i1;
  var $i36: i32;
  var $i33: i32;
  var $i37: i32;
  var $i35: i32;
  var $i38: i32;
  var $i39: i32;
  var $i40: i32;
  var $i27: i32;
  var $i28: i32;
  var $i41: i1;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i24;
  var $i52: i24;
  var $i53: i24;
  var $p54: ref;
  var $p55: ref;
  var $i56: i8;
  var $i57: i64;
  var $i58: i64;
  var $i59: i64;
  var $i60: i1;
  var $p61: ref;
  var $i63: i32;
  var $i64: i32;
  var $i65: i32;
  var $i66: i32;
  var $i67: i32;
  var $i68: i1;
  var $i70: i32;
  var $i71: i1;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: i24;
  var $i79: i24;
  var $i80: i24;
  var $p81: ref;
  var $p82: ref;
  var $i83: i8;
  var $i84: i64;
  var $i85: i64;
  var $i86: i64;
  var $i87: i1;
  var $p88: ref;
  var $i90: i32;
  var $p91: ref;
  var $i92: i32;
  var $i93: i1;
  var $i94: i32;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $i101: i24;
  var $i102: i24;
  var $i103: i24;
  var $p104: ref;
  var $p105: ref;
  var $i106: i8;
  var $i107: i64;
  var $i108: i64;
  var $i109: i64;
  var $i110: i1;
  var $p111: ref;
  var $i113: i32;
  var $p114: ref;
  var $i115: i32;
  var $i116: i1;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $i123: i24;
  var $i124: i24;
  var $i125: i24;
  var $p126: ref;
  var $p127: ref;
  var $i128: i8;
  var $i129: i64;
  var $i130: i64;
  var $i131: i64;
  var $i132: i1;
  var $p133: ref;
  var $i135: i32;
  var $i136: i32;
  var $i137: i1;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $i144: i24;
  var $i145: i24;
  var $i146: i24;
  var $p147: ref;
  var $p148: ref;
  var $i149: i8;
  var $i150: i64;
  var $i151: i64;
  var $i152: i64;
  var $i153: i1;
  var $p154: ref;
  var $i156: i32;
  var $i157: i1;
  var $p158: ref;
  var $p159: ref;
  var $p160: ref;
  var $p161: ref;
  var $p162: ref;
  var $p163: ref;
  var $i164: i24;
  var $i165: i24;
  var $i166: i24;
  var $p167: ref;
  var $p168: ref;
  var $i169: i8;
  var $i170: i64;
  var $i171: i64;
  var $i172: i64;
  var $i173: i1;
  var $p174: ref;
  var $i176: i1;
  var $p177: ref;
  var $i178: i64;
  var $i179: i32;
  var $i180: i1;
  var $i69: i32;
  var $i181: i32;
  var $i182: i1;
  var $i42: i32;
  var $p183: ref;
  var $p184: ref;
  var vslice_dummy_var_90: i32;
  var vslice_dummy_var_91: i32;
  var vslice_dummy_var_92: i32;
  var vslice_dummy_var_93: i32;
  var vslice_dummy_var_94: i32;
  var vslice_dummy_var_95: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1242} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1243} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1244} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1245} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1246} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1247} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1248} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1249} $p7 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_6105;

  corral_source_split_6105:
    assume {:verifier.code 0} true;
    $i8 := $M.34;
    goto corral_source_split_6106;

  corral_source_split_6106:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_6107;

  corral_source_split_6107:
    assume {:verifier.code 0} true;
    $i10 := $add.i64($i9, 128);
    goto corral_source_split_6108;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1250} $p11 := xpc_kmalloc_cacheline_aligned($i10, 208, $p0);
    goto corral_source_split_6109;

  corral_source_split_6109:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_6110;

  corral_source_split_6110:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_6111;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, 0);
    goto corral_source_split_6112;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i15 := $M.35;
    goto corral_source_split_6116;

  corral_source_split_6116:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i15);
    goto corral_source_split_6117;

  corral_source_split_6117:
    assume {:verifier.code 0} true;
    $i17 := $mul.i64($i16, 8);
    goto corral_source_split_6118;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1251} $p18 := kzalloc($i17, 208);
    goto corral_source_split_6119;

  corral_source_split_6119:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_6120;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_6121;

  corral_source_split_6121:
    assume {:verifier.code 0} true;
    $i21 := $eq.i64($i20, 0);
    goto corral_source_split_6122;

  corral_source_split_6122:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.1, xp_region_size);
    goto corral_source_split_6128;

  corral_source_split_6128:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    call {:si_unique_call 1253} {:cexpr "region_size"} boogie_si_record_i32($i24);
    goto corral_source_split_6129;

  corral_source_split_6129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1254} $i25 := is_uv_system();
    call {:si_unique_call 1255} {:cexpr "tmp___1"} boogie_si_record_i32($i25);
    goto corral_source_split_6130;

  corral_source_split_6130:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_6131;

  corral_source_split_6131:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i24, 64);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    $i30 := $slt.i32($i24, 128);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i24, 128);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i39, $i40 := 64, $i24;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i27, $i28 := $i39, $i40;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6135;

  corral_source_split_6135:
    assume {:verifier.code 0} true;
    $i41 := $slt.i32(0, $i27);
    goto corral_source_split_6136;

  corral_source_split_6136:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p183 := $bitcast.ref.ref($p19);
    goto corral_source_split_6156;

  corral_source_split_6156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1259} kfree($p183);
    goto corral_source_split_6157;

  corral_source_split_6157:
    assume {:verifier.code 0} true;
    $p184 := $load.ref($M.41, $p0);
    goto corral_source_split_6158;

  corral_source_split_6158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1260} kfree($p184);
    goto corral_source_split_6159;

  corral_source_split_6159:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb26:
    assume $i41 == 1;
    goto corral_source_split_6147;

  corral_source_split_6147:
    assume {:verifier.code 0} true;
    $i42 := 0;
    goto $bb29;

  $bb29:
    call $i43, $i44, $p45, $p46, $p47, $p48, $p49, $p50, $i51, $i52, $i53, $p54, $p55, $i56, $i57, $i58, $i59, $i60, $p61, $i63, $i64, $i65, $i66, $i67, $i68, $i70, $i71, $p72, $p73, $p74, $p75, $p76, $p77, $i78, $i79, $i80, $p81, $p82, $i83, $i84, $i85, $i86, $i87, $p88, $i90, $p91, $i92, $i93, $i94, $p95, $p96, $p97, $p98, $p99, $p100, $i101, $i102, $i103, $p104, $p105, $i106, $i107, $i108, $i109, $i110, $p111, $i113, $p114, $i115, $i116, $p117, $p118, $p119, $p120, $p121, $p122, $i123, $i124, $i125, $p126, $p127, $i128, $i129, $i130, $i131, $i132, $p133, $i135, $i136, $i137, $p138, $p139, $p140, $p141, $p142, $p143, $i144, $i145, $i146, $p147, $p148, $i149, $i150, $i151, $i152, $i153, $p154, $i156, $i157, $p158, $p159, $p160, $p161, $p162, $p163, $i164, $i165, $i166, $p167, $p168, $i169, $i170, $i171, $i172, $i173, $p174, $i176, $p177, $i178, $i179, $i180, $i69, $i181, $i182, $i42, vslice_dummy_var_90, vslice_dummy_var_91, vslice_dummy_var_92, vslice_dummy_var_93, vslice_dummy_var_94, vslice_dummy_var_95 := xpc_discovery_loop_$bb29($p1, $p2, $p3, $p4, $p5, $p6, $p7, $p12, $p19, $i27, $i28, $i43, $i44, $p45, $p46, $p47, $p48, $p49, $p50, $i51, $i52, $i53, $p54, $p55, $i56, $i57, $i58, $i59, $i60, $p61, $i63, $i64, $i65, $i66, $i67, $i68, $i70, $i71, $p72, $p73, $p74, $p75, $p76, $p77, $i78, $i79, $i80, $p81, $p82, $i83, $i84, $i85, $i86, $i87, $p88, $i90, $p91, $i92, $i93, $i94, $p95, $p96, $p97, $p98, $p99, $p100, $i101, $i102, $i103, $p104, $p105, $i106, $i107, $i108, $i109, $i110, $p111, $i113, $p114, $i115, $i116, $p117, $p118, $p119, $p120, $p121, $p122, $i123, $i124, $i125, $p126, $p127, $i128, $i129, $i130, $i131, $i132, $p133, $i135, $i136, $i137, $p138, $p139, $p140, $p141, $p142, $p143, $i144, $i145, $i146, $p147, $p148, $i149, $i150, $i151, $i152, $i153, $p154, $i156, $i157, $p158, $p159, $p160, $p161, $p162, $p163, $i164, $i165, $i166, $p167, $p168, $i169, $i170, $i171, $i172, $i173, $p174, $i176, $p177, $i178, $i179, $i180, $i69, $i181, $i182, $i42, vslice_dummy_var_90, vslice_dummy_var_91, vslice_dummy_var_92, vslice_dummy_var_93, vslice_dummy_var_94, vslice_dummy_var_95);
    goto $bb29_last;

  corral_source_split_6149:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i43 := $M.0;
    goto corral_source_split_6151;

  corral_source_split_6151:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 0);
    goto corral_source_split_6152;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6161;

  corral_source_split_6161:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p45, .str);
    goto corral_source_split_6162;

  corral_source_split_6162:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6163;

  corral_source_split_6163:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p46, .str.18);
    goto corral_source_split_6164;

  corral_source_split_6164:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6165;

  corral_source_split_6165:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p47, .str.38);
    goto corral_source_split_6166;

  corral_source_split_6166:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6167;

  corral_source_split_6167:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p48, .str.47);
    goto corral_source_split_6168;

  corral_source_split_6168:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6169;

  corral_source_split_6169:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_6170;

  corral_source_split_6170:
    assume {:verifier.code 0} true;
    $i51 := $load.i24($M.12, $p50);
    goto corral_source_split_6171;

  corral_source_split_6171:
    assume {:verifier.code 0} true;
    $i52 := $and.i24($i51, $sub.i24(0, 262144));
    goto corral_source_split_6172;

  corral_source_split_6172:
    assume {:verifier.code 0} true;
    $i53 := $or.i24($i52, 520);
    goto corral_source_split_6173;

  corral_source_split_6173:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p50, $i53);
    goto corral_source_split_6174;

  corral_source_split_6174:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6175;

  corral_source_split_6175:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p54, 0);
    goto corral_source_split_6176;

  corral_source_split_6176:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6177;

  corral_source_split_6177:
    assume {:verifier.code 0} true;
    $i56 := $load.i8($M.13, $p55);
    goto corral_source_split_6178;

  corral_source_split_6178:
    assume {:verifier.code 0} true;
    $i57 := $zext.i8.i64($i56);
    goto corral_source_split_6179;

  corral_source_split_6179:
    assume {:verifier.code 0} true;
    $i58 := $and.i64($i57, 1);
    goto corral_source_split_6180;

  corral_source_split_6180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1261} $i59 := ldv__builtin_expect($i58, 0);
    call {:si_unique_call 1262} {:cexpr "tmp___2"} boogie_si_record_i64($i59);
    goto corral_source_split_6181;

  corral_source_split_6181:
    assume {:verifier.code 0} true;
    $i60 := $ne.i64($i59, 0);
    goto corral_source_split_6182;

  corral_source_split_6182:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i63 := $mul.i32($i42, $i28);
    goto corral_source_split_6188;

  corral_source_split_6188:
    assume {:verifier.code 0} true;
    $i64 := $mul.i32($i63, 2);
    call {:si_unique_call 1264} {:cexpr "nasid"} boogie_si_record_i32($i64);
    goto corral_source_split_6189;

  corral_source_split_6189:
    assume {:verifier.code 0} true;
    $i65 := $add.i32($i42, 1);
    goto corral_source_split_6190;

  corral_source_split_6190:
    assume {:verifier.code 0} true;
    $i66 := $mul.i32($i65, 2);
    goto corral_source_split_6191;

  corral_source_split_6191:
    assume {:verifier.code 0} true;
    $i67 := $mul.i32($i66, $i28);
    goto corral_source_split_6192;

  corral_source_split_6192:
    assume {:verifier.code 0} true;
    $i68 := $sgt.i32($i67, $i64);
    goto corral_source_split_6193;

  corral_source_split_6193:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume !($i68 == 1);
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $i181 := $add.i32($i42, 1);
    call {:si_unique_call 1265} {:cexpr "region"} boogie_si_record_i32($i181);
    goto corral_source_split_6204;

  corral_source_split_6204:
    assume {:verifier.code 0} true;
    $i182 := $slt.i32($i181, $i27);
    goto corral_source_split_6205;

  corral_source_split_6205:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i182 == 1);
    goto corral_source_split_6375;

  corral_source_split_6375:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb80:
    assume $i182 == 1;
    assume {:verifier.code 0} true;
    $i42 := $i181;
    goto $bb80_dummy;

  $bb38:
    assume $i68 == 1;
    goto corral_source_split_6195;

  corral_source_split_6195:
    assume {:verifier.code 0} true;
    $i69 := $i64;
    goto $bb41;

  $bb41:
    call $i70, $i71, $p72, $p73, $p74, $p75, $p76, $p77, $i78, $i79, $i80, $p81, $p82, $i83, $i84, $i85, $i86, $i87, $p88, $i90, $p91, $i92, $i93, $i94, $i113, $p114, $i115, $i116, $p117, $p118, $p119, $p120, $p121, $p122, $i123, $i124, $i125, $p126, $p127, $i128, $i129, $i130, $i131, $i132, $p133, $i135, $i136, $i137, $p138, $p139, $p140, $p141, $p142, $p143, $i144, $i145, $i146, $p147, $p148, $i149, $i150, $i151, $i152, $i153, $p154, $i156, $i157, $p158, $p159, $p160, $p161, $p162, $p163, $i164, $i165, $i166, $p167, $p168, $i169, $i170, $i171, $i172, $i173, $p174, $i176, $p177, $i178, $i179, $i180, $i69, vslice_dummy_var_91, vslice_dummy_var_93, vslice_dummy_var_94, vslice_dummy_var_95 := xpc_discovery_loop_$bb41($p1, $p3, $p5, $p6, $p7, $p12, $p19, $i67, $i70, $i71, $p72, $p73, $p74, $p75, $p76, $p77, $i78, $i79, $i80, $p81, $p82, $i83, $i84, $i85, $i86, $i87, $p88, $i90, $p91, $i92, $i93, $i94, $i113, $p114, $i115, $i116, $p117, $p118, $p119, $p120, $p121, $p122, $i123, $i124, $i125, $p126, $p127, $i128, $i129, $i130, $i131, $i132, $p133, $i135, $i136, $i137, $p138, $p139, $p140, $p141, $p142, $p143, $i144, $i145, $i146, $p147, $p148, $i149, $i150, $i151, $i152, $i153, $p154, $i156, $i157, $p158, $p159, $p160, $p161, $p162, $p163, $i164, $i165, $i166, $p167, $p168, $i169, $i170, $i171, $i172, $i173, $p174, $i176, $p177, $i178, $i179, $i180, $i69, vslice_dummy_var_91, vslice_dummy_var_93, vslice_dummy_var_94, vslice_dummy_var_95);
    goto $bb41_last;

  corral_source_split_6197:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i70 := $M.0;
    goto corral_source_split_6199;

  corral_source_split_6199:
    assume {:verifier.code 0} true;
    $i71 := $ne.i32($i70, 0);
    goto corral_source_split_6200;

  corral_source_split_6200:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6207;

  corral_source_split_6207:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p72, .str);
    goto corral_source_split_6208;

  corral_source_split_6208:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6209;

  corral_source_split_6209:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p73, .str.18);
    goto corral_source_split_6210;

  corral_source_split_6210:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6211;

  corral_source_split_6211:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p74, .str.38);
    goto corral_source_split_6212;

  corral_source_split_6212:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6213;

  corral_source_split_6213:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p75, .str.48);
    goto corral_source_split_6214;

  corral_source_split_6214:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6215;

  corral_source_split_6215:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p76);
    goto corral_source_split_6216;

  corral_source_split_6216:
    assume {:verifier.code 0} true;
    $i78 := $load.i24($M.12, $p77);
    goto corral_source_split_6217;

  corral_source_split_6217:
    assume {:verifier.code 0} true;
    $i79 := $and.i24($i78, $sub.i24(0, 262144));
    goto corral_source_split_6218;

  corral_source_split_6218:
    assume {:verifier.code 0} true;
    $i80 := $or.i24($i79, 528);
    goto corral_source_split_6219;

  corral_source_split_6219:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p77, $i80);
    goto corral_source_split_6220;

  corral_source_split_6220:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6221;

  corral_source_split_6221:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p81, 0);
    goto corral_source_split_6222;

  corral_source_split_6222:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6223;

  corral_source_split_6223:
    assume {:verifier.code 0} true;
    $i83 := $load.i8($M.13, $p82);
    goto corral_source_split_6224;

  corral_source_split_6224:
    assume {:verifier.code 0} true;
    $i84 := $zext.i8.i64($i83);
    goto corral_source_split_6225;

  corral_source_split_6225:
    assume {:verifier.code 0} true;
    $i85 := $and.i64($i84, 1);
    goto corral_source_split_6226;

  corral_source_split_6226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1266} $i86 := ldv__builtin_expect($i85, 0);
    call {:si_unique_call 1267} {:cexpr "tmp___3"} boogie_si_record_i64($i86);
    goto corral_source_split_6227;

  corral_source_split_6227:
    assume {:verifier.code 0} true;
    $i87 := $ne.i64($i86, 0);
    goto corral_source_split_6228;

  corral_source_split_6228:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $i90 := $sdiv.i32($i69, 2);
    goto corral_source_split_6234;

  corral_source_split_6234:
    assume {:verifier.code 0} true;
    $p91 := $M.36;
    goto corral_source_split_6235;

  corral_source_split_6235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1269} $i92 := variable_test_bit($i90, $p91);
    call {:si_unique_call 1270} {:cexpr "tmp___5"} boogie_si_record_i32($i92);
    goto corral_source_split_6236;

  corral_source_split_6236:
    assume {:verifier.code 0} true;
    $i93 := $ne.i32($i92, 0);
    goto corral_source_split_6237;

  corral_source_split_6237:
    assume {:verifier.code 0} true;
    $i94 := $i69;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $i113 := $sdiv.i32($i69, 2);
    goto corral_source_split_6267;

  corral_source_split_6267:
    assume {:verifier.code 0} true;
    $p114 := $M.37;
    goto corral_source_split_6268;

  corral_source_split_6268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1274} $i115 := variable_test_bit($i113, $p114);
    call {:si_unique_call 1275} {:cexpr "tmp___7"} boogie_si_record_i32($i115);
    goto corral_source_split_6269;

  corral_source_split_6269:
    assume {:verifier.code 0} true;
    $i116 := $eq.i32($i115, 0);
    goto corral_source_split_6270;

  corral_source_split_6270:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i116 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $i135 := $sdiv.i32($i69, 2);
    goto corral_source_split_6303;

  corral_source_split_6303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1280} $i136 := variable_test_bit($i135, $p19);
    call {:si_unique_call 1281} {:cexpr "tmp___9"} boogie_si_record_i32($i136);
    goto corral_source_split_6304;

  corral_source_split_6304:
    assume {:verifier.code 0} true;
    $i137 := $ne.i32($i136, 0);
    goto corral_source_split_6305;

  corral_source_split_6305:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i137 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1285} $i156 := xpc_get_remote_rp($i69, $p19, $p12, $p1);
    call {:si_unique_call 1286} {:cexpr "ret"} boogie_si_record_i32($i156);
    goto corral_source_split_6335;

  corral_source_split_6335:
    assume {:verifier.code 0} true;
    $i157 := $ne.i32($i156, 0);
    goto corral_source_split_6336;

  corral_source_split_6336:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i157 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $p177 := $load.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(112, 1)));
    goto corral_source_split_6370;

  corral_source_split_6370:
    assume {:verifier.code 0} true;
    $i178 := $load.i64($M.42, $p1);
    call {:si_unique_call 1290} devirtbounce.33($p177, $p12, $i178, $i69);
    goto SeqInstr_601, SeqInstr_602;

  SeqInstr_602:
    assume assertsPassed;
    goto SeqInstr_603;

  SeqInstr_603:
    goto corral_source_split_6371;

  corral_source_split_6371:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $i179 := $add.i32($i69, 2);
    call {:si_unique_call 1279} {:cexpr "nasid"} boogie_si_record_i32($i179);
    goto corral_source_split_6300;

  corral_source_split_6300:
    assume {:verifier.code 0} true;
    $i180 := $sgt.i32($i67, $i179);
    goto corral_source_split_6301;

  corral_source_split_6301:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i180 == 1);
    goto corral_source_split_6373;

  corral_source_split_6373:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb78:
    assume $i180 == 1;
    assume {:verifier.code 0} true;
    $i69 := $i179;
    goto $bb78_dummy;

  SeqInstr_601:
    assume !assertsPassed;
    return;

  $bb69:
    assume $i157 == 1;
    goto corral_source_split_6338;

  corral_source_split_6338:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6339;

  corral_source_split_6339:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p158, .str);
    goto corral_source_split_6340;

  corral_source_split_6340:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6341;

  corral_source_split_6341:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p159, .str.18);
    goto corral_source_split_6342;

  corral_source_split_6342:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6343;

  corral_source_split_6343:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p160, .str.38);
    goto corral_source_split_6344;

  corral_source_split_6344:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6345;

  corral_source_split_6345:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p161, .str.52);
    goto corral_source_split_6346;

  corral_source_split_6346:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6347;

  corral_source_split_6347:
    assume {:verifier.code 0} true;
    $p163 := $bitcast.ref.ref($p162);
    goto corral_source_split_6348;

  corral_source_split_6348:
    assume {:verifier.code 0} true;
    $i164 := $load.i24($M.12, $p163);
    goto corral_source_split_6349;

  corral_source_split_6349:
    assume {:verifier.code 0} true;
    $i165 := $and.i24($i164, $sub.i24(0, 262144));
    goto corral_source_split_6350;

  corral_source_split_6350:
    assume {:verifier.code 0} true;
    $i166 := $or.i24($i165, 558);
    goto corral_source_split_6351;

  corral_source_split_6351:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p163, $i166);
    goto corral_source_split_6352;

  corral_source_split_6352:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6353;

  corral_source_split_6353:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p167, 0);
    goto corral_source_split_6354;

  corral_source_split_6354:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6355;

  corral_source_split_6355:
    assume {:verifier.code 0} true;
    $i169 := $load.i8($M.13, $p168);
    goto corral_source_split_6356;

  corral_source_split_6356:
    assume {:verifier.code 0} true;
    $i170 := $zext.i8.i64($i169);
    goto corral_source_split_6357;

  corral_source_split_6357:
    assume {:verifier.code 0} true;
    $i171 := $and.i64($i170, 1);
    goto corral_source_split_6358;

  corral_source_split_6358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1287} $i172 := ldv__builtin_expect($i171, 0);
    call {:si_unique_call 1288} {:cexpr "tmp___10"} boogie_si_record_i64($i172);
    goto corral_source_split_6359;

  corral_source_split_6359:
    assume {:verifier.code 0} true;
    $i173 := $ne.i64($i172, 0);
    goto corral_source_split_6360;

  corral_source_split_6360:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i173 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $i176 := $eq.i32($i156, 43);
    goto corral_source_split_6366;

  corral_source_split_6366:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i176 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb74:
    assume $i176 == 1;
    goto corral_source_split_6368;

  corral_source_split_6368:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb71:
    assume $i173 == 1;
    goto corral_source_split_6362;

  corral_source_split_6362:
    assume {:verifier.code 0} true;
    $p174 := $M.5;
    goto corral_source_split_6363;

  corral_source_split_6363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1289} vslice_dummy_var_95 := __dynamic_dev_dbg.ref.ref.ref.i32.i32($p7, $p174, .str.52, $i69, $i156);
    goto corral_source_split_6364;

  corral_source_split_6364:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb63:
    assume $i137 == 1;
    goto corral_source_split_6307;

  corral_source_split_6307:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6308;

  corral_source_split_6308:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p138, .str);
    goto corral_source_split_6309;

  corral_source_split_6309:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6310;

  corral_source_split_6310:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p139, .str.18);
    goto corral_source_split_6311;

  corral_source_split_6311:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6312;

  corral_source_split_6312:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p140, .str.38);
    goto corral_source_split_6313;

  corral_source_split_6313:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6314;

  corral_source_split_6314:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p141, .str.51);
    goto corral_source_split_6315;

  corral_source_split_6315:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6316;

  corral_source_split_6316:
    assume {:verifier.code 0} true;
    $p143 := $bitcast.ref.ref($p142);
    goto corral_source_split_6317;

  corral_source_split_6317:
    assume {:verifier.code 0} true;
    $i144 := $load.i24($M.12, $p143);
    goto corral_source_split_6318;

  corral_source_split_6318:
    assume {:verifier.code 0} true;
    $i145 := $and.i24($i144, $sub.i24(0, 262144));
    goto corral_source_split_6319;

  corral_source_split_6319:
    assume {:verifier.code 0} true;
    $i146 := $or.i24($i145, 547);
    goto corral_source_split_6320;

  corral_source_split_6320:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p143, $i146);
    goto corral_source_split_6321;

  corral_source_split_6321:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6322;

  corral_source_split_6322:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p147, 0);
    goto corral_source_split_6323;

  corral_source_split_6323:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6324;

  corral_source_split_6324:
    assume {:verifier.code 0} true;
    $i149 := $load.i8($M.13, $p148);
    goto corral_source_split_6325;

  corral_source_split_6325:
    assume {:verifier.code 0} true;
    $i150 := $zext.i8.i64($i149);
    goto corral_source_split_6326;

  corral_source_split_6326:
    assume {:verifier.code 0} true;
    $i151 := $and.i64($i150, 1);
    goto corral_source_split_6327;

  corral_source_split_6327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1282} $i152 := ldv__builtin_expect($i151, 0);
    call {:si_unique_call 1283} {:cexpr "tmp___8"} boogie_si_record_i64($i152);
    goto corral_source_split_6328;

  corral_source_split_6328:
    assume {:verifier.code 0} true;
    $i153 := $ne.i64($i152, 0);
    goto corral_source_split_6329;

  corral_source_split_6329:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i153 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb65:
    assume $i153 == 1;
    goto corral_source_split_6331;

  corral_source_split_6331:
    assume {:verifier.code 0} true;
    $p154 := $M.5;
    goto corral_source_split_6332;

  corral_source_split_6332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1284} vslice_dummy_var_94 := __dynamic_dev_dbg.ref.ref.ref.i32($p6, $p154, .str.51, $i69);
    goto corral_source_split_6333;

  corral_source_split_6333:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb56:
    assume $i116 == 1;
    goto corral_source_split_6272;

  corral_source_split_6272:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6273;

  corral_source_split_6273:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p117, .str);
    goto corral_source_split_6274;

  corral_source_split_6274:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6275;

  corral_source_split_6275:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p118, .str.18);
    goto corral_source_split_6276;

  corral_source_split_6276:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6277;

  corral_source_split_6277:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p119, .str.38);
    goto corral_source_split_6278;

  corral_source_split_6278:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6279;

  corral_source_split_6279:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p120, .str.50);
    goto corral_source_split_6280;

  corral_source_split_6280:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6281;

  corral_source_split_6281:
    assume {:verifier.code 0} true;
    $p122 := $bitcast.ref.ref($p121);
    goto corral_source_split_6282;

  corral_source_split_6282:
    assume {:verifier.code 0} true;
    $i123 := $load.i24($M.12, $p122);
    goto corral_source_split_6283;

  corral_source_split_6283:
    assume {:verifier.code 0} true;
    $i124 := $and.i24($i123, $sub.i24(0, 262144));
    goto corral_source_split_6284;

  corral_source_split_6284:
    assume {:verifier.code 0} true;
    $i125 := $or.i24($i124, 540);
    goto corral_source_split_6285;

  corral_source_split_6285:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p122, $i125);
    goto corral_source_split_6286;

  corral_source_split_6286:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6287;

  corral_source_split_6287:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p126, 0);
    goto corral_source_split_6288;

  corral_source_split_6288:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6289;

  corral_source_split_6289:
    assume {:verifier.code 0} true;
    $i128 := $load.i8($M.13, $p127);
    goto corral_source_split_6290;

  corral_source_split_6290:
    assume {:verifier.code 0} true;
    $i129 := $zext.i8.i64($i128);
    goto corral_source_split_6291;

  corral_source_split_6291:
    assume {:verifier.code 0} true;
    $i130 := $and.i64($i129, 1);
    goto corral_source_split_6292;

  corral_source_split_6292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1276} $i131 := ldv__builtin_expect($i130, 0);
    call {:si_unique_call 1277} {:cexpr "tmp___6"} boogie_si_record_i64($i131);
    goto corral_source_split_6293;

  corral_source_split_6293:
    assume {:verifier.code 0} true;
    $i132 := $ne.i64($i131, 0);
    goto corral_source_split_6294;

  corral_source_split_6294:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i132 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb58:
    assume $i132 == 1;
    goto corral_source_split_6296;

  corral_source_split_6296:
    assume {:verifier.code 0} true;
    $p133 := $M.5;
    goto corral_source_split_6297;

  corral_source_split_6297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1278} vslice_dummy_var_93 := __dynamic_dev_dbg.ref.ref.ref.i32($p5, $p133, .str.50, $i69);
    goto corral_source_split_6298;

  corral_source_split_6298:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb50:
    assume $i93 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_6239;

  corral_source_split_6239:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6240;

  corral_source_split_6240:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p95, .str);
    goto corral_source_split_6241;

  corral_source_split_6241:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6242;

  corral_source_split_6242:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p96, .str.18);
    goto corral_source_split_6243;

  corral_source_split_6243:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6244;

  corral_source_split_6244:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p97, .str.38);
    goto corral_source_split_6245;

  corral_source_split_6245:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6246;

  corral_source_split_6246:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p98, .str.49);
    goto corral_source_split_6247;

  corral_source_split_6247:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6248;

  corral_source_split_6248:
    assume {:verifier.code 0} true;
    $p100 := $bitcast.ref.ref($p99);
    goto corral_source_split_6249;

  corral_source_split_6249:
    assume {:verifier.code 0} true;
    $i101 := $load.i24($M.12, $p100);
    goto corral_source_split_6250;

  corral_source_split_6250:
    assume {:verifier.code 0} true;
    $i102 := $and.i24($i101, $sub.i24(0, 262144));
    goto corral_source_split_6251;

  corral_source_split_6251:
    assume {:verifier.code 0} true;
    $i103 := $or.i24($i102, 533);
    goto corral_source_split_6252;

  corral_source_split_6252:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p100, $i103);
    goto corral_source_split_6253;

  corral_source_split_6253:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6254;

  corral_source_split_6254:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p104, 0);
    goto corral_source_split_6255;

  corral_source_split_6255:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6256;

  corral_source_split_6256:
    assume {:verifier.code 0} true;
    $i106 := $load.i8($M.13, $p105);
    goto corral_source_split_6257;

  corral_source_split_6257:
    assume {:verifier.code 0} true;
    $i107 := $zext.i8.i64($i106);
    goto corral_source_split_6258;

  corral_source_split_6258:
    assume {:verifier.code 0} true;
    $i108 := $and.i64($i107, 1);
    goto corral_source_split_6259;

  corral_source_split_6259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1271} $i109 := ldv__builtin_expect($i108, 0);
    call {:si_unique_call 1272} {:cexpr "tmp___4"} boogie_si_record_i64($i109);
    goto corral_source_split_6260;

  corral_source_split_6260:
    assume {:verifier.code 0} true;
    $i110 := $ne.i64($i109, 0);
    goto corral_source_split_6261;

  corral_source_split_6261:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb52:
    assume $i110 == 1;
    goto corral_source_split_6263;

  corral_source_split_6263:
    assume {:verifier.code 0} true;
    $p111 := $M.5;
    goto corral_source_split_6264;

  corral_source_split_6264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1273} vslice_dummy_var_92 := __dynamic_dev_dbg.ref.ref.ref.i32($p4, $p111, .str.49, $i94);
    goto corral_source_split_6265;

  corral_source_split_6265:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb47:
    assume $i87 == 1;
    goto corral_source_split_6230;

  corral_source_split_6230:
    assume {:verifier.code 0} true;
    $p88 := $M.5;
    goto corral_source_split_6231;

  corral_source_split_6231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1268} vslice_dummy_var_91 := __dynamic_dev_dbg.ref.ref.ref.i32($p3, $p88, .str.48, $i69);
    goto corral_source_split_6232;

  corral_source_split_6232:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb43:
    assume $i71 == 1;
    goto corral_source_split_6202;

  corral_source_split_6202:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb35:
    assume $i60 == 1;
    goto corral_source_split_6184;

  corral_source_split_6184:
    assume {:verifier.code 0} true;
    $p61 := $M.5;
    goto corral_source_split_6185;

  corral_source_split_6185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1263} vslice_dummy_var_90 := __dynamic_dev_dbg.ref.ref.ref.i32($p2, $p61, .str.47, $i42);
    goto corral_source_split_6186;

  corral_source_split_6186:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb31:
    assume $i44 == 1;
    goto corral_source_split_6154;

  corral_source_split_6154:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb16:
    assume $i31 == 1;
    goto corral_source_split_6138;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    $i36 := $mul.i32(64, 2);
    call {:si_unique_call 1256} {:cexpr "max_regions"} boogie_si_record_i32($i36);
    goto corral_source_split_6139;

  corral_source_split_6139:
    assume {:verifier.code 0} true;
    $i33 := $i36;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_6141;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    $i37 := $mul.i32($i33, 2);
    call {:si_unique_call 1257} {:cexpr "max_regions"} boogie_si_record_i32($i37);
    goto corral_source_split_6142;

  corral_source_split_6142:
    assume {:verifier.code 0} true;
    $i35 := $i37;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_6144;

  corral_source_split_6144:
    assume {:verifier.code 0} true;
    $i38 := $mul.i32($i35, 2);
    call {:si_unique_call 1258} {:cexpr "max_regions"} boogie_si_record_i32($i38);
    goto corral_source_split_6145;

  corral_source_split_6145:
    assume {:verifier.code 0} true;
    $i39, $i40 := $i38, 16;
    goto $bb25;

  $bb14:
    assume $i30 == 1;
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i24, 64);
    assume {:verifier.code 0} true;
    $i33 := 64;
    assume true;
    goto $bb19, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb18;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i32 == 1;
    goto $bb20;

  $bb12:
    assume $i29 == 1;
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i24, 32);
    assume {:verifier.code 0} true;
    $i35 := 64;
    assume true;
    goto $bb22, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb18;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i34 == 1;
    goto $bb23;

  $bb8:
    assume $i26 == 1;
    goto corral_source_split_6133;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    $i27, $i28 := 256, $i24;
    goto $bb10;

  $bb5:
    assume $i21 == 1;
    goto corral_source_split_6124;

  corral_source_split_6124:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.41, $p0);
    goto corral_source_split_6125;

  corral_source_split_6125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1252} kfree($p22);
    goto corral_source_split_6126;

  corral_source_split_6126:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_6114;

  corral_source_split_6114:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb78_dummy:
    assume false;
    return;

  $bb41_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6197;

  $bb80_dummy:
    assume false;
    return;

  $bb29_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6149;
}



const xpc_kmalloc_cacheline_aligned: ref;

axiom xpc_kmalloc_cacheline_aligned == $sub.ref(0, 456487);

procedure xpc_kmalloc_cacheline_aligned($i0: i64, $i1: i32, $p2: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.41, $CurrAddr;



implementation xpc_kmalloc_cacheline_aligned($i0: i64, $i1: i32, $p2: ref) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $i11: i64;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $i23: i64;
  var $i24: i64;
  var $i25: i64;
  var $p26: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1291} {:cexpr "xpc_kmalloc_cacheline_aligned:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 1292} {:cexpr "xpc_kmalloc_cacheline_aligned:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_6377;

  corral_source_split_6377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1293} $p3 := kmalloc($i0, $i1);
    goto corral_source_split_6378;

  corral_source_split_6378:
    assume {:verifier.code 0} true;
    $M.41 := $store.ref($M.41, $p2, $p3);
    goto corral_source_split_6379;

  corral_source_split_6379:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.41, $p2);
    goto corral_source_split_6380;

  corral_source_split_6380:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_6381;

  corral_source_split_6381:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_6382;

  corral_source_split_6382:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.41, $p2);
    goto corral_source_split_6388;

  corral_source_split_6388:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_6389;

  corral_source_split_6389:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.41, $p2);
    goto corral_source_split_6390;

  corral_source_split_6390:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_6391;

  corral_source_split_6391:
    assume {:verifier.code 0} true;
    $i12 := $add.i64($i11, 63);
    goto corral_source_split_6392;

  corral_source_split_6392:
    assume {:verifier.code 0} true;
    $i13 := $and.i64($i12, $sub.i64(0, 64));
    goto corral_source_split_6393;

  corral_source_split_6393:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i9, $i13);
    goto corral_source_split_6394;

  corral_source_split_6394:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.41, $p2);
    goto corral_source_split_6399;

  corral_source_split_6399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1294} kfree($p16);
    goto corral_source_split_6400;

  corral_source_split_6400:
    assume {:verifier.code 0} true;
    $i17 := $add.i64($i0, 64);
    goto corral_source_split_6401;

  corral_source_split_6401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1295} $p18 := kmalloc($i17, $i1);
    goto corral_source_split_6402;

  corral_source_split_6402:
    assume {:verifier.code 0} true;
    $M.41 := $store.ref($M.41, $p2, $p18);
    goto corral_source_split_6403;

  corral_source_split_6403:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.41, $p2);
    goto corral_source_split_6404;

  corral_source_split_6404:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_6405;

  corral_source_split_6405:
    assume {:verifier.code 0} true;
    $i21 := $eq.i64($i20, 0);
    goto corral_source_split_6406;

  corral_source_split_6406:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.41, $p2);
    goto corral_source_split_6410;

  corral_source_split_6410:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_6411;

  corral_source_split_6411:
    assume {:verifier.code 0} true;
    $i24 := $add.i64($i23, 63);
    goto corral_source_split_6412;

  corral_source_split_6412:
    assume {:verifier.code 0} true;
    $i25 := $and.i64($i24, $sub.i64(0, 64));
    goto corral_source_split_6413;

  corral_source_split_6413:
    assume {:verifier.code 0} true;
    $p26 := $i2p.i64.ref($i25);
    goto corral_source_split_6414;

  corral_source_split_6414:
    assume {:verifier.code 0} true;
    $p7 := $p26;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6386;

  corral_source_split_6386:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  $bb8:
    assume $i21 == 1;
    goto corral_source_split_6408;

  corral_source_split_6408:
    assume {:verifier.code 0} true;
    $p7 := $0.ref;
    goto $bb3;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_6396;

  corral_source_split_6396:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.41, $p2);
    goto corral_source_split_6397;

  corral_source_split_6397:
    assume {:verifier.code 0} true;
    $p7 := $p15;
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_6384;

  corral_source_split_6384:
    assume {:verifier.code 0} true;
    $p7 := $0.ref;
    goto $bb3;
}



const xpc_get_remote_rp: ref;

axiom xpc_get_remote_rp == $sub.ref(0, 457519);

procedure xpc_get_remote_rp($i0: i32, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.42, $M.1, $M.43, $M.44, $M.45, $M.41, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $CurrAddr;



implementation xpc_get_remote_rp($i0: i32, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;
  var $i12: i64;
  var $i13: i32;
  var $i14: i64;
  var $i15: i64;
  var $i16: i32;
  var $i17: i1;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $i22: i32;
  var $i23: i1;
  var $i25: i64;
  var $p26: ref;
  var $i27: i64;
  var $i28: i64;
  var $i29: i64;
  var $p30: ref;
  var $i31: i64;
  var $i32: i64;
  var $i33: i64;
  var $p34: ref;
  var $i35: i32;
  var $i36: i32;
  var $i37: i1;
  var $i24: i32;
  var $p38: ref;
  var $i39: i64;
  var $i40: i1;
  var $p41: ref;
  var $i42: i8;
  var $i43: i32;
  var $i44: i32;
  var $i45: i1;
  var $p46: ref;
  var $i47: i16;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $i51: i16;
  var $i52: i32;
  var $i53: i16;
  var $i54: i32;
  var $i55: i1;
  var $p56: ref;
  var $i57: i16;
  var $i58: i32;
  var $i59: i16;
  var $i60: i32;
  var $i61: i1;
  var $p62: ref;
  var $i63: i16;
  var $i64: i32;
  var $i65: i16;
  var $i66: i32;
  var $i67: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1296} {:cexpr "xpc_get_remote_rp:arg:nasid"} boogie_si_record_i32($i0);
    goto corral_source_split_6416;

  corral_source_split_6416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1297} $i4 := xpc_get_rsvd_page_pa($i0);
    goto corral_source_split_6417;

  corral_source_split_6417:
    assume {:verifier.code 0} true;
    $M.42 := $store.i64($M.42, $p3, $i4);
    goto corral_source_split_6418;

  corral_source_split_6418:
    assume {:verifier.code 0} true;
    $i5 := $load.i64($M.42, $p3);
    goto corral_source_split_6419;

  corral_source_split_6419:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_6420;

  corral_source_split_6420:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.1, xp_pa);
    goto corral_source_split_6426;

  corral_source_split_6426:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p2);
    call {:si_unique_call 1298} $i10 := devirtbounce.5($p8, $p9);
    call {:si_unique_call 1299} {:cexpr "tmp"} boogie_si_record_i64($i10);
    goto corral_source_split_6427;

  corral_source_split_6427:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.1, xp_remote_memcpy);
    goto corral_source_split_6428;

  corral_source_split_6428:
    assume {:verifier.code 0} true;
    $i12 := $load.i64($M.42, $p3);
    goto corral_source_split_6429;

  corral_source_split_6429:
    assume {:verifier.code 0} true;
    $i13 := $M.34;
    goto corral_source_split_6430;

  corral_source_split_6430:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_6431;

  corral_source_split_6431:
    assume {:verifier.code 0} true;
    $i15 := $add.i64($i14, 128);
    call {:si_unique_call 1300} $i16 := devirtbounce.18($p11, $i10, $i12, $i15);
    call {:si_unique_call 1301} {:cexpr "ret"} boogie_si_record_i32($i16);
    goto corral_source_split_6432;

  corral_source_split_6432:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_6433;

  corral_source_split_6433:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p1);
    goto corral_source_split_6437;

  corral_source_split_6437:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_6438;

  corral_source_split_6438:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p2, $mul.ref(0, 128)), $mul.ref(24, 1));
    goto corral_source_split_6466;

  corral_source_split_6466:
    assume {:verifier.code 0} true;
    $i39 := $load.i64($M.1, $p38);
    goto corral_source_split_6467;

  corral_source_split_6467:
    assume {:verifier.code 0} true;
    $i40 := $eq.i64($i39, 0);
    goto corral_source_split_6468;

  corral_source_split_6468:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p2, $mul.ref(0, 128)), $mul.ref(20, 1));
    goto corral_source_split_6472;

  corral_source_split_6472:
    assume {:verifier.code 0} true;
    $i42 := $load.i8($M.1, $p41);
    goto corral_source_split_6473;

  corral_source_split_6473:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i32($i42);
    goto corral_source_split_6474;

  corral_source_split_6474:
    assume {:verifier.code 0} true;
    $i44 := $ashr.i32($i43, 4);
    goto corral_source_split_6475;

  corral_source_split_6475:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 3);
    goto corral_source_split_6476;

  corral_source_split_6476:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p2, $mul.ref(0, 128)), $mul.ref(16, 1));
    goto corral_source_split_6480;

  corral_source_split_6480:
    assume {:verifier.code 0} true;
    $i47 := $load.i16($M.1, $p46);
    goto corral_source_split_6481;

  corral_source_split_6481:
    assume {:verifier.code 0} true;
    $i48 := $sext.i16.i32($i47);
    goto corral_source_split_6482;

  corral_source_split_6482:
    assume {:verifier.code 0} true;
    $i49 := $slt.i32($i48, 0);
    goto corral_source_split_6483;

  corral_source_split_6483:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb27;

  $bb27:
    assume !($i49 == 1);
    goto corral_source_split_6485;

  corral_source_split_6485:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p2, $mul.ref(0, 128)), $mul.ref(16, 1));
    goto corral_source_split_6486;

  corral_source_split_6486:
    assume {:verifier.code 0} true;
    $i51 := $load.i16($M.1, $p50);
    goto corral_source_split_6487;

  corral_source_split_6487:
    assume {:verifier.code 0} true;
    $i52 := $sext.i16.i32($i51);
    goto corral_source_split_6488;

  corral_source_split_6488:
    assume {:verifier.code 0} true;
    $i53 := $load.i16($M.1, xp_max_npartitions);
    goto corral_source_split_6489;

  corral_source_split_6489:
    assume {:verifier.code 0} true;
    $i54 := $sext.i16.i32($i53);
    goto corral_source_split_6490;

  corral_source_split_6490:
    assume {:verifier.code 0} true;
    $i55 := $sge.i32($i52, $i54);
    goto corral_source_split_6491;

  corral_source_split_6491:
    assume {:verifier.code 0} true;
    assume {:branchcond $i55} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i55 == 1);
    goto corral_source_split_6493;

  corral_source_split_6493:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p2, $mul.ref(0, 128)), $mul.ref(18, 1));
    goto corral_source_split_6494;

  corral_source_split_6494:
    assume {:verifier.code 0} true;
    $i57 := $load.i16($M.1, $p56);
    goto corral_source_split_6495;

  corral_source_split_6495:
    assume {:verifier.code 0} true;
    $i58 := $sext.i16.i32($i57);
    goto corral_source_split_6496;

  corral_source_split_6496:
    assume {:verifier.code 0} true;
    $i59 := $load.i16($M.1, xp_partition_id);
    goto corral_source_split_6497;

  corral_source_split_6497:
    assume {:verifier.code 0} true;
    $i60 := $sext.i16.i32($i59);
    goto corral_source_split_6498;

  corral_source_split_6498:
    assume {:verifier.code 0} true;
    $i61 := $sle.i32($i58, $i60);
    goto corral_source_split_6499;

  corral_source_split_6499:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p2, $mul.ref(0, 128)), $mul.ref(16, 1));
    goto corral_source_split_6501;

  corral_source_split_6501:
    assume {:verifier.code 0} true;
    $i63 := $load.i16($M.1, $p62);
    goto corral_source_split_6502;

  corral_source_split_6502:
    assume {:verifier.code 0} true;
    $i64 := $sext.i16.i32($i63);
    goto corral_source_split_6503;

  corral_source_split_6503:
    assume {:verifier.code 0} true;
    $i65 := $load.i16($M.1, xp_partition_id);
    goto corral_source_split_6504;

  corral_source_split_6504:
    assume {:verifier.code 0} true;
    $i66 := $sext.i16.i32($i65);
    goto corral_source_split_6505;

  corral_source_split_6505:
    assume {:verifier.code 0} true;
    $i67 := $eq.i32($i64, $i66);
    goto corral_source_split_6506;

  corral_source_split_6506:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6424;

  corral_source_split_6424:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb33:
    assume $i67 == 1;
    goto corral_source_split_6508;

  corral_source_split_6508:
    assume {:verifier.code 0} true;
    $i7 := 43;
    goto $bb3;

  $bb30:
    assume {:verifier.code 0} true;
    assume $i61 == 1;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i7 := 42;
    goto $bb3;

  $bb28:
    assume {:verifier.code 0} true;
    assume $i55 == 1;
    goto $bb26;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i49 == 1;
    goto $bb26;

  $bb22:
    assume $i45 == 1;
    goto corral_source_split_6478;

  corral_source_split_6478:
    assume {:verifier.code 0} true;
    $i7 := 39;
    goto $bb3;

  $bb19:
    assume $i40 == 1;
    goto corral_source_split_6470;

  corral_source_split_6470:
    assume {:verifier.code 0} true;
    $i7 := 54;
    goto $bb3;

  $bb8:
    assume $i19 == 1;
    goto corral_source_split_6440;

  corral_source_split_6440:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p2);
    goto corral_source_split_6441;

  corral_source_split_6441:
    assume {:verifier.code 0} true;
    goto corral_source_split_6442;

  corral_source_split_6442:
    assume {:verifier.code 0} true;
    $i22 := $M.35;
    goto corral_source_split_6443;

  corral_source_split_6443:
    assume {:verifier.code 0} true;
    $i23 := $slt.i32(0, $i22);
    goto corral_source_split_6444;

  corral_source_split_6444:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb10:
    assume $i23 == 1;
    goto corral_source_split_6446;

  corral_source_split_6446:
    assume {:verifier.code 0} true;
    $i24 := 0;
    goto $bb13;

  $bb13:
    call $i25, $p26, $i27, $i28, $i29, $p30, $i31, $i32, $i33, $p34, $i35, $i36, $i37, $i24 := xpc_get_remote_rp_loop_$bb13($p1, $p20, $i25, $p26, $i27, $i28, $i29, $p30, $i31, $i32, $i33, $p34, $i35, $i36, $i37, $i24);
    goto $bb13_last;

  corral_source_split_6448:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i24);
    goto corral_source_split_6450;

  corral_source_split_6450:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($p1, $mul.ref($i25, 8));
    goto corral_source_split_6451;

  corral_source_split_6451:
    assume {:verifier.code 0} true;
    $i27 := $load.i64($M.1, $p26);
    goto corral_source_split_6452;

  corral_source_split_6452:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64($i24);
    $i29 := $add.i64(128, $i28);
    goto corral_source_split_6453;

  corral_source_split_6453:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($p20, $mul.ref($i29, 8));
    goto corral_source_split_6454;

  corral_source_split_6454:
    assume {:verifier.code 0} true;
    $i31 := $load.i64($M.1, $p30);
    goto corral_source_split_6455;

  corral_source_split_6455:
    assume {:verifier.code 0} true;
    $i32 := $or.i64($i27, $i31);
    goto corral_source_split_6456;

  corral_source_split_6456:
    assume {:verifier.code 0} true;
    $i33 := $sext.i32.i64($i24);
    goto corral_source_split_6457;

  corral_source_split_6457:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($p1, $mul.ref($i33, 8));
    goto corral_source_split_6458;

  corral_source_split_6458:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p34, $i32);
    goto corral_source_split_6459;

  corral_source_split_6459:
    assume {:verifier.code 0} true;
    $i35 := $add.i32($i24, 1);
    call {:si_unique_call 1302} {:cexpr "l"} boogie_si_record_i32($i35);
    goto corral_source_split_6460;

  corral_source_split_6460:
    assume {:verifier.code 0} true;
    $i36 := $M.35;
    goto corral_source_split_6461;

  corral_source_split_6461:
    assume {:verifier.code 0} true;
    $i37 := $slt.i32($i35, $i36);
    goto corral_source_split_6462;

  corral_source_split_6462:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i37 == 1);
    goto corral_source_split_6464;

  corral_source_split_6464:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb15:
    assume $i37 == 1;
    assume {:verifier.code 0} true;
    $i24 := $i35;
    goto $bb15_dummy;

  $bb5:
    assume $i17 == 1;
    goto corral_source_split_6435;

  corral_source_split_6435:
    assume {:verifier.code 0} true;
    $i7 := $i16;
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_6422;

  corral_source_split_6422:
    assume {:verifier.code 0} true;
    $i7 := 41;
    goto $bb3;

  $bb15_dummy:
    assume false;
    return;

  $bb13_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6448;
}



const xpc_get_rsvd_page_pa: ref;

axiom xpc_get_rsvd_page_pa == $sub.ref(0, 458551);

procedure xpc_get_rsvd_page_pa($i0: i32) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.43, $M.44, $M.45, $M.41, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.1, $CurrAddr;



implementation xpc_get_rsvd_page_pa($i0: i32) returns ($r: i64)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i24;
  var $i20: i24;
  var $i21: i24;
  var $p22: ref;
  var $p23: ref;
  var $i24: i8;
  var $i25: i64;
  var $i26: i64;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i31: i64;
  var $i32: i64;
  var $i34: i1;
  var $i35: i32;
  var $i37: i64;
  var $i38: i1;
  var $p39: ref;
  var $i40: i64;
  var $i41: i1;
  var $p42: ref;
  var $i43: i64;
  var $i44: i64;
  var $i45: i64;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var $i49: i1;
  var $i50: i64;
  var $p51: ref;
  var $i53: i64;
  var $p54: ref;
  var $p55: ref;
  var $i56: i64;
  var $p57: ref;
  var $i58: i64;
  var $i59: i64;
  var $i60: i32;
  var $i61: i1;
  var $i62: i32;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i24;
  var $i70: i24;
  var $i71: i24;
  var $p72: ref;
  var $p73: ref;
  var $i74: i8;
  var $i75: i64;
  var $i76: i64;
  var $i77: i64;
  var $i78: i1;
  var $p79: ref;
  var $i36: i32;
  var $p81: ref;
  var $i82: i1;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $i89: i24;
  var $i90: i24;
  var $i91: i24;
  var $p92: ref;
  var $p93: ref;
  var $i94: i8;
  var $i95: i64;
  var $i96: i64;
  var $i97: i64;
  var $i98: i1;
  var $p99: ref;
  var $i100: i64;
  var $i102: i64;
  var vslice_dummy_var_96: i32;
  var vslice_dummy_var_97: i32;
  var vslice_dummy_var_98: i32;
  var vslice_dummy_var_99: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1303} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1304} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1305} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1306} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1307} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1308} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1309} $p7 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 1310} {:cexpr "xpc_get_rsvd_page_pa:arg:nasid"} boogie_si_record_i32($i0);
    goto corral_source_split_6510;

  corral_source_split_6510:
    assume {:verifier.code 0} true;
    $M.43 := $store.i64($M.43, $p1, 0);
    goto corral_source_split_6511;

  corral_source_split_6511:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i0);
    goto corral_source_split_6512;

  corral_source_split_6512:
    assume {:verifier.code 0} true;
    $M.44 := $store.i64($M.44, $p2, $i8);
    goto corral_source_split_6513;

  corral_source_split_6513:
    assume {:verifier.code 0} true;
    $M.45 := $store.i64($M.45, $p3, 0);
    goto corral_source_split_6514;

  corral_source_split_6514:
    assume {:verifier.code 0} true;
    $M.41 := $store.ref($M.41, $p4, $0.ref);
    goto corral_source_split_6515;

  corral_source_split_6515:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(24, 1)));
    goto corral_source_split_6516;

  corral_source_split_6516:
    assume {:verifier.code 0} true;
    $i10, $p11 := 0, $u1;
    goto $bb1;

  $bb1:
    call $i10, $p11, $i12, $p13, $p14, $p15, $p16, $p17, $p18, $i19, $i20, $i21, $p22, $p23, $i24, $i25, $i26, $i27, $i28, $p29, $i30, $i31, $i32, $i34, $i35, $i37, $i38, $p39, $i40, $i41, $p42, $i43, $i44, $i45, $p46, $p47, $i48, $i49, $i50, $i53, $p54, $p55, $i56, $p57, $i58, $i59, $i60, $i61, $i62, vslice_dummy_var_96 := xpc_get_rsvd_page_pa_loop_$bb1($p1, $p2, $p3, $p4, $p5, $p9, $i10, $p11, $i12, $p13, $p14, $p15, $p16, $p17, $p18, $i19, $i20, $i21, $p22, $p23, $i24, $i25, $i26, $i27, $i28, $p29, $i30, $i31, $i32, $i34, $i35, $i37, $i38, $p39, $i40, $i41, $p42, $i43, $i44, $i45, $p46, $p47, $i48, $i49, $i50, $i53, $p54, $p55, $i56, $p57, $i58, $i59, $i60, $i61, $i62, vslice_dummy_var_96);
    goto $bb1_last;

  corral_source_split_6518:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6519;

  corral_source_split_6519:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p13, .str);
    goto corral_source_split_6520;

  corral_source_split_6520:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6521;

  corral_source_split_6521:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p14, .str.100);
    goto corral_source_split_6522;

  corral_source_split_6522:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6523;

  corral_source_split_6523:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p15, .str.38);
    goto corral_source_split_6524;

  corral_source_split_6524:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6525;

  corral_source_split_6525:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p16, .str.101);
    goto corral_source_split_6526;

  corral_source_split_6526:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6527;

  corral_source_split_6527:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_6528;

  corral_source_split_6528:
    assume {:verifier.code 0} true;
    $i19 := $load.i24($M.12, $p18);
    goto corral_source_split_6529;

  corral_source_split_6529:
    assume {:verifier.code 0} true;
    $i20 := $and.i24($i19, $sub.i24(0, 262144));
    goto corral_source_split_6530;

  corral_source_split_6530:
    assume {:verifier.code 0} true;
    $i21 := $or.i24($i20, 145);
    goto corral_source_split_6531;

  corral_source_split_6531:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p18, $i21);
    goto corral_source_split_6532;

  corral_source_split_6532:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6533;

  corral_source_split_6533:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p22, 0);
    goto corral_source_split_6534;

  corral_source_split_6534:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6535;

  corral_source_split_6535:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.13, $p23);
    goto corral_source_split_6536;

  corral_source_split_6536:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i64($i24);
    goto corral_source_split_6537;

  corral_source_split_6537:
    assume {:verifier.code 0} true;
    $i26 := $and.i64($i25, 1);
    goto corral_source_split_6538;

  corral_source_split_6538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1313} $i27 := ldv__builtin_expect($i26, 0);
    call {:si_unique_call 1314} {:cexpr "tmp"} boogie_si_record_i64($i27);
    goto corral_source_split_6539;

  corral_source_split_6539:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_6540;

  corral_source_split_6540:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i12, 57);
    goto corral_source_split_6549;

  corral_source_split_6549:
    assume {:verifier.code 0} true;
    $i35 := $i12;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i37 := $load.i64($M.45, $p3);
    goto corral_source_split_6558;

  corral_source_split_6558:
    assume {:verifier.code 0} true;
    $i38 := $ugt.i64($i37, $i10);
    goto corral_source_split_6559;

  corral_source_split_6559:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    $i53, $p54 := $i10, $p11;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6582;

  corral_source_split_6582:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.1, xp_pa);
    call {:si_unique_call 1321} $i56 := devirtbounce.5($p55, $p54);
    call {:si_unique_call 1322} {:cexpr "tmp___0"} boogie_si_record_i64($i56);
    goto corral_source_split_6583;

  corral_source_split_6583:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.1, xp_remote_memcpy);
    goto corral_source_split_6584;

  corral_source_split_6584:
    assume {:verifier.code 0} true;
    $i58 := $load.i64($M.44, $p2);
    goto corral_source_split_6585;

  corral_source_split_6585:
    assume {:verifier.code 0} true;
    $i59 := $load.i64($M.45, $p3);
    call {:si_unique_call 1323} $i60 := devirtbounce.18($p57, $i56, $i58, $i59);
    call {:si_unique_call 1324} {:cexpr "ret"} boogie_si_record_i32($i60);
    goto corral_source_split_6586;

  corral_source_split_6586:
    assume {:verifier.code 0} true;
    $i61 := $ne.i32($i60, 0);
    goto corral_source_split_6587;

  corral_source_split_6587:
    assume {:verifier.code 0} true;
    $i62 := $i60;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i10, $p11 := $i53, $p54;
    goto $bb23_dummy;

  $bb18:
    assume $i61 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_6589;

  corral_source_split_6589:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6590;

  corral_source_split_6590:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p63, .str);
    goto corral_source_split_6591;

  corral_source_split_6591:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6592;

  corral_source_split_6592:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p64, .str.100);
    goto corral_source_split_6593;

  corral_source_split_6593:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6594;

  corral_source_split_6594:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p65, .str.38);
    goto corral_source_split_6595;

  corral_source_split_6595:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6596;

  corral_source_split_6596:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p66, .str.103);
    goto corral_source_split_6597;

  corral_source_split_6597:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6598;

  corral_source_split_6598:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p67);
    goto corral_source_split_6599;

  corral_source_split_6599:
    assume {:verifier.code 0} true;
    $i69 := $load.i24($M.12, $p68);
    goto corral_source_split_6600;

  corral_source_split_6600:
    assume {:verifier.code 0} true;
    $i70 := $and.i24($i69, $sub.i24(0, 262144));
    goto corral_source_split_6601;

  corral_source_split_6601:
    assume {:verifier.code 0} true;
    $i71 := $or.i24($i70, 170);
    goto corral_source_split_6602;

  corral_source_split_6602:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p68, $i71);
    goto corral_source_split_6603;

  corral_source_split_6603:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6604;

  corral_source_split_6604:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p72, 0);
    goto corral_source_split_6605;

  corral_source_split_6605:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6606;

  corral_source_split_6606:
    assume {:verifier.code 0} true;
    $i74 := $load.i8($M.13, $p73);
    goto corral_source_split_6607;

  corral_source_split_6607:
    assume {:verifier.code 0} true;
    $i75 := $zext.i8.i64($i74);
    goto corral_source_split_6608;

  corral_source_split_6608:
    assume {:verifier.code 0} true;
    $i76 := $and.i64($i75, 1);
    goto corral_source_split_6609;

  corral_source_split_6609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1325} $i77 := ldv__builtin_expect($i76, 0);
    call {:si_unique_call 1326} {:cexpr "tmp___1"} boogie_si_record_i64($i77);
    goto corral_source_split_6610;

  corral_source_split_6610:
    assume {:verifier.code 0} true;
    $i78 := $ne.i64($i77, 0);
    goto corral_source_split_6611;

  corral_source_split_6611:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i36 := $i62;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_6553;

  corral_source_split_6553:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.41, $p4);
    goto corral_source_split_6554;

  corral_source_split_6554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1316} kfree($p81);
    goto corral_source_split_6555;

  corral_source_split_6555:
    assume {:verifier.code 0} true;
    $i82 := $ne.i32($i36, 0);
    goto corral_source_split_6556;

  corral_source_split_6556:
    assume {:verifier.code 0} true;
    assume {:branchcond $i82} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6620;

  corral_source_split_6620:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p83, .str);
    goto corral_source_split_6621;

  corral_source_split_6621:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6622;

  corral_source_split_6622:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p84, .str.100);
    goto corral_source_split_6623;

  corral_source_split_6623:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6624;

  corral_source_split_6624:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p85, .str.38);
    goto corral_source_split_6625;

  corral_source_split_6625:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6626;

  corral_source_split_6626:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p86, .str.104);
    goto corral_source_split_6627;

  corral_source_split_6627:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6628;

  corral_source_split_6628:
    assume {:verifier.code 0} true;
    $p88 := $bitcast.ref.ref($p87);
    goto corral_source_split_6629;

  corral_source_split_6629:
    assume {:verifier.code 0} true;
    $i89 := $load.i24($M.12, $p88);
    goto corral_source_split_6630;

  corral_source_split_6630:
    assume {:verifier.code 0} true;
    $i90 := $and.i24($i89, $sub.i24(0, 262144));
    goto corral_source_split_6631;

  corral_source_split_6631:
    assume {:verifier.code 0} true;
    $i91 := $or.i24($i90, 180);
    goto corral_source_split_6632;

  corral_source_split_6632:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p88, $i91);
    goto corral_source_split_6633;

  corral_source_split_6633:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6634;

  corral_source_split_6634:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p92, 0);
    goto corral_source_split_6635;

  corral_source_split_6635:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6636;

  corral_source_split_6636:
    assume {:verifier.code 0} true;
    $i94 := $load.i8($M.13, $p93);
    goto corral_source_split_6637;

  corral_source_split_6637:
    assume {:verifier.code 0} true;
    $i95 := $zext.i8.i64($i94);
    goto corral_source_split_6638;

  corral_source_split_6638:
    assume {:verifier.code 0} true;
    $i96 := $and.i64($i95, 1);
    goto corral_source_split_6639;

  corral_source_split_6639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1328} $i97 := ldv__builtin_expect($i96, 0);
    call {:si_unique_call 1329} {:cexpr "tmp___2"} boogie_si_record_i64($i97);
    goto corral_source_split_6640;

  corral_source_split_6640:
    assume {:verifier.code 0} true;
    $i98 := $ne.i64($i97, 0);
    goto corral_source_split_6641;

  corral_source_split_6641:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i102 := $load.i64($M.44, $p2);
    goto corral_source_split_6648;

  corral_source_split_6648:
    assume {:verifier.code 0} true;
    $r := $i102;
    return;

  $bb27:
    assume $i98 == 1;
    goto corral_source_split_6643;

  corral_source_split_6643:
    assume {:verifier.code 0} true;
    $p99 := $M.5;
    goto corral_source_split_6644;

  corral_source_split_6644:
    assume {:verifier.code 0} true;
    $i100 := $load.i64($M.44, $p2);
    goto corral_source_split_6645;

  corral_source_split_6645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1330} vslice_dummy_var_99 := __dynamic_dev_dbg.ref.ref.ref.i64($p7, $p99, .str.104, $i100);
    goto corral_source_split_6646;

  corral_source_split_6646:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb24:
    assume $i82 == 1;
    goto corral_source_split_6617;

  corral_source_split_6617:
    assume {:verifier.code 0} true;
    $M.44 := $store.i64($M.44, $p2, 0);
    goto corral_source_split_6618;

  corral_source_split_6618:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb20:
    assume $i78 == 1;
    goto corral_source_split_6613;

  corral_source_split_6613:
    assume {:verifier.code 0} true;
    $p79 := $M.5;
    goto corral_source_split_6614;

  corral_source_split_6614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1327} vslice_dummy_var_98 := __dynamic_dev_dbg.ref.ref.ref.i32($p6, $p79, .str.103, $i62);
    goto corral_source_split_6615;

  corral_source_split_6615:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb9:
    assume $i38 == 1;
    goto corral_source_split_6561;

  corral_source_split_6561:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.41, $p4);
    goto corral_source_split_6562;

  corral_source_split_6562:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p39);
    goto corral_source_split_6563;

  corral_source_split_6563:
    assume {:verifier.code 0} true;
    $i41 := $ne.i64($i40, 0);
    goto corral_source_split_6564;

  corral_source_split_6564:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i43 := $load.i64($M.45, $p3);
    goto corral_source_split_6570;

  corral_source_split_6570:
    assume {:verifier.code 0} true;
    $i44 := $add.i64($i43, 63);
    goto corral_source_split_6571;

  corral_source_split_6571:
    assume {:verifier.code 0} true;
    $i45 := $and.i64($i44, $sub.i64(0, 64));
    call {:si_unique_call 1318} {:cexpr "buf_len"} boogie_si_record_i64($i45);
    goto corral_source_split_6572;

  corral_source_split_6572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1319} $p46 := xpc_kmalloc_cacheline_aligned($i45, 208, $p4);
    goto corral_source_split_6573;

  corral_source_split_6573:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.41, $p4);
    goto corral_source_split_6574;

  corral_source_split_6574:
    assume {:verifier.code 0} true;
    $i48 := $p2i.ref.i64($p47);
    goto corral_source_split_6575;

  corral_source_split_6575:
    assume {:verifier.code 0} true;
    $i49 := $eq.i64($i48, 0);
    goto corral_source_split_6576;

  corral_source_split_6576:
    assume {:verifier.code 0} true;
    $i50 := $i45;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i53, $p54 := $i45, $p46;
    goto $bb17;

  $bb14:
    assume $i49 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_6578;

  corral_source_split_6578:
    assume {:verifier.code 0} true;
    $p51 := $M.5;
    goto corral_source_split_6579;

  corral_source_split_6579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1320} vslice_dummy_var_97 := dev_err.ref.ref.i64($p51, .str.102, $i50);
    goto corral_source_split_6580;

  corral_source_split_6580:
    assume {:verifier.code 0} true;
    $i36 := 13;
    goto $bb7;

  $bb11:
    assume $i41 == 1;
    goto corral_source_split_6566;

  corral_source_split_6566:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.41, $p4);
    goto corral_source_split_6567;

  corral_source_split_6567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1317} kfree($p42);
    goto corral_source_split_6568;

  corral_source_split_6568:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb5:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_6551;

  corral_source_split_6551:
    assume {:verifier.code 0} true;
    $i36 := $i35;
    goto $bb7;

  $bb2:
    assume $i28 == 1;
    goto corral_source_split_6542;

  corral_source_split_6542:
    assume {:verifier.code 0} true;
    $p29 := $M.5;
    goto corral_source_split_6543;

  corral_source_split_6543:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.43, $p1);
    goto corral_source_split_6544;

  corral_source_split_6544:
    assume {:verifier.code 0} true;
    $i31 := $load.i64($M.44, $p2);
    goto corral_source_split_6545;

  corral_source_split_6545:
    assume {:verifier.code 0} true;
    $i32 := $load.i64($M.45, $p3);
    goto corral_source_split_6546;

  corral_source_split_6546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1315} vslice_dummy_var_96 := __dynamic_dev_dbg.ref.ref.ref.i32.i64.i64.i64($p5, $p29, .str.101, $i12, $i30, $i31, $i32);
    goto corral_source_split_6547;

  corral_source_split_6547:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb23_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1311} $i12 := devirtbounce.34($p9, $p11, $p1, $p2, $p3);
    call {:si_unique_call 1312} {:cexpr "ret"} boogie_si_record_i32($i12);
    goto corral_source_split_6518;
}



const get_cpu_mask: ref;

axiom get_cpu_mask == $sub.ref(0, 459583);

procedure get_cpu_mask($i0: i32) returns ($r: ref);
  free requires assertsPassed;



implementation get_cpu_mask($i0: i32) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i64;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1331} {:cexpr "get_cpu_mask:arg:cpu"} boogie_si_record_i32($i0);
    goto corral_source_split_6650;

  corral_source_split_6650:
    assume {:verifier.code 0} true;
    $i1 := $and.i32($i0, 63);
    goto corral_source_split_6651;

  corral_source_split_6651:
    assume {:verifier.code 0} true;
    $i2 := $add.i32($i1, 1);
    goto corral_source_split_6652;

  corral_source_split_6652:
    assume {:verifier.code 0} true;
    $i3 := $zext.i32.i64($i2);
    goto corral_source_split_6653;

  corral_source_split_6653:
    assume {:verifier.code 0} true;
    $i5 := $udiv.i32($i0, 64);
    goto corral_source_split_6654;

  corral_source_split_6654:
    assume {:verifier.code 0} true;
    $i6 := $zext.i32.i64($i5);
    goto corral_source_split_6655;

  corral_source_split_6655:
    assume {:verifier.code 0} true;
    $i7 := $sub.i64(0, $i6);
    $i8 := $add.i64($i3, $i7);
    $p9 := $add.ref($add.ref($add.ref(cpu_bit_bitmap, $mul.ref(0, 33280)), $mul.ref(0, 512)), $mul.ref($i8, 8));
    goto corral_source_split_6656;

  corral_source_split_6656:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_6657;

  corral_source_split_6657:
    assume {:verifier.code 0} true;
    $r := $p10;
    return;
}



const set_cpus_allowed_ptr: ref;

axiom set_cpus_allowed_ptr == $sub.ref(0, 460615);

procedure set_cpus_allowed_ptr($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation set_cpus_allowed_ptr($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6659;

  corral_source_split_6659:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1332} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1333} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_6660;

  corral_source_split_6660:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const xpc_start_hb_beater: ref;

axiom xpc_start_hb_beater == $sub.ref(0, 461647);

procedure xpc_start_hb_beater();
  free requires assertsPassed;
  modifies $M.1, $M.23, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $CurrAddr, $M.28, assertsPassed, $M.0, $M.2;



implementation xpc_start_hb_beater()
{
  var $p0: ref;
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1334} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_6662;

  corral_source_split_6662:
    assume {:verifier.code 0} true;
    $p1 := $load.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(88, 1)));
    call {:si_unique_call 1335} devirtbounce.4($p1);
    goto SeqInstr_604, SeqInstr_605;

  SeqInstr_605:
    assume assertsPassed;
    goto SeqInstr_606;

  SeqInstr_606:
    goto corral_source_split_6663;

  corral_source_split_6663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1336} init_timer_key(xpc_hb_timer, 0, .str.81, $p0);
    goto corral_source_split_6664;

  corral_source_split_6664:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $add.ref($add.ref(xpc_hb_timer, $mul.ref(0, 128)), $mul.ref(32, 1)), xpc_hb_beater);
    goto corral_source_split_6665;

  corral_source_split_6665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1337} xpc_hb_beater(0);
    goto SeqInstr_607, SeqInstr_608;

  SeqInstr_608:
    assume assertsPassed;
    goto SeqInstr_609;

  SeqInstr_609:
    goto corral_source_split_6666;

  corral_source_split_6666:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_607:
    assume !assertsPassed;
    return;

  SeqInstr_604:
    assume !assertsPassed;
    return;
}



const xpc_check_remote_hb: ref;

axiom xpc_check_remote_hb == $sub.ref(0, 462679);

procedure xpc_check_remote_hb();
  free requires assertsPassed;
  modifies $M.1, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.24, $M.40, $M.18, $M.19, $M.20, $M.21, $M.22, $M.2, $M.23, $CurrAddr, $M.31, $M.28, $M.41, $M.42, $M.0, assertsPassed, $M.43, $M.44, $M.45, $M.32;



implementation xpc_check_remote_hb()
{
  var $i0: i16;
  var $i1: i32;
  var $i2: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i16;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $i18: i8;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i25: i32;
  var $i26: i16;
  var $i27: i32;
  var $i28: i16;
  var $i29: i32;
  var $i30: i1;
  var $i3: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6668;

  corral_source_split_6668:
    assume {:verifier.code 0} true;
    $i0 := $load.i16($M.1, xp_max_npartitions);
    goto corral_source_split_6669;

  corral_source_split_6669:
    assume {:verifier.code 0} true;
    $i1 := $sext.i16.i32($i0);
    goto corral_source_split_6670;

  corral_source_split_6670:
    assume {:verifier.code 0} true;
    $i2 := $slt.i32(0, $i1);
    goto corral_source_split_6671;

  corral_source_split_6671:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_6673;

  corral_source_split_6673:
    assume {:verifier.code 0} true;
    $i3 := 0;
    goto $bb4;

  $bb4:
    call $i4, $i5, $i6, $i7, $i8, $i9, $p10, $i11, $p12, $p13, $i14, $i15, $i16, $p17, $i18, $i19, $i20, $p21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i3 := xpc_check_remote_hb_loop_$bb4($i4, $i5, $i6, $i7, $i8, $i9, $p10, $i11, $p12, $p13, $i14, $i15, $i16, $p17, $i18, $i19, $i20, $p21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i3);
    goto $bb4_last;

  corral_source_split_6675:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i4 := $M.0;
    goto corral_source_split_6677;

  corral_source_split_6677:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_6678;

  corral_source_split_6678:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i6 := $sext.i16.i32($i3);
    goto corral_source_split_6682;

  corral_source_split_6682:
    assume {:verifier.code 0} true;
    $i7 := $load.i16($M.1, xp_partition_id);
    goto corral_source_split_6683;

  corral_source_split_6683:
    assume {:verifier.code 0} true;
    $i8 := $sext.i16.i32($i7);
    goto corral_source_split_6684;

  corral_source_split_6684:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i6, $i8);
    goto corral_source_split_6685;

  corral_source_split_6685:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p10 := $M.3;
    goto corral_source_split_6697;

  corral_source_split_6697:
    assume {:verifier.code 0} true;
    $i11 := $sext.i16.i64($i3);
    goto corral_source_split_6698;

  corral_source_split_6698:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p10, $mul.ref($i11, 872));
    goto corral_source_split_6699;

  corral_source_split_6699:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p10, $mul.ref($i11, 872)), $mul.ref(112, 1));
    goto corral_source_split_6700;

  corral_source_split_6700:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.1, $p13);
    goto corral_source_split_6701;

  corral_source_split_6701:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_6702;

  corral_source_split_6702:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 0);
    goto corral_source_split_6703;

  corral_source_split_6703:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb16;

  $bb16:
    assume !($i16 == 1);
    goto corral_source_split_6705;

  corral_source_split_6705:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p10, $mul.ref($i11, 872)), $mul.ref(112, 1));
    goto corral_source_split_6706;

  corral_source_split_6706:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.1, $p17);
    goto corral_source_split_6707;

  corral_source_split_6707:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_6708;

  corral_source_split_6708:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 4);
    goto corral_source_split_6709;

  corral_source_split_6709:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(104, 1)));
    call {:si_unique_call 1339} $i22 := devirtbounce.22($p21, $p12);
    goto SeqInstr_610, SeqInstr_611;

  SeqInstr_611:
    assume assertsPassed;
    goto SeqInstr_612;

  SeqInstr_612:
    call {:si_unique_call 1340} {:cexpr "ret"} boogie_si_record_i32($i22);
    goto corral_source_split_6711;

  corral_source_split_6711:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_6712;

  corral_source_split_6712:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i24 := $sext.i16.i32($i3);
    goto corral_source_split_6689;

  corral_source_split_6689:
    assume {:verifier.code 0} true;
    $i25 := $add.i32($i24, 1);
    goto corral_source_split_6690;

  corral_source_split_6690:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i32.i16($i25);
    call {:si_unique_call 1338} {:cexpr "partid"} boogie_si_record_i16($i26);
    goto corral_source_split_6691;

  corral_source_split_6691:
    assume {:verifier.code 0} true;
    $i27 := $sext.i16.i32($i26);
    goto corral_source_split_6692;

  corral_source_split_6692:
    assume {:verifier.code 0} true;
    $i28 := $load.i16($M.1, xp_max_npartitions);
    goto corral_source_split_6693;

  corral_source_split_6693:
    assume {:verifier.code 0} true;
    $i29 := $sext.i16.i32($i28);
    goto corral_source_split_6694;

  corral_source_split_6694:
    assume {:verifier.code 0} true;
    $i30 := $slt.i32($i27, $i29);
    goto corral_source_split_6695;

  corral_source_split_6695:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i30 == 1);
    goto corral_source_split_6717;

  corral_source_split_6717:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb23:
    assume $i30 == 1;
    assume {:verifier.code 0} true;
    $i3 := $i26;
    goto $bb23_dummy;

  $bb20:
    assume $i23 == 1;
    goto corral_source_split_6714;

  corral_source_split_6714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1341} xpc_deactivate_partition(303, $p12, $i22);
    goto SeqInstr_613, SeqInstr_614;

  SeqInstr_614:
    assume assertsPassed;
    goto SeqInstr_615;

  SeqInstr_615:
    goto corral_source_split_6715;

  corral_source_split_6715:
    assume {:verifier.code 0} true;
    goto $bb22;

  SeqInstr_613:
    assume !assertsPassed;
    return;

  SeqInstr_610:
    assume !assertsPassed;
    return;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb15;

  $bb10:
    assume $i9 == 1;
    goto corral_source_split_6687;

  corral_source_split_6687:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb6:
    assume $i5 == 1;
    goto corral_source_split_6680;

  corral_source_split_6680:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb23_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6675;
}



const xpc_stop_hb_beater: ref;

axiom xpc_stop_hb_beater == $sub.ref(0, 463711);

procedure xpc_stop_hb_beater();
  free requires assertsPassed;
  modifies $M.1, $M.23, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.28, assertsPassed, $CurrAddr, $M.0, $M.2;



implementation xpc_stop_hb_beater()
{
  var $p1: ref;
  var vslice_dummy_var_100: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6719;

  corral_source_split_6719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1342} vslice_dummy_var_100 := del_timer_sync(xpc_hb_timer);
    goto corral_source_split_6720;

  corral_source_split_6720:
    assume {:verifier.code 0} true;
    $p1 := $load.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(96, 1)));
    call {:si_unique_call 1343} devirtbounce.4($p1);
    goto SeqInstr_616, SeqInstr_617;

  SeqInstr_617:
    assume assertsPassed;
    goto SeqInstr_618;

  SeqInstr_618:
    goto corral_source_split_6721;

  corral_source_split_6721:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_616:
    assume !assertsPassed;
    return;
}



const init_timer_key: ref;

axiom init_timer_key == $sub.ref(0, 464743);

procedure init_timer_key($p0: ref, $i1: i32, $p2: ref, $p3: ref);
  free requires assertsPassed;



implementation init_timer_key($p0: ref, $i1: i32, $p2: ref, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1344} {:cexpr "init_timer_key:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_6723;

  corral_source_split_6723:
    assume {:verifier.code 0} true;
    return;
}



const xpc_hb_beater: ref;

axiom xpc_hb_beater == $sub.ref(0, 465775);

procedure xpc_hb_beater($i0: i64);
  free requires assertsPassed;
  modifies $M.1, $M.23, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.28, assertsPassed, $CurrAddr, $M.0, $M.2;



implementation xpc_hb_beater($i0: i64)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1345} {:cexpr "xpc_hb_beater:arg:dummy"} boogie_si_record_i64($i0);
    goto corral_source_split_6725;

  corral_source_split_6725:
    assume {:verifier.code 0} true;
    $p1 := $load.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(64, 1)));
    call {:si_unique_call 1346} devirtbounce.4($p1);
    goto SeqInstr_619, SeqInstr_620;

  SeqInstr_620:
    assume assertsPassed;
    goto SeqInstr_621;

  SeqInstr_621:
    goto corral_source_split_6726;

  corral_source_split_6726:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.1, jiffies);
    goto corral_source_split_6727;

  corral_source_split_6727:
    assume {:verifier.code 0} true;
    $i3 := $M.40;
    goto corral_source_split_6728;

  corral_source_split_6728:
    assume {:verifier.code 0} true;
    $i4 := $sub.i64($i2, $i3);
    goto corral_source_split_6729;

  corral_source_split_6729:
    assume {:verifier.code 0} true;
    $i5 := $sge.i64($i4, 0);
    goto corral_source_split_6730;

  corral_source_split_6730:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.39, xpc_hb_interval);
    goto corral_source_split_6735;

  corral_source_split_6735:
    assume {:verifier.code 0} true;
    $i7 := $mul.i32($i6, 250);
    goto corral_source_split_6736;

  corral_source_split_6736:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_6737;

  corral_source_split_6737:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.1, jiffies);
    goto corral_source_split_6738;

  corral_source_split_6738:
    assume {:verifier.code 0} true;
    $i10 := $add.i64($i8, $i9);
    goto corral_source_split_6739;

  corral_source_split_6739:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $add.ref($add.ref(xpc_hb_timer, $mul.ref(0, 128)), $mul.ref(16, 1)), $i10);
    goto corral_source_split_6740;

  corral_source_split_6740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1348} add_timer(xpc_hb_timer);
    goto corral_source_split_6741;

  corral_source_split_6741:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_6732;

  corral_source_split_6732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1347} __wake_up(xpc_activate_IRQ_wq, 1, 1, $0.ref);
    goto corral_source_split_6733;

  corral_source_split_6733:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_619:
    assume !assertsPassed;
    return;
}



const __bad_size_call_parameter: ref;

axiom __bad_size_call_parameter == $sub.ref(0, 466807);

procedure __bad_size_call_parameter();



const xpc_timeout_partition_disengage: ref;

axiom xpc_timeout_partition_disengage == $sub.ref(0, 467839);

procedure xpc_timeout_partition_disengage($i0: i64);
  free requires assertsPassed;
  modifies $M.2, $M.1, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.23, $CurrAddr, $M.28, $M.0, assertsPassed;



implementation xpc_timeout_partition_disengage($i0: i64)
{
  var $p1: ref;
  var vslice_dummy_var_101: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1349} {:cexpr "xpc_timeout_partition_disengage:arg:data"} boogie_si_record_i64($i0);
    goto corral_source_split_6743;

  corral_source_split_6743:
    assume {:verifier.code 0} true;
    $p1 := $i2p.i64.ref($i0);
    goto corral_source_split_6744;

  corral_source_split_6744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1350} vslice_dummy_var_101 := xpc_partition_disengaged($p1);
    goto SeqInstr_622, SeqInstr_623;

  SeqInstr_623:
    assume assertsPassed;
    goto SeqInstr_624;

  SeqInstr_624:
    goto corral_source_split_6745;

  corral_source_split_6745:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_622:
    assume !assertsPassed;
    return;
}



const __first_node: ref;

axiom __first_node == $sub.ref(0, 468871);

procedure __first_node($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __first_node($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6747;

  corral_source_split_6747:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_6748;

  corral_source_split_6748:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_6749;

  corral_source_split_6749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1351} $i3 := find_first_bit($p2, 1024);
    call {:si_unique_call 1352} {:cexpr "tmp"} boogie_si_record_i64($i3);
    goto corral_source_split_6750;

  corral_source_split_6750:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    call {:si_unique_call 1353} {:cexpr "__min2"} boogie_si_record_i32($i4);
    goto corral_source_split_6751;

  corral_source_split_6751:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32(1024, $i4);
    goto corral_source_split_6752;

  corral_source_split_6752:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $i4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6756;

  corral_source_split_6756:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_6754;

  corral_source_split_6754:
    assume {:verifier.code 0} true;
    $i6 := 1024;
    goto $bb3;
}



const xpc_init_mq_node: ref;

axiom xpc_init_mq_node == $sub.ref(0, 469903);

procedure xpc_init_mq_node($i0: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.16, $M.15, $M.1, $CurrAddr;



implementation xpc_init_mq_node($i0: i32) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $i5: i32;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i32;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $i33: i1;
  var $p34: ref;
  var $i35: i32;
  var $i36: i32;
  var $i37: i1;
  var $i28: i32;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $i41: i1;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $i46: i32;
  var $i23: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1354} {:cexpr "xpc_init_mq_node:arg:nid"} boogie_si_record_i32($i0);
    goto corral_source_split_6758;

  corral_source_split_6758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1355} get_online_cpus();
    goto corral_source_split_6759;

  corral_source_split_6759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1356} $p1 := cpumask_of_node($i0);
    goto corral_source_split_6760;

  corral_source_split_6760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1357} $i2 := cpumask_next($sub.i32(0, 1), $p1);
    call {:si_unique_call 1358} {:cexpr "tmp___1"} boogie_si_record_i32($i2);
    goto corral_source_split_6761;

  corral_source_split_6761:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.1, nr_cpu_ids);
    goto corral_source_split_6762;

  corral_source_split_6762:
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i2, $i3);
    goto corral_source_split_6763;

  corral_source_split_6763:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p15 := $M.16;
    goto corral_source_split_6778;

  corral_source_split_6778:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_6779;

  corral_source_split_6779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1362} $i17 := IS_ERR($p16);
    call {:si_unique_call 1363} {:cexpr "tmp___3"} boogie_si_record_i64($i17);
    goto corral_source_split_6780;

  corral_source_split_6780:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_6781;

  corral_source_split_6781:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1370} $p24 := cpumask_of_node($i0);
    goto corral_source_split_6799;

  corral_source_split_6799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1371} $i25 := cpumask_next($sub.i32(0, 1), $p24);
    call {:si_unique_call 1372} {:cexpr "tmp___6"} boogie_si_record_i32($i25);
    goto corral_source_split_6800;

  corral_source_split_6800:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.1, nr_cpu_ids);
    goto corral_source_split_6801;

  corral_source_split_6801:
    assume {:verifier.code 0} true;
    $i27 := $slt.i32($i25, $i26);
    goto corral_source_split_6802;

  corral_source_split_6802:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p38 := $M.15;
    goto corral_source_split_6817;

  corral_source_split_6817:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_6818;

  corral_source_split_6818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1376} $i40 := IS_ERR($p39);
    call {:si_unique_call 1377} {:cexpr "tmp___8"} boogie_si_record_i64($i40);
    goto corral_source_split_6819;

  corral_source_split_6819:
    assume {:verifier.code 0} true;
    $i41 := $ne.i64($i40, 0);
    goto corral_source_split_6820;

  corral_source_split_6820:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1385} put_online_cpus();
    goto corral_source_split_6838;

  corral_source_split_6838:
    assume {:verifier.code 0} true;
    $i23 := 0;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_6797;

  corral_source_split_6797:
    assume {:verifier.code 0} true;
    $r := $i23;
    return;

  $bb27:
    assume $i41 == 1;
    goto corral_source_split_6829;

  corral_source_split_6829:
    assume {:verifier.code 0} true;
    $p42 := $M.16;
    goto corral_source_split_6830;

  corral_source_split_6830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1381} xpc_destroy_gru_mq_uv($p42);
    goto corral_source_split_6831;

  corral_source_split_6831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1382} put_online_cpus();
    goto corral_source_split_6832;

  corral_source_split_6832:
    assume {:verifier.code 0} true;
    $p43 := $M.15;
    goto corral_source_split_6833;

  corral_source_split_6833:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_6834;

  corral_source_split_6834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1383} $i45 := PTR_ERR($p44);
    call {:si_unique_call 1384} {:cexpr "tmp___7"} boogie_si_record_i64($i45);
    goto corral_source_split_6835;

  corral_source_split_6835:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i64.i32($i45);
    goto corral_source_split_6836;

  corral_source_split_6836:
    assume {:verifier.code 0} true;
    $i23 := $i46;
    goto $bb14;

  $bb16:
    assume $i27 == 1;
    goto corral_source_split_6804;

  corral_source_split_6804:
    assume {:verifier.code 0} true;
    $i28 := $i25;
    goto $bb19;

  $bb19:
    call $p29, $p30, $p31, $i32, $i33, $p34, $i35, $i36, $i37, $i28 := xpc_init_mq_node_loop_$bb19($i0, $p29, $p30, $p31, $i32, $i33, $p34, $i35, $i36, $i37, $i28);
    goto $bb19_last;

  corral_source_split_6806:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1373} $p29 := xpc_create_gru_mq_uv(131072, $i0, .str.106, xpc_handle_notify_IRQ_uv);
    goto corral_source_split_6808;

  corral_source_split_6808:
    assume {:verifier.code 0} true;
    $M.15 := $p29;
    goto corral_source_split_6809;

  corral_source_split_6809:
    assume {:verifier.code 0} true;
    $p30 := $M.15;
    goto corral_source_split_6810;

  corral_source_split_6810:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_6811;

  corral_source_split_6811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1374} $i32 := IS_ERR($p31);
    call {:si_unique_call 1375} {:cexpr "tmp___4"} boogie_si_record_i64($i32);
    goto corral_source_split_6812;

  corral_source_split_6812:
    assume {:verifier.code 0} true;
    $i33 := $eq.i64($i32, 0);
    goto corral_source_split_6813;

  corral_source_split_6813:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1378} $p34 := cpumask_of_node($i0);
    goto corral_source_split_6822;

  corral_source_split_6822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1379} $i35 := cpumask_next($i28, $p34);
    call {:si_unique_call 1380} {:cexpr "tmp___6"} boogie_si_record_i32($i35);
    goto corral_source_split_6823;

  corral_source_split_6823:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.1, nr_cpu_ids);
    goto corral_source_split_6824;

  corral_source_split_6824:
    assume {:verifier.code 0} true;
    $i37 := $slt.i32($i35, $i36);
    goto corral_source_split_6825;

  corral_source_split_6825:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i37 == 1);
    goto corral_source_split_6827;

  corral_source_split_6827:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb25:
    assume $i37 == 1;
    assume {:verifier.code 0} true;
    $i28 := $i35;
    goto $bb25_dummy;

  $bb21:
    assume $i33 == 1;
    goto corral_source_split_6815;

  corral_source_split_6815:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb12:
    assume $i18 == 1;
    goto corral_source_split_6790;

  corral_source_split_6790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1367} put_online_cpus();
    goto corral_source_split_6791;

  corral_source_split_6791:
    assume {:verifier.code 0} true;
    $p19 := $M.16;
    goto corral_source_split_6792;

  corral_source_split_6792:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_6793;

  corral_source_split_6793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1368} $i21 := PTR_ERR($p20);
    call {:si_unique_call 1369} {:cexpr "tmp___2"} boogie_si_record_i64($i21);
    goto corral_source_split_6794;

  corral_source_split_6794:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i64.i32($i21);
    goto corral_source_split_6795;

  corral_source_split_6795:
    assume {:verifier.code 0} true;
    $i23 := $i22;
    goto $bb14;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_6765;

  corral_source_split_6765:
    assume {:verifier.code 0} true;
    $i5 := $i2;
    goto $bb4;

  $bb4:
    call $p6, $p7, $p8, $i9, $i10, $p11, $i12, $i13, $i14, $i5 := xpc_init_mq_node_loop_$bb4($i0, $p6, $p7, $p8, $i9, $i10, $p11, $i12, $i13, $i14, $i5);
    goto $bb4_last;

  corral_source_split_6767:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1359} $p6 := xpc_create_gru_mq_uv(65536, $i0, .str.105, xpc_handle_activate_IRQ_uv);
    goto corral_source_split_6769;

  corral_source_split_6769:
    assume {:verifier.code 0} true;
    $M.16 := $p6;
    goto corral_source_split_6770;

  corral_source_split_6770:
    assume {:verifier.code 0} true;
    $p7 := $M.16;
    goto corral_source_split_6771;

  corral_source_split_6771:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_6772;

  corral_source_split_6772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1360} $i9 := IS_ERR($p8);
    call {:si_unique_call 1361} {:cexpr "tmp"} boogie_si_record_i64($i9);
    goto corral_source_split_6773;

  corral_source_split_6773:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_6774;

  corral_source_split_6774:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1364} $p11 := cpumask_of_node($i0);
    goto corral_source_split_6783;

  corral_source_split_6783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1365} $i12 := cpumask_next($i5, $p11);
    call {:si_unique_call 1366} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    goto corral_source_split_6784;

  corral_source_split_6784:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.1, nr_cpu_ids);
    goto corral_source_split_6785;

  corral_source_split_6785:
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, $i13);
    goto corral_source_split_6786;

  corral_source_split_6786:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i14 == 1);
    goto corral_source_split_6788;

  corral_source_split_6788:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $i5 := $i12;
    goto $bb10_dummy;

  $bb6:
    assume $i10 == 1;
    goto corral_source_split_6776;

  corral_source_split_6776:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb25_dummy:
    assume false;
    return;

  $bb19_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6806;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6767;
}



const __next_node: ref;

axiom __next_node == $sub.ref(0, 470935);

procedure __next_node($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __next_node($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i64;
  var $i6: i64;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1386} {:cexpr "__next_node:arg:n"} boogie_si_record_i32($i0);
    goto corral_source_split_6840;

  corral_source_split_6840:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_6841;

  corral_source_split_6841:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_6842;

  corral_source_split_6842:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i0, 1);
    goto corral_source_split_6843;

  corral_source_split_6843:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_6844;

  corral_source_split_6844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1387} $i6 := find_next_bit($p3, 1024, $i5);
    call {:si_unique_call 1388} {:cexpr "tmp"} boogie_si_record_i64($i6);
    goto corral_source_split_6845;

  corral_source_split_6845:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i64.i32($i6);
    call {:si_unique_call 1389} {:cexpr "__min2"} boogie_si_record_i32($i7);
    goto corral_source_split_6846;

  corral_source_split_6846:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32(1024, $i7);
    goto corral_source_split_6847;

  corral_source_split_6847:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $i7;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6851;

  corral_source_split_6851:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_6849;

  corral_source_split_6849:
    assume {:verifier.code 0} true;
    $i9 := 1024;
    goto $bb3;
}



const find_next_bit: ref;

axiom find_next_bit == $sub.ref(0, 471967);

procedure find_next_bit($p0: ref, $i1: i64, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation find_next_bit($p0: ref, $i1: i64, $i2: i64) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1390} {:cexpr "find_next_bit:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 1391} {:cexpr "find_next_bit:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_6853;

  corral_source_split_6853:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1392} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1393} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_6854;

  corral_source_split_6854:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const get_online_cpus: ref;

axiom get_online_cpus == $sub.ref(0, 472999);

procedure get_online_cpus();
  free requires assertsPassed;



implementation get_online_cpus()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6856;

  corral_source_split_6856:
    assume {:verifier.code 0} true;
    return;
}



const xpc_handle_activate_IRQ_uv: ref;

axiom xpc_handle_activate_IRQ_uv == $sub.ref(0, 474031);

procedure xpc_handle_activate_IRQ_uv($i0: i32, $p1: ref) returns ($r: i32);



const xpc_create_gru_mq_uv: ref;

axiom xpc_create_gru_mq_uv == $sub.ref(0, 475063);

procedure xpc_create_gru_mq_uv($i0: i32, $i1: i32, $p2: ref, $p3: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation xpc_create_gru_mq_uv($i0: i32, $i1: i32, $p2: ref, $p3: ref) returns ($r: ref)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $i20: i64;
  var $i21: i32;
  var $i22: i32;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i64;
  var $i27: i64;
  var $i28: i32;
  var $i29: i32;
  var $p30: ref;
  var $i31: i32;
  var $p32: ref;
  var $i33: i64;
  var $i34: i1;
  var $p35: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $i43: i32;
  var $i44: i1;
  var $p46: ref;
  var $i47: i32;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $i53: i32;
  var $i56: i32;
  var $i57: i64;
  var $p58: ref;
  var $p59: ref;
  var $i60: i32;
  var $i61: i32;
  var $i62: i32;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i8;
  var $i72: i32;
  var $p73: ref;
  var $i74: i32;
  var $i75: i32;
  var $i76: i1;
  var $p77: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $i83: i64;
  var $p84: ref;
  var $i85: i64;
  var $i86: i32;
  var $i87: i1;
  var $i79: i32;
  var $p89: ref;
  var $i90: i32;
  var $i55: i32;
  var $i45: i32;
  var $i42: i32;
  var $p91: ref;
  var $p92: ref;
  var $i93: i64;
  var $i37: i32;
  var $p94: ref;
  var $p95: ref;
  var $i19: i32;
  var $p96: ref;
  var $i10: i32;
  var $i97: i64;
  var $p98: ref;
  var $p88: ref;
  var vslice_dummy_var_102: i32;
  var vslice_dummy_var_103: i32;
  var vslice_dummy_var_104: i32;
  var vslice_dummy_var_105: i32;
  var vslice_dummy_var_106: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1394} {:cexpr "xpc_create_gru_mq_uv:arg:mq_size"} boogie_si_record_i32($i0);
    call {:si_unique_call 1395} {:cexpr "xpc_create_gru_mq_uv:arg:cpu"} boogie_si_record_i32($i1);
    goto corral_source_split_6858;

  corral_source_split_6858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1396} $p4 := kmalloc(56, 208);
    goto corral_source_split_6859;

  corral_source_split_6859:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_6860;

  corral_source_split_6860:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_6861;

  corral_source_split_6861:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_6862;

  corral_source_split_6862:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1399} $p11 := kzalloc(32, 208);
    goto corral_source_split_6873;

  corral_source_split_6873:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_6874;

  corral_source_split_6874:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p12, $p11);
    goto corral_source_split_6875;

  corral_source_split_6875:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p5, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_6876;

  corral_source_split_6876:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.1, $p13);
    goto corral_source_split_6877;

  corral_source_split_6877:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_6878;

  corral_source_split_6878:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, 0);
    goto corral_source_split_6879;

  corral_source_split_6879:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i20 := $zext.i32.i64($i0);
    goto corral_source_split_6889;

  corral_source_split_6889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1402} $i21 := __get_order($i20);
    call {:si_unique_call 1403} {:cexpr "pg_order"} boogie_si_record_i32($i21);
    goto corral_source_split_6890;

  corral_source_split_6890:
    assume {:verifier.code 0} true;
    $i22 := $add.i32($i21, 12);
    goto corral_source_split_6891;

  corral_source_split_6891:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p5, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_6892;

  corral_source_split_6892:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p23, $i22);
    goto corral_source_split_6893;

  corral_source_split_6893:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p5, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_6894;

  corral_source_split_6894:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.1, $p24);
    goto corral_source_split_6895;

  corral_source_split_6895:
    assume {:verifier.code 0} true;
    $i26 := $zext.i32.i64($i25);
    goto corral_source_split_6896;

  corral_source_split_6896:
    assume {:verifier.code 0} true;
    $i27 := $shl.i64(1, $i26);
    goto corral_source_split_6897;

  corral_source_split_6897:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i64.i32($i27);
    call {:si_unique_call 1404} {:cexpr "mq_size"} boogie_si_record_i32($i28);
    goto corral_source_split_6898;

  corral_source_split_6898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1405} $i29 := uv_cpu_to_blade_id($i1);
    goto corral_source_split_6899;

  corral_source_split_6899:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p5, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_6900;

  corral_source_split_6900:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p30, $i29);
    goto corral_source_split_6901;

  corral_source_split_6901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1406} $i31 := __cpu_to_node($i1);
    call {:si_unique_call 1407} {:cexpr "nid"} boogie_si_record_i32($i31);
    goto corral_source_split_6902;

  corral_source_split_6902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1408} $p32 := alloc_pages_exact_node($i31, 299728, $i21);
    goto corral_source_split_6903;

  corral_source_split_6903:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p32);
    goto corral_source_split_6904;

  corral_source_split_6904:
    assume {:verifier.code 0} true;
    $i34 := $eq.i64($i33, 0);
    goto corral_source_split_6905;

  corral_source_split_6905:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1411} $p38 := lowmem_page_address($p32);
    goto corral_source_split_6916;

  corral_source_split_6916:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p5, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_6917;

  corral_source_split_6917:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p39, $p38);
    goto corral_source_split_6918;

  corral_source_split_6918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1412} $i40 := xpc_gru_mq_watchlist_alloc_uv($p5);
    call {:si_unique_call 1413} {:cexpr "ret"} boogie_si_record_i32($i40);
    goto corral_source_split_6919;

  corral_source_split_6919:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_6920;

  corral_source_split_6920:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1415} $i43 := xpc_get_gru_mq_irq_uv($p5, $i1, $p2);
    call {:si_unique_call 1416} {:cexpr "ret"} boogie_si_record_i32($i43);
    goto corral_source_split_6930;

  corral_source_split_6930:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 0);
    goto corral_source_split_6931;

  corral_source_split_6931:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p5, $mul.ref(0, 56)), $mul.ref(12, 1));
    goto corral_source_split_6938;

  corral_source_split_6938:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.1, $p46);
    goto corral_source_split_6939;

  corral_source_split_6939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1418} $i48 := request_irq($i47, $p3, 0, $p2, $0.ref);
    call {:si_unique_call 1419} {:cexpr "ret"} boogie_si_record_i32($i48);
    goto corral_source_split_6940;

  corral_source_split_6940:
    assume {:verifier.code 0} true;
    $i49 := $ne.i32($i48, 0);
    goto corral_source_split_6941;

  corral_source_split_6941:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1422} $i56 := uv_cpu_to_pnode($i1);
    call {:si_unique_call 1423} {:cexpr "tmp___0"} boogie_si_record_i32($i56);
    call {:si_unique_call 1424} $i57 := devirtbounce.21(0, this_cpu_off, __uv_hub_info);
    call {:si_unique_call 1425} {:cexpr "tcp_ptr__"} boogie_si_record_i64($i57);
    goto corral_source_split_6953;

  corral_source_split_6953:
    assume {:verifier.code 0} true;
    $p58 := $i2p.i64.ref($i57);
    goto corral_source_split_6954;

  corral_source_split_6954:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p58, $mul.ref(0, 232)), $mul.ref(16, 1));
    goto corral_source_split_6955;

  corral_source_split_6955:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.1, $p59);
    goto corral_source_split_6956;

  corral_source_split_6956:
    assume {:verifier.code 0} true;
    $i61 := $or.i32($i56, $i60);
    goto corral_source_split_6957;

  corral_source_split_6957:
    assume {:verifier.code 0} true;
    $i62 := $shl.i32($i61, 1);
    call {:si_unique_call 1426} {:cexpr "nasid"} boogie_si_record_i32($i62);
    goto corral_source_split_6958;

  corral_source_split_6958:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p5, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_6959;

  corral_source_split_6959:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p63);
    goto corral_source_split_6960;

  corral_source_split_6960:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p5, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_6961;

  corral_source_split_6961:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.1, $p65);
    goto corral_source_split_6962;

  corral_source_split_6962:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p66);
    goto corral_source_split_6963;

  corral_source_split_6963:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p5, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_6964;

  corral_source_split_6964:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.1, $p68);
    goto corral_source_split_6965;

  corral_source_split_6965:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p64, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_6966;

  corral_source_split_6966:
    assume {:verifier.code 0} true;
    $i71 := $load.i8($M.1, $p70);
    goto corral_source_split_6967;

  corral_source_split_6967:
    assume {:verifier.code 0} true;
    $i72 := $zext.i8.i32($i71);
    goto corral_source_split_6968;

  corral_source_split_6968:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p64, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_6969;

  corral_source_split_6969:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.1, $p73);
    goto corral_source_split_6970;

  corral_source_split_6970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1427} $i75 := gru_create_message_queue($p67, $p69, $i28, $i62, $i72, $i74);
    call {:si_unique_call 1428} {:cexpr "ret"} boogie_si_record_i32($i75);
    goto corral_source_split_6971;

  corral_source_split_6971:
    assume {:verifier.code 0} true;
    $i76 := $ne.i32($i75, 0);
    goto corral_source_split_6972;

  corral_source_split_6972:
    assume {:verifier.code 0} true;
    assume {:branchcond $i76} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.1, xp_pa);
    goto corral_source_split_6983;

  corral_source_split_6983:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p5, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_6984;

  corral_source_split_6984:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.1, $p81);
    call {:si_unique_call 1431} $i83 := devirtbounce.5($p80, $p82);
    call {:si_unique_call 1432} {:cexpr "tmp___1"} boogie_si_record_i64($i83);
    goto corral_source_split_6985;

  corral_source_split_6985:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.1, xp_expand_memprotect);
    goto corral_source_split_6986;

  corral_source_split_6986:
    assume {:verifier.code 0} true;
    $i85 := $zext.i32.i64($i28);
    call {:si_unique_call 1433} $i86 := devirtbounce.6($p84, $i83, $i85);
    call {:si_unique_call 1434} {:cexpr "xp_ret"} boogie_si_record_i32($i86);
    goto corral_source_split_6987;

  corral_source_split_6987:
    assume {:verifier.code 0} true;
    $i87 := $ne.i32($i86, 0);
    goto corral_source_split_6988;

  corral_source_split_6988:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p88 := $p4;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_6992;

  corral_source_split_6992:
    assume {:verifier.code 0} true;
    $r := $p88;
    return;

  $bb29:
    assume $i87 == 1;
    goto corral_source_split_6990;

  corral_source_split_6990:
    assume {:verifier.code 0} true;
    $i79 := $sub.i32(0, 13);
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_6978;

  corral_source_split_6978:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p5, $mul.ref(0, 56)), $mul.ref(12, 1));
    goto corral_source_split_6979;

  corral_source_split_6979:
    assume {:verifier.code 0} true;
    $i90 := $load.i32($M.1, $p89);
    goto corral_source_split_6980;

  corral_source_split_6980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1430} free_irq($i90, $0.ref);
    goto corral_source_split_6981;

  corral_source_split_6981:
    assume {:verifier.code 0} true;
    $i55 := $i79;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_6950;

  corral_source_split_6950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1421} xpc_release_gru_mq_irq_uv($p5);
    goto corral_source_split_6951;

  corral_source_split_6951:
    assume {:verifier.code 0} true;
    $i45 := $i55;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_6935;

  corral_source_split_6935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1417} xpc_gru_mq_watchlist_free_uv($p5);
    goto corral_source_split_6936;

  corral_source_split_6936:
    assume {:verifier.code 0} true;
    $i42 := $i45;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_6924;

  corral_source_split_6924:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p5, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_6925;

  corral_source_split_6925:
    assume {:verifier.code 0} true;
    $p92 := $load.ref($M.1, $p91);
    goto corral_source_split_6926;

  corral_source_split_6926:
    assume {:verifier.code 0} true;
    $i93 := $p2i.ref.i64($p92);
    goto corral_source_split_6927;

  corral_source_split_6927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1414} free_pages($i93, $i21);
    goto corral_source_split_6928;

  corral_source_split_6928:
    assume {:verifier.code 0} true;
    $i37 := $i42;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_6911;

  corral_source_split_6911:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p5, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_6912;

  corral_source_split_6912:
    assume {:verifier.code 0} true;
    $p95 := $load.ref($M.1, $p94);
    goto corral_source_split_6913;

  corral_source_split_6913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1410} kfree($p95);
    goto corral_source_split_6914;

  corral_source_split_6914:
    assume {:verifier.code 0} true;
    $i19 := $i37;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_6885;

  corral_source_split_6885:
    assume {:verifier.code 0} true;
    $p96 := $bitcast.ref.ref($p5);
    goto corral_source_split_6886;

  corral_source_split_6886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1401} kfree($p96);
    goto corral_source_split_6887;

  corral_source_split_6887:
    assume {:verifier.code 0} true;
    $i10 := $i19;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6868;

  corral_source_split_6868:
    assume {:verifier.code 0} true;
    $i97 := $sext.i32.i64($i10);
    goto corral_source_split_6869;

  corral_source_split_6869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1398} $p98 := ERR_PTR($i97);
    goto corral_source_split_6870;

  corral_source_split_6870:
    assume {:verifier.code 0} true;
    goto corral_source_split_6871;

  corral_source_split_6871:
    assume {:verifier.code 0} true;
    $p88 := $p98;
    goto $bb32;

  $bb25:
    assume $i76 == 1;
    goto corral_source_split_6974;

  corral_source_split_6974:
    assume {:verifier.code 0} true;
    $p77 := $M.5;
    goto corral_source_split_6975;

  corral_source_split_6975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1429} vslice_dummy_var_106 := dev_err.ref.ref.i32($p77, .str.111, $i75);
    goto corral_source_split_6976;

  corral_source_split_6976:
    assume {:verifier.code 0} true;
    $i79 := $sub.i32(0, 22);
    goto $bb27;

  $bb21:
    assume $i49 == 1;
    goto corral_source_split_6943;

  corral_source_split_6943:
    assume {:verifier.code 0} true;
    $p50 := $M.5;
    goto corral_source_split_6944;

  corral_source_split_6944:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p5, $mul.ref(0, 56)), $mul.ref(12, 1));
    goto corral_source_split_6945;

  corral_source_split_6945:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.1, $p51);
    goto corral_source_split_6946;

  corral_source_split_6946:
    assume {:verifier.code 0} true;
    $i53 := $sub.i32(0, $i48);
    goto corral_source_split_6947;

  corral_source_split_6947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1420} vslice_dummy_var_105 := dev_err.ref.ref.i32.i32($p50, .str.110, $i52, $i53);
    goto corral_source_split_6948;

  corral_source_split_6948:
    assume {:verifier.code 0} true;
    $i55 := $i48;
    goto $bb23;

  $bb17:
    assume $i44 == 1;
    goto corral_source_split_6933;

  corral_source_split_6933:
    assume {:verifier.code 0} true;
    $i45 := $i43;
    goto $bb19;

  $bb13:
    assume $i41 == 1;
    goto corral_source_split_6922;

  corral_source_split_6922:
    assume {:verifier.code 0} true;
    $i42 := $i40;
    goto $bb15;

  $bb9:
    assume $i34 == 1;
    goto corral_source_split_6907;

  corral_source_split_6907:
    assume {:verifier.code 0} true;
    $p35 := $M.5;
    goto corral_source_split_6908;

  corral_source_split_6908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1409} vslice_dummy_var_104 := dev_err.ref.ref.i32.i32($p35, .str.109, $i28, $i31);
    goto corral_source_split_6909;

  corral_source_split_6909:
    assume {:verifier.code 0} true;
    $i37 := $sub.i32(0, 12);
    goto $bb11;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_6881;

  corral_source_split_6881:
    assume {:verifier.code 0} true;
    $p17 := $M.5;
    goto corral_source_split_6882;

  corral_source_split_6882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1400} vslice_dummy_var_103 := dev_err.ref.ref($p17, .str.108);
    goto corral_source_split_6883;

  corral_source_split_6883:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 12);
    goto $bb7;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_6864;

  corral_source_split_6864:
    assume {:verifier.code 0} true;
    $p8 := $M.5;
    goto corral_source_split_6865;

  corral_source_split_6865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1397} vslice_dummy_var_102 := dev_err.ref.ref($p8, .str.107);
    goto corral_source_split_6866;

  corral_source_split_6866:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 12);
    goto $bb3;
}



const cpumask_of_node: ref;

axiom cpumask_of_node == $sub.ref(0, 476095);

procedure cpumask_of_node($i0: i32) returns ($r: ref);
  free requires assertsPassed;



implementation cpumask_of_node($i0: i32) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1435} {:cexpr "cpumask_of_node:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_6994;

  corral_source_split_6994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1436} $p1 := external_alloc();
    goto corral_source_split_6995;

  corral_source_split_6995:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_6996;

  corral_source_split_6996:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const cpumask_next: ref;

axiom cpumask_next == $sub.ref(0, 477127);

procedure cpumask_next($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation cpumask_next($i0: i32, $p1: ref) returns ($r: i32)
{
  var $i2: i1;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i64;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i32;
  var vslice_dummy_var_107: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1437} {:cexpr "cpumask_next:arg:n"} boogie_si_record_i32($i0);
    goto corral_source_split_6998;

  corral_source_split_6998:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i0, $sub.i32(0, 1));
    goto corral_source_split_6999;

  corral_source_split_6999:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 512)), $mul.ref(0, 1));
    goto corral_source_split_7004;

  corral_source_split_7004:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_7005;

  corral_source_split_7005:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.1, nr_cpu_ids);
    goto corral_source_split_7006;

  corral_source_split_7006:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_7007;

  corral_source_split_7007:
    assume {:verifier.code 0} true;
    $i8 := $add.i32($i0, 1);
    goto corral_source_split_7008;

  corral_source_split_7008:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_7009;

  corral_source_split_7009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1439} $i10 := find_next_bit($p5, $i7, $i9);
    call {:si_unique_call 1440} {:cexpr "tmp"} boogie_si_record_i64($i10);
    goto corral_source_split_7010;

  corral_source_split_7010:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i64.i32($i10);
    goto corral_source_split_7011;

  corral_source_split_7011:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_7001;

  corral_source_split_7001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1438} vslice_dummy_var_107 := cpumask_check($i0);
    goto corral_source_split_7002;

  corral_source_split_7002:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const put_online_cpus: ref;

axiom put_online_cpus == $sub.ref(0, 478159);

procedure put_online_cpus();
  free requires assertsPassed;



implementation put_online_cpus()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7013;

  corral_source_split_7013:
    assume {:verifier.code 0} true;
    return;
}



const PTR_ERR: ref;

axiom PTR_ERR == $sub.ref(0, 479191);

procedure PTR_ERR($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation PTR_ERR($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7015;

  corral_source_split_7015:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_7016;

  corral_source_split_7016:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const xpc_handle_notify_IRQ_uv: ref;

axiom xpc_handle_notify_IRQ_uv == $sub.ref(0, 480223);

procedure xpc_handle_notify_IRQ_uv($i0: i32, $p1: ref) returns ($r: i32);



const xpc_handle_notify_mq_msg_uv: ref;

axiom xpc_handle_notify_mq_msg_uv == $sub.ref(0, 481255);

procedure xpc_handle_notify_mq_msg_uv($p0: ref, $p1: ref);



const gru_free_message: ref;

axiom gru_free_message == $sub.ref(0, 482287);

procedure gru_free_message($p0: ref, $p1: ref);



const gru_get_next_message: ref;

axiom gru_get_next_message == $sub.ref(0, 483319);

procedure gru_get_next_message($p0: ref) returns ($r: ref);



const xpc_handle_notify_mq_ack_uv: ref;

axiom xpc_handle_notify_mq_ack_uv == $sub.ref(0, 484351);

procedure xpc_handle_notify_mq_ack_uv($p0: ref, $p1: ref);



const xpc_send_chctl_local_msgrequest_uv: ref;

axiom xpc_send_chctl_local_msgrequest_uv == $sub.ref(0, 485383);

procedure xpc_send_chctl_local_msgrequest_uv($p0: ref, $i1: i32);



const cpumask_check: ref;

axiom cpumask_check == $sub.ref(0, 486415);

procedure cpumask_check($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation cpumask_check($i0: i32) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $i22: i1;
  var $i23: i32;
  var $i24: i64;
  var vslice_dummy_var_108: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1441} {:cexpr "cpumask_check:arg:cpu"} boogie_si_record_i32($i0);
    goto corral_source_split_7018;

  corral_source_split_7018:
    assume {:verifier.code 0} true;
    $i1 := $load.i32($M.1, nr_cpu_ids);
    goto corral_source_split_7019;

  corral_source_split_7019:
    assume {:verifier.code 0} true;
    $i2 := $ule.i32($i1, $i0);
    goto corral_source_split_7020;

  corral_source_split_7020:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    call {:si_unique_call 1442} {:cexpr "__ret_warn_once"} boogie_si_record_i32($i3);
    goto corral_source_split_7021;

  corral_source_split_7021:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_7022;

  corral_source_split_7022:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_7023;

  corral_source_split_7023:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_7024;

  corral_source_split_7024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1443} $i7 := ldv__builtin_expect($i6, 0);
    call {:si_unique_call 1444} {:cexpr "tmp___1"} boogie_si_record_i64($i7);
    goto corral_source_split_7025;

  corral_source_split_7025:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_7026;

  corral_source_split_7026:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i3, 0);
    goto corral_source_split_7049;

  corral_source_split_7049:
    assume {:verifier.code 0} true;
    $i23 := $zext.i1.i32($i22);
    goto corral_source_split_7050;

  corral_source_split_7050:
    assume {:verifier.code 0} true;
    $i24 := $sext.i32.i64($i23);
    goto corral_source_split_7051;

  corral_source_split_7051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1451} vslice_dummy_var_108 := ldv__builtin_expect($i24, 0);
    goto corral_source_split_7052;

  corral_source_split_7052:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_7028;

  corral_source_split_7028:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1(1);
    goto corral_source_split_7029;

  corral_source_split_7029:
    assume {:verifier.code 0} true;
    $i10 := $xor.i1($i9, 1);
    goto corral_source_split_7030;

  corral_source_split_7030:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    call {:si_unique_call 1445} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i11);
    goto corral_source_split_7031;

  corral_source_split_7031:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_7032;

  corral_source_split_7032:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i12);
    goto corral_source_split_7033;

  corral_source_split_7033:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_7034;

  corral_source_split_7034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1446} $i15 := ldv__builtin_expect($i14, 0);
    call {:si_unique_call 1447} {:cexpr "tmp"} boogie_si_record_i64($i15);
    goto corral_source_split_7035;

  corral_source_split_7035:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_7036;

  corral_source_split_7036:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i11, 0);
    goto corral_source_split_7041;

  corral_source_split_7041:
    assume {:verifier.code 0} true;
    $i18 := $zext.i1.i32($i17);
    goto corral_source_split_7042;

  corral_source_split_7042:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i18);
    goto corral_source_split_7043;

  corral_source_split_7043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1449} $i20 := ldv__builtin_expect($i19, 0);
    call {:si_unique_call 1450} {:cexpr "tmp___0"} boogie_si_record_i64($i20);
    goto corral_source_split_7044;

  corral_source_split_7044:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_7045;

  corral_source_split_7045:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i21 == 1;
    goto corral_source_split_7047;

  corral_source_split_7047:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume $i16 == 1;
    goto corral_source_split_7038;

  corral_source_split_7038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1448} warn_slowpath_null(.str.117, 108);
    goto corral_source_split_7039;

  corral_source_split_7039:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const warn_slowpath_null: ref;

axiom warn_slowpath_null == $sub.ref(0, 487447);

procedure warn_slowpath_null($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation warn_slowpath_null($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1452} {:cexpr "warn_slowpath_null:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_7054;

  corral_source_split_7054:
    assume {:verifier.code 0} true;
    return;
}



const __get_order: ref;

axiom __get_order == $sub.ref(0, 488479);

procedure __get_order($i0: i64) returns ($r: i32);
  free requires assertsPassed;



implementation __get_order($i0: i64) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i64;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1453} {:cexpr "__get_order:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_7056;

  corral_source_split_7056:
    assume {:verifier.code 0} true;
    $i1 := $sub.i64($i0, 1);
    call {:si_unique_call 1454} {:cexpr "size"} boogie_si_record_i64($i1);
    goto corral_source_split_7057;

  corral_source_split_7057:
    assume {:verifier.code 0} true;
    $i2 := $lshr.i64($i1, 12);
    call {:si_unique_call 1455} {:cexpr "size"} boogie_si_record_i64($i2);
    goto corral_source_split_7058;

  corral_source_split_7058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1456} $i3 := fls64($i2);
    call {:si_unique_call 1457} {:cexpr "order"} boogie_si_record_i32($i3);
    goto corral_source_split_7059;

  corral_source_split_7059:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const uv_cpu_to_blade_id: ref;

axiom uv_cpu_to_blade_id == $sub.ref(0, 489511);

procedure uv_cpu_to_blade_id($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation uv_cpu_to_blade_id($i0: i32) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i64;
  var $p3: ref;
  var $i4: i16;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1458} {:cexpr "uv_cpu_to_blade_id:arg:cpu"} boogie_si_record_i32($i0);
    goto corral_source_split_7061;

  corral_source_split_7061:
    assume {:verifier.code 0} true;
    $p1 := $load.ref($M.1, uv_cpu_to_blade);
    goto corral_source_split_7062;

  corral_source_split_7062:
    assume {:verifier.code 0} true;
    $i2 := $sext.i32.i64($i0);
    goto corral_source_split_7063;

  corral_source_split_7063:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p1, $mul.ref($i2, 2));
    goto corral_source_split_7064;

  corral_source_split_7064:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.1, $p3);
    goto corral_source_split_7065;

  corral_source_split_7065:
    assume {:verifier.code 0} true;
    $i5 := $sext.i16.i32($i4);
    goto corral_source_split_7066;

  corral_source_split_7066:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const __cpu_to_node: ref;

axiom __cpu_to_node == $sub.ref(0, 490543);

procedure __cpu_to_node($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __cpu_to_node($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1459} {:cexpr "__cpu_to_node:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_7068;

  corral_source_split_7068:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1460} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1461} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_7069;

  corral_source_split_7069:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const alloc_pages_exact_node: ref;

axiom alloc_pages_exact_node == $sub.ref(0, 491575);

procedure alloc_pages_exact_node($i0: i32, $i1: i32, $i2: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation alloc_pages_exact_node($i0: i32, $i1: i32, $i2: i32) returns ($r: ref)
{
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $i9: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $i14: i32;
  var $i8: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1462} {:cexpr "alloc_pages_exact_node:arg:nid"} boogie_si_record_i32($i0);
    call {:si_unique_call 1463} {:cexpr "alloc_pages_exact_node:arg:gfp_mask"} boogie_si_record_i32($i1);
    call {:si_unique_call 1464} {:cexpr "alloc_pages_exact_node:arg:order"} boogie_si_record_i32($i2);
    goto corral_source_split_7071;

  corral_source_split_7071:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i0, 0);
    goto corral_source_split_7072;

  corral_source_split_7072:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_7073;

  corral_source_split_7073:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_7074;

  corral_source_split_7074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1465} $i6 := ldv__builtin_expect($i5, 0);
    call {:si_unique_call 1466} {:cexpr "tmp"} boogie_si_record_i64($i6);
    goto corral_source_split_7075;

  corral_source_split_7075:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_7076;

  corral_source_split_7076:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    goto corral_source_split_7080;

  corral_source_split_7080:
    assume {:verifier.code 0} true;
    $i9 := $sgt.i32($i0, 1023);
    goto corral_source_split_7081;

  corral_source_split_7081:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_7082;

  corral_source_split_7082:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_7083;

  corral_source_split_7083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1467} $i12 := ldv__builtin_expect($i11, 0);
    call {:si_unique_call 1468} {:cexpr "tmp___0"} boogie_si_record_i64($i12);
    goto corral_source_split_7084;

  corral_source_split_7084:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_7085;

  corral_source_split_7085:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i8 := $i14;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7087;

  corral_source_split_7087:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i8, 0);
    goto corral_source_split_7088;

  corral_source_split_7088:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i15 == 1);
    goto corral_source_split_7094;

  corral_source_split_7094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1469} $i16 := node_state($i0, 1);
    call {:si_unique_call 1470} {:cexpr "tmp___2"} boogie_si_record_i32($i16);
    goto corral_source_split_7095;

  corral_source_split_7095:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 0);
    goto corral_source_split_7096;

  corral_source_split_7096:
    assume {:verifier.code 0} true;
    $i18 := $zext.i1.i32($i17);
    goto corral_source_split_7097;

  corral_source_split_7097:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i18);
    goto corral_source_split_7098;

  corral_source_split_7098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1471} $i20 := ldv__builtin_expect($i19, 0);
    call {:si_unique_call 1472} {:cexpr "tmp___3"} boogie_si_record_i64($i20);
    goto corral_source_split_7099;

  corral_source_split_7099:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_7100;

  corral_source_split_7100:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1474} $p22 := node_zonelist($i0, $i1);
    goto corral_source_split_7106;

  corral_source_split_7106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1475} $p23 := __alloc_pages($i1, $i2, $p22);
    goto corral_source_split_7107;

  corral_source_split_7107:
    assume {:verifier.code 0} true;
    $r := $p23;
    return;

  $bb10:
    assume $i21 == 1;
    goto corral_source_split_7104;

  corral_source_split_7104:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    call {:si_unique_call 1473} devirtbounce.7(0, .str.112, 323, 12);
    goto corral_source_split_7102;

  corral_source_split_7102:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    call alloc_pages_exact_node_loop_$bb12();
    goto $bb12_last;

  $bb7:
    assume $i15 == 1;
    goto corral_source_split_7092;

  corral_source_split_7092:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_7090;

  corral_source_split_7090:
    assume {:verifier.code 0} true;
    $i14 := 1;
    goto $bb6;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_7078;

  corral_source_split_7078:
    assume {:verifier.code 0} true;
    $i8 := 1;
    goto $bb3;

  $bb12_dummy:
    assume false;
    return;

  $bb12_last:
    assume {:verifier.code 0} true;
    goto $bb12_dummy;
}



const lowmem_page_address: ref;

axiom lowmem_page_address == $sub.ref(0, 492607);

procedure lowmem_page_address($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation lowmem_page_address($p0: ref) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $i3: i64;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7109;

  corral_source_split_7109:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_7110;

  corral_source_split_7110:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 24189255811072);
    goto corral_source_split_7111;

  corral_source_split_7111:
    assume {:verifier.code 0} true;
    $i3 := $sdiv.i64($i2, 80);
    goto corral_source_split_7112;

  corral_source_split_7112:
    assume {:verifier.code 0} true;
    $i4 := $shl.i64($i3, 12);
    goto corral_source_split_7113;

  corral_source_split_7113:
    assume {:verifier.code 0} true;
    $i5 := $add.i64($i4, $sub.i64(0, 131941395333120));
    goto corral_source_split_7114;

  corral_source_split_7114:
    assume {:verifier.code 0} true;
    $p6 := $i2p.i64.ref($i5);
    goto corral_source_split_7115;

  corral_source_split_7115:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const xpc_gru_mq_watchlist_alloc_uv: ref;

axiom xpc_gru_mq_watchlist_alloc_uv == $sub.ref(0, 493639);

procedure xpc_gru_mq_watchlist_alloc_uv($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation xpc_gru_mq_watchlist_alloc_uv($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p12: ref;
  var $i11: i32;
  var vslice_dummy_var_109: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7117;

  corral_source_split_7117:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_7118;

  corral_source_split_7118:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_7119;

  corral_source_split_7119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1476} $i3 := uv_gpa($p2);
    call {:si_unique_call 1477} {:cexpr "tmp"} boogie_si_record_i64($i3);
    goto corral_source_split_7120;

  corral_source_split_7120:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_7121;

  corral_source_split_7121:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.1, $p4);
    goto corral_source_split_7122;

  corral_source_split_7122:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_7123;

  corral_source_split_7123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1478} $i7 := uv_bios_mq_watchlist_alloc($i3, $i5, $p6);
    call {:si_unique_call 1479} {:cexpr "ret"} boogie_si_record_i32($i7);
    goto corral_source_split_7124;

  corral_source_split_7124:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i7, 0);
    goto corral_source_split_7125;

  corral_source_split_7125:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(40, 1));
    goto corral_source_split_7133;

  corral_source_split_7133:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p12, $i7);
    goto corral_source_split_7134;

  corral_source_split_7134:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7131;

  corral_source_split_7131:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_7127;

  corral_source_split_7127:
    assume {:verifier.code 0} true;
    $p9 := $M.5;
    goto corral_source_split_7128;

  corral_source_split_7128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1480} vslice_dummy_var_109 := dev_err.ref.ref.i32($p9, .str.113, $i7);
    goto corral_source_split_7129;

  corral_source_split_7129:
    assume {:verifier.code 0} true;
    $i11 := $i7;
    goto $bb3;
}



const xpc_get_gru_mq_irq_uv: ref;

axiom xpc_get_gru_mq_irq_uv == $sub.ref(0, 494671);

procedure xpc_get_gru_mq_irq_uv($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation xpc_get_gru_mq_irq_uv($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $i9: i64;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $p18: ref;
  var $i19: i64;
  var $i20: i64;
  var $p21: ref;
  var $i17: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1481} {:cexpr "xpc_get_gru_mq_irq_uv:arg:cpu"} boogie_si_record_i32($i1);
    goto corral_source_split_7136;

  corral_source_split_7136:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_7137;

  corral_source_split_7137:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.1, $p3);
    goto corral_source_split_7138;

  corral_source_split_7138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1482} $i5 := uv_blade_to_pnode($i4);
    call {:si_unique_call 1483} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_7139;

  corral_source_split_7139:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_7140;

  corral_source_split_7140:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.1, $p6);
    goto corral_source_split_7141;

  corral_source_split_7141:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_7142;

  corral_source_split_7142:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.1, $p8);
    goto corral_source_split_7143;

  corral_source_split_7143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1484} $i10 := uv_setup_irq($p2, $i1, $i7, $i9, 2);
    goto corral_source_split_7144;

  corral_source_split_7144:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(12, 1));
    goto corral_source_split_7145;

  corral_source_split_7145:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p11, $i10);
    goto corral_source_split_7146;

  corral_source_split_7146:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(12, 1));
    goto corral_source_split_7147;

  corral_source_split_7147:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.1, $p12);
    goto corral_source_split_7148;

  corral_source_split_7148:
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i13, 0);
    goto corral_source_split_7149;

  corral_source_split_7149:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_7157;

  corral_source_split_7157:
    assume {:verifier.code 0} true;
    $i19 := $load.i64($M.1, $p18);
    goto corral_source_split_7158;

  corral_source_split_7158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1485} $i20 := uv_read_global_mmr64($i5, $i19);
    goto corral_source_split_7159;

  corral_source_split_7159:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_7160;

  corral_source_split_7160:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p21, $i20);
    goto corral_source_split_7161;

  corral_source_split_7161:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7155;

  corral_source_split_7155:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_7151;

  corral_source_split_7151:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(12, 1));
    goto corral_source_split_7152;

  corral_source_split_7152:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.1, $p15);
    goto corral_source_split_7153;

  corral_source_split_7153:
    assume {:verifier.code 0} true;
    $i17 := $i16;
    goto $bb3;
}



const request_irq: ref;

axiom request_irq == $sub.ref(0, 495703);

procedure request_irq($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation request_irq($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1486} {:cexpr "request_irq:arg:irq"} boogie_si_record_i32($i0);
    call {:si_unique_call 1487} {:cexpr "request_irq:arg:flags"} boogie_si_record_i64($i2);
    goto corral_source_split_7163;

  corral_source_split_7163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1488} $i5 := request_threaded_irq($i0, $p1, $0.ref, $i2, $p3, $p4);
    call {:si_unique_call 1489} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_7164;

  corral_source_split_7164:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const uv_cpu_to_pnode: ref;

axiom uv_cpu_to_pnode == $sub.ref(0, 496735);

procedure uv_cpu_to_pnode($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation uv_cpu_to_pnode($i0: i32) returns ($r: i32)
{
  var $i1: i32;
  var $p2: ref;
  var $i3: i64;
  var $p5: ref;
  var $i6: i16;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1490} {:cexpr "uv_cpu_to_pnode:arg:cpu"} boogie_si_record_i32($i0);
    goto corral_source_split_7166;

  corral_source_split_7166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1491} $i1 := uv_cpu_to_blade_id($i0);
    call {:si_unique_call 1492} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_7167;

  corral_source_split_7167:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, uv_blade_info);
    goto corral_source_split_7168;

  corral_source_split_7168:
    assume {:verifier.code 0} true;
    $i3 := $sext.i32.i64($i1);
    goto corral_source_split_7169;

  corral_source_split_7169:
    assume {:verifier.code 0} true;
    goto corral_source_split_7170;

  corral_source_split_7170:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref($i3, 88)), $mul.ref(4, 1));
    goto corral_source_split_7171;

  corral_source_split_7171:
    assume {:verifier.code 0} true;
    $i6 := $load.i16($M.1, $p5);
    goto corral_source_split_7172;

  corral_source_split_7172:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i6);
    goto corral_source_split_7173;

  corral_source_split_7173:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const gru_create_message_queue: ref;

axiom gru_create_message_queue == $sub.ref(0, 497767);

procedure gru_create_message_queue($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32, $i5: i32) returns ($r: i32);
  free requires assertsPassed;



implementation gru_create_message_queue($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32, $i5: i32) returns ($r: i32)
{
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1493} {:cexpr "gru_create_message_queue:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 1494} {:cexpr "gru_create_message_queue:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 1495} {:cexpr "gru_create_message_queue:arg:arg4"} boogie_si_record_i32($i4);
    call {:si_unique_call 1496} {:cexpr "gru_create_message_queue:arg:arg5"} boogie_si_record_i32($i5);
    goto corral_source_split_7175;

  corral_source_split_7175:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1497} $i6 := __VERIFIER_nondet_int();
    call {:si_unique_call 1498} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i6);
    goto corral_source_split_7176;

  corral_source_split_7176:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const ERR_PTR: ref;

axiom ERR_PTR == $sub.ref(0, 498799);

procedure ERR_PTR($i0: i64) returns ($r: ref);
  free requires assertsPassed;



implementation ERR_PTR($i0: i64) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1499} {:cexpr "ERR_PTR:arg:error"} boogie_si_record_i64($i0);
    goto corral_source_split_7178;

  corral_source_split_7178:
    assume {:verifier.code 0} true;
    $p1 := $i2p.i64.ref($i0);
    goto corral_source_split_7179;

  corral_source_split_7179:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const request_threaded_irq: ref;

axiom request_threaded_irq == $sub.ref(0, 499831);

procedure request_threaded_irq($i0: i32, $p1: ref, $p2: ref, $i3: i64, $p4: ref, $p5: ref) returns ($r: i32);
  free requires assertsPassed;



implementation request_threaded_irq($i0: i32, $p1: ref, $p2: ref, $i3: i64, $p4: ref, $p5: ref) returns ($r: i32)
{
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1500} {:cexpr "request_threaded_irq:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 1501} {:cexpr "request_threaded_irq:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_7181;

  corral_source_split_7181:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1502} $i6 := __VERIFIER_nondet_int();
    call {:si_unique_call 1503} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i6);
    goto corral_source_split_7182;

  corral_source_split_7182:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const uv_setup_irq: ref;

axiom uv_setup_irq == $sub.ref(0, 500863);

procedure uv_setup_irq($p0: ref, $i1: i32, $i2: i32, $i3: i64, $i4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation uv_setup_irq($p0: ref, $i1: i32, $i2: i32, $i3: i64, $i4: i32) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1504} {:cexpr "uv_setup_irq:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1505} {:cexpr "uv_setup_irq:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 1506} {:cexpr "uv_setup_irq:arg:arg3"} boogie_si_record_i64($i3);
    call {:si_unique_call 1507} {:cexpr "uv_setup_irq:arg:arg4"} boogie_si_record_i32($i4);
    goto corral_source_split_7184;

  corral_source_split_7184:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1508} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 1509} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    goto corral_source_split_7185;

  corral_source_split_7185:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const uv_read_global_mmr64: ref;

axiom uv_read_global_mmr64 == $sub.ref(0, 501895);

procedure uv_read_global_mmr64($i0: i32, $i1: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation uv_read_global_mmr64($i0: i32, $i1: i64) returns ($r: i64)
{
  var $p2: ref;
  var $i3: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1510} {:cexpr "uv_read_global_mmr64:arg:pnode"} boogie_si_record_i32($i0);
    call {:si_unique_call 1511} {:cexpr "uv_read_global_mmr64:arg:offset"} boogie_si_record_i64($i1);
    goto corral_source_split_7187;

  corral_source_split_7187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1512} $p2 := uv_global_mmr64_address($i0, $i1);
    goto corral_source_split_7188;

  corral_source_split_7188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1513} $i3 := readq($p2);
    call {:si_unique_call 1514} {:cexpr "tmp___0"} boogie_si_record_i64($i3);
    goto corral_source_split_7189;

  corral_source_split_7189:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const uv_global_mmr64_address: ref;

axiom uv_global_mmr64_address == $sub.ref(0, 502927);

procedure uv_global_mmr64_address($i0: i32, $i1: i64) returns ($r: ref);
  free requires assertsPassed;



implementation uv_global_mmr64_address($i0: i32, $i1: i64) returns ($r: ref)
{
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $i7: i64;
  var $i8: i64;
  var $i9: i64;
  var $i10: i64;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1515} {:cexpr "uv_global_mmr64_address:arg:pnode"} boogie_si_record_i32($i0);
    call {:si_unique_call 1516} {:cexpr "uv_global_mmr64_address:arg:offset"} boogie_si_record_i64($i1);
    call {:si_unique_call 1517} $i2 := devirtbounce.21(0, this_cpu_off, __uv_hub_info);
    call {:si_unique_call 1518} {:cexpr "tcp_ptr__"} boogie_si_record_i64($i2);
    goto corral_source_split_7191;

  corral_source_split_7191:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i2);
    goto corral_source_split_7192;

  corral_source_split_7192:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_7193;

  corral_source_split_7193:
    assume {:verifier.code 0} true;
    $i5 := $load.i64($M.1, $p4);
    goto corral_source_split_7194;

  corral_source_split_7194:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i0);
    goto corral_source_split_7195;

  corral_source_split_7195:
    assume {:verifier.code 0} true;
    $i7 := $shl.i64($i6, 26);
    goto corral_source_split_7196;

  corral_source_split_7196:
    assume {:verifier.code 0} true;
    $i8 := $or.i64($i5, $i7);
    goto corral_source_split_7197;

  corral_source_split_7197:
    assume {:verifier.code 0} true;
    $i9 := $or.i64($i8, $i1);
    goto corral_source_split_7198;

  corral_source_split_7198:
    assume {:verifier.code 0} true;
    $i10 := $add.i64($i9, $sub.i64(0, 131941395333120));
    goto corral_source_split_7199;

  corral_source_split_7199:
    assume {:verifier.code 0} true;
    $p11 := $i2p.i64.ref($i10);
    goto corral_source_split_7200;

  corral_source_split_7200:
    assume {:verifier.code 0} true;
    $r := $p11;
    return;
}



const readq: ref;

axiom readq == $sub.ref(0, 503959);

procedure readq($p0: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation readq($p0: ref) returns ($r: i64)
{
  var $p1: ref;
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7202;

  corral_source_split_7202:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    call {:si_unique_call 1519} $i2 := devirtbounce.17(0, $p1);
    call {:si_unique_call 1520} {:cexpr "ret"} boogie_si_record_i64($i2);
    goto corral_source_split_7203;

  corral_source_split_7203:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const uv_bios_mq_watchlist_alloc: ref;

axiom uv_bios_mq_watchlist_alloc == $sub.ref(0, 504991);

procedure uv_bios_mq_watchlist_alloc($i0: i64, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation uv_bios_mq_watchlist_alloc($i0: i64, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1521} {:cexpr "uv_bios_mq_watchlist_alloc:arg:arg0"} boogie_si_record_i64($i0);
    call {:si_unique_call 1522} {:cexpr "uv_bios_mq_watchlist_alloc:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_7205;

  corral_source_split_7205:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1523} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1524} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_7206;

  corral_source_split_7206:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const node_state: ref;

axiom node_state == $sub.ref(0, 506023);

procedure node_state($i0: i32, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation node_state($i0: i32, $i1: i32) returns ($r: i32)
{
  var $i2: i64;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1525} {:cexpr "node_state:arg:node"} boogie_si_record_i32($i0);
    call {:si_unique_call 1526} {:cexpr "node_state:arg:state"} boogie_si_record_i32($i1);
    goto corral_source_split_7208;

  corral_source_split_7208:
    assume {:verifier.code 0} true;
    $i2 := $zext.i32.i64($i1);
    goto corral_source_split_7209;

  corral_source_split_7209:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref(node_states, $mul.ref(0, 640)), $mul.ref($i2, 128)), $mul.ref(0, 1));
    goto corral_source_split_7210;

  corral_source_split_7210:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_7211;

  corral_source_split_7211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1527} $i6 := variable_test_bit($i0, $p5);
    call {:si_unique_call 1528} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_7212;

  corral_source_split_7212:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const node_zonelist: ref;

axiom node_zonelist == $sub.ref(0, 507055);

procedure node_zonelist($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation node_zonelist($i0: i32, $i1: i32) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1529} {:cexpr "node_zonelist:arg:nid"} boogie_si_record_i32($i0);
    call {:si_unique_call 1530} {:cexpr "node_zonelist:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_7214;

  corral_source_split_7214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1531} $i2 := gfp_zonelist($i1);
    call {:si_unique_call 1532} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_7215;

  corral_source_split_7215:
    assume {:verifier.code 0} true;
    $i3 := $sext.i32.i64($i0);
    goto corral_source_split_7216;

  corral_source_split_7216:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref(node_data, $mul.ref(0, 0)), $mul.ref($i3, 8));
    goto corral_source_split_7217;

  corral_source_split_7217:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_7218;

  corral_source_split_7218:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 156392)), $mul.ref(7328, 1));
    goto corral_source_split_7219;

  corral_source_split_7219:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_7220;

  corral_source_split_7220:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i2);
    goto corral_source_split_7221;

  corral_source_split_7221:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p7, $mul.ref($i8, 74272));
    goto corral_source_split_7222;

  corral_source_split_7222:
    assume {:verifier.code 0} true;
    $r := $p9;
    return;
}



const __alloc_pages: ref;

axiom __alloc_pages == $sub.ref(0, 508087);

procedure __alloc_pages($i0: i32, $i1: i32, $p2: ref) returns ($r: ref);
  free requires assertsPassed;



implementation __alloc_pages($i0: i32, $i1: i32, $p2: ref) returns ($r: ref)
{
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1533} {:cexpr "__alloc_pages:arg:gfp_mask"} boogie_si_record_i32($i0);
    call {:si_unique_call 1534} {:cexpr "__alloc_pages:arg:order"} boogie_si_record_i32($i1);
    goto corral_source_split_7224;

  corral_source_split_7224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1535} $p3 := __alloc_pages_nodemask($i0, $i1, $p2, $0.ref);
    goto corral_source_split_7225;

  corral_source_split_7225:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const __alloc_pages_nodemask: ref;

axiom __alloc_pages_nodemask == $sub.ref(0, 509119);

procedure __alloc_pages_nodemask($i0: i32, $i1: i32, $p2: ref, $p3: ref) returns ($r: ref);
  free requires assertsPassed;



implementation __alloc_pages_nodemask($i0: i32, $i1: i32, $p2: ref, $p3: ref) returns ($r: ref)
{
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1536} {:cexpr "__alloc_pages_nodemask:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 1537} {:cexpr "__alloc_pages_nodemask:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_7227;

  corral_source_split_7227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1538} $p4 := external_alloc();
    goto corral_source_split_7228;

  corral_source_split_7228:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_7229;

  corral_source_split_7229:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const gfp_zonelist: ref;

axiom gfp_zonelist == $sub.ref(0, 510151);

procedure gfp_zonelist($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation gfp_zonelist($i0: i32) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1539} {:cexpr "gfp_zonelist:arg:flags"} boogie_si_record_i32($i0);
    goto corral_source_split_7231;

  corral_source_split_7231:
    assume {:verifier.code 0} true;
    $i1 := $and.i32($i0, 262144);
    goto corral_source_split_7232;

  corral_source_split_7232:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_7233;

  corral_source_split_7233:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_7234;

  corral_source_split_7234:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_7235;

  corral_source_split_7235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1540} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 1541} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_7236;

  corral_source_split_7236:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_7237;

  corral_source_split_7237:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7241;

  corral_source_split_7241:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_7239;

  corral_source_split_7239:
    assume {:verifier.code 0} true;
    $i7 := 1;
    goto $bb3;
}



const fls64: ref;

axiom fls64 == $sub.ref(0, 511183);

procedure fls64($i0: i64) returns ($r: i32);
  free requires assertsPassed;



implementation fls64($i0: i64) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1542} {:cexpr "fls64:arg:x"} boogie_si_record_i64($i0);
    call {:si_unique_call 1543} $i1 := devirtbounce.35(0, $i0, $sub.i32(0, 1));
    call {:si_unique_call 1544} {:cexpr "bitpos"} boogie_si_record_i32($i1);
    goto corral_source_split_7243;

  corral_source_split_7243:
    assume {:verifier.code 0} true;
    $i2 := $add.i32($i1, 1);
    goto corral_source_split_7244;

  corral_source_split_7244:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const xpc_handle_activate_mq_msg_uv: ref;

axiom xpc_handle_activate_mq_msg_uv == $sub.ref(0, 512215);

procedure xpc_handle_activate_mq_msg_uv($p0: ref, $p1: ref, $i2: i32, $p3: ref);



const find_first_bit: ref;

axiom find_first_bit == $sub.ref(0, 513247);

procedure find_first_bit($p0: ref, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation find_first_bit($p0: ref, $i1: i64) returns ($r: i64)
{
  var $i2: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1545} {:cexpr "find_first_bit:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_7246;

  corral_source_split_7246:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1546} $i2 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1547} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i2);
    goto corral_source_split_7247;

  corral_source_split_7247:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const xpc_exit: ref;

axiom xpc_exit == $sub.ref(0, 514279);

procedure xpc_exit();
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.1, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.23, $CurrAddr, $M.28, assertsPassed;



implementation xpc_exit()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7249;

  corral_source_split_7249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1548} xpc_do_exit(19);
    goto SeqInstr_625, SeqInstr_626;

  SeqInstr_626:
    assume assertsPassed;
    goto SeqInstr_627;

  SeqInstr_627:
    goto corral_source_split_7250;

  corral_source_split_7250:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_625:
    assume !assertsPassed;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 515311);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.47, $M.48, $M.49, $M.50, $M.51, $M.0, $M.2, $M.6, $M.1, $M.52, $M.90, $M.5, $M.17, $M.7, $M.3, $M.4, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.35, $M.37, $M.14, $M.62, $M.63, $M.64, $M.65, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.72, $M.73, $M.74, $M.75, $M.77, $M.78, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.89, $M.23, $M.24, $M.33, $M.40, $M.93, $M.94, $M.39, $M.95, $M.96, $M.97, $M.98, $M.99, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.106, $M.107, $M.108, $M.109, $M.110, $M.111, $M.112, $M.113, $M.114, $M.115, $M.116, $M.117, $M.118, $M.119, $M.120, $M.121, $M.32, $M.61, $M.60, $M.59, $M.28, $M.15, $M.16, $M.34, $M.36, $CurrAddr, $M.25, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, assertsPassed, $M.18, $M.19, $M.20, $M.21, $M.22, $M.43, $M.44, $M.45, $M.41, $M.31, $M.42;



implementation main() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $i32: i64;
  var $p33: ref;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $i38: i1;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $i42: i64;
  var $p43: ref;
  var vslice_dummy_var_110: i32;
  var vslice_dummy_var_111: i32;

  $bb0:
    call {:si_unique_call 1549} $initialize();
    goto corral_source_split_7252;

  corral_source_split_7252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1550} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    goto corral_source_split_7253;

  corral_source_split_7253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1551} ldv_initialize();
    goto corral_source_split_7254;

  corral_source_split_7254:
    assume {:verifier.code 0} true;
    $M.47 := 0;
    call {:si_unique_call 1552} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    goto corral_source_split_7255;

  corral_source_split_7255:
    assume {:verifier.code 0} true;
    $M.48 := 0;
    call {:si_unique_call 1553} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_7256;

  corral_source_split_7256:
    assume {:verifier.code 0} true;
    $M.49 := 1;
    call {:si_unique_call 1554} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_7257;

  corral_source_split_7257:
    assume {:verifier.code 0} true;
    $M.50 := 0;
    call {:si_unique_call 1555} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    goto corral_source_split_7258;

  corral_source_split_7258:
    assume {:verifier.code 0} true;
    $M.51 := 0;
    call {:si_unique_call 1556} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    goto corral_source_split_7259;

  corral_source_split_7259:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $p31, $i32, $p33, $i35, $i36, $i37, $i38, $i39, $i40, $p41, $i42, $p43, vslice_dummy_var_110, vslice_dummy_var_111 := main_loop_$bb1($i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $p31, $i32, $p33, $i35, $i36, $i37, $i38, $i39, $i40, $p41, $i42, $p43, vslice_dummy_var_110, vslice_dummy_var_111);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb17_dummy;

  $bb7:
    assume $i3 == 1;
    goto corral_source_split_7265;

  corral_source_split_7265:
    assume {:verifier.code 0} true;
    $i35 := $M.51;
    goto corral_source_split_7266;

  corral_source_split_7266:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_7267;

  corral_source_split_7267:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb58:
    assume $i36 == 1;
    goto corral_source_split_7331;

  corral_source_split_7331:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1579} $i37 := __VERIFIER_nondet_int();
    call {:si_unique_call 1580} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i37);
    call {:si_unique_call 1581} {:cexpr "tmp___2"} boogie_si_record_i32($i37);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb61:
    assume $i38 == 1;
    goto corral_source_split_7333;

  corral_source_split_7333:
    assume {:verifier.code 0} true;
    $i39 := $M.51;
    goto corral_source_split_7334;

  corral_source_split_7334:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i39, 1);
    goto corral_source_split_7335;

  corral_source_split_7335:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb63:
    assume $i40 == 1;
    goto corral_source_split_7337;

  corral_source_split_7337:
    assume {:verifier.code 0} true;
    $p41 := $M.56;
    goto corral_source_split_7338;

  corral_source_split_7338:
    assume {:verifier.code 0} true;
    $i42 := $M.57;
    goto corral_source_split_7339;

  corral_source_split_7339:
    assume {:verifier.code 0} true;
    $p43 := $M.58;
    goto corral_source_split_7340;

  corral_source_split_7340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1582} vslice_dummy_var_111 := xpc_system_die($p41, $i42, $p43);
    goto SeqInstr_643, SeqInstr_644;

  SeqInstr_644:
    assume assertsPassed;
    goto SeqInstr_645;

  SeqInstr_645:
    goto corral_source_split_7341;

  corral_source_split_7341:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1583} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_7342;

  corral_source_split_7342:
    assume {:verifier.code 0} true;
    goto $bb65;

  SeqInstr_643:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i2 == 1;
    goto corral_source_split_7261;

  corral_source_split_7261:
    assume {:verifier.code 0} true;
    $i25 := $M.50;
    goto corral_source_split_7262;

  corral_source_split_7262:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_7263;

  corral_source_split_7263:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb47:
    assume $i26 == 1;
    goto corral_source_split_7318;

  corral_source_split_7318:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1574} $i27 := __VERIFIER_nondet_int();
    call {:si_unique_call 1575} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i27);
    call {:si_unique_call 1576} {:cexpr "tmp___1"} boogie_si_record_i32($i27);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb50:
    assume $i28 == 1;
    goto corral_source_split_7320;

  corral_source_split_7320:
    assume {:verifier.code 0} true;
    $i29 := $M.50;
    goto corral_source_split_7321;

  corral_source_split_7321:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 1);
    goto corral_source_split_7322;

  corral_source_split_7322:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb52:
    assume $i30 == 1;
    goto corral_source_split_7324;

  corral_source_split_7324:
    assume {:verifier.code 0} true;
    $p31 := $M.53;
    goto corral_source_split_7325;

  corral_source_split_7325:
    assume {:verifier.code 0} true;
    $i32 := $M.54;
    goto corral_source_split_7326;

  corral_source_split_7326:
    assume {:verifier.code 0} true;
    $p33 := $M.55;
    goto corral_source_split_7327;

  corral_source_split_7327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1577} vslice_dummy_var_110 := xpc_system_reboot($p31, $i32, $p33);
    goto SeqInstr_640, SeqInstr_641;

  SeqInstr_641:
    assume assertsPassed;
    goto SeqInstr_642;

  SeqInstr_642:
    goto corral_source_split_7328;

  corral_source_split_7328:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1578} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_7329;

  corral_source_split_7329:
    assume {:verifier.code 0} true;
    goto $bb54;

  SeqInstr_640:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i4 == 1);
    goto corral_source_split_7269;

  corral_source_split_7269:
    assume {:verifier.code 0} true;
    $i8 := $M.49;
    goto corral_source_split_7270;

  corral_source_split_7270:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_7271;

  corral_source_split_7271:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb18:
    assume $i9 == 1;
    goto corral_source_split_7280;

  corral_source_split_7280:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1561} $i10 := __VERIFIER_nondet_int();
    call {:si_unique_call 1562} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i10);
    call {:si_unique_call 1563} {:cexpr "tmp___0"} boogie_si_record_i32($i10);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i10, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i10, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb23:
    assume $i12 == 1;
    goto corral_source_split_7282;

  corral_source_split_7282:
    assume {:verifier.code 0} true;
    $i18 := $M.49;
    goto corral_source_split_7283;

  corral_source_split_7283:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_7284;

  corral_source_split_7284:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb36:
    assume $i19 == 1;
    goto corral_source_split_7300;

  corral_source_split_7300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1567} $i20 := xpc_init();
    goto SeqInstr_637, SeqInstr_638;

  SeqInstr_638:
    assume assertsPassed;
    goto SeqInstr_639;

  SeqInstr_639:
    goto corral_source_split_7301;

  corral_source_split_7301:
    assume {:verifier.code 0} true;
    $M.52 := $i20;
    call {:si_unique_call 1568} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i20);
    goto corral_source_split_7302;

  corral_source_split_7302:
    assume {:verifier.code 0} true;
    $i21 := $M.52;
    goto corral_source_split_7303;

  corral_source_split_7303:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 0);
    goto corral_source_split_7304;

  corral_source_split_7304:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i23 := $M.52;
    goto corral_source_split_7312;

  corral_source_split_7312:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_7313;

  corral_source_split_7313:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb41:
    assume $i24 == 1;
    goto corral_source_split_7315;

  corral_source_split_7315:
    assume {:verifier.code 0} true;
    $M.49 := 2;
    call {:si_unique_call 1573} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_7316;

  corral_source_split_7316:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1566} ldv_check_final_state();
    goto SeqInstr_634, SeqInstr_635;

  SeqInstr_635:
    assume assertsPassed;
    goto SeqInstr_636;

  SeqInstr_636:
    goto corral_source_split_7298;

  corral_source_split_7298:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_634:
    assume !assertsPassed;
    return;

  $bb38:
    assume $i22 == 1;
    goto corral_source_split_7306;

  corral_source_split_7306:
    assume {:verifier.code 0} true;
    $M.49 := 3;
    call {:si_unique_call 1569} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_7307;

  corral_source_split_7307:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1570} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_7308;

  corral_source_split_7308:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1571} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_7309;

  corral_source_split_7309:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 1572} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_7310;

  corral_source_split_7310:
    assume {:verifier.code 0} true;
    goto $bb40;

  SeqInstr_637:
    assume !assertsPassed;
    return;

  $bb21:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i10, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb25;

  $bb26:
    assume $i13 == 1;
    goto corral_source_split_7286;

  corral_source_split_7286:
    assume {:verifier.code 0} true;
    $i14 := $M.49;
    goto corral_source_split_7287;

  corral_source_split_7287:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 3);
    goto corral_source_split_7288;

  corral_source_split_7288:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb28:
    assume $i15 == 1;
    goto corral_source_split_7290;

  corral_source_split_7290:
    assume {:verifier.code 0} true;
    $i16 := $M.48;
    goto corral_source_split_7291;

  corral_source_split_7291:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 0);
    goto corral_source_split_7292;

  corral_source_split_7292:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb30;

  $bb31:
    assume $i17 == 1;
    goto corral_source_split_7294;

  corral_source_split_7294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1564} xpc_exit();
    goto SeqInstr_631, SeqInstr_632;

  SeqInstr_632:
    assume assertsPassed;
    goto SeqInstr_633;

  SeqInstr_633:
    goto corral_source_split_7295;

  corral_source_split_7295:
    assume {:verifier.code 0} true;
    $M.49 := 2;
    call {:si_unique_call 1565} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_7296;

  corral_source_split_7296:
    assume {:verifier.code 0} true;
    goto $bb33;

  SeqInstr_631:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb9;

  $bb12:
    assume $i5 == 1;
    goto corral_source_split_7273;

  corral_source_split_7273:
    assume {:verifier.code 0} true;
    $i6 := $M.47;
    goto corral_source_split_7274;

  corral_source_split_7274:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_7275;

  corral_source_split_7275:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb14:
    assume $i7 == 1;
    goto corral_source_split_7277;

  corral_source_split_7277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1560} ldv_main_exported_1();
    goto SeqInstr_628, SeqInstr_629;

  SeqInstr_629:
    assume assertsPassed;
    goto SeqInstr_630;

  SeqInstr_630:
    goto corral_source_split_7278;

  corral_source_split_7278:
    assume {:verifier.code 0} true;
    goto $bb16;

  SeqInstr_628:
    assume !assertsPassed;
    return;

  $bb17_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1557} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1558} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1559} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 516343);

procedure ldv_initialize();
  free requires assertsPassed;
  modifies $M.28, $M.59, $M.60, $M.61, $M.32;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7344;

  corral_source_split_7344:
    assume {:verifier.code 0} true;
    $M.28 := 1;
    call {:si_unique_call 1584} {:cexpr "ldv_mutex_cached_activate_gru_mq_desc_mutex_of_xpc_partition_uv"} boogie_si_record_i32(1);
    goto corral_source_split_7345;

  corral_source_split_7345:
    assume {:verifier.code 0} true;
    $M.59 := 1;
    call {:si_unique_call 1585} {:cexpr "ldv_mutex_cred_guard_mutex_of_signal_struct"} boogie_si_record_i32(1);
    goto corral_source_split_7346;

  corral_source_split_7346:
    assume {:verifier.code 0} true;
    $M.60 := 1;
    call {:si_unique_call 1586} {:cexpr "ldv_mutex_lock"} boogie_si_record_i32(1);
    goto corral_source_split_7347;

  corral_source_split_7347:
    assume {:verifier.code 0} true;
    $M.61 := 1;
    call {:si_unique_call 1587} {:cexpr "ldv_mutex_mutex_of_device"} boogie_si_record_i32(1);
    goto corral_source_split_7348;

  corral_source_split_7348:
    assume {:verifier.code 0} true;
    $M.32 := 1;
    call {:si_unique_call 1588} {:cexpr "ldv_mutex_mutex_of_xpc_registration"} boogie_si_record_i32(1);
    goto corral_source_split_7349;

  corral_source_split_7349:
    assume {:verifier.code 0} true;
    return;
}



const ldv_main_exported_1: ref;

axiom ldv_main_exported_1 == $sub.ref(0, 517375);

procedure ldv_main_exported_1();
  free requires assertsPassed;
  modifies $M.47, $M.1, $M.25, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.48, $M.23, $M.24, $M.28, $CurrAddr, $M.0, $M.2, assertsPassed;



implementation ldv_main_exported_1()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $i44: i32;
  var $i45: i1;
  var $p46: ref;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $i52: i32;
  var $i53: i1;
  var $p54: ref;
  var $p55: ref;
  var $i56: i32;
  var $i57: i1;
  var $p58: ref;
  var $p59: ref;
  var $i60: i32;
  var $i61: i1;
  var $i62: i32;
  var $i63: i1;
  var $i64: i32;
  var $i65: i1;
  var $i66: i16;
  var $i67: i32;
  var $i68: i16;
  var $i69: i32;
  var $i70: i1;
  var $i71: i16;
  var $i72: i32;
  var $i73: i16;
  var $i74: i32;
  var $i75: i1;
  var $i76: i16;
  var $i77: i32;
  var $i78: i16;
  var $i80: i32;
  var $i81: i1;
  var $i82: i16;
  var $i83: i32;
  var $i84: i16;
  var $i86: i32;
  var $i87: i1;
  var $p88: ref;
  var $i89: i32;
  var $p90: ref;
  var $i91: i16;
  var $i92: i32;
  var $i93: i16;
  var $i94: i8;
  var $i95: i32;
  var $i96: i8;
  var $p97: ref;
  var $p98: ref;
  var $i100: i32;
  var $i101: i1;
  var $p102: ref;
  var $i103: i32;
  var $p104: ref;
  var $i105: i16;
  var $i106: i32;
  var $i107: i16;
  var $i108: i8;
  var $i109: i32;
  var $i110: i8;
  var $p111: ref;
  var $p112: ref;
  var $i114: i32;
  var $i115: i1;
  var $p116: ref;
  var $p117: ref;
  var $i118: i32;
  var $i119: i1;
  var $p120: ref;
  var $p121: ref;
  var $i122: i32;
  var $i123: i1;
  var $p124: ref;
  var $p125: ref;
  var $i126: i32;
  var $i127: i1;
  var $p128: ref;
  var $p129: ref;
  var $i130: i32;
  var $i131: i1;
  var $i132: i16;
  var $i133: i32;
  var $i134: i16;
  var $i135: i32;
  var $i136: i1;
  var $i137: i16;
  var $i138: i32;
  var $i139: i16;
  var $i140: i32;
  var $i141: i1;
  var $p142: ref;
  var $i144: i32;
  var $i145: i1;
  var $p146: ref;
  var $i148: i32;
  var $i149: i1;
  var $p150: ref;
  var $i152: i32;
  var $i153: i1;
  var $p154: ref;
  var $i156: i32;
  var $i157: i1;
  var $p158: ref;
  var $p159: ref;
  var $i160: i32;
  var $i161: i1;
  var $p162: ref;
  var $p163: ref;
  var $i164: i32;
  var $i165: i1;
  var $p166: ref;
  var $i167: i32;
  var $i168: i32;
  var $i169: i32;
  var $i170: i1;
  var $i171: i32;
  var $i172: i1;
  var $i173: i32;
  var $i174: i1;
  var $p175: ref;
  var $i176: i32;
  var $i177: i1;
  var $p178: ref;
  var $i179: i32;
  var $i180: i1;
  var $p181: ref;
  var $i182: i32;
  var $i183: i1;
  var $p184: ref;
  var $i185: i32;
  var $i186: i1;
  var $p187: ref;
  var $i188: i32;
  var $i189: i1;
  var $p190: ref;
  var $i191: i32;
  var $i192: i1;
  var $p193: ref;
  var $i194: i64;
  var $i195: i32;
  var $i196: i32;
  var $i197: i1;
  var $p198: ref;
  var $i199: i64;
  var $i200: i32;
  var $i201: i32;
  var $i202: i1;
  var $p203: ref;
  var $i204: i32;
  var $i205: i1;
  var $p206: ref;
  var $i207: i32;
  var $i208: i1;
  var $p209: ref;
  var $i210: i32;
  var $i211: i1;
  var $p212: ref;
  var $i213: i32;
  var $i214: i1;
  var $i216: i32;
  var $i217: i1;
  var $i219: i32;
  var $i220: i1;
  var $p221: ref;
  var $p222: ref;
  var $i223: i32;
  var $i224: i1;
  var $p225: ref;
  var $p226: ref;
  var $i227: i32;
  var $i228: i1;
  var $i229: i32;
  var $i230: i1;
  var $i231: i32;
  var $i232: i1;
  var $i233: i32;
  var $i234: i1;
  var $i235: i32;
  var $i236: i1;
  var $p237: ref;
  var $i238: i32;
  var $i239: i1;
  var $p240: ref;
  var $i241: i32;
  var $i242: i1;
  var $p243: ref;
  var $i244: i64;
  var $i246: i32;
  var $i247: i1;
  var $p248: ref;
  var $i249: i64;
  var $i251: i32;
  var $i252: i1;
  var $p253: ref;
  var $p254: ref;
  var $p255: ref;
  var $p256: ref;
  var $i258: i32;
  var $i259: i1;
  var $p260: ref;
  var $p261: ref;
  var $p262: ref;
  var $p263: ref;
  var $i265: i32;
  var $i266: i1;
  var $p267: ref;
  var $i269: i32;
  var $i270: i1;
  var $p271: ref;
  var $i273: i32;
  var $i274: i1;
  var $p275: ref;
  var $i277: i32;
  var $i278: i1;
  var $p279: ref;
  var $i281: i32;
  var $i282: i1;
  var $p283: ref;
  var $i284: i32;
  var $i285: i32;
  var $i286: i1;
  var $p287: ref;
  var $i288: i32;
  var $i289: i32;
  var $i290: i1;
  var $i291: i32;
  var $i292: i1;
  var $i293: i32;
  var $i294: i1;
  var $p295: ref;
  var $i296: i32;
  var $i297: i1;
  var $p298: ref;
  var $i299: i32;
  var $i300: i1;
  var $i301: i32;
  var $i302: i1;
  var $i303: i32;
  var $i304: i1;
  var $p305: ref;
  var $p306: ref;
  var $i307: i32;
  var $i308: i1;
  var $p309: ref;
  var $p310: ref;
  var $i311: i32;
  var $i312: i1;
  var $i313: i32;
  var $i314: i1;
  var $i315: i32;
  var $i316: i1;
  var $i317: i16;
  var $i318: i32;
  var $i319: i16;
  var $i320: i32;
  var $i321: i1;
  var $i322: i16;
  var $i323: i32;
  var $i324: i16;
  var $i325: i32;
  var $i326: i1;
  var $i328: i32;
  var $i329: i1;
  var $i331: i32;
  var $i332: i1;
  var $p333: ref;
  var $i335: i32;
  var $i336: i1;
  var $p337: ref;
  var $i339: i32;
  var $i340: i1;
  var $p341: ref;
  var $i343: i32;
  var $i344: i1;
  var $p345: ref;
  var $i347: i32;
  var $i348: i1;
  var $i349: i32;
  var $i350: i1;
  var $i351: i32;
  var $i352: i1;
  var $p353: ref;
  var $i355: i32;
  var $i356: i1;
  var $p357: ref;
  var $i359: i32;
  var $i360: i1;
  var $i362: i32;
  var $i363: i32;
  var vslice_dummy_var_112: i32;
  var vslice_dummy_var_113: i32;
  var vslice_dummy_var_114: i32;
  var vslice_dummy_var_115: i32;
  var vslice_dummy_var_116: i32;
  var vslice_dummy_var_117: i32;
  var vslice_dummy_var_118: i32;
  var vslice_dummy_var_119: i32;
  var vslice_dummy_var_120: ref;
  var vslice_dummy_var_121: ref;
  var vslice_dummy_var_122: i32;
  var vslice_dummy_var_123: i32;
  var vslice_dummy_var_124: i32;
  var vslice_dummy_var_125: i32;
  var vslice_dummy_var_126: i32;
  var vslice_dummy_var_127: i32;
  var vslice_dummy_var_128: i32;
  var vslice_dummy_var_129: i32;
  var vslice_dummy_var_130: i32;
  var vslice_dummy_var_131: i32;
  var vslice_dummy_var_132: i32;
  var vslice_dummy_var_133: i32;
  var vslice_dummy_var_134: i32;
  var vslice_dummy_var_135: i32;
  var vslice_dummy_var_136: i64;
  var vslice_dummy_var_137: i64;
  var vslice_dummy_var_138: i32;
  var vslice_dummy_var_139: i32;
  var vslice_dummy_var_140: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7351;

  corral_source_split_7351:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1589} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1590} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1591} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 21);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 31);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i0, 36);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 39);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i0, 40);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i0, 41);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i0, 41);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb336;

  $bb336:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    return;

  $bb14:
    assume $i7 == 1;
    goto corral_source_split_7361;

  corral_source_split_7361:
    assume {:verifier.code 0} true;
    $i359 := $M.47;
    goto corral_source_split_7362;

  corral_source_split_7362:
    assume {:verifier.code 0} true;
    $i360 := $eq.i32($i359, 1);
    goto corral_source_split_7363;

  corral_source_split_7363:
    assume {:verifier.code 0} true;
    assume {:branchcond $i360} true;
    goto $bb333, $bb334;

  $bb334:
    assume !($i360 == 1);
    assume {:verifier.code 0} true;
    goto $bb335;

  $bb335:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb333:
    assume $i360 == 1;
    goto corral_source_split_8091;

  corral_source_split_8091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1755} vslice_dummy_var_140 := ldv_xpc_arch_ops_uv_probe_1();
    goto corral_source_split_8092;

  corral_source_split_8092:
    assume {:verifier.code 0} true;
    $M.47 := 2;
    call {:si_unique_call 1756} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_8093;

  corral_source_split_8093:
    assume {:verifier.code 0} true;
    $i362 := $M.48;
    goto corral_source_split_8094;

  corral_source_split_8094:
    assume {:verifier.code 0} true;
    $i363 := $add.i32($i362, 1);
    goto corral_source_split_8095;

  corral_source_split_8095:
    assume {:verifier.code 0} true;
    $M.48 := $i363;
    call {:si_unique_call 1757} {:cexpr "ref_cnt"} boogie_si_record_i32($i363);
    goto corral_source_split_8096;

  corral_source_split_8096:
    assume {:verifier.code 0} true;
    goto $bb335;

  $bb12:
    assume $i6 == 1;
    goto corral_source_split_7357;

  corral_source_split_7357:
    assume {:verifier.code 0} true;
    $i351 := $M.47;
    goto corral_source_split_7358;

  corral_source_split_7358:
    assume {:verifier.code 0} true;
    $i352 := $eq.i32($i351, 1);
    goto corral_source_split_7359;

  corral_source_split_7359:
    assume {:verifier.code 0} true;
    assume {:branchcond $i352} true;
    goto $bb327, $bb328;

  $bb328:
    assume !($i352 == 1);
    assume {:verifier.code 0} true;
    goto $bb329;

  $bb329:
    assume {:verifier.code 0} true;
    $i355 := $M.47;
    goto corral_source_split_8083;

  corral_source_split_8083:
    assume {:verifier.code 0} true;
    $i356 := $eq.i32($i355, 2);
    goto corral_source_split_8084;

  corral_source_split_8084:
    assume {:verifier.code 0} true;
    assume {:branchcond $i356} true;
    goto $bb330, $bb331;

  $bb331:
    assume !($i356 == 1);
    assume {:verifier.code 0} true;
    goto $bb332;

  $bb332:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb330:
    assume $i356 == 1;
    goto corral_source_split_8086;

  corral_source_split_8086:
    assume {:verifier.code 0} true;
    $p357 := $M.78;
    goto corral_source_split_8087;

  corral_source_split_8087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1753} vslice_dummy_var_139 := xpc_setup_rsvd_page_uv($p357);
    goto corral_source_split_8088;

  corral_source_split_8088:
    assume {:verifier.code 0} true;
    $M.47 := 2;
    call {:si_unique_call 1754} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_8089;

  corral_source_split_8089:
    assume {:verifier.code 0} true;
    goto $bb332;

  $bb327:
    assume $i352 == 1;
    goto corral_source_split_8078;

  corral_source_split_8078:
    assume {:verifier.code 0} true;
    $p353 := $M.78;
    goto corral_source_split_8079;

  corral_source_split_8079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1751} vslice_dummy_var_138 := xpc_setup_rsvd_page_uv($p353);
    goto corral_source_split_8080;

  corral_source_split_8080:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 1752} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_8081;

  corral_source_split_8081:
    assume {:verifier.code 0} true;
    goto $bb329;

  $bb10:
    assume $i5 == 1;
    goto corral_source_split_7353;

  corral_source_split_7353:
    assume {:verifier.code 0} true;
    $i347 := $M.47;
    goto corral_source_split_7354;

  corral_source_split_7354:
    assume {:verifier.code 0} true;
    $i348 := $eq.i32($i347, 1);
    goto corral_source_split_7355;

  corral_source_split_7355:
    assume {:verifier.code 0} true;
    assume {:branchcond $i348} true;
    goto $bb321, $bb322;

  $bb322:
    assume !($i348 == 1);
    assume {:verifier.code 0} true;
    goto $bb323;

  $bb323:
    assume {:verifier.code 0} true;
    $i349 := $M.47;
    goto corral_source_split_8071;

  corral_source_split_8071:
    assume {:verifier.code 0} true;
    $i350 := $eq.i32($i349, 2);
    goto corral_source_split_8072;

  corral_source_split_8072:
    assume {:verifier.code 0} true;
    assume {:branchcond $i350} true;
    goto $bb324, $bb325;

  $bb325:
    assume !($i350 == 1);
    assume {:verifier.code 0} true;
    goto $bb326;

  $bb326:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb324:
    assume $i350 == 1;
    goto corral_source_split_8074;

  corral_source_split_8074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1749} xpc_heartbeat_exit_uv();
    goto corral_source_split_8075;

  corral_source_split_8075:
    assume {:verifier.code 0} true;
    $M.47 := 2;
    call {:si_unique_call 1750} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_8076;

  corral_source_split_8076:
    assume {:verifier.code 0} true;
    goto $bb326;

  $bb321:
    assume $i348 == 1;
    goto corral_source_split_8067;

  corral_source_split_8067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1747} xpc_heartbeat_exit_uv();
    goto corral_source_split_8068;

  corral_source_split_8068:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 1748} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_8069;

  corral_source_split_8069:
    assume {:verifier.code 0} true;
    goto $bb323;

  $bb8:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i0, 37);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i0, 38);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i9 == 1);
    goto corral_source_split_7373;

  corral_source_split_7373:
    assume {:verifier.code 0} true;
    $i339 := $M.47;
    goto corral_source_split_7374;

  corral_source_split_7374:
    assume {:verifier.code 0} true;
    $i340 := $eq.i32($i339, 1);
    goto corral_source_split_7375;

  corral_source_split_7375:
    assume {:verifier.code 0} true;
    assume {:branchcond $i340} true;
    goto $bb315, $bb316;

  $bb316:
    assume !($i340 == 1);
    assume {:verifier.code 0} true;
    goto $bb317;

  $bb317:
    assume {:verifier.code 0} true;
    $i343 := $M.47;
    goto corral_source_split_8059;

  corral_source_split_8059:
    assume {:verifier.code 0} true;
    $i344 := $eq.i32($i343, 2);
    goto corral_source_split_8060;

  corral_source_split_8060:
    assume {:verifier.code 0} true;
    assume {:branchcond $i344} true;
    goto $bb318, $bb319;

  $bb319:
    assume !($i344 == 1);
    assume {:verifier.code 0} true;
    goto $bb320;

  $bb320:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb318:
    assume $i344 == 1;
    goto corral_source_split_8062;

  corral_source_split_8062:
    assume {:verifier.code 0} true;
    $p345 := $M.62;
    goto corral_source_split_8063;

  corral_source_split_8063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1745} vslice_dummy_var_137 := xpc_get_chctl_all_flags_uv($p345);
    goto corral_source_split_8064;

  corral_source_split_8064:
    assume {:verifier.code 0} true;
    $M.47 := 2;
    call {:si_unique_call 1746} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_8065;

  corral_source_split_8065:
    assume {:verifier.code 0} true;
    goto $bb320;

  $bb315:
    assume $i340 == 1;
    goto corral_source_split_8054;

  corral_source_split_8054:
    assume {:verifier.code 0} true;
    $p341 := $M.62;
    goto corral_source_split_8055;

  corral_source_split_8055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1743} vslice_dummy_var_136 := xpc_get_chctl_all_flags_uv($p341);
    goto corral_source_split_8056;

  corral_source_split_8056:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 1744} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_8057;

  corral_source_split_8057:
    assume {:verifier.code 0} true;
    goto $bb317;

  $bb19:
    assume $i9 == 1;
    goto corral_source_split_7369;

  corral_source_split_7369:
    assume {:verifier.code 0} true;
    $i331 := $M.47;
    goto corral_source_split_7370;

  corral_source_split_7370:
    assume {:verifier.code 0} true;
    $i332 := $eq.i32($i331, 1);
    goto corral_source_split_7371;

  corral_source_split_7371:
    assume {:verifier.code 0} true;
    assume {:branchcond $i332} true;
    goto $bb309, $bb310;

  $bb310:
    assume !($i332 == 1);
    assume {:verifier.code 0} true;
    goto $bb311;

  $bb311:
    assume {:verifier.code 0} true;
    $i335 := $M.47;
    goto corral_source_split_8046;

  corral_source_split_8046:
    assume {:verifier.code 0} true;
    $i336 := $eq.i32($i335, 2);
    goto corral_source_split_8047;

  corral_source_split_8047:
    assume {:verifier.code 0} true;
    assume {:branchcond $i336} true;
    goto $bb312, $bb313;

  $bb313:
    assume !($i336 == 1);
    assume {:verifier.code 0} true;
    goto $bb314;

  $bb314:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb312:
    assume $i336 == 1;
    goto corral_source_split_8049;

  corral_source_split_8049:
    assume {:verifier.code 0} true;
    $p337 := $M.63;
    goto corral_source_split_8050;

  corral_source_split_8050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1741} vslice_dummy_var_135 := xpc_n_of_deliverable_payloads_uv($p337);
    goto corral_source_split_8051;

  corral_source_split_8051:
    assume {:verifier.code 0} true;
    $M.47 := 2;
    call {:si_unique_call 1742} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_8052;

  corral_source_split_8052:
    assume {:verifier.code 0} true;
    goto $bb314;

  $bb309:
    assume $i332 == 1;
    goto corral_source_split_8041;

  corral_source_split_8041:
    assume {:verifier.code 0} true;
    $p333 := $M.63;
    goto corral_source_split_8042;

  corral_source_split_8042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1739} vslice_dummy_var_134 := xpc_n_of_deliverable_payloads_uv($p333);
    goto corral_source_split_8043;

  corral_source_split_8043:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 1740} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_8044;

  corral_source_split_8044:
    assume {:verifier.code 0} true;
    goto $bb311;

  $bb17:
    assume $i8 == 1;
    goto corral_source_split_7365;

  corral_source_split_7365:
    assume {:verifier.code 0} true;
    $i325 := $M.47;
    goto corral_source_split_7366;

  corral_source_split_7366:
    assume {:verifier.code 0} true;
    $i326 := $eq.i32($i325, 1);
    goto corral_source_split_7367;

  corral_source_split_7367:
    assume {:verifier.code 0} true;
    assume {:branchcond $i326} true;
    goto $bb303, $bb304;

  $bb304:
    assume !($i326 == 1);
    assume {:verifier.code 0} true;
    goto $bb305;

  $bb305:
    assume {:verifier.code 0} true;
    $i328 := $M.47;
    goto corral_source_split_8034;

  corral_source_split_8034:
    assume {:verifier.code 0} true;
    $i329 := $eq.i32($i328, 2);
    goto corral_source_split_8035;

  corral_source_split_8035:
    assume {:verifier.code 0} true;
    assume {:branchcond $i329} true;
    goto $bb306, $bb307;

  $bb307:
    assume !($i329 == 1);
    assume {:verifier.code 0} true;
    goto $bb308;

  $bb308:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb306:
    assume $i329 == 1;
    goto corral_source_split_8037;

  corral_source_split_8037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1737} vslice_dummy_var_133 := xpc_setup_partitions_uv();
    goto corral_source_split_8038;

  corral_source_split_8038:
    assume {:verifier.code 0} true;
    $M.47 := 2;
    call {:si_unique_call 1738} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_8039;

  corral_source_split_8039:
    assume {:verifier.code 0} true;
    goto $bb308;

  $bb303:
    assume $i326 == 1;
    goto corral_source_split_8030;

  corral_source_split_8030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1735} vslice_dummy_var_132 := xpc_setup_partitions_uv();
    goto corral_source_split_8031;

  corral_source_split_8031:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 1736} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_8032;

  corral_source_split_8032:
    assume {:verifier.code 0} true;
    goto $bb305;

  $bb6:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i0, 33);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i0, 34);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i0, 35);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i12 == 1);
    goto corral_source_split_7385;

  corral_source_split_7385:
    assume {:verifier.code 0} true;
    $i315 := $M.47;
    goto corral_source_split_7386;

  corral_source_split_7386:
    assume {:verifier.code 0} true;
    $i316 := $eq.i32($i315, 1);
    goto corral_source_split_7387;

  corral_source_split_7387:
    assume {:verifier.code 0} true;
    assume {:branchcond $i316} true;
    goto $bb297, $bb298;

  $bb298:
    assume !($i316 == 1);
    assume {:verifier.code 0} true;
    goto $bb299;

  $bb299:
    assume {:verifier.code 0} true;
    $i320 := $M.47;
    goto corral_source_split_8020;

  corral_source_split_8020:
    assume {:verifier.code 0} true;
    $i321 := $eq.i32($i320, 2);
    goto corral_source_split_8021;

  corral_source_split_8021:
    assume {:verifier.code 0} true;
    assume {:branchcond $i321} true;
    goto $bb300, $bb301;

  $bb301:
    assume !($i321 == 1);
    assume {:verifier.code 0} true;
    goto $bb302;

  $bb302:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb300:
    assume $i321 == 1;
    goto corral_source_split_8023;

  corral_source_split_8023:
    assume {:verifier.code 0} true;
    $i322 := $M.89;
    goto corral_source_split_8024;

  corral_source_split_8024:
    assume {:verifier.code 0} true;
    $i323 := $sext.i16.i32($i322);
    goto corral_source_split_8025;

  corral_source_split_8025:
    assume {:verifier.code 0} true;
    $i324 := $trunc.i32.i16($i323);
    goto corral_source_split_8026;

  corral_source_split_8026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1733} xpc_allow_hb_uv($i324);
    goto corral_source_split_8027;

  corral_source_split_8027:
    assume {:verifier.code 0} true;
    $M.47 := 2;
    call {:si_unique_call 1734} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_8028;

  corral_source_split_8028:
    assume {:verifier.code 0} true;
    goto $bb302;

  $bb297:
    assume $i316 == 1;
    goto corral_source_split_8013;

  corral_source_split_8013:
    assume {:verifier.code 0} true;
    $i317 := $M.89;
    goto corral_source_split_8014;

  corral_source_split_8014:
    assume {:verifier.code 0} true;
    $i318 := $sext.i16.i32($i317);
    goto corral_source_split_8015;

  corral_source_split_8015:
    assume {:verifier.code 0} true;
    $i319 := $trunc.i32.i16($i318);
    goto corral_source_split_8016;

  corral_source_split_8016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1731} xpc_allow_hb_uv($i319);
    goto corral_source_split_8017;

  corral_source_split_8017:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 1732} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_8018;

  corral_source_split_8018:
    assume {:verifier.code 0} true;
    goto $bb299;

  $bb25:
    assume $i12 == 1;
    goto corral_source_split_7381;

  corral_source_split_7381:
    assume {:verifier.code 0} true;
    $i311 := $M.47;
    goto corral_source_split_7382;

  corral_source_split_7382:
    assume {:verifier.code 0} true;
    $i312 := $eq.i32($i311, 1);
    goto corral_source_split_7383;

  corral_source_split_7383:
    assume {:verifier.code 0} true;
    assume {:branchcond $i312} true;
    goto $bb291, $bb292;

  $bb292:
    assume !($i312 == 1);
    assume {:verifier.code 0} true;
    goto $bb293;

  $bb293:
    assume {:verifier.code 0} true;
    $i313 := $M.47;
    goto corral_source_split_8006;

  corral_source_split_8006:
    assume {:verifier.code 0} true;
    $i314 := $eq.i32($i313, 2);
    goto corral_source_split_8007;

  corral_source_split_8007:
    assume {:verifier.code 0} true;
    assume {:branchcond $i314} true;
    goto $bb294, $bb295;

  $bb295:
    assume !($i314 == 1);
    assume {:verifier.code 0} true;
    goto $bb296;

  $bb296:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb294:
    assume $i314 == 1;
    goto corral_source_split_8009;

  corral_source_split_8009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1729} xpc_teardown_partitions_uv();
    goto SeqInstr_736, SeqInstr_737;

  SeqInstr_737:
    assume assertsPassed;
    goto SeqInstr_738;

  SeqInstr_738:
    goto corral_source_split_8010;

  corral_source_split_8010:
    assume {:verifier.code 0} true;
    $M.47 := 2;
    call {:si_unique_call 1730} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_8011;

  corral_source_split_8011:
    assume {:verifier.code 0} true;
    goto $bb296;

  SeqInstr_736:
    assume !assertsPassed;
    return;

  $bb291:
    assume $i312 == 1;
    goto corral_source_split_8002;

  corral_source_split_8002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1727} xpc_teardown_partitions_uv();
    goto SeqInstr_733, SeqInstr_734;

  SeqInstr_734:
    assume assertsPassed;
    goto SeqInstr_735;

  SeqInstr_735:
    goto corral_source_split_8003;

  corral_source_split_8003:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 1728} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_8004;

  corral_source_split_8004:
    assume {:verifier.code 0} true;
    goto $bb293;

  SeqInstr_733:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i11 == 1;
    goto corral_source_split_7377;

  corral_source_split_7377:
    assume {:verifier.code 0} true;
    $i303 := $M.47;
    goto corral_source_split_7378;

  corral_source_split_7378:
    assume {:verifier.code 0} true;
    $i304 := $eq.i32($i303, 1);
    goto corral_source_split_7379;

  corral_source_split_7379:
    assume {:verifier.code 0} true;
    assume {:branchcond $i304} true;
    goto $bb285, $bb286;

  $bb286:
    assume !($i304 == 1);
    assume {:verifier.code 0} true;
    goto $bb287;

  $bb287:
    assume {:verifier.code 0} true;
    $i307 := $M.47;
    goto corral_source_split_7993;

  corral_source_split_7993:
    assume {:verifier.code 0} true;
    $i308 := $eq.i32($i307, 2);
    goto corral_source_split_7994;

  corral_source_split_7994:
    assume {:verifier.code 0} true;
    assume {:branchcond $i308} true;
    goto $bb288, $bb289;

  $bb289:
    assume !($i308 == 1);
    assume {:verifier.code 0} true;
    goto $bb290;

  $bb290:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb288:
    assume $i308 == 1;
    goto corral_source_split_7996;

  corral_source_split_7996:
    assume {:verifier.code 0} true;
    $p309 := $M.63;
    goto corral_source_split_7997;

  corral_source_split_7997:
    assume {:verifier.code 0} true;
    $p310 := $M.88;
    goto corral_source_split_7998;

  corral_source_split_7998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1725} xpc_send_chctl_openreply_uv($p309, $p310);
    goto SeqInstr_730, SeqInstr_731;

  SeqInstr_731:
    assume assertsPassed;
    goto SeqInstr_732;

  SeqInstr_732:
    goto corral_source_split_7999;

  corral_source_split_7999:
    assume {:verifier.code 0} true;
    $M.47 := 2;
    call {:si_unique_call 1726} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_8000;

  corral_source_split_8000:
    assume {:verifier.code 0} true;
    goto $bb290;

  SeqInstr_730:
    assume !assertsPassed;
    return;

  $bb285:
    assume $i304 == 1;
    goto corral_source_split_7987;

  corral_source_split_7987:
    assume {:verifier.code 0} true;
    $p305 := $M.63;
    goto corral_source_split_7988;

  corral_source_split_7988:
    assume {:verifier.code 0} true;
    $p306 := $M.88;
    goto corral_source_split_7989;

  corral_source_split_7989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1723} xpc_send_chctl_openreply_uv($p305, $p306);
    goto SeqInstr_727, SeqInstr_728;

  SeqInstr_728:
    assume assertsPassed;
    goto SeqInstr_729;

  SeqInstr_729:
    goto corral_source_split_7990;

  corral_source_split_7990:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 1724} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_7991;

  corral_source_split_7991:
    assume {:verifier.code 0} true;
    goto $bb287;

  SeqInstr_727:
    assume !assertsPassed;
    return;

  $bb21:
    assume $i10 == 1;
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i0, 32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i13 == 1);
    goto corral_source_split_7393;

  corral_source_split_7393:
    assume {:verifier.code 0} true;
    $i299 := $M.47;
    goto corral_source_split_7394;

  corral_source_split_7394:
    assume {:verifier.code 0} true;
    $i300 := $eq.i32($i299, 1);
    goto corral_source_split_7395;

  corral_source_split_7395:
    assume {:verifier.code 0} true;
    assume {:branchcond $i300} true;
    goto $bb279, $bb280;

  $bb280:
    assume !($i300 == 1);
    assume {:verifier.code 0} true;
    goto $bb281;

  $bb281:
    assume {:verifier.code 0} true;
    $i301 := $M.47;
    goto corral_source_split_7980;

  corral_source_split_7980:
    assume {:verifier.code 0} true;
    $i302 := $eq.i32($i301, 2);
    goto corral_source_split_7981;

  corral_source_split_7981:
    assume {:verifier.code 0} true;
    assume {:branchcond $i302} true;
    goto $bb282, $bb283;

  $bb283:
    assume !($i302 == 1);
    assume {:verifier.code 0} true;
    goto $bb284;

  $bb284:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb282:
    assume $i302 == 1;
    goto corral_source_split_7983;

  corral_source_split_7983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1721} xpc_process_activate_IRQ_rcvd_uv();
    goto SeqInstr_724, SeqInstr_725;

  SeqInstr_725:
    assume assertsPassed;
    goto SeqInstr_726;

  SeqInstr_726:
    goto corral_source_split_7984;

  corral_source_split_7984:
    assume {:verifier.code 0} true;
    $M.47 := 2;
    call {:si_unique_call 1722} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_7985;

  corral_source_split_7985:
    assume {:verifier.code 0} true;
    goto $bb284;

  SeqInstr_724:
    assume !assertsPassed;
    return;

  $bb279:
    assume $i300 == 1;
    goto corral_source_split_7976;

  corral_source_split_7976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1719} xpc_process_activate_IRQ_rcvd_uv();
    goto SeqInstr_721, SeqInstr_722;

  SeqInstr_722:
    assume assertsPassed;
    goto SeqInstr_723;

  SeqInstr_723:
    goto corral_source_split_7977;

  corral_source_split_7977:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 1720} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_7978;

  corral_source_split_7978:
    assume {:verifier.code 0} true;
    goto $bb281;

  SeqInstr_721:
    assume !assertsPassed;
    return;

  $bb27:
    assume $i13 == 1;
    goto corral_source_split_7389;

  corral_source_split_7389:
    assume {:verifier.code 0} true;
    $i293 := $M.47;
    goto corral_source_split_7390;

  corral_source_split_7390:
    assume {:verifier.code 0} true;
    $i294 := $eq.i32($i293, 1);
    goto corral_source_split_7391;

  corral_source_split_7391:
    assume {:verifier.code 0} true;
    assume {:branchcond $i294} true;
    goto $bb273, $bb274;

  $bb274:
    assume !($i294 == 1);
    assume {:verifier.code 0} true;
    goto $bb275;

  $bb275:
    assume {:verifier.code 0} true;
    $i296 := $M.47;
    goto corral_source_split_7968;

  corral_source_split_7968:
    assume {:verifier.code 0} true;
    $i297 := $eq.i32($i296, 2);
    goto corral_source_split_7969;

  corral_source_split_7969:
    assume {:verifier.code 0} true;
    assume {:branchcond $i297} true;
    goto $bb276, $bb277;

  $bb277:
    assume !($i297 == 1);
    assume {:verifier.code 0} true;
    goto $bb278;

  $bb278:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb276:
    assume $i297 == 1;
    goto corral_source_split_7971;

  corral_source_split_7971:
    assume {:verifier.code 0} true;
    $p298 := $M.62;
    goto corral_source_split_7972;

  corral_source_split_7972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1717} xpc_indicate_partition_disengaged_uv($p298);
    goto SeqInstr_718, SeqInstr_719;

  SeqInstr_719:
    assume assertsPassed;
    goto SeqInstr_720;

  SeqInstr_720:
    goto corral_source_split_7973;

  corral_source_split_7973:
    assume {:verifier.code 0} true;
    $M.47 := 2;
    call {:si_unique_call 1718} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_7974;

  corral_source_split_7974:
    assume {:verifier.code 0} true;
    goto $bb278;

  SeqInstr_718:
    assume !assertsPassed;
    return;

  $bb273:
    assume $i294 == 1;
    goto corral_source_split_7963;

  corral_source_split_7963:
    assume {:verifier.code 0} true;
    $p295 := $M.62;
    goto corral_source_split_7964;

  corral_source_split_7964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1715} xpc_indicate_partition_disengaged_uv($p295);
    goto SeqInstr_715, SeqInstr_716;

  SeqInstr_716:
    assume assertsPassed;
    goto SeqInstr_717;

  SeqInstr_717:
    goto corral_source_split_7965;

  corral_source_split_7965:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 1716} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_7966;

  corral_source_split_7966:
    assume {:verifier.code 0} true;
    goto $bb275;

  SeqInstr_715:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i2 == 1;
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i0, 26);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i0, 28);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i0, 29);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i0, 30);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i17 == 1);
    goto corral_source_split_7405;

  corral_source_split_7405:
    assume {:verifier.code 0} true;
    $i289 := $M.47;
    goto corral_source_split_7406;

  corral_source_split_7406:
    assume {:verifier.code 0} true;
    $i290 := $eq.i32($i289, 1);
    goto corral_source_split_7407;

  corral_source_split_7407:
    assume {:verifier.code 0} true;
    assume {:branchcond $i290} true;
    goto $bb267, $bb268;

  $bb268:
    assume !($i290 == 1);
    assume {:verifier.code 0} true;
    goto $bb269;

  $bb269:
    assume {:verifier.code 0} true;
    $i291 := $M.47;
    goto corral_source_split_7956;

  corral_source_split_7956:
    assume {:verifier.code 0} true;
    $i292 := $eq.i32($i291, 2);
    goto corral_source_split_7957;

  corral_source_split_7957:
    assume {:verifier.code 0} true;
    assume {:branchcond $i292} true;
    goto $bb270, $bb271;

  $bb271:
    assume !($i292 == 1);
    assume {:verifier.code 0} true;
    goto $bb272;

  $bb272:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb270:
    assume $i292 == 1;
    goto corral_source_split_7959;

  corral_source_split_7959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1713} xpc_online_heartbeat_uv();
    goto corral_source_split_7960;

  corral_source_split_7960:
    assume {:verifier.code 0} true;
    $M.47 := 2;
    call {:si_unique_call 1714} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_7961;

  corral_source_split_7961:
    assume {:verifier.code 0} true;
    goto $bb272;

  $bb267:
    assume $i290 == 1;
    goto corral_source_split_7952;

  corral_source_split_7952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1711} xpc_online_heartbeat_uv();
    goto corral_source_split_7953;

  corral_source_split_7953:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 1712} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_7954;

  corral_source_split_7954:
    assume {:verifier.code 0} true;
    goto $bb269;

  $bb35:
    assume $i17 == 1;
    goto corral_source_split_7401;

  corral_source_split_7401:
    assume {:verifier.code 0} true;
    $i281 := $M.47;
    goto corral_source_split_7402;

  corral_source_split_7402:
    assume {:verifier.code 0} true;
    $i282 := $eq.i32($i281, 1);
    goto corral_source_split_7403;

  corral_source_split_7403:
    assume {:verifier.code 0} true;
    assume {:branchcond $i282} true;
    goto $bb261, $bb262;

  $bb262:
    assume !($i282 == 1);
    assume {:verifier.code 0} true;
    goto $bb263;

  $bb263:
    assume {:verifier.code 0} true;
    $i285 := $M.47;
    goto corral_source_split_7943;

  corral_source_split_7943:
    assume {:verifier.code 0} true;
    $i286 := $eq.i32($i285, 2);
    goto corral_source_split_7944;

  corral_source_split_7944:
    assume {:verifier.code 0} true;
    assume {:branchcond $i286} true;
    goto $bb264, $bb265;

  $bb265:
    assume !($i286 == 1);
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb266:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb264:
    assume $i286 == 1;
    goto corral_source_split_7946;

  corral_source_split_7946:
    assume {:verifier.code 0} true;
    $p287 := $M.62;
    goto corral_source_split_7947;

  corral_source_split_7947:
    assume {:verifier.code 0} true;
    $i288 := $M.87;
    goto corral_source_split_7948;

  corral_source_split_7948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1709} xpc_process_msg_chctl_flags_uv($p287, $i288);
    goto SeqInstr_712, SeqInstr_713;

  SeqInstr_713:
    assume assertsPassed;
    goto SeqInstr_714;

  SeqInstr_714:
    goto corral_source_split_7949;

  corral_source_split_7949:
    assume {:verifier.code 0} true;
    $M.47 := 2;
    call {:si_unique_call 1710} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_7950;

  corral_source_split_7950:
    assume {:verifier.code 0} true;
    goto $bb266;

  SeqInstr_712:
    assume !assertsPassed;
    return;

  $bb261:
    assume $i282 == 1;
    goto corral_source_split_7937;

  corral_source_split_7937:
    assume {:verifier.code 0} true;
    $p283 := $M.62;
    goto corral_source_split_7938;

  corral_source_split_7938:
    assume {:verifier.code 0} true;
    $i284 := $M.87;
    goto corral_source_split_7939;

  corral_source_split_7939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1707} xpc_process_msg_chctl_flags_uv($p283, $i284);
    goto SeqInstr_709, SeqInstr_710;

  SeqInstr_710:
    assume assertsPassed;
    goto SeqInstr_711;

  SeqInstr_711:
    goto corral_source_split_7940;

  corral_source_split_7940:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 1708} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_7941;

  corral_source_split_7941:
    assume {:verifier.code 0} true;
    goto $bb263;

  SeqInstr_709:
    assume !assertsPassed;
    return;

  $bb33:
    assume $i16 == 1;
    goto corral_source_split_7397;

  corral_source_split_7397:
    assume {:verifier.code 0} true;
    $i273 := $M.47;
    goto corral_source_split_7398;

  corral_source_split_7398:
    assume {:verifier.code 0} true;
    $i274 := $eq.i32($i273, 1);
    goto corral_source_split_7399;

  corral_source_split_7399:
    assume {:verifier.code 0} true;
    assume {:branchcond $i274} true;
    goto $bb255, $bb256;

  $bb256:
    assume !($i274 == 1);
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb257:
    assume {:verifier.code 0} true;
    $i277 := $M.47;
    goto corral_source_split_7929;

  corral_source_split_7929:
    assume {:verifier.code 0} true;
    $i278 := $eq.i32($i277, 2);
    goto corral_source_split_7930;

  corral_source_split_7930:
    assume {:verifier.code 0} true;
    assume {:branchcond $i278} true;
    goto $bb258, $bb259;

  $bb259:
    assume !($i278 == 1);
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb260:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb258:
    assume $i278 == 1;
    goto corral_source_split_7932;

  corral_source_split_7932:
    assume {:verifier.code 0} true;
    $p279 := $M.62;
    goto corral_source_split_7933;

  corral_source_split_7933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1705} vslice_dummy_var_131 := xpc_get_remote_heartbeat_uv($p279);
    goto corral_source_split_7934;

  corral_source_split_7934:
    assume {:verifier.code 0} true;
    $M.47 := 2;
    call {:si_unique_call 1706} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_7935;

  corral_source_split_7935:
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb255:
    assume $i274 == 1;
    goto corral_source_split_7924;

  corral_source_split_7924:
    assume {:verifier.code 0} true;
    $p275 := $M.62;
    goto corral_source_split_7925;

  corral_source_split_7925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1703} vslice_dummy_var_130 := xpc_get_remote_heartbeat_uv($p275);
    goto corral_source_split_7926;

  corral_source_split_7926:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 1704} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_7927;

  corral_source_split_7927:
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb31:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i0, 27);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i18 == 1);
    goto corral_source_split_7413;

  corral_source_split_7413:
    assume {:verifier.code 0} true;
    $i265 := $M.47;
    goto corral_source_split_7414;

  corral_source_split_7414:
    assume {:verifier.code 0} true;
    $i266 := $eq.i32($i265, 1);
    goto corral_source_split_7415;

  corral_source_split_7415:
    assume {:verifier.code 0} true;
    assume {:branchcond $i266} true;
    goto $bb249, $bb250;

  $bb250:
    assume !($i266 == 1);
    assume {:verifier.code 0} true;
    goto $bb251;

  $bb251:
    assume {:verifier.code 0} true;
    $i269 := $M.47;
    goto corral_source_split_7916;

  corral_source_split_7916:
    assume {:verifier.code 0} true;
    $i270 := $eq.i32($i269, 2);
    goto corral_source_split_7917;

  corral_source_split_7917:
    assume {:verifier.code 0} true;
    assume {:branchcond $i270} true;
    goto $bb252, $bb253;

  $bb253:
    assume !($i270 == 1);
    assume {:verifier.code 0} true;
    goto $bb254;

  $bb254:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb252:
    assume $i270 == 1;
    goto corral_source_split_7919;

  corral_source_split_7919:
    assume {:verifier.code 0} true;
    $p271 := $M.62;
    goto corral_source_split_7920;

  corral_source_split_7920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1701} vslice_dummy_var_129 := xpc_make_first_contact_uv($p271);
    goto SeqInstr_706, SeqInstr_707;

  SeqInstr_707:
    assume assertsPassed;
    goto SeqInstr_708;

  SeqInstr_708:
    goto corral_source_split_7921;

  corral_source_split_7921:
    assume {:verifier.code 0} true;
    $M.47 := 2;
    call {:si_unique_call 1702} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_7922;

  corral_source_split_7922:
    assume {:verifier.code 0} true;
    goto $bb254;

  SeqInstr_706:
    assume !assertsPassed;
    return;

  $bb249:
    assume $i266 == 1;
    goto corral_source_split_7911;

  corral_source_split_7911:
    assume {:verifier.code 0} true;
    $p267 := $M.62;
    goto corral_source_split_7912;

  corral_source_split_7912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1699} vslice_dummy_var_128 := xpc_make_first_contact_uv($p267);
    goto SeqInstr_703, SeqInstr_704;

  SeqInstr_704:
    assume assertsPassed;
    goto SeqInstr_705;

  SeqInstr_705:
    goto corral_source_split_7913;

  corral_source_split_7913:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 1700} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_7914;

  corral_source_split_7914:
    assume {:verifier.code 0} true;
    goto $bb251;

  SeqInstr_703:
    assume !assertsPassed;
    return;

  $bb37:
    assume $i18 == 1;
    goto corral_source_split_7409;

  corral_source_split_7409:
    assume {:verifier.code 0} true;
    $i251 := $M.47;
    goto corral_source_split_7410;

  corral_source_split_7410:
    assume {:verifier.code 0} true;
    $i252 := $eq.i32($i251, 1);
    goto corral_source_split_7411;

  corral_source_split_7411:
    assume {:verifier.code 0} true;
    assume {:branchcond $i252} true;
    goto $bb243, $bb244;

  $bb244:
    assume !($i252 == 1);
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb245:
    assume {:verifier.code 0} true;
    $i258 := $M.47;
    goto corral_source_split_7900;

  corral_source_split_7900:
    assume {:verifier.code 0} true;
    $i259 := $eq.i32($i258, 2);
    goto corral_source_split_7901;

  corral_source_split_7901:
    assume {:verifier.code 0} true;
    assume {:branchcond $i259} true;
    goto $bb246, $bb247;

  $bb247:
    assume !($i259 == 1);
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb248:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb246:
    assume $i259 == 1;
    goto corral_source_split_7903;

  corral_source_split_7903:
    assume {:verifier.code 0} true;
    $p260 := $M.83;
    goto corral_source_split_7904;

  corral_source_split_7904:
    assume {:verifier.code 0} true;
    $p261 := $M.84;
    goto corral_source_split_7905;

  corral_source_split_7905:
    assume {:verifier.code 0} true;
    $p262 := $M.85;
    goto corral_source_split_7906;

  corral_source_split_7906:
    assume {:verifier.code 0} true;
    $p263 := $M.86;
    goto corral_source_split_7907;

  corral_source_split_7907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1697} vslice_dummy_var_127 := xpc_get_partition_rsvd_page_pa_uv($p260, $p261, $p262, $p263);
    goto corral_source_split_7908;

  corral_source_split_7908:
    assume {:verifier.code 0} true;
    $M.47 := 2;
    call {:si_unique_call 1698} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_7909;

  corral_source_split_7909:
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb243:
    assume $i252 == 1;
    goto corral_source_split_7892;

  corral_source_split_7892:
    assume {:verifier.code 0} true;
    $p253 := $M.83;
    goto corral_source_split_7893;

  corral_source_split_7893:
    assume {:verifier.code 0} true;
    $p254 := $M.84;
    goto corral_source_split_7894;

  corral_source_split_7894:
    assume {:verifier.code 0} true;
    $p255 := $M.85;
    goto corral_source_split_7895;

  corral_source_split_7895:
    assume {:verifier.code 0} true;
    $p256 := $M.86;
    goto corral_source_split_7896;

  corral_source_split_7896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1695} vslice_dummy_var_126 := xpc_get_partition_rsvd_page_pa_uv($p253, $p254, $p255, $p256);
    goto corral_source_split_7897;

  corral_source_split_7897:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 1696} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_7898;

  corral_source_split_7898:
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb29:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i0, 23);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i0, 24);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i0, 25);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i21 == 1);
    goto corral_source_split_7425;

  corral_source_split_7425:
    assume {:verifier.code 0} true;
    $i241 := $M.47;
    goto corral_source_split_7426;

  corral_source_split_7426:
    assume {:verifier.code 0} true;
    $i242 := $eq.i32($i241, 1);
    goto corral_source_split_7427;

  corral_source_split_7427:
    assume {:verifier.code 0} true;
    assume {:branchcond $i242} true;
    goto $bb237, $bb238;

  $bb238:
    assume !($i242 == 1);
    assume {:verifier.code 0} true;
    goto $bb239;

  $bb239:
    assume {:verifier.code 0} true;
    $i246 := $M.47;
    goto corral_source_split_7883;

  corral_source_split_7883:
    assume {:verifier.code 0} true;
    $i247 := $eq.i32($i246, 2);
    goto corral_source_split_7884;

  corral_source_split_7884:
    assume {:verifier.code 0} true;
    assume {:branchcond $i247} true;
    goto $bb240, $bb241;

  $bb241:
    assume !($i247 == 1);
    assume {:verifier.code 0} true;
    goto $bb242;

  $bb242:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb240:
    assume $i247 == 1;
    goto corral_source_split_7886;

  corral_source_split_7886:
    assume {:verifier.code 0} true;
    $p248 := $M.63;
    goto corral_source_split_7887;

  corral_source_split_7887:
    assume {:verifier.code 0} true;
    $i249 := $M.82;
    goto corral_source_split_7888;

  corral_source_split_7888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1693} vslice_dummy_var_125 := xpc_save_remote_msgqueue_pa_uv($p248, $i249);
    goto corral_source_split_7889;

  corral_source_split_7889:
    assume {:verifier.code 0} true;
    $M.47 := 2;
    call {:si_unique_call 1694} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_7890;

  corral_source_split_7890:
    assume {:verifier.code 0} true;
    goto $bb242;

  $bb237:
    assume $i242 == 1;
    goto corral_source_split_7877;

  corral_source_split_7877:
    assume {:verifier.code 0} true;
    $p243 := $M.63;
    goto corral_source_split_7878;

  corral_source_split_7878:
    assume {:verifier.code 0} true;
    $i244 := $M.82;
    goto corral_source_split_7879;

  corral_source_split_7879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1691} vslice_dummy_var_124 := xpc_save_remote_msgqueue_pa_uv($p243, $i244);
    goto corral_source_split_7880;

  corral_source_split_7880:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 1692} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_7881;

  corral_source_split_7881:
    assume {:verifier.code 0} true;
    goto $bb239;

  $bb43:
    assume $i21 == 1;
    goto corral_source_split_7421;

  corral_source_split_7421:
    assume {:verifier.code 0} true;
    $i235 := $M.47;
    goto corral_source_split_7422;

  corral_source_split_7422:
    assume {:verifier.code 0} true;
    $i236 := $eq.i32($i235, 1);
    goto corral_source_split_7423;

  corral_source_split_7423:
    assume {:verifier.code 0} true;
    assume {:branchcond $i236} true;
    goto $bb231, $bb232;

  $bb232:
    assume !($i236 == 1);
    assume {:verifier.code 0} true;
    goto $bb233;

  $bb233:
    assume {:verifier.code 0} true;
    $i238 := $M.47;
    goto corral_source_split_7869;

  corral_source_split_7869:
    assume {:verifier.code 0} true;
    $i239 := $eq.i32($i238, 2);
    goto corral_source_split_7870;

  corral_source_split_7870:
    assume {:verifier.code 0} true;
    assume {:branchcond $i239} true;
    goto $bb234, $bb235;

  $bb235:
    assume !($i239 == 1);
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb236:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb234:
    assume $i239 == 1;
    goto corral_source_split_7872;

  corral_source_split_7872:
    assume {:verifier.code 0} true;
    $p240 := $M.63;
    goto corral_source_split_7873;

  corral_source_split_7873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1689} xpc_teardown_msg_structures_uv($p240);
    goto corral_source_split_7874;

  corral_source_split_7874:
    assume {:verifier.code 0} true;
    $M.47 := 2;
    call {:si_unique_call 1690} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_7875;

  corral_source_split_7875:
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb231:
    assume $i236 == 1;
    goto corral_source_split_7864;

  corral_source_split_7864:
    assume {:verifier.code 0} true;
    $p237 := $M.63;
    goto corral_source_split_7865;

  corral_source_split_7865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1687} xpc_teardown_msg_structures_uv($p237);
    goto corral_source_split_7866;

  corral_source_split_7866:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 1688} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_7867;

  corral_source_split_7867:
    assume {:verifier.code 0} true;
    goto $bb233;

  $bb41:
    assume $i20 == 1;
    goto corral_source_split_7417;

  corral_source_split_7417:
    assume {:verifier.code 0} true;
    $i231 := $M.47;
    goto corral_source_split_7418;

  corral_source_split_7418:
    assume {:verifier.code 0} true;
    $i232 := $eq.i32($i231, 1);
    goto corral_source_split_7419;

  corral_source_split_7419:
    assume {:verifier.code 0} true;
    assume {:branchcond $i232} true;
    goto $bb225, $bb226;

  $bb226:
    assume !($i232 == 1);
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb227:
    assume {:verifier.code 0} true;
    $i233 := $M.47;
    goto corral_source_split_7857;

  corral_source_split_7857:
    assume {:verifier.code 0} true;
    $i234 := $eq.i32($i233, 2);
    goto corral_source_split_7858;

  corral_source_split_7858:
    assume {:verifier.code 0} true;
    assume {:branchcond $i234} true;
    goto $bb228, $bb229;

  $bb229:
    assume !($i234 == 1);
    assume {:verifier.code 0} true;
    goto $bb230;

  $bb230:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb228:
    assume $i234 == 1;
    goto corral_source_split_7860;

  corral_source_split_7860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1685} xpc_heartbeat_init_uv();
    goto corral_source_split_7861;

  corral_source_split_7861:
    assume {:verifier.code 0} true;
    $M.47 := 2;
    call {:si_unique_call 1686} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_7862;

  corral_source_split_7862:
    assume {:verifier.code 0} true;
    goto $bb230;

  $bb225:
    assume $i232 == 1;
    goto corral_source_split_7853;

  corral_source_split_7853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1683} xpc_heartbeat_init_uv();
    goto corral_source_split_7854;

  corral_source_split_7854:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 1684} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_7855;

  corral_source_split_7855:
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb39:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i0, 22);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i22 == 1);
    goto corral_source_split_7433;

  corral_source_split_7433:
    assume {:verifier.code 0} true;
    $i227 := $M.47;
    goto corral_source_split_7434;

  corral_source_split_7434:
    assume {:verifier.code 0} true;
    $i228 := $eq.i32($i227, 1);
    goto corral_source_split_7435;

  corral_source_split_7435:
    assume {:verifier.code 0} true;
    assume {:branchcond $i228} true;
    goto $bb219, $bb220;

  $bb220:
    assume !($i228 == 1);
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb221:
    assume {:verifier.code 0} true;
    $i229 := $M.47;
    goto corral_source_split_7846;

  corral_source_split_7846:
    assume {:verifier.code 0} true;
    $i230 := $eq.i32($i229, 2);
    goto corral_source_split_7847;

  corral_source_split_7847:
    assume {:verifier.code 0} true;
    assume {:branchcond $i230} true;
    goto $bb222, $bb223;

  $bb223:
    assume !($i230 == 1);
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb224:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb222:
    assume $i230 == 1;
    goto corral_source_split_7849;

  corral_source_split_7849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1681} xpc_offline_heartbeat_uv();
    goto corral_source_split_7850;

  corral_source_split_7850:
    assume {:verifier.code 0} true;
    $M.47 := 2;
    call {:si_unique_call 1682} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_7851;

  corral_source_split_7851:
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb219:
    assume $i228 == 1;
    goto corral_source_split_7842;

  corral_source_split_7842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1679} xpc_offline_heartbeat_uv();
    goto corral_source_split_7843;

  corral_source_split_7843:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 1680} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_7844;

  corral_source_split_7844:
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb45:
    assume $i22 == 1;
    goto corral_source_split_7429;

  corral_source_split_7429:
    assume {:verifier.code 0} true;
    $i219 := $M.47;
    goto corral_source_split_7430;

  corral_source_split_7430:
    assume {:verifier.code 0} true;
    $i220 := $eq.i32($i219, 1);
    goto corral_source_split_7431;

  corral_source_split_7431:
    assume {:verifier.code 0} true;
    assume {:branchcond $i220} true;
    goto $bb213, $bb214;

  $bb214:
    assume !($i220 == 1);
    assume {:verifier.code 0} true;
    goto $bb215;

  $bb215:
    assume {:verifier.code 0} true;
    $i223 := $M.47;
    goto corral_source_split_7833;

  corral_source_split_7833:
    assume {:verifier.code 0} true;
    $i224 := $eq.i32($i223, 2);
    goto corral_source_split_7834;

  corral_source_split_7834:
    assume {:verifier.code 0} true;
    assume {:branchcond $i224} true;
    goto $bb216, $bb217;

  $bb217:
    assume !($i224 == 1);
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb218:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb216:
    assume $i224 == 1;
    goto corral_source_split_7836;

  corral_source_split_7836:
    assume {:verifier.code 0} true;
    $p225 := $M.63;
    goto corral_source_split_7837;

  corral_source_split_7837:
    assume {:verifier.code 0} true;
    $p226 := $M.81;
    goto corral_source_split_7838;

  corral_source_split_7838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1677} xpc_received_payload_uv($p225, $p226);
    goto SeqInstr_700, SeqInstr_701;

  SeqInstr_701:
    assume assertsPassed;
    goto SeqInstr_702;

  SeqInstr_702:
    goto corral_source_split_7839;

  corral_source_split_7839:
    assume {:verifier.code 0} true;
    $M.47 := 2;
    call {:si_unique_call 1678} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_7840;

  corral_source_split_7840:
    assume {:verifier.code 0} true;
    goto $bb218;

  SeqInstr_700:
    assume !assertsPassed;
    return;

  $bb213:
    assume $i220 == 1;
    goto corral_source_split_7827;

  corral_source_split_7827:
    assume {:verifier.code 0} true;
    $p221 := $M.63;
    goto corral_source_split_7828;

  corral_source_split_7828:
    assume {:verifier.code 0} true;
    $p222 := $M.81;
    goto corral_source_split_7829;

  corral_source_split_7829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1675} xpc_received_payload_uv($p221, $p222);
    goto SeqInstr_697, SeqInstr_698;

  SeqInstr_698:
    assume assertsPassed;
    goto SeqInstr_699;

  SeqInstr_699:
    goto corral_source_split_7830;

  corral_source_split_7830:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 1676} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_7831;

  corral_source_split_7831:
    assume {:verifier.code 0} true;
    goto $bb215;

  SeqInstr_697:
    assume !assertsPassed;
    return;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i0, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i0, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i0, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i26 := $slt.i32($i0, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    $i27 := $slt.i32($i0, 20);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i27 == 1);
    goto corral_source_split_7445;

  corral_source_split_7445:
    assume {:verifier.code 0} true;
    $i213 := $M.47;
    goto corral_source_split_7446;

  corral_source_split_7446:
    assume {:verifier.code 0} true;
    $i214 := $eq.i32($i213, 1);
    goto corral_source_split_7447;

  corral_source_split_7447:
    assume {:verifier.code 0} true;
    assume {:branchcond $i214} true;
    goto $bb207, $bb208;

  $bb208:
    assume !($i214 == 1);
    assume {:verifier.code 0} true;
    goto $bb209;

  $bb209:
    assume {:verifier.code 0} true;
    $i216 := $M.47;
    goto corral_source_split_7820;

  corral_source_split_7820:
    assume {:verifier.code 0} true;
    $i217 := $eq.i32($i216, 2);
    goto corral_source_split_7821;

  corral_source_split_7821:
    assume {:verifier.code 0} true;
    assume {:branchcond $i217} true;
    goto $bb210, $bb211;

  $bb211:
    assume !($i217 == 1);
    assume {:verifier.code 0} true;
    goto $bb212;

  $bb212:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb210:
    assume $i217 == 1;
    goto corral_source_split_7823;

  corral_source_split_7823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1673} vslice_dummy_var_123 := xpc_any_partition_engaged_uv();
    goto corral_source_split_7824;

  corral_source_split_7824:
    assume {:verifier.code 0} true;
    $M.47 := 2;
    call {:si_unique_call 1674} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_7825;

  corral_source_split_7825:
    assume {:verifier.code 0} true;
    goto $bb212;

  $bb207:
    assume $i214 == 1;
    goto corral_source_split_7816;

  corral_source_split_7816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1671} vslice_dummy_var_122 := xpc_any_partition_engaged_uv();
    goto corral_source_split_7817;

  corral_source_split_7817:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 1672} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_7818;

  corral_source_split_7818:
    assume {:verifier.code 0} true;
    goto $bb209;

  $bb55:
    assume $i27 == 1;
    goto corral_source_split_7441;

  corral_source_split_7441:
    assume {:verifier.code 0} true;
    $i207 := $M.47;
    goto corral_source_split_7442;

  corral_source_split_7442:
    assume {:verifier.code 0} true;
    $i208 := $eq.i32($i207, 1);
    goto corral_source_split_7443;

  corral_source_split_7443:
    assume {:verifier.code 0} true;
    assume {:branchcond $i208} true;
    goto $bb201, $bb202;

  $bb202:
    assume !($i208 == 1);
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb203:
    assume {:verifier.code 0} true;
    $i210 := $M.47;
    goto corral_source_split_7808;

  corral_source_split_7808:
    assume {:verifier.code 0} true;
    $i211 := $eq.i32($i210, 2);
    goto corral_source_split_7809;

  corral_source_split_7809:
    assume {:verifier.code 0} true;
    assume {:branchcond $i211} true;
    goto $bb204, $bb205;

  $bb205:
    assume !($i211 == 1);
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb206:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb204:
    assume $i211 == 1;
    goto corral_source_split_7811;

  corral_source_split_7811:
    assume {:verifier.code 0} true;
    $p212 := $M.62;
    goto corral_source_split_7812;

  corral_source_split_7812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1669} xpc_request_partition_reactivation_uv($p212);
    goto corral_source_split_7813;

  corral_source_split_7813:
    assume {:verifier.code 0} true;
    $M.47 := 2;
    call {:si_unique_call 1670} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_7814;

  corral_source_split_7814:
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb201:
    assume $i208 == 1;
    goto corral_source_split_7803;

  corral_source_split_7803:
    assume {:verifier.code 0} true;
    $p209 := $M.62;
    goto corral_source_split_7804;

  corral_source_split_7804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1667} xpc_request_partition_reactivation_uv($p209);
    goto corral_source_split_7805;

  corral_source_split_7805:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 1668} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_7806;

  corral_source_split_7806:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb53:
    assume $i26 == 1;
    goto corral_source_split_7437;

  corral_source_split_7437:
    assume {:verifier.code 0} true;
    $i201 := $M.47;
    goto corral_source_split_7438;

  corral_source_split_7438:
    assume {:verifier.code 0} true;
    $i202 := $eq.i32($i201, 1);
    goto corral_source_split_7439;

  corral_source_split_7439:
    assume {:verifier.code 0} true;
    assume {:branchcond $i202} true;
    goto $bb195, $bb196;

  $bb196:
    assume !($i202 == 1);
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb197:
    assume {:verifier.code 0} true;
    $i204 := $M.47;
    goto corral_source_split_7795;

  corral_source_split_7795:
    assume {:verifier.code 0} true;
    $i205 := $eq.i32($i204, 2);
    goto corral_source_split_7796;

  corral_source_split_7796:
    assume {:verifier.code 0} true;
    assume {:branchcond $i205} true;
    goto $bb198, $bb199;

  $bb199:
    assume !($i205 == 1);
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb200:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb198:
    assume $i205 == 1;
    goto corral_source_split_7798;

  corral_source_split_7798:
    assume {:verifier.code 0} true;
    $p206 := $M.62;
    goto corral_source_split_7799;

  corral_source_split_7799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1665} xpc_cancel_partition_deactivation_request_uv($p206);
    goto corral_source_split_7800;

  corral_source_split_7800:
    assume {:verifier.code 0} true;
    $M.47 := 2;
    call {:si_unique_call 1666} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_7801;

  corral_source_split_7801:
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb195:
    assume $i202 == 1;
    goto corral_source_split_7790;

  corral_source_split_7790:
    assume {:verifier.code 0} true;
    $p203 := $M.62;
    goto corral_source_split_7791;

  corral_source_split_7791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1663} xpc_cancel_partition_deactivation_request_uv($p203);
    goto corral_source_split_7792;

  corral_source_split_7792:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 1664} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_7793;

  corral_source_split_7793:
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb51:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    $i28 := $slt.i32($i0, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i0, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i29 == 1);
    goto corral_source_split_7457;

  corral_source_split_7457:
    assume {:verifier.code 0} true;
    $i191 := $M.47;
    goto corral_source_split_7458;

  corral_source_split_7458:
    assume {:verifier.code 0} true;
    $i192 := $eq.i32($i191, 1);
    goto corral_source_split_7459;

  corral_source_split_7459:
    assume {:verifier.code 0} true;
    assume {:branchcond $i192} true;
    goto $bb189, $bb190;

  $bb190:
    assume !($i192 == 1);
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb191:
    assume {:verifier.code 0} true;
    $i196 := $M.47;
    goto corral_source_split_7780;

  corral_source_split_7780:
    assume {:verifier.code 0} true;
    $i197 := $eq.i32($i196, 2);
    goto corral_source_split_7781;

  corral_source_split_7781:
    assume {:verifier.code 0} true;
    assume {:branchcond $i197} true;
    goto $bb192, $bb193;

  $bb193:
    assume !($i197 == 1);
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb194:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb192:
    assume $i197 == 1;
    goto corral_source_split_7783;

  corral_source_split_7783:
    assume {:verifier.code 0} true;
    $p198 := $M.78;
    goto corral_source_split_7784;

  corral_source_split_7784:
    assume {:verifier.code 0} true;
    $i199 := $M.79;
    goto corral_source_split_7785;

  corral_source_split_7785:
    assume {:verifier.code 0} true;
    $i200 := $M.80;
    goto corral_source_split_7786;

  corral_source_split_7786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1661} xpc_request_partition_activation_uv($p198, $i199, $i200);
    goto SeqInstr_694, SeqInstr_695;

  SeqInstr_695:
    assume assertsPassed;
    goto SeqInstr_696;

  SeqInstr_696:
    goto corral_source_split_7787;

  corral_source_split_7787:
    assume {:verifier.code 0} true;
    $M.47 := 2;
    call {:si_unique_call 1662} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_7788;

  corral_source_split_7788:
    assume {:verifier.code 0} true;
    goto $bb194;

  SeqInstr_694:
    assume !assertsPassed;
    return;

  $bb189:
    assume $i192 == 1;
    goto corral_source_split_7773;

  corral_source_split_7773:
    assume {:verifier.code 0} true;
    $p193 := $M.78;
    goto corral_source_split_7774;

  corral_source_split_7774:
    assume {:verifier.code 0} true;
    $i194 := $M.79;
    goto corral_source_split_7775;

  corral_source_split_7775:
    assume {:verifier.code 0} true;
    $i195 := $M.80;
    goto corral_source_split_7776;

  corral_source_split_7776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1659} xpc_request_partition_activation_uv($p193, $i194, $i195);
    goto SeqInstr_691, SeqInstr_692;

  SeqInstr_692:
    assume assertsPassed;
    goto SeqInstr_693;

  SeqInstr_693:
    goto corral_source_split_7777;

  corral_source_split_7777:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 1660} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_7778;

  corral_source_split_7778:
    assume {:verifier.code 0} true;
    goto $bb191;

  SeqInstr_691:
    assume !assertsPassed;
    return;

  $bb59:
    assume $i29 == 1;
    goto corral_source_split_7453;

  corral_source_split_7453:
    assume {:verifier.code 0} true;
    $i185 := $M.47;
    goto corral_source_split_7454;

  corral_source_split_7454:
    assume {:verifier.code 0} true;
    $i186 := $eq.i32($i185, 1);
    goto corral_source_split_7455;

  corral_source_split_7455:
    assume {:verifier.code 0} true;
    assume {:branchcond $i186} true;
    goto $bb183, $bb184;

  $bb184:
    assume !($i186 == 1);
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    $i188 := $M.47;
    goto corral_source_split_7765;

  corral_source_split_7765:
    assume {:verifier.code 0} true;
    $i189 := $eq.i32($i188, 2);
    goto corral_source_split_7766;

  corral_source_split_7766:
    assume {:verifier.code 0} true;
    assume {:branchcond $i189} true;
    goto $bb186, $bb187;

  $bb187:
    assume !($i189 == 1);
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb186:
    assume $i189 == 1;
    goto corral_source_split_7768;

  corral_source_split_7768:
    assume {:verifier.code 0} true;
    $p190 := $M.62;
    goto corral_source_split_7769;

  corral_source_split_7769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1657} xpc_teardown_ch_structures_uv($p190);
    goto corral_source_split_7770;

  corral_source_split_7770:
    assume {:verifier.code 0} true;
    $M.47 := 2;
    call {:si_unique_call 1658} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_7771;

  corral_source_split_7771:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb183:
    assume $i186 == 1;
    goto corral_source_split_7760;

  corral_source_split_7760:
    assume {:verifier.code 0} true;
    $p187 := $M.62;
    goto corral_source_split_7761;

  corral_source_split_7761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1655} xpc_teardown_ch_structures_uv($p187);
    goto corral_source_split_7762;

  corral_source_split_7762:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 1656} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_7763;

  corral_source_split_7763:
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb57:
    assume $i28 == 1;
    goto corral_source_split_7449;

  corral_source_split_7449:
    assume {:verifier.code 0} true;
    $i179 := $M.47;
    goto corral_source_split_7450;

  corral_source_split_7450:
    assume {:verifier.code 0} true;
    $i180 := $eq.i32($i179, 1);
    goto corral_source_split_7451;

  corral_source_split_7451:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb177, $bb178;

  $bb178:
    assume !($i180 == 1);
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb179:
    assume {:verifier.code 0} true;
    $i182 := $M.47;
    goto corral_source_split_7752;

  corral_source_split_7752:
    assume {:verifier.code 0} true;
    $i183 := $eq.i32($i182, 2);
    goto corral_source_split_7753;

  corral_source_split_7753:
    assume {:verifier.code 0} true;
    assume {:branchcond $i183} true;
    goto $bb180, $bb181;

  $bb181:
    assume !($i183 == 1);
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb182:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb180:
    assume $i183 == 1;
    goto corral_source_split_7755;

  corral_source_split_7755:
    assume {:verifier.code 0} true;
    $p184 := $M.62;
    goto corral_source_split_7756;

  corral_source_split_7756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1653} xpc_indicate_partition_engaged_uv($p184);
    goto SeqInstr_688, SeqInstr_689;

  SeqInstr_689:
    assume assertsPassed;
    goto SeqInstr_690;

  SeqInstr_690:
    goto corral_source_split_7757;

  corral_source_split_7757:
    assume {:verifier.code 0} true;
    $M.47 := 2;
    call {:si_unique_call 1654} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_7758;

  corral_source_split_7758:
    assume {:verifier.code 0} true;
    goto $bb182;

  SeqInstr_688:
    assume !assertsPassed;
    return;

  $bb177:
    assume $i180 == 1;
    goto corral_source_split_7747;

  corral_source_split_7747:
    assume {:verifier.code 0} true;
    $p181 := $M.62;
    goto corral_source_split_7748;

  corral_source_split_7748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1651} xpc_indicate_partition_engaged_uv($p181);
    goto SeqInstr_685, SeqInstr_686;

  SeqInstr_686:
    assume assertsPassed;
    goto SeqInstr_687;

  SeqInstr_687:
    goto corral_source_split_7749;

  corral_source_split_7749:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 1652} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_7750;

  corral_source_split_7750:
    assume {:verifier.code 0} true;
    goto $bb179;

  SeqInstr_685:
    assume !assertsPassed;
    return;

  $bb49:
    assume $i24 == 1;
    assume {:verifier.code 0} true;
    $i30 := $slt.i32($i0, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    $i31 := $slt.i32($i0, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    $i32 := $slt.i32($i0, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i32 == 1);
    goto corral_source_split_7469;

  corral_source_split_7469:
    assume {:verifier.code 0} true;
    $i173 := $M.47;
    goto corral_source_split_7470;

  corral_source_split_7470:
    assume {:verifier.code 0} true;
    $i174 := $eq.i32($i173, 1);
    goto corral_source_split_7471;

  corral_source_split_7471:
    assume {:verifier.code 0} true;
    assume {:branchcond $i174} true;
    goto $bb171, $bb172;

  $bb172:
    assume !($i174 == 1);
    assume {:verifier.code 0} true;
    goto $bb173;

  $bb173:
    assume {:verifier.code 0} true;
    $i176 := $M.47;
    goto corral_source_split_7739;

  corral_source_split_7739:
    assume {:verifier.code 0} true;
    $i177 := $eq.i32($i176, 2);
    goto corral_source_split_7740;

  corral_source_split_7740:
    assume {:verifier.code 0} true;
    assume {:branchcond $i177} true;
    goto $bb174, $bb175;

  $bb175:
    assume !($i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb176:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb174:
    assume $i177 == 1;
    goto corral_source_split_7742;

  corral_source_split_7742:
    assume {:verifier.code 0} true;
    $p178 := $M.62;
    goto corral_source_split_7743;

  corral_source_split_7743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1649} xpc_request_partition_deactivation_uv($p178);
    goto SeqInstr_682, SeqInstr_683;

  SeqInstr_683:
    assume assertsPassed;
    goto SeqInstr_684;

  SeqInstr_684:
    goto corral_source_split_7744;

  corral_source_split_7744:
    assume {:verifier.code 0} true;
    $M.47 := 2;
    call {:si_unique_call 1650} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_7745;

  corral_source_split_7745:
    assume {:verifier.code 0} true;
    goto $bb176;

  SeqInstr_682:
    assume !assertsPassed;
    return;

  $bb171:
    assume $i174 == 1;
    goto corral_source_split_7734;

  corral_source_split_7734:
    assume {:verifier.code 0} true;
    $p175 := $M.62;
    goto corral_source_split_7735;

  corral_source_split_7735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1647} xpc_request_partition_deactivation_uv($p175);
    goto SeqInstr_679, SeqInstr_680;

  SeqInstr_680:
    assume assertsPassed;
    goto SeqInstr_681;

  SeqInstr_681:
    goto corral_source_split_7736;

  corral_source_split_7736:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 1648} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_7737;

  corral_source_split_7737:
    assume {:verifier.code 0} true;
    goto $bb173;

  SeqInstr_679:
    assume !assertsPassed;
    return;

  $bb65:
    assume $i32 == 1;
    goto corral_source_split_7465;

  corral_source_split_7465:
    assume {:verifier.code 0} true;
    $i169 := $M.47;
    goto corral_source_split_7466;

  corral_source_split_7466:
    assume {:verifier.code 0} true;
    $i170 := $eq.i32($i169, 1);
    goto corral_source_split_7467;

  corral_source_split_7467:
    assume {:verifier.code 0} true;
    assume {:branchcond $i170} true;
    goto $bb165, $bb166;

  $bb166:
    assume !($i170 == 1);
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    $i171 := $M.47;
    goto corral_source_split_7727;

  corral_source_split_7727:
    assume {:verifier.code 0} true;
    $i172 := $eq.i32($i171, 2);
    goto corral_source_split_7728;

  corral_source_split_7728:
    assume {:verifier.code 0} true;
    assume {:branchcond $i172} true;
    goto $bb168, $bb169;

  $bb169:
    assume !($i172 == 1);
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb170:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb168:
    assume $i172 == 1;
    goto corral_source_split_7730;

  corral_source_split_7730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1645} xpc_disallow_all_hbs_uv();
    goto corral_source_split_7731;

  corral_source_split_7731:
    assume {:verifier.code 0} true;
    $M.47 := 2;
    call {:si_unique_call 1646} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_7732;

  corral_source_split_7732:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb165:
    assume $i170 == 1;
    goto corral_source_split_7723;

  corral_source_split_7723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1643} xpc_disallow_all_hbs_uv();
    goto corral_source_split_7724;

  corral_source_split_7724:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 1644} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_7725;

  corral_source_split_7725:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb63:
    assume $i31 == 1;
    goto corral_source_split_7461;

  corral_source_split_7461:
    assume {:verifier.code 0} true;
    $i164 := $M.47;
    goto corral_source_split_7462;

  corral_source_split_7462:
    assume {:verifier.code 0} true;
    $i165 := $eq.i32($i164, 2);
    goto corral_source_split_7463;

  corral_source_split_7463:
    assume {:verifier.code 0} true;
    assume {:branchcond $i165} true;
    goto $bb162, $bb163;

  $bb163:
    assume !($i165 == 1);
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb162:
    assume $i165 == 1;
    goto corral_source_split_7715;

  corral_source_split_7715:
    assume {:verifier.code 0} true;
    $p166 := $M.63;
    goto corral_source_split_7716;

  corral_source_split_7716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1640} xpc_notify_senders_of_disconnect_uv($p166);
    goto SeqInstr_676, SeqInstr_677;

  SeqInstr_677:
    assume assertsPassed;
    goto SeqInstr_678;

  SeqInstr_678:
    goto corral_source_split_7717;

  corral_source_split_7717:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 1641} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_7718;

  corral_source_split_7718:
    assume {:verifier.code 0} true;
    $i167 := $M.48;
    goto corral_source_split_7719;

  corral_source_split_7719:
    assume {:verifier.code 0} true;
    $i168 := $sub.i32($i167, 1);
    goto corral_source_split_7720;

  corral_source_split_7720:
    assume {:verifier.code 0} true;
    $M.48 := $i168;
    call {:si_unique_call 1642} {:cexpr "ref_cnt"} boogie_si_record_i32($i168);
    goto corral_source_split_7721;

  corral_source_split_7721:
    assume {:verifier.code 0} true;
    goto $bb164;

  SeqInstr_676:
    assume !assertsPassed;
    return;

  $bb61:
    assume $i30 == 1;
    assume {:verifier.code 0} true;
    $i33 := $slt.i32($i0, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i33 == 1);
    goto corral_source_split_7477;

  corral_source_split_7477:
    assume {:verifier.code 0} true;
    $i156 := $M.47;
    goto corral_source_split_7478;

  corral_source_split_7478:
    assume {:verifier.code 0} true;
    $i157 := $eq.i32($i156, 1);
    goto corral_source_split_7479;

  corral_source_split_7479:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb156, $bb157;

  $bb157:
    assume !($i157 == 1);
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    $i160 := $M.47;
    goto corral_source_split_7706;

  corral_source_split_7706:
    assume {:verifier.code 0} true;
    $i161 := $eq.i32($i160, 2);
    goto corral_source_split_7707;

  corral_source_split_7707:
    assume {:verifier.code 0} true;
    assume {:branchcond $i161} true;
    goto $bb159, $bb160;

  $bb160:
    assume !($i161 == 1);
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb161:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb159:
    assume $i161 == 1;
    goto corral_source_split_7709;

  corral_source_split_7709:
    assume {:verifier.code 0} true;
    $p162 := $M.63;
    goto corral_source_split_7710;

  corral_source_split_7710:
    assume {:verifier.code 0} true;
    $p163 := $M.77;
    goto corral_source_split_7711;

  corral_source_split_7711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1638} xpc_send_chctl_opencomplete_uv($p162, $p163);
    goto SeqInstr_673, SeqInstr_674;

  SeqInstr_674:
    assume assertsPassed;
    goto SeqInstr_675;

  SeqInstr_675:
    goto corral_source_split_7712;

  corral_source_split_7712:
    assume {:verifier.code 0} true;
    $M.47 := 2;
    call {:si_unique_call 1639} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_7713;

  corral_source_split_7713:
    assume {:verifier.code 0} true;
    goto $bb161;

  SeqInstr_673:
    assume !assertsPassed;
    return;

  $bb156:
    assume $i157 == 1;
    goto corral_source_split_7700;

  corral_source_split_7700:
    assume {:verifier.code 0} true;
    $p158 := $M.63;
    goto corral_source_split_7701;

  corral_source_split_7701:
    assume {:verifier.code 0} true;
    $p159 := $M.77;
    goto corral_source_split_7702;

  corral_source_split_7702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1636} xpc_send_chctl_opencomplete_uv($p158, $p159);
    goto SeqInstr_670, SeqInstr_671;

  SeqInstr_671:
    assume assertsPassed;
    goto SeqInstr_672;

  SeqInstr_672:
    goto corral_source_split_7703;

  corral_source_split_7703:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 1637} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_7704;

  corral_source_split_7704:
    assume {:verifier.code 0} true;
    goto $bb158;

  SeqInstr_670:
    assume !assertsPassed;
    return;

  $bb67:
    assume $i33 == 1;
    goto corral_source_split_7473;

  corral_source_split_7473:
    assume {:verifier.code 0} true;
    $i148 := $M.47;
    goto corral_source_split_7474;

  corral_source_split_7474:
    assume {:verifier.code 0} true;
    $i149 := $eq.i32($i148, 1);
    goto corral_source_split_7475;

  corral_source_split_7475:
    assume {:verifier.code 0} true;
    assume {:branchcond $i149} true;
    goto $bb150, $bb151;

  $bb151:
    assume !($i149 == 1);
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    $i152 := $M.47;
    goto corral_source_split_7692;

  corral_source_split_7692:
    assume {:verifier.code 0} true;
    $i153 := $eq.i32($i152, 2);
    goto corral_source_split_7693;

  corral_source_split_7693:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb153, $bb154;

  $bb154:
    assume !($i153 == 1);
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb155:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb153:
    assume $i153 == 1;
    goto corral_source_split_7695;

  corral_source_split_7695:
    assume {:verifier.code 0} true;
    $p154 := $M.63;
    goto corral_source_split_7696;

  corral_source_split_7696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1634} vslice_dummy_var_121 := xpc_get_deliverable_payload_uv($p154);
    goto corral_source_split_7697;

  corral_source_split_7697:
    assume {:verifier.code 0} true;
    $M.47 := 2;
    call {:si_unique_call 1635} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_7698;

  corral_source_split_7698:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb150:
    assume $i149 == 1;
    goto corral_source_split_7687;

  corral_source_split_7687:
    assume {:verifier.code 0} true;
    $p150 := $M.63;
    goto corral_source_split_7688;

  corral_source_split_7688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1632} vslice_dummy_var_120 := xpc_get_deliverable_payload_uv($p150);
    goto corral_source_split_7689;

  corral_source_split_7689:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 1633} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_7690;

  corral_source_split_7690:
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb47:
    assume $i23 == 1;
    assume {:verifier.code 0} true;
    $i34 := $slt.i32($i0, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    $i35 := $slt.i32($i0, 7);
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    $i36 := $slt.i32($i0, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    $i37 := $slt.i32($i0, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i37 == 1);
    goto corral_source_split_7489;

  corral_source_split_7489:
    assume {:verifier.code 0} true;
    $i140 := $M.47;
    goto corral_source_split_7490;

  corral_source_split_7490:
    assume {:verifier.code 0} true;
    $i141 := $eq.i32($i140, 1);
    goto corral_source_split_7491;

  corral_source_split_7491:
    assume {:verifier.code 0} true;
    assume {:branchcond $i141} true;
    goto $bb144, $bb145;

  $bb145:
    assume !($i141 == 1);
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    $i144 := $M.47;
    goto corral_source_split_7679;

  corral_source_split_7679:
    assume {:verifier.code 0} true;
    $i145 := $eq.i32($i144, 2);
    goto corral_source_split_7680;

  corral_source_split_7680:
    assume {:verifier.code 0} true;
    assume {:branchcond $i145} true;
    goto $bb147, $bb148;

  $bb148:
    assume !($i145 == 1);
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb147:
    assume $i145 == 1;
    goto corral_source_split_7682;

  corral_source_split_7682:
    assume {:verifier.code 0} true;
    $p146 := $M.63;
    goto corral_source_split_7683;

  corral_source_split_7683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1630} vslice_dummy_var_119 := xpc_setup_msg_structures_uv($p146);
    goto corral_source_split_7684;

  corral_source_split_7684:
    assume {:verifier.code 0} true;
    $M.47 := 2;
    call {:si_unique_call 1631} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_7685;

  corral_source_split_7685:
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb144:
    assume $i141 == 1;
    goto corral_source_split_7674;

  corral_source_split_7674:
    assume {:verifier.code 0} true;
    $p142 := $M.63;
    goto corral_source_split_7675;

  corral_source_split_7675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1628} vslice_dummy_var_118 := xpc_setup_msg_structures_uv($p142);
    goto corral_source_split_7676;

  corral_source_split_7676:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 1629} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_7677;

  corral_source_split_7677:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb75:
    assume $i37 == 1;
    goto corral_source_split_7485;

  corral_source_split_7485:
    assume {:verifier.code 0} true;
    $i130 := $M.47;
    goto corral_source_split_7486;

  corral_source_split_7486:
    assume {:verifier.code 0} true;
    $i131 := $eq.i32($i130, 1);
    goto corral_source_split_7487;

  corral_source_split_7487:
    assume {:verifier.code 0} true;
    assume {:branchcond $i131} true;
    goto $bb138, $bb139;

  $bb139:
    assume !($i131 == 1);
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    $i135 := $M.47;
    goto corral_source_split_7664;

  corral_source_split_7664:
    assume {:verifier.code 0} true;
    $i136 := $eq.i32($i135, 2);
    goto corral_source_split_7665;

  corral_source_split_7665:
    assume {:verifier.code 0} true;
    assume {:branchcond $i136} true;
    goto $bb141, $bb142;

  $bb142:
    assume !($i136 == 1);
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb141:
    assume $i136 == 1;
    goto corral_source_split_7667;

  corral_source_split_7667:
    assume {:verifier.code 0} true;
    $i137 := $M.75;
    goto corral_source_split_7668;

  corral_source_split_7668:
    assume {:verifier.code 0} true;
    $i138 := $sext.i16.i32($i137);
    goto corral_source_split_7669;

  corral_source_split_7669:
    assume {:verifier.code 0} true;
    $i139 := $trunc.i32.i16($i138);
    goto corral_source_split_7670;

  corral_source_split_7670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1626} xpc_assume_partition_disengaged_uv($i139);
    goto corral_source_split_7671;

  corral_source_split_7671:
    assume {:verifier.code 0} true;
    $M.47 := 2;
    call {:si_unique_call 1627} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_7672;

  corral_source_split_7672:
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb138:
    assume $i131 == 1;
    goto corral_source_split_7657;

  corral_source_split_7657:
    assume {:verifier.code 0} true;
    $i132 := $M.75;
    goto corral_source_split_7658;

  corral_source_split_7658:
    assume {:verifier.code 0} true;
    $i133 := $sext.i16.i32($i132);
    goto corral_source_split_7659;

  corral_source_split_7659:
    assume {:verifier.code 0} true;
    $i134 := $trunc.i32.i16($i133);
    goto corral_source_split_7660;

  corral_source_split_7660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1624} xpc_assume_partition_disengaged_uv($i134);
    goto corral_source_split_7661;

  corral_source_split_7661:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 1625} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_7662;

  corral_source_split_7662:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb73:
    assume $i36 == 1;
    goto corral_source_split_7481;

  corral_source_split_7481:
    assume {:verifier.code 0} true;
    $i122 := $M.47;
    goto corral_source_split_7482;

  corral_source_split_7482:
    assume {:verifier.code 0} true;
    $i123 := $eq.i32($i122, 1);
    goto corral_source_split_7483;

  corral_source_split_7483:
    assume {:verifier.code 0} true;
    assume {:branchcond $i123} true;
    goto $bb132, $bb133;

  $bb133:
    assume !($i123 == 1);
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    $i126 := $M.47;
    goto corral_source_split_7648;

  corral_source_split_7648:
    assume {:verifier.code 0} true;
    $i127 := $eq.i32($i126, 2);
    goto corral_source_split_7649;

  corral_source_split_7649:
    assume {:verifier.code 0} true;
    assume {:branchcond $i127} true;
    goto $bb135, $bb136;

  $bb136:
    assume !($i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb135:
    assume $i127 == 1;
    goto corral_source_split_7651;

  corral_source_split_7651:
    assume {:verifier.code 0} true;
    $p128 := $M.63;
    goto corral_source_split_7652;

  corral_source_split_7652:
    assume {:verifier.code 0} true;
    $p129 := $M.74;
    goto corral_source_split_7653;

  corral_source_split_7653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1622} xpc_send_chctl_openrequest_uv($p128, $p129);
    goto SeqInstr_667, SeqInstr_668;

  SeqInstr_668:
    assume assertsPassed;
    goto SeqInstr_669;

  SeqInstr_669:
    goto corral_source_split_7654;

  corral_source_split_7654:
    assume {:verifier.code 0} true;
    $M.47 := 2;
    call {:si_unique_call 1623} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_7655;

  corral_source_split_7655:
    assume {:verifier.code 0} true;
    goto $bb137;

  SeqInstr_667:
    assume !assertsPassed;
    return;

  $bb132:
    assume $i123 == 1;
    goto corral_source_split_7642;

  corral_source_split_7642:
    assume {:verifier.code 0} true;
    $p124 := $M.63;
    goto corral_source_split_7643;

  corral_source_split_7643:
    assume {:verifier.code 0} true;
    $p125 := $M.74;
    goto corral_source_split_7644;

  corral_source_split_7644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1620} xpc_send_chctl_openrequest_uv($p124, $p125);
    goto SeqInstr_664, SeqInstr_665;

  SeqInstr_665:
    assume assertsPassed;
    goto SeqInstr_666;

  SeqInstr_666:
    goto corral_source_split_7645;

  corral_source_split_7645:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 1621} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_7646;

  corral_source_split_7646:
    assume {:verifier.code 0} true;
    goto $bb134;

  SeqInstr_664:
    assume !assertsPassed;
    return;

  $bb71:
    assume $i35 == 1;
    assume {:verifier.code 0} true;
    $i38 := $slt.i32($i0, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i38 == 1);
    goto corral_source_split_7497;

  corral_source_split_7497:
    assume {:verifier.code 0} true;
    $i114 := $M.47;
    goto corral_source_split_7498;

  corral_source_split_7498:
    assume {:verifier.code 0} true;
    $i115 := $eq.i32($i114, 1);
    goto corral_source_split_7499;

  corral_source_split_7499:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb126, $bb127;

  $bb127:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    $i118 := $M.47;
    goto corral_source_split_7633;

  corral_source_split_7633:
    assume {:verifier.code 0} true;
    $i119 := $eq.i32($i118, 2);
    goto corral_source_split_7634;

  corral_source_split_7634:
    assume {:verifier.code 0} true;
    assume {:branchcond $i119} true;
    goto $bb129, $bb130;

  $bb130:
    assume !($i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb129:
    assume $i119 == 1;
    goto corral_source_split_7636;

  corral_source_split_7636:
    assume {:verifier.code 0} true;
    $p120 := $M.63;
    goto corral_source_split_7637;

  corral_source_split_7637:
    assume {:verifier.code 0} true;
    $p121 := $M.73;
    goto corral_source_split_7638;

  corral_source_split_7638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1618} xpc_send_chctl_closerequest_uv($p120, $p121);
    goto SeqInstr_661, SeqInstr_662;

  SeqInstr_662:
    assume assertsPassed;
    goto SeqInstr_663;

  SeqInstr_663:
    goto corral_source_split_7639;

  corral_source_split_7639:
    assume {:verifier.code 0} true;
    $M.47 := 2;
    call {:si_unique_call 1619} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_7640;

  corral_source_split_7640:
    assume {:verifier.code 0} true;
    goto $bb131;

  SeqInstr_661:
    assume !assertsPassed;
    return;

  $bb126:
    assume $i115 == 1;
    goto corral_source_split_7627;

  corral_source_split_7627:
    assume {:verifier.code 0} true;
    $p116 := $M.63;
    goto corral_source_split_7628;

  corral_source_split_7628:
    assume {:verifier.code 0} true;
    $p117 := $M.73;
    goto corral_source_split_7629;

  corral_source_split_7629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1616} xpc_send_chctl_closerequest_uv($p116, $p117);
    goto SeqInstr_658, SeqInstr_659;

  SeqInstr_659:
    assume assertsPassed;
    goto SeqInstr_660;

  SeqInstr_660:
    goto corral_source_split_7630;

  corral_source_split_7630:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 1617} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_7631;

  corral_source_split_7631:
    assume {:verifier.code 0} true;
    goto $bb128;

  SeqInstr_658:
    assume !assertsPassed;
    return;

  $bb77:
    assume $i38 == 1;
    goto corral_source_split_7493;

  corral_source_split_7493:
    assume {:verifier.code 0} true;
    $i86 := $M.47;
    goto corral_source_split_7494;

  corral_source_split_7494:
    assume {:verifier.code 0} true;
    $i87 := $eq.i32($i86, 1);
    goto corral_source_split_7495;

  corral_source_split_7495:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb120, $bb121;

  $bb121:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    $i100 := $M.47;
    goto corral_source_split_7609;

  corral_source_split_7609:
    assume {:verifier.code 0} true;
    $i101 := $eq.i32($i100, 2);
    goto corral_source_split_7610;

  corral_source_split_7610:
    assume {:verifier.code 0} true;
    assume {:branchcond $i101} true;
    goto $bb123, $bb124;

  $bb124:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb123:
    assume $i101 == 1;
    goto corral_source_split_7612;

  corral_source_split_7612:
    assume {:verifier.code 0} true;
    $p102 := $M.63;
    goto corral_source_split_7613;

  corral_source_split_7613:
    assume {:verifier.code 0} true;
    $i103 := $M.67;
    goto corral_source_split_7614;

  corral_source_split_7614:
    assume {:verifier.code 0} true;
    $p104 := $M.68;
    goto corral_source_split_7615;

  corral_source_split_7615:
    assume {:verifier.code 0} true;
    $i105 := $M.69;
    goto corral_source_split_7616;

  corral_source_split_7616:
    assume {:verifier.code 0} true;
    $i106 := $zext.i16.i32($i105);
    goto corral_source_split_7617;

  corral_source_split_7617:
    assume {:verifier.code 0} true;
    $i107 := $trunc.i32.i16($i106);
    goto corral_source_split_7618;

  corral_source_split_7618:
    assume {:verifier.code 0} true;
    $i108 := $M.70;
    goto corral_source_split_7619;

  corral_source_split_7619:
    assume {:verifier.code 0} true;
    $i109 := $zext.i8.i32($i108);
    goto corral_source_split_7620;

  corral_source_split_7620:
    assume {:verifier.code 0} true;
    $i110 := $trunc.i32.i8($i109);
    goto corral_source_split_7621;

  corral_source_split_7621:
    assume {:verifier.code 0} true;
    $p111 := $M.71;
    goto corral_source_split_7622;

  corral_source_split_7622:
    assume {:verifier.code 0} true;
    $p112 := $M.72;
    goto corral_source_split_7623;

  corral_source_split_7623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1614} vslice_dummy_var_117 := xpc_send_payload_uv($p102, $i103, $p104, $i107, $i110, $p111, $p112);
    goto SeqInstr_655, SeqInstr_656;

  SeqInstr_656:
    assume assertsPassed;
    goto SeqInstr_657;

  SeqInstr_657:
    goto corral_source_split_7624;

  corral_source_split_7624:
    assume {:verifier.code 0} true;
    $M.47 := 2;
    call {:si_unique_call 1615} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_7625;

  corral_source_split_7625:
    assume {:verifier.code 0} true;
    goto $bb125;

  SeqInstr_655:
    assume !assertsPassed;
    return;

  $bb120:
    assume $i87 == 1;
    goto corral_source_split_7594;

  corral_source_split_7594:
    assume {:verifier.code 0} true;
    $p88 := $M.63;
    goto corral_source_split_7595;

  corral_source_split_7595:
    assume {:verifier.code 0} true;
    $i89 := $M.67;
    goto corral_source_split_7596;

  corral_source_split_7596:
    assume {:verifier.code 0} true;
    $p90 := $M.68;
    goto corral_source_split_7597;

  corral_source_split_7597:
    assume {:verifier.code 0} true;
    $i91 := $M.69;
    goto corral_source_split_7598;

  corral_source_split_7598:
    assume {:verifier.code 0} true;
    $i92 := $zext.i16.i32($i91);
    goto corral_source_split_7599;

  corral_source_split_7599:
    assume {:verifier.code 0} true;
    $i93 := $trunc.i32.i16($i92);
    goto corral_source_split_7600;

  corral_source_split_7600:
    assume {:verifier.code 0} true;
    $i94 := $M.70;
    goto corral_source_split_7601;

  corral_source_split_7601:
    assume {:verifier.code 0} true;
    $i95 := $zext.i8.i32($i94);
    goto corral_source_split_7602;

  corral_source_split_7602:
    assume {:verifier.code 0} true;
    $i96 := $trunc.i32.i8($i95);
    goto corral_source_split_7603;

  corral_source_split_7603:
    assume {:verifier.code 0} true;
    $p97 := $M.71;
    goto corral_source_split_7604;

  corral_source_split_7604:
    assume {:verifier.code 0} true;
    $p98 := $M.72;
    goto corral_source_split_7605;

  corral_source_split_7605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1612} vslice_dummy_var_116 := xpc_send_payload_uv($p88, $i89, $p90, $i93, $i96, $p97, $p98);
    goto SeqInstr_652, SeqInstr_653;

  SeqInstr_653:
    assume assertsPassed;
    goto SeqInstr_654;

  SeqInstr_654:
    goto corral_source_split_7606;

  corral_source_split_7606:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 1613} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_7607;

  corral_source_split_7607:
    assume {:verifier.code 0} true;
    goto $bb122;

  SeqInstr_652:
    assume !assertsPassed;
    return;

  $bb69:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    $i39 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    $i40 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    $i41 := $slt.i32($i0, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i41 == 1);
    goto corral_source_split_7509;

  corral_source_split_7509:
    assume {:verifier.code 0} true;
    $i74 := $M.47;
    goto corral_source_split_7510;

  corral_source_split_7510:
    assume {:verifier.code 0} true;
    $i75 := $eq.i32($i74, 1);
    goto corral_source_split_7511;

  corral_source_split_7511:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb114, $bb115;

  $bb115:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    $i80 := $M.47;
    goto corral_source_split_7584;

  corral_source_split_7584:
    assume {:verifier.code 0} true;
    $i81 := $eq.i32($i80, 2);
    goto corral_source_split_7585;

  corral_source_split_7585:
    assume {:verifier.code 0} true;
    assume {:branchcond $i81} true;
    goto $bb117, $bb118;

  $bb118:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb117:
    assume $i81 == 1;
    goto corral_source_split_7587;

  corral_source_split_7587:
    assume {:verifier.code 0} true;
    $i82 := $M.66;
    goto corral_source_split_7588;

  corral_source_split_7588:
    assume {:verifier.code 0} true;
    $i83 := $sext.i16.i32($i82);
    goto corral_source_split_7589;

  corral_source_split_7589:
    assume {:verifier.code 0} true;
    $i84 := $trunc.i32.i16($i83);
    goto corral_source_split_7590;

  corral_source_split_7590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1610} vslice_dummy_var_115 := xpc_partition_engaged_uv($i84);
    goto corral_source_split_7591;

  corral_source_split_7591:
    assume {:verifier.code 0} true;
    $M.47 := 2;
    call {:si_unique_call 1611} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_7592;

  corral_source_split_7592:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb114:
    assume $i75 == 1;
    goto corral_source_split_7577;

  corral_source_split_7577:
    assume {:verifier.code 0} true;
    $i76 := $M.66;
    goto corral_source_split_7578;

  corral_source_split_7578:
    assume {:verifier.code 0} true;
    $i77 := $sext.i16.i32($i76);
    goto corral_source_split_7579;

  corral_source_split_7579:
    assume {:verifier.code 0} true;
    $i78 := $trunc.i32.i16($i77);
    goto corral_source_split_7580;

  corral_source_split_7580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1608} vslice_dummy_var_114 := xpc_partition_engaged_uv($i78);
    goto corral_source_split_7581;

  corral_source_split_7581:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 1609} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_7582;

  corral_source_split_7582:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb83:
    assume $i41 == 1;
    goto corral_source_split_7505;

  corral_source_split_7505:
    assume {:verifier.code 0} true;
    $i64 := $M.47;
    goto corral_source_split_7506;

  corral_source_split_7506:
    assume {:verifier.code 0} true;
    $i65 := $eq.i32($i64, 1);
    goto corral_source_split_7507;

  corral_source_split_7507:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb108, $bb109;

  $bb109:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    $i69 := $M.47;
    goto corral_source_split_7567;

  corral_source_split_7567:
    assume {:verifier.code 0} true;
    $i70 := $eq.i32($i69, 2);
    goto corral_source_split_7568;

  corral_source_split_7568:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb111, $bb112;

  $bb112:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb111:
    assume $i70 == 1;
    goto corral_source_split_7570;

  corral_source_split_7570:
    assume {:verifier.code 0} true;
    $i71 := $M.65;
    goto corral_source_split_7571;

  corral_source_split_7571:
    assume {:verifier.code 0} true;
    $i72 := $sext.i16.i32($i71);
    goto corral_source_split_7572;

  corral_source_split_7572:
    assume {:verifier.code 0} true;
    $i73 := $trunc.i32.i16($i72);
    goto corral_source_split_7573;

  corral_source_split_7573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1606} xpc_disallow_hb_uv($i73);
    goto corral_source_split_7574;

  corral_source_split_7574:
    assume {:verifier.code 0} true;
    $M.47 := 2;
    call {:si_unique_call 1607} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_7575;

  corral_source_split_7575:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb108:
    assume $i65 == 1;
    goto corral_source_split_7560;

  corral_source_split_7560:
    assume {:verifier.code 0} true;
    $i66 := $M.65;
    goto corral_source_split_7561;

  corral_source_split_7561:
    assume {:verifier.code 0} true;
    $i67 := $sext.i16.i32($i66);
    goto corral_source_split_7562;

  corral_source_split_7562:
    assume {:verifier.code 0} true;
    $i68 := $trunc.i32.i16($i67);
    goto corral_source_split_7563;

  corral_source_split_7563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1604} xpc_disallow_hb_uv($i68);
    goto corral_source_split_7564;

  corral_source_split_7564:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 1605} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_7565;

  corral_source_split_7565:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb81:
    assume $i40 == 1;
    goto corral_source_split_7501;

  corral_source_split_7501:
    assume {:verifier.code 0} true;
    $i60 := $M.47;
    goto corral_source_split_7502;

  corral_source_split_7502:
    assume {:verifier.code 0} true;
    $i61 := $eq.i32($i60, 1);
    goto corral_source_split_7503;

  corral_source_split_7503:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb102, $bb103;

  $bb103:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    $i62 := $M.47;
    goto corral_source_split_7553;

  corral_source_split_7553:
    assume {:verifier.code 0} true;
    $i63 := $eq.i32($i62, 2);
    goto corral_source_split_7554;

  corral_source_split_7554:
    assume {:verifier.code 0} true;
    assume {:branchcond $i63} true;
    goto $bb105, $bb106;

  $bb106:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb105:
    assume $i63 == 1;
    goto corral_source_split_7556;

  corral_source_split_7556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1602} xpc_increment_heartbeat_uv();
    goto corral_source_split_7557;

  corral_source_split_7557:
    assume {:verifier.code 0} true;
    $M.47 := 2;
    call {:si_unique_call 1603} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_7558;

  corral_source_split_7558:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb102:
    assume $i61 == 1;
    goto corral_source_split_7549;

  corral_source_split_7549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1600} xpc_increment_heartbeat_uv();
    goto corral_source_split_7550;

  corral_source_split_7550:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 1601} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_7551;

  corral_source_split_7551:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb79:
    assume $i39 == 1;
    assume {:verifier.code 0} true;
    $i42 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i42 == 1);
    goto corral_source_split_7513;

  corral_source_split_7513:
    assume {:verifier.code 0} true;
    $i52 := $M.47;
    goto corral_source_split_7514;

  corral_source_split_7514:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i52, 1);
    goto corral_source_split_7515;

  corral_source_split_7515:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  $bb97:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    $i56 := $M.47;
    goto corral_source_split_7540;

  corral_source_split_7540:
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i56, 2);
    goto corral_source_split_7541;

  corral_source_split_7541:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb99:
    assume $i57 == 1;
    goto corral_source_split_7543;

  corral_source_split_7543:
    assume {:verifier.code 0} true;
    $p58 := $M.63;
    goto corral_source_split_7544;

  corral_source_split_7544:
    assume {:verifier.code 0} true;
    $p59 := $M.64;
    goto corral_source_split_7545;

  corral_source_split_7545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1598} xpc_send_chctl_closereply_uv($p58, $p59);
    goto SeqInstr_649, SeqInstr_650;

  SeqInstr_650:
    assume assertsPassed;
    goto SeqInstr_651;

  SeqInstr_651:
    goto corral_source_split_7546;

  corral_source_split_7546:
    assume {:verifier.code 0} true;
    $M.47 := 2;
    call {:si_unique_call 1599} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_7547;

  corral_source_split_7547:
    assume {:verifier.code 0} true;
    goto $bb101;

  SeqInstr_649:
    assume !assertsPassed;
    return;

  $bb96:
    assume $i53 == 1;
    goto corral_source_split_7534;

  corral_source_split_7534:
    assume {:verifier.code 0} true;
    $p54 := $M.63;
    goto corral_source_split_7535;

  corral_source_split_7535:
    assume {:verifier.code 0} true;
    $p55 := $M.64;
    goto corral_source_split_7536;

  corral_source_split_7536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1596} xpc_send_chctl_closereply_uv($p54, $p55);
    goto SeqInstr_646, SeqInstr_647;

  SeqInstr_647:
    assume assertsPassed;
    goto SeqInstr_648;

  SeqInstr_648:
    goto corral_source_split_7537;

  corral_source_split_7537:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 1597} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_7538;

  corral_source_split_7538:
    assume {:verifier.code 0} true;
    goto $bb98;

  SeqInstr_646:
    assume !assertsPassed;
    return;

  $bb85:
    assume $i42 == 1;
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    assume !($i43 == 1);
    goto $bb16;

  $bb87:
    assume $i43 == 1;
    goto corral_source_split_7517;

  corral_source_split_7517:
    assume {:verifier.code 0} true;
    $i44 := $M.47;
    goto corral_source_split_7518;

  corral_source_split_7518:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i44, 1);
    goto corral_source_split_7519;

  corral_source_split_7519:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    $i48 := $M.47;
    goto corral_source_split_7526;

  corral_source_split_7526:
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i48, 2);
    goto corral_source_split_7527;

  corral_source_split_7527:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  $bb93:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb92:
    assume $i49 == 1;
    goto corral_source_split_7529;

  corral_source_split_7529:
    assume {:verifier.code 0} true;
    $p50 := $M.62;
    goto corral_source_split_7530;

  corral_source_split_7530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1594} vslice_dummy_var_113 := xpc_setup_ch_structures_uv($p50);
    goto corral_source_split_7531;

  corral_source_split_7531:
    assume {:verifier.code 0} true;
    $M.47 := 2;
    call {:si_unique_call 1595} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_7532;

  corral_source_split_7532:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb89:
    assume $i45 == 1;
    goto corral_source_split_7521;

  corral_source_split_7521:
    assume {:verifier.code 0} true;
    $p46 := $M.62;
    goto corral_source_split_7522;

  corral_source_split_7522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1592} vslice_dummy_var_112 := xpc_setup_ch_structures_uv($p46);
    goto corral_source_split_7523;

  corral_source_split_7523:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 1593} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_7524;

  corral_source_split_7524:
    assume {:verifier.code 0} true;
    goto $bb91;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 518407);

procedure ldv_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8098;

  corral_source_split_8098:
    assume {:verifier.code 0} true;
    $i0 := $M.28;
    goto corral_source_split_8099;

  corral_source_split_8099:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_8100;

  corral_source_split_8100:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_8104;

  corral_source_split_8104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1758} ldv_error();
    goto SeqInstr_739, SeqInstr_740;

  SeqInstr_740:
    assume assertsPassed;
    goto SeqInstr_741;

  SeqInstr_741:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i2 := $M.59;
    goto corral_source_split_8106;

  corral_source_split_8106:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 1);
    goto corral_source_split_8107;

  corral_source_split_8107:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    goto corral_source_split_8111;

  corral_source_split_8111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1759} ldv_error();
    goto SeqInstr_742, SeqInstr_743;

  SeqInstr_743:
    assume assertsPassed;
    goto SeqInstr_744;

  SeqInstr_744:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i4 := $M.60;
    goto corral_source_split_8113;

  corral_source_split_8113:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 1);
    goto corral_source_split_8114;

  corral_source_split_8114:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i5 == 1);
    goto corral_source_split_8118;

  corral_source_split_8118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1760} ldv_error();
    goto SeqInstr_745, SeqInstr_746;

  SeqInstr_746:
    assume assertsPassed;
    goto SeqInstr_747;

  SeqInstr_747:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i6 := $M.61;
    goto corral_source_split_8120;

  corral_source_split_8120:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 1);
    goto corral_source_split_8121;

  corral_source_split_8121:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i7 == 1);
    goto corral_source_split_8125;

  corral_source_split_8125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1761} ldv_error();
    goto SeqInstr_748, SeqInstr_749;

  SeqInstr_749:
    assume assertsPassed;
    goto SeqInstr_750;

  SeqInstr_750:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i8 := $M.32;
    goto corral_source_split_8127;

  corral_source_split_8127:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_8128;

  corral_source_split_8128:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i9 == 1);
    goto corral_source_split_8132;

  corral_source_split_8132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1762} ldv_error();
    goto SeqInstr_751, SeqInstr_752;

  SeqInstr_752:
    assume assertsPassed;
    goto SeqInstr_753;

  SeqInstr_753:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_751:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i9 == 1;
    goto corral_source_split_8130;

  corral_source_split_8130:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_748:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i7 == 1;
    goto corral_source_split_8123;

  corral_source_split_8123:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_745:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i5 == 1;
    goto corral_source_split_8116;

  corral_source_split_8116:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_742:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i3 == 1;
    goto corral_source_split_8109;

  corral_source_split_8109:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_739:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_8102;

  corral_source_split_8102:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_xpc_arch_ops_uv_probe_1: ref;

axiom ldv_xpc_arch_ops_uv_probe_1 == $sub.ref(0, 519439);

procedure ldv_xpc_arch_ops_uv_probe_1() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_xpc_arch_ops_uv_probe_1() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8134;

  corral_source_split_8134:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1763} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1764} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_8135;

  corral_source_split_8135:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 520471);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1765} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_8137;

  corral_source_split_8137:
    assume {:verifier.code 1} true;
    goto corral_source_split_8138;

  corral_source_split_8138:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_8139;

  corral_source_split_8139:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 521503);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 522535);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 523567);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8141;

  corral_source_split_8141:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_754, SeqInstr_755;

  SeqInstr_755:
    assume assertsPassed;
    goto SeqInstr_756;

  SeqInstr_756:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_8142;

  corral_source_split_8142:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_754:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 524599);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 525631);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 526663);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 527695);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 528727);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 529759);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 530791);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 531823);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 532855);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 533887);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8144;

  corral_source_split_8144:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1766} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 1767} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1768} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_8145;

  corral_source_split_8145:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_8146;

  corral_source_split_8146:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_8150;

  corral_source_split_8150:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_8151;

  corral_source_split_8151:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1769} __VERIFIER_assume($i4);
    goto corral_source_split_8152;

  corral_source_split_8152:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_8148;

  corral_source_split_8148:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 534919);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 535951);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 536983);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 538015);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __VERIFIER_nondet_long: ref;

axiom __VERIFIER_nondet_long == $sub.ref(0, 539047);

procedure __VERIFIER_nondet_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8154;

  corral_source_split_8154:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1770} $i0 := __SMACK_nondet_long();
    call {:si_unique_call 1771} {:cexpr "smack:ext:__SMACK_nondet_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1772} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_8155;

  corral_source_split_8155:
    assume {:verifier.code 0} true;
    $i1 := $sge.i64($i0, $sub.i64(0, 9223372036854775808));
    goto corral_source_split_8156;

  corral_source_split_8156:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_8160;

  corral_source_split_8160:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_8161;

  corral_source_split_8161:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1773} __VERIFIER_assume($i4);
    goto corral_source_split_8162;

  corral_source_split_8162:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_8158;

  corral_source_split_8158:
    assume {:verifier.code 1} true;
    $i3 := $sle.i64($i0, 9223372036854775807);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 540079);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 541111);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 542143);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 543175);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 544207);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8164;

  corral_source_split_8164:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1774} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1775} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1776} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_8165;

  corral_source_split_8165:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1777} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1778} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 1779} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_8166;

  corral_source_split_8166:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1780} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1781} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 1782} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_8167;

  corral_source_split_8167:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_8168;

  corral_source_split_8168:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_8173;

  corral_source_split_8173:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_8174;

  corral_source_split_8174:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1783} __VERIFIER_assume($i7);
    goto corral_source_split_8175;

  corral_source_split_8175:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_8176;

  corral_source_split_8176:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_8182;

  corral_source_split_8182:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_8183;

  corral_source_split_8183:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1784} __VERIFIER_assume($i11);
    goto corral_source_split_8184;

  corral_source_split_8184:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_8180;

  corral_source_split_8180:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_8170;

  corral_source_split_8170:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_8171;

  corral_source_split_8171:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_8178;

  corral_source_split_8178:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 545239);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 546271);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 547303);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 548335);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 549367);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 550399);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 551431);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 552463);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 553495);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8186;

  corral_source_split_8186:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1785} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 1786} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1787} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_8187;

  corral_source_split_8187:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 554527);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8189;

  corral_source_split_8189:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1788} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 1789} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_8190;

  corral_source_split_8190:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 555559);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 556591);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1790} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1791} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 557623);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 558655);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8192;

  corral_source_split_8192:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_8193;

  corral_source_split_8193:
    assume {:verifier.code 0} true;
    return;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 559687);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 560719);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.90, $M.5, $M.17, $M.7, $M.1, $M.3, $M.4, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.35, $M.37, $M.14, $M.2, $M.0, $M.62, $M.63, $M.64, $M.65, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.72, $M.73, $M.74, $M.75, $M.77, $M.78, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.89, $M.23, $M.24, $M.33, $M.40, $M.93, $M.94, $M.39, $M.95, $M.96, $M.97, $M.98, $M.99, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.106, $M.107, $M.108, $M.109, $M.110, $M.111, $M.112, $M.113, $M.114, $M.115, $M.116, $M.117, $M.118, $M.119, $M.120, $M.121, $M.32, $M.61, $M.60, $M.59, $M.28, $M.15, $M.16, $M.34, $M.36, $M.6;



implementation __SMACK_static_init()
{

  $bb0:
    $M.90 := $store.ref($M.90, xpc_dbg_name, .str);
    $M.90 := $store.ref($M.90, $add.ref($add.ref(xpc_dbg_name, $mul.ref(0, 120)), $mul.ref(8, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref(xpc_dbg_name, $mul.ref(0, 120)), $mul.ref(16, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref(xpc_dbg_name, $mul.ref(0, 120)), $mul.ref(24, 1)), $0.ref);
    $M.90 := $store.i8($M.90, $add.ref($add.ref(xpc_dbg_name, $mul.ref(0, 120)), $mul.ref(32, 1)), 0);
    $M.90 := $store.ref($M.90, $add.ref($add.ref(xpc_dbg_name, $mul.ref(0, 120)), $mul.ref(40, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref(xpc_dbg_name, $mul.ref(0, 120)), $mul.ref(48, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref(xpc_dbg_name, $mul.ref(0, 120)), $mul.ref(56, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref(xpc_dbg_name, $mul.ref(0, 120)), $mul.ref(64, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref(xpc_dbg_name, $mul.ref(0, 120)), $mul.ref(72, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref(xpc_dbg_name, $mul.ref(0, 120)), $mul.ref(80, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref(xpc_dbg_name, $mul.ref(0, 120)), $mul.ref(88, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref(xpc_dbg_name, $mul.ref(0, 120)), $mul.ref(96, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref(xpc_dbg_name, $mul.ref(0, 120)), $mul.ref(104, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref(xpc_dbg_name, $mul.ref(0, 120)), $mul.ref(112, 1)), $0.ref);
    $M.90 := $store.ref($M.90, xpc_part_dbg_subname, $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(8, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(16, 1)), $mul.ref(0, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(16, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(16, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(16, 1)), $mul.ref(24, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(16, 1)), $mul.ref(32, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(16, 1)), $mul.ref(40, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(16, 1)), $mul.ref(48, 1)), $0.ref);
    $M.90 := $store.i32($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(16, 1)), $mul.ref(56, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.90 := $store.i8($M.90, $add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(16, 1)), $mul.ref(60, 1)), 0);
    $M.90 := $store.ref($M.90, $add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(80, 1)), .str.1);
    $M.90 := $store.ref($M.90, $add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(88, 1)), $0.ref);
    $M.90 := $store.i32($M.90, $add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(96, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.90 := $store.i32($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.90 := $store.i32($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.90 := $store.i32($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.90 := $store.i32($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.90 := $store.i64($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(96, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(96, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(96, 1)), $mul.ref(96, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(96, 1)), $mul.ref(104, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(96, 1)), $mul.ref(112, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(96, 1)), $mul.ref(120, 1)), $mul.ref(0, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(96, 1)), $mul.ref(120, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(96, 1)), $mul.ref(120, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(96, 1)), $mul.ref(120, 1)), $mul.ref(24, 1)), $0.ref);
    $M.90 := $store.i32($M.90, $add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(96, 1)), $mul.ref(120, 1)), $mul.ref(32, 1)), 0);
    $M.90 := $store.i64($M.90, $add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(96, 1)), $mul.ref(120, 1)), $mul.ref(40, 1)), 0);
    $M.90 := $store.ref($M.90, $add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(264, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(272, 1)), xpc_dbg_name);
    $M.90 := $store.ref($M.90, $add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(280, 1)), $0.ref);
    $M.90 := $store.i32($M.90, $add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.90 := $store.i8($M.90, $add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(4, 1)), 0);
    $M.90 := $store.i8($M.90, $add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(5, 1)), 0);
    $M.90 := $store.i8($M.90, $add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(6, 1)), 0);
    $M.90 := $store.i8($M.90, $add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(7, 1)), 0);
    $M.90 := $store.i8($M.90, $add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(8, 1)), 0);
    $M.90 := $store.i32($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.90 := $store.i32($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.90 := $store.i32($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.90 := $store.i32($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.90 := $store.i64($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(88, 1)), $mul.ref(0, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(88, 1)), $mul.ref(8, 1)), $0.ref);
    $M.90 := $store.i32($M.90, $add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(104, 1)), $mul.ref(0, 1)), 0);
    $M.90 := $store.i32($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.90 := $store.i32($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.90 := $store.i32($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.90 := $store.i32($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.90 := $store.i64($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(200, 1)), $0.ref);
    $M.90 := $store.i8($M.90, $add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(208, 1)), 0);
    $M.90 := $store.i8($M.90, $add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(209, 1)), 0);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(216, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(216, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.90 := $store.i64($M.90, $add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(216, 1)), $mul.ref(16, 1)), 0);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(216, 1)), $mul.ref(24, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(216, 1)), $mul.ref(32, 1)), $0.ref);
    $M.90 := $store.i64($M.90, $add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(216, 1)), $mul.ref(40, 1)), 0);
    $M.90 := $store.i32($M.90, $add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(216, 1)), $mul.ref(48, 1)), 0);
    $M.90 := $store.i32($M.90, $add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(216, 1)), $mul.ref(52, 1)), 0);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(216, 1)), $mul.ref(56, 1)), $0.ref);
    $M.90 := $store.i8($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), 0);
    $M.90 := $store.i8($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(1, 1)), 0);
    $M.90 := $store.i8($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(2, 1)), 0);
    $M.90 := $store.i8($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(3, 1)), 0);
    $M.90 := $store.i8($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(4, 1)), 0);
    $M.90 := $store.i8($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(5, 1)), 0);
    $M.90 := $store.i8($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(6, 1)), 0);
    $M.90 := $store.i8($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(7, 1)), 0);
    $M.90 := $store.i8($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(8, 1)), 0);
    $M.90 := $store.i8($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(9, 1)), 0);
    $M.90 := $store.i8($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(10, 1)), 0);
    $M.90 := $store.i8($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(11, 1)), 0);
    $M.90 := $store.i8($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(12, 1)), 0);
    $M.90 := $store.i8($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(13, 1)), 0);
    $M.90 := $store.i8($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(14, 1)), 0);
    $M.90 := $store.i8($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(15, 1)), 0);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(24, 1)), $0.ref);
    $M.90 := $store.i32($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(32, 1)), 0);
    $M.90 := $store.i64($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(40, 1)), 0);
    $M.90 := $store.i64($M.90, $add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(344, 1)), 0);
    $M.90 := $store.i64($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(352, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(352, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(352, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(352, 1)), $mul.ref(24, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(0, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(24, 1)), $0.ref);
    $M.90 := $store.i32($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(32, 1)), 0);
    $M.90 := $store.i64($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(40, 1)), 0);
    $M.90 := $store.i32($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.90 := $store.i32($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.90 := $store.i32($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.90 := $store.i32($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.90 := $store.i64($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(432, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(432, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.90 := $store.i32($M.90, $add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(520, 1)), $mul.ref(0, 1)), 0);
    $M.90 := $store.i32($M.90, $add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(524, 1)), $mul.ref(0, 1)), 0);
    $M.90 := $store.i8($M.90, $add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(528, 1)), 0);
    $M.90 := $store.i8($M.90, $add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(529, 1)), 0);
    $M.90 := $store.i32($M.90, $add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(532, 1)), 0);
    $M.90 := $store.i32($M.90, $add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(536, 1)), 0);
    $M.90 := $store.i32($M.90, $add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(540, 1)), 0);
    $M.90 := $store.i32($M.90, $add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(544, 1)), 0);
    $M.90 := $store.i64($M.90, $add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(552, 1)), 0);
    $M.90 := $store.i64($M.90, $add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(560, 1)), 0);
    $M.90 := $store.i64($M.90, $add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(568, 1)), 0);
    $M.90 := $store.i64($M.90, $add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(576, 1)), 0);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(584, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(592, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(888, 1)), $0.ref);
    $M.90 := $store.i32($M.90, $add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(896, 1)), 0);
    $M.90 := $store.ref($M.90, $add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(904, 1)), $0.ref);
    $M.90 := $store.i64($M.90, $add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(912, 1)), 0);
    $M.90 := $store.ref($M.90, $add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(920, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(928, 1)), $mul.ref(0, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(928, 1)), $mul.ref(8, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(944, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(952, 1)), $mul.ref(0, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(952, 1)), $mul.ref(8, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(968, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(976, 1)), $mul.ref(0, 1)), $0.ref);
    $M.90 := $store.i32($M.90, $add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(984, 1)), 0);
    $M.90 := $store.i32($M.90, $add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(988, 1)), 0);
    $M.90 := $store.i32($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(992, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.90 := $store.i32($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(992, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.90 := $store.i32($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(992, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(992, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(992, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(992, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(992, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(992, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.90 := $store.i32($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(992, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.90 := $store.i64($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(992, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(1064, 1)), $mul.ref(0, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(1064, 1)), $mul.ref(8, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(1080, 1)), $mul.ref(0, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(1080, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(1080, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.90 := $store.i32($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(1080, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.90 := $store.ref($M.90, $add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(1112, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(1120, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(1128, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref(xpc_part_dbg_subname, $mul.ref(0, 1144)), $mul.ref(1136, 1)), $0.ref);
    $M.90 := $store.ref($M.90, xpc_chan_dbg_subname, $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(8, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(16, 1)), $mul.ref(0, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(16, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(16, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(16, 1)), $mul.ref(24, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(16, 1)), $mul.ref(32, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(16, 1)), $mul.ref(40, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(16, 1)), $mul.ref(48, 1)), $0.ref);
    $M.90 := $store.i32($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(16, 1)), $mul.ref(56, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.90 := $store.i8($M.90, $add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(16, 1)), $mul.ref(60, 1)), 0);
    $M.90 := $store.ref($M.90, $add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(80, 1)), .str.1);
    $M.90 := $store.ref($M.90, $add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(88, 1)), $0.ref);
    $M.90 := $store.i32($M.90, $add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(96, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.90 := $store.i32($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.90 := $store.i32($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.90 := $store.i32($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.90 := $store.i32($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.90 := $store.i64($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(96, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(96, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(96, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(96, 1)), $mul.ref(96, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(96, 1)), $mul.ref(104, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(96, 1)), $mul.ref(112, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(96, 1)), $mul.ref(120, 1)), $mul.ref(0, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(96, 1)), $mul.ref(120, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(96, 1)), $mul.ref(120, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(96, 1)), $mul.ref(120, 1)), $mul.ref(24, 1)), $0.ref);
    $M.90 := $store.i32($M.90, $add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(96, 1)), $mul.ref(120, 1)), $mul.ref(32, 1)), 0);
    $M.90 := $store.i64($M.90, $add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(96, 1)), $mul.ref(120, 1)), $mul.ref(40, 1)), 0);
    $M.90 := $store.ref($M.90, $add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(264, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(272, 1)), xpc_dbg_name);
    $M.90 := $store.ref($M.90, $add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(280, 1)), $0.ref);
    $M.90 := $store.i32($M.90, $add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.90 := $store.i8($M.90, $add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(4, 1)), 0);
    $M.90 := $store.i8($M.90, $add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(5, 1)), 0);
    $M.90 := $store.i8($M.90, $add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(6, 1)), 0);
    $M.90 := $store.i8($M.90, $add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(7, 1)), 0);
    $M.90 := $store.i8($M.90, $add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(8, 1)), 0);
    $M.90 := $store.i32($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.90 := $store.i32($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.90 := $store.i32($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.90 := $store.i32($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.90 := $store.i64($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(88, 1)), $mul.ref(0, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(88, 1)), $mul.ref(8, 1)), $0.ref);
    $M.90 := $store.i32($M.90, $add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(104, 1)), $mul.ref(0, 1)), 0);
    $M.90 := $store.i32($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.90 := $store.i32($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.90 := $store.i32($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.90 := $store.i32($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.90 := $store.i64($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(200, 1)), $0.ref);
    $M.90 := $store.i8($M.90, $add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(208, 1)), 0);
    $M.90 := $store.i8($M.90, $add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(209, 1)), 0);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(216, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(216, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.90 := $store.i64($M.90, $add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(216, 1)), $mul.ref(16, 1)), 0);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(216, 1)), $mul.ref(24, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(216, 1)), $mul.ref(32, 1)), $0.ref);
    $M.90 := $store.i64($M.90, $add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(216, 1)), $mul.ref(40, 1)), 0);
    $M.90 := $store.i32($M.90, $add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(216, 1)), $mul.ref(48, 1)), 0);
    $M.90 := $store.i32($M.90, $add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(216, 1)), $mul.ref(52, 1)), 0);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(216, 1)), $mul.ref(56, 1)), $0.ref);
    $M.90 := $store.i8($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), 0);
    $M.90 := $store.i8($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(1, 1)), 0);
    $M.90 := $store.i8($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(2, 1)), 0);
    $M.90 := $store.i8($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(3, 1)), 0);
    $M.90 := $store.i8($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(4, 1)), 0);
    $M.90 := $store.i8($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(5, 1)), 0);
    $M.90 := $store.i8($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(6, 1)), 0);
    $M.90 := $store.i8($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(7, 1)), 0);
    $M.90 := $store.i8($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(8, 1)), 0);
    $M.90 := $store.i8($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(9, 1)), 0);
    $M.90 := $store.i8($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(10, 1)), 0);
    $M.90 := $store.i8($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(11, 1)), 0);
    $M.90 := $store.i8($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(12, 1)), 0);
    $M.90 := $store.i8($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(13, 1)), 0);
    $M.90 := $store.i8($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(14, 1)), 0);
    $M.90 := $store.i8($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(15, 1)), 0);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(24, 1)), $0.ref);
    $M.90 := $store.i32($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(32, 1)), 0);
    $M.90 := $store.i64($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(40, 1)), 0);
    $M.90 := $store.i64($M.90, $add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(344, 1)), 0);
    $M.90 := $store.i64($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(352, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(352, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(352, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(352, 1)), $mul.ref(24, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(0, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(24, 1)), $0.ref);
    $M.90 := $store.i32($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(32, 1)), 0);
    $M.90 := $store.i64($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(40, 1)), 0);
    $M.90 := $store.i32($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.90 := $store.i32($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.90 := $store.i32($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.90 := $store.i32($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.90 := $store.i64($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(432, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(432, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.90 := $store.i32($M.90, $add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(520, 1)), $mul.ref(0, 1)), 0);
    $M.90 := $store.i32($M.90, $add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(524, 1)), $mul.ref(0, 1)), 0);
    $M.90 := $store.i8($M.90, $add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(528, 1)), 0);
    $M.90 := $store.i8($M.90, $add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(529, 1)), 0);
    $M.90 := $store.i32($M.90, $add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(532, 1)), 0);
    $M.90 := $store.i32($M.90, $add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(536, 1)), 0);
    $M.90 := $store.i32($M.90, $add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(540, 1)), 0);
    $M.90 := $store.i32($M.90, $add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(544, 1)), 0);
    $M.90 := $store.i64($M.90, $add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(552, 1)), 0);
    $M.90 := $store.i64($M.90, $add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(560, 1)), 0);
    $M.90 := $store.i64($M.90, $add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(568, 1)), 0);
    $M.90 := $store.i64($M.90, $add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(576, 1)), 0);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(584, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(288, 1)), $mul.ref(592, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(888, 1)), $0.ref);
    $M.90 := $store.i32($M.90, $add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(896, 1)), 0);
    $M.90 := $store.ref($M.90, $add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(904, 1)), $0.ref);
    $M.90 := $store.i64($M.90, $add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(912, 1)), 0);
    $M.90 := $store.ref($M.90, $add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(920, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(928, 1)), $mul.ref(0, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(928, 1)), $mul.ref(8, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(944, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(952, 1)), $mul.ref(0, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(952, 1)), $mul.ref(8, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(968, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(976, 1)), $mul.ref(0, 1)), $0.ref);
    $M.90 := $store.i32($M.90, $add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(984, 1)), 0);
    $M.90 := $store.i32($M.90, $add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(988, 1)), 0);
    $M.90 := $store.i32($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(992, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.90 := $store.i32($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(992, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.90 := $store.i32($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(992, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(992, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(992, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(992, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(992, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(992, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.90 := $store.i32($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(992, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.90 := $store.i64($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(992, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(1064, 1)), $mul.ref(0, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(1064, 1)), $mul.ref(8, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(1080, 1)), $mul.ref(0, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(1080, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(1080, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.90 := $store.i32($M.90, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(1080, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.90 := $store.ref($M.90, $add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(1112, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(1120, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(1128, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref(xpc_chan_dbg_subname, $mul.ref(0, 1144)), $mul.ref(1136, 1)), $0.ref);
    $M.5 := xpc_part_dbg_subname;
    $M.17 := xpc_chan_dbg_subname;
    $M.7 := 90;
    call {:si_unique_call 1792} {:cexpr "xpc_disengage_timelimit"} boogie_si_record_i32(90);
    $M.1 := $store.i32($M.1, xpc_activate_IRQ_rcvd_lock, 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref(xpc_activate_IRQ_rcvd_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref(xpc_activate_IRQ_rcvd_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref(xpc_activate_IRQ_rcvd_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_activate_IRQ_rcvd_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_activate_IRQ_rcvd_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_activate_IRQ_rcvd_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_activate_IRQ_rcvd_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.2);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_activate_IRQ_rcvd_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_activate_IRQ_rcvd_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.1 := $store.i32($M.1, xpc_activate_IRQ_wq, 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_activate_IRQ_wq, $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_activate_IRQ_wq, $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(xpc_activate_IRQ_wq, $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_activate_IRQ_wq, $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_activate_IRQ_wq, $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_activate_IRQ_wq, $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_activate_IRQ_wq, $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.3);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_activate_IRQ_wq, $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_activate_IRQ_wq, $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(xpc_activate_IRQ_wq, $mul.ref(0, 88)), $mul.ref(72, 1)), $mul.ref(0, 1)), $add.ref(xpc_activate_IRQ_wq, $mul.ref(72, 1)));
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(xpc_activate_IRQ_wq, $mul.ref(0, 88)), $mul.ref(72, 1)), $mul.ref(8, 1)), $add.ref(xpc_activate_IRQ_wq, $mul.ref(72, 1)));
    $M.3 := $0.ref;
    $M.4 := $store.ref($M.4, xpc_arch_ops, $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(8, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(16, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(24, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(32, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(40, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(48, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(56, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(64, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(72, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(80, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(88, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(96, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(104, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(112, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(120, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(128, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(136, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(144, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(152, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(160, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(168, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(176, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(184, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(192, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(200, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(208, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(216, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(224, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(232, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(240, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(248, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(256, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(264, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(272, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(280, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(288, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(296, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(304, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(312, 1)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(320, 1)), $0.ref);
    $M.47 := 0;
    call {:si_unique_call 1793} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.48 := 0;
    call {:si_unique_call 1794} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.49 := 0;
    call {:si_unique_call 1795} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.50 := 0;
    call {:si_unique_call 1796} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    $M.51 := 0;
    call {:si_unique_call 1797} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    $M.52 := 0;
    call {:si_unique_call 1798} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.53 := $0.ref;
    $M.54 := 0;
    call {:si_unique_call 1799} {:cexpr "ldvarg26"} boogie_si_record_i64(0);
    $M.55 := $0.ref;
    $M.56 := $0.ref;
    $M.57 := 0;
    call {:si_unique_call 1800} {:cexpr "ldvarg29"} boogie_si_record_i64(0);
    $M.58 := $0.ref;
    $M.35 := 0;
    call {:si_unique_call 1801} {:cexpr "xpc_nasid_mask_nlongs"} boogie_si_record_i32(0);
    $M.37 := $0.ref;
    $M.14 := $0.ref;
    $M.2 := 0;
    call {:si_unique_call 1802} {:cexpr "xpc_disengage_timedout"} boogie_si_record_i32(0);
    $M.0 := 0;
    call {:si_unique_call 1803} {:cexpr "xpc_exiting"} boogie_si_record_i32(0);
    $M.62 := $0.ref;
    $M.63 := $0.ref;
    $M.64 := $0.ref;
    $M.65 := 0;
    call {:si_unique_call 1804} {:cexpr "ldvarg22"} boogie_si_record_i16(0);
    $M.66 := 0;
    call {:si_unique_call 1805} {:cexpr "ldvarg21"} boogie_si_record_i16(0);
    $M.67 := 0;
    call {:si_unique_call 1806} {:cexpr "ldvarg19"} boogie_si_record_i32(0);
    $M.68 := $0.ref;
    $M.69 := 0;
    call {:si_unique_call 1807} {:cexpr "ldvarg16"} boogie_si_record_i16(0);
    $M.70 := 0;
    call {:si_unique_call 1808} {:cexpr "ldvarg20"} boogie_si_record_i8(0);
    $M.71 := $0.ref;
    $M.72 := $0.ref;
    $M.73 := $0.ref;
    $M.74 := $0.ref;
    $M.75 := 0;
    call {:si_unique_call 1809} {:cexpr "ldvarg12"} boogie_si_record_i16(0);
    $M.77 := $0.ref;
    $M.78 := $0.ref;
    $M.79 := 0;
    call {:si_unique_call 1810} {:cexpr "ldvarg10"} boogie_si_record_i64(0);
    $M.80 := 0;
    call {:si_unique_call 1811} {:cexpr "ldvarg9"} boogie_si_record_i32(0);
    $M.81 := $0.ref;
    $M.82 := 0;
    call {:si_unique_call 1812} {:cexpr "ldvarg7"} boogie_si_record_i64(0);
    $M.83 := $0.ref;
    $M.84 := $0.ref;
    $M.85 := $0.ref;
    $M.86 := $0.ref;
    $M.87 := 0;
    call {:si_unique_call 1813} {:cexpr "ldvarg2"} boogie_si_record_i32(0);
    $M.88 := $0.ref;
    $M.89 := 0;
    call {:si_unique_call 1814} {:cexpr "ldvarg0"} boogie_si_record_i16(0);
    $M.23 := 0;
    call {:si_unique_call 1815} {:cexpr "xpc_activate_IRQ_rcvd"} boogie_si_record_i32(0);
    $M.24 := $0.ref;
    $M.33 := $sub.i32(0, 1);
    call {:si_unique_call 1816} {:cexpr "xpc_mq_node"} boogie_si_record_i32($sub.i32(0, 1));
    $M.4 := $store.ref($M.4, xpc_arch_ops_uv, xpc_setup_partitions_uv);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(xpc_arch_ops_uv, $mul.ref(0, 328)), $mul.ref(8, 1)), xpc_teardown_partitions_uv);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(xpc_arch_ops_uv, $mul.ref(0, 328)), $mul.ref(16, 1)), xpc_process_activate_IRQ_rcvd_uv);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(xpc_arch_ops_uv, $mul.ref(0, 328)), $mul.ref(24, 1)), xpc_get_partition_rsvd_page_pa_uv);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(xpc_arch_ops_uv, $mul.ref(0, 328)), $mul.ref(32, 1)), xpc_setup_rsvd_page_uv);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(xpc_arch_ops_uv, $mul.ref(0, 328)), $mul.ref(40, 1)), xpc_allow_hb_uv);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(xpc_arch_ops_uv, $mul.ref(0, 328)), $mul.ref(48, 1)), xpc_disallow_hb_uv);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(xpc_arch_ops_uv, $mul.ref(0, 328)), $mul.ref(56, 1)), xpc_disallow_all_hbs_uv);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(xpc_arch_ops_uv, $mul.ref(0, 328)), $mul.ref(64, 1)), xpc_increment_heartbeat_uv);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(xpc_arch_ops_uv, $mul.ref(0, 328)), $mul.ref(72, 1)), xpc_offline_heartbeat_uv);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(xpc_arch_ops_uv, $mul.ref(0, 328)), $mul.ref(80, 1)), xpc_online_heartbeat_uv);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(xpc_arch_ops_uv, $mul.ref(0, 328)), $mul.ref(88, 1)), xpc_heartbeat_init_uv);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(xpc_arch_ops_uv, $mul.ref(0, 328)), $mul.ref(96, 1)), xpc_heartbeat_exit_uv);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(xpc_arch_ops_uv, $mul.ref(0, 328)), $mul.ref(104, 1)), xpc_get_remote_heartbeat_uv);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(xpc_arch_ops_uv, $mul.ref(0, 328)), $mul.ref(112, 1)), xpc_request_partition_activation_uv);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(xpc_arch_ops_uv, $mul.ref(0, 328)), $mul.ref(120, 1)), xpc_request_partition_reactivation_uv);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(xpc_arch_ops_uv, $mul.ref(0, 328)), $mul.ref(128, 1)), xpc_request_partition_deactivation_uv);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(xpc_arch_ops_uv, $mul.ref(0, 328)), $mul.ref(136, 1)), xpc_cancel_partition_deactivation_request_uv);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(xpc_arch_ops_uv, $mul.ref(0, 328)), $mul.ref(144, 1)), xpc_setup_ch_structures_uv);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(xpc_arch_ops_uv, $mul.ref(0, 328)), $mul.ref(152, 1)), xpc_teardown_ch_structures_uv);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(xpc_arch_ops_uv, $mul.ref(0, 328)), $mul.ref(160, 1)), xpc_make_first_contact_uv);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(xpc_arch_ops_uv, $mul.ref(0, 328)), $mul.ref(168, 1)), xpc_get_chctl_all_flags_uv);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(xpc_arch_ops_uv, $mul.ref(0, 328)), $mul.ref(176, 1)), xpc_send_chctl_closerequest_uv);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(xpc_arch_ops_uv, $mul.ref(0, 328)), $mul.ref(184, 1)), xpc_send_chctl_closereply_uv);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(xpc_arch_ops_uv, $mul.ref(0, 328)), $mul.ref(192, 1)), xpc_send_chctl_openrequest_uv);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(xpc_arch_ops_uv, $mul.ref(0, 328)), $mul.ref(200, 1)), xpc_send_chctl_openreply_uv);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(xpc_arch_ops_uv, $mul.ref(0, 328)), $mul.ref(208, 1)), xpc_send_chctl_opencomplete_uv);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(xpc_arch_ops_uv, $mul.ref(0, 328)), $mul.ref(216, 1)), xpc_process_msg_chctl_flags_uv);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(xpc_arch_ops_uv, $mul.ref(0, 328)), $mul.ref(224, 1)), xpc_save_remote_msgqueue_pa_uv);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(xpc_arch_ops_uv, $mul.ref(0, 328)), $mul.ref(232, 1)), xpc_setup_msg_structures_uv);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(xpc_arch_ops_uv, $mul.ref(0, 328)), $mul.ref(240, 1)), xpc_teardown_msg_structures_uv);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(xpc_arch_ops_uv, $mul.ref(0, 328)), $mul.ref(248, 1)), xpc_indicate_partition_engaged_uv);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(xpc_arch_ops_uv, $mul.ref(0, 328)), $mul.ref(256, 1)), xpc_indicate_partition_disengaged_uv);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(xpc_arch_ops_uv, $mul.ref(0, 328)), $mul.ref(264, 1)), xpc_assume_partition_disengaged_uv);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(xpc_arch_ops_uv, $mul.ref(0, 328)), $mul.ref(272, 1)), xpc_partition_engaged_uv);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(xpc_arch_ops_uv, $mul.ref(0, 328)), $mul.ref(280, 1)), xpc_any_partition_engaged_uv);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(xpc_arch_ops_uv, $mul.ref(0, 328)), $mul.ref(288, 1)), xpc_n_of_deliverable_payloads_uv);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(xpc_arch_ops_uv, $mul.ref(0, 328)), $mul.ref(296, 1)), xpc_send_payload_uv);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(xpc_arch_ops_uv, $mul.ref(0, 328)), $mul.ref(304, 1)), xpc_get_deliverable_payload_uv);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(xpc_arch_ops_uv, $mul.ref(0, 328)), $mul.ref(312, 1)), xpc_received_payload_uv);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(xpc_arch_ops_uv, $mul.ref(0, 328)), $mul.ref(320, 1)), xpc_notify_senders_of_disconnect_uv);
    $M.1 := $store.i32($M.1, xpc_die_disconnecting, 0);
    call {:si_unique_call 1817} {:cexpr "xpc_die_disconnecting"} boogie_si_record_i32(0);
    $M.1 := $store.i32($M.1, xpc_discovery_exited, 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_discovery_exited, $mul.ref(0, 96)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_discovery_exited, $mul.ref(0, 96)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_discovery_exited, $mul.ref(0, 96)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_discovery_exited, $mul.ref(0, 96)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_discovery_exited, $mul.ref(0, 96)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_discovery_exited, $mul.ref(0, 96)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_discovery_exited, $mul.ref(0, 96)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_discovery_exited, $mul.ref(0, 96)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.85);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_discovery_exited, $mul.ref(0, 96)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_discovery_exited, $mul.ref(0, 96)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref(xpc_discovery_exited, $mul.ref(0, 96)), $mul.ref(8, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $add.ref(xpc_discovery_exited, $mul.ref(80, 1)));
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref(xpc_discovery_exited, $mul.ref(0, 96)), $mul.ref(8, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $add.ref(xpc_discovery_exited, $mul.ref(80, 1)));
    $M.1 := $store.i32($M.1, xpc_hb_checker_exited, 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_hb_checker_exited, $mul.ref(0, 96)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_hb_checker_exited, $mul.ref(0, 96)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_hb_checker_exited, $mul.ref(0, 96)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_hb_checker_exited, $mul.ref(0, 96)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_hb_checker_exited, $mul.ref(0, 96)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_hb_checker_exited, $mul.ref(0, 96)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_hb_checker_exited, $mul.ref(0, 96)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_hb_checker_exited, $mul.ref(0, 96)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.82);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_hb_checker_exited, $mul.ref(0, 96)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(xpc_hb_checker_exited, $mul.ref(0, 96)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref(xpc_hb_checker_exited, $mul.ref(0, 96)), $mul.ref(8, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $add.ref(xpc_hb_checker_exited, $mul.ref(80, 1)));
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref(xpc_hb_checker_exited, $mul.ref(0, 96)), $mul.ref(8, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $add.ref(xpc_hb_checker_exited, $mul.ref(80, 1)));
    $M.1 := $store.ref($M.1, xpc_hb_timer, $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(xpc_hb_timer, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.i64($M.1, $add.ref($add.ref(xpc_hb_timer, $mul.ref(0, 128)), $mul.ref(16, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(xpc_hb_timer, $mul.ref(0, 128)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(xpc_hb_timer, $mul.ref(0, 128)), $mul.ref(32, 1)), $0.ref);
    $M.1 := $store.i64($M.1, $add.ref($add.ref(xpc_hb_timer, $mul.ref(0, 128)), $mul.ref(40, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref(xpc_hb_timer, $mul.ref(0, 128)), $mul.ref(48, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref(xpc_hb_timer, $mul.ref(0, 128)), $mul.ref(52, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(xpc_hb_timer, $mul.ref(0, 128)), $mul.ref(56, 1)), $0.ref);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(xpc_hb_timer, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(xpc_hb_timer, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(1, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(xpc_hb_timer, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(2, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(xpc_hb_timer, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(3, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(xpc_hb_timer, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(4, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(xpc_hb_timer, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(5, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(xpc_hb_timer, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(6, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(xpc_hb_timer, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(7, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(xpc_hb_timer, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(8, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(xpc_hb_timer, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(9, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(xpc_hb_timer, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(10, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(xpc_hb_timer, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(11, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(xpc_hb_timer, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(12, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(xpc_hb_timer, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(13, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(xpc_hb_timer, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(14, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(xpc_hb_timer, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(15, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(xpc_hb_timer, $mul.ref(0, 128)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref(xpc_hb_timer, $mul.ref(0, 128)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref(xpc_hb_timer, $mul.ref(0, 128)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(xpc_hb_timer, $mul.ref(0, 128)), $mul.ref(80, 1)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(xpc_hb_timer, $mul.ref(0, 128)), $mul.ref(80, 1)), $mul.ref(32, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref(xpc_hb_timer, $mul.ref(0, 128)), $mul.ref(80, 1)), $mul.ref(40, 1)), 0);
    $M.40 := 0;
    call {:si_unique_call 1818} {:cexpr "xpc_hb_check_timeout"} boogie_si_record_i64(0);
    $M.90 := $store.ref($M.90, xpc_die_notifier, xpc_system_die);
    $M.90 := $store.ref($M.90, $add.ref($add.ref(xpc_die_notifier, $mul.ref(0, 24)), $mul.ref(8, 1)), $0.ref);
    $M.90 := $store.i32($M.90, $add.ref($add.ref(xpc_die_notifier, $mul.ref(0, 24)), $mul.ref(16, 1)), 0);
    $M.90 := $store.ref($M.90, xpc_reboot_notifier, xpc_system_reboot);
    $M.90 := $store.ref($M.90, $add.ref($add.ref(xpc_reboot_notifier, $mul.ref(0, 24)), $mul.ref(8, 1)), $0.ref);
    $M.90 := $store.i32($M.90, $add.ref($add.ref(xpc_reboot_notifier, $mul.ref(0, 24)), $mul.ref(16, 1)), 0);
    call {:si_unique_call 1819} {:cexpr "xpc_disengage_max_timelimit"} boogie_si_record_i32(120);
    call {:si_unique_call 1820} {:cexpr "xpc_disengage_min_timelimit"} boogie_si_record_i32(0);
    $M.93 := $store.i32($M.93, xpc_hb_check_max_interval, 120);
    call {:si_unique_call 1821} {:cexpr "xpc_hb_check_max_interval"} boogie_si_record_i32(120);
    $M.94 := $store.i32($M.94, xpc_hb_check_min_interval, 10);
    call {:si_unique_call 1822} {:cexpr "xpc_hb_check_min_interval"} boogie_si_record_i32(10);
    $M.39 := $store.i32($M.39, xpc_hb_check_interval, 20);
    call {:si_unique_call 1823} {:cexpr "xpc_hb_check_interval"} boogie_si_record_i32(20);
    $M.93 := $store.i32($M.93, xpc_hb_max_interval, 10);
    call {:si_unique_call 1824} {:cexpr "xpc_hb_max_interval"} boogie_si_record_i32(10);
    $M.94 := $store.i32($M.94, xpc_hb_min_interval, 1);
    call {:si_unique_call 1825} {:cexpr "xpc_hb_min_interval"} boogie_si_record_i32(1);
    $M.39 := $store.i32($M.39, xpc_hb_interval, 5);
    call {:si_unique_call 1826} {:cexpr "xpc_hb_interval"} boogie_si_record_i32(5);
    $M.95 := $store.ref($M.95, xpc_sys_xpc_hb_dir, .str.74);
    $M.96 := $store.ref($M.96, $add.ref($add.ref($add.ref(xpc_sys_xpc_hb_dir, $mul.ref(0, 192)), $mul.ref(0, 64)), $mul.ref(8, 1)), xpc_hb_interval);
    $M.97 := $store.i32($M.97, $add.ref($add.ref($add.ref(xpc_sys_xpc_hb_dir, $mul.ref(0, 192)), $mul.ref(0, 64)), $mul.ref(16, 1)), 4);
    $M.98 := $store.i16($M.98, $add.ref($add.ref($add.ref(xpc_sys_xpc_hb_dir, $mul.ref(0, 192)), $mul.ref(0, 64)), $mul.ref(20, 1)), 420);
    $M.99 := $store.ref($M.99, $add.ref($add.ref($add.ref(xpc_sys_xpc_hb_dir, $mul.ref(0, 192)), $mul.ref(0, 64)), $mul.ref(24, 1)), $0.ref);
    $M.100 := $store.ref($M.100, $add.ref($add.ref($add.ref(xpc_sys_xpc_hb_dir, $mul.ref(0, 192)), $mul.ref(0, 64)), $mul.ref(32, 1)), proc_dointvec_minmax);
    $M.101 := $store.ref($M.101, $add.ref($add.ref($add.ref(xpc_sys_xpc_hb_dir, $mul.ref(0, 192)), $mul.ref(0, 64)), $mul.ref(40, 1)), $0.ref);
    $M.102 := $store.ref($M.102, $add.ref($add.ref($add.ref(xpc_sys_xpc_hb_dir, $mul.ref(0, 192)), $mul.ref(0, 64)), $mul.ref(48, 1)), xpc_hb_min_interval);
    $M.103 := $store.ref($M.103, $add.ref($add.ref($add.ref(xpc_sys_xpc_hb_dir, $mul.ref(0, 192)), $mul.ref(0, 64)), $mul.ref(56, 1)), xpc_hb_max_interval);
    $M.95 := $store.ref($M.95, $add.ref($add.ref($add.ref(xpc_sys_xpc_hb_dir, $mul.ref(0, 192)), $mul.ref(1, 64)), $mul.ref(0, 1)), .str.75);
    $M.96 := $store.ref($M.96, $add.ref($add.ref($add.ref(xpc_sys_xpc_hb_dir, $mul.ref(0, 192)), $mul.ref(1, 64)), $mul.ref(8, 1)), xpc_hb_check_interval);
    $M.97 := $store.i32($M.97, $add.ref($add.ref($add.ref(xpc_sys_xpc_hb_dir, $mul.ref(0, 192)), $mul.ref(1, 64)), $mul.ref(16, 1)), 4);
    $M.98 := $store.i16($M.98, $add.ref($add.ref($add.ref(xpc_sys_xpc_hb_dir, $mul.ref(0, 192)), $mul.ref(1, 64)), $mul.ref(20, 1)), 420);
    $M.99 := $store.ref($M.99, $add.ref($add.ref($add.ref(xpc_sys_xpc_hb_dir, $mul.ref(0, 192)), $mul.ref(1, 64)), $mul.ref(24, 1)), $0.ref);
    $M.100 := $store.ref($M.100, $add.ref($add.ref($add.ref(xpc_sys_xpc_hb_dir, $mul.ref(0, 192)), $mul.ref(1, 64)), $mul.ref(32, 1)), proc_dointvec_minmax);
    $M.101 := $store.ref($M.101, $add.ref($add.ref($add.ref(xpc_sys_xpc_hb_dir, $mul.ref(0, 192)), $mul.ref(1, 64)), $mul.ref(40, 1)), $0.ref);
    $M.102 := $store.ref($M.102, $add.ref($add.ref($add.ref(xpc_sys_xpc_hb_dir, $mul.ref(0, 192)), $mul.ref(1, 64)), $mul.ref(48, 1)), xpc_hb_check_min_interval);
    $M.103 := $store.ref($M.103, $add.ref($add.ref($add.ref(xpc_sys_xpc_hb_dir, $mul.ref(0, 192)), $mul.ref(1, 64)), $mul.ref(56, 1)), xpc_hb_check_max_interval);
    $M.95 := $store.ref($M.95, $add.ref($add.ref($add.ref(xpc_sys_xpc_hb_dir, $mul.ref(0, 192)), $mul.ref(2, 64)), $mul.ref(0, 1)), $0.ref);
    $M.96 := $store.ref($M.96, $add.ref($add.ref($add.ref(xpc_sys_xpc_hb_dir, $mul.ref(0, 192)), $mul.ref(2, 64)), $mul.ref(8, 1)), $0.ref);
    $M.97 := $store.i32($M.97, $add.ref($add.ref($add.ref(xpc_sys_xpc_hb_dir, $mul.ref(0, 192)), $mul.ref(2, 64)), $mul.ref(16, 1)), 0);
    $M.98 := $store.i16($M.98, $add.ref($add.ref($add.ref(xpc_sys_xpc_hb_dir, $mul.ref(0, 192)), $mul.ref(2, 64)), $mul.ref(20, 1)), 0);
    $M.99 := $store.ref($M.99, $add.ref($add.ref($add.ref(xpc_sys_xpc_hb_dir, $mul.ref(0, 192)), $mul.ref(2, 64)), $mul.ref(24, 1)), $0.ref);
    $M.100 := $store.ref($M.100, $add.ref($add.ref($add.ref(xpc_sys_xpc_hb_dir, $mul.ref(0, 192)), $mul.ref(2, 64)), $mul.ref(32, 1)), $0.ref);
    $M.101 := $store.ref($M.101, $add.ref($add.ref($add.ref(xpc_sys_xpc_hb_dir, $mul.ref(0, 192)), $mul.ref(2, 64)), $mul.ref(40, 1)), $0.ref);
    $M.102 := $store.ref($M.102, $add.ref($add.ref($add.ref(xpc_sys_xpc_hb_dir, $mul.ref(0, 192)), $mul.ref(2, 64)), $mul.ref(48, 1)), $0.ref);
    $M.103 := $store.ref($M.103, $add.ref($add.ref($add.ref(xpc_sys_xpc_hb_dir, $mul.ref(0, 192)), $mul.ref(2, 64)), $mul.ref(56, 1)), $0.ref);
    $M.104 := $store.ref($M.104, xpc_sys_xpc_dir, .str.72);
    $M.105 := $store.ref($M.105, $add.ref($add.ref($add.ref(xpc_sys_xpc_dir, $mul.ref(0, 192)), $mul.ref(0, 64)), $mul.ref(8, 1)), $0.ref);
    $M.106 := $store.i32($M.106, $add.ref($add.ref($add.ref(xpc_sys_xpc_dir, $mul.ref(0, 192)), $mul.ref(0, 64)), $mul.ref(16, 1)), 0);
    $M.107 := $store.i16($M.107, $add.ref($add.ref($add.ref(xpc_sys_xpc_dir, $mul.ref(0, 192)), $mul.ref(0, 64)), $mul.ref(20, 1)), 365);
    $M.108 := $store.ref($M.108, $add.ref($add.ref($add.ref(xpc_sys_xpc_dir, $mul.ref(0, 192)), $mul.ref(0, 64)), $mul.ref(24, 1)), xpc_sys_xpc_hb_dir);
    $M.109 := $store.ref($M.109, $add.ref($add.ref($add.ref(xpc_sys_xpc_dir, $mul.ref(0, 192)), $mul.ref(0, 64)), $mul.ref(32, 1)), $0.ref);
    $M.110 := $store.ref($M.110, $add.ref($add.ref($add.ref(xpc_sys_xpc_dir, $mul.ref(0, 192)), $mul.ref(0, 64)), $mul.ref(40, 1)), $0.ref);
    $M.111 := $store.ref($M.111, $add.ref($add.ref($add.ref(xpc_sys_xpc_dir, $mul.ref(0, 192)), $mul.ref(0, 64)), $mul.ref(48, 1)), $0.ref);
    $M.112 := $store.ref($M.112, $add.ref($add.ref($add.ref(xpc_sys_xpc_dir, $mul.ref(0, 192)), $mul.ref(0, 64)), $mul.ref(56, 1)), $0.ref);
    $M.104 := $store.ref($M.104, $add.ref($add.ref($add.ref(xpc_sys_xpc_dir, $mul.ref(0, 192)), $mul.ref(1, 64)), $mul.ref(0, 1)), .str.73);
    $M.105 := $store.ref($M.105, $add.ref($add.ref($add.ref(xpc_sys_xpc_dir, $mul.ref(0, 192)), $mul.ref(1, 64)), $mul.ref(8, 1)), xpc_disengage_timelimit);
    $M.106 := $store.i32($M.106, $add.ref($add.ref($add.ref(xpc_sys_xpc_dir, $mul.ref(0, 192)), $mul.ref(1, 64)), $mul.ref(16, 1)), 4);
    $M.107 := $store.i16($M.107, $add.ref($add.ref($add.ref(xpc_sys_xpc_dir, $mul.ref(0, 192)), $mul.ref(1, 64)), $mul.ref(20, 1)), 420);
    $M.108 := $store.ref($M.108, $add.ref($add.ref($add.ref(xpc_sys_xpc_dir, $mul.ref(0, 192)), $mul.ref(1, 64)), $mul.ref(24, 1)), $0.ref);
    $M.109 := $store.ref($M.109, $add.ref($add.ref($add.ref(xpc_sys_xpc_dir, $mul.ref(0, 192)), $mul.ref(1, 64)), $mul.ref(32, 1)), proc_dointvec_minmax);
    $M.110 := $store.ref($M.110, $add.ref($add.ref($add.ref(xpc_sys_xpc_dir, $mul.ref(0, 192)), $mul.ref(1, 64)), $mul.ref(40, 1)), $0.ref);
    $M.111 := $store.ref($M.111, $add.ref($add.ref($add.ref(xpc_sys_xpc_dir, $mul.ref(0, 192)), $mul.ref(1, 64)), $mul.ref(48, 1)), xpc_disengage_min_timelimit);
    $M.112 := $store.ref($M.112, $add.ref($add.ref($add.ref(xpc_sys_xpc_dir, $mul.ref(0, 192)), $mul.ref(1, 64)), $mul.ref(56, 1)), xpc_disengage_max_timelimit);
    $M.104 := $store.ref($M.104, $add.ref($add.ref($add.ref(xpc_sys_xpc_dir, $mul.ref(0, 192)), $mul.ref(2, 64)), $mul.ref(0, 1)), $0.ref);
    $M.105 := $store.ref($M.105, $add.ref($add.ref($add.ref(xpc_sys_xpc_dir, $mul.ref(0, 192)), $mul.ref(2, 64)), $mul.ref(8, 1)), $0.ref);
    $M.106 := $store.i32($M.106, $add.ref($add.ref($add.ref(xpc_sys_xpc_dir, $mul.ref(0, 192)), $mul.ref(2, 64)), $mul.ref(16, 1)), 0);
    $M.107 := $store.i16($M.107, $add.ref($add.ref($add.ref(xpc_sys_xpc_dir, $mul.ref(0, 192)), $mul.ref(2, 64)), $mul.ref(20, 1)), 0);
    $M.108 := $store.ref($M.108, $add.ref($add.ref($add.ref(xpc_sys_xpc_dir, $mul.ref(0, 192)), $mul.ref(2, 64)), $mul.ref(24, 1)), $0.ref);
    $M.109 := $store.ref($M.109, $add.ref($add.ref($add.ref(xpc_sys_xpc_dir, $mul.ref(0, 192)), $mul.ref(2, 64)), $mul.ref(32, 1)), $0.ref);
    $M.110 := $store.ref($M.110, $add.ref($add.ref($add.ref(xpc_sys_xpc_dir, $mul.ref(0, 192)), $mul.ref(2, 64)), $mul.ref(40, 1)), $0.ref);
    $M.111 := $store.ref($M.111, $add.ref($add.ref($add.ref(xpc_sys_xpc_dir, $mul.ref(0, 192)), $mul.ref(2, 64)), $mul.ref(48, 1)), $0.ref);
    $M.112 := $store.ref($M.112, $add.ref($add.ref($add.ref(xpc_sys_xpc_dir, $mul.ref(0, 192)), $mul.ref(2, 64)), $mul.ref(56, 1)), $0.ref);
    $M.113 := $store.ref($M.113, xpc_sys_dir, .str);
    $M.114 := $store.ref($M.114, $add.ref($add.ref($add.ref(xpc_sys_dir, $mul.ref(0, 128)), $mul.ref(0, 64)), $mul.ref(8, 1)), $0.ref);
    $M.115 := $store.i32($M.115, $add.ref($add.ref($add.ref(xpc_sys_dir, $mul.ref(0, 128)), $mul.ref(0, 64)), $mul.ref(16, 1)), 0);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(xpc_sys_dir, $mul.ref(0, 128)), $mul.ref(0, 64)), $mul.ref(20, 1)), 365);
    $M.117 := $store.ref($M.117, $add.ref($add.ref($add.ref(xpc_sys_dir, $mul.ref(0, 128)), $mul.ref(0, 64)), $mul.ref(24, 1)), xpc_sys_xpc_dir);
    $M.118 := $store.ref($M.118, $add.ref($add.ref($add.ref(xpc_sys_dir, $mul.ref(0, 128)), $mul.ref(0, 64)), $mul.ref(32, 1)), $0.ref);
    $M.119 := $store.ref($M.119, $add.ref($add.ref($add.ref(xpc_sys_dir, $mul.ref(0, 128)), $mul.ref(0, 64)), $mul.ref(40, 1)), $0.ref);
    $M.120 := $store.ref($M.120, $add.ref($add.ref($add.ref(xpc_sys_dir, $mul.ref(0, 128)), $mul.ref(0, 64)), $mul.ref(48, 1)), $0.ref);
    $M.121 := $store.ref($M.121, $add.ref($add.ref($add.ref(xpc_sys_dir, $mul.ref(0, 128)), $mul.ref(0, 64)), $mul.ref(56, 1)), $0.ref);
    $M.113 := $store.ref($M.113, $add.ref($add.ref($add.ref(xpc_sys_dir, $mul.ref(0, 128)), $mul.ref(1, 64)), $mul.ref(0, 1)), $0.ref);
    $M.114 := $store.ref($M.114, $add.ref($add.ref($add.ref(xpc_sys_dir, $mul.ref(0, 128)), $mul.ref(1, 64)), $mul.ref(8, 1)), $0.ref);
    $M.115 := $store.i32($M.115, $add.ref($add.ref($add.ref(xpc_sys_dir, $mul.ref(0, 128)), $mul.ref(1, 64)), $mul.ref(16, 1)), 0);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(xpc_sys_dir, $mul.ref(0, 128)), $mul.ref(1, 64)), $mul.ref(20, 1)), 0);
    $M.117 := $store.ref($M.117, $add.ref($add.ref($add.ref(xpc_sys_dir, $mul.ref(0, 128)), $mul.ref(1, 64)), $mul.ref(24, 1)), $0.ref);
    $M.118 := $store.ref($M.118, $add.ref($add.ref($add.ref(xpc_sys_dir, $mul.ref(0, 128)), $mul.ref(1, 64)), $mul.ref(32, 1)), $0.ref);
    $M.119 := $store.ref($M.119, $add.ref($add.ref($add.ref(xpc_sys_dir, $mul.ref(0, 128)), $mul.ref(1, 64)), $mul.ref(40, 1)), $0.ref);
    $M.120 := $store.ref($M.120, $add.ref($add.ref($add.ref(xpc_sys_dir, $mul.ref(0, 128)), $mul.ref(1, 64)), $mul.ref(48, 1)), $0.ref);
    $M.121 := $store.ref($M.121, $add.ref($add.ref($add.ref(xpc_sys_dir, $mul.ref(0, 128)), $mul.ref(1, 64)), $mul.ref(56, 1)), $0.ref);
    $M.32 := 0;
    call {:si_unique_call 1827} {:cexpr "ldv_mutex_mutex_of_xpc_registration"} boogie_si_record_i32(0);
    $M.61 := 0;
    call {:si_unique_call 1828} {:cexpr "ldv_mutex_mutex_of_device"} boogie_si_record_i32(0);
    $M.60 := 0;
    call {:si_unique_call 1829} {:cexpr "ldv_mutex_lock"} boogie_si_record_i32(0);
    $M.59 := 0;
    call {:si_unique_call 1830} {:cexpr "ldv_mutex_cred_guard_mutex_of_signal_struct"} boogie_si_record_i32(0);
    $M.28 := 0;
    call {:si_unique_call 1831} {:cexpr "ldv_mutex_cached_activate_gru_mq_desc_mutex_of_xpc_partition_uv"} boogie_si_record_i32(0);
    $M.15 := $0.ref;
    $M.16 := $0.ref;
    $M.34 := 0;
    call {:si_unique_call 1832} {:cexpr "xpc_nasid_mask_nbytes"} boogie_si_record_i32(0);
    $M.36 := $0.ref;
    $M.6 := $0.ref;
    call {:si_unique_call 1833} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 561751);

procedure devirtbounce(funcPtr: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation devirtbounce(funcPtr: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i4: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i4 := $eq.ref(xpc_any_partition_engaged_uv, $p0);
    assume true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i4 == 1);
    $i3 := $eq.ref(xpc_setup_partitions_uv, $p0);
    assume true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i3 == 1);
    assume false;
    return;

  $bb2:
    assume $i3 == 1;
    call {:si_unique_call 1834} $i1 := xpc_setup_partitions_uv();
    $r := $i1;
    return;

  $bb3:
    assume $i4 == 1;
    call {:si_unique_call 1835} $i2 := xpc_any_partition_engaged_uv();
    $r := $i2;
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 562783);

procedure devirtbounce.1(funcPtr: ref, arg: i16) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.1(funcPtr: ref, arg: i16) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(xpc_partition_engaged_uv, $p0);
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 1836} $i1 := xpc_partition_engaged_uv(arg);
    $r := $i1;
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 563815);

procedure devirtbounce.2(funcPtr: ref, arg: i16);
  free requires assertsPassed;
  modifies $M.1, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.2, $M.23, $CurrAddr, $M.28, $M.0, assertsPassed;



implementation devirtbounce.2(funcPtr: ref, arg: i16)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i32;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i11 := $eq.ref(xpc_timeout_partition_disengage, $p0);
    assume true;
    goto $bb8, $bb15;

  $bb15:
    assume !($i11 == 1);
    $i10 := $eq.ref(xpc_hb_beater, $p0);
    assume true;
    goto $bb7, $bb14;

  $bb14:
    assume !($i10 == 1);
    $i9 := $eq.ref(xpc_initiate_disconnect, $p0);
    assume true;
    goto $bb6, $bb13;

  $bb13:
    assume !($i9 == 1);
    $i8 := $eq.ref(xpc_initiate_connect, $p0);
    assume true;
    goto $bb5, $bb12;

  $bb12:
    assume !($i8 == 1);
    $i7 := $eq.ref(xpc_assume_partition_disengaged_uv, $p0);
    assume true;
    goto $bb4, $bb11;

  $bb11:
    assume !($i7 == 1);
    $i6 := $eq.ref(xpc_disallow_hb_uv, $p0);
    assume {:branchcond $i6} true;
    goto $bb3, $bb10;

  $bb10:
    assume !($i6 == 1);
    $i5 := $eq.ref(xpc_allow_hb_uv, $p0);
    assume true;
    goto $bb2, $bb9;

  $bb9:
    assume !($i5 == 1);
    assume false;
    return;

  $bb2:
    assume $i5 == 1;
    call {:si_unique_call 1837} xpc_allow_hb_uv(arg);
    return;

  $bb3:
    assume $i6 == 1;
    call {:si_unique_call 1838} xpc_disallow_hb_uv(arg);
    return;

  $bb4:
    assume $i7 == 1;
    call {:si_unique_call 1839} xpc_assume_partition_disengaged_uv(arg);
    return;

  $bb5:
    assume $i8 == 1;
    $i1 := $zext.i16.i32(arg);
    call {:si_unique_call 1840} xpc_initiate_connect($i1);
    goto SeqInstr_757, SeqInstr_758;

  SeqInstr_758:
    assume assertsPassed;
    goto SeqInstr_759;

  SeqInstr_759:
    return;

  SeqInstr_757:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i9 == 1;
    $i2 := $zext.i16.i32(arg);
    call {:si_unique_call 1841} xpc_initiate_disconnect($i2);
    goto SeqInstr_760, SeqInstr_761;

  SeqInstr_761:
    assume assertsPassed;
    goto SeqInstr_762;

  SeqInstr_762:
    return;

  SeqInstr_760:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i10 == 1;
    $i3 := $zext.i16.i64(arg);
    call {:si_unique_call 1842} xpc_hb_beater($i3);
    goto SeqInstr_763, SeqInstr_764;

  SeqInstr_764:
    assume assertsPassed;
    goto SeqInstr_765;

  SeqInstr_765:
    return;

  SeqInstr_763:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i11 == 1;
    $i4 := $zext.i16.i64(arg);
    call {:si_unique_call 1843} xpc_timeout_partition_disengage($i4);
    goto SeqInstr_766, SeqInstr_767;

  SeqInstr_767:
    assume assertsPassed;
    goto SeqInstr_768;

  SeqInstr_768:
    return;

  SeqInstr_766:
    assume !assertsPassed;
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 564847);

procedure devirtbounce.3(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.1, $M.23, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $CurrAddr, $M.28, assertsPassed, $M.0, $M.2;



implementation devirtbounce.3(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i10 := $eq.ref(xpc_notify_senders_of_disconnect_uv, $p0);
    assume true;
    goto $bb9, $bb17;

  $bb17:
    assume !($i10 == 1);
    $i9 := $eq.ref(xpc_indicate_partition_disengaged_uv, $p0);
    assume true;
    goto $bb8, $bb16;

  $bb16:
    assume !($i9 == 1);
    $i8 := $eq.ref(xpc_indicate_partition_engaged_uv, $p0);
    assume true;
    goto $bb7, $bb15;

  $bb15:
    assume !($i8 == 1);
    $i7 := $eq.ref(xpc_teardown_msg_structures_uv, $p0);
    assume true;
    goto $bb6, $bb14;

  $bb14:
    assume !($i7 == 1);
    $i6 := $eq.ref(xpc_teardown_ch_structures_uv, $p0);
    assume {:branchcond $i6} true;
    goto $bb5, $bb13;

  $bb13:
    assume !($i6 == 1);
    $i5 := $eq.ref(xpc_cancel_partition_deactivation_request_uv, $p0);
    assume true;
    goto $bb4, $bb12;

  $bb12:
    assume !($i5 == 1);
    $i4 := $eq.ref(xpc_request_partition_deactivation_uv, $p0);
    assume true;
    goto $bb3, $bb11;

  $bb11:
    assume !($i4 == 1);
    $i3 := $eq.ref(xpc_request_partition_reactivation_uv, $p0);
    assume true;
    goto $bb2, $bb10;

  $bb10:
    assume !($i3 == 1);
    assume false;
    return;

  $bb2:
    assume $i3 == 1;
    call {:si_unique_call 1844} xpc_request_partition_reactivation_uv(arg);
    return;

  $bb3:
    assume $i4 == 1;
    call {:si_unique_call 1845} xpc_request_partition_deactivation_uv(arg);
    goto SeqInstr_769, SeqInstr_770;

  SeqInstr_770:
    assume assertsPassed;
    goto SeqInstr_771;

  SeqInstr_771:
    return;

  SeqInstr_769:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i5 == 1;
    call {:si_unique_call 1846} xpc_cancel_partition_deactivation_request_uv(arg);
    return;

  $bb5:
    assume $i6 == 1;
    call {:si_unique_call 1847} xpc_teardown_ch_structures_uv(arg);
    return;

  $bb6:
    assume $i7 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1848} xpc_teardown_msg_structures_uv($p1);
    return;

  $bb7:
    assume $i8 == 1;
    call {:si_unique_call 1849} xpc_indicate_partition_engaged_uv(arg);
    goto SeqInstr_772, SeqInstr_773;

  SeqInstr_773:
    assume assertsPassed;
    goto SeqInstr_774;

  SeqInstr_774:
    return;

  SeqInstr_772:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i9 == 1;
    call {:si_unique_call 1850} xpc_indicate_partition_disengaged_uv(arg);
    goto SeqInstr_775, SeqInstr_776;

  SeqInstr_776:
    assume assertsPassed;
    goto SeqInstr_777;

  SeqInstr_777:
    return;

  SeqInstr_775:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i10 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1851} xpc_notify_senders_of_disconnect_uv($p2);
    goto SeqInstr_778, SeqInstr_779;

  SeqInstr_779:
    assume assertsPassed;
    goto SeqInstr_780;

  SeqInstr_780:
    return;

  SeqInstr_778:
    assume !assertsPassed;
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 565879);

procedure devirtbounce.4(funcPtr: ref);
  free requires assertsPassed;
  modifies $M.1, $M.23, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.28, assertsPassed, $CurrAddr, $M.0, $M.2;



implementation devirtbounce.4(funcPtr: ref)
{
  var $p0: ref;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i8 := $eq.ref(xpc_heartbeat_exit_uv, $p0);
    assume true;
    goto $bb9, $bb17;

  $bb17:
    assume !($i8 == 1);
    $i7 := $eq.ref(xpc_heartbeat_init_uv, $p0);
    assume true;
    goto $bb8, $bb16;

  $bb16:
    assume !($i7 == 1);
    $i6 := $eq.ref(xpc_online_heartbeat_uv, $p0);
    assume {:branchcond $i6} true;
    goto $bb7, $bb15;

  $bb15:
    assume !($i6 == 1);
    $i5 := $eq.ref(xpc_offline_heartbeat_uv, $p0);
    assume true;
    goto $bb6, $bb14;

  $bb14:
    assume !($i5 == 1);
    $i4 := $eq.ref(xpc_increment_heartbeat_uv, $p0);
    assume true;
    goto $bb5, $bb13;

  $bb13:
    assume !($i4 == 1);
    $i3 := $eq.ref(xpc_disallow_all_hbs_uv, $p0);
    assume true;
    goto $bb4, $bb12;

  $bb12:
    assume !($i3 == 1);
    $i2 := $eq.ref(xpc_process_activate_IRQ_rcvd_uv, $p0);
    assume true;
    goto $bb3, $bb11;

  $bb11:
    assume !($i2 == 1);
    $i1 := $eq.ref(xpc_teardown_partitions_uv, $p0);
    assume true;
    goto $bb2, $bb10;

  $bb10:
    assume !($i1 == 1);
    assume false;
    return;

  $bb2:
    assume $i1 == 1;
    call {:si_unique_call 1852} xpc_teardown_partitions_uv();
    goto SeqInstr_781, SeqInstr_782;

  SeqInstr_782:
    assume assertsPassed;
    goto SeqInstr_783;

  SeqInstr_783:
    return;

  SeqInstr_781:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i2 == 1;
    call {:si_unique_call 1853} xpc_process_activate_IRQ_rcvd_uv();
    goto SeqInstr_784, SeqInstr_785;

  SeqInstr_785:
    assume assertsPassed;
    goto SeqInstr_786;

  SeqInstr_786:
    return;

  SeqInstr_784:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i3 == 1;
    call {:si_unique_call 1854} xpc_disallow_all_hbs_uv();
    return;

  $bb5:
    assume $i4 == 1;
    call {:si_unique_call 1855} xpc_increment_heartbeat_uv();
    return;

  $bb6:
    assume $i5 == 1;
    call {:si_unique_call 1856} xpc_offline_heartbeat_uv();
    return;

  $bb7:
    assume $i6 == 1;
    call {:si_unique_call 1857} xpc_online_heartbeat_uv();
    return;

  $bb8:
    assume $i7 == 1;
    call {:si_unique_call 1858} xpc_heartbeat_init_uv();
    return;

  $bb9:
    assume $i8 == 1;
    call {:si_unique_call 1859} xpc_heartbeat_exit_uv();
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 566911);

procedure devirtbounce.5(funcPtr: ref, arg: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation devirtbounce.5(funcPtr: ref, arg: ref) returns ($r: i64)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i3 := $eq.ref(xpc_get_chctl_all_flags_uv, $p0);
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume false;
    return;

  $bb2:
    assume $i3 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1860} $i2 := xpc_get_chctl_all_flags_uv($p1);
    $r := $i2;
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 567943);

procedure devirtbounce.6(funcPtr: ref, arg: i64, arg1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.6(funcPtr: ref, arg: i64, arg1: i64) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.7: ref;

axiom devirtbounce.7 == $sub.ref(0, 568975);

procedure devirtbounce.7(funcPtr: ref, arg: ref, arg1: i32, arg2: i64);
  free requires assertsPassed;



implementation devirtbounce.7(funcPtr: ref, arg: ref, arg1: i32, arg2: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.8: ref;

axiom devirtbounce.8 == $sub.ref(0, 570007);

procedure devirtbounce.8(funcPtr: ref, arg: ref, arg1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $CurrAddr, $M.23, $M.28, assertsPassed, $M.0, $M.2;



implementation devirtbounce.8(funcPtr: ref, arg: ref, arg1: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i7 := $eq.ref(xpc_received_payload_uv, $p0);
    assume true;
    goto $bb7, $bb13;

  $bb13:
    assume !($i7 == 1);
    $i6 := $eq.ref(xpc_send_chctl_opencomplete_uv, $p0);
    assume {:branchcond $i6} true;
    goto $bb6, $bb12;

  $bb12:
    assume !($i6 == 1);
    $i5 := $eq.ref(xpc_send_chctl_openreply_uv, $p0);
    assume true;
    goto $bb5, $bb11;

  $bb11:
    assume !($i5 == 1);
    $i4 := $eq.ref(xpc_send_chctl_openrequest_uv, $p0);
    assume true;
    goto $bb4, $bb10;

  $bb10:
    assume !($i4 == 1);
    $i3 := $eq.ref(xpc_send_chctl_closereply_uv, $p0);
    assume true;
    goto $bb3, $bb9;

  $bb9:
    assume !($i3 == 1);
    $i2 := $eq.ref(xpc_send_chctl_closerequest_uv, $p0);
    assume true;
    goto $bb2, $bb8;

  $bb8:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 1861} xpc_send_chctl_closerequest_uv(arg, arg1);
    goto SeqInstr_787, SeqInstr_788;

  SeqInstr_788:
    assume assertsPassed;
    goto SeqInstr_789;

  SeqInstr_789:
    return;

  SeqInstr_787:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i3 == 1;
    call {:si_unique_call 1862} xpc_send_chctl_closereply_uv(arg, arg1);
    goto SeqInstr_790, SeqInstr_791;

  SeqInstr_791:
    assume assertsPassed;
    goto SeqInstr_792;

  SeqInstr_792:
    return;

  SeqInstr_790:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i4 == 1;
    call {:si_unique_call 1863} xpc_send_chctl_openrequest_uv(arg, arg1);
    goto SeqInstr_793, SeqInstr_794;

  SeqInstr_794:
    assume assertsPassed;
    goto SeqInstr_795;

  SeqInstr_795:
    return;

  SeqInstr_793:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i5 == 1;
    call {:si_unique_call 1864} xpc_send_chctl_openreply_uv(arg, arg1);
    goto SeqInstr_796, SeqInstr_797;

  SeqInstr_797:
    assume assertsPassed;
    goto SeqInstr_798;

  SeqInstr_798:
    return;

  SeqInstr_796:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i6 == 1;
    call {:si_unique_call 1865} xpc_send_chctl_opencomplete_uv(arg, arg1);
    goto SeqInstr_799, SeqInstr_800;

  SeqInstr_800:
    assume assertsPassed;
    goto SeqInstr_801;

  SeqInstr_801:
    return;

  SeqInstr_799:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i7 == 1;
    $p1 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1866} xpc_received_payload_uv(arg, $p1);
    goto SeqInstr_802, SeqInstr_803;

  SeqInstr_803:
    assume assertsPassed;
    goto SeqInstr_804;

  SeqInstr_804:
    return;

  SeqInstr_802:
    assume !assertsPassed;
    return;
}



const devirtbounce.9: ref;

axiom devirtbounce.9 == $sub.ref(0, 571039);

procedure devirtbounce.9(funcPtr: ref, arg: ref, arg1: i32, arg2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.1, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.23, $M.28, $CurrAddr, assertsPassed;



implementation devirtbounce.9(funcPtr: ref, arg: ref, arg1: i32, arg2: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i64;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i10 := $eq.ref(xpc_system_die, $p0);
    assume true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i10 == 1);
    $i9 := $eq.ref(xpc_system_reboot, $p0);
    assume true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i9 == 1);
    assume false;
    return;

  $bb2:
    assume $i9 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $i2 := $zext.i32.i64(arg1);
    $p3 := $bitcast.ref.ref(arg2);
    call {:si_unique_call 1867} $i4 := xpc_system_reboot($p1, $i2, $p3);
    goto SeqInstr_805, SeqInstr_806;

  SeqInstr_806:
    assume assertsPassed;
    goto SeqInstr_807;

  SeqInstr_807:
    $r := $i4;
    return;

  SeqInstr_805:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i10 == 1;
    $p5 := $bitcast.ref.ref(arg);
    $i6 := $zext.i32.i64(arg1);
    $p7 := $bitcast.ref.ref(arg2);
    call {:si_unique_call 1868} $i8 := xpc_system_die($p5, $i6, $p7);
    goto SeqInstr_808, SeqInstr_809;

  SeqInstr_809:
    assume assertsPassed;
    goto SeqInstr_810;

  SeqInstr_810:
    $r := $i8;
    return;

  SeqInstr_808:
    assume !assertsPassed;
    return;
}



const devirtbounce.10: ref;

axiom devirtbounce.10 == $sub.ref(0, 572071);

procedure devirtbounce.10(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.1, $M.24, $M.40, $M.18, $M.19, $M.20, $M.21, $M.22, $M.2, $M.23, $CurrAddr, $M.31, $M.28, $M.41, $M.42, $M.0, assertsPassed, $M.43, $M.44, $M.45, $M.32;



implementation devirtbounce.10(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i28 := $eq.ref(xpc_initiate_discovery, $p0);
    assume true;
    goto $bb11, $bb21;

  $bb21:
    assume !($i28 == 1);
    $i27 := $eq.ref(xpc_hb_checker, $p0);
    assume true;
    goto $bb10, $bb20;

  $bb20:
    assume !($i27 == 1);
    $i26 := $eq.ref(xpc_activating, $p0);
    assume true;
    goto $bb9, $bb19;

  $bb19:
    assume !($i26 == 1);
    $i25 := $eq.ref(xpc_n_of_deliverable_payloads_uv, $p0);
    assume true;
    goto $bb8, $bb18;

  $bb18:
    assume !($i25 == 1);
    $i24 := $eq.ref(xpc_setup_msg_structures_uv, $p0);
    assume true;
    goto $bb7, $bb17;

  $bb17:
    assume !($i24 == 1);
    $i23 := $eq.ref(xpc_make_first_contact_uv, $p0);
    assume true;
    goto $bb6, $bb16;

  $bb16:
    assume !($i23 == 1);
    $i22 := $eq.ref(xpc_setup_ch_structures_uv, $p0);
    assume true;
    goto $bb5, $bb15;

  $bb15:
    assume !($i22 == 1);
    $i21 := $eq.ref(xpc_get_remote_heartbeat_uv, $p0);
    assume true;
    goto $bb4, $bb14;

  $bb14:
    assume !($i21 == 1);
    $i20 := $eq.ref(xpc_setup_rsvd_page_uv, $p0);
    assume true;
    goto $bb3, $bb13;

  $bb13:
    assume !($i20 == 1);
    $i19 := $eq.ref(xpc_kthread_start, $p0);
    assume true;
    goto $bb2, $bb12;

  $bb12:
    assume !($i19 == 1);
    assume false;
    return;

  $bb2:
    assume $i19 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1869} $i2 := xpc_kthread_start($p1);
    goto SeqInstr_811, SeqInstr_812;

  SeqInstr_812:
    assume assertsPassed;
    goto SeqInstr_813;

  SeqInstr_813:
    $r := $i2;
    return;

  SeqInstr_811:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i20 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1870} $i4 := xpc_setup_rsvd_page_uv($p3);
    $r := $i4;
    return;

  $bb4:
    assume $i21 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1871} $i6 := xpc_get_remote_heartbeat_uv($p5);
    $r := $i6;
    return;

  $bb5:
    assume $i22 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1872} $i8 := xpc_setup_ch_structures_uv($p7);
    $r := $i8;
    return;

  $bb6:
    assume $i23 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1873} $i10 := xpc_make_first_contact_uv($p9);
    goto SeqInstr_814, SeqInstr_815;

  SeqInstr_815:
    assume assertsPassed;
    goto SeqInstr_816;

  SeqInstr_816:
    $r := $i10;
    return;

  SeqInstr_814:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i24 == 1;
    call {:si_unique_call 1874} $i11 := xpc_setup_msg_structures_uv(arg);
    $r := $i11;
    return;

  $bb8:
    assume $i25 == 1;
    call {:si_unique_call 1875} $i12 := xpc_n_of_deliverable_payloads_uv(arg);
    $r := $i12;
    return;

  $bb9:
    assume $i26 == 1;
    $p13 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1876} $i14 := xpc_activating($p13);
    goto SeqInstr_817, SeqInstr_818;

  SeqInstr_818:
    assume assertsPassed;
    goto SeqInstr_819;

  SeqInstr_819:
    $r := $i14;
    return;

  SeqInstr_817:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i27 == 1;
    $p15 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1877} $i16 := xpc_hb_checker($p15);
    goto SeqInstr_820, SeqInstr_821;

  SeqInstr_821:
    assume assertsPassed;
    goto SeqInstr_822;

  SeqInstr_822:
    $r := $i16;
    return;

  SeqInstr_820:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i28 == 1;
    $p17 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1878} $i18 := xpc_initiate_discovery($p17);
    goto SeqInstr_823, SeqInstr_824;

  SeqInstr_824:
    assume assertsPassed;
    goto SeqInstr_825;

  SeqInstr_825:
    $r := $i18;
    return;

  SeqInstr_823:
    assume !assertsPassed;
    return;
}



const devirtbounce.11: ref;

axiom devirtbounce.11 == $sub.ref(0, 573103);

procedure devirtbounce.11(funcPtr: ref, arg: i32, arg1: i16, arg2: i32, arg3: ref, arg4: ref);
  free requires assertsPassed;



implementation devirtbounce.11(funcPtr: ref, arg: i32, arg1: i16, arg2: i32, arg3: ref, arg4: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.12: ref;

axiom devirtbounce.12 == $sub.ref(0, 574135);

procedure devirtbounce.12(funcPtr: ref, arg: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation devirtbounce.12(funcPtr: ref, arg: ref) returns ($r: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(xpc_get_deliverable_payload_uv, $p0);
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 1879} $p1 := xpc_get_deliverable_payload_uv(arg);
    $r := $p1;
    return;
}



const devirtbounce.13: ref;

axiom devirtbounce.13 == $sub.ref(0, 575167);

procedure devirtbounce.13(funcPtr: ref, arg: ref, arg1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $CurrAddr, $M.23, $M.28, assertsPassed, $M.0, $M.2;



implementation devirtbounce.13(funcPtr: ref, arg: ref, arg1: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i18 := $eq.ref(xpc_received_payload_uv, $p0);
    assume true;
    goto $bb7, $bb13;

  $bb13:
    assume !($i18 == 1);
    $i17 := $eq.ref(xpc_send_chctl_opencomplete_uv, $p0);
    assume true;
    goto $bb6, $bb12;

  $bb12:
    assume !($i17 == 1);
    $i16 := $eq.ref(xpc_send_chctl_openreply_uv, $p0);
    assume true;
    goto $bb5, $bb11;

  $bb11:
    assume !($i16 == 1);
    $i15 := $eq.ref(xpc_send_chctl_openrequest_uv, $p0);
    assume true;
    goto $bb4, $bb10;

  $bb10:
    assume !($i15 == 1);
    $i14 := $eq.ref(xpc_send_chctl_closereply_uv, $p0);
    assume true;
    goto $bb3, $bb9;

  $bb9:
    assume !($i14 == 1);
    $i13 := $eq.ref(xpc_send_chctl_closerequest_uv, $p0);
    assume true;
    goto $bb2, $bb8;

  $bb8:
    assume !($i13 == 1);
    assume false;
    return;

  $bb2:
    assume $i13 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1880} xpc_send_chctl_closerequest_uv($p1, $p2);
    goto SeqInstr_826, SeqInstr_827;

  SeqInstr_827:
    assume assertsPassed;
    goto SeqInstr_828;

  SeqInstr_828:
    return;

  SeqInstr_826:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i14 == 1;
    $p3 := $bitcast.ref.ref(arg);
    $p4 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1881} xpc_send_chctl_closereply_uv($p3, $p4);
    goto SeqInstr_829, SeqInstr_830;

  SeqInstr_830:
    assume assertsPassed;
    goto SeqInstr_831;

  SeqInstr_831:
    return;

  SeqInstr_829:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i15 == 1;
    $p5 := $bitcast.ref.ref(arg);
    $p6 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1882} xpc_send_chctl_openrequest_uv($p5, $p6);
    goto SeqInstr_832, SeqInstr_833;

  SeqInstr_833:
    assume assertsPassed;
    goto SeqInstr_834;

  SeqInstr_834:
    return;

  SeqInstr_832:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i16 == 1;
    $p7 := $bitcast.ref.ref(arg);
    $p8 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1883} xpc_send_chctl_openreply_uv($p7, $p8);
    goto SeqInstr_835, SeqInstr_836;

  SeqInstr_836:
    assume assertsPassed;
    goto SeqInstr_837;

  SeqInstr_837:
    return;

  SeqInstr_835:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i17 == 1;
    $p9 := $bitcast.ref.ref(arg);
    $p10 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1884} xpc_send_chctl_opencomplete_uv($p9, $p10);
    goto SeqInstr_838, SeqInstr_839;

  SeqInstr_839:
    assume assertsPassed;
    goto SeqInstr_840;

  SeqInstr_840:
    return;

  SeqInstr_838:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i18 == 1;
    $p11 := $bitcast.ref.ref(arg);
    $p12 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1885} xpc_received_payload_uv($p11, $p12);
    goto SeqInstr_841, SeqInstr_842;

  SeqInstr_842:
    assume assertsPassed;
    goto SeqInstr_843;

  SeqInstr_843:
    return;

  SeqInstr_841:
    assume !assertsPassed;
    return;
}



const devirtbounce.14: ref;

axiom devirtbounce.14 == $sub.ref(0, 576199);

procedure devirtbounce.14(funcPtr: ref, arg: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation devirtbounce.14(funcPtr: ref, arg: ref) returns ($r: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i3 := $eq.ref(xpc_get_deliverable_payload_uv, $p0);
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume false;
    return;

  $bb2:
    assume $i3 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1886} $p2 := xpc_get_deliverable_payload_uv($p1);
    $r := $p2;
    return;
}



const devirtbounce.15: ref;

axiom devirtbounce.15 == $sub.ref(0, 577231);

procedure devirtbounce.15(funcPtr: ref, arg: ref, arg1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation devirtbounce.15(funcPtr: ref, arg: ref, arg1: i32) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i64;
  var $i3: i32;
  var $i4: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i4 := $eq.ref(xpc_save_remote_msgqueue_pa_uv, $p0);
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i4 == 1);
    assume false;
    return;

  $bb2:
    assume $i4 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $i2 := $zext.i32.i64(arg1);
    call {:si_unique_call 1887} $i3 := xpc_save_remote_msgqueue_pa_uv($p1, $i2);
    $r := $i3;
    return;
}



const devirtbounce.16: ref;

axiom devirtbounce.16 == $sub.ref(0, 578263);

procedure devirtbounce.16(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.16(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i4 := $eq.ref(autoremove_wake_function, $p0);
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i4 == 1);
    assume false;
    return;

  $bb2:
    assume $i4 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg3);
    call {:si_unique_call 1888} $i3 := autoremove_wake_function($p1, arg1, arg2, $p2);
    $r := $i3;
    return;
}



const devirtbounce.17: ref;

axiom devirtbounce.17 == $sub.ref(0, 579295);

procedure devirtbounce.17(funcPtr: ref, arg: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation devirtbounce.17(funcPtr: ref, arg: ref) returns ($r: i64)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i3 := $eq.ref(xpc_get_chctl_all_flags_uv, $p0);
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume false;
    return;

  $bb2:
    assume $i3 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1889} $i2 := xpc_get_chctl_all_flags_uv($p1);
    $r := $i2;
    return;
}



const devirtbounce.18: ref;

axiom devirtbounce.18 == $sub.ref(0, 580327);

procedure devirtbounce.18(funcPtr: ref, arg: i64, arg1: i64, arg2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.18(funcPtr: ref, arg: i64, arg1: i64, arg2: i64) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.19: ref;

axiom devirtbounce.19 == $sub.ref(0, 581359);

procedure devirtbounce.19(funcPtr: ref, arg: ref, arg1: ref, arg2: ref, arg3: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.19(funcPtr: ref, arg: ref, arg1: ref, arg2: ref, arg3: ref) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.20: ref;

axiom devirtbounce.20 == $sub.ref(0, 582391);

procedure devirtbounce.20(funcPtr: ref, arg: i32, arg1: i16, arg2: i32, arg3: ref);
  free requires assertsPassed;



implementation devirtbounce.20(funcPtr: ref, arg: i32, arg1: i16, arg2: i32, arg3: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.21: ref;

axiom devirtbounce.21 == $sub.ref(0, 583423);

procedure devirtbounce.21(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.21(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.22: ref;

axiom devirtbounce.22 == $sub.ref(0, 584455);

procedure devirtbounce.22(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.1, $M.24, $M.40, $M.18, $M.19, $M.20, $M.21, $M.22, $M.2, $M.23, $CurrAddr, $M.31, $M.28, $M.41, $M.42, $M.0, assertsPassed, $M.43, $M.44, $M.45, $M.32;



implementation devirtbounce.22(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i27 := $eq.ref(xpc_initiate_discovery, $p0);
    assume true;
    goto $bb11, $bb21;

  $bb21:
    assume !($i27 == 1);
    $i26 := $eq.ref(xpc_hb_checker, $p0);
    assume true;
    goto $bb10, $bb20;

  $bb20:
    assume !($i26 == 1);
    $i25 := $eq.ref(xpc_activating, $p0);
    assume true;
    goto $bb9, $bb19;

  $bb19:
    assume !($i25 == 1);
    $i24 := $eq.ref(xpc_n_of_deliverable_payloads_uv, $p0);
    assume true;
    goto $bb8, $bb18;

  $bb18:
    assume !($i24 == 1);
    $i23 := $eq.ref(xpc_setup_msg_structures_uv, $p0);
    assume true;
    goto $bb7, $bb17;

  $bb17:
    assume !($i23 == 1);
    $i22 := $eq.ref(xpc_make_first_contact_uv, $p0);
    assume true;
    goto $bb6, $bb16;

  $bb16:
    assume !($i22 == 1);
    $i21 := $eq.ref(xpc_setup_ch_structures_uv, $p0);
    assume true;
    goto $bb5, $bb15;

  $bb15:
    assume !($i21 == 1);
    $i20 := $eq.ref(xpc_get_remote_heartbeat_uv, $p0);
    assume true;
    goto $bb4, $bb14;

  $bb14:
    assume !($i20 == 1);
    $i19 := $eq.ref(xpc_setup_rsvd_page_uv, $p0);
    assume true;
    goto $bb3, $bb13;

  $bb13:
    assume !($i19 == 1);
    $i18 := $eq.ref(xpc_kthread_start, $p0);
    assume true;
    goto $bb2, $bb12;

  $bb12:
    assume !($i18 == 1);
    assume false;
    return;

  $bb2:
    assume $i18 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1890} $i2 := xpc_kthread_start($p1);
    goto SeqInstr_844, SeqInstr_845;

  SeqInstr_845:
    assume assertsPassed;
    goto SeqInstr_846;

  SeqInstr_846:
    $r := $i2;
    return;

  SeqInstr_844:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i19 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1891} $i4 := xpc_setup_rsvd_page_uv($p3);
    $r := $i4;
    return;

  $bb4:
    assume $i20 == 1;
    call {:si_unique_call 1892} $i5 := xpc_get_remote_heartbeat_uv(arg);
    $r := $i5;
    return;

  $bb5:
    assume $i21 == 1;
    call {:si_unique_call 1893} $i6 := xpc_setup_ch_structures_uv(arg);
    $r := $i6;
    return;

  $bb6:
    assume $i22 == 1;
    call {:si_unique_call 1894} $i7 := xpc_make_first_contact_uv(arg);
    goto SeqInstr_847, SeqInstr_848;

  SeqInstr_848:
    assume assertsPassed;
    goto SeqInstr_849;

  SeqInstr_849:
    $r := $i7;
    return;

  SeqInstr_847:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i23 == 1;
    $p8 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1895} $i9 := xpc_setup_msg_structures_uv($p8);
    $r := $i9;
    return;

  $bb8:
    assume $i24 == 1;
    $p10 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1896} $i11 := xpc_n_of_deliverable_payloads_uv($p10);
    $r := $i11;
    return;

  $bb9:
    assume $i25 == 1;
    $p12 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1897} $i13 := xpc_activating($p12);
    goto SeqInstr_850, SeqInstr_851;

  SeqInstr_851:
    assume assertsPassed;
    goto SeqInstr_852;

  SeqInstr_852:
    $r := $i13;
    return;

  SeqInstr_850:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i26 == 1;
    $p14 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1898} $i15 := xpc_hb_checker($p14);
    goto SeqInstr_853, SeqInstr_854;

  SeqInstr_854:
    assume assertsPassed;
    goto SeqInstr_855;

  SeqInstr_855:
    $r := $i15;
    return;

  SeqInstr_853:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i27 == 1;
    $p16 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1899} $i17 := xpc_initiate_discovery($p16);
    goto SeqInstr_856, SeqInstr_857;

  SeqInstr_857:
    assume assertsPassed;
    goto SeqInstr_858;

  SeqInstr_858:
    $r := $i17;
    return;

  SeqInstr_856:
    assume !assertsPassed;
    return;
}



const devirtbounce.23: ref;

axiom devirtbounce.23 == $sub.ref(0, 585487);

procedure devirtbounce.23(funcPtr: ref, arg: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation devirtbounce.23(funcPtr: ref, arg: ref) returns ($r: i64)
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(xpc_get_chctl_all_flags_uv, $p0);
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 1900} $i1 := xpc_get_chctl_all_flags_uv(arg);
    $r := $i1;
    return;
}



const devirtbounce.24: ref;

axiom devirtbounce.24 == $sub.ref(0, 586519);

procedure devirtbounce.24(funcPtr: ref, arg: ref, arg1: i32);
  free requires assertsPassed;
  modifies $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.1, $CurrAddr, $M.0, $M.2, $M.23, $M.28, assertsPassed;



implementation devirtbounce.24(funcPtr: ref, arg: ref, arg1: i32)
{
  var $p0: ref;
  var $i1: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i1 := $eq.ref(xpc_process_msg_chctl_flags_uv, $p0);
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume false;
    return;

  $bb2:
    assume $i1 == 1;
    call {:si_unique_call 1901} xpc_process_msg_chctl_flags_uv(arg, arg1);
    goto SeqInstr_859, SeqInstr_860;

  SeqInstr_860:
    assume assertsPassed;
    goto SeqInstr_861;

  SeqInstr_861:
    return;

  SeqInstr_859:
    assume !assertsPassed;
    return;
}



const devirtbounce.25: ref;

axiom devirtbounce.25 == $sub.ref(0, 587551);

procedure devirtbounce.25(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation devirtbounce.25(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(xpc_save_remote_msgqueue_pa_uv, $p0);
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 1902} $i1 := xpc_save_remote_msgqueue_pa_uv(arg, arg1);
    $r := $i1;
    return;
}



const devirtbounce.26: ref;

axiom devirtbounce.26 == $sub.ref(0, 588583);

procedure devirtbounce.26(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.1, $M.23, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $CurrAddr, $M.28, assertsPassed, $M.0, $M.2;



implementation devirtbounce.26(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i14 := $eq.ref(xpc_notify_senders_of_disconnect_uv, $p0);
    assume true;
    goto $bb9, $bb17;

  $bb17:
    assume !($i14 == 1);
    $i13 := $eq.ref(xpc_indicate_partition_disengaged_uv, $p0);
    assume true;
    goto $bb8, $bb16;

  $bb16:
    assume !($i13 == 1);
    $i12 := $eq.ref(xpc_indicate_partition_engaged_uv, $p0);
    assume true;
    goto $bb7, $bb15;

  $bb15:
    assume !($i12 == 1);
    $i11 := $eq.ref(xpc_teardown_msg_structures_uv, $p0);
    assume true;
    goto $bb6, $bb14;

  $bb14:
    assume !($i11 == 1);
    $i10 := $eq.ref(xpc_teardown_ch_structures_uv, $p0);
    assume true;
    goto $bb5, $bb13;

  $bb13:
    assume !($i10 == 1);
    $i9 := $eq.ref(xpc_cancel_partition_deactivation_request_uv, $p0);
    assume true;
    goto $bb4, $bb12;

  $bb12:
    assume !($i9 == 1);
    $i8 := $eq.ref(xpc_request_partition_deactivation_uv, $p0);
    assume true;
    goto $bb3, $bb11;

  $bb11:
    assume !($i8 == 1);
    $i7 := $eq.ref(xpc_request_partition_reactivation_uv, $p0);
    assume true;
    goto $bb2, $bb10;

  $bb10:
    assume !($i7 == 1);
    assume false;
    return;

  $bb2:
    assume $i7 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1903} xpc_request_partition_reactivation_uv($p1);
    return;

  $bb3:
    assume $i8 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1904} xpc_request_partition_deactivation_uv($p2);
    goto SeqInstr_862, SeqInstr_863;

  SeqInstr_863:
    assume assertsPassed;
    goto SeqInstr_864;

  SeqInstr_864:
    return;

  SeqInstr_862:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i9 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1905} xpc_cancel_partition_deactivation_request_uv($p3);
    return;

  $bb5:
    assume $i10 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1906} xpc_teardown_ch_structures_uv($p4);
    return;

  $bb6:
    assume $i11 == 1;
    call {:si_unique_call 1907} xpc_teardown_msg_structures_uv(arg);
    return;

  $bb7:
    assume $i12 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1908} xpc_indicate_partition_engaged_uv($p5);
    goto SeqInstr_865, SeqInstr_866;

  SeqInstr_866:
    assume assertsPassed;
    goto SeqInstr_867;

  SeqInstr_867:
    return;

  SeqInstr_865:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i13 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1909} xpc_indicate_partition_disengaged_uv($p6);
    goto SeqInstr_868, SeqInstr_869;

  SeqInstr_869:
    assume assertsPassed;
    goto SeqInstr_870;

  SeqInstr_870:
    return;

  SeqInstr_868:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i14 == 1;
    call {:si_unique_call 1910} xpc_notify_senders_of_disconnect_uv(arg);
    goto SeqInstr_871, SeqInstr_872;

  SeqInstr_872:
    assume assertsPassed;
    goto SeqInstr_873;

  SeqInstr_873:
    return;

  SeqInstr_871:
    assume !assertsPassed;
    return;
}



const devirtbounce.27: ref;

axiom devirtbounce.27 == $sub.ref(0, 589615);

procedure devirtbounce.27(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.1, $M.24, $M.40, $M.18, $M.19, $M.20, $M.21, $M.22, $M.2, $M.23, $CurrAddr, $M.31, $M.28, $M.41, $M.42, $M.0, assertsPassed, $M.43, $M.44, $M.45, $M.32;



implementation devirtbounce.27(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i30 := $eq.ref(xpc_initiate_discovery, $p0);
    assume true;
    goto $bb11, $bb21;

  $bb21:
    assume !($i30 == 1);
    $i29 := $eq.ref(xpc_hb_checker, $p0);
    assume true;
    goto $bb10, $bb20;

  $bb20:
    assume !($i29 == 1);
    $i28 := $eq.ref(xpc_activating, $p0);
    assume true;
    goto $bb9, $bb19;

  $bb19:
    assume !($i28 == 1);
    $i27 := $eq.ref(xpc_n_of_deliverable_payloads_uv, $p0);
    assume true;
    goto $bb8, $bb18;

  $bb18:
    assume !($i27 == 1);
    $i26 := $eq.ref(xpc_setup_msg_structures_uv, $p0);
    assume true;
    goto $bb7, $bb17;

  $bb17:
    assume !($i26 == 1);
    $i25 := $eq.ref(xpc_make_first_contact_uv, $p0);
    assume true;
    goto $bb6, $bb16;

  $bb16:
    assume !($i25 == 1);
    $i24 := $eq.ref(xpc_setup_ch_structures_uv, $p0);
    assume true;
    goto $bb5, $bb15;

  $bb15:
    assume !($i24 == 1);
    $i23 := $eq.ref(xpc_get_remote_heartbeat_uv, $p0);
    assume true;
    goto $bb4, $bb14;

  $bb14:
    assume !($i23 == 1);
    $i22 := $eq.ref(xpc_setup_rsvd_page_uv, $p0);
    assume true;
    goto $bb3, $bb13;

  $bb13:
    assume !($i22 == 1);
    $i21 := $eq.ref(xpc_kthread_start, $p0);
    assume true;
    goto $bb2, $bb12;

  $bb12:
    assume !($i21 == 1);
    assume false;
    return;

  $bb2:
    assume $i21 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1911} $i2 := xpc_kthread_start($p1);
    goto SeqInstr_874, SeqInstr_875;

  SeqInstr_875:
    assume assertsPassed;
    goto SeqInstr_876;

  SeqInstr_876:
    $r := $i2;
    return;

  SeqInstr_874:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i22 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1912} $i4 := xpc_setup_rsvd_page_uv($p3);
    $r := $i4;
    return;

  $bb4:
    assume $i23 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1913} $i6 := xpc_get_remote_heartbeat_uv($p5);
    $r := $i6;
    return;

  $bb5:
    assume $i24 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1914} $i8 := xpc_setup_ch_structures_uv($p7);
    $r := $i8;
    return;

  $bb6:
    assume $i25 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1915} $i10 := xpc_make_first_contact_uv($p9);
    goto SeqInstr_877, SeqInstr_878;

  SeqInstr_878:
    assume assertsPassed;
    goto SeqInstr_879;

  SeqInstr_879:
    $r := $i10;
    return;

  SeqInstr_877:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i26 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1916} $i12 := xpc_setup_msg_structures_uv($p11);
    $r := $i12;
    return;

  $bb8:
    assume $i27 == 1;
    $p13 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1917} $i14 := xpc_n_of_deliverable_payloads_uv($p13);
    $r := $i14;
    return;

  $bb9:
    assume $i28 == 1;
    $p15 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1918} $i16 := xpc_activating($p15);
    goto SeqInstr_880, SeqInstr_881;

  SeqInstr_881:
    assume assertsPassed;
    goto SeqInstr_882;

  SeqInstr_882:
    $r := $i16;
    return;

  SeqInstr_880:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i29 == 1;
    $p17 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1919} $i18 := xpc_hb_checker($p17);
    goto SeqInstr_883, SeqInstr_884;

  SeqInstr_884:
    assume assertsPassed;
    goto SeqInstr_885;

  SeqInstr_885:
    $r := $i18;
    return;

  SeqInstr_883:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i30 == 1;
    $p19 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1920} $i20 := xpc_initiate_discovery($p19);
    goto SeqInstr_886, SeqInstr_887;

  SeqInstr_887:
    assume assertsPassed;
    goto SeqInstr_888;

  SeqInstr_888:
    $r := $i20;
    return;

  SeqInstr_886:
    assume !assertsPassed;
    return;
}



const devirtbounce.28: ref;

axiom devirtbounce.28 == $sub.ref(0, 590647);

procedure devirtbounce.28(funcPtr: ref, arg: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.28(funcPtr: ref, arg: i32) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.29: ref;

axiom devirtbounce.29 == $sub.ref(0, 591679);

procedure devirtbounce.29(funcPtr: ref, arg: i64) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.29(funcPtr: ref, arg: i64) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.30: ref;

axiom devirtbounce.30 == $sub.ref(0, 592711);

procedure devirtbounce.30(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.1, $M.24, $M.40, $M.18, $M.19, $M.20, $M.21, $M.22, $M.2, $M.23, $CurrAddr, $M.31, $M.28, $M.41, $M.42, $M.0, assertsPassed, $M.43, $M.44, $M.45, $M.32;



implementation devirtbounce.30(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i29 := $eq.ref(xpc_initiate_discovery, $p0);
    assume true;
    goto $bb11, $bb21;

  $bb21:
    assume !($i29 == 1);
    $i28 := $eq.ref(xpc_hb_checker, $p0);
    assume true;
    goto $bb10, $bb20;

  $bb20:
    assume !($i28 == 1);
    $i27 := $eq.ref(xpc_activating, $p0);
    assume true;
    goto $bb9, $bb19;

  $bb19:
    assume !($i27 == 1);
    $i26 := $eq.ref(xpc_n_of_deliverable_payloads_uv, $p0);
    assume true;
    goto $bb8, $bb18;

  $bb18:
    assume !($i26 == 1);
    $i25 := $eq.ref(xpc_setup_msg_structures_uv, $p0);
    assume true;
    goto $bb7, $bb17;

  $bb17:
    assume !($i25 == 1);
    $i24 := $eq.ref(xpc_make_first_contact_uv, $p0);
    assume true;
    goto $bb6, $bb16;

  $bb16:
    assume !($i24 == 1);
    $i23 := $eq.ref(xpc_setup_ch_structures_uv, $p0);
    assume true;
    goto $bb5, $bb15;

  $bb15:
    assume !($i23 == 1);
    $i22 := $eq.ref(xpc_get_remote_heartbeat_uv, $p0);
    assume true;
    goto $bb4, $bb14;

  $bb14:
    assume !($i22 == 1);
    $i21 := $eq.ref(xpc_setup_rsvd_page_uv, $p0);
    assume true;
    goto $bb3, $bb13;

  $bb13:
    assume !($i21 == 1);
    $i20 := $eq.ref(xpc_kthread_start, $p0);
    assume true;
    goto $bb2, $bb12;

  $bb12:
    assume !($i20 == 1);
    assume false;
    return;

  $bb2:
    assume $i20 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1921} $i2 := xpc_kthread_start($p1);
    goto SeqInstr_889, SeqInstr_890;

  SeqInstr_890:
    assume assertsPassed;
    goto SeqInstr_891;

  SeqInstr_891:
    $r := $i2;
    return;

  SeqInstr_889:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i21 == 1;
    call {:si_unique_call 1922} $i3 := xpc_setup_rsvd_page_uv(arg);
    $r := $i3;
    return;

  $bb4:
    assume $i22 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1923} $i5 := xpc_get_remote_heartbeat_uv($p4);
    $r := $i5;
    return;

  $bb5:
    assume $i23 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1924} $i7 := xpc_setup_ch_structures_uv($p6);
    $r := $i7;
    return;

  $bb6:
    assume $i24 == 1;
    $p8 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1925} $i9 := xpc_make_first_contact_uv($p8);
    goto SeqInstr_892, SeqInstr_893;

  SeqInstr_893:
    assume assertsPassed;
    goto SeqInstr_894;

  SeqInstr_894:
    $r := $i9;
    return;

  SeqInstr_892:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i25 == 1;
    $p10 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1926} $i11 := xpc_setup_msg_structures_uv($p10);
    $r := $i11;
    return;

  $bb8:
    assume $i26 == 1;
    $p12 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1927} $i13 := xpc_n_of_deliverable_payloads_uv($p12);
    $r := $i13;
    return;

  $bb9:
    assume $i27 == 1;
    $p14 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1928} $i15 := xpc_activating($p14);
    goto SeqInstr_895, SeqInstr_896;

  SeqInstr_896:
    assume assertsPassed;
    goto SeqInstr_897;

  SeqInstr_897:
    $r := $i15;
    return;

  SeqInstr_895:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i28 == 1;
    $p16 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1929} $i17 := xpc_hb_checker($p16);
    goto SeqInstr_898, SeqInstr_899;

  SeqInstr_899:
    assume assertsPassed;
    goto SeqInstr_900;

  SeqInstr_900:
    $r := $i17;
    return;

  SeqInstr_898:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i29 == 1;
    $p18 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1930} $i19 := xpc_initiate_discovery($p18);
    goto SeqInstr_901, SeqInstr_902;

  SeqInstr_902:
    assume assertsPassed;
    goto SeqInstr_903;

  SeqInstr_903:
    $r := $i19;
    return;

  SeqInstr_901:
    assume !assertsPassed;
    return;
}



const devirtbounce.31: ref;

axiom devirtbounce.31 == $sub.ref(0, 593743);

procedure devirtbounce.31(funcPtr: ref, arg: ref, arg1: i32, arg2: ref, arg3: i16, arg4: i8, arg5: ref, arg6: ref) returns ($r: i32);



const devirtbounce.32: ref;

axiom devirtbounce.32 == $sub.ref(0, 594775);

procedure devirtbounce.32(funcPtr: ref, arg: ref, arg1: ref);



const devirtbounce.33: ref;

axiom devirtbounce.33 == $sub.ref(0, 595807);

procedure devirtbounce.33(funcPtr: ref, arg: ref, arg1: i64, arg2: i32);
  free requires assertsPassed;
  modifies $M.1, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.23, $CurrAddr, $M.28, assertsPassed, $M.0, $M.2;



implementation devirtbounce.33(funcPtr: ref, arg: ref, arg1: i64, arg2: i32)
{
  var $p0: ref;
  var $i1: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i1 := $eq.ref(xpc_request_partition_activation_uv, $p0);
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume false;
    return;

  $bb2:
    assume $i1 == 1;
    call {:si_unique_call 1931} xpc_request_partition_activation_uv(arg, arg1, arg2);
    goto SeqInstr_904, SeqInstr_905;

  SeqInstr_905:
    assume assertsPassed;
    goto SeqInstr_906;

  SeqInstr_906:
    return;

  SeqInstr_904:
    assume !assertsPassed;
    return;
}



const devirtbounce.34: ref;

axiom devirtbounce.34 == $sub.ref(0, 596839);

procedure devirtbounce.34(funcPtr: ref, arg: ref, arg1: ref, arg2: ref, arg3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.34(funcPtr: ref, arg: ref, arg1: ref, arg2: ref, arg3: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(xpc_get_partition_rsvd_page_pa_uv, $p0);
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 1932} $i1 := xpc_get_partition_rsvd_page_pa_uv(arg, arg1, arg2, arg3);
    $r := $i1;
    return;
}



const devirtbounce.35: ref;

axiom devirtbounce.35 == $sub.ref(0, 597871);

procedure devirtbounce.35(funcPtr: ref, arg: i64, arg1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.35(funcPtr: ref, arg: i64, arg1: i32) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);



const $u0: i32;

const $u1: ref;

procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.90, $M.5, $M.17, $M.7, $M.1, $M.3, $M.4, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.35, $M.37, $M.14, $M.2, $M.0, $M.62, $M.63, $M.64, $M.65, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.72, $M.73, $M.74, $M.75, $M.77, $M.78, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.89, $M.23, $M.24, $M.33, $M.40, $M.93, $M.94, $M.39, $M.95, $M.96, $M.97, $M.98, $M.99, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.106, $M.107, $M.108, $M.109, $M.110, $M.111, $M.112, $M.113, $M.114, $M.115, $M.116, $M.117, $M.118, $M.119, $M.120, $M.121, $M.32, $M.61, $M.60, $M.59, $M.28, $M.15, $M.16, $M.34, $M.36, $M.6, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 1933} __SMACK_static_init();
    call {:si_unique_call 1934} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.47, $M.48, $M.49, $M.50, $M.51, $M.0, $M.2, $M.6, $M.1, $M.52, $M.90, $M.5, $M.17, $M.7, $M.3, $M.4, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.35, $M.37, $M.14, $M.62, $M.63, $M.64, $M.65, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.72, $M.73, $M.74, $M.75, $M.77, $M.78, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.89, $M.23, $M.24, $M.33, $M.40, $M.93, $M.94, $M.39, $M.95, $M.96, $M.97, $M.98, $M.99, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.106, $M.107, $M.108, $M.109, $M.110, $M.111, $M.112, $M.113, $M.114, $M.115, $M.116, $M.117, $M.118, $M.119, $M.120, $M.121, $M.32, $M.61, $M.60, $M.59, $M.28, $M.15, $M.16, $M.34, $M.36, $CurrAddr, $M.25, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.18, $M.19, $M.20, $M.21, $M.22, $M.43, $M.44, $M.45, $M.41, $M.31, $M.42;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation xpc_do_exit_loop_$bb5(in_$i0: i32, in_$p15: ref, in_$i16: i64, in_$p17: ref, in_$i18: i32, in_$i19: i1, in_$p20: ref, in_$i21: i8, in_$i22: i32, in_$i23: i1, in_$i26: i32, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$p30: ref, in_$i31: i64, in_$i32: i64, in_$i24: i32, in_$i25: i64, in_$i33: i32, in_$i34: i32, in_$i35: i16, in_$i36: i32, in_$i37: i16, in_$i38: i32, in_$i39: i1, in_$i12: i64, in_$i13: i16, in_$i14: i32, in_$i40: i32, in_$i41: i64) returns (out_$p15: ref, out_$i16: i64, out_$p17: ref, out_$i18: i32, out_$i19: i1, out_$p20: ref, out_$i21: i8, out_$i22: i32, out_$i23: i1, out_$i26: i32, out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$p30: ref, out_$i31: i64, out_$i32: i64, out_$i24: i32, out_$i25: i64, out_$i33: i32, out_$i34: i32, out_$i35: i16, out_$i36: i32, out_$i37: i16, out_$i38: i32, out_$i39: i1, out_$i12: i64, out_$i13: i16, out_$i14: i32, out_$i40: i32, out_$i41: i64)
{

  entry:
    out_$p15, out_$i16, out_$p17, out_$i18, out_$i19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i26, out_$p27, out_$i28, out_$i29, out_$p30, out_$i31, out_$i32, out_$i24, out_$i25, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i12, out_$i13, out_$i14, out_$i40, out_$i41 := in_$p15, in_$i16, in_$p17, in_$i18, in_$i19, in_$p20, in_$i21, in_$i22, in_$i23, in_$i26, in_$p27, in_$i28, in_$i29, in_$p30, in_$i31, in_$i32, in_$i24, in_$i25, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i12, in_$i13, in_$i14, in_$i40, in_$i41;
    goto $bb5, exit;

  $bb5:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_35;

  $bb17:
    assume out_$i39 == 1;
    assume {:verifier.code 0} true;
    out_$i12, out_$i13, out_$i14 := out_$i25, out_$i35, out_$i24;
    goto $bb17_dummy;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    out_$i40, out_$i41 := out_$i24, out_$i25;
    assume true;
    goto $bb17;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    out_$i39 := $slt.i32(out_$i36, out_$i38);
    goto corral_source_split_58;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    out_$i38 := $sext.i16.i32(out_$i37);
    goto corral_source_split_57;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i16($M.1, xp_max_npartitions);
    goto corral_source_split_56;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    out_$i36 := $sext.i16.i32(out_$i35);
    goto corral_source_split_55;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    out_$i35 := $trunc.i32.i16(out_$i34);
    call {:si_unique_call 12} {:cexpr "partid"} boogie_si_record_i16(out_$i35);
    goto corral_source_split_54;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    out_$i34 := $add.i32(out_$i33, 1);
    goto corral_source_split_53;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    out_$i33 := $sext.i16.i32(out_$i13);
    goto corral_source_split_52;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_51;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    out_$i24, out_$i25 := out_$i26, out_$i32;
    goto $bb12;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    out_$i24, out_$i25 := out_$i14, out_$i12;
    goto $bb12;

  $bb10:
    assume out_$i23 == 1;
    goto corral_source_split_49;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    out_$i23 := $eq.i32(out_$i22, 0);
    goto corral_source_split_47;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    out_$i22 := $zext.i8.i32(out_$i21);
    goto corral_source_split_46;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    out_$i21 := $load.i8($M.1, out_$p20);
    goto corral_source_split_45;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(out_$p15, $mul.ref(out_$i16, 872)), $mul.ref(112, 1));
    goto corral_source_split_44;

  $bb7:
    assume out_$i19 == 1;
    goto corral_source_split_43;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    out_$i19 := $ne.i32(out_$i18, 0);
    goto corral_source_split_41;

  SeqInstr_6:
    call {:si_unique_call 11} {:cexpr "tmp"} boogie_si_record_i32(out_$i18);
    goto corral_source_split_40;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 10} out_$i18 := xpc_partition_disengaged(out_$p17);
    goto SeqInstr_5;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref(out_$p15, $mul.ref(out_$i16, 872));
    goto corral_source_split_39;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    out_$i16 := $sext.i16.i64(out_$i13);
    goto corral_source_split_38;

  $bb6:
    assume {:verifier.code 0} true;
    out_$p15 := $M.3;
    goto corral_source_split_37;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_70;

  $bb15:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    out_$i32 := out_$i12;
    goto $bb16;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    out_$i32 := out_$i31;
    goto $bb16;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    out_$i31 := $load.i64($M.1, out_$p30);
    call {:si_unique_call 15} {:cexpr "disengage_timeout"} boogie_si_record_i64(out_$i31);
    goto corral_source_split_68;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(out_$p15, $mul.ref(out_$i16, 872)), $mul.ref(128, 1));
    goto corral_source_split_67;

  $bb14:
    assume out_$i29 == 1;
    goto corral_source_split_66;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    out_$i29 := $ugt.i64(out_$i28, out_$i12);
    goto corral_source_split_64;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i64($M.1, out_$p27);
    goto corral_source_split_63;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p15, $mul.ref(out_$i16, 872)), $mul.ref(128, 1));
    goto corral_source_split_62;

  SeqInstr_9:
    goto corral_source_split_61;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} xpc_deactivate_partition(1055, out_$p17, in_$i0);
    goto SeqInstr_8;

  $bb13:
    assume {:verifier.code 0} true;
    out_$i26 := $add.i32(out_$i14, 1);
    call {:si_unique_call 13} {:cexpr "active_part_count"} boogie_si_record_i32(out_$i26);
    goto corral_source_split_60;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume {:verifier.code 0} true;
    assume !(out_$i19 == 1);
    goto $bb9;

  $bb11:
    assume {:verifier.code 0} true;
    assume !(out_$i23 == 1);
    goto $bb9;

  $bb17_dummy:
    call {:si_unique_call 1} out_$p15, out_$i16, out_$p17, out_$i18, out_$i19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i26, out_$p27, out_$i28, out_$i29, out_$p30, out_$i31, out_$i32, out_$i24, out_$i25, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i12, out_$i13, out_$i14, out_$i40, out_$i41 := xpc_do_exit_loop_$bb5(in_$i0, out_$p15, out_$i16, out_$p17, out_$i18, out_$i19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i26, out_$p27, out_$i28, out_$i29, out_$p30, out_$i31, out_$i32, out_$i24, out_$i25, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i12, out_$i13, out_$i14, out_$i40, out_$i41);
    return;

  exit:
    return;
}



procedure xpc_do_exit_loop_$bb5(in_$i0: i32, in_$p15: ref, in_$i16: i64, in_$p17: ref, in_$i18: i32, in_$i19: i1, in_$p20: ref, in_$i21: i8, in_$i22: i32, in_$i23: i1, in_$i26: i32, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$p30: ref, in_$i31: i64, in_$i32: i64, in_$i24: i32, in_$i25: i64, in_$i33: i32, in_$i34: i32, in_$i35: i16, in_$i36: i32, in_$i37: i16, in_$i38: i32, in_$i39: i1, in_$i12: i64, in_$i13: i16, in_$i14: i32, in_$i40: i32, in_$i41: i64) returns (out_$p15: ref, out_$i16: i64, out_$p17: ref, out_$i18: i32, out_$i19: i1, out_$p20: ref, out_$i21: i8, out_$i22: i32, out_$i23: i1, out_$i26: i32, out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$p30: ref, out_$i31: i64, out_$i32: i64, out_$i24: i32, out_$i25: i64, out_$i33: i32, out_$i34: i32, out_$i35: i16, out_$i36: i32, out_$i37: i16, out_$i38: i32, out_$i39: i1, out_$i12: i64, out_$i13: i16, out_$i14: i32, out_$i40: i32, out_$i41: i64);
  modifies $M.2, $M.1, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.23, $CurrAddr, $M.28, $M.0, assertsPassed;



implementation xpc_do_exit_loop_$bb1(in_$i0: i32, in_$i4: i64, in_$i5: i32, in_$i6: i64, in_$i7: i16, in_$i8: i32, in_$i9: i1, in_$p15: ref, in_$i16: i64, in_$p17: ref, in_$i18: i32, in_$i19: i1, in_$p20: ref, in_$i21: i8, in_$i22: i32, in_$i23: i1, in_$i26: i32, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$p30: ref, in_$i31: i64, in_$i32: i64, in_$i24: i32, in_$i25: i64, in_$i33: i32, in_$i34: i32, in_$i35: i16, in_$i36: i32, in_$i37: i16, in_$i38: i32, in_$i39: i1, in_$i12: i64, in_$i13: i16, in_$i14: i32, in_$i40: i32, in_$i41: i64, in_$i10: i32, in_$i11: i64, in_$p42: ref, in_$i43: i32, in_$i44: i1, in_$i45: i64, in_$i46: i64, in_$i47: i1, in_$p48: ref, in_$i49: i64, in_$i50: i64, in_$i51: i64, in_$i53: i64, in_$i54: i64, in_$i57: i1, in_$i58: i1, in_$p59: ref, in_$i65: i32, in_$i55: i64, in_$i56: i32, in_$i66: i64, in_$i67: i32, in_vslice_dummy_var_10: i32, in_vslice_dummy_var_11: i32, in_vslice_dummy_var_13: i64) returns (out_$i4: i64, out_$i5: i32, out_$i6: i64, out_$i7: i16, out_$i8: i32, out_$i9: i1, out_$p15: ref, out_$i16: i64, out_$p17: ref, out_$i18: i32, out_$i19: i1, out_$p20: ref, out_$i21: i8, out_$i22: i32, out_$i23: i1, out_$i26: i32, out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$p30: ref, out_$i31: i64, out_$i32: i64, out_$i24: i32, out_$i25: i64, out_$i33: i32, out_$i34: i32, out_$i35: i16, out_$i36: i32, out_$i37: i16, out_$i38: i32, out_$i39: i1, out_$i12: i64, out_$i13: i16, out_$i14: i32, out_$i40: i32, out_$i41: i64, out_$i10: i32, out_$i11: i64, out_$p42: ref, out_$i43: i32, out_$i44: i1, out_$i45: i64, out_$i46: i64, out_$i47: i1, out_$p48: ref, out_$i49: i64, out_$i50: i64, out_$i51: i64, out_$i53: i64, out_$i54: i64, out_$i57: i1, out_$i58: i1, out_$p59: ref, out_$i65: i32, out_$i55: i64, out_$i56: i32, out_$i66: i64, out_$i67: i32, out_vslice_dummy_var_10: i32, out_vslice_dummy_var_11: i32, out_vslice_dummy_var_13: i64)
{

  entry:
    out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$p15, out_$i16, out_$p17, out_$i18, out_$i19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i26, out_$p27, out_$i28, out_$i29, out_$p30, out_$i31, out_$i32, out_$i24, out_$i25, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i12, out_$i13, out_$i14, out_$i40, out_$i41, out_$i10, out_$i11, out_$p42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i53, out_$i54, out_$i57, out_$i58, out_$p59, out_$i65, out_$i55, out_$i56, out_$i66, out_$i67, out_vslice_dummy_var_10, out_vslice_dummy_var_11, out_vslice_dummy_var_13 := in_$i4, in_$i5, in_$i6, in_$i7, in_$i8, in_$i9, in_$p15, in_$i16, in_$p17, in_$i18, in_$i19, in_$p20, in_$i21, in_$i22, in_$i23, in_$i26, in_$p27, in_$i28, in_$i29, in_$p30, in_$i31, in_$i32, in_$i24, in_$i25, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i12, in_$i13, in_$i14, in_$i40, in_$i41, in_$i10, in_$i11, in_$p42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i47, in_$p48, in_$i49, in_$i50, in_$i51, in_$i53, in_$i54, in_$i57, in_$i58, in_$p59, in_$i65, in_$i55, in_$i56, in_$i66, in_$i67, in_vslice_dummy_var_10, in_vslice_dummy_var_11, in_vslice_dummy_var_13;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_26;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    out_$i4, out_$i5, out_$i6 := out_$i66, out_$i67, out_$i11;
    goto corral_source_split_115_dummy;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 23} out_vslice_dummy_var_13 := msleep_interruptible(300);
    goto corral_source_split_115;

  $bb35:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_114;

  $bb21:
    assume !(out_$i44 == 1);
    assume {:verifier.code 0} true;
    out_$i66, out_$i67 := out_$i4, out_$i5;
    goto $bb35;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    out_$i66, out_$i67 := out_$i55, out_$i56;
    goto $bb35;

  $bb24:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_94;

  $bb34:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$i55, out_$i56 := out_$i4, out_$i65;
    goto $bb24;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    out_$i55, out_$i56 := out_$i54, 1;
    goto $bb24;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    out_$i54 := $add.i64(out_$i53, 2500);
    call {:si_unique_call 19} {:cexpr "printmsg_time"} boogie_si_record_i64(out_$i54);
    goto corral_source_split_89;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    out_$i53 := $load.i64($M.1, jiffies);
    goto corral_source_split_88;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    call {:si_unique_call 18} out_vslice_dummy_var_10 := _dev_info.ref.ref.i64(out_$p48, .str.86, out_$i51);
    goto corral_source_split_87;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    out_$i51 := $udiv.i64(out_$i50, 250);
    goto corral_source_split_86;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    out_$i50 := $sub.i64(out_$i11, out_$i49);
    goto corral_source_split_85;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    out_$i49 := $load.i64($M.1, jiffies);
    goto corral_source_split_84;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    out_$p48 := $M.5;
    goto corral_source_split_83;

  $bb22:
    assume out_$i47 == 1;
    goto corral_source_split_82;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    out_$i47 := $slt.i64(out_$i46, 0);
    goto corral_source_split_80;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    out_$i46 := $sub.i64(out_$i4, out_$i45);
    goto corral_source_split_79;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    out_$i45 := $load.i64($M.1, jiffies);
    goto corral_source_split_78;

  $bb20:
    assume out_$i44 == 1;
    goto corral_source_split_77;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    out_$i44 := $ne.i32(out_$i43, 0);
    goto corral_source_split_75;

  $bb19:
    assume {:verifier.code 0} true;
    out_$p42 := $load.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(280, 1)));
    call {:si_unique_call 16} out_$i43 := devirtbounce(out_$p42);
    call {:si_unique_call 17} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i43);
    goto corral_source_split_74;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_33;

  $bb3:
    assume {:verifier.code 0} true;
    assume !(out_$i9 == 1);
    goto $bb4;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    out_$i10, out_$i11 := out_$i40, out_$i41;
    goto $bb4;

  $bb18:
    assume !(out_$i39 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_72;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    out_$i40, out_$i41 := out_$i24, out_$i25;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    out_$i39 := $slt.i32(out_$i36, out_$i38);
    goto corral_source_split_58;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    out_$i38 := $sext.i16.i32(out_$i37);
    goto corral_source_split_57;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i16($M.1, xp_max_npartitions);
    goto corral_source_split_56;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    out_$i36 := $sext.i16.i32(out_$i35);
    goto corral_source_split_55;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    out_$i35 := $trunc.i32.i16(out_$i34);
    call {:si_unique_call 12} {:cexpr "partid"} boogie_si_record_i16(out_$i35);
    goto corral_source_split_54;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    out_$i34 := $add.i32(out_$i33, 1);
    goto corral_source_split_53;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    out_$i33 := $sext.i16.i32(out_$i13);
    goto corral_source_split_52;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_51;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    out_$i24, out_$i25 := out_$i26, out_$i32;
    goto $bb12;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    out_$i24, out_$i25 := out_$i14, out_$i12;
    goto $bb12;

  $bb10:
    assume out_$i23 == 1;
    goto corral_source_split_49;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    out_$i23 := $eq.i32(out_$i22, 0);
    goto corral_source_split_47;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    out_$i22 := $zext.i8.i32(out_$i21);
    goto corral_source_split_46;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    out_$i21 := $load.i8($M.1, out_$p20);
    goto corral_source_split_45;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(out_$p15, $mul.ref(out_$i16, 872)), $mul.ref(112, 1));
    goto corral_source_split_44;

  $bb7:
    assume out_$i19 == 1;
    goto corral_source_split_43;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    out_$i19 := $ne.i32(out_$i18, 0);
    goto corral_source_split_41;

  SeqInstr_6:
    call {:si_unique_call 11} {:cexpr "tmp"} boogie_si_record_i32(out_$i18);
    goto corral_source_split_40;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 10} out_$i18 := xpc_partition_disengaged(out_$p17);
    goto SeqInstr_5;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref(out_$p15, $mul.ref(out_$i16, 872));
    goto corral_source_split_39;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    out_$i16 := $sext.i16.i64(out_$i13);
    goto corral_source_split_38;

  $bb6:
    assume {:verifier.code 0} true;
    out_$p15 := $M.3;
    goto corral_source_split_37;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb5:
    call out_$p15, out_$i16, out_$p17, out_$i18, out_$i19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i26, out_$p27, out_$i28, out_$i29, out_$p30, out_$i31, out_$i32, out_$i24, out_$i25, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i12, out_$i13, out_$i14, out_$i40, out_$i41 := xpc_do_exit_loop_$bb5(in_$i0, out_$p15, out_$i16, out_$p17, out_$i18, out_$i19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i26, out_$p27, out_$i28, out_$i29, out_$p30, out_$i31, out_$i32, out_$i24, out_$i25, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i12, out_$i13, out_$i14, out_$i40, out_$i41);
    goto $bb5_last;

  $bb5_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_35;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    out_$i12, out_$i13, out_$i14 := out_$i6, 0, 0;
    goto $bb5;

  $bb17:
    assume out_$i39 == 1;
    assume {:verifier.code 0} true;
    out_$i12, out_$i13, out_$i14 := out_$i25, out_$i35, out_$i24;
    assume false;
    return;

  $bb2:
    assume out_$i9 == 1;
    goto corral_source_split_31;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    out_$i10, out_$i11 := 0, out_$i6;
    assume true;
    goto $bb2, $bb3;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    out_$i9 := $slt.i32(0, out_$i8);
    goto corral_source_split_29;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    out_$i8 := $sext.i16.i32(out_$i7);
    goto corral_source_split_28;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    out_$i7 := $load.i16($M.1, xp_max_npartitions);
    goto corral_source_split_27;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_70;

  $bb15:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    out_$i32 := out_$i12;
    goto $bb16;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    out_$i32 := out_$i31;
    goto $bb16;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    out_$i31 := $load.i64($M.1, out_$p30);
    call {:si_unique_call 15} {:cexpr "disengage_timeout"} boogie_si_record_i64(out_$i31);
    goto corral_source_split_68;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(out_$p15, $mul.ref(out_$i16, 872)), $mul.ref(128, 1));
    goto corral_source_split_67;

  $bb14:
    assume out_$i29 == 1;
    goto corral_source_split_66;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    out_$i29 := $ugt.i64(out_$i28, out_$i12);
    goto corral_source_split_64;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i64($M.1, out_$p27);
    goto corral_source_split_63;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p15, $mul.ref(out_$i16, 872)), $mul.ref(128, 1));
    goto corral_source_split_62;

  SeqInstr_9:
    goto corral_source_split_61;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} xpc_deactivate_partition(1055, out_$p17, in_$i0);
    goto SeqInstr_8;

  $bb13:
    assume {:verifier.code 0} true;
    out_$i26 := $add.i32(out_$i14, 1);
    call {:si_unique_call 13} {:cexpr "active_part_count"} boogie_si_record_i32(out_$i26);
    goto corral_source_split_60;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume {:verifier.code 0} true;
    assume !(out_$i19 == 1);
    goto $bb9;

  $bb11:
    assume {:verifier.code 0} true;
    assume !(out_$i23 == 1);
    goto $bb9;

  $bb26:
    assume !(out_$i57 == 1);
    assume {:verifier.code 0} true;
    out_$i65 := out_$i5;
    goto $bb34;

  $bb29:
    assume {:verifier.code 0} true;
    out_$i65 := 0;
    goto $bb34;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    goto $bb29;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 20} out_vslice_dummy_var_11 := _dev_info.ref.ref(out_$p59, .str.87);
    goto corral_source_split_101;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    out_$p59 := $M.5;
    goto corral_source_split_100;

  $bb27:
    assume out_$i58 == 1;
    goto corral_source_split_99;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    out_$i58 := $ne.i32(out_$i5, 0);
    goto corral_source_split_97;

  $bb25:
    assume out_$i57 == 1;
    goto corral_source_split_96;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    out_$i57 := $sgt.i32(out_$i10, 0);
    goto corral_source_split_92;

  $bb23:
    assume !(out_$i47 == 1);
    goto corral_source_split_91;

  corral_source_split_115_dummy:
    call {:si_unique_call 1} out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$p15, out_$i16, out_$p17, out_$i18, out_$i19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i26, out_$p27, out_$i28, out_$i29, out_$p30, out_$i31, out_$i32, out_$i24, out_$i25, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i12, out_$i13, out_$i14, out_$i40, out_$i41, out_$i10, out_$i11, out_$p42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i53, out_$i54, out_$i57, out_$i58, out_$p59, out_$i65, out_$i55, out_$i56, out_$i66, out_$i67, out_vslice_dummy_var_10, out_vslice_dummy_var_11, out_vslice_dummy_var_13 := xpc_do_exit_loop_$bb1(in_$i0, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$p15, out_$i16, out_$p17, out_$i18, out_$i19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i26, out_$p27, out_$i28, out_$i29, out_$p30, out_$i31, out_$i32, out_$i24, out_$i25, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i12, out_$i13, out_$i14, out_$i40, out_$i41, out_$i10, out_$i11, out_$p42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i53, out_$i54, out_$i57, out_$i58, out_$p59, out_$i65, out_$i55, out_$i56, out_$i66, out_$i67, out_vslice_dummy_var_10, out_vslice_dummy_var_11, out_vslice_dummy_var_13);
    return;

  exit:
    return;
}



procedure xpc_do_exit_loop_$bb1(in_$i0: i32, in_$i4: i64, in_$i5: i32, in_$i6: i64, in_$i7: i16, in_$i8: i32, in_$i9: i1, in_$p15: ref, in_$i16: i64, in_$p17: ref, in_$i18: i32, in_$i19: i1, in_$p20: ref, in_$i21: i8, in_$i22: i32, in_$i23: i1, in_$i26: i32, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$p30: ref, in_$i31: i64, in_$i32: i64, in_$i24: i32, in_$i25: i64, in_$i33: i32, in_$i34: i32, in_$i35: i16, in_$i36: i32, in_$i37: i16, in_$i38: i32, in_$i39: i1, in_$i12: i64, in_$i13: i16, in_$i14: i32, in_$i40: i32, in_$i41: i64, in_$i10: i32, in_$i11: i64, in_$p42: ref, in_$i43: i32, in_$i44: i1, in_$i45: i64, in_$i46: i64, in_$i47: i1, in_$p48: ref, in_$i49: i64, in_$i50: i64, in_$i51: i64, in_$i53: i64, in_$i54: i64, in_$i57: i1, in_$i58: i1, in_$p59: ref, in_$i65: i32, in_$i55: i64, in_$i56: i32, in_$i66: i64, in_$i67: i32, in_vslice_dummy_var_10: i32, in_vslice_dummy_var_11: i32, in_vslice_dummy_var_13: i64) returns (out_$i4: i64, out_$i5: i32, out_$i6: i64, out_$i7: i16, out_$i8: i32, out_$i9: i1, out_$p15: ref, out_$i16: i64, out_$p17: ref, out_$i18: i32, out_$i19: i1, out_$p20: ref, out_$i21: i8, out_$i22: i32, out_$i23: i1, out_$i26: i32, out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$p30: ref, out_$i31: i64, out_$i32: i64, out_$i24: i32, out_$i25: i64, out_$i33: i32, out_$i34: i32, out_$i35: i16, out_$i36: i32, out_$i37: i16, out_$i38: i32, out_$i39: i1, out_$i12: i64, out_$i13: i16, out_$i14: i32, out_$i40: i32, out_$i41: i64, out_$i10: i32, out_$i11: i64, out_$p42: ref, out_$i43: i32, out_$i44: i1, out_$i45: i64, out_$i46: i64, out_$i47: i1, out_$p48: ref, out_$i49: i64, out_$i50: i64, out_$i51: i64, out_$i53: i64, out_$i54: i64, out_$i57: i1, out_$i58: i1, out_$p59: ref, out_$i65: i32, out_$i55: i64, out_$i56: i32, out_$i66: i64, out_$i67: i32, out_vslice_dummy_var_10: i32, out_vslice_dummy_var_11: i32, out_vslice_dummy_var_13: i64);
  modifies $M.1, $CurrAddr, $M.2, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.23, $M.28, $M.0, assertsPassed;



implementation xpc_destroy_gru_mq_uv_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} xpc_destroy_gru_mq_uv_loop_$bb3();
    return;

  exit:
    return;
}



procedure xpc_destroy_gru_mq_uv_loop_$bb3();



implementation xpc_gru_mq_watchlist_free_uv_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} xpc_gru_mq_watchlist_free_uv_loop_$bb3();
    return;

  exit:
    return;
}



procedure xpc_gru_mq_watchlist_free_uv_loop_$bb3();



implementation xpc_partition_going_down_loop_$bb11(in_$p0: ref, in_$i1: i32, in_$p2: ref, in_$p31: ref, in_$p36: ref, in_$p37: ref, in_$i38: i64, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$i42: i64, in_$p43: ref, in_$i44: i64, in_$i45: i32, in_$i46: i8, in_$i47: i32, in_$i48: i1, in_$i35: i32) returns (out_$p36: ref, out_$p37: ref, out_$i38: i64, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$i42: i64, out_$p43: ref, out_$i44: i64, out_$i45: i32, out_$i46: i8, out_$i47: i32, out_$i48: i1, out_$i35: i32)
{

  entry:
    out_$p36, out_$p37, out_$i38, out_$p39, out_$p40, out_$p41, out_$i42, out_$p43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i35 := in_$p36, in_$p37, in_$i38, in_$p39, in_$p40, in_$p41, in_$i42, in_$p43, in_$i44, in_$i45, in_$i46, in_$i47, in_$i48, in_$i35;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_522;

  $bb13:
    assume out_$i48 == 1;
    assume {:verifier.code 0} true;
    out_$i35 := out_$i45;
    goto $bb13_dummy;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    out_$i48 := $sgt.i32(out_$i47, out_$i45);
    goto corral_source_split_541;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    out_$i47 := $zext.i8.i32(out_$i46);
    goto corral_source_split_540;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    out_$i46 := $load.i8($M.1, in_$p31);
    goto corral_source_split_539;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    out_$i45 := $add.i32(out_$i35, 1);
    call {:si_unique_call 157} {:cexpr "ch_number"} boogie_si_record_i32(out_$i45);
    goto corral_source_split_538;

  SeqInstr_45:
    goto corral_source_split_537;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} xpc_msgqueue_deref(out_$p39);
    goto SeqInstr_44;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} spin_unlock_irqrestore(out_$p43, out_$i44);
    goto corral_source_split_536;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    out_$i44 := $load.i64($M.1, in_$p2);
    goto corral_source_split_535;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(out_$p37, $mul.ref(out_$i38, 720)), $mul.ref(8, 1));
    goto corral_source_split_534;

  SeqInstr_42:
    goto corral_source_split_533;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} xpc_disconnect_channel(693, out_$p39, in_$i1, in_$p2);
    goto SeqInstr_41;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, in_$p2, out_$i42);
    goto corral_source_split_532;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 153} out_$i42 := _raw_spin_lock_irqsave(out_$p41);
    goto corral_source_split_531;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 152} out_$p41 := spinlock_check(out_$p40);
    goto corral_source_split_530;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(out_$p37, $mul.ref(out_$i38, 720)), $mul.ref(8, 1));
    goto corral_source_split_529;

  SeqInstr_39:
    goto corral_source_split_528;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 151} xpc_msgqueue_ref(out_$p39);
    goto SeqInstr_38;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref(out_$p37, $mul.ref(out_$i38, 720));
    goto corral_source_split_527;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    out_$i38 := $sext.i32.i64(out_$i35);
    goto corral_source_split_526;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    out_$p37 := $load.ref($M.1, out_$p36);
    goto corral_source_split_525;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(in_$p0, $mul.ref(0, 872)), $mul.ref(376, 1));
    goto corral_source_split_524;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb13_dummy:
    call {:si_unique_call 1} out_$p36, out_$p37, out_$i38, out_$p39, out_$p40, out_$p41, out_$i42, out_$p43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i35 := xpc_partition_going_down_loop_$bb11(in_$p0, in_$i1, in_$p2, in_$p31, out_$p36, out_$p37, out_$i38, out_$p39, out_$p40, out_$p41, out_$i42, out_$p43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i35);
    return;

  exit:
    return;
}



procedure xpc_partition_going_down_loop_$bb11(in_$p0: ref, in_$i1: i32, in_$p2: ref, in_$p31: ref, in_$p36: ref, in_$p37: ref, in_$i38: i64, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$i42: i64, in_$p43: ref, in_$i44: i64, in_$i45: i32, in_$i46: i8, in_$i47: i32, in_$i48: i1, in_$i35: i32) returns (out_$p36: ref, out_$p37: ref, out_$i38: i64, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$i42: i64, out_$p43: ref, out_$i44: i64, out_$i45: i32, out_$i46: i8, out_$i47: i32, out_$i48: i1, out_$i35: i32);
  modifies $M.0, $M.2, $M.1, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.23, $M.28, $CurrAddr, assertsPassed;



implementation xpc_create_kthreads_loop_$bb12()
{

  entry:
    goto $bb12, exit;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb12_dummy;

  $bb12_dummy:
    call {:si_unique_call 1} xpc_create_kthreads_loop_$bb12();
    return;

  exit:
    return;
}



procedure xpc_create_kthreads_loop_$bb12();



implementation xpc_create_kthreads_loop_$bb4(in_$p0: ref, in_$i2: i32, in_$i12: i64, in_$p13: ref, in_$i16: i64, in_$p17: ref, in_$i22: i1, in_$p23: ref, in_$i24: i32, in_$i25: i1, in_$p34: ref, in_$i35: i32, in_$i36: i32, in_$i37: i1, in_$p38: ref, in_$i39: i32, in_$i40: i1, in_$p41: ref, in_$i42: i32, in_$i43: i1, in_$p44: ref, in_$p46: ref, in_$p47: ref, in_$i48: i16, in_$i49: i32, in_$p50: ref, in_$i51: i16, in_$i52: i32, in_$p53: ref, in_$p54: ref, in_$i55: i64, in_$i56: i1, in_$p58: ref, in_$i59: i64, in_$i60: i1, in_$i77: i32, in_$i78: i1, in_$i21: i32, in_vslice_dummy_var_21: i32, in_vslice_dummy_var_22: i32) returns (out_$i22: i1, out_$p23: ref, out_$i24: i32, out_$i25: i1, out_$p34: ref, out_$i35: i32, out_$i36: i32, out_$i37: i1, out_$p38: ref, out_$i39: i32, out_$i40: i1, out_$p41: ref, out_$i42: i32, out_$i43: i1, out_$p44: ref, out_$p46: ref, out_$p47: ref, out_$i48: i16, out_$i49: i32, out_$p50: ref, out_$i51: i16, out_$i52: i32, out_$p53: ref, out_$p54: ref, out_$i55: i64, out_$i56: i1, out_$p58: ref, out_$i59: i64, out_$i60: i1, out_$i77: i32, out_$i78: i1, out_$i21: i32, out_vslice_dummy_var_21: i32, out_vslice_dummy_var_22: i32)
{

  entry:
    out_$i22, out_$p23, out_$i24, out_$i25, out_$p34, out_$i35, out_$i36, out_$i37, out_$p38, out_$i39, out_$i40, out_$p41, out_$i42, out_$i43, out_$p44, out_$p46, out_$p47, out_$i48, out_$i49, out_$p50, out_$i51, out_$i52, out_$p53, out_$p54, out_$i55, out_$i56, out_$p58, out_$i59, out_$i60, out_$i77, out_$i78, out_$i21, out_vslice_dummy_var_21, out_vslice_dummy_var_22 := in_$i22, in_$p23, in_$i24, in_$i25, in_$p34, in_$i35, in_$i36, in_$i37, in_$p38, in_$i39, in_$i40, in_$p41, in_$i42, in_$i43, in_$p44, in_$p46, in_$p47, in_$i48, in_$i49, in_$p50, in_$i51, in_$i52, in_$p53, in_$p54, in_$i55, in_$i56, in_$p58, in_$i59, in_$i60, in_$i77, in_$i78, in_$i21, in_vslice_dummy_var_21, in_vslice_dummy_var_22;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_743;

  $bb41:
    assume out_$i78 == 1;
    assume {:verifier.code 0} true;
    out_$i21 := out_$i77;
    goto $bb41_dummy;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    out_$i78 := $sgt.i32(out_$i21, 0);
    goto corral_source_split_837;

  $bb40:
    assume {:verifier.code 0} true;
    out_$i77 := $sub.i32(out_$i21, 1);
    call {:si_unique_call 235} {:cexpr "needed"} boogie_si_record_i32(out_$i77);
    goto corral_source_split_836;

  $bb30:
    assume !(out_$i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    out_$i60 := $ne.i64(out_$i59, 0);
    goto corral_source_split_804;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 220} out_$i59 := IS_ERR(out_$p58);
    call {:si_unique_call 221} {:cexpr "tmp___9"} boogie_si_record_i64(out_$i59);
    goto corral_source_split_803;

  $bb28:
    assume {:verifier.code 0} true;
    out_$p58 := $bitcast.ref.ref(out_$p53);
    goto corral_source_split_802;

  $bb27:
    assume !(out_$i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 219} out_vslice_dummy_var_22 := wake_up_process(out_$p53);
    goto corral_source_split_800;

  $bb26:
    assume out_$i56 == 1;
    goto corral_source_split_799;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    out_$i56 := $eq.i64(out_$i55, 0);
    goto corral_source_split_797;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 217} out_$i55 := IS_ERR(out_$p54);
    call {:si_unique_call 218} {:cexpr "tmp___4"} boogie_si_record_i64(out_$i55);
    goto corral_source_split_796;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    out_$p54 := $bitcast.ref.ref(out_$p53);
    goto corral_source_split_795;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 216} out_$p53 := kthread_create_on_node.ref.ref.i32.ref.i32.i32(xpc_kthread_start, out_$p46, $sub.i32(0, 1), .str.9, out_$i49, out_$i52);
    goto corral_source_split_794;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    out_$i52 := $zext.i16.i32(out_$i51);
    goto corral_source_split_793;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    out_$i51 := $load.i16($M.1, out_$p50);
    goto corral_source_split_792;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(in_$p0, $mul.ref(0, 720)), $mul.ref(92, 1));
    goto corral_source_split_791;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    out_$i49 := $sext.i16.i32(out_$i48);
    goto corral_source_split_790;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    out_$i48 := $load.i16($M.1, out_$p47);
    goto corral_source_split_789;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(in_$p0, $mul.ref(0, 720)), $mul.ref(0, 1));
    goto corral_source_split_788;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    out_$p46 := $i2p.i64.ref(in_$i12);
    goto corral_source_split_787;

  SeqInstr_99:
    goto corral_source_split_786;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 215} xpc_msgqueue_ref(in_$p0);
    goto SeqInstr_98;

  SeqInstr_96:
    goto corral_source_split_785;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 214} out_vslice_dummy_var_21 := xpc_part_ref(in_$p17);
    goto SeqInstr_95;

  $bb7:
    assume !(out_$i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb18:
    assume !(out_$i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb20:
    assume !(out_$i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    goto $bb21;

  SeqInstr_93:
    goto corral_source_split_783;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    out_$p44 := $load.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(248, 1)));
    call {:si_unique_call 213} devirtbounce.3(out_$p44, in_$p17);
    goto SeqInstr_92;

  $bb19:
    assume out_$i43 == 1;
    goto corral_source_split_782;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    out_$i43 := $eq.i32(out_$i42, 1);
    goto corral_source_split_780;

  SeqInstr_90:
    call {:si_unique_call 212} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i42);
    goto corral_source_split_779;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 211} out_$i42 := atomic_add_return(1, out_$p41);
    goto SeqInstr_89;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(in_$p13, $mul.ref(in_$i16, 872)), $mul.ref(372, 1));
    goto corral_source_split_778;

  $bb17:
    assume out_$i40 == 1;
    goto corral_source_split_777;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    out_$i40 := $eq.i32(out_$i39, 1);
    goto corral_source_split_775;

  SeqInstr_87:
    call {:si_unique_call 210} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i39);
    goto corral_source_split_774;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} out_$i39 := atomic_add_return(1, out_$p38);
    goto SeqInstr_86;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(in_$p0, $mul.ref(0, 720)), $mul.ref(320, 1));
    goto corral_source_split_773;

  $bb16:
    assume !(out_$i37 == 1);
    goto corral_source_split_772;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    out_$i37 := $ne.i32(out_$i36, 0);
    goto corral_source_split_766;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    out_$i36 := $and.i32(out_$i35, 131072);
    goto corral_source_split_765;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    out_$i35 := $load.i32($M.1, out_$p34);
    goto corral_source_split_764;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(in_$p0, $mul.ref(0, 720)), $mul.ref(80, 1));
    goto corral_source_split_763;

  $bb9:
    assume !(out_$i25 == 1);
    goto corral_source_split_762;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    out_$i25 := $eq.i32(out_$i24, 0);
    goto corral_source_split_750;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 204} out_$i24 := atomic_add_unless(out_$p23, 1, 0);
    call {:si_unique_call 205} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_749;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(in_$p0, $mul.ref(0, 720)), $mul.ref(320, 1));
    goto corral_source_split_748;

  $bb6:
    assume out_$i22 == 1;
    goto corral_source_split_747;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i22 := $ne.i32(in_$i2, 0);
    goto corral_source_split_745;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb41_dummy:
    call {:si_unique_call 1} out_$i22, out_$p23, out_$i24, out_$i25, out_$p34, out_$i35, out_$i36, out_$i37, out_$p38, out_$i39, out_$i40, out_$p41, out_$i42, out_$i43, out_$p44, out_$p46, out_$p47, out_$i48, out_$i49, out_$p50, out_$i51, out_$i52, out_$p53, out_$p54, out_$i55, out_$i56, out_$p58, out_$i59, out_$i60, out_$i77, out_$i78, out_$i21, out_vslice_dummy_var_21, out_vslice_dummy_var_22 := xpc_create_kthreads_loop_$bb4(in_$p0, in_$i2, in_$i12, in_$p13, in_$i16, in_$p17, out_$i22, out_$p23, out_$i24, out_$i25, out_$p34, out_$i35, out_$i36, out_$i37, out_$p38, out_$i39, out_$i40, out_$p41, out_$i42, out_$i43, out_$p44, out_$p46, out_$p47, out_$i48, out_$i49, out_$p50, out_$i51, out_$i52, out_$p53, out_$p54, out_$i55, out_$i56, out_$p58, out_$i59, out_$i60, out_$i77, out_$i78, out_$i21, out_vslice_dummy_var_21, out_vslice_dummy_var_22);
    return;

  exit:
    return;
}



procedure xpc_create_kthreads_loop_$bb4(in_$p0: ref, in_$i2: i32, in_$i12: i64, in_$p13: ref, in_$i16: i64, in_$p17: ref, in_$i22: i1, in_$p23: ref, in_$i24: i32, in_$i25: i1, in_$p34: ref, in_$i35: i32, in_$i36: i32, in_$i37: i1, in_$p38: ref, in_$i39: i32, in_$i40: i1, in_$p41: ref, in_$i42: i32, in_$i43: i1, in_$p44: ref, in_$p46: ref, in_$p47: ref, in_$i48: i16, in_$i49: i32, in_$p50: ref, in_$i51: i16, in_$i52: i32, in_$p53: ref, in_$p54: ref, in_$i55: i64, in_$i56: i1, in_$p58: ref, in_$i59: i64, in_$i60: i1, in_$i77: i32, in_$i78: i1, in_$i21: i32, in_vslice_dummy_var_21: i32, in_vslice_dummy_var_22: i32) returns (out_$i22: i1, out_$p23: ref, out_$i24: i32, out_$i25: i1, out_$p34: ref, out_$i35: i32, out_$i36: i32, out_$i37: i1, out_$p38: ref, out_$i39: i32, out_$i40: i1, out_$p41: ref, out_$i42: i32, out_$i43: i1, out_$p44: ref, out_$p46: ref, out_$p47: ref, out_$i48: i16, out_$i49: i32, out_$p50: ref, out_$i51: i16, out_$i52: i32, out_$p53: ref, out_$p54: ref, out_$i55: i64, out_$i56: i1, out_$p58: ref, out_$i59: i64, out_$i60: i1, out_$i77: i32, out_$i78: i1, out_$i21: i32, out_vslice_dummy_var_21: i32, out_vslice_dummy_var_22: i32);
  modifies $M.1, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $CurrAddr, $M.23, $M.28, assertsPassed, $M.0, $M.2;



implementation xpc_kthread_waitmsgs_loop_$bb27(in_$p1: ref, in_$p3: ref, in_$p4: ref, in_$p54: ref, in_$p57: ref, in_$i58: i32, in_$i59: i32, in_$i60: i1, in_$p62: ref, in_$i63: i32, in_$i64: i1, in_$i66: i32, in_$i67: i1) returns (out_$p57: ref, out_$i58: i32, out_$i59: i32, out_$i60: i1, out_$p62: ref, out_$i63: i32, out_$i64: i1, out_$i66: i32, out_$i67: i1)
{

  entry:
    out_$p57, out_$i58, out_$i59, out_$i60, out_$p62, out_$i63, out_$i64, out_$i66, out_$i67 := in_$p57, in_$i58, in_$i59, in_$i60, in_$p62, in_$i63, in_$i64, in_$i66, in_$i67;
    goto $bb27, exit;

  $bb27:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref(in_$p1, $mul.ref(0, 720)), $mul.ref(80, 1));
    goto corral_source_split_1326;

  $bb37:
    assume {:verifier.code 0} true;
    assume !(out_$i67 == 1);
    goto $bb37_dummy;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    out_$i67 := $sgt.i32(out_$i66, 0);
    goto corral_source_split_1343;

  SeqInstr_168:
    call {:si_unique_call 346} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i66);
    goto corral_source_split_1342;

  SeqInstr_167:
    assume assertsPassed;
    goto SeqInstr_168;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} prepare_to_wait_exclusive(in_$p54, in_$p3, 1);
    call {:si_unique_call 345} out_$i66 := devirtbounce.10(in_$p4, in_$p1);
    goto SeqInstr_167;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 343} schedule();
    goto corral_source_split_1340;

  $bb33:
    assume out_$i64 == 1;
    goto corral_source_split_1339;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    out_$i64 := $eq.i32(out_$i63, 0);
    goto corral_source_split_1337;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 341} out_$i63 := signal_pending(out_$p62);
    call {:si_unique_call 342} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i63);
    goto corral_source_split_1336;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 340} out_$p62 := get_current();
    goto corral_source_split_1335;

  $bb29:
    assume !(out_$i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    out_$i60 := $ne.i32(out_$i59, 0);
    goto corral_source_split_1329;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    out_$i59 := $and.i32(out_$i58, 131072);
    goto corral_source_split_1328;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    out_$i58 := $load.i32($M.1, out_$p57);
    goto corral_source_split_1327;

  $bb37_dummy:
    call {:si_unique_call 1} out_$p57, out_$i58, out_$i59, out_$i60, out_$p62, out_$i63, out_$i64, out_$i66, out_$i67 := xpc_kthread_waitmsgs_loop_$bb27(in_$p1, in_$p3, in_$p4, in_$p54, out_$p57, out_$i58, out_$i59, out_$i60, out_$p62, out_$i63, out_$i64, out_$i66, out_$i67);
    return;

  exit:
    return;
}



procedure xpc_kthread_waitmsgs_loop_$bb27(in_$p1: ref, in_$p3: ref, in_$p4: ref, in_$p54: ref, in_$p57: ref, in_$i58: i32, in_$i59: i32, in_$i60: i1, in_$p62: ref, in_$i63: i32, in_$i64: i1, in_$i66: i32, in_$i67: i1) returns (out_$p57: ref, out_$i58: i32, out_$i59: i32, out_$i60: i1, out_$p62: ref, out_$i63: i32, out_$i64: i1, out_$i66: i32, out_$i67: i1);
  modifies $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.1, $M.24, $M.40, $M.18, $M.19, $M.20, $M.21, $M.22, $M.2, $M.23, $CurrAddr, $M.31, $M.28, $M.41, $M.42, $M.0, assertsPassed, $M.43, $M.44, $M.45, $M.32;



implementation xpc_kthread_waitmsgs_loop_$bb5(in_$p1: ref, in_$p4: ref, in_$p5: ref, in_$i8: i32, in_$i9: i1, in_$i10: i32, in_$i11: i32, in_$i12: i1) returns (out_$i8: i32, out_$i9: i1, out_$i10: i32, out_$i11: i32, out_$i12: i1)
{

  entry:
    out_$i8, out_$i9, out_$i10, out_$i11, out_$i12 := in_$i8, in_$i9, in_$i10, in_$i11, in_$i12;
    goto $bb5, exit;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i10 := $load.i32($M.1, in_$p5);
    goto corral_source_split_1243;

  $bb7:
    assume {:verifier.code 0} true;
    assume out_$i9 == 1;
    goto $bb7_dummy;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    out_$i9 := $sgt.i32(out_$i8, 0);
    goto corral_source_split_1248;

  SeqInstr_153:
    call {:si_unique_call 326} {:cexpr "tmp"} boogie_si_record_i32(out_$i8);
    goto corral_source_split_1247;

  SeqInstr_152:
    assume assertsPassed;
    goto SeqInstr_153;

  SeqInstr_150:
    call {:si_unique_call 325} out_$i8 := devirtbounce.10(in_$p4, in_$p1);
    goto SeqInstr_152;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} xpc_deliver_payload(in_$p1);
    goto SeqInstr_149;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb9:
    assume out_$i12 == 1;
    goto corral_source_split_1252;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    out_$i12 := $eq.i32(out_$i11, 0);
    goto corral_source_split_1245;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    out_$i11 := $and.i32(out_$i10, 131072);
    goto corral_source_split_1244;

  $bb7_dummy:
    call {:si_unique_call 1} out_$i8, out_$i9, out_$i10, out_$i11, out_$i12 := xpc_kthread_waitmsgs_loop_$bb5(in_$p1, in_$p4, in_$p5, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12);
    return;

  exit:
    return;
}



procedure xpc_kthread_waitmsgs_loop_$bb5(in_$p1: ref, in_$p4: ref, in_$p5: ref, in_$i8: i32, in_$i9: i1, in_$i10: i32, in_$i11: i32, in_$i12: i1) returns (out_$i8: i32, out_$i9: i1, out_$i10: i32, out_$i11: i32, out_$i12: i1);
  modifies $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.1, $M.24, $M.40, $M.18, $M.19, $M.20, $M.21, $M.22, $M.2, $M.23, $CurrAddr, $M.31, $M.28, $M.41, $M.42, $M.0, assertsPassed, $M.43, $M.44, $M.45, $M.32;



implementation xpc_kthread_waitmsgs_loop_$bb1(in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$i6: i32, in_$i7: i1, in_$i8: i32, in_$i9: i1, in_$i10: i32, in_$i11: i32, in_$i12: i1, in_$p13: ref, in_$i14: i32, in_$p15: ref, in_$i16: i32, in_$i17: i1, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i25: i24, in_$i26: i24, in_$i27: i24, in_$p28: ref, in_$p29: ref, in_$i30: i8, in_$i31: i64, in_$i32: i64, in_$i33: i64, in_$i34: i1, in_$p35: ref, in_$i37: i32, in_$i38: i1, in_$p39: ref, in_$i40: i32, in_$i41: i32, in_$i42: i1, in_$p43: ref, in_$p44: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p50: ref, in_$p51: ref, in_$p53: ref, in_$p54: ref, in_$i55: i32, in_$i56: i1, in_$p57: ref, in_$i58: i32, in_$i59: i32, in_$i60: i1, in_$p61: ref, in_$p62: ref, in_$i63: i32, in_$i64: i1, in_$p65: ref, in_$i66: i32, in_$i67: i1, in_$p68: ref, in_$p69: ref, in_$i70: i32, in_$i71: i32, in_$i72: i1, in_vslice_dummy_var_29: i32) returns (out_$p5: ref, out_$i6: i32, out_$i7: i1, out_$i8: i32, out_$i9: i1, out_$i10: i32, out_$i11: i32, out_$i12: i1, out_$p13: ref, out_$i14: i32, out_$p15: ref, out_$i16: i32, out_$i17: i1, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i25: i24, out_$i26: i24, out_$i27: i24, out_$p28: ref, out_$p29: ref, out_$i30: i8, out_$i31: i64, out_$i32: i64, out_$i33: i64, out_$i34: i1, out_$p35: ref, out_$i37: i32, out_$i38: i1, out_$p39: ref, out_$i40: i32, out_$i41: i32, out_$i42: i1, out_$p43: ref, out_$p44: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$p50: ref, out_$p51: ref, out_$p53: ref, out_$p54: ref, out_$i55: i32, out_$i56: i1, out_$p57: ref, out_$i58: i32, out_$i59: i32, out_$i60: i1, out_$p61: ref, out_$p62: ref, out_$i63: i32, out_$i64: i1, out_$p65: ref, out_$i66: i32, out_$i67: i1, out_$p68: ref, out_$p69: ref, out_$i70: i32, out_$i71: i32, out_$i72: i1, out_vslice_dummy_var_29: i32)
{

  entry:
    out_$p5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$p13, out_$i14, out_$p15, out_$i16, out_$i17, out_$p19, out_$p20, out_$p21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$i27, out_$p28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p35, out_$i37, out_$i38, out_$p39, out_$i40, out_$i41, out_$i42, out_$p43, out_$p44, out_$p46, out_$p47, out_$p48, out_$p50, out_$p51, out_$p53, out_$p54, out_$i55, out_$i56, out_$p57, out_$i58, out_$i59, out_$i60, out_$p61, out_$p62, out_$i63, out_$i64, out_$p65, out_$i66, out_$i67, out_$p68, out_$p69, out_$i70, out_$i71, out_$i72, out_vslice_dummy_var_29 := in_$p5, in_$i6, in_$i7, in_$i8, in_$i9, in_$i10, in_$i11, in_$i12, in_$p13, in_$i14, in_$p15, in_$i16, in_$i17, in_$p19, in_$p20, in_$p21, in_$p22, in_$p23, in_$p24, in_$i25, in_$i26, in_$i27, in_$p28, in_$p29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$p35, in_$i37, in_$i38, in_$p39, in_$i40, in_$i41, in_$i42, in_$p43, in_$p44, in_$p46, in_$p47, in_$p48, in_$p50, in_$p51, in_$p53, in_$p54, in_$i55, in_$i56, in_$p57, in_$i58, in_$i59, in_$i60, in_$p61, in_$p62, in_$i63, in_$i64, in_$p65, in_$i66, in_$i67, in_$p68, in_$p69, in_$i70, in_$i71, in_$i72, in_vslice_dummy_var_29;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    out_$p5 := $add.ref($add.ref(in_$p1, $mul.ref(0, 720)), $mul.ref(80, 1));
    call {:si_unique_call 322} out_$i6 := devirtbounce.10(in_$p4, in_$p1);
    goto SeqInstr_146;

  $bb39:
    assume {:verifier.code 0} true;
    assume out_$i72 == 1;
    goto $bb39_dummy;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    out_$i72 := $eq.i32(out_$i71, 0);
    goto corral_source_split_1353;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    out_$i71 := $and.i32(out_$i70, 131072);
    goto corral_source_split_1352;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    out_$i70 := $load.i32($M.1, out_$p69);
    goto corral_source_split_1351;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref($add.ref(in_$p1, $mul.ref(0, 720)), $mul.ref(80, 1));
    goto corral_source_split_1350;

  SeqInstr_171:
    goto corral_source_split_1349;

  SeqInstr_170:
    assume assertsPassed;
    goto SeqInstr_171;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} atomic_dec(out_$p68);
    goto SeqInstr_170;

  $bb38:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref(in_$p1, $mul.ref(0, 720)), $mul.ref(328, 1));
    goto corral_source_split_1348;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb38;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} finish_wait(out_$p61, in_$p3);
    goto corral_source_split_1322;

  $bb25:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(in_$p1, $mul.ref(0, 720)), $mul.ref(344, 1));
    goto corral_source_split_1321;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb24:
    assume {:verifier.code 0} true;
    assume out_$i56 == 1;
    goto $bb25;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb26;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    out_$i56 := $sgt.i32(out_$i55, 0);
    goto corral_source_split_1319;

  SeqInstr_165:
    call {:si_unique_call 338} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i55);
    goto corral_source_split_1318;

  SeqInstr_164:
    assume assertsPassed;
    goto SeqInstr_165;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} prepare_to_wait_exclusive(out_$p54, in_$p3, 1);
    call {:si_unique_call 337} out_$i55 := devirtbounce.10(in_$p4, in_$p1);
    goto SeqInstr_164;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(in_$p1, $mul.ref(0, 720)), $mul.ref(344, 1));
    goto corral_source_split_1317;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    $M.22 := $store.ref($M.22, out_$p53, out_$p51);
    goto corral_source_split_1316;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(8, 1));
    goto corral_source_split_1315;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1314;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    $M.21 := $store.ref($M.21, out_$p50, out_$p48);
    goto corral_source_split_1313;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_1312;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1311;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    $M.20 := $store.ref($M.20, out_$p47, autoremove_wake_function);
    goto corral_source_split_1310;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1309;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    $M.19 := $store.ref($M.19, out_$p46, out_$p43);
    goto corral_source_split_1308;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1307;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    goto corral_source_split_1306;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    $M.18 := $store.i32($M.18, out_$p44, 0);
    goto corral_source_split_1305;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1304;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} out_$p43 := get_current();
    goto corral_source_split_1303;

  $bb22:
    assume out_$i42 == 1;
    goto corral_source_split_1302;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    out_$i42 := $eq.i32(out_$i41, 0);
    goto corral_source_split_1300;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    out_$i41 := $and.i32(out_$i40, 131072);
    goto corral_source_split_1299;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    out_$i40 := $load.i32($M.1, out_$p39);
    goto corral_source_split_1298;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(in_$p1, $mul.ref(0, 720)), $mul.ref(80, 1));
    goto corral_source_split_1297;

  $bb19:
    assume out_$i38 == 1;
    goto corral_source_split_1296;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    out_$i38 := $sle.i32(out_$i37, 0);
    goto corral_source_split_1294;

  SeqInstr_162:
    call {:si_unique_call 334} {:cexpr "tmp___6"} boogie_si_record_i32(out_$i37);
    goto corral_source_split_1293;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  $bb18:
    call {:si_unique_call 333} out_$i37 := devirtbounce.10(in_$p4, in_$p1);
    goto SeqInstr_161;

  $bb17:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} out_vslice_dummy_var_29 := __dynamic_dev_dbg.ref.ref.ref(in_$p2, out_$p35, .str.68);
    goto corral_source_split_1291;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    out_$p35 := $M.17;
    goto corral_source_split_1290;

  $bb16:
    assume out_$i34 == 1;
    goto corral_source_split_1289;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    out_$i34 := $ne.i64(out_$i33, 0);
    goto corral_source_split_1287;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 330} out_$i33 := ldv__builtin_expect(out_$i32, 0);
    call {:si_unique_call 331} {:cexpr "tmp___1"} boogie_si_record_i64(out_$i33);
    goto corral_source_split_1286;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    out_$i32 := $and.i64(out_$i31, 1);
    goto corral_source_split_1285;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    out_$i31 := $zext.i8.i64(out_$i30);
    goto corral_source_split_1284;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    out_$i30 := $load.i8($M.13, out_$p29);
    goto corral_source_split_1283;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1282;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, out_$p28, 0);
    goto corral_source_split_1281;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1280;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, out_$p24, out_$i27);
    goto corral_source_split_1279;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    out_$i27 := $or.i24(out_$i26, 731);
    goto corral_source_split_1278;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    out_$i26 := $and.i24(out_$i25, $sub.i24(0, 262144));
    goto corral_source_split_1277;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i24($M.12, out_$p24);
    goto corral_source_split_1276;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    out_$p24 := $bitcast.ref.ref(out_$p23);
    goto corral_source_split_1275;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1274;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, out_$p22, .str.68);
    goto corral_source_split_1273;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1272;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, out_$p21, .str.6);
    goto corral_source_split_1271;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1270;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, out_$p20, .str.67);
    goto corral_source_split_1269;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1268;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, out_$p19, .str);
    goto corral_source_split_1267;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1266;

  $bb13:
    assume !(out_$i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    out_$i17 := $ugt.i32(out_$i14, out_$i16);
    goto corral_source_split_1260;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    out_$i16 := $load.i32($M.1, out_$p15);
    goto corral_source_split_1259;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(in_$p1, $mul.ref(0, 720)), $mul.ref(332, 1));
    goto corral_source_split_1258;

  SeqInstr_156:
    call {:si_unique_call 328} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i14);
    goto corral_source_split_1257;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 327} out_$i14 := atomic_add_return(1, out_$p13);
    goto SeqInstr_155;

  $bb11:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(in_$p1, $mul.ref(0, 720)), $mul.ref(328, 1));
    goto corral_source_split_1256;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb3:
    assume {:verifier.code 0} true;
    assume !(out_$i7 == 1);
    goto $bb4;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    goto $bb4;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb8:
    assume !(out_$i9 == 1);
    goto corral_source_split_1250;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    out_$i9 := $sgt.i32(out_$i8, 0);
    goto corral_source_split_1248;

  SeqInstr_153:
    call {:si_unique_call 326} {:cexpr "tmp"} boogie_si_record_i32(out_$i8);
    goto corral_source_split_1247;

  SeqInstr_152:
    assume assertsPassed;
    goto SeqInstr_153;

  SeqInstr_150:
    call {:si_unique_call 325} out_$i8 := devirtbounce.10(in_$p4, in_$p1);
    goto SeqInstr_152;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} xpc_deliver_payload(in_$p1);
    goto SeqInstr_149;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb9:
    assume out_$i12 == 1;
    goto corral_source_split_1252;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    out_$i12 := $eq.i32(out_$i11, 0);
    goto corral_source_split_1245;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    out_$i11 := $and.i32(out_$i10, 131072);
    goto corral_source_split_1244;

  $bb5:
    call out_$i8, out_$i9, out_$i10, out_$i11, out_$i12 := xpc_kthread_waitmsgs_loop_$bb5(in_$p1, in_$p4, out_$p5, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12);
    goto $bb5_last;

  $bb5_last:
    assume {:verifier.code 0} true;
    out_$i10 := $load.i32($M.1, out_$p5);
    goto corral_source_split_1243;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb7:
    assume {:verifier.code 0} true;
    assume out_$i9 == 1;
    assume false;
    return;

  $bb2:
    assume out_$i7 == 1;
    goto corral_source_split_1241;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    out_$i7 := $sgt.i32(out_$i6, 0);
    goto corral_source_split_1239;

  SeqInstr_147:
    call {:si_unique_call 323} {:cexpr "tmp"} boogie_si_record_i32(out_$i6);
    goto corral_source_split_1238;

  SeqInstr_146:
    assume assertsPassed;
    goto SeqInstr_147;

  $bb10:
    assume !(out_$i12 == 1);
    goto corral_source_split_1254;

  $bb28:
    assume out_$i60 == 1;
    goto corral_source_split_1331;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    out_$i60 := $ne.i32(out_$i59, 0);
    goto corral_source_split_1329;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    out_$i59 := $and.i32(out_$i58, 131072);
    goto corral_source_split_1328;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    out_$i58 := $load.i32($M.1, out_$p57);
    goto corral_source_split_1327;

  $bb27:
    call out_$p57, out_$i58, out_$i59, out_$i60, out_$p62, out_$i63, out_$i64, out_$i66, out_$i67 := xpc_kthread_waitmsgs_loop_$bb27(in_$p1, in_$p3, in_$p4, out_$p54, out_$p57, out_$i58, out_$i59, out_$i60, out_$p62, out_$i63, out_$i64, out_$i66, out_$i67);
    goto $bb27_last;

  $bb27_last:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref(in_$p1, $mul.ref(0, 720)), $mul.ref(80, 1));
    goto corral_source_split_1326;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb37:
    assume {:verifier.code 0} true;
    assume !(out_$i67 == 1);
    assume false;
    return;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb37;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    out_$i67 := $sgt.i32(out_$i66, 0);
    goto corral_source_split_1343;

  SeqInstr_168:
    call {:si_unique_call 346} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i66);
    goto corral_source_split_1342;

  SeqInstr_167:
    assume assertsPassed;
    goto SeqInstr_168;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} prepare_to_wait_exclusive(out_$p54, in_$p3, 1);
    call {:si_unique_call 345} out_$i66 := devirtbounce.10(in_$p4, in_$p1);
    goto SeqInstr_167;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 343} schedule();
    goto corral_source_split_1340;

  $bb33:
    assume out_$i64 == 1;
    goto corral_source_split_1339;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    out_$i64 := $eq.i32(out_$i63, 0);
    goto corral_source_split_1337;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 341} out_$i63 := signal_pending(out_$p62);
    call {:si_unique_call 342} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i63);
    goto corral_source_split_1336;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 340} out_$p62 := get_current();
    goto corral_source_split_1335;

  $bb29:
    assume !(out_$i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb26:
    assume !(out_$i56 == 1);
    goto corral_source_split_1324;

  $bb30:
    assume out_$i67 == 1;
    goto corral_source_split_1333;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 347} abort_exclusive_wait(out_$p65, in_$p3, 1, $0.ref);
    goto corral_source_split_1346;

  $bb36:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(in_$p1, $mul.ref(0, 720)), $mul.ref(344, 1));
    goto corral_source_split_1345;

  $bb34:
    assume !(out_$i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb20:
    assume {:verifier.code 0} true;
    assume !(out_$i38 == 1);
    goto $bb21;

  $bb23:
    assume {:verifier.code 0} true;
    assume !(out_$i42 == 1);
    goto $bb21;

  $bb39_dummy:
    call {:si_unique_call 1} out_$p5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$p13, out_$i14, out_$p15, out_$i16, out_$i17, out_$p19, out_$p20, out_$p21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$i27, out_$p28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p35, out_$i37, out_$i38, out_$p39, out_$i40, out_$i41, out_$i42, out_$p43, out_$p44, out_$p46, out_$p47, out_$p48, out_$p50, out_$p51, out_$p53, out_$p54, out_$i55, out_$i56, out_$p57, out_$i58, out_$i59, out_$i60, out_$p61, out_$p62, out_$i63, out_$i64, out_$p65, out_$i66, out_$i67, out_$p68, out_$p69, out_$i70, out_$i71, out_$i72, out_vslice_dummy_var_29 := xpc_kthread_waitmsgs_loop_$bb1(in_$p1, in_$p2, in_$p3, in_$p4, out_$p5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$p13, out_$i14, out_$p15, out_$i16, out_$i17, out_$p19, out_$p20, out_$p21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$i27, out_$p28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p35, out_$i37, out_$i38, out_$p39, out_$i40, out_$i41, out_$i42, out_$p43, out_$p44, out_$p46, out_$p47, out_$p48, out_$p50, out_$p51, out_$p53, out_$p54, out_$i55, out_$i56, out_$p57, out_$i58, out_$i59, out_$i60, out_$p61, out_$p62, out_$i63, out_$i64, out_$p65, out_$i66, out_$i67, out_$p68, out_$p69, out_$i70, out_$i71, out_$i72, out_vslice_dummy_var_29);
    return;

  exit:
    return;
}



procedure xpc_kthread_waitmsgs_loop_$bb1(in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$i6: i32, in_$i7: i1, in_$i8: i32, in_$i9: i1, in_$i10: i32, in_$i11: i32, in_$i12: i1, in_$p13: ref, in_$i14: i32, in_$p15: ref, in_$i16: i32, in_$i17: i1, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i25: i24, in_$i26: i24, in_$i27: i24, in_$p28: ref, in_$p29: ref, in_$i30: i8, in_$i31: i64, in_$i32: i64, in_$i33: i64, in_$i34: i1, in_$p35: ref, in_$i37: i32, in_$i38: i1, in_$p39: ref, in_$i40: i32, in_$i41: i32, in_$i42: i1, in_$p43: ref, in_$p44: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p50: ref, in_$p51: ref, in_$p53: ref, in_$p54: ref, in_$i55: i32, in_$i56: i1, in_$p57: ref, in_$i58: i32, in_$i59: i32, in_$i60: i1, in_$p61: ref, in_$p62: ref, in_$i63: i32, in_$i64: i1, in_$p65: ref, in_$i66: i32, in_$i67: i1, in_$p68: ref, in_$p69: ref, in_$i70: i32, in_$i71: i32, in_$i72: i1, in_vslice_dummy_var_29: i32) returns (out_$p5: ref, out_$i6: i32, out_$i7: i1, out_$i8: i32, out_$i9: i1, out_$i10: i32, out_$i11: i32, out_$i12: i1, out_$p13: ref, out_$i14: i32, out_$p15: ref, out_$i16: i32, out_$i17: i1, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i25: i24, out_$i26: i24, out_$i27: i24, out_$p28: ref, out_$p29: ref, out_$i30: i8, out_$i31: i64, out_$i32: i64, out_$i33: i64, out_$i34: i1, out_$p35: ref, out_$i37: i32, out_$i38: i1, out_$p39: ref, out_$i40: i32, out_$i41: i32, out_$i42: i1, out_$p43: ref, out_$p44: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$p50: ref, out_$p51: ref, out_$p53: ref, out_$p54: ref, out_$i55: i32, out_$i56: i1, out_$p57: ref, out_$i58: i32, out_$i59: i32, out_$i60: i1, out_$p61: ref, out_$p62: ref, out_$i63: i32, out_$i64: i1, out_$p65: ref, out_$i66: i32, out_$i67: i1, out_$p68: ref, out_$p69: ref, out_$i70: i32, out_$i71: i32, out_$i72: i1, out_vslice_dummy_var_29: i32);
  modifies $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.1, $M.24, $M.40, $M.18, $M.19, $M.20, $M.21, $M.22, $M.2, $M.23, $CurrAddr, $M.31, $M.28, $M.41, $M.42, $M.0, assertsPassed, $M.43, $M.44, $M.45, $M.32;



implementation __atomic_add_unless_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$i2: i32, in_$i11: i32, in_$i10: i32, in_$i13: i32, in_$i14: i32, in_$i15: i1, in_$i16: i32, in_$i17: i64, in_$i18: i64, in_$i19: i1, in_$i20: i32, in_$i21: i1, in_$i22: i32, in_$i23: i64, in_$i24: i64, in_$i25: i1) returns (out_$i11: i32, out_$i10: i32, out_$i13: i32, out_$i14: i32, out_$i15: i1, out_$i16: i32, out_$i17: i64, out_$i18: i64, out_$i19: i1, out_$i20: i32, out_$i21: i1, out_$i22: i32, out_$i23: i64, out_$i24: i64, out_$i25: i1)
{

  entry:
    out_$i11, out_$i10, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25 := in_$i11, in_$i10, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb11:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    out_$i10 := out_$i14;
    goto $bb11_dummy;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    out_$i11 := out_$i14;
    assume true;
    goto $bb11;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    out_$i25 := $ne.i64(out_$i24, 0);
    goto corral_source_split_1603;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 400} out_$i24 := ldv__builtin_expect(out_$i23, 0);
    call {:si_unique_call 401} {:cexpr "tmp"} boogie_si_record_i64(out_$i24);
    goto corral_source_split_1602;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    out_$i23 := $sext.i32.i64(out_$i22);
    goto corral_source_split_1601;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    out_$i22 := $zext.i1.i32(out_$i21);
    goto corral_source_split_1600;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i21 := $eq.i32(out_$i14, in_$i2);
    goto corral_source_split_1599;

  $bb9:
    assume !(out_$i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    out_$i20 := out_$i10;
    assume true;
    goto $bb9;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    out_$i19 := $ne.i64(out_$i18, 0);
    goto corral_source_split_1595;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 398} out_$i18 := ldv__builtin_expect(out_$i17, 1);
    call {:si_unique_call 399} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i18);
    goto corral_source_split_1594;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    out_$i17 := $sext.i32.i64(out_$i16);
    goto corral_source_split_1593;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    out_$i16 := $zext.i1.i32(out_$i15);
    goto corral_source_split_1592;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    out_$i15 := $eq.i32(out_$i14, out_$i10);
    goto corral_source_split_1591;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 396} out_$i14 := atomic_cmpxchg(in_$p0, out_$i10, out_$i13);
    call {:si_unique_call 397} {:cexpr "old"} boogie_si_record_i32(out_$i14);
    goto corral_source_split_1590;

  $bb7:
    assume {:verifier.code 0} true;
    out_$i13 := $add.i32(out_$i10, in_$i1);
    goto corral_source_split_1589;

  $bb11_dummy:
    call {:si_unique_call 1} out_$i11, out_$i10, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25 := __atomic_add_unless_loop_$bb4(in_$p0, in_$i1, in_$i2, out_$i11, out_$i10, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25);
    return;

  exit:
    return;
}



procedure __atomic_add_unless_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$i2: i32, in_$i11: i32, in_$i10: i32, in_$i13: i32, in_$i14: i32, in_$i15: i1, in_$i16: i32, in_$i17: i64, in_$i18: i64, in_$i19: i1, in_$i20: i32, in_$i21: i1, in_$i22: i32, in_$i23: i64, in_$i24: i64, in_$i25: i1) returns (out_$i11: i32, out_$i10: i32, out_$i13: i32, out_$i14: i32, out_$i15: i1, out_$i16: i32, out_$i17: i64, out_$i18: i64, out_$i19: i1, out_$i20: i32, out_$i21: i1, out_$i22: i32, out_$i23: i64, out_$i24: i64, out_$i25: i1);



implementation xpc_die_deactivate_loop_$bb32(in_$p44: ref, in_$i45: i32, in_$i46: i16, in_$i47: i32, in_$i48: i1, in_$p49: ref, in_$i50: i32, in_$i52: i32, in_$i53: i32, in_$i54: i16, in_$i55: i32, in_$i56: i16, in_$i57: i32, in_$i58: i1, in_$i43: i16, in_vslice_dummy_var_35: i32) returns (out_$p44: ref, out_$i45: i32, out_$i46: i16, out_$i47: i32, out_$i48: i1, out_$p49: ref, out_$i50: i32, out_$i52: i32, out_$i53: i32, out_$i54: i16, out_$i55: i32, out_$i56: i16, out_$i57: i32, out_$i58: i1, out_$i43: i16, out_vslice_dummy_var_35: i32)
{

  entry:
    out_$p44, out_$i45, out_$i46, out_$i47, out_$i48, out_$p49, out_$i50, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i43, out_vslice_dummy_var_35 := in_$p44, in_$i45, in_$i46, in_$i47, in_$i48, in_$p49, in_$i50, in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i57, in_$i58, in_$i43, in_vslice_dummy_var_35;
    goto $bb32, exit;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_1717;

  $bb37:
    assume out_$i58 == 1;
    assume {:verifier.code 0} true;
    out_$i43 := out_$i54;
    goto $bb37_dummy;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    out_$i58 := $slt.i32(out_$i55, out_$i57);
    goto corral_source_split_1735;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    out_$i57 := $sext.i16.i32(out_$i56);
    goto corral_source_split_1734;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    out_$i56 := $load.i16($M.1, xp_max_npartitions);
    goto corral_source_split_1733;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    out_$i55 := $sext.i16.i32(out_$i54);
    goto corral_source_split_1732;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    out_$i54 := $trunc.i32.i16(out_$i53);
    call {:si_unique_call 436} {:cexpr "partid"} boogie_si_record_i16(out_$i54);
    goto corral_source_split_1731;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    out_$i53 := $add.i32(out_$i52, 1);
    goto corral_source_split_1730;

  $bb36:
    assume {:verifier.code 0} true;
    out_$i52 := $sext.i16.i32(out_$i43);
    goto corral_source_split_1729;

  $bb35:
    assume !(out_$i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    goto $bb36;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 435} out_vslice_dummy_var_35 := _dev_info.ref.ref.i32(out_$p49, .str.89, out_$i50);
    goto corral_source_split_1727;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    out_$i50 := $sext.i16.i32(out_$i43);
    goto corral_source_split_1726;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    out_$p49 := $M.5;
    goto corral_source_split_1725;

  $bb34:
    assume out_$i48 == 1;
    goto corral_source_split_1724;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    out_$i48 := $ne.i32(out_$i47, 0);
    goto corral_source_split_1722;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    out_$i46 := $trunc.i32.i16(out_$i45);
    call {:si_unique_call 433} out_$i47 := devirtbounce.1(out_$p44, out_$i46);
    call {:si_unique_call 434} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i47);
    goto corral_source_split_1721;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    out_$i45 := $sext.i16.i32(out_$i43);
    goto corral_source_split_1720;

  $bb33:
    assume {:verifier.code 0} true;
    out_$p44 := $load.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(272, 1)));
    goto corral_source_split_1719;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb37_dummy:
    call {:si_unique_call 1} out_$p44, out_$i45, out_$i46, out_$i47, out_$i48, out_$p49, out_$i50, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i43, out_vslice_dummy_var_35 := xpc_die_deactivate_loop_$bb32(out_$p44, out_$i45, out_$i46, out_$i47, out_$i48, out_$p49, out_$i50, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i43, out_vslice_dummy_var_35);
    return;

  exit:
    return;
}



procedure xpc_die_deactivate_loop_$bb32(in_$p44: ref, in_$i45: i32, in_$i46: i16, in_$i47: i32, in_$i48: i1, in_$p49: ref, in_$i50: i32, in_$i52: i32, in_$i53: i32, in_$i54: i16, in_$i55: i32, in_$i56: i16, in_$i57: i32, in_$i58: i1, in_$i43: i16, in_vslice_dummy_var_35: i32) returns (out_$p44: ref, out_$i45: i32, out_$i46: i16, out_$i47: i32, out_$i48: i1, out_$p49: ref, out_$i50: i32, out_$i52: i32, out_$i53: i32, out_$i54: i16, out_$i55: i32, out_$i56: i16, out_$i57: i32, out_$i58: i1, out_$i43: i16, out_vslice_dummy_var_35: i32);



implementation xpc_die_deactivate_loop_$bb23(in_$i34: i64, in_$i35: i64, in_$i38: i64, in_$i39: i1, in_$i59: i64, in_$i60: i1, in_$p61: ref, in_$i62: i64, in_$i64: i64, in_$p65: ref, in_$i66: i32, in_$i67: i1, in_vslice_dummy_var_36: i32) returns (out_$i34: i64, out_$i35: i64, out_$i38: i64, out_$i39: i1, out_$i59: i64, out_$i60: i1, out_$p61: ref, out_$i62: i64, out_$i64: i64, out_$p65: ref, out_$i66: i32, out_$i67: i1, out_vslice_dummy_var_36: i32)
{

  entry:
    out_$i34, out_$i35, out_$i38, out_$i39, out_$i59, out_$i60, out_$p61, out_$i62, out_$i64, out_$p65, out_$i66, out_$i67, out_vslice_dummy_var_36 := in_$i34, in_$i35, in_$i38, in_$i39, in_$i59, in_$i60, in_$p61, in_$i62, in_$i64, in_$p65, in_$i66, in_$i67, in_vslice_dummy_var_36;
    goto $bb23, exit;

  $bb23:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb44:
    assume !(out_$i67 == 1);
    assume {:verifier.code 0} true;
    out_$i34, out_$i35 := out_$i64, out_$i38;
    goto $bb44_dummy;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    out_$i67 := $eq.i32(out_$i66, 0);
    goto corral_source_split_1750;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    out_$p65 := $load.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(280, 1)));
    call {:si_unique_call 440} out_$i66 := devirtbounce(out_$p65);
    call {:si_unique_call 441} {:cexpr "any_engaged"} boogie_si_record_i32(out_$i66);
    goto corral_source_split_1749;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 439} __const_udelay(859000);
    goto corral_source_split_1748;

  $bb43:
    assume {:verifier.code 0} true;
    goto corral_source_split_1747;

  $bb42:
    assume !(out_$i60 == 1);
    assume {:verifier.code 0} true;
    out_$i64 := out_$i59;
    goto $bb43;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    out_$i64 := 50000;
    goto $bb43;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} out_vslice_dummy_var_36 := _dev_info.ref.ref.i64(out_$p61, .str.86, out_$i62);
    goto corral_source_split_1745;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    out_$i62 := $sdiv.i64(out_$i38, 5000);
    goto corral_source_split_1744;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    out_$p61 := $M.5;
    goto corral_source_split_1743;

  $bb41:
    assume out_$i60 == 1;
    goto corral_source_split_1742;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    out_$i60 := $eq.i64(out_$i34, 0);
    goto corral_source_split_1740;

  $bb40:
    assume {:verifier.code 0} true;
    out_$i59 := $sub.i64(out_$i34, 1);
    call {:si_unique_call 437} {:cexpr "wait_to_print"} boogie_si_record_i64(out_$i59);
    goto corral_source_split_1739;

  $bb28:
    assume !(out_$i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    out_$i39 := $eq.i64(out_$i35, 0);
    goto corral_source_split_1708;

  $bb26:
    assume {:verifier.code 0} true;
    out_$i38 := $sub.i64(out_$i35, 1);
    call {:si_unique_call 432} {:cexpr "keep_waiting"} boogie_si_record_i64(out_$i38);
    goto corral_source_split_1707;

  $bb44_dummy:
    call {:si_unique_call 1} out_$i34, out_$i35, out_$i38, out_$i39, out_$i59, out_$i60, out_$p61, out_$i62, out_$i64, out_$p65, out_$i66, out_$i67, out_vslice_dummy_var_36 := xpc_die_deactivate_loop_$bb23(out_$i34, out_$i35, out_$i38, out_$i39, out_$i59, out_$i60, out_$p61, out_$i62, out_$i64, out_$p65, out_$i66, out_$i67, out_vslice_dummy_var_36);
    return;

  exit:
    return;
}



procedure xpc_die_deactivate_loop_$bb23(in_$i34: i64, in_$i35: i64, in_$i38: i64, in_$i39: i1, in_$i59: i64, in_$i60: i1, in_$p61: ref, in_$i62: i64, in_$i64: i64, in_$p65: ref, in_$i66: i32, in_$i67: i1, in_vslice_dummy_var_36: i32) returns (out_$i34: i64, out_$i35: i64, out_$i38: i64, out_$i39: i1, out_$i59: i64, out_$i60: i1, out_$p61: ref, out_$i62: i64, out_$i64: i64, out_$p65: ref, out_$i66: i32, out_$i67: i1, out_vslice_dummy_var_36: i32);
  modifies $M.1, $CurrAddr;



implementation xpc_die_deactivate_loop_$bb9(in_$p7: ref, in_$i8: i64, in_$p9: ref, in_$p10: ref, in_$i11: i32, in_$i12: i16, in_$i13: i32, in_$i14: i1, in_$p15: ref, in_$i16: i8, in_$i17: i32, in_$i18: i1, in_$p19: ref, in_$p20: ref, in_$i21: i32, in_$i22: i32, in_$i23: i16, in_$i24: i32, in_$i25: i16, in_$i26: i32, in_$i27: i1, in_$i6: i16) returns (out_$p7: ref, out_$i8: i64, out_$p9: ref, out_$p10: ref, out_$i11: i32, out_$i12: i16, out_$i13: i32, out_$i14: i1, out_$p15: ref, out_$i16: i8, out_$i17: i32, out_$i18: i1, out_$p19: ref, out_$p20: ref, out_$i21: i32, out_$i22: i32, out_$i23: i16, out_$i24: i32, out_$i25: i16, out_$i26: i32, out_$i27: i1, out_$i6: i16)
{

  entry:
    out_$p7, out_$i8, out_$p9, out_$p10, out_$i11, out_$i12, out_$i13, out_$i14, out_$p15, out_$i16, out_$i17, out_$i18, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i6 := in_$p7, in_$i8, in_$p9, in_$p10, in_$i11, in_$i12, in_$i13, in_$i14, in_$p15, in_$i16, in_$i17, in_$i18, in_$p19, in_$p20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i6;
    goto $bb9, exit;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_1665;

  $bb17:
    assume out_$i27 == 1;
    assume {:verifier.code 0} true;
    out_$i6 := out_$i23;
    goto $bb17_dummy;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    out_$i27 := $slt.i32(out_$i24, out_$i26);
    goto corral_source_split_1690;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    out_$i26 := $sext.i16.i32(out_$i25);
    goto corral_source_split_1689;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i16($M.1, xp_max_npartitions);
    goto corral_source_split_1688;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    out_$i24 := $sext.i16.i32(out_$i23);
    goto corral_source_split_1687;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    out_$i23 := $trunc.i32.i16(out_$i22);
    call {:si_unique_call 427} {:cexpr "partid"} boogie_si_record_i16(out_$i23);
    goto corral_source_split_1686;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    out_$i22 := $add.i32(out_$i21, 1);
    goto corral_source_split_1685;

  $bb16:
    assume {:verifier.code 0} true;
    out_$i21 := $sext.i16.i32(out_$i6);
    goto corral_source_split_1684;

  $bb15:
    assume !(out_$i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    goto $bb16;

  SeqInstr_204:
    goto corral_source_split_1676;

  SeqInstr_203:
    assume assertsPassed;
    goto SeqInstr_204;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    out_$p20 := $load.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(256, 1)));
    call {:si_unique_call 426} devirtbounce.3(out_$p20, out_$p9);
    goto SeqInstr_203;

  SeqInstr_201:
    goto corral_source_split_1675;

  SeqInstr_200:
    assume assertsPassed;
    goto SeqInstr_201;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p19 := $load.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(128, 1)));
    call {:si_unique_call 425} devirtbounce.3(out_$p19, out_$p9);
    goto SeqInstr_200;

  $bb14:
    assume {:verifier.code 0} true;
    assume out_$i18 == 1;
    goto $bb12;

  $bb11:
    assume {:verifier.code 0} true;
    assume out_$i14 == 1;
    goto $bb12;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb13;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    out_$i14 := $ne.i32(out_$i13, 0);
    goto corral_source_split_1673;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    out_$i12 := $trunc.i32.i16(out_$i11);
    call {:si_unique_call 423} out_$i13 := devirtbounce.1(out_$p10, out_$i12);
    call {:si_unique_call 424} {:cexpr "tmp"} boogie_si_record_i32(out_$i13);
    goto corral_source_split_1672;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    out_$i11 := $sext.i16.i32(out_$i6);
    goto corral_source_split_1671;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    out_$p10 := $load.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(272, 1)));
    goto corral_source_split_1670;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref(out_$p7, $mul.ref(out_$i8, 872));
    goto corral_source_split_1669;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    out_$i8 := $sext.i16.i64(out_$i6);
    goto corral_source_split_1668;

  $bb10:
    assume {:verifier.code 0} true;
    out_$p7 := $M.3;
    goto corral_source_split_1667;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    out_$i18 := $ne.i32(out_$i17, 0);
    goto corral_source_split_1682;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    out_$i17 := $zext.i8.i32(out_$i16);
    goto corral_source_split_1681;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    out_$i16 := $load.i8($M.1, out_$p15);
    goto corral_source_split_1680;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(out_$p7, $mul.ref(out_$i8, 872)), $mul.ref(112, 1));
    goto corral_source_split_1679;

  $bb13:
    assume !(out_$i14 == 1);
    goto corral_source_split_1678;

  $bb17_dummy:
    call {:si_unique_call 1} out_$p7, out_$i8, out_$p9, out_$p10, out_$i11, out_$i12, out_$i13, out_$i14, out_$p15, out_$i16, out_$i17, out_$i18, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i6 := xpc_die_deactivate_loop_$bb9(out_$p7, out_$i8, out_$p9, out_$p10, out_$i11, out_$i12, out_$i13, out_$i14, out_$p15, out_$i16, out_$i17, out_$i18, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i6);
    return;

  exit:
    return;
}



procedure xpc_die_deactivate_loop_$bb9(in_$p7: ref, in_$i8: i64, in_$p9: ref, in_$p10: ref, in_$i11: i32, in_$i12: i16, in_$i13: i32, in_$i14: i1, in_$p15: ref, in_$i16: i8, in_$i17: i32, in_$i18: i1, in_$p19: ref, in_$p20: ref, in_$i21: i32, in_$i22: i32, in_$i23: i16, in_$i24: i32, in_$i25: i16, in_$i26: i32, in_$i27: i1, in_$i6: i16) returns (out_$p7: ref, out_$i8: i64, out_$p9: ref, out_$p10: ref, out_$i11: i32, out_$i12: i16, out_$i13: i32, out_$i14: i1, out_$p15: ref, out_$i16: i8, out_$i17: i32, out_$i18: i1, out_$p19: ref, out_$p20: ref, out_$i21: i32, out_$i22: i32, out_$i23: i16, out_$i24: i32, out_$i25: i16, out_$i26: i32, out_$i27: i1, out_$i6: i16);
  modifies $M.1, $M.23, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $CurrAddr, $M.28, assertsPassed, $M.0, $M.2;



implementation xpc_setup_partitions_uv_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p3: ref, in_$i4: i64, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$i15: i32, in_$i16: i32, in_$i17: i16, in_$i18: i32, in_$i19: i1, in_$i2: i16, in_vslice_dummy_var_37: ref) returns (out_$p3: ref, out_$i4: i64, out_$p6: ref, out_$p7: ref, out_$p8: ref, out_$p9: ref, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$i15: i32, out_$i16: i32, out_$i17: i16, out_$i18: i32, out_$i19: i1, out_$i2: i16, out_vslice_dummy_var_37: ref)
{

  entry:
    out_$p3, out_$i4, out_$p6, out_$p7, out_$p8, out_$p9, out_$p12, out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i2, out_vslice_dummy_var_37 := in_$p3, in_$i4, in_$p6, in_$p7, in_$p8, in_$p9, in_$p12, in_$p13, in_$p14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i2, in_vslice_dummy_var_37;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_1766;

  $bb3:
    assume out_$i19 == 1;
    assume {:verifier.code 0} true;
    out_$i2 := out_$i17;
    goto $bb3_dummy;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    out_$i19 := $sle.i32(out_$i18, 255);
    goto corral_source_split_1786;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    out_$i18 := $sext.i16.i32(out_$i17);
    goto corral_source_split_1785;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    out_$i17 := $trunc.i32.i16(out_$i16);
    call {:si_unique_call 450} {:cexpr "partid"} boogie_si_record_i16(out_$i17);
    goto corral_source_split_1784;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    out_$i16 := $add.i32(out_$i15, 1);
    goto corral_source_split_1783;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    out_$i15 := $sext.i16.i32(out_$i2);
    goto corral_source_split_1782;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p14, 0);
    goto corral_source_split_1781;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(out_$p7, $mul.ref(0, 296)), $mul.ref(284, 1));
    goto corral_source_split_1780;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 449} __raw_spin_lock_init(out_$p13, .str.131, in_$p1);
    goto corral_source_split_1779;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    out_$p13 := $bitcast.ref.ref(out_$p12);
    goto corral_source_split_1778;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref($add.ref(out_$p7, $mul.ref(0, 296)), $mul.ref(208, 1)), $mul.ref(0, 1));
    goto corral_source_split_1777;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} out_vslice_dummy_var_37 := spinlock_check(out_$p9);
    goto corral_source_split_1776;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(out_$p7, $mul.ref(0, 296)), $mul.ref(208, 1));
    goto corral_source_split_1775;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 447} __mutex_init(out_$p8, .str.130, in_$p0);
    goto corral_source_split_1774;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref($add.ref(out_$p7, $mul.ref(0, 296)), $mul.ref(40, 1));
    goto corral_source_split_1773;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    out_$p7 := $bitcast.ref.ref(out_$p6);
    goto corral_source_split_1772;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    out_$p6 := $add.ref($add.ref(out_$p3, $mul.ref(out_$i4, 872)), $mul.ref(576, 1));
    goto corral_source_split_1771;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    goto corral_source_split_1770;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    out_$i4 := $sext.i16.i64(out_$i2);
    goto corral_source_split_1769;

  $bb2:
    assume {:verifier.code 0} true;
    out_$p3 := $M.3;
    goto corral_source_split_1768;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb3_dummy:
    call {:si_unique_call 1} out_$p3, out_$i4, out_$p6, out_$p7, out_$p8, out_$p9, out_$p12, out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i2, out_vslice_dummy_var_37 := xpc_setup_partitions_uv_loop_$bb1(in_$p0, in_$p1, out_$p3, out_$i4, out_$p6, out_$p7, out_$p8, out_$p9, out_$p12, out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i2, out_vslice_dummy_var_37);
    return;

  exit:
    return;
}



procedure xpc_setup_partitions_uv_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p3: ref, in_$i4: i64, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$i15: i32, in_$i16: i32, in_$i17: i16, in_$i18: i32, in_$i19: i1, in_$i2: i16, in_vslice_dummy_var_37: ref) returns (out_$p3: ref, out_$i4: i64, out_$p6: ref, out_$p7: ref, out_$p8: ref, out_$p9: ref, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$i15: i32, out_$i16: i32, out_$i17: i16, out_$i18: i32, out_$i19: i1, out_$i2: i16, out_vslice_dummy_var_37: ref);
  modifies $M.1;



implementation xpc_teardown_partitions_uv_loop_$bb1(in_$p1: ref, in_$i2: i64, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$i8: i64, in_$i9: i1, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$i13: i64, in_$p14: ref, in_$i15: i32, in_$i16: i32, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$i23: i32, in_$i24: i32, in_$i25: i16, in_$i26: i32, in_$i27: i1, in_$i0: i16) returns (out_$p1: ref, out_$i2: i64, out_$p4: ref, out_$p5: ref, out_$p6: ref, out_$p7: ref, out_$i8: i64, out_$i9: i1, out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$i13: i64, out_$p14: ref, out_$i15: i32, out_$i16: i32, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$i23: i32, out_$i24: i32, out_$i25: i16, out_$i26: i32, out_$i27: i1, out_$i0: i16)
{

  entry:
    out_$p1, out_$i2, out_$p4, out_$p5, out_$p6, out_$p7, out_$i8, out_$i9, out_$p10, out_$p11, out_$p12, out_$i13, out_$p14, out_$i15, out_$i16, out_$p17, out_$p18, out_$p19, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i0 := in_$p1, in_$i2, in_$p4, in_$p5, in_$p6, in_$p7, in_$i8, in_$i9, in_$p10, in_$p11, in_$p12, in_$i13, in_$p14, in_$i15, in_$i16, in_$p17, in_$p18, in_$p19, in_$p20, in_$p21, in_$p22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i0;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_1792;

  $bb6:
    assume out_$i27 == 1;
    assume {:verifier.code 0} true;
    out_$i0 := out_$i25;
    goto $bb6_dummy;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    out_$i27 := $sle.i32(out_$i26, 255);
    goto corral_source_split_1829;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    out_$i26 := $sext.i16.i32(out_$i25);
    goto corral_source_split_1828;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    out_$i25 := $trunc.i32.i16(out_$i24);
    call {:si_unique_call 458} {:cexpr "partid"} boogie_si_record_i16(out_$i25);
    goto corral_source_split_1827;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    out_$i24 := $add.i32(out_$i23, 1);
    goto corral_source_split_1826;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i23 := $sext.i16.i32(out_$i0);
    goto corral_source_split_1825;

  $bb4:
    assume !(out_$i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_210:
    goto corral_source_split_1823;

  SeqInstr_209:
    assume assertsPassed;
    goto SeqInstr_210;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 457} ldv_mutex_unlock_61(out_$p22);
    goto SeqInstr_209;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(out_$p5, $mul.ref(0, 296)), $mul.ref(40, 1));
    goto corral_source_split_1822;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p21, $0.ref);
    goto corral_source_split_1821;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(out_$p5, $mul.ref(0, 296)), $mul.ref(32, 1));
    goto corral_source_split_1820;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 456} kfree(out_$p20);
    goto corral_source_split_1819;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    out_$p20 := $load.ref($M.1, out_$p19);
    goto corral_source_split_1818;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(out_$p5, $mul.ref(0, 296)), $mul.ref(32, 1));
    goto corral_source_split_1817;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 455} spin_unlock_irqrestore(out_$p18, out_$i13);
    goto corral_source_split_1816;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(out_$p5, $mul.ref(0, 296)), $mul.ref(208, 1));
    goto corral_source_split_1815;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p17, out_$i16);
    goto corral_source_split_1814;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(out_$p5, $mul.ref(0, 296)), $mul.ref(280, 1));
    goto corral_source_split_1813;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    out_$i16 := $and.i32(out_$i15, $sub.i32(0, 2));
    goto corral_source_split_1812;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    out_$i15 := $load.i32($M.1, out_$p14);
    goto corral_source_split_1811;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(out_$p5, $mul.ref(0, 296)), $mul.ref(280, 1));
    goto corral_source_split_1810;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 453} out_$i13 := _raw_spin_lock_irqsave(out_$p12);
    call {:si_unique_call 454} {:cexpr "irq_flags"} boogie_si_record_i64(out_$i13);
    goto corral_source_split_1809;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} out_$p12 := spinlock_check(out_$p11);
    goto corral_source_split_1808;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(out_$p5, $mul.ref(0, 296)), $mul.ref(208, 1));
    goto corral_source_split_1807;

  SeqInstr_207:
    goto corral_source_split_1806;

  SeqInstr_206:
    assume assertsPassed;
    goto SeqInstr_207;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 451} ldv_mutex_lock_60(out_$p10);
    goto SeqInstr_206;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(out_$p5, $mul.ref(0, 296)), $mul.ref(40, 1));
    goto corral_source_split_1805;

  $bb3:
    assume out_$i9 == 1;
    goto corral_source_split_1804;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    out_$i9 := $ne.i64(out_$i8, 0);
    goto corral_source_split_1802;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    out_$i8 := $p2i.ref.i64(out_$p7);
    goto corral_source_split_1801;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    out_$p7 := $load.ref($M.1, out_$p6);
    goto corral_source_split_1800;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    out_$p6 := $add.ref($add.ref(out_$p5, $mul.ref(0, 296)), $mul.ref(32, 1));
    goto corral_source_split_1799;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    out_$p5 := $bitcast.ref.ref(out_$p4);
    goto corral_source_split_1798;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    out_$p4 := $add.ref($add.ref(out_$p1, $mul.ref(out_$i2, 872)), $mul.ref(576, 1));
    goto corral_source_split_1797;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    goto corral_source_split_1796;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    out_$i2 := $sext.i16.i64(out_$i0);
    goto corral_source_split_1795;

  $bb2:
    assume {:verifier.code 0} true;
    out_$p1 := $M.3;
    goto corral_source_split_1794;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p1, out_$i2, out_$p4, out_$p5, out_$p6, out_$p7, out_$i8, out_$i9, out_$p10, out_$p11, out_$p12, out_$i13, out_$p14, out_$i15, out_$i16, out_$p17, out_$p18, out_$p19, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i0 := xpc_teardown_partitions_uv_loop_$bb1(out_$p1, out_$i2, out_$p4, out_$p5, out_$p6, out_$p7, out_$i8, out_$i9, out_$p10, out_$p11, out_$p12, out_$i13, out_$p14, out_$i15, out_$i16, out_$p17, out_$p18, out_$p19, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i0);
    return;

  exit:
    return;
}



procedure xpc_teardown_partitions_uv_loop_$bb1(in_$p1: ref, in_$i2: i64, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$i8: i64, in_$i9: i1, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$i13: i64, in_$p14: ref, in_$i15: i32, in_$i16: i32, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$i23: i32, in_$i24: i32, in_$i25: i16, in_$i26: i32, in_$i27: i1, in_$i0: i16) returns (out_$p1: ref, out_$i2: i64, out_$p4: ref, out_$p5: ref, out_$p6: ref, out_$p7: ref, out_$i8: i64, out_$i9: i1, out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$i13: i64, out_$p14: ref, out_$i15: i32, out_$i16: i32, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$i23: i32, out_$i24: i32, out_$i25: i16, out_$i26: i32, out_$i27: i1, out_$i0: i16);
  modifies $M.28, assertsPassed, $M.1;



implementation xpc_process_activate_IRQ_rcvd_uv_loop_$bb28()
{

  entry:
    goto $bb28, exit;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb28_dummy;

  $bb28_dummy:
    call {:si_unique_call 1} xpc_process_activate_IRQ_rcvd_uv_loop_$bb28();
    return;

  exit:
    return;
}



procedure xpc_process_activate_IRQ_rcvd_uv_loop_$bb28();



implementation xpc_process_activate_IRQ_rcvd_uv_loop_$bb9()
{

  entry:
    goto $bb9, exit;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb9_dummy;

  $bb9_dummy:
    call {:si_unique_call 1} xpc_process_activate_IRQ_rcvd_uv_loop_$bb9();
    return;

  exit:
    return;
}



procedure xpc_process_activate_IRQ_rcvd_uv_loop_$bb9();



implementation xpc_process_activate_IRQ_rcvd_uv_loop_$bb1(in_$p4: ref, in_$i5: i64, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$i10: i8, in_$i11: i32, in_$i12: i1, in_$i14: i32, in_$i15: i32, in_$i16: i32, in_$i17: i1, in_$i18: i32, in_$i19: i64, in_$i20: i64, in_$i21: i1, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i25: i8, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$i29: i32, in_$i30: i1, in_$p31: ref, in_$i32: i8, in_$i33: i32, in_$i34: i1, in_$p35: ref, in_$i36: i8, in_$i37: i32, in_$i38: i1, in_$i39: i32, in_$i40: i1, in_$p41: ref, in_$i42: i8, in_$i43: i32, in_$i44: i1, in_$i45: i32, in_$i46: i1, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$i50: i32, in_$p51: ref, in_$i52: i64, in_$i53: i32, in_$i54: i1, in_$i55: i64, in_$i13: i64, in_$i57: i32, in_$i58: i32, in_$i59: i16, in_$i60: i32, in_$i61: i1, in_$i2: i64, in_$i3: i16, in_$i62: i64) returns (out_$p4: ref, out_$i5: i64, out_$p6: ref, out_$p7: ref, out_$p8: ref, out_$p9: ref, out_$i10: i8, out_$i11: i32, out_$i12: i1, out_$i14: i32, out_$i15: i32, out_$i16: i32, out_$i17: i1, out_$i18: i32, out_$i19: i64, out_$i20: i64, out_$i21: i1, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i25: i8, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$i29: i32, out_$i30: i1, out_$p31: ref, out_$i32: i8, out_$i33: i32, out_$i34: i1, out_$p35: ref, out_$i36: i8, out_$i37: i32, out_$i38: i1, out_$i39: i32, out_$i40: i1, out_$p41: ref, out_$i42: i8, out_$i43: i32, out_$i44: i1, out_$i45: i32, out_$i46: i1, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$i50: i32, out_$p51: ref, out_$i52: i64, out_$i53: i32, out_$i54: i1, out_$i55: i64, out_$i13: i64, out_$i57: i32, out_$i58: i32, out_$i59: i16, out_$i60: i32, out_$i61: i1, out_$i2: i64, out_$i3: i16, out_$i62: i64)
{

  entry:
    out_$p4, out_$i5, out_$p6, out_$p7, out_$p8, out_$p9, out_$i10, out_$i11, out_$i12, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$p22, out_$p23, out_$p24, out_$i25, out_$p26, out_$p27, out_$p28, out_$i29, out_$i30, out_$p31, out_$i32, out_$i33, out_$i34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$p41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$p47, out_$p48, out_$p49, out_$i50, out_$p51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i13, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i2, out_$i3, out_$i62 := in_$p4, in_$i5, in_$p6, in_$p7, in_$p8, in_$p9, in_$i10, in_$i11, in_$i12, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$p22, in_$p23, in_$p24, in_$i25, in_$p26, in_$p27, in_$p28, in_$i29, in_$i30, in_$p31, in_$i32, in_$i33, in_$i34, in_$p35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$p41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$p47, in_$p48, in_$p49, in_$i50, in_$p51, in_$i52, in_$i53, in_$i54, in_$i55, in_$i13, in_$i57, in_$i58, in_$i59, in_$i60, in_$i61, in_$i2, in_$i3, in_$i62;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1837;

  $bb34:
    assume out_$i61 == 1;
    assume {:verifier.code 0} true;
    out_$i2, out_$i3 := out_$i13, out_$i59;
    goto $bb34_dummy;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    out_$i62 := out_$i13;
    assume true;
    goto $bb34;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    out_$i61 := $sle.i32(out_$i60, 255);
    goto corral_source_split_1856;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    out_$i60 := $sext.i16.i32(out_$i59);
    goto corral_source_split_1855;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    out_$i59 := $trunc.i32.i16(out_$i58);
    call {:si_unique_call 462} {:cexpr "partid"} boogie_si_record_i16(out_$i59);
    goto corral_source_split_1854;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    out_$i58 := $add.i32(out_$i57, 1);
    goto corral_source_split_1853;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    out_$i57 := $sext.i16.i32(out_$i3);
    goto corral_source_split_1852;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_1851;

  $bb33:
    assume {:verifier.code 0} true;
    out_$i13 := out_$i52;
    goto $bb5;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    out_$i13 := out_$i2;
    goto $bb5;

  $bb3:
    assume out_$i12 == 1;
    goto corral_source_split_1849;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    out_$i12 := $eq.i32(out_$i11, 0);
    goto corral_source_split_1847;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    out_$i11 := $zext.i8.i32(out_$i10);
    goto corral_source_split_1846;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    out_$i10 := $load.i8($M.1, out_$p9);
    goto corral_source_split_1845;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(out_$p8, $mul.ref(0, 296)), $mul.ref(285, 1));
    goto corral_source_split_1844;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    out_$p8 := $bitcast.ref.ref(out_$p7);
    goto corral_source_split_1843;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref($add.ref(out_$p4, $mul.ref(out_$i5, 872)), $mul.ref(576, 1));
    goto corral_source_split_1842;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    out_$p6 := $add.ref(out_$p4, $mul.ref(out_$i5, 872));
    goto corral_source_split_1841;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    out_$i5 := $sext.i16.i64(out_$i3);
    goto corral_source_split_1840;

  $bb2:
    assume {:verifier.code 0} true;
    out_$p4 := $M.3;
    goto corral_source_split_1839;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb31:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    out_$i55 := out_$i52;
    assume true;
    goto $bb31;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    out_$i54 := $eq.i32(out_$i53, 0);
    goto corral_source_split_1931;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    out_$i53 := $M.23;
    goto corral_source_split_1930;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 476} out_$i52 := _raw_spin_lock_irqsave(out_$p51);
    call {:si_unique_call 477} {:cexpr "irq_flags"} boogie_si_record_i64(out_$i52);
    goto corral_source_split_1929;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 475} out_$p51 := spinlock_check(xpc_activate_IRQ_rcvd_lock);
    goto corral_source_split_1928;

  $bb12:
    assume !(out_$i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 469} xpc_activate_partition(out_$p6);
    goto corral_source_split_1889;

  $bb13:
    assume out_$i34 == 1;
    goto corral_source_split_1888;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    out_$i34 := $eq.i32(out_$i33, 0);
    goto corral_source_split_1886;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    out_$i33 := $zext.i8.i32(out_$i32);
    goto corral_source_split_1885;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    out_$i32 := $load.i8($M.1, out_$p31);
    goto corral_source_split_1884;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(out_$p4, $mul.ref(out_$i5, 872)), $mul.ref(112, 1));
    goto corral_source_split_1883;

  $bb11:
    assume out_$i30 == 1;
    goto corral_source_split_1882;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    out_$i30 := $eq.i32(out_$i29, 1);
    goto corral_source_split_1880;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    out_$i29 := $zext.i8.i32(out_$i25);
    goto corral_source_split_1879;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} spin_unlock_irqrestore(xpc_activate_IRQ_rcvd_lock, out_$i2);
    goto corral_source_split_1878;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p28, 0);
    goto corral_source_split_1877;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(out_$p27, $mul.ref(0, 296)), $mul.ref(285, 1));
    goto corral_source_split_1876;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    out_$p27 := $bitcast.ref.ref(out_$p26);
    goto corral_source_split_1875;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(out_$p4, $mul.ref(out_$i5, 872)), $mul.ref(576, 1));
    goto corral_source_split_1874;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i8($M.1, out_$p24);
    call {:si_unique_call 467} {:cexpr "act_state_req"} boogie_si_record_i8(out_$i25);
    goto corral_source_split_1873;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p23, $mul.ref(0, 296)), $mul.ref(285, 1));
    goto corral_source_split_1872;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    out_$p23 := $bitcast.ref.ref(out_$p22);
    goto corral_source_split_1871;

  $bb10:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(out_$p4, $mul.ref(out_$i5, 872)), $mul.ref(576, 1));
    goto corral_source_split_1870;

  $bb8:
    assume !(out_$i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    out_$i21 := $ne.i64(out_$i20, 0);
    goto corral_source_split_1866;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 464} out_$i20 := ldv__builtin_expect(out_$i19, 0);
    call {:si_unique_call 465} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i20);
    goto corral_source_split_1865;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    out_$i19 := $sext.i32.i64(out_$i18);
    goto corral_source_split_1864;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    out_$i18 := $zext.i1.i32(out_$i17);
    goto corral_source_split_1863;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    out_$i17 := $slt.i32(out_$i16, 0);
    goto corral_source_split_1862;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    out_$i16 := $M.23;
    goto corral_source_split_1861;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    $M.23 := out_$i15;
    call {:si_unique_call 463} {:cexpr "xpc_activate_IRQ_rcvd"} boogie_si_record_i32(out_$i15);
    goto corral_source_split_1860;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    out_$i15 := $sub.i32(out_$i14, 1);
    goto corral_source_split_1859;

  $bb6:
    assume {:verifier.code 0} true;
    out_$i14 := $M.23;
    goto corral_source_split_1858;

  $bb4:
    assume !(out_$i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    goto $bb18;

  SeqInstr_213:
    goto corral_source_split_1898;

  SeqInstr_212:
    assume assertsPassed;
    goto SeqInstr_213;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 470} xpc_deactivate_partition(451, out_$p6, 21);
    goto SeqInstr_212;

  $bb16:
    assume out_$i38 == 1;
    goto corral_source_split_1897;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    out_$i38 := $eq.i32(out_$i37, 4);
    goto corral_source_split_1895;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    out_$i37 := $zext.i8.i32(out_$i36);
    goto corral_source_split_1894;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    out_$i36 := $load.i8($M.1, out_$p35);
    goto corral_source_split_1893;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(out_$p4, $mul.ref(out_$i5, 872)), $mul.ref(112, 1));
    goto corral_source_split_1892;

  $bb14:
    assume !(out_$i34 == 1);
    goto corral_source_split_1891;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  SeqInstr_216:
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 471} xpc_activate_partition(out_$p6);
    goto corral_source_split_1915;

  $bb21:
    assume out_$i44 == 1;
    goto corral_source_split_1914;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    out_$i44 := $eq.i32(out_$i43, 0);
    goto corral_source_split_1908;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    out_$i43 := $zext.i8.i32(out_$i42);
    goto corral_source_split_1907;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    out_$i42 := $load.i8($M.1, out_$p41);
    goto corral_source_split_1906;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(out_$p4, $mul.ref(out_$i5, 872)), $mul.ref(112, 1));
    goto corral_source_split_1905;

  $bb19:
    assume out_$i40 == 1;
    goto corral_source_split_1904;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    out_$i40 := $eq.i32(out_$i39, 2);
    goto corral_source_split_1902;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    out_$i39 := $zext.i8.i32(out_$i25);
    goto corral_source_split_1901;

  $bb17:
    assume !(out_$i38 == 1);
    goto corral_source_split_1900;

  SeqInstr_215:
    assume assertsPassed;
    goto SeqInstr_216;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 472} xpc_deactivate_partition(457, out_$p6, 21);
    goto SeqInstr_215;

  $bb22:
    assume !(out_$i44 == 1);
    goto corral_source_split_1917;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    goto $bb27;

  SeqInstr_219:
    goto corral_source_split_1924;

  SeqInstr_218:
    assume assertsPassed;
    goto SeqInstr_219;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 473} xpc_deactivate_partition(460, out_$p6, out_$i50);
    goto SeqInstr_218;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    out_$i50 := $load.i32($M.1, out_$p49);
    goto corral_source_split_1923;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(out_$p48, $mul.ref(0, 296)), $mul.ref(288, 1));
    goto corral_source_split_1922;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    out_$p48 := $bitcast.ref.ref(out_$p47);
    goto corral_source_split_1921;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(out_$p4, $mul.ref(out_$i5, 872)), $mul.ref(576, 1));
    goto corral_source_split_1920;

  $bb25:
    assume out_$i46 == 1;
    goto corral_source_split_1919;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    out_$i46 := $eq.i32(out_$i45, 3);
    goto corral_source_split_1912;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    out_$i45 := $zext.i8.i32(out_$i25);
    goto corral_source_split_1911;

  $bb20:
    assume !(out_$i40 == 1);
    goto corral_source_split_1910;

  $bb34_dummy:
    call {:si_unique_call 1} out_$p4, out_$i5, out_$p6, out_$p7, out_$p8, out_$p9, out_$i10, out_$i11, out_$i12, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$p22, out_$p23, out_$p24, out_$i25, out_$p26, out_$p27, out_$p28, out_$i29, out_$i30, out_$p31, out_$i32, out_$i33, out_$i34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$p41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$p47, out_$p48, out_$p49, out_$i50, out_$p51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i13, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i2, out_$i3, out_$i62 := xpc_process_activate_IRQ_rcvd_uv_loop_$bb1(out_$p4, out_$i5, out_$p6, out_$p7, out_$p8, out_$p9, out_$i10, out_$i11, out_$i12, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$p22, out_$p23, out_$p24, out_$i25, out_$p26, out_$p27, out_$p28, out_$i29, out_$i30, out_$p31, out_$i32, out_$i33, out_$i34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$p41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$p47, out_$p48, out_$p49, out_$i50, out_$p51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i13, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i2, out_$i3, out_$i62);
    return;

  exit:
    return;
}



procedure xpc_process_activate_IRQ_rcvd_uv_loop_$bb1(in_$p4: ref, in_$i5: i64, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$i10: i8, in_$i11: i32, in_$i12: i1, in_$i14: i32, in_$i15: i32, in_$i16: i32, in_$i17: i1, in_$i18: i32, in_$i19: i64, in_$i20: i64, in_$i21: i1, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i25: i8, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$i29: i32, in_$i30: i1, in_$p31: ref, in_$i32: i8, in_$i33: i32, in_$i34: i1, in_$p35: ref, in_$i36: i8, in_$i37: i32, in_$i38: i1, in_$i39: i32, in_$i40: i1, in_$p41: ref, in_$i42: i8, in_$i43: i32, in_$i44: i1, in_$i45: i32, in_$i46: i1, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$i50: i32, in_$p51: ref, in_$i52: i64, in_$i53: i32, in_$i54: i1, in_$i55: i64, in_$i13: i64, in_$i57: i32, in_$i58: i32, in_$i59: i16, in_$i60: i32, in_$i61: i1, in_$i2: i64, in_$i3: i16, in_$i62: i64) returns (out_$p4: ref, out_$i5: i64, out_$p6: ref, out_$p7: ref, out_$p8: ref, out_$p9: ref, out_$i10: i8, out_$i11: i32, out_$i12: i1, out_$i14: i32, out_$i15: i32, out_$i16: i32, out_$i17: i1, out_$i18: i32, out_$i19: i64, out_$i20: i64, out_$i21: i1, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i25: i8, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$i29: i32, out_$i30: i1, out_$p31: ref, out_$i32: i8, out_$i33: i32, out_$i34: i1, out_$p35: ref, out_$i36: i8, out_$i37: i32, out_$i38: i1, out_$i39: i32, out_$i40: i1, out_$p41: ref, out_$i42: i8, out_$i43: i32, out_$i44: i1, out_$i45: i32, out_$i46: i1, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$i50: i32, out_$p51: ref, out_$i52: i64, out_$i53: i32, out_$i54: i1, out_$i55: i64, out_$i13: i64, out_$i57: i32, out_$i58: i32, out_$i59: i16, out_$i60: i32, out_$i61: i1, out_$i2: i64, out_$i3: i16, out_$i62: i64);
  modifies $M.1, $M.23, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $CurrAddr, $M.28, $M.0, $M.2, assertsPassed;



implementation xpc_setup_ch_structures_uv_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p6: ref, in_$p7: ref, in_$i8: i64, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$i14: i32, in_$i15: i8, in_$i16: i32, in_$i17: i1, in_$i5: i32) returns (out_$p6: ref, out_$p7: ref, out_$i8: i64, out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$i14: i32, out_$i15: i8, out_$i16: i32, out_$i17: i1, out_$i5: i32)
{

  entry:
    out_$p6, out_$p7, out_$i8, out_$p10, out_$p11, out_$p12, out_$p13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i5 := in_$p6, in_$p7, in_$i8, in_$p10, in_$p11, in_$p12, in_$p13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i5;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_2153;

  $bb6:
    assume out_$i17 == 1;
    assume {:verifier.code 0} true;
    out_$i5 := out_$i14;
    goto $bb6_dummy;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    out_$i17 := $sgt.i32(out_$i16, out_$i14);
    goto corral_source_split_2168;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    out_$i16 := $zext.i8.i32(out_$i15);
    goto corral_source_split_2167;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    out_$i15 := $load.i8($M.1, in_$p1);
    goto corral_source_split_2166;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    out_$i14 := $add.i32(out_$i5, 1);
    call {:si_unique_call 504} {:cexpr "ch_number"} boogie_si_record_i32(out_$i14);
    goto corral_source_split_2165;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} xpc_init_fifo_uv(out_$p13);
    goto corral_source_split_2164;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(out_$p11, $mul.ref(0, 216)), $mul.ref(120, 1));
    goto corral_source_split_2163;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 502} xpc_init_fifo_uv(out_$p12);
    goto corral_source_split_2162;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(out_$p11, $mul.ref(0, 216)), $mul.ref(24, 1));
    goto corral_source_split_2161;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    out_$p11 := $bitcast.ref.ref(out_$p10);
    goto corral_source_split_2160;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(out_$p7, $mul.ref(out_$i8, 720)), $mul.ref(432, 1));
    goto corral_source_split_2159;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    goto corral_source_split_2158;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    out_$i8 := $sext.i32.i64(out_$i5);
    goto corral_source_split_2157;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    out_$p7 := $load.ref($M.1, out_$p6);
    goto corral_source_split_2156;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p6 := $add.ref($add.ref(in_$p0, $mul.ref(0, 872)), $mul.ref(376, 1));
    goto corral_source_split_2155;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p6, out_$p7, out_$i8, out_$p10, out_$p11, out_$p12, out_$p13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i5 := xpc_setup_ch_structures_uv_loop_$bb4(in_$p0, in_$p1, out_$p6, out_$p7, out_$i8, out_$p10, out_$p11, out_$p12, out_$p13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i5);
    return;

  exit:
    return;
}



procedure xpc_setup_ch_structures_uv_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p6: ref, in_$p7: ref, in_$i8: i64, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$i14: i32, in_$i15: i8, in_$i16: i32, in_$i17: i1, in_$i5: i32) returns (out_$p6: ref, out_$p7: ref, out_$i8: i64, out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$i14: i32, out_$i15: i8, out_$i16: i32, out_$i17: i1, out_$i5: i32);
  modifies $M.1, $CurrAddr;



implementation xpc_make_first_contact_uv_loop_$bb4(in_$p0: ref, in_$p2: ref, in_$p6: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$i16: i24, in_$i17: i24, in_$i18: i24, in_$p19: ref, in_$p20: ref, in_$i21: i8, in_$i22: i64, in_$i23: i64, in_$i24: i64, in_$i25: i1, in_$p26: ref, in_$i27: i64, in_$p28: ref, in_$i29: i64, in_$i30: i64, in_$i31: i64, in_$i32: i16, in_$i33: i32, in_$p36: ref, in_$i37: i8, in_$i38: i32, in_$i39: i1, in_$i43: i8, in_$i44: i32, in_$i45: i1, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$i49: i8, in_$i50: i32, in_$i51: i1, in_vslice_dummy_var_38: i32, in_vslice_dummy_var_39: i64) returns (out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$i16: i24, out_$i17: i24, out_$i18: i24, out_$p19: ref, out_$p20: ref, out_$i21: i8, out_$i22: i64, out_$i23: i64, out_$i24: i64, out_$i25: i1, out_$p26: ref, out_$i27: i64, out_$p28: ref, out_$i29: i64, out_$i30: i64, out_$i31: i64, out_$i32: i16, out_$i33: i32, out_$p36: ref, out_$i37: i8, out_$i38: i32, out_$i39: i1, out_$i43: i8, out_$i44: i32, out_$i45: i1, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$i49: i8, out_$i50: i32, out_$i51: i1, out_vslice_dummy_var_38: i32, out_vslice_dummy_var_39: i64)
{

  entry:
    out_$p10, out_$p11, out_$p12, out_$p13, out_$p14, out_$p15, out_$i16, out_$i17, out_$i18, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p26, out_$i27, out_$p28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$p36, out_$i37, out_$i38, out_$i39, out_$i43, out_$i44, out_$i45, out_$p46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_vslice_dummy_var_38, out_vslice_dummy_var_39 := in_$p10, in_$p11, in_$p12, in_$p13, in_$p14, in_$p15, in_$i16, in_$i17, in_$i18, in_$p19, in_$p20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$p26, in_$i27, in_$p28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$p36, in_$i37, in_$i38, in_$i39, in_$i43, in_$i44, in_$i45, in_$p46, in_$p47, in_$p48, in_$i49, in_$i50, in_$i51, in_vslice_dummy_var_38, in_vslice_dummy_var_39;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(in_$p0, $mul.ref(0, 872)), $mul.ref(576, 1));
    goto corral_source_split_2186;

  $bb13:
    assume {:verifier.code 0} true;
    assume out_$i45 == 1;
    goto $bb13_dummy;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    out_$i45 := $ne.i32(out_$i44, 2);
    goto corral_source_split_2241;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    out_$i44 := $zext.i8.i32(out_$i43);
    goto corral_source_split_2240;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i43 := $load.i8($M.1, in_$p6);
    goto corral_source_split_2239;

  $bb10:
    assume !(out_$i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    out_$i39 := $eq.i32(out_$i38, 4);
    goto corral_source_split_2231;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    out_$i38 := $zext.i8.i32(out_$i37);
    goto corral_source_split_2230;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i8($M.1, out_$p36);
    goto corral_source_split_2229;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(in_$p0, $mul.ref(0, 872)), $mul.ref(112, 1));
    goto corral_source_split_2228;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} out_vslice_dummy_var_39 := msleep_interruptible(250);
    goto corral_source_split_2227;

  $bb7:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 510} out_vslice_dummy_var_38 := __dynamic_dev_dbg.ref.ref.ref.i32(in_$p2, out_$p26, .str.129, out_$i33);
    goto corral_source_split_2225;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    out_$i33 := $sext.i16.i32(out_$i32);
    goto corral_source_split_2224;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    out_$i32 := $trunc.i64.i16(out_$i31);
    goto corral_source_split_2223;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    out_$i31 := $sdiv.i64(out_$i30, 896);
    goto corral_source_split_2222;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    out_$i30 := $sub.i64(out_$i27, out_$i29);
    goto corral_source_split_2221;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    out_$i29 := $p2i.ref.i64(out_$p28);
    goto corral_source_split_2220;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    out_$p28 := $M.3;
    goto corral_source_split_2219;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    out_$i27 := $p2i.ref.i64(in_$p0);
    goto corral_source_split_2218;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    out_$p26 := $M.5;
    goto corral_source_split_2217;

  $bb6:
    assume out_$i25 == 1;
    goto corral_source_split_2216;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    out_$i25 := $ne.i64(out_$i24, 0);
    goto corral_source_split_2214;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 508} out_$i24 := ldv__builtin_expect(out_$i23, 0);
    call {:si_unique_call 509} {:cexpr "tmp"} boogie_si_record_i64(out_$i24);
    goto corral_source_split_2213;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    out_$i23 := $and.i64(out_$i22, 1);
    goto corral_source_split_2212;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    out_$i22 := $zext.i8.i64(out_$i21);
    goto corral_source_split_2211;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    out_$i21 := $load.i8($M.13, out_$p20);
    goto corral_source_split_2210;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2209;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, out_$p19, 0);
    goto corral_source_split_2208;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2207;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, out_$p15, out_$i18);
    goto corral_source_split_2206;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    out_$i18 := $or.i24(out_$i17, 1109);
    goto corral_source_split_2205;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    out_$i17 := $and.i24(out_$i16, $sub.i24(0, 262144));
    goto corral_source_split_2204;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    out_$i16 := $load.i24($M.12, out_$p15);
    goto corral_source_split_2203;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    out_$p15 := $bitcast.ref.ref(out_$p14);
    goto corral_source_split_2202;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2201;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, out_$p13, .str.129);
    goto corral_source_split_2200;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2199;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, out_$p12, .str.114);
    goto corral_source_split_2198;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2197;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, out_$p11, .str.128);
    goto corral_source_split_2196;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2195;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, out_$p10, .str);
    goto corral_source_split_2194;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2193;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb15:
    assume out_$i51 == 1;
    goto corral_source_split_2245;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    out_$i51 := $ne.i32(out_$i50, 3);
    goto corral_source_split_2191;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    out_$i50 := $zext.i8.i32(out_$i49);
    goto corral_source_split_2190;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    out_$i49 := $load.i8($M.1, out_$p48);
    goto corral_source_split_2189;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(out_$p47, $mul.ref(0, 296)), $mul.ref(284, 1));
    goto corral_source_split_2188;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    out_$p47 := $bitcast.ref.ref(out_$p46);
    goto corral_source_split_2187;

  $bb13_dummy:
    call {:si_unique_call 1} out_$p10, out_$p11, out_$p12, out_$p13, out_$p14, out_$p15, out_$i16, out_$i17, out_$i18, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p26, out_$i27, out_$p28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$p36, out_$i37, out_$i38, out_$i39, out_$i43, out_$i44, out_$i45, out_$p46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_vslice_dummy_var_38, out_vslice_dummy_var_39 := xpc_make_first_contact_uv_loop_$bb4(in_$p0, in_$p2, in_$p6, out_$p10, out_$p11, out_$p12, out_$p13, out_$p14, out_$p15, out_$i16, out_$i17, out_$i18, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p26, out_$i27, out_$p28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$p36, out_$i37, out_$i38, out_$i39, out_$i43, out_$i44, out_$i45, out_$p46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_vslice_dummy_var_38, out_vslice_dummy_var_39);
    return;

  exit:
    return;
}



procedure xpc_make_first_contact_uv_loop_$bb4(in_$p0: ref, in_$p2: ref, in_$p6: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$i16: i24, in_$i17: i24, in_$i18: i24, in_$p19: ref, in_$p20: ref, in_$i21: i8, in_$i22: i64, in_$i23: i64, in_$i24: i64, in_$i25: i1, in_$p26: ref, in_$i27: i64, in_$p28: ref, in_$i29: i64, in_$i30: i64, in_$i31: i64, in_$i32: i16, in_$i33: i32, in_$p36: ref, in_$i37: i8, in_$i38: i32, in_$i39: i1, in_$i43: i8, in_$i44: i32, in_$i45: i1, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$i49: i8, in_$i50: i32, in_$i51: i1, in_vslice_dummy_var_38: i32, in_vslice_dummy_var_39: i64) returns (out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$i16: i24, out_$i17: i24, out_$i18: i24, out_$p19: ref, out_$p20: ref, out_$i21: i8, out_$i22: i64, out_$i23: i64, out_$i24: i64, out_$i25: i1, out_$p26: ref, out_$i27: i64, out_$p28: ref, out_$i29: i64, out_$i30: i64, out_$i31: i64, out_$i32: i16, out_$i33: i32, out_$p36: ref, out_$i37: i8, out_$i38: i32, out_$i39: i1, out_$i43: i8, out_$i44: i32, out_$i45: i1, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$i49: i8, out_$i50: i32, out_$i51: i1, out_vslice_dummy_var_38: i32, out_vslice_dummy_var_39: i64);
  modifies $M.13, $M.12, $M.11, $M.10, $M.9, $M.8;



implementation xpc_any_partition_engaged_uv_loop_$bb1(in_$p1: ref, in_$i2: i64, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$i7: i32, in_$i8: i32, in_$i9: i1, in_$i11: i32, in_$i12: i32, in_$i13: i16, in_$i14: i32, in_$i15: i1, in_$i0: i16) returns (out_$p1: ref, out_$i2: i64, out_$p4: ref, out_$p5: ref, out_$p6: ref, out_$i7: i32, out_$i8: i32, out_$i9: i1, out_$i11: i32, out_$i12: i32, out_$i13: i16, out_$i14: i32, out_$i15: i1, out_$i0: i16)
{

  entry:
    out_$p1, out_$i2, out_$p4, out_$p5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i0 := in_$p1, in_$i2, in_$p4, in_$p5, in_$p6, in_$i7, in_$i8, in_$i9, in_$i11, in_$i12, in_$i13, in_$i14, in_$i15, in_$i0;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_2468;

  $bb7:
    assume out_$i15 == 1;
    assume {:verifier.code 0} true;
    out_$i0 := out_$i13;
    goto $bb7_dummy;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    out_$i15 := $sle.i32(out_$i14, 255);
    goto corral_source_split_2488;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    out_$i14 := $sext.i16.i32(out_$i13);
    goto corral_source_split_2487;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    out_$i13 := $trunc.i32.i16(out_$i12);
    call {:si_unique_call 560} {:cexpr "partid"} boogie_si_record_i16(out_$i13);
    goto corral_source_split_2486;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    out_$i12 := $add.i32(out_$i11, 1);
    goto corral_source_split_2485;

  $bb6:
    assume {:verifier.code 0} true;
    out_$i11 := $sext.i16.i32(out_$i0);
    goto corral_source_split_2484;

  $bb4:
    assume !(out_$i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    out_$i9 := $ne.i32(out_$i8, 0);
    goto corral_source_split_2478;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    out_$i8 := $and.i32(out_$i7, 2);
    goto corral_source_split_2477;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    out_$i7 := $load.i32($M.1, out_$p6);
    goto corral_source_split_2476;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    out_$p6 := $add.ref($add.ref(out_$p5, $mul.ref(0, 296)), $mul.ref(280, 1));
    goto corral_source_split_2475;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    out_$p5 := $bitcast.ref.ref(out_$p4);
    goto corral_source_split_2474;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    out_$p4 := $add.ref($add.ref(out_$p1, $mul.ref(out_$i2, 872)), $mul.ref(576, 1));
    goto corral_source_split_2473;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    goto corral_source_split_2472;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    out_$i2 := $sext.i16.i64(out_$i0);
    goto corral_source_split_2471;

  $bb2:
    assume {:verifier.code 0} true;
    out_$p1 := $M.3;
    goto corral_source_split_2470;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb7_dummy:
    call {:si_unique_call 1} out_$p1, out_$i2, out_$p4, out_$p5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i0 := xpc_any_partition_engaged_uv_loop_$bb1(out_$p1, out_$i2, out_$p4, out_$p5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i0);
    return;

  exit:
    return;
}



procedure xpc_any_partition_engaged_uv_loop_$bb1(in_$p1: ref, in_$i2: i64, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$i7: i32, in_$i8: i32, in_$i9: i1, in_$i11: i32, in_$i12: i32, in_$i13: i16, in_$i14: i32, in_$i15: i1, in_$i0: i16) returns (out_$p1: ref, out_$i2: i64, out_$p4: ref, out_$p5: ref, out_$p6: ref, out_$i7: i32, out_$i8: i32, out_$i9: i1, out_$i11: i32, out_$i12: i32, out_$i13: i16, out_$i14: i32, out_$i15: i1, out_$i0: i16);



implementation xpc_notify_senders_of_disconnect_uv_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p6: ref, in_$i7: i32, in_$i8: i1, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$i13: i64, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$i17: i64, in_$i18: i1, in_$p19: ref, in_$i20: i32, in_$i21: i32, in_$i22: i16, in_$i23: i32, in_$i24: i1, in_$i5: i32) returns (out_$p6: ref, out_$i7: i32, out_$i8: i1, out_$p9: ref, out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$i13: i64, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$i17: i64, out_$i18: i1, out_$p19: ref, out_$i20: i32, out_$i21: i32, out_$i22: i16, out_$i23: i32, out_$i24: i1, out_$i5: i32)
{

  entry:
    out_$p6, out_$i7, out_$i8, out_$p9, out_$p10, out_$p11, out_$p12, out_$i13, out_$p14, out_$p15, out_$p16, out_$i17, out_$i18, out_$p19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i5 := in_$p6, in_$i7, in_$i8, in_$p9, in_$p10, in_$p11, in_$p12, in_$i13, in_$p14, in_$p15, in_$p16, in_$i17, in_$i18, in_$p19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i5;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_2678;

  $bb13:
    assume out_$i24 == 1;
    assume {:verifier.code 0} true;
    out_$i5 := out_$i21;
    goto $bb13_dummy;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    out_$i24 := $sgt.i32(out_$i23, out_$i21);
    goto corral_source_split_2705;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    out_$i23 := $zext.i16.i32(out_$i22);
    goto corral_source_split_2704;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    out_$i22 := $load.i16($M.1, in_$p1);
    goto corral_source_split_2703;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i21 := $add.i32(out_$i5, 1);
    call {:si_unique_call 592} {:cexpr "entry"} boogie_si_record_i32(out_$i21);
    goto corral_source_split_2702;

  $bb11:
    assume !(out_$i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_285:
    goto corral_source_split_2700;

  SeqInstr_284:
    assume assertsPassed;
    goto SeqInstr_285;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} xpc_notify_sender_uv(in_$p0, out_$p14, out_$i20);
    goto SeqInstr_284;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    out_$i20 := $load.i32($M.1, out_$p19);
    goto corral_source_split_2699;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(in_$p0, $mul.ref(0, 720)), $mul.ref(84, 1));
    goto corral_source_split_2698;

  $bb10:
    assume out_$i18 == 1;
    goto corral_source_split_2697;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    out_$i18 := $ne.i64(out_$i17, 0);
    goto corral_source_split_2695;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    out_$i17 := $p2i.ref.i64(out_$p16);
    goto corral_source_split_2694;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    out_$p16 := $load.ref($M.1, out_$p15);
    goto corral_source_split_2693;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(out_$p12, $mul.ref(out_$i13, 32)), $mul.ref(16, 1));
    goto corral_source_split_2692;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref(out_$p12, $mul.ref(out_$i13, 32));
    goto corral_source_split_2691;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    out_$i13 := $sext.i32.i64(out_$i5);
    goto corral_source_split_2690;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    out_$p12 := $load.ref($M.1, out_$p11);
    goto corral_source_split_2689;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(out_$p10, $mul.ref(0, 216)), $mul.ref(8, 1));
    goto corral_source_split_2688;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    out_$p10 := $bitcast.ref.ref(out_$p9);
    goto corral_source_split_2687;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(in_$p0, $mul.ref(0, 720)), $mul.ref(432, 1));
    goto corral_source_split_2686;

  $bb7:
    assume !(out_$i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    out_$i8 := $eq.i32(out_$i7, 0);
    goto corral_source_split_2682;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} out_$i7 := atomic_read(out_$p6);
    call {:si_unique_call 590} {:cexpr "tmp"} boogie_si_record_i32(out_$i7);
    goto corral_source_split_2681;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p6 := $add.ref($add.ref(in_$p0, $mul.ref(0, 720)), $mul.ref(204, 1));
    goto corral_source_split_2680;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb13_dummy:
    call {:si_unique_call 1} out_$p6, out_$i7, out_$i8, out_$p9, out_$p10, out_$p11, out_$p12, out_$i13, out_$p14, out_$p15, out_$p16, out_$i17, out_$i18, out_$p19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i5 := xpc_notify_senders_of_disconnect_uv_loop_$bb4(in_$p0, in_$p1, out_$p6, out_$i7, out_$i8, out_$p9, out_$p10, out_$p11, out_$p12, out_$i13, out_$p14, out_$p15, out_$p16, out_$i17, out_$i18, out_$p19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i5);
    return;

  exit:
    return;
}



procedure xpc_notify_senders_of_disconnect_uv_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p6: ref, in_$i7: i32, in_$i8: i1, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$i13: i64, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$i17: i64, in_$i18: i1, in_$p19: ref, in_$i20: i32, in_$i21: i32, in_$i22: i16, in_$i23: i32, in_$i24: i1, in_$i5: i32) returns (out_$p6: ref, out_$i7: i32, out_$i8: i1, out_$p9: ref, out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$i13: i64, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$i17: i64, out_$i18: i1, out_$p19: ref, out_$i20: i32, out_$i21: i32, out_$i22: i16, out_$i23: i32, out_$i24: i1, out_$i5: i32);
  modifies $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.1, $CurrAddr, $M.23, $M.28, assertsPassed, $M.0, $M.2;



implementation xpc_send_gru_msg_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p3: ref, in_$p4: ref, in_$i5: i32, in_$i8: i32, in_$i10: i1, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$i17: i24, in_$i18: i24, in_$i19: i24, in_$p20: ref, in_$p21: ref, in_$i22: i8, in_$i23: i64, in_$i24: i64, in_$i25: i64, in_$i26: i1, in_$p27: ref, in_$i30: i1, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$i38: i24, in_$i39: i24, in_$i40: i24, in_$p41: ref, in_$p42: ref, in_$i43: i8, in_$i44: i64, in_$i45: i64, in_$i46: i64, in_$i47: i1, in_$p48: ref, in_$i31: i32, in_$i52: i32, in_$i53: i1, in_vslice_dummy_var_42: i32, in_vslice_dummy_var_43: i64, in_vslice_dummy_var_45: i32) returns (out_$i8: i32, out_$i10: i1, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$i17: i24, out_$i18: i24, out_$i19: i24, out_$p20: ref, out_$p21: ref, out_$i22: i8, out_$i23: i64, out_$i24: i64, out_$i25: i64, out_$i26: i1, out_$p27: ref, out_$i30: i1, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$i38: i24, out_$i39: i24, out_$i40: i24, out_$p41: ref, out_$p42: ref, out_$i43: i8, out_$i44: i64, out_$i45: i64, out_$i46: i64, out_$i47: i1, out_$p48: ref, out_$i31: i32, out_$i52: i32, out_$i53: i1, out_vslice_dummy_var_42: i32, out_vslice_dummy_var_43: i64, out_vslice_dummy_var_45: i32)
{

  entry:
    out_$i8, out_$i10, out_$p11, out_$p12, out_$p13, out_$p14, out_$p15, out_$p16, out_$i17, out_$i18, out_$i19, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$p27, out_$i30, out_$p32, out_$p33, out_$p34, out_$p35, out_$p36, out_$p37, out_$i38, out_$i39, out_$i40, out_$p41, out_$p42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$p48, out_$i31, out_$i52, out_$i53, out_vslice_dummy_var_42, out_vslice_dummy_var_43, out_vslice_dummy_var_45 := in_$i8, in_$i10, in_$p11, in_$p12, in_$p13, in_$p14, in_$p15, in_$p16, in_$i17, in_$i18, in_$i19, in_$p20, in_$p21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$p27, in_$i30, in_$p32, in_$p33, in_$p34, in_$p35, in_$p36, in_$p37, in_$i38, in_$i39, in_$i40, in_$p41, in_$p42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i47, in_$p48, in_$i31, in_$i52, in_$i53, in_vslice_dummy_var_42, in_vslice_dummy_var_43, in_vslice_dummy_var_45;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb20:
    assume !(out_$i53 == 1);
    assume {:verifier.code 0} true;
    out_$i8 := out_$i52;
    goto $bb20_dummy;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    out_$i53 := $eq.i32(out_$i52, 0);
    goto corral_source_split_2852;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 614} out_$i52 := gru_send_message_gpa(in_$p0, in_$p1, in_$i5);
    call {:si_unique_call 615} {:cexpr "ret"} boogie_si_record_i32(out_$i52);
    goto corral_source_split_2851;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} out_vslice_dummy_var_43 := msleep_interruptible(10);
    goto corral_source_split_2849;

  $bb11:
    assume !(out_$i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} out_vslice_dummy_var_42 := __dynamic_dev_dbg.ref.ref.ref(in_$p3, out_$p27, .str.125);
    goto corral_source_split_2847;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    out_$p27 := $M.17;
    goto corral_source_split_2846;

  $bb10:
    assume out_$i26 == 1;
    goto corral_source_split_2845;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    out_$i26 := $ne.i64(out_$i25, 0);
    goto corral_source_split_2840;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 610} out_$i25 := ldv__builtin_expect(out_$i24, 0);
    call {:si_unique_call 611} {:cexpr "tmp"} boogie_si_record_i64(out_$i25);
    goto corral_source_split_2839;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    out_$i24 := $and.i64(out_$i23, 1);
    goto corral_source_split_2838;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    out_$i23 := $zext.i8.i64(out_$i22);
    goto corral_source_split_2837;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    out_$i22 := $load.i8($M.13, out_$p21);
    goto corral_source_split_2836;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2835;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, out_$p20, 0);
    goto corral_source_split_2834;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2833;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, out_$p16, out_$i19);
    goto corral_source_split_2832;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    out_$i19 := $or.i24(out_$i18, 403);
    goto corral_source_split_2831;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    out_$i18 := $and.i24(out_$i17, $sub.i24(0, 262144));
    goto corral_source_split_2830;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    out_$i17 := $load.i24($M.12, out_$p16);
    goto corral_source_split_2829;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    out_$p16 := $bitcast.ref.ref(out_$p15);
    goto corral_source_split_2828;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2827;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, out_$p14, .str.125);
    goto corral_source_split_2826;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2825;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, out_$p13, .str.114);
    goto corral_source_split_2824;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2823;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, out_$p12, .str.124);
    goto corral_source_split_2822;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2821;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, out_$p11, .str);
    goto corral_source_split_2820;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2819;

  $bb8:
    assume out_$i10 == 1;
    goto corral_source_split_2818;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb7:
    assume {:verifier.code 0} true;
    out_$i10 := $eq.i32(out_$i8, 2);
    goto corral_source_split_2816;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb17:
    assume !(out_$i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 619} out_vslice_dummy_var_45 := __dynamic_dev_dbg.ref.ref.ref(in_$p4, out_$p48, .str.126);
    goto corral_source_split_2884;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    out_$p48 := $M.17;
    goto corral_source_split_2883;

  $bb16:
    assume out_$i47 == 1;
    goto corral_source_split_2882;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    out_$i47 := $ne.i64(out_$i46, 0);
    goto corral_source_split_2876;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 616} out_$i46 := ldv__builtin_expect(out_$i45, 0);
    call {:si_unique_call 617} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i46);
    goto corral_source_split_2875;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    out_$i45 := $and.i64(out_$i44, 1);
    goto corral_source_split_2874;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    out_$i44 := $zext.i8.i64(out_$i43);
    goto corral_source_split_2873;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    out_$i43 := $load.i8($M.13, out_$p42);
    goto corral_source_split_2872;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2871;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, out_$p41, 0);
    goto corral_source_split_2870;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2869;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, out_$p37, out_$i40);
    goto corral_source_split_2868;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    out_$i40 := $or.i24(out_$i39, 409);
    goto corral_source_split_2867;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    out_$i39 := $and.i24(out_$i38, $sub.i24(0, 262144));
    goto corral_source_split_2866;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    out_$i38 := $load.i24($M.12, out_$p37);
    goto corral_source_split_2865;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    out_$p37 := $bitcast.ref.ref(out_$p36);
    goto corral_source_split_2864;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2863;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, out_$p35, .str.126);
    goto corral_source_split_2862;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2861;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, out_$p34, .str.114);
    goto corral_source_split_2860;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2859;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, out_$p33, .str.124);
    goto corral_source_split_2858;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2857;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, out_$p32, .str);
    goto corral_source_split_2856;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2855;

  $bb14:
    assume out_$i30 == 1;
    goto corral_source_split_2854;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    out_$i31 := out_$i8;
    assume true;
    goto $bb14;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    out_$i30 := $eq.i32(out_$i8, 1);
    goto corral_source_split_2843;

  $bb9:
    assume !(out_$i10 == 1);
    goto corral_source_split_2842;

  $bb20_dummy:
    call {:si_unique_call 1} out_$i8, out_$i10, out_$p11, out_$p12, out_$p13, out_$p14, out_$p15, out_$p16, out_$i17, out_$i18, out_$i19, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$p27, out_$i30, out_$p32, out_$p33, out_$p34, out_$p35, out_$p36, out_$p37, out_$i38, out_$i39, out_$i40, out_$p41, out_$p42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$p48, out_$i31, out_$i52, out_$i53, out_vslice_dummy_var_42, out_vslice_dummy_var_43, out_vslice_dummy_var_45 := xpc_send_gru_msg_loop_$bb4(in_$p0, in_$p1, in_$p3, in_$p4, in_$i5, out_$i8, out_$i10, out_$p11, out_$p12, out_$p13, out_$p14, out_$p15, out_$p16, out_$i17, out_$i18, out_$i19, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$p27, out_$i30, out_$p32, out_$p33, out_$p34, out_$p35, out_$p36, out_$p37, out_$i38, out_$i39, out_$i40, out_$p41, out_$p42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$p48, out_$i31, out_$i52, out_$i53, out_vslice_dummy_var_42, out_vslice_dummy_var_43, out_vslice_dummy_var_45);
    return;

  exit:
    return;
}



procedure xpc_send_gru_msg_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p3: ref, in_$p4: ref, in_$i5: i32, in_$i8: i32, in_$i10: i1, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$i17: i24, in_$i18: i24, in_$i19: i24, in_$p20: ref, in_$p21: ref, in_$i22: i8, in_$i23: i64, in_$i24: i64, in_$i25: i64, in_$i26: i1, in_$p27: ref, in_$i30: i1, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$i38: i24, in_$i39: i24, in_$i40: i24, in_$p41: ref, in_$p42: ref, in_$i43: i8, in_$i44: i64, in_$i45: i64, in_$i46: i64, in_$i47: i1, in_$p48: ref, in_$i31: i32, in_$i52: i32, in_$i53: i1, in_vslice_dummy_var_42: i32, in_vslice_dummy_var_43: i64, in_vslice_dummy_var_45: i32) returns (out_$i8: i32, out_$i10: i1, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$i17: i24, out_$i18: i24, out_$i19: i24, out_$p20: ref, out_$p21: ref, out_$i22: i8, out_$i23: i64, out_$i24: i64, out_$i25: i64, out_$i26: i1, out_$p27: ref, out_$i30: i1, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$i38: i24, out_$i39: i24, out_$i40: i24, out_$p41: ref, out_$p42: ref, out_$i43: i8, out_$i44: i64, out_$i45: i64, out_$i46: i64, out_$i47: i1, out_$p48: ref, out_$i31: i32, out_$i52: i32, out_$i53: i1, out_vslice_dummy_var_42: i32, out_vslice_dummy_var_43: i64, out_vslice_dummy_var_45: i32);
  modifies $M.13, $M.12, $M.11, $M.10, $M.9, $M.8;



implementation xpc_get_fifo_entry_uv_loop_$bb8()
{

  entry:
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb8_dummy;

  $bb8_dummy:
    call {:si_unique_call 1} xpc_get_fifo_entry_uv_loop_$bb8();
    return;

  exit:
    return;
}



procedure xpc_get_fifo_entry_uv_loop_$bb8();



implementation xpc_allocate_msg_slot_uv_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$p5: ref, in_$p11: ref, in_$i12: i32, in_$i13: i1, in_$i15: i32, in_$i16: i1, in_$i17: i1, in_$i18: i32, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i1) returns (out_$p11: ref, out_$i12: i32, out_$i13: i1, out_$i15: i32, out_$i16: i1, out_$i17: i1, out_$i18: i32, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i1)
{

  entry:
    out_$p11, out_$i12, out_$i13, out_$i15, out_$i16, out_$i17, out_$i18, out_$p19, out_$p20, out_$i21, out_$i22 := in_$p11, in_$i12, in_$i13, in_$i15, in_$i16, in_$i17, in_$i18, in_$p19, in_$p20, in_$i21, in_$i22;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb18:
    assume {:verifier.code 0} true;
    assume !(out_$i22 == 1);
    goto $bb18_dummy;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    out_$p11 := out_$p19;
    assume true;
    goto $bb18;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    out_$i22 := $ne.i64(out_$i21, 0);
    goto corral_source_split_2984;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    out_$i21 := $p2i.ref.i64(out_$p20);
    goto corral_source_split_2983;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    out_$p20 := $bitcast.ref.ref(out_$p19);
    goto corral_source_split_2982;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 642} out_$p19 := xpc_get_fifo_entry_uv(in_$p5);
    goto corral_source_split_2981;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb13:
    assume {:verifier.code 0} true;
    assume !(out_$i16 == 1);
    goto $bb14;

  $bb16:
    assume {:verifier.code 0} true;
    assume !(out_$i17 == 1);
    goto $bb14;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    out_$i18 := out_$i15;
    assume true;
    goto $bb16;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    out_$i17 := $ne.i32(out_$i15, 9);
    goto corral_source_split_2977;

  $bb12:
    assume out_$i16 == 1;
    goto corral_source_split_2976;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    out_$i16 := $ne.i32(out_$i15, 10);
    goto corral_source_split_2974;

  SeqInstr_291:
    call {:si_unique_call 641} {:cexpr "ret"} boogie_si_record_i32(out_$i15);
    goto corral_source_split_2973;

  SeqInstr_290:
    assume assertsPassed;
    goto SeqInstr_291;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 640} out_$i15 := xpc_allocate_msg_wait(in_$p0);
    goto SeqInstr_290;

  $bb9:
    assume !(out_$i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    out_$i13 := $ne.i32(out_$i12, 0);
    goto corral_source_split_2967;

  $bb7:
    assume {:verifier.code 0} true;
    out_$i12 := $and.i32(in_$i1, 1);
    goto corral_source_split_2966;

  $bb18_dummy:
    call {:si_unique_call 1} out_$p11, out_$i12, out_$i13, out_$i15, out_$i16, out_$i17, out_$i18, out_$p19, out_$p20, out_$i21, out_$i22 := xpc_allocate_msg_slot_uv_loop_$bb4(in_$p0, in_$i1, in_$p5, out_$p11, out_$i12, out_$i13, out_$i15, out_$i16, out_$i17, out_$i18, out_$p19, out_$p20, out_$i21, out_$i22);
    return;

  exit:
    return;
}



procedure xpc_allocate_msg_slot_uv_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$p5: ref, in_$p11: ref, in_$i12: i32, in_$i13: i1, in_$i15: i32, in_$i16: i1, in_$i17: i1, in_$i18: i32, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i1) returns (out_$p11: ref, out_$i12: i32, out_$i13: i1, out_$i15: i32, out_$i16: i1, out_$i17: i1, out_$i18: i32, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i1);
  modifies $M.1, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $CurrAddr, $M.23, $M.28, assertsPassed, $M.0, $M.2;



implementation xpc_send_activate_IRQ_uv_loop_$bb1(in_$p1: ref, in_$i2: i64, in_$p6: ref, in_$p19: ref, in_$i20: i32, in_$i21: i32, in_$i22: i1, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$i26: i64, in_$i27: i1, in_$p28: ref, in_$p29: ref, in_$i30: i64, in_$i31: i1, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$i37: i64, in_$i38: i32, in_$i39: i1, in_$i40: i32, in_$p41: ref, in_$p42: ref, in_$i43: i64, in_$p44: ref, in_$i45: i32, in_$i46: i32, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$i52: i32, in_$i53: i1, in_$p55: ref, in_$i56: i32, in_$i57: i32, in_$i58: i1, in_$i59: i32, in_$i54: i32) returns (out_$p19: ref, out_$i20: i32, out_$i21: i32, out_$i22: i1, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$i26: i64, out_$i27: i1, out_$p28: ref, out_$p29: ref, out_$i30: i64, out_$i31: i1, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$i37: i64, out_$i38: i32, out_$i39: i1, out_$i40: i32, out_$p41: ref, out_$p42: ref, out_$i43: i64, out_$p44: ref, out_$i45: i32, out_$i46: i32, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$i52: i32, out_$i53: i1, out_$p55: ref, out_$i56: i32, out_$i57: i32, out_$i58: i1, out_$i59: i32, out_$i54: i32)
{

  entry:
    out_$p19, out_$i20, out_$i21, out_$i22, out_$p23, out_$p24, out_$p25, out_$i26, out_$i27, out_$p28, out_$p29, out_$i30, out_$i31, out_$p34, out_$p35, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$p41, out_$p42, out_$i43, out_$p44, out_$i45, out_$i46, out_$p47, out_$p48, out_$p49, out_$p50, out_$p51, out_$i52, out_$i53, out_$p55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i54 := in_$p19, in_$i20, in_$i21, in_$i22, in_$p23, in_$p24, in_$p25, in_$i26, in_$i27, in_$p28, in_$p29, in_$i30, in_$i31, in_$p34, in_$p35, in_$p36, in_$i37, in_$i38, in_$i39, in_$i40, in_$p41, in_$p42, in_$i43, in_$p44, in_$i45, in_$i46, in_$p47, in_$p48, in_$p49, in_$p50, in_$p51, in_$i52, in_$i53, in_$p55, in_$i56, in_$i57, in_$i58, in_$i59, in_$i54;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(in_$p6, $mul.ref(0, 296)), $mul.ref(280, 1));
    goto corral_source_split_3105;

  $bb17:
    assume {:verifier.code 0} true;
    assume out_$i58 == 1;
    goto $bb17_dummy;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    out_$i59 := out_$i52;
    assume true;
    goto $bb17;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    out_$i58 := $eq.i32(out_$i57, 0);
    goto corral_source_split_3162;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    out_$i57 := $and.i32(out_$i56, 1);
    goto corral_source_split_3161;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    out_$i56 := $load.i32($M.1, out_$p55);
    goto corral_source_split_3160;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref(in_$p6, $mul.ref(0, 296)), $mul.ref(280, 1));
    goto corral_source_split_3159;

  SeqInstr_312:
    goto corral_source_split_3158;

  SeqInstr_311:
    assume assertsPassed;
    goto SeqInstr_312;

  $bb15:
    assume out_$i53 == 1;
    call {:si_unique_call 680} devirtbounce.4(0);
    goto SeqInstr_311;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    out_$i54 := out_$i52;
    assume true;
    goto $bb15;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    out_$i53 := $ne.i32(out_$i52, 0);
    goto corral_source_split_3156;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 678} out_$i52 := xpc_send_gru_msg(out_$p51, in_$p1, in_$i2);
    call {:si_unique_call 679} {:cexpr "ret"} boogie_si_record_i32(out_$i52);
    goto corral_source_split_3155;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    out_$p51 := $bitcast.ref.ref(out_$p50);
    goto corral_source_split_3154;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    out_$p50 := $load.ref($M.1, out_$p49);
    goto corral_source_split_3153;

  $bb14:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(in_$p6, $mul.ref(0, 296)), $mul.ref(32, 1));
    goto corral_source_split_3152;

  $bb3:
    assume !(out_$i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 677} spin_unlock_irqrestore(out_$p48, out_$i43);
    goto corral_source_split_3150;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(in_$p6, $mul.ref(0, 296)), $mul.ref(208, 1));
    goto corral_source_split_3149;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p47, out_$i46);
    goto corral_source_split_3148;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(in_$p6, $mul.ref(0, 296)), $mul.ref(280, 1));
    goto corral_source_split_3147;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    out_$i46 := $or.i32(out_$i45, 1);
    goto corral_source_split_3146;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    out_$i45 := $load.i32($M.1, out_$p44);
    goto corral_source_split_3145;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(in_$p6, $mul.ref(0, 296)), $mul.ref(280, 1));
    goto corral_source_split_3144;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 675} out_$i43 := _raw_spin_lock_irqsave(out_$p42);
    call {:si_unique_call 676} {:cexpr "irq_flags"} boogie_si_record_i64(out_$i43);
    goto corral_source_split_3143;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 674} out_$p42 := spinlock_check(out_$p41);
    goto corral_source_split_3142;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(in_$p6, $mul.ref(0, 296)), $mul.ref(208, 1));
    goto corral_source_split_3141;

  $bb12:
    assume !(out_$i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    out_$i40 := out_$i38;
    assume true;
    goto $bb12;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    out_$i39 := $ne.i32(out_$i38, 0);
    goto corral_source_split_3137;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 672} out_$i38 := xpc_cache_remote_gru_mq_desc_uv(out_$p35, out_$i37);
    call {:si_unique_call 673} {:cexpr "ret"} boogie_si_record_i32(out_$i38);
    goto corral_source_split_3136;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i64($M.1, out_$p36);
    goto corral_source_split_3135;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(in_$p6, $mul.ref(0, 296)), $mul.ref(24, 1));
    goto corral_source_split_3134;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_3133;

  $bb5:
    assume !(out_$i27 == 1);
    assume {:verifier.code 0} true;
    out_$p35 := out_$p24;
    goto $bb10;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    out_$p35 := out_$p28;
    goto $bb10;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p34, out_$p28);
    goto corral_source_split_3131;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(in_$p6, $mul.ref(0, 296)), $mul.ref(32, 1));
    goto corral_source_split_3130;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_3129;

  $bb7:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    out_$i31 := $eq.i64(out_$i30, 0);
    goto corral_source_split_3121;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    out_$i30 := $p2i.ref.i64(out_$p29);
    goto corral_source_split_3120;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    out_$p29 := $bitcast.ref.ref(out_$p28);
    goto corral_source_split_3119;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 670} out_$p28 := kmalloc(32, 208);
    goto corral_source_split_3118;

  $bb4:
    assume out_$i27 == 1;
    goto corral_source_split_3117;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    out_$i27 := $eq.i64(out_$i26, 0);
    goto corral_source_split_3115;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    out_$i26 := $p2i.ref.i64(out_$p25);
    goto corral_source_split_3114;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    out_$p25 := $bitcast.ref.ref(out_$p24);
    goto corral_source_split_3113;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    out_$p24 := $load.ref($M.1, out_$p23);
    goto corral_source_split_3112;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(in_$p6, $mul.ref(0, 296)), $mul.ref(32, 1));
    goto corral_source_split_3111;

  $bb2:
    assume out_$i22 == 1;
    goto corral_source_split_3110;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    out_$i22 := $eq.i32(out_$i21, 0);
    goto corral_source_split_3108;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    out_$i21 := $and.i32(out_$i20, 1);
    goto corral_source_split_3107;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    out_$i20 := $load.i32($M.1, out_$p19);
    goto corral_source_split_3106;

  $bb17_dummy:
    call {:si_unique_call 1} out_$p19, out_$i20, out_$i21, out_$i22, out_$p23, out_$p24, out_$p25, out_$i26, out_$i27, out_$p28, out_$p29, out_$i30, out_$i31, out_$p34, out_$p35, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$p41, out_$p42, out_$i43, out_$p44, out_$i45, out_$i46, out_$p47, out_$p48, out_$p49, out_$p50, out_$p51, out_$i52, out_$i53, out_$p55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i54 := xpc_send_activate_IRQ_uv_loop_$bb1(in_$p1, in_$i2, in_$p6, out_$p19, out_$i20, out_$i21, out_$i22, out_$p23, out_$p24, out_$p25, out_$i26, out_$i27, out_$p28, out_$p29, out_$i30, out_$i31, out_$p34, out_$p35, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$p41, out_$p42, out_$i43, out_$p44, out_$i45, out_$i46, out_$p47, out_$p48, out_$p49, out_$p50, out_$p51, out_$i52, out_$i53, out_$p55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i54);
    return;

  exit:
    return;
}



procedure xpc_send_activate_IRQ_uv_loop_$bb1(in_$p1: ref, in_$i2: i64, in_$p6: ref, in_$p19: ref, in_$i20: i32, in_$i21: i32, in_$i22: i1, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$i26: i64, in_$i27: i1, in_$p28: ref, in_$p29: ref, in_$i30: i64, in_$i31: i1, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$i37: i64, in_$i38: i32, in_$i39: i1, in_$i40: i32, in_$p41: ref, in_$p42: ref, in_$i43: i64, in_$p44: ref, in_$i45: i32, in_$i46: i32, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$i52: i32, in_$i53: i1, in_$p55: ref, in_$i56: i32, in_$i57: i32, in_$i58: i1, in_$i59: i32, in_$i54: i32) returns (out_$p19: ref, out_$i20: i32, out_$i21: i32, out_$i22: i1, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$i26: i64, out_$i27: i1, out_$p28: ref, out_$p29: ref, out_$i30: i64, out_$i31: i1, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$i37: i64, out_$i38: i32, out_$i39: i1, out_$i40: i32, out_$p41: ref, out_$p42: ref, out_$i43: i64, out_$p44: ref, out_$i45: i32, out_$i46: i32, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$i52: i32, out_$i53: i1, out_$p55: ref, out_$i56: i32, out_$i57: i32, out_$i58: i1, out_$i59: i32, out_$i54: i32);
  modifies $M.1, $M.23, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.28, assertsPassed, $CurrAddr, $M.0, $M.2;



implementation xpc_allocate_send_msg_slot_uv_loop_$bb13(in_$p2: ref, in_$i17: i32, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$i27: i32, in_$i28: i1, in_$i19: i32) returns (out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$i27: i32, out_$i28: i1, out_$i19: i32)
{

  entry:
    out_$p20, out_$p21, out_$i22, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$i19 := in_$p20, in_$p21, in_$i22, in_$p24, in_$p25, in_$p26, in_$i27, in_$i28, in_$i19;
    goto $bb13, exit;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_3332;

  $bb15:
    assume out_$i28 == 1;
    assume {:verifier.code 0} true;
    out_$i19 := out_$i27;
    goto $bb15_dummy;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    out_$i28 := $slt.i32(out_$i27, in_$i17);
    goto corral_source_split_3344;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    out_$i27 := $add.i32(out_$i19, 1);
    call {:si_unique_call 741} {:cexpr "entry"} boogie_si_record_i32(out_$i27);
    goto corral_source_split_3343;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 740} xpc_put_fifo_entry_uv(out_$p25, out_$p26);
    goto corral_source_split_3342;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(out_$p21, $mul.ref(out_$i22, 32)), $mul.ref(0, 1));
    goto corral_source_split_3341;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(in_$p2, $mul.ref(0, 216)), $mul.ref(24, 1));
    goto corral_source_split_3340;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p24, out_$i19);
    goto corral_source_split_3339;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p21, $mul.ref(out_$i22, 32)), $mul.ref(8, 1));
    goto corral_source_split_3338;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    goto corral_source_split_3337;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    out_$i22 := $sext.i32.i64(out_$i19);
    goto corral_source_split_3336;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    out_$p21 := $load.ref($M.1, out_$p20);
    goto corral_source_split_3335;

  $bb14:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(in_$p2, $mul.ref(0, 216)), $mul.ref(8, 1));
    goto corral_source_split_3334;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb15_dummy:
    call {:si_unique_call 1} out_$p20, out_$p21, out_$i22, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$i19 := xpc_allocate_send_msg_slot_uv_loop_$bb13(in_$p2, in_$i17, out_$p20, out_$p21, out_$i22, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$i19);
    return;

  exit:
    return;
}



procedure xpc_allocate_send_msg_slot_uv_loop_$bb13(in_$p2: ref, in_$i17: i32, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$i27: i32, in_$i28: i1, in_$i19: i32) returns (out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$i27: i32, out_$i28: i1, out_$i19: i32);
  modifies $M.1;



implementation xpc_allocate_send_msg_slot_uv_loop_$bb4(in_$p2: ref, in_$i8: i64, in_$i9: i64, in_$p10: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$i16: i1, in_$i17: i32, in_$i40: i32, in_$i41: i1, in_$i7: i32) returns (out_$i8: i64, out_$i9: i64, out_$p10: ref, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$i16: i1, out_$i17: i32, out_$i40: i32, out_$i41: i1, out_$i7: i32)
{

  entry:
    out_$i8, out_$i9, out_$p10, out_$p12, out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$i40, out_$i41, out_$i7 := in_$i8, in_$i9, in_$p10, in_$p12, in_$p13, in_$p14, in_$i15, in_$i16, in_$i17, in_$i40, in_$i41, in_$i7;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_3310;

  $bb22:
    assume out_$i41 == 1;
    assume {:verifier.code 0} true;
    out_$i7 := out_$i40;
    goto $bb22_dummy;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    out_$i41 := $sgt.i32(out_$i40, 0);
    goto corral_source_split_3326;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i40 := $sub.i32(out_$i7, 1);
    call {:si_unique_call 739} {:cexpr "nentries"} boogie_si_record_i32(out_$i40);
    goto corral_source_split_3325;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb6:
    assume out_$i16 == 1;
    goto corral_source_split_3323;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    out_$i17 := out_$i7;
    assume true;
    goto $bb6;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    out_$i16 := $eq.i64(out_$i15, 0);
    goto corral_source_split_3321;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    out_$i15 := $p2i.ref.i64(out_$p14);
    goto corral_source_split_3320;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    out_$p14 := $load.ref($M.1, out_$p13);
    goto corral_source_split_3319;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(in_$p2, $mul.ref(0, 216)), $mul.ref(8, 1));
    goto corral_source_split_3318;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p12, out_$p10);
    goto corral_source_split_3317;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(in_$p2, $mul.ref(0, 216)), $mul.ref(8, 1));
    goto corral_source_split_3316;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    goto corral_source_split_3315;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 738} out_$p10 := kzalloc(out_$i9, 208);
    goto corral_source_split_3314;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    out_$i9 := $mul.i64(out_$i8, 32);
    call {:si_unique_call 737} {:cexpr "nbytes"} boogie_si_record_i64(out_$i9);
    goto corral_source_split_3313;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i8 := $sext.i32.i64(out_$i7);
    goto corral_source_split_3312;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb22_dummy:
    call {:si_unique_call 1} out_$i8, out_$i9, out_$p10, out_$p12, out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$i40, out_$i41, out_$i7 := xpc_allocate_send_msg_slot_uv_loop_$bb4(in_$p2, out_$i8, out_$i9, out_$p10, out_$p12, out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$i40, out_$i41, out_$i7);
    return;

  exit:
    return;
}



procedure xpc_allocate_send_msg_slot_uv_loop_$bb4(in_$p2: ref, in_$i8: i64, in_$i9: i64, in_$p10: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$i16: i1, in_$i17: i32, in_$i40: i32, in_$i41: i1, in_$i7: i32) returns (out_$i8: i64, out_$i9: i64, out_$p10: ref, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$i16: i1, out_$i17: i32, out_$i40: i32, out_$i41: i1, out_$i7: i32);
  modifies $M.1, $CurrAddr;



implementation xpc_allocate_recv_msg_slot_uv_loop_$bb13(in_$p0: ref, in_$p2: ref, in_$i19: i32, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$i26: i16, in_$i27: i32, in_$i28: i32, in_$i29: i64, in_$p32: ref, in_$i33: i32, in_$i34: i1, in_$i21: i32) returns (out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$i26: i16, out_$i27: i32, out_$i28: i32, out_$i29: i64, out_$p32: ref, out_$i33: i32, out_$i34: i1, out_$i21: i32)
{

  entry:
    out_$p22, out_$p23, out_$p24, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$p32, out_$i33, out_$i34, out_$i21 := in_$p22, in_$p23, in_$p24, in_$p25, in_$i26, in_$i27, in_$i28, in_$i29, in_$p32, in_$i33, in_$i34, in_$i21;
    goto $bb13, exit;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_3402;

  $bb15:
    assume out_$i34 == 1;
    assume {:verifier.code 0} true;
    out_$i21 := out_$i33;
    goto $bb15_dummy;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    out_$i34 := $slt.i32(out_$i33, in_$i19);
    goto corral_source_split_3416;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    out_$i33 := $add.i32(out_$i21, 1);
    call {:si_unique_call 750} {:cexpr "entry"} boogie_si_record_i32(out_$i33);
    goto corral_source_split_3415;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p32, out_$i21);
    goto corral_source_split_3414;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref($add.ref(out_$p24, $mul.ref(out_$i29, 24)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_3413;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    goto corral_source_split_3412;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    out_$i29 := $sext.i32.i64(out_$i28);
    goto corral_source_split_3411;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    out_$i28 := $mul.i32(out_$i27, out_$i21);
    goto corral_source_split_3410;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    out_$i27 := $zext.i16.i32(out_$i26);
    goto corral_source_split_3409;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i16($M.1, out_$p25);
    goto corral_source_split_3408;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(in_$p0, $mul.ref(0, 720)), $mul.ref(94, 1));
    goto corral_source_split_3407;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    out_$p24 := $bitcast.ref.ref(out_$p23);
    goto corral_source_split_3406;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    out_$p23 := $load.ref($M.1, out_$p22);
    goto corral_source_split_3405;

  $bb14:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(in_$p2, $mul.ref(0, 216)), $mul.ref(16, 1));
    goto corral_source_split_3404;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb15_dummy:
    call {:si_unique_call 1} out_$p22, out_$p23, out_$p24, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$p32, out_$i33, out_$i34, out_$i21 := xpc_allocate_recv_msg_slot_uv_loop_$bb13(in_$p0, in_$p2, in_$i19, out_$p22, out_$p23, out_$p24, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$p32, out_$i33, out_$i34, out_$i21);
    return;

  exit:
    return;
}



procedure xpc_allocate_recv_msg_slot_uv_loop_$bb13(in_$p0: ref, in_$p2: ref, in_$i19: i32, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$i26: i16, in_$i27: i32, in_$i28: i32, in_$i29: i64, in_$p32: ref, in_$i33: i32, in_$i34: i1, in_$i21: i32) returns (out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$i26: i16, out_$i27: i32, out_$i28: i32, out_$i29: i64, out_$p32: ref, out_$i33: i32, out_$i34: i1, out_$i21: i32);
  modifies $M.1;



implementation xpc_allocate_recv_msg_slot_uv_loop_$bb4(in_$p0: ref, in_$p2: ref, in_$p8: ref, in_$i9: i16, in_$i10: i32, in_$i11: i32, in_$i12: i64, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$i17: i64, in_$i18: i1, in_$i19: i32, in_$i46: i32, in_$i47: i1, in_$i7: i32) returns (out_$p8: ref, out_$i9: i16, out_$i10: i32, out_$i11: i32, out_$i12: i64, out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$i17: i64, out_$i18: i1, out_$i19: i32, out_$i46: i32, out_$i47: i1, out_$i7: i32)
{

  entry:
    out_$p8, out_$i9, out_$i10, out_$i11, out_$i12, out_$p13, out_$p14, out_$p15, out_$p16, out_$i17, out_$i18, out_$i19, out_$i46, out_$i47, out_$i7 := in_$p8, in_$i9, in_$i10, in_$i11, in_$i12, in_$p13, in_$p14, in_$p15, in_$p16, in_$i17, in_$i18, in_$i19, in_$i46, in_$i47, in_$i7;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_3378;

  $bb22:
    assume out_$i47 == 1;
    assume {:verifier.code 0} true;
    out_$i7 := out_$i46;
    goto $bb22_dummy;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    out_$i47 := $sgt.i32(out_$i46, 0);
    goto corral_source_split_3396;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i46 := $sub.i32(out_$i7, 1);
    call {:si_unique_call 749} {:cexpr "nentries"} boogie_si_record_i32(out_$i46);
    goto corral_source_split_3395;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb6:
    assume out_$i18 == 1;
    goto corral_source_split_3393;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    out_$i19 := out_$i7;
    assume true;
    goto $bb6;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    out_$i18 := $eq.i64(out_$i17, 0);
    goto corral_source_split_3391;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    out_$i17 := $p2i.ref.i64(out_$p16);
    goto corral_source_split_3390;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    out_$p16 := $load.ref($M.1, out_$p15);
    goto corral_source_split_3389;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(in_$p2, $mul.ref(0, 216)), $mul.ref(16, 1));
    goto corral_source_split_3388;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p14, out_$p13);
    goto corral_source_split_3387;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(in_$p2, $mul.ref(0, 216)), $mul.ref(16, 1));
    goto corral_source_split_3386;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} out_$p13 := kzalloc(out_$i12, 208);
    goto corral_source_split_3385;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    out_$i12 := $sext.i32.i64(out_$i11);
    call {:si_unique_call 747} {:cexpr "nbytes"} boogie_si_record_i64(out_$i12);
    goto corral_source_split_3384;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    out_$i11 := $mul.i32(out_$i10, out_$i7);
    goto corral_source_split_3383;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    out_$i10 := $zext.i16.i32(out_$i9);
    goto corral_source_split_3382;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    out_$i9 := $load.i16($M.1, out_$p8);
    goto corral_source_split_3381;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref($add.ref(in_$p0, $mul.ref(0, 720)), $mul.ref(94, 1));
    goto corral_source_split_3380;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb22_dummy:
    call {:si_unique_call 1} out_$p8, out_$i9, out_$i10, out_$i11, out_$i12, out_$p13, out_$p14, out_$p15, out_$p16, out_$i17, out_$i18, out_$i19, out_$i46, out_$i47, out_$i7 := xpc_allocate_recv_msg_slot_uv_loop_$bb4(in_$p0, in_$p2, out_$p8, out_$i9, out_$i10, out_$i11, out_$i12, out_$p13, out_$p14, out_$p15, out_$p16, out_$i17, out_$i18, out_$i19, out_$i46, out_$i47, out_$i7);
    return;

  exit:
    return;
}



procedure xpc_allocate_recv_msg_slot_uv_loop_$bb4(in_$p0: ref, in_$p2: ref, in_$p8: ref, in_$i9: i16, in_$i10: i32, in_$i11: i32, in_$i12: i64, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$i17: i64, in_$i18: i1, in_$i19: i32, in_$i46: i32, in_$i47: i1, in_$i7: i32) returns (out_$p8: ref, out_$i9: i16, out_$i10: i32, out_$i11: i32, out_$i12: i64, out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$i17: i64, out_$i18: i1, out_$i19: i32, out_$i46: i32, out_$i47: i1, out_$i7: i32);
  modifies $M.1, $CurrAddr;



implementation xpc_setup_ch_structures_loop_$bb12(in_$p0: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$i11: i16, in_$p45: ref, in_$p50: ref, in_$p51: ref, in_$i52: i64, in_$p54: ref, in_$i55: i16, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$i72: i32, in_$i73: i8, in_$i74: i32, in_$i75: i1, in_$i49: i32, in_vslice_dummy_var_54: ref) returns (out_$p50: ref, out_$p51: ref, out_$i52: i64, out_$p54: ref, out_$i55: i16, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$p71: ref, out_$i72: i32, out_$i73: i8, out_$i74: i32, out_$i75: i1, out_$i49: i32, out_vslice_dummy_var_54: ref)
{

  entry:
    out_$p50, out_$p51, out_$i52, out_$p54, out_$i55, out_$p56, out_$p57, out_$p58, out_$p59, out_$p60, out_$p61, out_$p62, out_$p63, out_$p66, out_$p67, out_$p68, out_$p69, out_$p70, out_$p71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i49, out_vslice_dummy_var_54 := in_$p50, in_$p51, in_$i52, in_$p54, in_$i55, in_$p56, in_$p57, in_$p58, in_$p59, in_$p60, in_$p61, in_$p62, in_$p63, in_$p66, in_$p67, in_$p68, in_$p69, in_$p70, in_$p71, in_$i72, in_$i73, in_$i74, in_$i75, in_$i49, in_vslice_dummy_var_54;
    goto $bb12, exit;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_3702;

  $bb14:
    assume out_$i75 == 1;
    assume {:verifier.code 0} true;
    out_$i49 := out_$i72;
    goto $bb14_dummy;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    out_$i75 := $sgt.i32(out_$i74, out_$i72);
    goto corral_source_split_3741;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    out_$i74 := $zext.i8.i32(out_$i73);
    goto corral_source_split_3740;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    out_$i73 := $load.i8($M.1, in_$p45);
    goto corral_source_split_3739;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    out_$i72 := $add.i32(out_$i49, 1);
    call {:si_unique_call 844} {:cexpr "ch_number"} boogie_si_record_i32(out_$i72);
    goto corral_source_split_3738;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 843} __init_waitqueue_head(out_$p71, .str.62, in_$p5);
    goto corral_source_split_3737;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref(out_$p51, $mul.ref(out_$i52, 720)), $mul.ref(344, 1));
    goto corral_source_split_3736;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 842} __init_waitqueue_head(out_$p70, .str.61, in_$p4);
    goto corral_source_split_3735;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref(out_$p51, $mul.ref(out_$i52, 720)), $mul.ref(112, 1));
    goto corral_source_split_3734;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 841} atomic_set(out_$p69, 0);
    goto corral_source_split_3733;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref($add.ref(out_$p51, $mul.ref(out_$i52, 720)), $mul.ref(104, 1));
    goto corral_source_split_3732;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 840} init_completion(out_$p68);
    goto corral_source_split_3731;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref(out_$p51, $mul.ref(out_$i52, 720)), $mul.ref(224, 1));
    goto corral_source_split_3730;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 839} __raw_spin_lock_init(out_$p67, .str.60, in_$p3);
    goto corral_source_split_3729;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    out_$p67 := $bitcast.ref.ref(out_$p66);
    goto corral_source_split_3728;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref($add.ref(out_$p51, $mul.ref(out_$i52, 720)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_3727;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 838} out_vslice_dummy_var_54 := spinlock_check(out_$p63);
    goto corral_source_split_3726;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref(out_$p51, $mul.ref(out_$i52, 720)), $mul.ref(8, 1));
    goto corral_source_split_3725;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 837} atomic_set(out_$p62, 0);
    goto corral_source_split_3724;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref(out_$p51, $mul.ref(out_$i52, 720)), $mul.ref(204, 1));
    goto corral_source_split_3723;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 836} atomic_set(out_$p61, 0);
    goto corral_source_split_3722;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(out_$p51, $mul.ref(out_$i52, 720)), $mul.ref(100, 1));
    goto corral_source_split_3721;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} atomic_set(out_$p60, 0);
    goto corral_source_split_3720;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(out_$p51, $mul.ref(out_$i52, 720)), $mul.ref(336, 1));
    goto corral_source_split_3719;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 834} atomic_set(out_$p59, 0);
    goto corral_source_split_3718;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref(out_$p51, $mul.ref(out_$i52, 720)), $mul.ref(328, 1));
    goto corral_source_split_3717;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} atomic_set(out_$p58, 0);
    goto corral_source_split_3716;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(out_$p51, $mul.ref(out_$i52, 720)), $mul.ref(320, 1));
    goto corral_source_split_3715;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p57, 65536);
    goto corral_source_split_3714;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref(out_$p51, $mul.ref(out_$i52, 720)), $mul.ref(80, 1));
    goto corral_source_split_3713;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, out_$p56, out_$i55);
    goto corral_source_split_3712;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(out_$p51, $mul.ref(out_$i52, 720)), $mul.ref(92, 1));
    goto corral_source_split_3711;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    out_$i55 := $trunc.i32.i16(out_$i49);
    goto corral_source_split_3710;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, out_$p54, in_$i11);
    goto corral_source_split_3709;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(out_$p51, $mul.ref(out_$i52, 720)), $mul.ref(0, 1));
    goto corral_source_split_3708;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    goto corral_source_split_3707;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    out_$i52 := $sext.i32.i64(out_$i49);
    goto corral_source_split_3706;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    out_$p51 := $load.ref($M.1, out_$p50);
    goto corral_source_split_3705;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(in_$p0, $mul.ref(0, 872)), $mul.ref(376, 1));
    goto corral_source_split_3704;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb14_dummy:
    call {:si_unique_call 1} out_$p50, out_$p51, out_$i52, out_$p54, out_$i55, out_$p56, out_$p57, out_$p58, out_$p59, out_$p60, out_$p61, out_$p62, out_$p63, out_$p66, out_$p67, out_$p68, out_$p69, out_$p70, out_$p71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i49, out_vslice_dummy_var_54 := xpc_setup_ch_structures_loop_$bb12(in_$p0, in_$p3, in_$p4, in_$p5, in_$i11, in_$p45, out_$p50, out_$p51, out_$i52, out_$p54, out_$i55, out_$p56, out_$p57, out_$p58, out_$p59, out_$p60, out_$p61, out_$p62, out_$p63, out_$p66, out_$p67, out_$p68, out_$p69, out_$p70, out_$p71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i49, out_vslice_dummy_var_54);
    return;

  exit:
    return;
}



procedure xpc_setup_ch_structures_loop_$bb12(in_$p0: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$i11: i16, in_$p45: ref, in_$p50: ref, in_$p51: ref, in_$i52: i64, in_$p54: ref, in_$i55: i16, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$i72: i32, in_$i73: i8, in_$i74: i32, in_$i75: i1, in_$i49: i32, in_vslice_dummy_var_54: ref) returns (out_$p50: ref, out_$p51: ref, out_$i52: i64, out_$p54: ref, out_$i55: i16, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$p71: ref, out_$i72: i32, out_$i73: i8, out_$i74: i32, out_$i75: i1, out_$i49: i32, out_vslice_dummy_var_54: ref);
  modifies $M.1, $CurrAddr;



implementation xpc_channel_mgr_loop_$bb18(in_$p0: ref, in_$p1: ref, in_$p30: ref, in_$p31: ref, in_$p34: ref, in_$p35: ref, in_$i36: i64, in_$i37: i1, in_$p38: ref, in_$i39: i8, in_$i40: i32, in_$i41: i1, in_$p42: ref, in_$i43: i32, in_$i44: i1, in_$i45: i32, in_$i46: i1, in_$p47: ref, in_$i48: i32, in_$i49: i1, in_$i50: i32, in_$i51: i1) returns (out_$p34: ref, out_$p35: ref, out_$i36: i64, out_$i37: i1, out_$p38: ref, out_$i39: i8, out_$i40: i32, out_$i41: i1, out_$p42: ref, out_$i43: i32, out_$i44: i1, out_$i45: i32, out_$i46: i1, out_$p47: ref, out_$i48: i32, out_$i49: i1, out_$i50: i32, out_$i51: i1)
{

  entry:
    out_$p34, out_$p35, out_$i36, out_$i37, out_$p38, out_$i39, out_$i40, out_$i41, out_$p42, out_$i43, out_$i44, out_$i45, out_$i46, out_$p47, out_$i48, out_$i49, out_$i50, out_$i51 := in_$p34, in_$p35, in_$i36, in_$i37, in_$p38, in_$i39, in_$i40, in_$i41, in_$p42, in_$i43, in_$i44, in_$i45, in_$i46, in_$p47, in_$i48, in_$i49, in_$i50, in_$i51;
    goto $bb18, exit;

  $bb18:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(in_$p0, $mul.ref(0, 872)), $mul.ref(384, 1));
    goto corral_source_split_3876;

  $bb37:
    assume {:verifier.code 0} true;
    assume !(out_$i51 == 1);
    goto $bb37_dummy;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    out_$i51 := $sgt.i32(out_$i50, 0);
    goto corral_source_split_3914;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 880} out_$i50 := atomic_read(in_$p31);
    call {:si_unique_call 881} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i50);
    goto corral_source_split_3913;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 879} prepare_to_wait(in_$p30, in_$p1, 1);
    goto corral_source_split_3912;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 878} schedule();
    goto corral_source_split_3910;

  $bb33:
    assume out_$i49 == 1;
    goto corral_source_split_3909;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    out_$i49 := $eq.i32(out_$i48, 0);
    goto corral_source_split_3907;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 876} out_$i48 := signal_pending(out_$p47);
    call {:si_unique_call 877} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i48);
    goto corral_source_split_3906;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 875} out_$p47 := get_current();
    goto corral_source_split_3905;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb24:
    assume !(out_$i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb26:
    assume !(out_$i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb28:
    assume !(out_$i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    out_$i46 := $ne.i32(out_$i45, 0);
    goto corral_source_split_3901;

  SeqInstr_375:
    call {:si_unique_call 874} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i45);
    goto corral_source_split_3900;

  SeqInstr_374:
    assume assertsPassed;
    goto SeqInstr_375;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 873} out_$i45 := xpc_partition_disengaged(in_$p0);
    goto SeqInstr_374;

  $bb25:
    assume out_$i44 == 1;
    goto corral_source_split_3899;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    out_$i44 := $eq.i32(out_$i43, 0);
    goto corral_source_split_3897;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 871} out_$i43 := atomic_read(out_$p42);
    call {:si_unique_call 872} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i43);
    goto corral_source_split_3896;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(in_$p0, $mul.ref(0, 872)), $mul.ref(368, 1));
    goto corral_source_split_3895;

  $bb23:
    assume out_$i41 == 1;
    goto corral_source_split_3894;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    out_$i41 := $eq.i32(out_$i40, 4);
    goto corral_source_split_3887;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    out_$i40 := $zext.i8.i32(out_$i39);
    goto corral_source_split_3886;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    out_$i39 := $load.i8($M.1, out_$p38);
    goto corral_source_split_3885;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(in_$p0, $mul.ref(0, 872)), $mul.ref(112, 1));
    goto corral_source_split_3884;

  $bb20:
    assume !(out_$i37 == 1);
    goto corral_source_split_3883;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    out_$i37 := $ne.i64(out_$i36, 0);
    goto corral_source_split_3879;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    out_$i36 := $load.i64($M.1, out_$p35);
    goto corral_source_split_3878;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    out_$p35 := $bitcast.ref.ref(out_$p34);
    goto corral_source_split_3877;

  $bb37_dummy:
    call {:si_unique_call 1} out_$p34, out_$p35, out_$i36, out_$i37, out_$p38, out_$i39, out_$i40, out_$i41, out_$p42, out_$i43, out_$i44, out_$i45, out_$i46, out_$p47, out_$i48, out_$i49, out_$i50, out_$i51 := xpc_channel_mgr_loop_$bb18(in_$p0, in_$p1, in_$p30, in_$p31, out_$p34, out_$p35, out_$i36, out_$i37, out_$p38, out_$i39, out_$i40, out_$i41, out_$p42, out_$i43, out_$i44, out_$i45, out_$i46, out_$p47, out_$i48, out_$i49, out_$i50, out_$i51);
    return;

  exit:
    return;
}



procedure xpc_channel_mgr_loop_$bb18(in_$p0: ref, in_$p1: ref, in_$p30: ref, in_$p31: ref, in_$p34: ref, in_$p35: ref, in_$i36: i64, in_$i37: i1, in_$p38: ref, in_$i39: i8, in_$i40: i32, in_$i41: i1, in_$p42: ref, in_$i43: i32, in_$i44: i1, in_$i45: i32, in_$i46: i1, in_$p47: ref, in_$i48: i32, in_$i49: i1, in_$i50: i32, in_$i51: i1) returns (out_$p34: ref, out_$p35: ref, out_$i36: i64, out_$i37: i1, out_$p38: ref, out_$i39: i8, out_$i40: i32, out_$i41: i1, out_$p42: ref, out_$i43: i32, out_$i44: i1, out_$i45: i32, out_$i46: i1, out_$p47: ref, out_$i48: i32, out_$i49: i1, out_$i50: i32, out_$i51: i1);
  modifies $M.1, $M.2, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.23, $CurrAddr, $M.28, $M.0, assertsPassed;



implementation xpc_channel_mgr_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$p7: ref, in_$i8: i64, in_$i9: i1, in_$p10: ref, in_$i11: i8, in_$i12: i32, in_$i13: i1, in_$p14: ref, in_$i15: i32, in_$i16: i1, in_$i17: i32, in_$i18: i1, in_$p19: ref, in_$p20: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p26: ref, in_$p27: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$i32: i32, in_$i33: i1, in_$p34: ref, in_$p35: ref, in_$i36: i64, in_$i37: i1, in_$p38: ref, in_$i39: i8, in_$i40: i32, in_$i41: i1, in_$p42: ref, in_$i43: i32, in_$i44: i1, in_$i45: i32, in_$i46: i1, in_$p47: ref, in_$i48: i32, in_$i49: i1, in_$i50: i32, in_$i51: i1, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$i55: i8, in_$i56: i32, in_$i57: i1, in_$p58: ref, in_$i59: i32, in_$i60: i1, in_$i61: i32, in_$i62: i1) returns (out_$p2: ref, out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$p7: ref, out_$i8: i64, out_$i9: i1, out_$p10: ref, out_$i11: i8, out_$i12: i32, out_$i13: i1, out_$p14: ref, out_$i15: i32, out_$i16: i1, out_$i17: i32, out_$i18: i1, out_$p19: ref, out_$p20: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$p26: ref, out_$p27: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$i32: i32, out_$i33: i1, out_$p34: ref, out_$p35: ref, out_$i36: i64, out_$i37: i1, out_$p38: ref, out_$i39: i8, out_$i40: i32, out_$i41: i1, out_$p42: ref, out_$i43: i32, out_$i44: i1, out_$i45: i32, out_$i46: i1, out_$p47: ref, out_$i48: i32, out_$i49: i1, out_$i50: i32, out_$i51: i1, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$i55: i8, out_$i56: i32, out_$i57: i1, out_$p58: ref, out_$i59: i32, out_$i60: i1, out_$i61: i32, out_$i62: i1)
{

  entry:
    out_$p2, out_$p3, out_$i4, out_$i5, out_$p6, out_$p7, out_$i8, out_$i9, out_$p10, out_$i11, out_$i12, out_$i13, out_$p14, out_$i15, out_$i16, out_$i17, out_$i18, out_$p19, out_$p20, out_$p22, out_$p23, out_$p24, out_$p26, out_$p27, out_$p29, out_$p30, out_$p31, out_$i32, out_$i33, out_$p34, out_$p35, out_$i36, out_$i37, out_$p38, out_$i39, out_$i40, out_$i41, out_$p42, out_$i43, out_$i44, out_$i45, out_$i46, out_$p47, out_$i48, out_$i49, out_$i50, out_$i51, out_$p52, out_$p53, out_$p54, out_$i55, out_$i56, out_$i57, out_$p58, out_$i59, out_$i60, out_$i61, out_$i62 := in_$p2, in_$p3, in_$i4, in_$i5, in_$p6, in_$p7, in_$i8, in_$i9, in_$p10, in_$i11, in_$i12, in_$i13, in_$p14, in_$i15, in_$i16, in_$i17, in_$i18, in_$p19, in_$p20, in_$p22, in_$p23, in_$p24, in_$p26, in_$p27, in_$p29, in_$p30, in_$p31, in_$i32, in_$i33, in_$p34, in_$p35, in_$i36, in_$i37, in_$p38, in_$i39, in_$i40, in_$i41, in_$p42, in_$i43, in_$i44, in_$i45, in_$i46, in_$p47, in_$i48, in_$i49, in_$i50, in_$i51, in_$p52, in_$p53, in_$p54, in_$i55, in_$i56, in_$i57, in_$p58, in_$i59, in_$i60, in_$i61, in_$i62;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(in_$p0, $mul.ref(0, 872)), $mul.ref(112, 1));
    goto corral_source_split_3815;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    goto corral_source_split_3917_dummy;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 882} atomic_set(out_$p53, 1);
    goto corral_source_split_3917;

  $bb41:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(in_$p0, $mul.ref(0, 872)), $mul.ref(480, 1));
    goto corral_source_split_3916;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb14:
    assume !(out_$i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    goto $bb38;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 870} finish_wait(out_$p52, in_$p1);
    goto corral_source_split_3892;

  $bb22:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(in_$p0, $mul.ref(0, 872)), $mul.ref(488, 1));
    goto corral_source_split_3891;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb27:
    assume out_$i46 == 1;
    goto corral_source_split_3903;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    out_$i46 := $ne.i32(out_$i45, 0);
    goto corral_source_split_3901;

  SeqInstr_375:
    call {:si_unique_call 874} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i45);
    goto corral_source_split_3900;

  SeqInstr_374:
    assume assertsPassed;
    goto SeqInstr_375;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 873} out_$i45 := xpc_partition_disengaged(in_$p0);
    goto SeqInstr_374;

  $bb25:
    assume out_$i44 == 1;
    goto corral_source_split_3899;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    out_$i44 := $eq.i32(out_$i43, 0);
    goto corral_source_split_3897;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 871} out_$i43 := atomic_read(out_$p42);
    call {:si_unique_call 872} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i43);
    goto corral_source_split_3896;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(in_$p0, $mul.ref(0, 872)), $mul.ref(368, 1));
    goto corral_source_split_3895;

  $bb23:
    assume out_$i41 == 1;
    goto corral_source_split_3894;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    out_$i41 := $eq.i32(out_$i40, 4);
    goto corral_source_split_3887;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    out_$i40 := $zext.i8.i32(out_$i39);
    goto corral_source_split_3886;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    out_$i39 := $load.i8($M.1, out_$p38);
    goto corral_source_split_3885;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(in_$p0, $mul.ref(0, 872)), $mul.ref(112, 1));
    goto corral_source_split_3884;

  $bb20:
    assume !(out_$i37 == 1);
    goto corral_source_split_3883;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    out_$i37 := $ne.i64(out_$i36, 0);
    goto corral_source_split_3879;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    out_$i36 := $load.i64($M.1, out_$p35);
    goto corral_source_split_3878;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    out_$p35 := $bitcast.ref.ref(out_$p34);
    goto corral_source_split_3877;

  $bb18:
    call out_$p34, out_$p35, out_$i36, out_$i37, out_$p38, out_$i39, out_$i40, out_$i41, out_$p42, out_$i43, out_$i44, out_$i45, out_$i46, out_$p47, out_$i48, out_$i49, out_$i50, out_$i51 := xpc_channel_mgr_loop_$bb18(in_$p0, in_$p1, out_$p30, out_$p31, out_$p34, out_$p35, out_$i36, out_$i37, out_$p38, out_$i39, out_$i40, out_$i41, out_$p42, out_$i43, out_$i44, out_$i45, out_$i46, out_$p47, out_$i48, out_$i49, out_$i50, out_$i51);
    goto $bb18_last;

  $bb18_last:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(in_$p0, $mul.ref(0, 872)), $mul.ref(384, 1));
    goto corral_source_split_3876;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb37:
    assume {:verifier.code 0} true;
    assume !(out_$i51 == 1);
    assume false;
    return;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb37;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    out_$i51 := $sgt.i32(out_$i50, 0);
    goto corral_source_split_3914;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 880} out_$i50 := atomic_read(out_$p31);
    call {:si_unique_call 881} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i50);
    goto corral_source_split_3913;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 879} prepare_to_wait(out_$p30, in_$p1, 1);
    goto corral_source_split_3912;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 878} schedule();
    goto corral_source_split_3910;

  $bb33:
    assume out_$i49 == 1;
    goto corral_source_split_3909;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    out_$i49 := $eq.i32(out_$i48, 0);
    goto corral_source_split_3907;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 876} out_$i48 := signal_pending(out_$p47);
    call {:si_unique_call 877} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i48);
    goto corral_source_split_3906;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 875} out_$p47 := get_current();
    goto corral_source_split_3905;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb24:
    assume !(out_$i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb26:
    assume !(out_$i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb28:
    assume !(out_$i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb17:
    assume !(out_$i33 == 1);
    goto corral_source_split_3874;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb17;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    out_$i33 := $sgt.i32(out_$i32, 0);
    goto corral_source_split_3864;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 866} out_$i32 := atomic_read(out_$p31);
    call {:si_unique_call 867} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i32);
    goto corral_source_split_3863;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(in_$p0, $mul.ref(0, 872)), $mul.ref(480, 1));
    goto corral_source_split_3862;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 865} prepare_to_wait(out_$p30, in_$p1, 1);
    goto corral_source_split_3861;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(in_$p0, $mul.ref(0, 872)), $mul.ref(488, 1));
    goto corral_source_split_3860;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    $M.22 := $store.ref($M.22, out_$p29, out_$p27);
    goto corral_source_split_3859;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(8, 1));
    goto corral_source_split_3858;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3857;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    $M.21 := $store.ref($M.21, out_$p26, out_$p24);
    goto corral_source_split_3856;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_3855;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3854;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    $M.20 := $store.ref($M.20, out_$p23, autoremove_wake_function);
    goto corral_source_split_3853;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3852;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    $M.19 := $store.ref($M.19, out_$p22, out_$p19);
    goto corral_source_split_3851;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3850;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    goto corral_source_split_3849;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    $M.18 := $store.i32($M.18, out_$p20, 0);
    goto corral_source_split_3848;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3847;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 864} out_$p19 := get_current();
    goto corral_source_split_3846;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb8:
    assume out_$i13 == 1;
    goto corral_source_split_3839;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    out_$i13 := $ne.i32(out_$i12, 4);
    goto corral_source_split_3837;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    out_$i12 := $zext.i8.i32(out_$i11);
    goto corral_source_split_3836;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    out_$i11 := $load.i8($M.1, out_$p10);
    goto corral_source_split_3835;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(in_$p0, $mul.ref(0, 872)), $mul.ref(112, 1));
    goto corral_source_split_3834;

  $bb6:
    assume out_$i9 == 1;
    goto corral_source_split_3833;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    out_$i9 := $eq.i64(out_$i8, 0);
    goto corral_source_split_3831;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    out_$i8 := $load.i64($M.1, out_$p7);
    goto corral_source_split_3830;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    out_$p7 := $bitcast.ref.ref(out_$p6);
    goto corral_source_split_3829;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    out_$p6 := $add.ref($add.ref(in_$p0, $mul.ref(0, 872)), $mul.ref(384, 1));
    goto corral_source_split_3828;

  $bb3:
    assume out_$i5 == 1;
    goto corral_source_split_3827;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    out_$i5 := $sle.i32(out_$i4, 0);
    goto corral_source_split_3825;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 860} out_$i4 := atomic_read(out_$p3);
    call {:si_unique_call 861} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i4);
    goto corral_source_split_3824;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    out_$p3 := $add.ref($add.ref(in_$p0, $mul.ref(0, 872)), $mul.ref(480, 1));
    goto corral_source_split_3823;

  SeqInstr_369:
    goto corral_source_split_3822;

  SeqInstr_368:
    assume assertsPassed;
    goto SeqInstr_369;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 859} atomic_dec(out_$p2);
    goto SeqInstr_368;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    out_$p2 := $add.ref($add.ref(in_$p0, $mul.ref(0, 872)), $mul.ref(480, 1));
    goto corral_source_split_3821;

  SeqInstr_366:
    goto corral_source_split_3820;

  SeqInstr_365:
    assume assertsPassed;
    goto SeqInstr_366;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 858} xpc_process_sent_chctl_flags(in_$p0);
    goto SeqInstr_365;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    goto $bb2;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    goto $bb2;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb42:
    assume out_$i57 == 1;
    goto corral_source_split_3919;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    out_$i57 := $ne.i32(out_$i56, 4);
    goto corral_source_split_3818;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    out_$i56 := $zext.i8.i32(out_$i55);
    goto corral_source_split_3817;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    out_$i55 := $load.i8($M.1, out_$p54);
    goto corral_source_split_3816;

  $bb44:
    assume out_$i60 == 1;
    goto corral_source_split_3926;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    out_$i60 := $sgt.i32(out_$i59, 0);
    goto corral_source_split_3924;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 883} out_$i59 := atomic_read(out_$p58);
    call {:si_unique_call 884} {:cexpr "tmp___8"} boogie_si_record_i32(out_$i59);
    goto corral_source_split_3923;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(in_$p0, $mul.ref(0, 872)), $mul.ref(368, 1));
    goto corral_source_split_3922;

  $bb43:
    assume !(out_$i57 == 1);
    goto corral_source_split_3921;

  $bb46:
    assume out_$i62 == 1;
    goto corral_source_split_3932;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    out_$i62 := $eq.i32(out_$i61, 0);
    goto corral_source_split_3930;

  SeqInstr_378:
    call {:si_unique_call 886} {:cexpr "tmp___9"} boogie_si_record_i32(out_$i61);
    goto corral_source_split_3929;

  SeqInstr_377:
    assume assertsPassed;
    goto SeqInstr_378;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 885} out_$i61 := xpc_partition_disengaged(in_$p0);
    goto SeqInstr_377;

  $bb45:
    assume !(out_$i60 == 1);
    goto corral_source_split_3928;

  $bb11:
    assume out_$i16 == 1;
    goto corral_source_split_3866;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    out_$i16 := $ne.i32(out_$i15, 0);
    goto corral_source_split_3844;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 862} out_$i15 := atomic_read(out_$p14);
    call {:si_unique_call 863} {:cexpr "tmp___6"} boogie_si_record_i32(out_$i15);
    goto corral_source_split_3843;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(in_$p0, $mul.ref(0, 872)), $mul.ref(368, 1));
    goto corral_source_split_3842;

  $bb9:
    assume !(out_$i13 == 1);
    goto corral_source_split_3841;

  $bb13:
    assume out_$i18 == 1;
    goto corral_source_split_3872;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    out_$i18 := $eq.i32(out_$i17, 0);
    goto corral_source_split_3870;

  SeqInstr_372:
    call {:si_unique_call 869} {:cexpr "tmp___7"} boogie_si_record_i32(out_$i17);
    goto corral_source_split_3869;

  SeqInstr_371:
    assume assertsPassed;
    goto SeqInstr_372;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 868} out_$i17 := xpc_partition_disengaged(in_$p0);
    goto SeqInstr_371;

  $bb12:
    assume !(out_$i16 == 1);
    goto corral_source_split_3868;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb15:
    assume {:verifier.code 0} true;
    assume out_$i33 == 1;
    goto $bb16;

  $bb19:
    assume out_$i37 == 1;
    goto corral_source_split_3881;

  $bb21:
    assume out_$i51 == 1;
    goto corral_source_split_3889;

  $bb34:
    assume !(out_$i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb4:
    assume {:verifier.code 0} true;
    assume !(out_$i5 == 1);
    goto $bb5;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(out_$i9 == 1);
    goto $bb5;

  corral_source_split_3917_dummy:
    call {:si_unique_call 1} out_$p2, out_$p3, out_$i4, out_$i5, out_$p6, out_$p7, out_$i8, out_$i9, out_$p10, out_$i11, out_$i12, out_$i13, out_$p14, out_$i15, out_$i16, out_$i17, out_$i18, out_$p19, out_$p20, out_$p22, out_$p23, out_$p24, out_$p26, out_$p27, out_$p29, out_$p30, out_$p31, out_$i32, out_$i33, out_$p34, out_$p35, out_$i36, out_$i37, out_$p38, out_$i39, out_$i40, out_$i41, out_$p42, out_$i43, out_$i44, out_$i45, out_$i46, out_$p47, out_$i48, out_$i49, out_$i50, out_$i51, out_$p52, out_$p53, out_$p54, out_$i55, out_$i56, out_$i57, out_$p58, out_$i59, out_$i60, out_$i61, out_$i62 := xpc_channel_mgr_loop_$bb1(in_$p0, in_$p1, out_$p2, out_$p3, out_$i4, out_$i5, out_$p6, out_$p7, out_$i8, out_$i9, out_$p10, out_$i11, out_$i12, out_$i13, out_$p14, out_$i15, out_$i16, out_$i17, out_$i18, out_$p19, out_$p20, out_$p22, out_$p23, out_$p24, out_$p26, out_$p27, out_$p29, out_$p30, out_$p31, out_$i32, out_$i33, out_$p34, out_$p35, out_$i36, out_$i37, out_$p38, out_$i39, out_$i40, out_$i41, out_$p42, out_$i43, out_$i44, out_$i45, out_$i46, out_$p47, out_$i48, out_$i49, out_$i50, out_$i51, out_$p52, out_$p53, out_$p54, out_$i55, out_$i56, out_$i57, out_$p58, out_$i59, out_$i60, out_$i61, out_$i62);
    return;

  exit:
    return;
}



procedure xpc_channel_mgr_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$p7: ref, in_$i8: i64, in_$i9: i1, in_$p10: ref, in_$i11: i8, in_$i12: i32, in_$i13: i1, in_$p14: ref, in_$i15: i32, in_$i16: i1, in_$i17: i32, in_$i18: i1, in_$p19: ref, in_$p20: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p26: ref, in_$p27: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$i32: i32, in_$i33: i1, in_$p34: ref, in_$p35: ref, in_$i36: i64, in_$i37: i1, in_$p38: ref, in_$i39: i8, in_$i40: i32, in_$i41: i1, in_$p42: ref, in_$i43: i32, in_$i44: i1, in_$i45: i32, in_$i46: i1, in_$p47: ref, in_$i48: i32, in_$i49: i1, in_$i50: i32, in_$i51: i1, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$i55: i8, in_$i56: i32, in_$i57: i1, in_$p58: ref, in_$i59: i32, in_$i60: i1, in_$i61: i32, in_$i62: i1) returns (out_$p2: ref, out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$p7: ref, out_$i8: i64, out_$i9: i1, out_$p10: ref, out_$i11: i8, out_$i12: i32, out_$i13: i1, out_$p14: ref, out_$i15: i32, out_$i16: i1, out_$i17: i32, out_$i18: i1, out_$p19: ref, out_$p20: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$p26: ref, out_$p27: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$i32: i32, out_$i33: i1, out_$p34: ref, out_$p35: ref, out_$i36: i64, out_$i37: i1, out_$p38: ref, out_$i39: i8, out_$i40: i32, out_$i41: i1, out_$p42: ref, out_$i43: i32, out_$i44: i1, out_$i45: i32, out_$i46: i1, out_$p47: ref, out_$i48: i32, out_$i49: i1, out_$i50: i32, out_$i51: i1, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$i55: i8, out_$i56: i32, out_$i57: i1, out_$p58: ref, out_$i59: i32, out_$i60: i1, out_$i61: i32, out_$i62: i1);
  modifies $M.1, $M.2, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.23, $CurrAddr, $M.28, $M.0, assertsPassed, $M.22, $M.21, $M.20, $M.19, $M.18, $M.31, $M.24, $M.40, $M.32, $M.41, $M.42, $M.43, $M.44, $M.45;



implementation xpc_teardown_ch_structures_loop_$bb8(in_$p1: ref, in_$p17: ref, in_$p18: ref, in_$i21: i32, in_$i22: i1) returns (out_$i21: i32, out_$i22: i1)
{

  entry:
    out_$i21, out_$i22 := in_$i21, in_$i22;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb12:
    assume {:verifier.code 0} true;
    assume !(out_$i22 == 1);
    goto $bb12_dummy;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    out_$i22 := $eq.i32(out_$i21, 0);
    goto corral_source_split_3990;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 900} out_$i21 := atomic_read(in_$p18);
    call {:si_unique_call 901} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i21);
    goto corral_source_split_3989;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 899} prepare_to_wait(in_$p17, in_$p1, 2);
    goto corral_source_split_3988;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 898} schedule();
    goto corral_source_split_3987;

  $bb12_dummy:
    call {:si_unique_call 1} out_$i21, out_$i22 := xpc_teardown_ch_structures_loop_$bb8(in_$p1, in_$p17, in_$p18, out_$i21, out_$i22);
    return;

  exit:
    return;
}



procedure xpc_teardown_ch_structures_loop_$bb8(in_$p1: ref, in_$p17: ref, in_$p18: ref, in_$i21: i32, in_$i22: i1) returns (out_$i21: i32, out_$i22: i1);



implementation xpc_process_sent_chctl_flags_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p6: ref, in_$p11: ref, in_$p12: ref, in_$i13: i64, in_$p14: ref, in_$i15: i64, in_$p16: ref, in_$p17: ref, in_$i18: i8, in_$i19: i32, in_$i20: i32, in_$i21: i1, in_$i22: i64, in_$p23: ref, in_$p24: ref, in_$i25: i8, in_$i26: i32, in_$i27: i8, in_$p28: ref, in_$i29: i32, in_$i30: i32, in_$i31: i1, in_$p32: ref, in_$p33: ref, in_$i34: i64, in_$p35: ref, in_$i36: i64, in_$p37: ref, in_$i38: i8, in_$i39: i32, in_$i40: i1, in_$i41: i32, in_$i42: i1, in_$i43: i32, in_$i44: i1, in_$i46: i64, in_$p47: ref, in_$p48: ref, in_$i49: i8, in_$i50: i32, in_$i51: i32, in_$i52: i1, in_$p53: ref, in_$i54: i32, in_$i55: i8, in_$i56: i32, in_$i57: i1, in_$i10: i32, in_vslice_dummy_var_57: i32) returns (out_$p11: ref, out_$p12: ref, out_$i13: i64, out_$p14: ref, out_$i15: i64, out_$p16: ref, out_$p17: ref, out_$i18: i8, out_$i19: i32, out_$i20: i32, out_$i21: i1, out_$i22: i64, out_$p23: ref, out_$p24: ref, out_$i25: i8, out_$i26: i32, out_$i27: i8, out_$p28: ref, out_$i29: i32, out_$i30: i32, out_$i31: i1, out_$p32: ref, out_$p33: ref, out_$i34: i64, out_$p35: ref, out_$i36: i64, out_$p37: ref, out_$i38: i8, out_$i39: i32, out_$i40: i1, out_$i41: i32, out_$i42: i1, out_$i43: i32, out_$i44: i1, out_$i46: i64, out_$p47: ref, out_$p48: ref, out_$i49: i8, out_$i50: i32, out_$i51: i32, out_$i52: i1, out_$p53: ref, out_$i54: i32, out_$i55: i8, out_$i56: i32, out_$i57: i1, out_$i10: i32, out_vslice_dummy_var_57: i32)
{

  entry:
    out_$p11, out_$p12, out_$i13, out_$p14, out_$i15, out_$p16, out_$p17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$p23, out_$p24, out_$i25, out_$i26, out_$i27, out_$p28, out_$i29, out_$i30, out_$i31, out_$p32, out_$p33, out_$i34, out_$p35, out_$i36, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i10, out_vslice_dummy_var_57 := in_$p11, in_$p12, in_$i13, in_$p14, in_$i15, in_$p16, in_$p17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$p23, in_$p24, in_$i25, in_$i26, in_$i27, in_$p28, in_$i29, in_$i30, in_$i31, in_$p32, in_$p33, in_$i34, in_$p35, in_$i36, in_$p37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i46, in_$p47, in_$p48, in_$i49, in_$i50, in_$i51, in_$i52, in_$p53, in_$i54, in_$i55, in_$i56, in_$i57, in_$i10, in_vslice_dummy_var_57;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_4050;

  $bb25:
    assume out_$i57 == 1;
    assume {:verifier.code 0} true;
    out_$i10 := out_$i54;
    goto $bb25_dummy;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    out_$i57 := $sgt.i32(out_$i56, out_$i54);
    goto corral_source_split_4091;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    out_$i56 := $zext.i8.i32(out_$i55);
    goto corral_source_split_4090;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    out_$i55 := $load.i8($M.1, in_$p6);
    goto corral_source_split_4089;

  $bb11:
    assume {:verifier.code 0} true;
    out_$i54 := $add.i32(out_$i10, 1);
    call {:si_unique_call 920} {:cexpr "ch_number"} boogie_si_record_i32(out_$i54);
    goto corral_source_split_4088;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 919} spin_unlock_irqrestore(out_$p35, out_$i36);
    goto corral_source_split_4086;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    out_$i36 := $load.i64($M.1, in_$p1);
    goto corral_source_split_4085;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(out_$p12, $mul.ref(out_$i13, 720)), $mul.ref(8, 1));
    goto corral_source_split_4084;

  SeqInstr_387:
    goto corral_source_split_4083;

  SeqInstr_386:
    assume assertsPassed;
    goto SeqInstr_387;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 918} xpc_process_disconnect(out_$p14, in_$p1);
    goto SeqInstr_386;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, in_$p1, out_$i34);
    goto corral_source_split_4082;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 917} out_$i34 := _raw_spin_lock_irqsave(out_$p33);
    goto corral_source_split_4081;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 916} out_$p33 := spinlock_check(out_$p32);
    goto corral_source_split_4080;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(out_$p12, $mul.ref(out_$i13, 720)), $mul.ref(8, 1));
    goto corral_source_split_4079;

  $bb9:
    assume out_$i31 == 1;
    goto corral_source_split_4078;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    out_$i31 := $ne.i32(out_$i30, 0);
    goto corral_source_split_4076;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    out_$i30 := $and.i32(out_$i29, 131072);
    goto corral_source_split_4075;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    out_$i29 := $load.i32($M.1, out_$p28);
    call {:si_unique_call 915} {:cexpr "ch_flags"} boogie_si_record_i32(out_$i29);
    goto corral_source_split_4074;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(out_$p12, $mul.ref(out_$i13, 720)), $mul.ref(80, 1));
    goto corral_source_split_4073;

  $bb7:
    assume !(out_$i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_384:
    goto corral_source_split_4071;

  SeqInstr_383:
    assume assertsPassed;
    goto SeqInstr_384;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 914} xpc_process_openclose_chctl_flags(in_$p0, out_$i10, out_$i27);
    goto SeqInstr_383;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    out_$i27 := $trunc.i32.i8(out_$i26);
    goto corral_source_split_4070;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    out_$i26 := $zext.i8.i32(out_$i25);
    goto corral_source_split_4069;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i8($M.31, out_$p24);
    goto corral_source_split_4068;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p23, $mul.ref(0, 2)), $mul.ref(out_$i22, 1));
    goto corral_source_split_4067;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    out_$p23 := $bitcast.ref.ref(in_$p2);
    goto corral_source_split_4066;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    out_$i22 := $sext.i32.i64(out_$i10);
    goto corral_source_split_4065;

  $bb6:
    assume out_$i21 == 1;
    goto corral_source_split_4064;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    out_$i21 := $ne.i32(out_$i20, 0);
    goto corral_source_split_4062;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    out_$i20 := $and.i32(out_$i19, 31);
    goto corral_source_split_4061;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    out_$i19 := $zext.i8.i32(out_$i18);
    goto corral_source_split_4060;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    out_$i18 := $load.i8($M.31, out_$p17);
    goto corral_source_split_4059;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(out_$p16, $mul.ref(0, 2)), $mul.ref(out_$i15, 1));
    goto corral_source_split_4058;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    out_$p16 := $bitcast.ref.ref(in_$p2);
    goto corral_source_split_4057;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    out_$i15 := $sext.i32.i64(out_$i10);
    goto corral_source_split_4056;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref(out_$p12, $mul.ref(out_$i13, 720));
    goto corral_source_split_4055;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    out_$i13 := $sext.i32.i64(out_$i10);
    goto corral_source_split_4054;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    out_$p12 := $load.ref($M.1, out_$p11);
    goto corral_source_split_4053;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(in_$p0, $mul.ref(0, 872)), $mul.ref(376, 1));
    goto corral_source_split_4052;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb13:
    assume out_$i40 == 1;
    goto corral_source_split_4098;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    out_$i40 := $eq.i32(out_$i39, 4);
    goto corral_source_split_4096;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    out_$i39 := $zext.i8.i32(out_$i38);
    goto corral_source_split_4095;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    out_$i38 := $load.i8($M.1, out_$p37);
    goto corral_source_split_4094;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(in_$p0, $mul.ref(0, 872)), $mul.ref(112, 1));
    goto corral_source_split_4093;

  $bb10:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb19:
    assume !(out_$i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    goto $bb20;

  SeqInstr_390:
    goto corral_source_split_4108;

  SeqInstr_389:
    assume assertsPassed;
    goto SeqInstr_390;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 921} out_vslice_dummy_var_57 := xpc_connect_channel(out_$p14);
    goto SeqInstr_389;

  $bb18:
    assume out_$i44 == 1;
    goto corral_source_split_4107;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    out_$i44 := $eq.i32(out_$i43, 0);
    goto corral_source_split_4105;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    out_$i43 := $and.i32(out_$i29, 64);
    goto corral_source_split_4104;

  $bb16:
    assume out_$i42 == 1;
    goto corral_source_split_4103;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    out_$i42 := $eq.i32(out_$i41, 0);
    goto corral_source_split_4101;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i41 := $and.i32(out_$i29, 1024);
    goto corral_source_split_4100;

  $bb14:
    assume !(out_$i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb23:
    assume !(out_$i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    goto $bb24;

  SeqInstr_393:
    goto corral_source_split_4119;

  SeqInstr_392:
    assume assertsPassed;
    goto SeqInstr_393;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    out_$p53 := $load.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(216, 1)));
    call {:si_unique_call 922} devirtbounce.24(out_$p53, in_$p0, out_$i10);
    goto SeqInstr_392;

  $bb22:
    assume out_$i52 == 1;
    goto corral_source_split_4118;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    out_$i52 := $ne.i32(out_$i51, 0);
    goto corral_source_split_4116;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    out_$i51 := $and.i32(out_$i50, 32);
    goto corral_source_split_4115;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    out_$i50 := $zext.i8.i32(out_$i49);
    goto corral_source_split_4114;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    out_$i49 := $load.i8($M.31, out_$p48);
    goto corral_source_split_4113;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(out_$p47, $mul.ref(0, 2)), $mul.ref(out_$i46, 1));
    goto corral_source_split_4112;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    out_$p47 := $bitcast.ref.ref(in_$p2);
    goto corral_source_split_4111;

  $bb21:
    assume {:verifier.code 0} true;
    out_$i46 := $sext.i32.i64(out_$i10);
    goto corral_source_split_4110;

  $bb17:
    assume !(out_$i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb25_dummy:
    call {:si_unique_call 1} out_$p11, out_$p12, out_$i13, out_$p14, out_$i15, out_$p16, out_$p17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$p23, out_$p24, out_$i25, out_$i26, out_$i27, out_$p28, out_$i29, out_$i30, out_$i31, out_$p32, out_$p33, out_$i34, out_$p35, out_$i36, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i10, out_vslice_dummy_var_57 := xpc_process_sent_chctl_flags_loop_$bb4(in_$p0, in_$p1, in_$p2, in_$p6, out_$p11, out_$p12, out_$i13, out_$p14, out_$i15, out_$p16, out_$p17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$p23, out_$p24, out_$i25, out_$i26, out_$i27, out_$p28, out_$i29, out_$i30, out_$i31, out_$p32, out_$p33, out_$i34, out_$p35, out_$i36, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i10, out_vslice_dummy_var_57);
    return;

  exit:
    return;
}



procedure xpc_process_sent_chctl_flags_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p6: ref, in_$p11: ref, in_$p12: ref, in_$i13: i64, in_$p14: ref, in_$i15: i64, in_$p16: ref, in_$p17: ref, in_$i18: i8, in_$i19: i32, in_$i20: i32, in_$i21: i1, in_$i22: i64, in_$p23: ref, in_$p24: ref, in_$i25: i8, in_$i26: i32, in_$i27: i8, in_$p28: ref, in_$i29: i32, in_$i30: i32, in_$i31: i1, in_$p32: ref, in_$p33: ref, in_$i34: i64, in_$p35: ref, in_$i36: i64, in_$p37: ref, in_$i38: i8, in_$i39: i32, in_$i40: i1, in_$i41: i32, in_$i42: i1, in_$i43: i32, in_$i44: i1, in_$i46: i64, in_$p47: ref, in_$p48: ref, in_$i49: i8, in_$i50: i32, in_$i51: i32, in_$i52: i1, in_$p53: ref, in_$i54: i32, in_$i55: i8, in_$i56: i32, in_$i57: i1, in_$i10: i32, in_vslice_dummy_var_57: i32) returns (out_$p11: ref, out_$p12: ref, out_$i13: i64, out_$p14: ref, out_$i15: i64, out_$p16: ref, out_$p17: ref, out_$i18: i8, out_$i19: i32, out_$i20: i32, out_$i21: i1, out_$i22: i64, out_$p23: ref, out_$p24: ref, out_$i25: i8, out_$i26: i32, out_$i27: i8, out_$p28: ref, out_$i29: i32, out_$i30: i32, out_$i31: i1, out_$p32: ref, out_$p33: ref, out_$i34: i64, out_$p35: ref, out_$i36: i64, out_$p37: ref, out_$i38: i8, out_$i39: i32, out_$i40: i1, out_$i41: i32, out_$i42: i1, out_$i43: i32, out_$i44: i1, out_$i46: i64, out_$p47: ref, out_$p48: ref, out_$i49: i8, out_$i50: i32, out_$i51: i32, out_$i52: i1, out_$p53: ref, out_$i54: i32, out_$i55: i8, out_$i56: i32, out_$i57: i1, out_$i10: i32, out_vslice_dummy_var_57: i32);
  modifies $M.1, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.23, $CurrAddr, $M.28, assertsPassed, $M.0, $M.2, $M.24, $M.40, $M.18, $M.19, $M.20, $M.21, $M.22, $M.31, $M.41, $M.42, $M.43, $M.44, $M.45, $M.32;



implementation xpc_process_openclose_chctl_flags_loop_$bb1(in_$p3: ref, in_$p4: ref, in_$p12: ref, in_$i13: i64, in_$p16: ref, in_$i17: i64, in_$p18: ref, in_$i22: i8, in_$p23: ref, in_$i24: i32, in_$i25: i32, in_$i26: i1, in_$p27: ref, in_$i28: i32, in_$i29: i32, in_$i30: i1, in_$i31: i8, in_$i40: i32, in_$i41: i32, in_$i42: i1, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$i50: i24, in_$i51: i24, in_$i52: i24, in_$p53: ref, in_$p54: ref, in_$i55: i8, in_$i56: i64, in_$i57: i64, in_$i58: i64, in_$i59: i1, in_$p60: ref, in_$p61: ref, in_$i62: i16, in_$i63: i32, in_$p64: ref, in_$i65: i16, in_$i66: i32, in_$p67: ref, in_$i68: i16, in_$i69: i32, in_$p71: ref, in_$i72: i32, in_$i73: i32, in_$i74: i1, in_$i76: i32, in_$i77: i32, in_$i78: i8, in_$p79: ref, in_$i80: i32, in_$i81: i32, in_$p82: ref, in_$i75: i8, in_$i43: i8, in_vslice_dummy_var_58: i32) returns (out_$i22: i8, out_$p23: ref, out_$i24: i32, out_$i25: i32, out_$i26: i1, out_$p27: ref, out_$i28: i32, out_$i29: i32, out_$i30: i1, out_$i31: i8, out_$i40: i32, out_$i41: i32, out_$i42: i1, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$i50: i24, out_$i51: i24, out_$i52: i24, out_$p53: ref, out_$p54: ref, out_$i55: i8, out_$i56: i64, out_$i57: i64, out_$i58: i64, out_$i59: i1, out_$p60: ref, out_$p61: ref, out_$i62: i16, out_$i63: i32, out_$p64: ref, out_$i65: i16, out_$i66: i32, out_$p67: ref, out_$i68: i16, out_$i69: i32, out_$p71: ref, out_$i72: i32, out_$i73: i32, out_$i74: i1, out_$i76: i32, out_$i77: i32, out_$i78: i8, out_$p79: ref, out_$i80: i32, out_$i81: i32, out_$p82: ref, out_$i75: i8, out_$i43: i8, out_vslice_dummy_var_58: i32)
{

  entry:
    out_$i22, out_$p23, out_$i24, out_$i25, out_$i26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i40, out_$i41, out_$i42, out_$p44, out_$p45, out_$p46, out_$p47, out_$p48, out_$p49, out_$i50, out_$i51, out_$i52, out_$p53, out_$p54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$p60, out_$p61, out_$i62, out_$i63, out_$p64, out_$i65, out_$i66, out_$p67, out_$i68, out_$i69, out_$p71, out_$i72, out_$i73, out_$i74, out_$i76, out_$i77, out_$i78, out_$p79, out_$i80, out_$i81, out_$p82, out_$i75, out_$i43, out_vslice_dummy_var_58 := in_$i22, in_$p23, in_$i24, in_$i25, in_$i26, in_$p27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i40, in_$i41, in_$i42, in_$p44, in_$p45, in_$p46, in_$p47, in_$p48, in_$p49, in_$i50, in_$i51, in_$i52, in_$p53, in_$p54, in_$i55, in_$i56, in_$i57, in_$i58, in_$i59, in_$p60, in_$p61, in_$i62, in_$i63, in_$p64, in_$i65, in_$i66, in_$p67, in_$i68, in_$i69, in_$p71, in_$i72, in_$i73, in_$i74, in_$i76, in_$i77, in_$i78, in_$p79, in_$i80, in_$i81, in_$p82, in_$i75, in_$i43, in_vslice_dummy_var_58;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_4141;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    out_$i22 := out_$i78;
    goto corral_source_split_4224_dummy;

  SeqInstr_396:
    goto corral_source_split_4224;

  SeqInstr_395:
    assume assertsPassed;
    goto SeqInstr_396;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 941} xpc_process_disconnect(in_$p18, in_$p3);
    goto SeqInstr_395;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p82, out_$i81);
    goto corral_source_split_4223;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    out_$p82 := $add.ref($add.ref(in_$p16, $mul.ref(in_$i17, 720)), $mul.ref(80, 1));
    goto corral_source_split_4222;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    out_$i81 := $or.i32(out_$i80, 4096);
    goto corral_source_split_4221;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    out_$i80 := $load.i32($M.1, out_$p79);
    goto corral_source_split_4220;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref(in_$p16, $mul.ref(in_$i17, 720)), $mul.ref(80, 1));
    goto corral_source_split_4219;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    out_$i78 := $trunc.i32.i8(out_$i77);
    call {:si_unique_call 940} {:cexpr "chctl_flags"} boogie_si_record_i8(out_$i78);
    goto corral_source_split_4218;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    out_$i77 := $and.i32(out_$i76, 253);
    goto corral_source_split_4217;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    out_$i76 := $zext.i8.i32(out_$i22);
    goto corral_source_split_4216;

  $bb14:
    assume out_$i74 == 1;
    goto corral_source_split_4215;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    out_$i75 := out_$i22;
    assume true;
    goto $bb14;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    out_$i74 := $ne.i32(out_$i73, 0);
    goto corral_source_split_4213;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    out_$i73 := $and.i32(out_$i72, 16384);
    goto corral_source_split_4212;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    out_$i72 := $load.i32($M.1, out_$p71);
    goto corral_source_split_4211;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref(in_$p16, $mul.ref(in_$i17, 720)), $mul.ref(80, 1));
    goto corral_source_split_4210;

  $bb12:
    assume !(out_$i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 939} out_vslice_dummy_var_58 := __dynamic_dev_dbg.ref.ref.ref.i32.i32.i32(in_$p4, out_$p60, .str.91, out_$i63, out_$i66, out_$i69);
    goto corral_source_split_4208;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    out_$i69 := $zext.i16.i32(out_$i68);
    goto corral_source_split_4207;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    out_$i68 := $load.i16($M.1, out_$p67);
    goto corral_source_split_4206;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref(in_$p16, $mul.ref(in_$i17, 720)), $mul.ref(92, 1));
    goto corral_source_split_4205;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    out_$i66 := $sext.i16.i32(out_$i65);
    goto corral_source_split_4204;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    out_$i65 := $load.i16($M.1, out_$p64);
    goto corral_source_split_4203;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(in_$p16, $mul.ref(in_$i17, 720)), $mul.ref(0, 1));
    goto corral_source_split_4202;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    out_$i63 := $zext.i16.i32(out_$i62);
    goto corral_source_split_4201;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    out_$i62 := $load.i16($M.1, out_$p61);
    goto corral_source_split_4200;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(in_$p12, $mul.ref(in_$i13, 16)), $mul.ref(0, 1));
    goto corral_source_split_4199;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    out_$p60 := $M.17;
    goto corral_source_split_4198;

  $bb11:
    assume out_$i59 == 1;
    goto corral_source_split_4197;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    out_$i59 := $ne.i64(out_$i58, 0);
    goto corral_source_split_4195;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 937} out_$i58 := ldv__builtin_expect(out_$i57, 0);
    call {:si_unique_call 938} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i58);
    goto corral_source_split_4194;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    out_$i57 := $and.i64(out_$i56, 1);
    goto corral_source_split_4193;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    out_$i56 := $zext.i8.i64(out_$i55);
    goto corral_source_split_4192;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    out_$i55 := $load.i8($M.13, out_$p54);
    goto corral_source_split_4191;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4190;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, out_$p53, 0);
    goto corral_source_split_4189;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4188;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, out_$p49, out_$i52);
    goto corral_source_split_4187;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    out_$i52 := $or.i24(out_$i51, 266);
    goto corral_source_split_4186;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    out_$i51 := $and.i24(out_$i50, $sub.i24(0, 262144));
    goto corral_source_split_4185;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    out_$i50 := $load.i24($M.12, out_$p49);
    goto corral_source_split_4184;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    out_$p49 := $bitcast.ref.ref(out_$p48);
    goto corral_source_split_4183;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4182;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, out_$p47, .str.91);
    goto corral_source_split_4181;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4180;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, out_$p46, .str.21);
    goto corral_source_split_4179;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4178;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, out_$p45, .str.90);
    goto corral_source_split_4177;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4176;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, out_$p44, .str);
    goto corral_source_split_4175;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4174;

  $bb9:
    assume out_$i42 == 1;
    goto corral_source_split_4173;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    out_$i43 := out_$i22;
    assume true;
    goto $bb9;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    out_$i42 := $ne.i32(out_$i41, 0);
    goto corral_source_split_4171;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    out_$i41 := $and.i32(out_$i40, 1);
    goto corral_source_split_4170;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i40 := $zext.i8.i32(out_$i22);
    goto corral_source_split_4169;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume {:verifier.code 0} true;
    assume !(out_$i26 == 1);
    goto $bb4;

  $bb6:
    assume {:verifier.code 0} true;
    assume !(out_$i30 == 1);
    goto $bb4;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    out_$i31 := out_$i22;
    assume true;
    goto $bb6;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    out_$i30 := $ne.i32(out_$i29, 0);
    goto corral_source_split_4151;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    out_$i29 := $and.i32(out_$i28, 1048576);
    goto corral_source_split_4150;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i32($M.1, out_$p27);
    goto corral_source_split_4149;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(in_$p16, $mul.ref(in_$i17, 720)), $mul.ref(80, 1));
    goto corral_source_split_4148;

  $bb2:
    assume out_$i26 == 1;
    goto corral_source_split_4147;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    out_$i26 := $ne.i32(out_$i25, 0);
    goto corral_source_split_4145;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    out_$i25 := $and.i32(out_$i24, 65536);
    goto corral_source_split_4144;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i32($M.1, out_$p23);
    goto corral_source_split_4143;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(in_$p16, $mul.ref(in_$i17, 720)), $mul.ref(80, 1));
    goto corral_source_split_4142;

  corral_source_split_4224_dummy:
    call {:si_unique_call 1} out_$i22, out_$p23, out_$i24, out_$i25, out_$i26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i40, out_$i41, out_$i42, out_$p44, out_$p45, out_$p46, out_$p47, out_$p48, out_$p49, out_$i50, out_$i51, out_$i52, out_$p53, out_$p54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$p60, out_$p61, out_$i62, out_$i63, out_$p64, out_$i65, out_$i66, out_$p67, out_$i68, out_$i69, out_$p71, out_$i72, out_$i73, out_$i74, out_$i76, out_$i77, out_$i78, out_$p79, out_$i80, out_$i81, out_$p82, out_$i75, out_$i43, out_vslice_dummy_var_58 := xpc_process_openclose_chctl_flags_loop_$bb1(in_$p3, in_$p4, in_$p12, in_$i13, in_$p16, in_$i17, in_$p18, out_$i22, out_$p23, out_$i24, out_$i25, out_$i26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i40, out_$i41, out_$i42, out_$p44, out_$p45, out_$p46, out_$p47, out_$p48, out_$p49, out_$i50, out_$i51, out_$i52, out_$p53, out_$p54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$p60, out_$p61, out_$i62, out_$i63, out_$p64, out_$i65, out_$i66, out_$p67, out_$i68, out_$i69, out_$p71, out_$i72, out_$i73, out_$i74, out_$i76, out_$i77, out_$i78, out_$p79, out_$i80, out_$i81, out_$p82, out_$i75, out_$i43, out_vslice_dummy_var_58);
    return;

  exit:
    return;
}



procedure xpc_process_openclose_chctl_flags_loop_$bb1(in_$p3: ref, in_$p4: ref, in_$p12: ref, in_$i13: i64, in_$p16: ref, in_$i17: i64, in_$p18: ref, in_$i22: i8, in_$p23: ref, in_$i24: i32, in_$i25: i32, in_$i26: i1, in_$p27: ref, in_$i28: i32, in_$i29: i32, in_$i30: i1, in_$i31: i8, in_$i40: i32, in_$i41: i32, in_$i42: i1, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$i50: i24, in_$i51: i24, in_$i52: i24, in_$p53: ref, in_$p54: ref, in_$i55: i8, in_$i56: i64, in_$i57: i64, in_$i58: i64, in_$i59: i1, in_$p60: ref, in_$p61: ref, in_$i62: i16, in_$i63: i32, in_$p64: ref, in_$i65: i16, in_$i66: i32, in_$p67: ref, in_$i68: i16, in_$i69: i32, in_$p71: ref, in_$i72: i32, in_$i73: i32, in_$i74: i1, in_$i76: i32, in_$i77: i32, in_$i78: i8, in_$p79: ref, in_$i80: i32, in_$i81: i32, in_$p82: ref, in_$i75: i8, in_$i43: i8, in_vslice_dummy_var_58: i32) returns (out_$i22: i8, out_$p23: ref, out_$i24: i32, out_$i25: i32, out_$i26: i1, out_$p27: ref, out_$i28: i32, out_$i29: i32, out_$i30: i1, out_$i31: i8, out_$i40: i32, out_$i41: i32, out_$i42: i1, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$i50: i24, out_$i51: i24, out_$i52: i24, out_$p53: ref, out_$p54: ref, out_$i55: i8, out_$i56: i64, out_$i57: i64, out_$i58: i64, out_$i59: i1, out_$p60: ref, out_$p61: ref, out_$i62: i16, out_$i63: i32, out_$p64: ref, out_$i65: i16, out_$i66: i32, out_$p67: ref, out_$i68: i16, out_$i69: i32, out_$p71: ref, out_$i72: i32, out_$i73: i32, out_$i74: i1, out_$i76: i32, out_$i77: i32, out_$i78: i8, out_$p79: ref, out_$i80: i32, out_$i81: i32, out_$p82: ref, out_$i75: i8, out_$i43: i8, out_vslice_dummy_var_58: i32);
  modifies $M.1, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.23, $CurrAddr, $M.28, assertsPassed, $M.0, $M.2;



implementation xpc_disconnect_wait_loop_$bb4(in_$i0: i32, in_$p5: ref, in_$i6: i64, in_$p7: ref, in_$i8: i32, in_$i9: i1, in_$p10: ref, in_$p11: ref, in_$i12: i64, in_$p14: ref, in_$i15: i32, in_$i16: i32, in_$i17: i1, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$p22: ref, in_$i23: i8, in_$i24: i32, in_$i25: i1, in_$p26: ref, in_$i27: i8, in_$i28: i32, in_$i29: i1, in_$p30: ref, in_$p31: ref, in_$i32: i16, in_$i33: i32, in_$i34: i64, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$i38: i8, in_$i39: i32, in_$p40: ref, in_$i41: i8, in_$i42: i32, in_$i43: i32, in_$i44: i8, in_$p45: ref, in_$i46: i16, in_$i47: i32, in_$i48: i64, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$i53: i32, in_$p54: ref, in_$i55: i32, in_$p56: ref, in_$i57: i32, in_$i58: i32, in_$p59: ref, in_$p60: ref, in_$i61: i1, in_$i62: i32, in_$i63: i32, in_$i64: i16, in_$i65: i32, in_$i66: i16, in_$i67: i32, in_$i68: i1, in_$i4: i16) returns (out_$p5: ref, out_$i6: i64, out_$p7: ref, out_$i8: i32, out_$i9: i1, out_$p10: ref, out_$p11: ref, out_$i12: i64, out_$p14: ref, out_$i15: i32, out_$i16: i32, out_$i17: i1, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$p22: ref, out_$i23: i8, out_$i24: i32, out_$i25: i1, out_$p26: ref, out_$i27: i8, out_$i28: i32, out_$i29: i1, out_$p30: ref, out_$p31: ref, out_$i32: i16, out_$i33: i32, out_$i34: i64, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$i38: i8, out_$i39: i32, out_$p40: ref, out_$i41: i8, out_$i42: i32, out_$i43: i32, out_$i44: i8, out_$p45: ref, out_$i46: i16, out_$i47: i32, out_$i48: i64, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$i53: i32, out_$p54: ref, out_$i55: i32, out_$p56: ref, out_$i57: i32, out_$i58: i32, out_$p59: ref, out_$p60: ref, out_$i61: i1, out_$i62: i32, out_$i63: i32, out_$i64: i16, out_$i65: i32, out_$i66: i16, out_$i67: i32, out_$i68: i1, out_$i4: i16)
{

  entry:
    out_$p5, out_$i6, out_$p7, out_$i8, out_$i9, out_$p10, out_$p11, out_$i12, out_$p14, out_$i15, out_$i16, out_$i17, out_$p18, out_$p19, out_$p20, out_$i21, out_$p22, out_$i23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29, out_$p30, out_$p31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p36, out_$p37, out_$i38, out_$i39, out_$p40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i46, out_$i47, out_$i48, out_$p49, out_$p50, out_$p51, out_$p52, out_$i53, out_$p54, out_$i55, out_$p56, out_$i57, out_$i58, out_$p59, out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i4 := in_$p5, in_$i6, in_$p7, in_$i8, in_$i9, in_$p10, in_$p11, in_$i12, in_$p14, in_$i15, in_$i16, in_$i17, in_$p18, in_$p19, in_$p20, in_$i21, in_$p22, in_$i23, in_$i24, in_$i25, in_$p26, in_$i27, in_$i28, in_$i29, in_$p30, in_$p31, in_$i32, in_$i33, in_$i34, in_$p35, in_$p36, in_$p37, in_$i38, in_$i39, in_$p40, in_$i41, in_$i42, in_$i43, in_$i44, in_$p45, in_$i46, in_$i47, in_$i48, in_$p49, in_$p50, in_$p51, in_$p52, in_$i53, in_$p54, in_$i55, in_$p56, in_$i57, in_$i58, in_$p59, in_$p60, in_$i61, in_$i62, in_$i63, in_$i64, in_$i65, in_$i66, in_$i67, in_$i68, in_$i4;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_5301;

  $bb22:
    assume out_$i68 == 1;
    assume {:verifier.code 0} true;
    out_$i4 := out_$i64;
    goto $bb22_dummy;

  corral_source_split_5317:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    out_$i68 := $slt.i32(out_$i65, out_$i67);
    goto corral_source_split_5317;

  corral_source_split_5315:
    assume {:verifier.code 0} true;
    out_$i67 := $sext.i16.i32(out_$i66);
    goto corral_source_split_5316;

  corral_source_split_5314:
    assume {:verifier.code 0} true;
    out_$i66 := $load.i16($M.1, xp_max_npartitions);
    goto corral_source_split_5315;

  corral_source_split_5313:
    assume {:verifier.code 0} true;
    out_$i65 := $sext.i16.i32(out_$i64);
    goto corral_source_split_5314;

  corral_source_split_5312:
    assume {:verifier.code 0} true;
    out_$i64 := $trunc.i32.i16(out_$i63);
    call {:si_unique_call 1064} {:cexpr "partid"} boogie_si_record_i16(out_$i64);
    goto corral_source_split_5313;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    out_$i63 := $add.i32(out_$i62, 1);
    goto corral_source_split_5312;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i62 := $sext.i16.i32(out_$i4);
    goto corral_source_split_5311;

  corral_source_split_5392:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_5329:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_5309:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb6:
    assume out_$i9 == 1;
    goto corral_source_split_5309;

  corral_source_split_5307:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_5306:
    assume {:verifier.code 0} true;
    out_$i9 := $eq.i32(out_$i8, 0);
    goto corral_source_split_5307;

  SeqInstr_516:
    call {:si_unique_call 1063} {:cexpr "tmp"} boogie_si_record_i32(out_$i8);
    goto corral_source_split_5306;

  SeqInstr_515:
    assume assertsPassed;
    goto SeqInstr_516;

  corral_source_split_5305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1062} out_$i8 := xpc_part_ref(out_$p7);
    goto SeqInstr_515;

  corral_source_split_5304:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref(out_$p5, $mul.ref(out_$i6, 872));
    goto corral_source_split_5305;

  corral_source_split_5303:
    assume {:verifier.code 0} true;
    out_$i6 := $sext.i16.i64(out_$i4);
    goto corral_source_split_5304;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p5 := $M.3;
    goto corral_source_split_5303;

  corral_source_split_5301:
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_519:
    goto corral_source_split_5329;

  SeqInstr_518:
    assume assertsPassed;
    goto SeqInstr_519;

  corral_source_split_5328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1065} xpc_part_deref(out_$p7);
    goto SeqInstr_518;

  $bb10:
    assume out_$i17 == 1;
    goto corral_source_split_5328;

  corral_source_split_5326:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_5325:
    assume {:verifier.code 0} true;
    out_$i17 := $eq.i32(out_$i16, 0);
    goto corral_source_split_5326;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    out_$i16 := $and.i32(out_$i15, 1048576);
    goto corral_source_split_5325;

  corral_source_split_5323:
    assume {:verifier.code 0} true;
    out_$i15 := $load.i32($M.1, out_$p14);
    goto corral_source_split_5324;

  corral_source_split_5322:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(out_$p11, $mul.ref(out_$i12, 720)), $mul.ref(80, 1));
    goto corral_source_split_5323;

  corral_source_split_5321:
    assume {:verifier.code 0} true;
    goto corral_source_split_5322;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    out_$i12 := $sext.i32.i64(in_$i0);
    goto corral_source_split_5321;

  corral_source_split_5319:
    assume {:verifier.code 0} true;
    out_$p11 := $load.ref($M.1, out_$p10);
    goto corral_source_split_5320;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(out_$p5, $mul.ref(out_$i6, 872)), $mul.ref(376, 1));
    goto corral_source_split_5319;

  $bb7:
    assume !(out_$i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_525:
    goto corral_source_split_5392;

  SeqInstr_524:
    assume assertsPassed;
    goto SeqInstr_525;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1074} xpc_part_deref(out_$p7);
    goto SeqInstr_524;

  $bb20:
    assume !(out_$i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    goto $bb21;

  SeqInstr_522:
    goto corral_source_split_5390;

  SeqInstr_521:
    assume assertsPassed;
    goto SeqInstr_522;

  corral_source_split_5389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1073} xpc_wakeup_channel_mgr(out_$p7);
    goto SeqInstr_521;

  $bb19:
    assume out_$i61 == 1;
    goto corral_source_split_5389;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_5386:
    assume {:verifier.code 0} true;
    out_$i61 := $ne.i32(out_$i55, 0);
    goto corral_source_split_5387;

  corral_source_split_5385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1072} spin_unlock_irqrestore(out_$p60, out_$i21);
    goto corral_source_split_5386;

  corral_source_split_5384:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(out_$p11, $mul.ref(out_$i12, 720)), $mul.ref(8, 1));
    goto corral_source_split_5385;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p59, out_$i58);
    goto corral_source_split_5384;

  corral_source_split_5382:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref(out_$p11, $mul.ref(out_$i12, 720)), $mul.ref(80, 1));
    goto corral_source_split_5383;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    out_$i58 := $and.i32(out_$i57, $sub.i32(0, 1048577));
    goto corral_source_split_5382;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    out_$i57 := $load.i32($M.1, out_$p56);
    goto corral_source_split_5381;

  corral_source_split_5379:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(out_$p11, $mul.ref(out_$i12, 720)), $mul.ref(80, 1));
    goto corral_source_split_5380;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_5379;

  $bb14:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    out_$i55 := 0;
    goto $bb18;

  corral_source_split_5377:
    assume {:verifier.code 0} true;
    out_$i55 := out_$i53;
    goto $bb18;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p54, 0);
    goto corral_source_split_5377;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(out_$p11, $mul.ref(out_$i12, 720)), $mul.ref(200, 1));
    goto corral_source_split_5376;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_5375;

  $bb16:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    out_$i53 := 0;
    goto $bb17;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    out_$i53 := 1;
    goto $bb17;

  corral_source_split_5372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1071} spin_unlock(out_$p52);
    goto corral_source_split_5373;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(out_$p5, $mul.ref(out_$i6, 872)), $mul.ref(392, 1));
    goto corral_source_split_5372;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p51, out_$i44);
    goto corral_source_split_5371;

  corral_source_split_5369:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(out_$p50, $mul.ref(0, 2)), $mul.ref(out_$i48, 1));
    goto corral_source_split_5370;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    out_$p50 := $bitcast.ref.ref(out_$p49);
    goto corral_source_split_5369;

  corral_source_split_5367:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(out_$p5, $mul.ref(out_$i6, 872)), $mul.ref(384, 1));
    goto corral_source_split_5368;

  corral_source_split_5366:
    assume {:verifier.code 0} true;
    out_$i48 := $sext.i32.i64(out_$i47);
    goto corral_source_split_5367;

  corral_source_split_5365:
    assume {:verifier.code 0} true;
    out_$i47 := $zext.i16.i32(out_$i46);
    goto corral_source_split_5366;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    out_$i46 := $load.i16($M.1, out_$p45);
    goto corral_source_split_5365;

  corral_source_split_5363:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(out_$p11, $mul.ref(out_$i12, 720)), $mul.ref(92, 1));
    goto corral_source_split_5364;

  corral_source_split_5362:
    assume {:verifier.code 0} true;
    out_$i44 := $trunc.i32.i8(out_$i43);
    goto corral_source_split_5363;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    out_$i43 := $or.i32(out_$i39, out_$i42);
    goto corral_source_split_5362;

  corral_source_split_5360:
    assume {:verifier.code 0} true;
    out_$i42 := $zext.i8.i32(out_$i41);
    goto corral_source_split_5361;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    out_$i41 := $load.i8($M.1, out_$p40);
    goto corral_source_split_5360;

  corral_source_split_5358:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(out_$p11, $mul.ref(out_$i12, 720)), $mul.ref(200, 1));
    goto corral_source_split_5359;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    out_$i39 := $zext.i8.i32(out_$i38);
    goto corral_source_split_5358;

  corral_source_split_5356:
    assume {:verifier.code 0} true;
    out_$i38 := $load.i8($M.1, out_$p37);
    goto corral_source_split_5357;

  corral_source_split_5355:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(out_$p36, $mul.ref(0, 2)), $mul.ref(out_$i34, 1));
    goto corral_source_split_5356;

  corral_source_split_5354:
    assume {:verifier.code 0} true;
    out_$p36 := $bitcast.ref.ref(out_$p35);
    goto corral_source_split_5355;

  corral_source_split_5353:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(out_$p5, $mul.ref(out_$i6, 872)), $mul.ref(384, 1));
    goto corral_source_split_5354;

  corral_source_split_5352:
    assume {:verifier.code 0} true;
    out_$i34 := $sext.i32.i64(out_$i33);
    goto corral_source_split_5353;

  corral_source_split_5351:
    assume {:verifier.code 0} true;
    out_$i33 := $zext.i16.i32(out_$i32);
    goto corral_source_split_5352;

  corral_source_split_5350:
    assume {:verifier.code 0} true;
    out_$i32 := $load.i16($M.1, out_$p31);
    goto corral_source_split_5351;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(out_$p11, $mul.ref(out_$i12, 720)), $mul.ref(92, 1));
    goto corral_source_split_5350;

  corral_source_split_5348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1070} spin_lock(out_$p30);
    goto corral_source_split_5349;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(out_$p5, $mul.ref(out_$i6, 872)), $mul.ref(392, 1));
    goto corral_source_split_5348;

  $bb15:
    assume out_$i29 == 1;
    goto corral_source_split_5347;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    out_$i29 := $ne.i32(out_$i28, 4);
    goto corral_source_split_5345;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    out_$i28 := $zext.i8.i32(out_$i27);
    goto corral_source_split_5344;

  corral_source_split_5342:
    assume {:verifier.code 0} true;
    out_$i27 := $load.i8($M.1, out_$p26);
    goto corral_source_split_5343;

  corral_source_split_5341:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(out_$p5, $mul.ref(out_$i6, 872)), $mul.ref(112, 1));
    goto corral_source_split_5342;

  $bb13:
    assume out_$i25 == 1;
    goto corral_source_split_5341;

  corral_source_split_5339:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    out_$i25 := $ne.i32(out_$i24, 0);
    goto corral_source_split_5339;

  corral_source_split_5337:
    assume {:verifier.code 0} true;
    out_$i24 := $zext.i8.i32(out_$i23);
    goto corral_source_split_5338;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    out_$i23 := $load.i8($M.1, out_$p22);
    goto corral_source_split_5337;

  corral_source_split_5335:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(out_$p11, $mul.ref(out_$i12, 720)), $mul.ref(200, 1));
    goto corral_source_split_5336;

  corral_source_split_5334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1068} out_$i21 := _raw_spin_lock_irqsave(out_$p20);
    call {:si_unique_call 1069} {:cexpr "irq_flags"} boogie_si_record_i64(out_$i21);
    goto corral_source_split_5335;

  corral_source_split_5333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1067} out_$p20 := spinlock_check(out_$p19);
    goto corral_source_split_5334;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(out_$p11, $mul.ref(out_$i12, 720)), $mul.ref(8, 1));
    goto corral_source_split_5333;

  corral_source_split_5331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1066} wait_for_completion(out_$p18);
    goto corral_source_split_5332;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(out_$p11, $mul.ref(out_$i12, 720)), $mul.ref(224, 1));
    goto corral_source_split_5331;

  $bb11:
    assume !(out_$i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb22_dummy:
    call {:si_unique_call 1} out_$p5, out_$i6, out_$p7, out_$i8, out_$i9, out_$p10, out_$p11, out_$i12, out_$p14, out_$i15, out_$i16, out_$i17, out_$p18, out_$p19, out_$p20, out_$i21, out_$p22, out_$i23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29, out_$p30, out_$p31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p36, out_$p37, out_$i38, out_$i39, out_$p40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i46, out_$i47, out_$i48, out_$p49, out_$p50, out_$p51, out_$p52, out_$i53, out_$p54, out_$i55, out_$p56, out_$i57, out_$i58, out_$p59, out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i4 := xpc_disconnect_wait_loop_$bb4(in_$i0, out_$p5, out_$i6, out_$p7, out_$i8, out_$i9, out_$p10, out_$p11, out_$i12, out_$p14, out_$i15, out_$i16, out_$i17, out_$p18, out_$p19, out_$p20, out_$i21, out_$p22, out_$i23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29, out_$p30, out_$p31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p36, out_$p37, out_$i38, out_$i39, out_$p40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i46, out_$i47, out_$i48, out_$p49, out_$p50, out_$p51, out_$p52, out_$i53, out_$p54, out_$i55, out_$p56, out_$i57, out_$i58, out_$p59, out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i4);
    return;

  exit:
    return;
}



procedure xpc_disconnect_wait_loop_$bb4(in_$i0: i32, in_$p5: ref, in_$i6: i64, in_$p7: ref, in_$i8: i32, in_$i9: i1, in_$p10: ref, in_$p11: ref, in_$i12: i64, in_$p14: ref, in_$i15: i32, in_$i16: i32, in_$i17: i1, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$p22: ref, in_$i23: i8, in_$i24: i32, in_$i25: i1, in_$p26: ref, in_$i27: i8, in_$i28: i32, in_$i29: i1, in_$p30: ref, in_$p31: ref, in_$i32: i16, in_$i33: i32, in_$i34: i64, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$i38: i8, in_$i39: i32, in_$p40: ref, in_$i41: i8, in_$i42: i32, in_$i43: i32, in_$i44: i8, in_$p45: ref, in_$i46: i16, in_$i47: i32, in_$i48: i64, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$i53: i32, in_$p54: ref, in_$i55: i32, in_$p56: ref, in_$i57: i32, in_$i58: i32, in_$p59: ref, in_$p60: ref, in_$i61: i1, in_$i62: i32, in_$i63: i32, in_$i64: i16, in_$i65: i32, in_$i66: i16, in_$i67: i32, in_$i68: i1, in_$i4: i16) returns (out_$p5: ref, out_$i6: i64, out_$p7: ref, out_$i8: i32, out_$i9: i1, out_$p10: ref, out_$p11: ref, out_$i12: i64, out_$p14: ref, out_$i15: i32, out_$i16: i32, out_$i17: i1, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$p22: ref, out_$i23: i8, out_$i24: i32, out_$i25: i1, out_$p26: ref, out_$i27: i8, out_$i28: i32, out_$i29: i1, out_$p30: ref, out_$p31: ref, out_$i32: i16, out_$i33: i32, out_$i34: i64, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$i38: i8, out_$i39: i32, out_$p40: ref, out_$i41: i8, out_$i42: i32, out_$i43: i32, out_$i44: i8, out_$p45: ref, out_$i46: i16, out_$i47: i32, out_$i48: i64, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$i53: i32, out_$p54: ref, out_$i55: i32, out_$p56: ref, out_$i57: i32, out_$i58: i32, out_$p59: ref, out_$p60: ref, out_$i61: i1, out_$i62: i32, out_$i63: i32, out_$i64: i16, out_$i65: i32, out_$i66: i16, out_$i67: i32, out_$i68: i1, out_$i4: i16);
  modifies $M.1, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $CurrAddr, $M.23, $M.28, $M.0, $M.2, assertsPassed;



implementation xpc_init_uv_loop_$bb6(in_$i6: i32, in_$i7: i1, in_$i8: i32, in_$i10: i32, in_$i11: i1, in_$i5: i32, in_$i12: i32) returns (out_$i6: i32, out_$i7: i1, out_$i8: i32, out_$i10: i32, out_$i11: i1, out_$i5: i32, out_$i12: i32)
{

  entry:
    out_$i6, out_$i7, out_$i8, out_$i10, out_$i11, out_$i5, out_$i12 := in_$i6, in_$i7, in_$i8, in_$i10, in_$i11, in_$i5, in_$i12;
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5521;

  $bb12:
    assume out_$i11 == 1;
    assume {:verifier.code 0} true;
    out_$i5 := out_$i10;
    goto $bb12_dummy;

  corral_source_split_5531:
    assume {:verifier.code 0} true;
    out_$i12 := out_$i6;
    assume true;
    goto $bb12;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    out_$i11 := $sle.i32(out_$i10, 1023);
    goto corral_source_split_5531;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1128} out_$i10 := __next_node(out_$i5, $add.ref($add.ref(node_states, $mul.ref(0, 640)), $mul.ref(1, 128)));
    call {:si_unique_call 1129} {:cexpr "nid"} boogie_si_record_i32(out_$i10);
    goto corral_source_split_5530;

  $bb9:
    assume !(out_$i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_5524:
    assume {:verifier.code 0} true;
    out_$i8 := out_$i6;
    assume true;
    goto $bb9;

  corral_source_split_5523:
    assume {:verifier.code 0} true;
    out_$i7 := $eq.i32(out_$i6, 0);
    goto corral_source_split_5524;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1126} out_$i6 := xpc_init_mq_node(out_$i5);
    call {:si_unique_call 1127} {:cexpr "ret"} boogie_si_record_i32(out_$i6);
    goto corral_source_split_5523;

  corral_source_split_5521:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb12_dummy:
    call {:si_unique_call 1} out_$i6, out_$i7, out_$i8, out_$i10, out_$i11, out_$i5, out_$i12 := xpc_init_uv_loop_$bb6(out_$i6, out_$i7, out_$i8, out_$i10, out_$i11, out_$i5, out_$i12);
    return;

  exit:
    return;
}



procedure xpc_init_uv_loop_$bb6(in_$i6: i32, in_$i7: i1, in_$i8: i32, in_$i10: i32, in_$i11: i1, in_$i5: i32, in_$i12: i32) returns (out_$i6: i32, out_$i7: i1, out_$i8: i32, out_$i10: i32, out_$i11: i1, out_$i5: i32, out_$i12: i32);
  modifies $M.16, $M.15, $M.1, $CurrAddr;



implementation xpc_setup_partitions_loop_$bb8(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p18: ref, in_$i19: i64, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$p32: ref, in_$i33: i64, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i32, in_$i40: i32, in_$i41: i16, in_$i42: i32, in_$i43: i16, in_$i44: i32, in_$i45: i1, in_$i17: i16, in_vslice_dummy_var_81: ref) returns (out_$p18: ref, out_$i19: i64, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$p32: ref, out_$i33: i64, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i32, out_$i40: i32, out_$i41: i16, out_$i42: i32, out_$i43: i16, out_$i44: i32, out_$i45: i1, out_$i17: i16, out_vslice_dummy_var_81: ref)
{

  entry:
    out_$p18, out_$i19, out_$p20, out_$p21, out_$p22, out_$p25, out_$p26, out_$p27, out_$p28, out_$p29, out_$p30, out_$p32, out_$i33, out_$p35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i17, out_vslice_dummy_var_81 := in_$p18, in_$i19, in_$p20, in_$p21, in_$p22, in_$p25, in_$p26, in_$p27, in_$p28, in_$p29, in_$p30, in_$p32, in_$i33, in_$p35, in_$p36, in_$p37, in_$p38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i17, in_vslice_dummy_var_81;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_5566;

  $bb10:
    assume out_$i45 == 1;
    assume {:verifier.code 0} true;
    out_$i17 := out_$i41;
    goto $bb10_dummy;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    out_$i45 := $slt.i32(out_$i42, out_$i44);
    goto corral_source_split_5603;

  corral_source_split_5601:
    assume {:verifier.code 0} true;
    out_$i44 := $sext.i16.i32(out_$i43);
    goto corral_source_split_5602;

  corral_source_split_5600:
    assume {:verifier.code 0} true;
    out_$i43 := $load.i16($M.1, xp_max_npartitions);
    goto corral_source_split_5601;

  corral_source_split_5599:
    assume {:verifier.code 0} true;
    out_$i42 := $sext.i16.i32(out_$i41);
    goto corral_source_split_5600;

  corral_source_split_5598:
    assume {:verifier.code 0} true;
    out_$i41 := $trunc.i32.i16(out_$i40);
    call {:si_unique_call 1141} {:cexpr "partid"} boogie_si_record_i16(out_$i41);
    goto corral_source_split_5599;

  corral_source_split_5597:
    assume {:verifier.code 0} true;
    out_$i40 := $add.i32(out_$i39, 1);
    goto corral_source_split_5598;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    out_$i39 := $sext.i16.i32(out_$i17);
    goto corral_source_split_5597;

  corral_source_split_5595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1140} atomic_set(out_$p38, 0);
    goto corral_source_split_5596;

  corral_source_split_5594:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(out_$p18, $mul.ref(out_$i19, 872)), $mul.ref(360, 1));
    goto corral_source_split_5595;

  corral_source_split_5593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1139} __init_waitqueue_head(out_$p37, .str.71, in_$p2);
    goto corral_source_split_5594;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(out_$p18, $mul.ref(out_$i19, 872)), $mul.ref(272, 1));
    goto corral_source_split_5593;

  corral_source_split_5591:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p36, 0);
    goto corral_source_split_5592;

  corral_source_split_5590:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(out_$p18, $mul.ref(out_$i19, 872)), $mul.ref(264, 1));
    goto corral_source_split_5591;

  corral_source_split_5589:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, out_$p35, out_$i33);
    goto corral_source_split_5590;

  corral_source_split_5588:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref($add.ref(out_$p18, $mul.ref(out_$i19, 872)), $mul.ref(136, 1)), $mul.ref(40, 1));
    goto corral_source_split_5589;

  corral_source_split_5587:
    assume {:verifier.code 0} true;
    out_$i33 := $p2i.ref.i64(out_$p20);
    goto corral_source_split_5588;

  corral_source_split_5586:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p32, xpc_timeout_partition_disengage);
    goto corral_source_split_5587;

  corral_source_split_5585:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref($add.ref(out_$p18, $mul.ref(out_$i19, 872)), $mul.ref(136, 1)), $mul.ref(32, 1));
    goto corral_source_split_5586;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1138} init_timer_key(out_$p30, 0, .str.70, in_$p1);
    goto corral_source_split_5585;

  corral_source_split_5583:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(out_$p18, $mul.ref(out_$i19, 872)), $mul.ref(136, 1));
    goto corral_source_split_5584;

  corral_source_split_5582:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p29, 0);
    goto corral_source_split_5583;

  corral_source_split_5581:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(out_$p18, $mul.ref(out_$i19, 872)), $mul.ref(120, 1));
    goto corral_source_split_5582;

  corral_source_split_5580:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p28, 0);
    goto corral_source_split_5581;

  corral_source_split_5579:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(out_$p18, $mul.ref(out_$i19, 872)), $mul.ref(116, 1));
    goto corral_source_split_5580;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p27, 0);
    goto corral_source_split_5579;

  corral_source_split_5577:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p18, $mul.ref(out_$i19, 872)), $mul.ref(112, 1));
    goto corral_source_split_5578;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1137} __raw_spin_lock_init(out_$p26, .str.69, in_$p0);
    goto corral_source_split_5577;

  corral_source_split_5575:
    assume {:verifier.code 0} true;
    out_$p26 := $bitcast.ref.ref(out_$p25);
    goto corral_source_split_5576;

  corral_source_split_5574:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref($add.ref(out_$p18, $mul.ref(out_$i19, 872)), $mul.ref(40, 1)), $mul.ref(0, 1));
    goto corral_source_split_5575;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1136} out_vslice_dummy_var_81 := spinlock_check(out_$p22);
    goto corral_source_split_5574;

  corral_source_split_5572:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(out_$p18, $mul.ref(out_$i19, 872)), $mul.ref(40, 1));
    goto corral_source_split_5573;

  corral_source_split_5571:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p21, 0);
    goto corral_source_split_5572;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(out_$p18, $mul.ref(out_$i19, 872)), $mul.ref(32, 1));
    goto corral_source_split_5571;

  corral_source_split_5569:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref(out_$p18, $mul.ref(out_$i19, 872));
    goto corral_source_split_5570;

  corral_source_split_5568:
    assume {:verifier.code 0} true;
    out_$i19 := $sext.i16.i64(out_$i17);
    goto corral_source_split_5569;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p18 := $M.3;
    goto corral_source_split_5568;

  corral_source_split_5566:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p18, out_$i19, out_$p20, out_$p21, out_$p22, out_$p25, out_$p26, out_$p27, out_$p28, out_$p29, out_$p30, out_$p32, out_$i33, out_$p35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i17, out_vslice_dummy_var_81 := xpc_setup_partitions_loop_$bb8(in_$p0, in_$p1, in_$p2, out_$p18, out_$i19, out_$p20, out_$p21, out_$p22, out_$p25, out_$p26, out_$p27, out_$p28, out_$p29, out_$p30, out_$p32, out_$i33, out_$p35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i17, out_vslice_dummy_var_81);
    return;

  exit:
    return;
}



procedure xpc_setup_partitions_loop_$bb8(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p18: ref, in_$i19: i64, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$p32: ref, in_$i33: i64, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i32, in_$i40: i32, in_$i41: i16, in_$i42: i32, in_$i43: i16, in_$i44: i32, in_$i45: i1, in_$i17: i16, in_vslice_dummy_var_81: ref) returns (out_$p18: ref, out_$i19: i64, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$p32: ref, out_$i33: i64, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i32, out_$i40: i32, out_$i41: i16, out_$i42: i32, out_$i43: i16, out_$i44: i32, out_$i45: i1, out_$i17: i16, out_vslice_dummy_var_81: ref);
  modifies $M.1;



implementation xpc_setup_rsvd_page_loop_$bb32()
{

  entry:
    goto $bb32, exit;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb32_dummy;

  $bb32_dummy:
    call {:si_unique_call 1} xpc_setup_rsvd_page_loop_$bb32();
    return;

  exit:
    return;
}



procedure xpc_setup_rsvd_page_loop_$bb32();



implementation xpc_hb_checker_loop_$bb34(in_$p4: ref, in_$i114: i32, in_$i115: i1, in_$i116: i32, in_$i117: i1, in_$p118: ref, in_$i119: i32, in_$i120: i1, in_$i121: i64, in_$i122: i64, in_$i123: i64, in_$i124: i1) returns (out_$i114: i32, out_$i115: i1, out_$i116: i32, out_$i117: i1, out_$p118: ref, out_$i119: i32, out_$i120: i1, out_$i121: i64, out_$i122: i64, out_$i123: i64, out_$i124: i1)
{

  entry:
    out_$i114, out_$i115, out_$i116, out_$i117, out_$p118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124 := in_$i114, in_$i115, in_$i116, in_$i117, in_$p118, in_$i119, in_$i120, in_$i121, in_$i122, in_$i123, in_$i124;
    goto $bb34, exit;

  $bb34:
    assume {:verifier.code 0} true;
    out_$i114 := $M.23;
    goto corral_source_split_5924;

  $bb46:
    assume {:verifier.code 0} true;
    assume !(out_$i124 == 1);
    goto $bb46_dummy;

  corral_source_split_5950:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46;

  corral_source_split_5949:
    assume {:verifier.code 0} true;
    out_$i124 := $sge.i64(out_$i123, 0);
    goto corral_source_split_5950;

  corral_source_split_5948:
    assume {:verifier.code 0} true;
    out_$i123 := $sub.i64(out_$i121, out_$i122);
    goto corral_source_split_5949;

  corral_source_split_5947:
    assume {:verifier.code 0} true;
    out_$i122 := $M.40;
    goto corral_source_split_5948;

  corral_source_split_5946:
    assume {:verifier.code 0} true;
    out_$i121 := $load.i64($M.1, jiffies);
    goto corral_source_split_5947;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1211} prepare_to_wait(xpc_activate_IRQ_wq, in_$p4, 1);
    goto corral_source_split_5946;

  corral_source_split_5944:
    assume {:verifier.code 0} true;
    goto $bb44;

  corral_source_split_5943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1210} schedule();
    goto corral_source_split_5944;

  $bb42:
    assume out_$i120 == 1;
    goto corral_source_split_5943;

  corral_source_split_5941:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42;

  corral_source_split_5940:
    assume {:verifier.code 0} true;
    out_$i120 := $eq.i32(out_$i119, 0);
    goto corral_source_split_5941;

  corral_source_split_5939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1208} out_$i119 := signal_pending(out_$p118);
    call {:si_unique_call 1209} {:cexpr "tmp___6"} boogie_si_record_i32(out_$i119);
    goto corral_source_split_5940;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1207} out_$p118 := get_current();
    goto corral_source_split_5939;

  $bb38:
    assume !(out_$i117 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  corral_source_split_5931:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38;

  corral_source_split_5930:
    assume {:verifier.code 0} true;
    out_$i117 := $ne.i32(out_$i116, 0);
    goto corral_source_split_5931;

  corral_source_split_5929:
    assume {:verifier.code 0} true;
    out_$i116 := $M.0;
    goto corral_source_split_5930;

  $bb36:
    assume !(out_$i115 == 1);
    goto corral_source_split_5929;

  corral_source_split_5925:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    out_$i115 := $sgt.i32(out_$i114, 0);
    goto corral_source_split_5925;

  $bb46_dummy:
    call {:si_unique_call 1} out_$i114, out_$i115, out_$i116, out_$i117, out_$p118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124 := xpc_hb_checker_loop_$bb34(in_$p4, out_$i114, out_$i115, out_$i116, out_$i117, out_$p118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124);
    return;

  exit:
    return;
}



procedure xpc_hb_checker_loop_$bb34(in_$p4: ref, in_$i114: i32, in_$i115: i1, in_$i116: i32, in_$i117: i1, in_$p118: ref, in_$i119: i32, in_$i120: i1, in_$i121: i64, in_$i122: i64, in_$i123: i64, in_$i124: i1) returns (out_$i114: i32, out_$i115: i1, out_$i116: i32, out_$i117: i1, out_$p118: ref, out_$i119: i32, out_$i120: i1, out_$i121: i64, out_$i122: i64, out_$i123: i64, out_$i124: i1);
  modifies $M.1;



implementation xpc_hb_checker_loop_$bb4(in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$i23: i24, in_$i24: i24, in_$i25: i24, in_$p26: ref, in_$p27: ref, in_$i28: i8, in_$i29: i64, in_$i30: i64, in_$i31: i64, in_$i32: i1, in_$p33: ref, in_$i34: i64, in_$i35: i32, in_$i36: i64, in_$i37: i32, in_$i38: i32, in_$i39: i32, in_$i41: i64, in_$i42: i64, in_$i43: i64, in_$i44: i1, in_$i45: i32, in_$i46: i32, in_$i47: i64, in_$i48: i64, in_$i49: i64, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$i56: i24, in_$i57: i24, in_$i58: i24, in_$p59: ref, in_$p60: ref, in_$i61: i8, in_$i62: i64, in_$i63: i64, in_$i64: i64, in_$i65: i1, in_$p66: ref, in_$i68: i32, in_$i69: i1, in_$i70: i1, in_$p71: ref, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$i77: i24, in_$i78: i24, in_$i79: i24, in_$p80: ref, in_$p81: ref, in_$i82: i8, in_$i83: i64, in_$i84: i64, in_$i85: i64, in_$i86: i1, in_$p87: ref, in_$p89: ref, in_$i90: i32, in_$i91: i64, in_$i92: i64, in_$i93: i64, in_$i94: i1, in_$i95: i32, in_$i96: i1, in_$i97: i32, in_$i98: i1, in_$p99: ref, in_$p100: ref, in_$p102: ref, in_$p103: ref, in_$p104: ref, in_$p106: ref, in_$p107: ref, in_$p109: ref, in_$i110: i64, in_$i111: i64, in_$i112: i64, in_$i113: i1, in_$i114: i32, in_$i115: i1, in_$i116: i32, in_$i117: i1, in_$p118: ref, in_$i119: i32, in_$i120: i1, in_$i121: i64, in_$i122: i64, in_$i123: i64, in_$i124: i1, in_$i125: i32, in_$i126: i1, in_$i16: i32, in_vslice_dummy_var_85: i32, in_vslice_dummy_var_86: i32, in_vslice_dummy_var_87: i32) returns (out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$i23: i24, out_$i24: i24, out_$i25: i24, out_$p26: ref, out_$p27: ref, out_$i28: i8, out_$i29: i64, out_$i30: i64, out_$i31: i64, out_$i32: i1, out_$p33: ref, out_$i34: i64, out_$i35: i32, out_$i36: i64, out_$i37: i32, out_$i38: i32, out_$i39: i32, out_$i41: i64, out_$i42: i64, out_$i43: i64, out_$i44: i1, out_$i45: i32, out_$i46: i32, out_$i47: i64, out_$i48: i64, out_$i49: i64, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$i56: i24, out_$i57: i24, out_$i58: i24, out_$p59: ref, out_$p60: ref, out_$i61: i8, out_$i62: i64, out_$i63: i64, out_$i64: i64, out_$i65: i1, out_$p66: ref, out_$i68: i32, out_$i69: i1, out_$i70: i1, out_$p71: ref, out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$i77: i24, out_$i78: i24, out_$i79: i24, out_$p80: ref, out_$p81: ref, out_$i82: i8, out_$i83: i64, out_$i84: i64, out_$i85: i64, out_$i86: i1, out_$p87: ref, out_$p89: ref, out_$i90: i32, out_$i91: i64, out_$i92: i64, out_$i93: i64, out_$i94: i1, out_$i95: i32, out_$i96: i1, out_$i97: i32, out_$i98: i1, out_$p99: ref, out_$p100: ref, out_$p102: ref, out_$p103: ref, out_$p104: ref, out_$p106: ref, out_$p107: ref, out_$p109: ref, out_$i110: i64, out_$i111: i64, out_$i112: i64, out_$i113: i1, out_$i114: i32, out_$i115: i1, out_$i116: i32, out_$i117: i1, out_$p118: ref, out_$i119: i32, out_$i120: i1, out_$i121: i64, out_$i122: i64, out_$i123: i64, out_$i124: i1, out_$i125: i32, out_$i126: i1, out_$i16: i32, out_vslice_dummy_var_85: i32, out_vslice_dummy_var_86: i32, out_vslice_dummy_var_87: i32)
{

  entry:
    out_$p17, out_$p18, out_$p19, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$i25, out_$p26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$p50, out_$p51, out_$p52, out_$p53, out_$p54, out_$p55, out_$i56, out_$i57, out_$i58, out_$p59, out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$p66, out_$i68, out_$i69, out_$i70, out_$p71, out_$p72, out_$p73, out_$p74, out_$p75, out_$p76, out_$i77, out_$i78, out_$i79, out_$p80, out_$p81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$p87, out_$p89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$p99, out_$p100, out_$p102, out_$p103, out_$p104, out_$p106, out_$p107, out_$p109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$p118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i16, out_vslice_dummy_var_85, out_vslice_dummy_var_86, out_vslice_dummy_var_87 := in_$p17, in_$p18, in_$p19, in_$p20, in_$p21, in_$p22, in_$i23, in_$i24, in_$i25, in_$p26, in_$p27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$p33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i47, in_$i48, in_$i49, in_$p50, in_$p51, in_$p52, in_$p53, in_$p54, in_$p55, in_$i56, in_$i57, in_$i58, in_$p59, in_$p60, in_$i61, in_$i62, in_$i63, in_$i64, in_$i65, in_$p66, in_$i68, in_$i69, in_$i70, in_$p71, in_$p72, in_$p73, in_$p74, in_$p75, in_$p76, in_$i77, in_$i78, in_$i79, in_$p80, in_$p81, in_$i82, in_$i83, in_$i84, in_$i85, in_$i86, in_$p87, in_$p89, in_$i90, in_$i91, in_$i92, in_$i93, in_$i94, in_$i95, in_$i96, in_$i97, in_$i98, in_$p99, in_$p100, in_$p102, in_$p103, in_$p104, in_$p106, in_$p107, in_$p109, in_$i110, in_$i111, in_$i112, in_$i113, in_$i114, in_$i115, in_$i116, in_$i117, in_$p118, in_$i119, in_$i120, in_$i121, in_$i122, in_$i123, in_$i124, in_$i125, in_$i126, in_$i16, in_vslice_dummy_var_85, in_vslice_dummy_var_86, in_vslice_dummy_var_87;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_5776;

  $bb48:
    assume out_$i126 == 1;
    assume {:verifier.code 0} true;
    out_$i16 := out_$i90;
    goto $bb48_dummy;

  corral_source_split_5953:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48;

  corral_source_split_5952:
    assume {:verifier.code 0} true;
    out_$i126 := $eq.i32(out_$i125, 0);
    goto corral_source_split_5953;

  $bb47:
    assume {:verifier.code 0} true;
    out_$i125 := $M.0;
    goto corral_source_split_5952;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb47;

  corral_source_split_5937:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1206} finish_wait(xpc_activate_IRQ_wq, in_$p4);
    goto corral_source_split_5937;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_5935:
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_5933:
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb31:
    assume {:verifier.code 0} true;
    assume out_$i113 == 1;
    goto $bb32;

  corral_source_split_5920:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb33;

  corral_source_split_5919:
    assume {:verifier.code 0} true;
    out_$i113 := $sge.i64(out_$i112, 0);
    goto corral_source_split_5920;

  corral_source_split_5918:
    assume {:verifier.code 0} true;
    out_$i112 := $sub.i64(out_$i110, out_$i111);
    goto corral_source_split_5919;

  corral_source_split_5917:
    assume {:verifier.code 0} true;
    out_$i111 := $M.40;
    goto corral_source_split_5918;

  corral_source_split_5916:
    assume {:verifier.code 0} true;
    out_$i110 := $load.i64($M.1, jiffies);
    goto corral_source_split_5917;

  corral_source_split_5915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1205} prepare_to_wait(xpc_activate_IRQ_wq, in_$p4, 1);
    goto corral_source_split_5916;

  corral_source_split_5914:
    assume {:verifier.code 0} true;
    $M.22 := $store.ref($M.22, out_$p109, out_$p107);
    goto corral_source_split_5915;

  corral_source_split_5913:
    assume {:verifier.code 0} true;
    out_$p109 := $add.ref($add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(8, 1));
    goto corral_source_split_5914;

  corral_source_split_5912:
    assume {:verifier.code 0} true;
    out_$p107 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5913;

  corral_source_split_5911:
    assume {:verifier.code 0} true;
    $M.21 := $store.ref($M.21, out_$p106, out_$p104);
    goto corral_source_split_5912;

  corral_source_split_5910:
    assume {:verifier.code 0} true;
    out_$p106 := $add.ref($add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_5911;

  corral_source_split_5909:
    assume {:verifier.code 0} true;
    out_$p104 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5910;

  corral_source_split_5908:
    assume {:verifier.code 0} true;
    $M.20 := $store.ref($M.20, out_$p103, autoremove_wake_function);
    goto corral_source_split_5909;

  corral_source_split_5907:
    assume {:verifier.code 0} true;
    out_$p103 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5908;

  corral_source_split_5906:
    assume {:verifier.code 0} true;
    $M.19 := $store.ref($M.19, out_$p102, out_$p99);
    goto corral_source_split_5907;

  corral_source_split_5905:
    assume {:verifier.code 0} true;
    out_$p102 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5906;

  corral_source_split_5904:
    assume {:verifier.code 0} true;
    goto corral_source_split_5905;

  corral_source_split_5903:
    assume {:verifier.code 0} true;
    $M.18 := $store.i32($M.18, out_$p100, 0);
    goto corral_source_split_5904;

  corral_source_split_5902:
    assume {:verifier.code 0} true;
    out_$p100 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5903;

  corral_source_split_5901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1204} out_$p99 := get_current();
    goto corral_source_split_5902;

  $bb29:
    assume out_$i98 == 1;
    goto corral_source_split_5901;

  corral_source_split_5899:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_5898:
    assume {:verifier.code 0} true;
    out_$i98 := $eq.i32(out_$i97, 0);
    goto corral_source_split_5899;

  corral_source_split_5897:
    assume {:verifier.code 0} true;
    out_$i97 := $M.0;
    goto corral_source_split_5898;

  $bb27:
    assume out_$i96 == 1;
    goto corral_source_split_5897;

  corral_source_split_5895:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  corral_source_split_5894:
    assume {:verifier.code 0} true;
    out_$i96 := $sle.i32(out_$i95, 0);
    goto corral_source_split_5895;

  corral_source_split_5893:
    assume {:verifier.code 0} true;
    out_$i95 := $M.23;
    goto corral_source_split_5894;

  $bb24:
    assume out_$i94 == 1;
    goto corral_source_split_5893;

  corral_source_split_5891:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  corral_source_split_5890:
    assume {:verifier.code 0} true;
    out_$i94 := $slt.i64(out_$i93, 0);
    goto corral_source_split_5891;

  corral_source_split_5889:
    assume {:verifier.code 0} true;
    out_$i93 := $sub.i64(out_$i91, out_$i92);
    goto corral_source_split_5890;

  corral_source_split_5888:
    assume {:verifier.code 0} true;
    out_$i92 := $M.40;
    goto corral_source_split_5889;

  corral_source_split_5887:
    assume {:verifier.code 0} true;
    out_$i91 := $load.i64($M.1, jiffies);
    goto corral_source_split_5888;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_5887;

  $bb19:
    assume !(out_$i70 == 1);
    assume {:verifier.code 0} true;
    out_$i90 := out_$i16;
    goto $bb23;

  corral_source_split_5885:
    assume {:verifier.code 0} true;
    out_$i90 := 0;
    goto $bb23;

  SeqInstr_567:
    goto corral_source_split_5885;

  SeqInstr_566:
    assume assertsPassed;
    goto SeqInstr_567;

  $bb22:
    assume {:verifier.code 0} true;
    out_$p89 := $load.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(16, 1)));
    call {:si_unique_call 1203} devirtbounce.4(out_$p89);
    goto SeqInstr_566;

  $bb21:
    assume !(out_$i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_5883:
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_5882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1202} out_vslice_dummy_var_87 := __dynamic_dev_dbg.ref.ref.ref(in_$p3, out_$p87, .str.79);
    goto corral_source_split_5883;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    out_$p87 := $M.5;
    goto corral_source_split_5882;

  $bb20:
    assume out_$i86 == 1;
    goto corral_source_split_5881;

  corral_source_split_5876:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_5875:
    assume {:verifier.code 0} true;
    out_$i86 := $ne.i64(out_$i85, 0);
    goto corral_source_split_5876;

  corral_source_split_5874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1200} out_$i85 := ldv__builtin_expect(out_$i84, 0);
    call {:si_unique_call 1201} {:cexpr "tmp___3"} boogie_si_record_i64(out_$i85);
    goto corral_source_split_5875;

  corral_source_split_5873:
    assume {:verifier.code 0} true;
    out_$i84 := $and.i64(out_$i83, 1);
    goto corral_source_split_5874;

  corral_source_split_5872:
    assume {:verifier.code 0} true;
    out_$i83 := $zext.i8.i64(out_$i82);
    goto corral_source_split_5873;

  corral_source_split_5871:
    assume {:verifier.code 0} true;
    out_$i82 := $load.i8($M.13, out_$p81);
    goto corral_source_split_5872;

  corral_source_split_5870:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5871;

  corral_source_split_5869:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, out_$p80, 0);
    goto corral_source_split_5870;

  corral_source_split_5868:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5869;

  corral_source_split_5867:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, out_$p76, out_$i79);
    goto corral_source_split_5868;

  corral_source_split_5866:
    assume {:verifier.code 0} true;
    out_$i79 := $or.i24(out_$i78, 351);
    goto corral_source_split_5867;

  corral_source_split_5865:
    assume {:verifier.code 0} true;
    out_$i78 := $and.i24(out_$i77, $sub.i24(0, 262144));
    goto corral_source_split_5866;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    out_$i77 := $load.i24($M.12, out_$p76);
    goto corral_source_split_5865;

  corral_source_split_5863:
    assume {:verifier.code 0} true;
    out_$p76 := $bitcast.ref.ref(out_$p75);
    goto corral_source_split_5864;

  corral_source_split_5862:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5863;

  corral_source_split_5861:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, out_$p74, .str.79);
    goto corral_source_split_5862;

  corral_source_split_5860:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5861;

  corral_source_split_5859:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, out_$p73, .str.6);
    goto corral_source_split_5860;

  corral_source_split_5858:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5859;

  corral_source_split_5857:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, out_$p72, .str.76);
    goto corral_source_split_5858;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5857;

  corral_source_split_5855:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, out_$p71, .str);
    goto corral_source_split_5856;

  $bb16:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5855;

  $bb18:
    assume {:verifier.code 0} true;
    assume out_$i70 == 1;
    goto $bb16;

  $bb15:
    assume {:verifier.code 0} true;
    assume out_$i69 == 1;
    goto $bb16;

  corral_source_split_5853:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb17;

  corral_source_split_5852:
    assume {:verifier.code 0} true;
    out_$i69 := $sgt.i32(out_$i68, 0);
    goto corral_source_split_5853;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i68 := $M.23;
    goto corral_source_split_5852;

  $bb10:
    assume !(out_$i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_5850:
    assume {:verifier.code 0} true;
    goto $bb14;

  SeqInstr_564:
    goto corral_source_split_5850;

  SeqInstr_563:
    assume assertsPassed;
    goto SeqInstr_564;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1199} xpc_check_remote_hb();
    goto SeqInstr_563;

  $bb12:
    assume !(out_$i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_5848:
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_5847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1198} out_vslice_dummy_var_86 := __dynamic_dev_dbg.ref.ref.ref(in_$p2, out_$p66, .str.78);
    goto corral_source_split_5848;

  corral_source_split_5846:
    assume {:verifier.code 0} true;
    out_$p66 := $M.5;
    goto corral_source_split_5847;

  $bb11:
    assume out_$i65 == 1;
    goto corral_source_split_5846;

  corral_source_split_5844:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_5843:
    assume {:verifier.code 0} true;
    out_$i65 := $ne.i64(out_$i64, 0);
    goto corral_source_split_5844;

  corral_source_split_5842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1196} out_$i64 := ldv__builtin_expect(out_$i63, 0);
    call {:si_unique_call 1197} {:cexpr "tmp___2"} boogie_si_record_i64(out_$i64);
    goto corral_source_split_5843;

  corral_source_split_5841:
    assume {:verifier.code 0} true;
    out_$i63 := $and.i64(out_$i62, 1);
    goto corral_source_split_5842;

  corral_source_split_5840:
    assume {:verifier.code 0} true;
    out_$i62 := $zext.i8.i64(out_$i61);
    goto corral_source_split_5841;

  corral_source_split_5839:
    assume {:verifier.code 0} true;
    out_$i61 := $load.i8($M.13, out_$p60);
    goto corral_source_split_5840;

  corral_source_split_5838:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5839;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, out_$p59, 0);
    goto corral_source_split_5838;

  corral_source_split_5836:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5837;

  corral_source_split_5835:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, out_$p55, out_$i58);
    goto corral_source_split_5836;

  corral_source_split_5834:
    assume {:verifier.code 0} true;
    out_$i58 := $or.i24(out_$i57, 336);
    goto corral_source_split_5835;

  corral_source_split_5833:
    assume {:verifier.code 0} true;
    out_$i57 := $and.i24(out_$i56, $sub.i24(0, 262144));
    goto corral_source_split_5834;

  corral_source_split_5832:
    assume {:verifier.code 0} true;
    out_$i56 := $load.i24($M.12, out_$p55);
    goto corral_source_split_5833;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    out_$p55 := $bitcast.ref.ref(out_$p54);
    goto corral_source_split_5832;

  corral_source_split_5830:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5831;

  corral_source_split_5829:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, out_$p53, .str.78);
    goto corral_source_split_5830;

  corral_source_split_5828:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5829;

  corral_source_split_5827:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, out_$p52, .str.6);
    goto corral_source_split_5828;

  corral_source_split_5826:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5827;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, out_$p51, .str.76);
    goto corral_source_split_5826;

  corral_source_split_5824:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5825;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, out_$p50, .str);
    goto corral_source_split_5824;

  corral_source_split_5822:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5823;

  corral_source_split_5821:
    assume {:verifier.code 0} true;
    $M.40 := out_$i49;
    call {:si_unique_call 1195} {:cexpr "xpc_hb_check_timeout"} boogie_si_record_i64(out_$i49);
    goto corral_source_split_5822;

  corral_source_split_5820:
    assume {:verifier.code 0} true;
    out_$i49 := $add.i64(out_$i47, out_$i48);
    goto corral_source_split_5821;

  corral_source_split_5819:
    assume {:verifier.code 0} true;
    out_$i48 := $load.i64($M.1, jiffies);
    goto corral_source_split_5820;

  corral_source_split_5818:
    assume {:verifier.code 0} true;
    out_$i47 := $sext.i32.i64(out_$i46);
    goto corral_source_split_5819;

  corral_source_split_5817:
    assume {:verifier.code 0} true;
    out_$i46 := $mul.i32(out_$i45, 250);
    goto corral_source_split_5818;

  corral_source_split_5816:
    assume {:verifier.code 0} true;
    out_$i45 := $load.i32($M.39, xpc_hb_check_interval);
    goto corral_source_split_5817;

  $bb9:
    assume out_$i44 == 1;
    goto corral_source_split_5816;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_5813:
    assume {:verifier.code 0} true;
    out_$i44 := $sge.i64(out_$i43, 0);
    goto corral_source_split_5814;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    out_$i43 := $sub.i64(out_$i41, out_$i42);
    goto corral_source_split_5813;

  corral_source_split_5811:
    assume {:verifier.code 0} true;
    out_$i42 := $M.40;
    goto corral_source_split_5812;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i41 := $load.i64($M.1, jiffies);
    goto corral_source_split_5811;

  $bb7:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_5809:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_5808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1194} out_vslice_dummy_var_85 := __dynamic_dev_dbg.ref.ref.ref.i32.i32(in_$p1, out_$p33, .str.77, out_$i38, out_$i39);
    goto corral_source_split_5809;

  corral_source_split_5807:
    assume {:verifier.code 0} true;
    out_$i39 := $M.23;
    goto corral_source_split_5808;

  corral_source_split_5806:
    assume {:verifier.code 0} true;
    out_$i38 := $sub.i32(out_$i35, out_$i37);
    goto corral_source_split_5807;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    out_$i37 := $trunc.i64.i32(out_$i36);
    goto corral_source_split_5806;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    out_$i36 := $load.i64($M.1, jiffies);
    goto corral_source_split_5805;

  corral_source_split_5803:
    assume {:verifier.code 0} true;
    out_$i35 := $trunc.i64.i32(out_$i34);
    goto corral_source_split_5804;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    out_$i34 := $M.40;
    goto corral_source_split_5803;

  corral_source_split_5801:
    assume {:verifier.code 0} true;
    out_$p33 := $M.5;
    goto corral_source_split_5802;

  $bb6:
    assume out_$i32 == 1;
    goto corral_source_split_5801;

  corral_source_split_5799:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    out_$i32 := $ne.i64(out_$i31, 0);
    goto corral_source_split_5799;

  corral_source_split_5797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1192} out_$i31 := ldv__builtin_expect(out_$i30, 0);
    call {:si_unique_call 1193} {:cexpr "tmp___1"} boogie_si_record_i64(out_$i31);
    goto corral_source_split_5798;

  corral_source_split_5796:
    assume {:verifier.code 0} true;
    out_$i30 := $and.i64(out_$i29, 1);
    goto corral_source_split_5797;

  corral_source_split_5795:
    assume {:verifier.code 0} true;
    out_$i29 := $zext.i8.i64(out_$i28);
    goto corral_source_split_5796;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i8($M.13, out_$p27);
    goto corral_source_split_5795;

  corral_source_split_5793:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5794;

  corral_source_split_5792:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, out_$p26, 0);
    goto corral_source_split_5793;

  corral_source_split_5791:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5792;

  corral_source_split_5790:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, out_$p22, out_$i25);
    goto corral_source_split_5791;

  corral_source_split_5789:
    assume {:verifier.code 0} true;
    out_$i25 := $or.i24(out_$i24, 329);
    goto corral_source_split_5790;

  corral_source_split_5788:
    assume {:verifier.code 0} true;
    out_$i24 := $and.i24(out_$i23, $sub.i24(0, 262144));
    goto corral_source_split_5789;

  corral_source_split_5787:
    assume {:verifier.code 0} true;
    out_$i23 := $load.i24($M.12, out_$p22);
    goto corral_source_split_5788;

  corral_source_split_5786:
    assume {:verifier.code 0} true;
    out_$p22 := $bitcast.ref.ref(out_$p21);
    goto corral_source_split_5787;

  corral_source_split_5785:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5786;

  corral_source_split_5784:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, out_$p20, .str.77);
    goto corral_source_split_5785;

  corral_source_split_5783:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5784;

  corral_source_split_5782:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, out_$p19, .str.6);
    goto corral_source_split_5783;

  corral_source_split_5781:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5782;

  corral_source_split_5780:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, out_$p18, .str.76);
    goto corral_source_split_5781;

  corral_source_split_5779:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5780;

  corral_source_split_5778:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, out_$p17, .str);
    goto corral_source_split_5779;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5778;

  corral_source_split_5776:
    assume {:verifier.code 0} true;
    goto $bb5;

  corral_source_split_5879:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_5878:
    assume {:verifier.code 0} true;
    out_$i70 := $ne.i32(out_$i16, 0);
    goto corral_source_split_5879;

  $bb17:
    assume !(out_$i69 == 1);
    goto corral_source_split_5878;

  $bb35:
    assume out_$i115 == 1;
    goto corral_source_split_5927;

  corral_source_split_5925:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    out_$i115 := $sgt.i32(out_$i114, 0);
    goto corral_source_split_5925;

  $bb34:
    call out_$i114, out_$i115, out_$i116, out_$i117, out_$p118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124 := xpc_hb_checker_loop_$bb34(in_$p4, out_$i114, out_$i115, out_$i116, out_$i117, out_$p118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124);
    goto $bb34_last;

  $bb34_last:
    assume {:verifier.code 0} true;
    out_$i114 := $M.23;
    goto corral_source_split_5924;

  corral_source_split_5922:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb46:
    assume {:verifier.code 0} true;
    assume !(out_$i124 == 1);
    assume false;
    return;

  corral_source_split_5950:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb46;

  corral_source_split_5949:
    assume {:verifier.code 0} true;
    out_$i124 := $sge.i64(out_$i123, 0);
    goto corral_source_split_5950;

  corral_source_split_5948:
    assume {:verifier.code 0} true;
    out_$i123 := $sub.i64(out_$i121, out_$i122);
    goto corral_source_split_5949;

  corral_source_split_5947:
    assume {:verifier.code 0} true;
    out_$i122 := $M.40;
    goto corral_source_split_5948;

  corral_source_split_5946:
    assume {:verifier.code 0} true;
    out_$i121 := $load.i64($M.1, jiffies);
    goto corral_source_split_5947;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1211} prepare_to_wait(xpc_activate_IRQ_wq, in_$p4, 1);
    goto corral_source_split_5946;

  corral_source_split_5944:
    assume {:verifier.code 0} true;
    goto $bb44;

  corral_source_split_5943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1210} schedule();
    goto corral_source_split_5944;

  $bb42:
    assume out_$i120 == 1;
    goto corral_source_split_5943;

  corral_source_split_5941:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  corral_source_split_5940:
    assume {:verifier.code 0} true;
    out_$i120 := $eq.i32(out_$i119, 0);
    goto corral_source_split_5941;

  corral_source_split_5939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1208} out_$i119 := signal_pending(out_$p118);
    call {:si_unique_call 1209} {:cexpr "tmp___6"} boogie_si_record_i32(out_$i119);
    goto corral_source_split_5940;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1207} out_$p118 := get_current();
    goto corral_source_split_5939;

  $bb38:
    assume !(out_$i117 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  corral_source_split_5931:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  corral_source_split_5930:
    assume {:verifier.code 0} true;
    out_$i117 := $ne.i32(out_$i116, 0);
    goto corral_source_split_5931;

  corral_source_split_5929:
    assume {:verifier.code 0} true;
    out_$i116 := $M.0;
    goto corral_source_split_5930;

  $bb36:
    assume !(out_$i115 == 1);
    goto corral_source_split_5929;

  $bb33:
    assume !(out_$i113 == 1);
    goto corral_source_split_5922;

  $bb37:
    assume out_$i117 == 1;
    goto corral_source_split_5933;

  $bb39:
    assume out_$i124 == 1;
    goto corral_source_split_5935;

  $bb43:
    assume !(out_$i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb25:
    assume {:verifier.code 0} true;
    assume !(out_$i94 == 1);
    goto $bb26;

  $bb28:
    assume {:verifier.code 0} true;
    assume !(out_$i96 == 1);
    goto $bb26;

  $bb30:
    assume {:verifier.code 0} true;
    assume !(out_$i98 == 1);
    goto $bb26;

  $bb48_dummy:
    call {:si_unique_call 1} out_$p17, out_$p18, out_$p19, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$i25, out_$p26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$p50, out_$p51, out_$p52, out_$p53, out_$p54, out_$p55, out_$i56, out_$i57, out_$i58, out_$p59, out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$p66, out_$i68, out_$i69, out_$i70, out_$p71, out_$p72, out_$p73, out_$p74, out_$p75, out_$p76, out_$i77, out_$i78, out_$i79, out_$p80, out_$p81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$p87, out_$p89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$p99, out_$p100, out_$p102, out_$p103, out_$p104, out_$p106, out_$p107, out_$p109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$p118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i16, out_vslice_dummy_var_85, out_vslice_dummy_var_86, out_vslice_dummy_var_87 := xpc_hb_checker_loop_$bb4(in_$p1, in_$p2, in_$p3, in_$p4, out_$p17, out_$p18, out_$p19, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$i25, out_$p26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$p50, out_$p51, out_$p52, out_$p53, out_$p54, out_$p55, out_$i56, out_$i57, out_$i58, out_$p59, out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$p66, out_$i68, out_$i69, out_$i70, out_$p71, out_$p72, out_$p73, out_$p74, out_$p75, out_$p76, out_$i77, out_$i78, out_$i79, out_$p80, out_$p81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$p87, out_$p89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$p99, out_$p100, out_$p102, out_$p103, out_$p104, out_$p106, out_$p107, out_$p109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$p118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i16, out_vslice_dummy_var_85, out_vslice_dummy_var_86, out_vslice_dummy_var_87);
    return;

  exit:
    return;
}



procedure xpc_hb_checker_loop_$bb4(in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$i23: i24, in_$i24: i24, in_$i25: i24, in_$p26: ref, in_$p27: ref, in_$i28: i8, in_$i29: i64, in_$i30: i64, in_$i31: i64, in_$i32: i1, in_$p33: ref, in_$i34: i64, in_$i35: i32, in_$i36: i64, in_$i37: i32, in_$i38: i32, in_$i39: i32, in_$i41: i64, in_$i42: i64, in_$i43: i64, in_$i44: i1, in_$i45: i32, in_$i46: i32, in_$i47: i64, in_$i48: i64, in_$i49: i64, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$i56: i24, in_$i57: i24, in_$i58: i24, in_$p59: ref, in_$p60: ref, in_$i61: i8, in_$i62: i64, in_$i63: i64, in_$i64: i64, in_$i65: i1, in_$p66: ref, in_$i68: i32, in_$i69: i1, in_$i70: i1, in_$p71: ref, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$i77: i24, in_$i78: i24, in_$i79: i24, in_$p80: ref, in_$p81: ref, in_$i82: i8, in_$i83: i64, in_$i84: i64, in_$i85: i64, in_$i86: i1, in_$p87: ref, in_$p89: ref, in_$i90: i32, in_$i91: i64, in_$i92: i64, in_$i93: i64, in_$i94: i1, in_$i95: i32, in_$i96: i1, in_$i97: i32, in_$i98: i1, in_$p99: ref, in_$p100: ref, in_$p102: ref, in_$p103: ref, in_$p104: ref, in_$p106: ref, in_$p107: ref, in_$p109: ref, in_$i110: i64, in_$i111: i64, in_$i112: i64, in_$i113: i1, in_$i114: i32, in_$i115: i1, in_$i116: i32, in_$i117: i1, in_$p118: ref, in_$i119: i32, in_$i120: i1, in_$i121: i64, in_$i122: i64, in_$i123: i64, in_$i124: i1, in_$i125: i32, in_$i126: i1, in_$i16: i32, in_vslice_dummy_var_85: i32, in_vslice_dummy_var_86: i32, in_vslice_dummy_var_87: i32) returns (out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$i23: i24, out_$i24: i24, out_$i25: i24, out_$p26: ref, out_$p27: ref, out_$i28: i8, out_$i29: i64, out_$i30: i64, out_$i31: i64, out_$i32: i1, out_$p33: ref, out_$i34: i64, out_$i35: i32, out_$i36: i64, out_$i37: i32, out_$i38: i32, out_$i39: i32, out_$i41: i64, out_$i42: i64, out_$i43: i64, out_$i44: i1, out_$i45: i32, out_$i46: i32, out_$i47: i64, out_$i48: i64, out_$i49: i64, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$i56: i24, out_$i57: i24, out_$i58: i24, out_$p59: ref, out_$p60: ref, out_$i61: i8, out_$i62: i64, out_$i63: i64, out_$i64: i64, out_$i65: i1, out_$p66: ref, out_$i68: i32, out_$i69: i1, out_$i70: i1, out_$p71: ref, out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$i77: i24, out_$i78: i24, out_$i79: i24, out_$p80: ref, out_$p81: ref, out_$i82: i8, out_$i83: i64, out_$i84: i64, out_$i85: i64, out_$i86: i1, out_$p87: ref, out_$p89: ref, out_$i90: i32, out_$i91: i64, out_$i92: i64, out_$i93: i64, out_$i94: i1, out_$i95: i32, out_$i96: i1, out_$i97: i32, out_$i98: i1, out_$p99: ref, out_$p100: ref, out_$p102: ref, out_$p103: ref, out_$p104: ref, out_$p106: ref, out_$p107: ref, out_$p109: ref, out_$i110: i64, out_$i111: i64, out_$i112: i64, out_$i113: i1, out_$i114: i32, out_$i115: i1, out_$i116: i32, out_$i117: i1, out_$p118: ref, out_$i119: i32, out_$i120: i1, out_$i121: i64, out_$i122: i64, out_$i123: i64, out_$i124: i1, out_$i125: i32, out_$i126: i1, out_$i16: i32, out_vslice_dummy_var_85: i32, out_vslice_dummy_var_86: i32, out_vslice_dummy_var_87: i32);
  modifies $M.22, $M.21, $M.20, $M.19, $M.18, $M.1, $M.23, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.28, assertsPassed, $CurrAddr, $M.0, $M.2, $M.24, $M.40, $M.31, $M.41, $M.42, $M.43, $M.44, $M.45, $M.32;



implementation xpc_initiate_connect_loop_$bb4(in_$p5: ref, in_$i6: i64, in_$p7: ref, in_$i8: i32, in_$i9: i1, in_$i10: i32, in_$i11: i32, in_$i12: i16, in_$i13: i32, in_$i14: i16, in_$i15: i32, in_$i16: i1, in_$i4: i16) returns (out_$p5: ref, out_$i6: i64, out_$p7: ref, out_$i8: i32, out_$i9: i1, out_$i10: i32, out_$i11: i32, out_$i12: i16, out_$i13: i32, out_$i14: i16, out_$i15: i32, out_$i16: i1, out_$i4: i16)
{

  entry:
    out_$p5, out_$i6, out_$p7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i4 := in_$p5, in_$i6, in_$p7, in_$i8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i13, in_$i14, in_$i15, in_$i16, in_$i4;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_6025;

  $bb9:
    assume out_$i16 == 1;
    assume {:verifier.code 0} true;
    out_$i4 := out_$i12;
    goto $bb9_dummy;

  corral_source_split_6043:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_6042:
    assume {:verifier.code 0} true;
    out_$i16 := $slt.i32(out_$i13, out_$i15);
    goto corral_source_split_6043;

  corral_source_split_6041:
    assume {:verifier.code 0} true;
    out_$i15 := $sext.i16.i32(out_$i14);
    goto corral_source_split_6042;

  corral_source_split_6040:
    assume {:verifier.code 0} true;
    out_$i14 := $load.i16($M.1, xp_max_npartitions);
    goto corral_source_split_6041;

  corral_source_split_6039:
    assume {:verifier.code 0} true;
    out_$i13 := $sext.i16.i32(out_$i12);
    goto corral_source_split_6040;

  corral_source_split_6038:
    assume {:verifier.code 0} true;
    out_$i12 := $trunc.i32.i16(out_$i11);
    call {:si_unique_call 1228} {:cexpr "partid"} boogie_si_record_i16(out_$i12);
    goto corral_source_split_6039;

  corral_source_split_6037:
    assume {:verifier.code 0} true;
    out_$i11 := $add.i32(out_$i10, 1);
    goto corral_source_split_6038;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i10 := $sext.i16.i32(out_$i4);
    goto corral_source_split_6037;

  $bb7:
    assume !(out_$i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_582:
    goto corral_source_split_6035;

  SeqInstr_581:
    assume assertsPassed;
    goto SeqInstr_582;

  corral_source_split_6034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1227} xpc_part_deref(out_$p7);
    goto SeqInstr_581;

  SeqInstr_579:
    goto corral_source_split_6034;

  SeqInstr_578:
    assume assertsPassed;
    goto SeqInstr_579;

  corral_source_split_6033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1226} xpc_wakeup_channel_mgr(out_$p7);
    goto SeqInstr_578;

  $bb6:
    assume out_$i9 == 1;
    goto corral_source_split_6033;

  corral_source_split_6031:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_6030:
    assume {:verifier.code 0} true;
    out_$i9 := $ne.i32(out_$i8, 0);
    goto corral_source_split_6031;

  SeqInstr_576:
    call {:si_unique_call 1225} {:cexpr "tmp"} boogie_si_record_i32(out_$i8);
    goto corral_source_split_6030;

  SeqInstr_575:
    assume assertsPassed;
    goto SeqInstr_576;

  corral_source_split_6029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1224} out_$i8 := xpc_part_ref(out_$p7);
    goto SeqInstr_575;

  corral_source_split_6028:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref(out_$p5, $mul.ref(out_$i6, 872));
    goto corral_source_split_6029;

  corral_source_split_6027:
    assume {:verifier.code 0} true;
    out_$i6 := $sext.i16.i64(out_$i4);
    goto corral_source_split_6028;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p5 := $M.3;
    goto corral_source_split_6027;

  corral_source_split_6025:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb9_dummy:
    call {:si_unique_call 1} out_$p5, out_$i6, out_$p7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i4 := xpc_initiate_connect_loop_$bb4(out_$p5, out_$i6, out_$p7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i4);
    return;

  exit:
    return;
}



procedure xpc_initiate_connect_loop_$bb4(in_$p5: ref, in_$i6: i64, in_$p7: ref, in_$i8: i32, in_$i9: i1, in_$i10: i32, in_$i11: i32, in_$i12: i16, in_$i13: i32, in_$i14: i16, in_$i15: i32, in_$i16: i1, in_$i4: i16) returns (out_$p5: ref, out_$i6: i64, out_$p7: ref, out_$i8: i32, out_$i9: i1, out_$i10: i32, out_$i11: i32, out_$i12: i16, out_$i13: i32, out_$i14: i16, out_$i15: i32, out_$i16: i1, out_$i4: i16);
  modifies $M.0, $M.2, $M.1, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.23, $M.28, $CurrAddr, assertsPassed;



implementation xpc_initiate_disconnect_loop_$bb4(in_$i0: i32, in_$p1: ref, in_$p6: ref, in_$i7: i64, in_$p8: ref, in_$i9: i32, in_$i10: i1, in_$p11: ref, in_$p12: ref, in_$i13: i64, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$i17: i64, in_$p18: ref, in_$i19: i32, in_$i20: i32, in_$i21: i1, in_$p22: ref, in_$i23: i32, in_$i24: i32, in_$p25: ref, in_$p26: ref, in_$i27: i64, in_$i28: i32, in_$i29: i32, in_$i30: i16, in_$i31: i32, in_$i32: i16, in_$i33: i32, in_$i34: i1, in_$i5: i16) returns (out_$p6: ref, out_$i7: i64, out_$p8: ref, out_$i9: i32, out_$i10: i1, out_$p11: ref, out_$p12: ref, out_$i13: i64, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$i17: i64, out_$p18: ref, out_$i19: i32, out_$i20: i32, out_$i21: i1, out_$p22: ref, out_$i23: i32, out_$i24: i32, out_$p25: ref, out_$p26: ref, out_$i27: i64, out_$i28: i32, out_$i29: i32, out_$i30: i16, out_$i31: i32, out_$i32: i16, out_$i33: i32, out_$i34: i1, out_$i5: i16)
{

  entry:
    out_$p6, out_$i7, out_$p8, out_$i9, out_$i10, out_$p11, out_$p12, out_$i13, out_$p14, out_$p15, out_$p16, out_$i17, out_$p18, out_$i19, out_$i20, out_$i21, out_$p22, out_$i23, out_$i24, out_$p25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i5 := in_$p6, in_$i7, in_$p8, in_$i9, in_$i10, in_$p11, in_$p12, in_$i13, in_$p14, in_$p15, in_$p16, in_$i17, in_$p18, in_$i19, in_$i20, in_$i21, in_$p22, in_$i23, in_$i24, in_$p25, in_$p26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i5;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_6054;

  $bb12:
    assume out_$i34 == 1;
    assume {:verifier.code 0} true;
    out_$i5 := out_$i30;
    goto $bb12_dummy;

  corral_source_split_6097:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12;

  corral_source_split_6096:
    assume {:verifier.code 0} true;
    out_$i34 := $slt.i32(out_$i31, out_$i33);
    goto corral_source_split_6097;

  corral_source_split_6095:
    assume {:verifier.code 0} true;
    out_$i33 := $sext.i16.i32(out_$i32);
    goto corral_source_split_6096;

  corral_source_split_6094:
    assume {:verifier.code 0} true;
    out_$i32 := $load.i16($M.1, xp_max_npartitions);
    goto corral_source_split_6095;

  corral_source_split_6093:
    assume {:verifier.code 0} true;
    out_$i31 := $sext.i16.i32(out_$i30);
    goto corral_source_split_6094;

  corral_source_split_6092:
    assume {:verifier.code 0} true;
    out_$i30 := $trunc.i32.i16(out_$i29);
    call {:si_unique_call 1240} {:cexpr "partid"} boogie_si_record_i16(out_$i30);
    goto corral_source_split_6093;

  corral_source_split_6091:
    assume {:verifier.code 0} true;
    out_$i29 := $add.i32(out_$i28, 1);
    goto corral_source_split_6092;

  $bb11:
    assume {:verifier.code 0} true;
    out_$i28 := $sext.i16.i32(out_$i5);
    goto corral_source_split_6091;

  $bb7:
    assume !(out_$i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_6089:
    assume {:verifier.code 0} true;
    goto $bb11;

  SeqInstr_597:
    goto corral_source_split_6089;

  SeqInstr_596:
    assume assertsPassed;
    goto SeqInstr_597;

  corral_source_split_6088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1239} xpc_part_deref(out_$p8);
    goto SeqInstr_596;

  SeqInstr_594:
    goto corral_source_split_6088;

  SeqInstr_593:
    assume assertsPassed;
    goto SeqInstr_594;

  corral_source_split_6087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1238} xpc_msgqueue_deref(out_$p14);
    goto SeqInstr_593;

  corral_source_split_6086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1237} spin_unlock_irqrestore(out_$p26, out_$i27);
    goto corral_source_split_6087;

  corral_source_split_6085:
    assume {:verifier.code 0} true;
    out_$i27 := $load.i64($M.1, in_$p1);
    goto corral_source_split_6086;

  $bb10:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(out_$p12, $mul.ref(out_$i13, 720)), $mul.ref(8, 1));
    goto corral_source_split_6085;

  $bb9:
    assume !(out_$i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_6083:
    assume {:verifier.code 0} true;
    goto $bb10;

  SeqInstr_591:
    goto corral_source_split_6083;

  SeqInstr_590:
    assume assertsPassed;
    goto SeqInstr_591;

  corral_source_split_6082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1236} xpc_disconnect_channel(787, out_$p14, 22, in_$p1);
    goto SeqInstr_590;

  corral_source_split_6081:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p25, out_$i24);
    goto corral_source_split_6082;

  corral_source_split_6080:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(out_$p12, $mul.ref(out_$i13, 720)), $mul.ref(80, 1));
    goto corral_source_split_6081;

  corral_source_split_6079:
    assume {:verifier.code 0} true;
    out_$i24 := $or.i32(out_$i23, 1048576);
    goto corral_source_split_6080;

  corral_source_split_6078:
    assume {:verifier.code 0} true;
    out_$i23 := $load.i32($M.1, out_$p22);
    goto corral_source_split_6079;

  corral_source_split_6077:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(out_$p12, $mul.ref(out_$i13, 720)), $mul.ref(80, 1));
    goto corral_source_split_6078;

  $bb8:
    assume out_$i21 == 1;
    goto corral_source_split_6077;

  corral_source_split_6075:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_6074:
    assume {:verifier.code 0} true;
    out_$i21 := $eq.i32(out_$i20, 0);
    goto corral_source_split_6075;

  corral_source_split_6073:
    assume {:verifier.code 0} true;
    out_$i20 := $and.i32(out_$i19, 65536);
    goto corral_source_split_6074;

  corral_source_split_6072:
    assume {:verifier.code 0} true;
    out_$i19 := $load.i32($M.1, out_$p18);
    goto corral_source_split_6073;

  corral_source_split_6071:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(out_$p12, $mul.ref(out_$i13, 720)), $mul.ref(80, 1));
    goto corral_source_split_6072;

  corral_source_split_6070:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, in_$p1, out_$i17);
    goto corral_source_split_6071;

  corral_source_split_6069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1235} out_$i17 := _raw_spin_lock_irqsave(out_$p16);
    goto corral_source_split_6070;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1234} out_$p16 := spinlock_check(out_$p15);
    goto corral_source_split_6069;

  corral_source_split_6067:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(out_$p12, $mul.ref(out_$i13, 720)), $mul.ref(8, 1));
    goto corral_source_split_6068;

  SeqInstr_588:
    goto corral_source_split_6067;

  SeqInstr_587:
    assume assertsPassed;
    goto SeqInstr_588;

  corral_source_split_6066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1233} xpc_msgqueue_ref(out_$p14);
    goto SeqInstr_587;

  corral_source_split_6065:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref(out_$p12, $mul.ref(out_$i13, 720));
    goto corral_source_split_6066;

  corral_source_split_6064:
    assume {:verifier.code 0} true;
    out_$i13 := $sext.i32.i64(in_$i0);
    goto corral_source_split_6065;

  corral_source_split_6063:
    assume {:verifier.code 0} true;
    out_$p12 := $load.ref($M.1, out_$p11);
    goto corral_source_split_6064;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(out_$p6, $mul.ref(out_$i7, 872)), $mul.ref(376, 1));
    goto corral_source_split_6063;

  $bb6:
    assume out_$i10 == 1;
    goto corral_source_split_6062;

  corral_source_split_6060:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_6059:
    assume {:verifier.code 0} true;
    out_$i10 := $ne.i32(out_$i9, 0);
    goto corral_source_split_6060;

  SeqInstr_585:
    call {:si_unique_call 1232} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i9);
    goto corral_source_split_6059;

  SeqInstr_584:
    assume assertsPassed;
    goto SeqInstr_585;

  corral_source_split_6058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1231} out_$i9 := xpc_part_ref(out_$p8);
    goto SeqInstr_584;

  corral_source_split_6057:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref(out_$p6, $mul.ref(out_$i7, 872));
    goto corral_source_split_6058;

  corral_source_split_6056:
    assume {:verifier.code 0} true;
    out_$i7 := $sext.i16.i64(out_$i5);
    goto corral_source_split_6057;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p6 := $M.3;
    goto corral_source_split_6056;

  corral_source_split_6054:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb12_dummy:
    call {:si_unique_call 1} out_$p6, out_$i7, out_$p8, out_$i9, out_$i10, out_$p11, out_$p12, out_$i13, out_$p14, out_$p15, out_$p16, out_$i17, out_$p18, out_$i19, out_$i20, out_$i21, out_$p22, out_$i23, out_$i24, out_$p25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i5 := xpc_initiate_disconnect_loop_$bb4(in_$i0, in_$p1, out_$p6, out_$i7, out_$p8, out_$i9, out_$i10, out_$p11, out_$p12, out_$i13, out_$p14, out_$p15, out_$p16, out_$i17, out_$p18, out_$i19, out_$i20, out_$i21, out_$p22, out_$i23, out_$i24, out_$p25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i5);
    return;

  exit:
    return;
}



procedure xpc_initiate_disconnect_loop_$bb4(in_$i0: i32, in_$p1: ref, in_$p6: ref, in_$i7: i64, in_$p8: ref, in_$i9: i32, in_$i10: i1, in_$p11: ref, in_$p12: ref, in_$i13: i64, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$i17: i64, in_$p18: ref, in_$i19: i32, in_$i20: i32, in_$i21: i1, in_$p22: ref, in_$i23: i32, in_$i24: i32, in_$p25: ref, in_$p26: ref, in_$i27: i64, in_$i28: i32, in_$i29: i32, in_$i30: i16, in_$i31: i32, in_$i32: i16, in_$i33: i32, in_$i34: i1, in_$i5: i16) returns (out_$p6: ref, out_$i7: i64, out_$p8: ref, out_$i9: i32, out_$i10: i1, out_$p11: ref, out_$p12: ref, out_$i13: i64, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$i17: i64, out_$p18: ref, out_$i19: i32, out_$i20: i32, out_$i21: i1, out_$p22: ref, out_$i23: i32, out_$i24: i32, out_$p25: ref, out_$p26: ref, out_$i27: i64, out_$i28: i32, out_$i29: i32, out_$i30: i16, out_$i31: i32, out_$i32: i16, out_$i33: i32, out_$i34: i1, out_$i5: i16);
  modifies $M.0, $M.2, $M.1, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.23, $M.28, $CurrAddr, assertsPassed;



implementation xpc_discovery_loop_$bb41(in_$p1: ref, in_$p3: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p12: ref, in_$p19: ref, in_$i67: i32, in_$i70: i32, in_$i71: i1, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$p77: ref, in_$i78: i24, in_$i79: i24, in_$i80: i24, in_$p81: ref, in_$p82: ref, in_$i83: i8, in_$i84: i64, in_$i85: i64, in_$i86: i64, in_$i87: i1, in_$p88: ref, in_$i90: i32, in_$p91: ref, in_$i92: i32, in_$i93: i1, in_$i94: i32, in_$i113: i32, in_$p114: ref, in_$i115: i32, in_$i116: i1, in_$p117: ref, in_$p118: ref, in_$p119: ref, in_$p120: ref, in_$p121: ref, in_$p122: ref, in_$i123: i24, in_$i124: i24, in_$i125: i24, in_$p126: ref, in_$p127: ref, in_$i128: i8, in_$i129: i64, in_$i130: i64, in_$i131: i64, in_$i132: i1, in_$p133: ref, in_$i135: i32, in_$i136: i32, in_$i137: i1, in_$p138: ref, in_$p139: ref, in_$p140: ref, in_$p141: ref, in_$p142: ref, in_$p143: ref, in_$i144: i24, in_$i145: i24, in_$i146: i24, in_$p147: ref, in_$p148: ref, in_$i149: i8, in_$i150: i64, in_$i151: i64, in_$i152: i64, in_$i153: i1, in_$p154: ref, in_$i156: i32, in_$i157: i1, in_$p158: ref, in_$p159: ref, in_$p160: ref, in_$p161: ref, in_$p162: ref, in_$p163: ref, in_$i164: i24, in_$i165: i24, in_$i166: i24, in_$p167: ref, in_$p168: ref, in_$i169: i8, in_$i170: i64, in_$i171: i64, in_$i172: i64, in_$i173: i1, in_$p174: ref, in_$i176: i1, in_$p177: ref, in_$i178: i64, in_$i179: i32, in_$i180: i1, in_$i69: i32, in_vslice_dummy_var_91: i32, in_vslice_dummy_var_93: i32, in_vslice_dummy_var_94: i32, in_vslice_dummy_var_95: i32) returns (out_$i70: i32, out_$i71: i1, out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$p77: ref, out_$i78: i24, out_$i79: i24, out_$i80: i24, out_$p81: ref, out_$p82: ref, out_$i83: i8, out_$i84: i64, out_$i85: i64, out_$i86: i64, out_$i87: i1, out_$p88: ref, out_$i90: i32, out_$p91: ref, out_$i92: i32, out_$i93: i1, out_$i94: i32, out_$i113: i32, out_$p114: ref, out_$i115: i32, out_$i116: i1, out_$p117: ref, out_$p118: ref, out_$p119: ref, out_$p120: ref, out_$p121: ref, out_$p122: ref, out_$i123: i24, out_$i124: i24, out_$i125: i24, out_$p126: ref, out_$p127: ref, out_$i128: i8, out_$i129: i64, out_$i130: i64, out_$i131: i64, out_$i132: i1, out_$p133: ref, out_$i135: i32, out_$i136: i32, out_$i137: i1, out_$p138: ref, out_$p139: ref, out_$p140: ref, out_$p141: ref, out_$p142: ref, out_$p143: ref, out_$i144: i24, out_$i145: i24, out_$i146: i24, out_$p147: ref, out_$p148: ref, out_$i149: i8, out_$i150: i64, out_$i151: i64, out_$i152: i64, out_$i153: i1, out_$p154: ref, out_$i156: i32, out_$i157: i1, out_$p158: ref, out_$p159: ref, out_$p160: ref, out_$p161: ref, out_$p162: ref, out_$p163: ref, out_$i164: i24, out_$i165: i24, out_$i166: i24, out_$p167: ref, out_$p168: ref, out_$i169: i8, out_$i170: i64, out_$i171: i64, out_$i172: i64, out_$i173: i1, out_$p174: ref, out_$i176: i1, out_$p177: ref, out_$i178: i64, out_$i179: i32, out_$i180: i1, out_$i69: i32, out_vslice_dummy_var_91: i32, out_vslice_dummy_var_93: i32, out_vslice_dummy_var_94: i32, out_vslice_dummy_var_95: i32)
{

  entry:
    out_$i70, out_$i71, out_$p72, out_$p73, out_$p74, out_$p75, out_$p76, out_$p77, out_$i78, out_$i79, out_$i80, out_$p81, out_$p82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$p88, out_$i90, out_$p91, out_$i92, out_$i93, out_$i94, out_$i113, out_$p114, out_$i115, out_$i116, out_$p117, out_$p118, out_$p119, out_$p120, out_$p121, out_$p122, out_$i123, out_$i124, out_$i125, out_$p126, out_$p127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$p133, out_$i135, out_$i136, out_$i137, out_$p138, out_$p139, out_$p140, out_$p141, out_$p142, out_$p143, out_$i144, out_$i145, out_$i146, out_$p147, out_$p148, out_$i149, out_$i150, out_$i151, out_$i152, out_$i153, out_$p154, out_$i156, out_$i157, out_$p158, out_$p159, out_$p160, out_$p161, out_$p162, out_$p163, out_$i164, out_$i165, out_$i166, out_$p167, out_$p168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i173, out_$p174, out_$i176, out_$p177, out_$i178, out_$i179, out_$i180, out_$i69, out_vslice_dummy_var_91, out_vslice_dummy_var_93, out_vslice_dummy_var_94, out_vslice_dummy_var_95 := in_$i70, in_$i71, in_$p72, in_$p73, in_$p74, in_$p75, in_$p76, in_$p77, in_$i78, in_$i79, in_$i80, in_$p81, in_$p82, in_$i83, in_$i84, in_$i85, in_$i86, in_$i87, in_$p88, in_$i90, in_$p91, in_$i92, in_$i93, in_$i94, in_$i113, in_$p114, in_$i115, in_$i116, in_$p117, in_$p118, in_$p119, in_$p120, in_$p121, in_$p122, in_$i123, in_$i124, in_$i125, in_$p126, in_$p127, in_$i128, in_$i129, in_$i130, in_$i131, in_$i132, in_$p133, in_$i135, in_$i136, in_$i137, in_$p138, in_$p139, in_$p140, in_$p141, in_$p142, in_$p143, in_$i144, in_$i145, in_$i146, in_$p147, in_$p148, in_$i149, in_$i150, in_$i151, in_$i152, in_$i153, in_$p154, in_$i156, in_$i157, in_$p158, in_$p159, in_$p160, in_$p161, in_$p162, in_$p163, in_$i164, in_$i165, in_$i166, in_$p167, in_$p168, in_$i169, in_$i170, in_$i171, in_$i172, in_$i173, in_$p174, in_$i176, in_$p177, in_$i178, in_$i179, in_$i180, in_$i69, in_vslice_dummy_var_91, in_vslice_dummy_var_93, in_vslice_dummy_var_94, in_vslice_dummy_var_95;
    goto $bb41, exit;

  $bb41:
    assume {:verifier.code 0} true;
    goto corral_source_split_6197;

  $bb78:
    assume out_$i180 == 1;
    assume {:verifier.code 0} true;
    out_$i69 := out_$i179;
    goto $bb78_dummy;

  corral_source_split_6301:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78;

  corral_source_split_6300:
    assume {:verifier.code 0} true;
    out_$i180 := $sgt.i32(in_$i67, out_$i179);
    goto corral_source_split_6301;

  $bb61:
    assume {:verifier.code 0} true;
    out_$i179 := $add.i32(out_$i69, 2);
    call {:si_unique_call 1279} {:cexpr "nasid"} boogie_si_record_i32(out_$i179);
    goto corral_source_split_6300;

  corral_source_split_6371:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb59:
    assume !(out_$i132 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  corral_source_split_6298:
    assume {:verifier.code 0} true;
    goto $bb60;

  corral_source_split_6297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1278} out_vslice_dummy_var_93 := __dynamic_dev_dbg.ref.ref.ref.i32(in_$p5, out_$p133, .str.50, out_$i69);
    goto corral_source_split_6298;

  corral_source_split_6296:
    assume {:verifier.code 0} true;
    out_$p133 := $M.5;
    goto corral_source_split_6297;

  $bb58:
    assume out_$i132 == 1;
    goto corral_source_split_6296;

  corral_source_split_6294:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  corral_source_split_6293:
    assume {:verifier.code 0} true;
    out_$i132 := $ne.i64(out_$i131, 0);
    goto corral_source_split_6294;

  corral_source_split_6292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1276} out_$i131 := ldv__builtin_expect(out_$i130, 0);
    call {:si_unique_call 1277} {:cexpr "tmp___6"} boogie_si_record_i64(out_$i131);
    goto corral_source_split_6293;

  corral_source_split_6291:
    assume {:verifier.code 0} true;
    out_$i130 := $and.i64(out_$i129, 1);
    goto corral_source_split_6292;

  corral_source_split_6290:
    assume {:verifier.code 0} true;
    out_$i129 := $zext.i8.i64(out_$i128);
    goto corral_source_split_6291;

  corral_source_split_6289:
    assume {:verifier.code 0} true;
    out_$i128 := $load.i8($M.13, out_$p127);
    goto corral_source_split_6290;

  corral_source_split_6288:
    assume {:verifier.code 0} true;
    out_$p127 := $add.ref($add.ref(in_$p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6289;

  corral_source_split_6287:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, out_$p126, 0);
    goto corral_source_split_6288;

  corral_source_split_6286:
    assume {:verifier.code 0} true;
    out_$p126 := $add.ref($add.ref(in_$p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6287;

  corral_source_split_6285:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, out_$p122, out_$i125);
    goto corral_source_split_6286;

  corral_source_split_6284:
    assume {:verifier.code 0} true;
    out_$i125 := $or.i24(out_$i124, 540);
    goto corral_source_split_6285;

  corral_source_split_6283:
    assume {:verifier.code 0} true;
    out_$i124 := $and.i24(out_$i123, $sub.i24(0, 262144));
    goto corral_source_split_6284;

  corral_source_split_6282:
    assume {:verifier.code 0} true;
    out_$i123 := $load.i24($M.12, out_$p122);
    goto corral_source_split_6283;

  corral_source_split_6281:
    assume {:verifier.code 0} true;
    out_$p122 := $bitcast.ref.ref(out_$p121);
    goto corral_source_split_6282;

  corral_source_split_6280:
    assume {:verifier.code 0} true;
    out_$p121 := $add.ref($add.ref(in_$p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6281;

  corral_source_split_6279:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, out_$p120, .str.50);
    goto corral_source_split_6280;

  corral_source_split_6278:
    assume {:verifier.code 0} true;
    out_$p120 := $add.ref($add.ref(in_$p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6279;

  corral_source_split_6277:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, out_$p119, .str.38);
    goto corral_source_split_6278;

  corral_source_split_6276:
    assume {:verifier.code 0} true;
    out_$p119 := $add.ref($add.ref(in_$p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6277;

  corral_source_split_6275:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, out_$p118, .str.18);
    goto corral_source_split_6276;

  corral_source_split_6274:
    assume {:verifier.code 0} true;
    out_$p118 := $add.ref($add.ref(in_$p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6275;

  corral_source_split_6273:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, out_$p117, .str);
    goto corral_source_split_6274;

  corral_source_split_6272:
    assume {:verifier.code 0} true;
    out_$p117 := $add.ref($add.ref(in_$p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6273;

  $bb56:
    assume out_$i116 == 1;
    goto corral_source_split_6272;

  corral_source_split_6270:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  corral_source_split_6269:
    assume {:verifier.code 0} true;
    out_$i116 := $eq.i32(out_$i115, 0);
    goto corral_source_split_6270;

  corral_source_split_6268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1274} out_$i115 := variable_test_bit(out_$i113, out_$p114);
    call {:si_unique_call 1275} {:cexpr "tmp___7"} boogie_si_record_i32(out_$i115);
    goto corral_source_split_6269;

  corral_source_split_6267:
    assume {:verifier.code 0} true;
    out_$p114 := $M.37;
    goto corral_source_split_6268;

  $bb55:
    assume {:verifier.code 0} true;
    out_$i113 := $sdiv.i32(out_$i69, 2);
    goto corral_source_split_6267;

  $bb51:
    assume !(out_$i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  corral_source_split_6237:
    assume {:verifier.code 0} true;
    out_$i94 := out_$i69;
    assume true;
    goto $bb51;

  corral_source_split_6236:
    assume {:verifier.code 0} true;
    out_$i93 := $ne.i32(out_$i92, 0);
    goto corral_source_split_6237;

  corral_source_split_6235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1269} out_$i92 := variable_test_bit(out_$i90, out_$p91);
    call {:si_unique_call 1270} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i92);
    goto corral_source_split_6236;

  corral_source_split_6234:
    assume {:verifier.code 0} true;
    out_$p91 := $M.36;
    goto corral_source_split_6235;

  $bb49:
    assume {:verifier.code 0} true;
    out_$i90 := $sdiv.i32(out_$i69, 2);
    goto corral_source_split_6234;

  $bb48:
    assume !(out_$i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  corral_source_split_6232:
    assume {:verifier.code 0} true;
    goto $bb49;

  corral_source_split_6231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1268} out_vslice_dummy_var_91 := __dynamic_dev_dbg.ref.ref.ref.i32(in_$p3, out_$p88, .str.48, out_$i69);
    goto corral_source_split_6232;

  corral_source_split_6230:
    assume {:verifier.code 0} true;
    out_$p88 := $M.5;
    goto corral_source_split_6231;

  $bb47:
    assume out_$i87 == 1;
    goto corral_source_split_6230;

  corral_source_split_6228:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  corral_source_split_6227:
    assume {:verifier.code 0} true;
    out_$i87 := $ne.i64(out_$i86, 0);
    goto corral_source_split_6228;

  corral_source_split_6226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1266} out_$i86 := ldv__builtin_expect(out_$i85, 0);
    call {:si_unique_call 1267} {:cexpr "tmp___3"} boogie_si_record_i64(out_$i86);
    goto corral_source_split_6227;

  corral_source_split_6225:
    assume {:verifier.code 0} true;
    out_$i85 := $and.i64(out_$i84, 1);
    goto corral_source_split_6226;

  corral_source_split_6224:
    assume {:verifier.code 0} true;
    out_$i84 := $zext.i8.i64(out_$i83);
    goto corral_source_split_6225;

  corral_source_split_6223:
    assume {:verifier.code 0} true;
    out_$i83 := $load.i8($M.13, out_$p82);
    goto corral_source_split_6224;

  corral_source_split_6222:
    assume {:verifier.code 0} true;
    out_$p82 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6223;

  corral_source_split_6221:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, out_$p81, 0);
    goto corral_source_split_6222;

  corral_source_split_6220:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6221;

  corral_source_split_6219:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, out_$p77, out_$i80);
    goto corral_source_split_6220;

  corral_source_split_6218:
    assume {:verifier.code 0} true;
    out_$i80 := $or.i24(out_$i79, 528);
    goto corral_source_split_6219;

  corral_source_split_6217:
    assume {:verifier.code 0} true;
    out_$i79 := $and.i24(out_$i78, $sub.i24(0, 262144));
    goto corral_source_split_6218;

  corral_source_split_6216:
    assume {:verifier.code 0} true;
    out_$i78 := $load.i24($M.12, out_$p77);
    goto corral_source_split_6217;

  corral_source_split_6215:
    assume {:verifier.code 0} true;
    out_$p77 := $bitcast.ref.ref(out_$p76);
    goto corral_source_split_6216;

  corral_source_split_6214:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6215;

  corral_source_split_6213:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, out_$p75, .str.48);
    goto corral_source_split_6214;

  corral_source_split_6212:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6213;

  corral_source_split_6211:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, out_$p74, .str.38);
    goto corral_source_split_6212;

  corral_source_split_6210:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6211;

  corral_source_split_6209:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, out_$p73, .str.18);
    goto corral_source_split_6210;

  corral_source_split_6208:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6209;

  corral_source_split_6207:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, out_$p72, .str);
    goto corral_source_split_6208;

  $bb46:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6207;

  $bb44:
    assume !(out_$i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  corral_source_split_6200:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44;

  corral_source_split_6199:
    assume {:verifier.code 0} true;
    out_$i71 := $ne.i32(out_$i70, 0);
    goto corral_source_split_6200;

  $bb42:
    assume {:verifier.code 0} true;
    out_$i70 := $M.0;
    goto corral_source_split_6199;

  corral_source_split_6197:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb66:
    assume !(out_$i153 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  corral_source_split_6333:
    assume {:verifier.code 0} true;
    goto $bb67;

  corral_source_split_6332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1284} out_vslice_dummy_var_94 := __dynamic_dev_dbg.ref.ref.ref.i32(in_$p6, out_$p154, .str.51, out_$i69);
    goto corral_source_split_6333;

  corral_source_split_6331:
    assume {:verifier.code 0} true;
    out_$p154 := $M.5;
    goto corral_source_split_6332;

  $bb65:
    assume out_$i153 == 1;
    goto corral_source_split_6331;

  corral_source_split_6329:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  corral_source_split_6328:
    assume {:verifier.code 0} true;
    out_$i153 := $ne.i64(out_$i152, 0);
    goto corral_source_split_6329;

  corral_source_split_6327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1282} out_$i152 := ldv__builtin_expect(out_$i151, 0);
    call {:si_unique_call 1283} {:cexpr "tmp___8"} boogie_si_record_i64(out_$i152);
    goto corral_source_split_6328;

  corral_source_split_6326:
    assume {:verifier.code 0} true;
    out_$i151 := $and.i64(out_$i150, 1);
    goto corral_source_split_6327;

  corral_source_split_6325:
    assume {:verifier.code 0} true;
    out_$i150 := $zext.i8.i64(out_$i149);
    goto corral_source_split_6326;

  corral_source_split_6324:
    assume {:verifier.code 0} true;
    out_$i149 := $load.i8($M.13, out_$p148);
    goto corral_source_split_6325;

  corral_source_split_6323:
    assume {:verifier.code 0} true;
    out_$p148 := $add.ref($add.ref(in_$p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6324;

  corral_source_split_6322:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, out_$p147, 0);
    goto corral_source_split_6323;

  corral_source_split_6321:
    assume {:verifier.code 0} true;
    out_$p147 := $add.ref($add.ref(in_$p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6322;

  corral_source_split_6320:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, out_$p143, out_$i146);
    goto corral_source_split_6321;

  corral_source_split_6319:
    assume {:verifier.code 0} true;
    out_$i146 := $or.i24(out_$i145, 547);
    goto corral_source_split_6320;

  corral_source_split_6318:
    assume {:verifier.code 0} true;
    out_$i145 := $and.i24(out_$i144, $sub.i24(0, 262144));
    goto corral_source_split_6319;

  corral_source_split_6317:
    assume {:verifier.code 0} true;
    out_$i144 := $load.i24($M.12, out_$p143);
    goto corral_source_split_6318;

  corral_source_split_6316:
    assume {:verifier.code 0} true;
    out_$p143 := $bitcast.ref.ref(out_$p142);
    goto corral_source_split_6317;

  corral_source_split_6315:
    assume {:verifier.code 0} true;
    out_$p142 := $add.ref($add.ref(in_$p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6316;

  corral_source_split_6314:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, out_$p141, .str.51);
    goto corral_source_split_6315;

  corral_source_split_6313:
    assume {:verifier.code 0} true;
    out_$p141 := $add.ref($add.ref(in_$p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6314;

  corral_source_split_6312:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, out_$p140, .str.38);
    goto corral_source_split_6313;

  corral_source_split_6311:
    assume {:verifier.code 0} true;
    out_$p140 := $add.ref($add.ref(in_$p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6312;

  corral_source_split_6310:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, out_$p139, .str.18);
    goto corral_source_split_6311;

  corral_source_split_6309:
    assume {:verifier.code 0} true;
    out_$p139 := $add.ref($add.ref(in_$p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6310;

  corral_source_split_6308:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, out_$p138, .str);
    goto corral_source_split_6309;

  corral_source_split_6307:
    assume {:verifier.code 0} true;
    out_$p138 := $add.ref($add.ref(in_$p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6308;

  $bb63:
    assume out_$i137 == 1;
    goto corral_source_split_6307;

  corral_source_split_6305:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  corral_source_split_6304:
    assume {:verifier.code 0} true;
    out_$i137 := $ne.i32(out_$i136, 0);
    goto corral_source_split_6305;

  corral_source_split_6303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1280} out_$i136 := variable_test_bit(out_$i135, in_$p19);
    call {:si_unique_call 1281} {:cexpr "tmp___9"} boogie_si_record_i32(out_$i136);
    goto corral_source_split_6304;

  $bb62:
    assume {:verifier.code 0} true;
    out_$i135 := $sdiv.i32(out_$i69, 2);
    goto corral_source_split_6303;

  $bb57:
    assume !(out_$i116 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb75:
    assume !(out_$i176 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  corral_source_split_6366:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75;

  $bb73:
    assume {:verifier.code 0} true;
    out_$i176 := $eq.i32(out_$i156, 43);
    goto corral_source_split_6366;

  $bb72:
    assume !(out_$i173 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  corral_source_split_6364:
    assume {:verifier.code 0} true;
    goto $bb73;

  corral_source_split_6363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1289} out_vslice_dummy_var_95 := __dynamic_dev_dbg.ref.ref.ref.i32.i32(in_$p7, out_$p174, .str.52, out_$i69, out_$i156);
    goto corral_source_split_6364;

  corral_source_split_6362:
    assume {:verifier.code 0} true;
    out_$p174 := $M.5;
    goto corral_source_split_6363;

  $bb71:
    assume out_$i173 == 1;
    goto corral_source_split_6362;

  corral_source_split_6360:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  corral_source_split_6359:
    assume {:verifier.code 0} true;
    out_$i173 := $ne.i64(out_$i172, 0);
    goto corral_source_split_6360;

  corral_source_split_6358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1287} out_$i172 := ldv__builtin_expect(out_$i171, 0);
    call {:si_unique_call 1288} {:cexpr "tmp___10"} boogie_si_record_i64(out_$i172);
    goto corral_source_split_6359;

  corral_source_split_6357:
    assume {:verifier.code 0} true;
    out_$i171 := $and.i64(out_$i170, 1);
    goto corral_source_split_6358;

  corral_source_split_6356:
    assume {:verifier.code 0} true;
    out_$i170 := $zext.i8.i64(out_$i169);
    goto corral_source_split_6357;

  corral_source_split_6355:
    assume {:verifier.code 0} true;
    out_$i169 := $load.i8($M.13, out_$p168);
    goto corral_source_split_6356;

  corral_source_split_6354:
    assume {:verifier.code 0} true;
    out_$p168 := $add.ref($add.ref(in_$p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6355;

  corral_source_split_6353:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, out_$p167, 0);
    goto corral_source_split_6354;

  corral_source_split_6352:
    assume {:verifier.code 0} true;
    out_$p167 := $add.ref($add.ref(in_$p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6353;

  corral_source_split_6351:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, out_$p163, out_$i166);
    goto corral_source_split_6352;

  corral_source_split_6350:
    assume {:verifier.code 0} true;
    out_$i166 := $or.i24(out_$i165, 558);
    goto corral_source_split_6351;

  corral_source_split_6349:
    assume {:verifier.code 0} true;
    out_$i165 := $and.i24(out_$i164, $sub.i24(0, 262144));
    goto corral_source_split_6350;

  corral_source_split_6348:
    assume {:verifier.code 0} true;
    out_$i164 := $load.i24($M.12, out_$p163);
    goto corral_source_split_6349;

  corral_source_split_6347:
    assume {:verifier.code 0} true;
    out_$p163 := $bitcast.ref.ref(out_$p162);
    goto corral_source_split_6348;

  corral_source_split_6346:
    assume {:verifier.code 0} true;
    out_$p162 := $add.ref($add.ref(in_$p7, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6347;

  corral_source_split_6345:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, out_$p161, .str.52);
    goto corral_source_split_6346;

  corral_source_split_6344:
    assume {:verifier.code 0} true;
    out_$p161 := $add.ref($add.ref(in_$p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6345;

  corral_source_split_6343:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, out_$p160, .str.38);
    goto corral_source_split_6344;

  corral_source_split_6342:
    assume {:verifier.code 0} true;
    out_$p160 := $add.ref($add.ref(in_$p7, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6343;

  corral_source_split_6341:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, out_$p159, .str.18);
    goto corral_source_split_6342;

  corral_source_split_6340:
    assume {:verifier.code 0} true;
    out_$p159 := $add.ref($add.ref(in_$p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6341;

  corral_source_split_6339:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, out_$p158, .str);
    goto corral_source_split_6340;

  corral_source_split_6338:
    assume {:verifier.code 0} true;
    out_$p158 := $add.ref($add.ref(in_$p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6339;

  $bb69:
    assume out_$i157 == 1;
    goto corral_source_split_6338;

  corral_source_split_6336:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  corral_source_split_6335:
    assume {:verifier.code 0} true;
    out_$i157 := $ne.i32(out_$i156, 0);
    goto corral_source_split_6336;

  $bb68:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1285} out_$i156 := xpc_get_remote_rp(out_$i69, in_$p19, in_$p12, in_$p1);
    call {:si_unique_call 1286} {:cexpr "ret"} boogie_si_record_i32(out_$i156);
    goto corral_source_split_6335;

  $bb64:
    assume !(out_$i137 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  SeqInstr_603:
    goto corral_source_split_6371;

  SeqInstr_602:
    assume assertsPassed;
    goto SeqInstr_603;

  corral_source_split_6370:
    assume {:verifier.code 0} true;
    out_$i178 := $load.i64($M.42, in_$p1);
    call {:si_unique_call 1290} devirtbounce.33(out_$p177, in_$p12, out_$i178, out_$i69);
    goto SeqInstr_602;

  $bb77:
    assume {:verifier.code 0} true;
    out_$p177 := $load.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(112, 1)));
    goto corral_source_split_6370;

  $bb70:
    assume !(out_$i157 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb78_dummy:
    call {:si_unique_call 1} out_$i70, out_$i71, out_$p72, out_$p73, out_$p74, out_$p75, out_$p76, out_$p77, out_$i78, out_$i79, out_$i80, out_$p81, out_$p82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$p88, out_$i90, out_$p91, out_$i92, out_$i93, out_$i94, out_$i113, out_$p114, out_$i115, out_$i116, out_$p117, out_$p118, out_$p119, out_$p120, out_$p121, out_$p122, out_$i123, out_$i124, out_$i125, out_$p126, out_$p127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$p133, out_$i135, out_$i136, out_$i137, out_$p138, out_$p139, out_$p140, out_$p141, out_$p142, out_$p143, out_$i144, out_$i145, out_$i146, out_$p147, out_$p148, out_$i149, out_$i150, out_$i151, out_$i152, out_$i153, out_$p154, out_$i156, out_$i157, out_$p158, out_$p159, out_$p160, out_$p161, out_$p162, out_$p163, out_$i164, out_$i165, out_$i166, out_$p167, out_$p168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i173, out_$p174, out_$i176, out_$p177, out_$i178, out_$i179, out_$i180, out_$i69, out_vslice_dummy_var_91, out_vslice_dummy_var_93, out_vslice_dummy_var_94, out_vslice_dummy_var_95 := xpc_discovery_loop_$bb41(in_$p1, in_$p3, in_$p5, in_$p6, in_$p7, in_$p12, in_$p19, in_$i67, out_$i70, out_$i71, out_$p72, out_$p73, out_$p74, out_$p75, out_$p76, out_$p77, out_$i78, out_$i79, out_$i80, out_$p81, out_$p82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$p88, out_$i90, out_$p91, out_$i92, out_$i93, out_$i94, out_$i113, out_$p114, out_$i115, out_$i116, out_$p117, out_$p118, out_$p119, out_$p120, out_$p121, out_$p122, out_$i123, out_$i124, out_$i125, out_$p126, out_$p127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$p133, out_$i135, out_$i136, out_$i137, out_$p138, out_$p139, out_$p140, out_$p141, out_$p142, out_$p143, out_$i144, out_$i145, out_$i146, out_$p147, out_$p148, out_$i149, out_$i150, out_$i151, out_$i152, out_$i153, out_$p154, out_$i156, out_$i157, out_$p158, out_$p159, out_$p160, out_$p161, out_$p162, out_$p163, out_$i164, out_$i165, out_$i166, out_$p167, out_$p168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i173, out_$p174, out_$i176, out_$p177, out_$i178, out_$i179, out_$i180, out_$i69, out_vslice_dummy_var_91, out_vslice_dummy_var_93, out_vslice_dummy_var_94, out_vslice_dummy_var_95);
    return;

  exit:
    return;
}



procedure xpc_discovery_loop_$bb41(in_$p1: ref, in_$p3: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p12: ref, in_$p19: ref, in_$i67: i32, in_$i70: i32, in_$i71: i1, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$p77: ref, in_$i78: i24, in_$i79: i24, in_$i80: i24, in_$p81: ref, in_$p82: ref, in_$i83: i8, in_$i84: i64, in_$i85: i64, in_$i86: i64, in_$i87: i1, in_$p88: ref, in_$i90: i32, in_$p91: ref, in_$i92: i32, in_$i93: i1, in_$i94: i32, in_$i113: i32, in_$p114: ref, in_$i115: i32, in_$i116: i1, in_$p117: ref, in_$p118: ref, in_$p119: ref, in_$p120: ref, in_$p121: ref, in_$p122: ref, in_$i123: i24, in_$i124: i24, in_$i125: i24, in_$p126: ref, in_$p127: ref, in_$i128: i8, in_$i129: i64, in_$i130: i64, in_$i131: i64, in_$i132: i1, in_$p133: ref, in_$i135: i32, in_$i136: i32, in_$i137: i1, in_$p138: ref, in_$p139: ref, in_$p140: ref, in_$p141: ref, in_$p142: ref, in_$p143: ref, in_$i144: i24, in_$i145: i24, in_$i146: i24, in_$p147: ref, in_$p148: ref, in_$i149: i8, in_$i150: i64, in_$i151: i64, in_$i152: i64, in_$i153: i1, in_$p154: ref, in_$i156: i32, in_$i157: i1, in_$p158: ref, in_$p159: ref, in_$p160: ref, in_$p161: ref, in_$p162: ref, in_$p163: ref, in_$i164: i24, in_$i165: i24, in_$i166: i24, in_$p167: ref, in_$p168: ref, in_$i169: i8, in_$i170: i64, in_$i171: i64, in_$i172: i64, in_$i173: i1, in_$p174: ref, in_$i176: i1, in_$p177: ref, in_$i178: i64, in_$i179: i32, in_$i180: i1, in_$i69: i32, in_vslice_dummy_var_91: i32, in_vslice_dummy_var_93: i32, in_vslice_dummy_var_94: i32, in_vslice_dummy_var_95: i32) returns (out_$i70: i32, out_$i71: i1, out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$p77: ref, out_$i78: i24, out_$i79: i24, out_$i80: i24, out_$p81: ref, out_$p82: ref, out_$i83: i8, out_$i84: i64, out_$i85: i64, out_$i86: i64, out_$i87: i1, out_$p88: ref, out_$i90: i32, out_$p91: ref, out_$i92: i32, out_$i93: i1, out_$i94: i32, out_$i113: i32, out_$p114: ref, out_$i115: i32, out_$i116: i1, out_$p117: ref, out_$p118: ref, out_$p119: ref, out_$p120: ref, out_$p121: ref, out_$p122: ref, out_$i123: i24, out_$i124: i24, out_$i125: i24, out_$p126: ref, out_$p127: ref, out_$i128: i8, out_$i129: i64, out_$i130: i64, out_$i131: i64, out_$i132: i1, out_$p133: ref, out_$i135: i32, out_$i136: i32, out_$i137: i1, out_$p138: ref, out_$p139: ref, out_$p140: ref, out_$p141: ref, out_$p142: ref, out_$p143: ref, out_$i144: i24, out_$i145: i24, out_$i146: i24, out_$p147: ref, out_$p148: ref, out_$i149: i8, out_$i150: i64, out_$i151: i64, out_$i152: i64, out_$i153: i1, out_$p154: ref, out_$i156: i32, out_$i157: i1, out_$p158: ref, out_$p159: ref, out_$p160: ref, out_$p161: ref, out_$p162: ref, out_$p163: ref, out_$i164: i24, out_$i165: i24, out_$i166: i24, out_$p167: ref, out_$p168: ref, out_$i169: i8, out_$i170: i64, out_$i171: i64, out_$i172: i64, out_$i173: i1, out_$p174: ref, out_$i176: i1, out_$p177: ref, out_$i178: i64, out_$i179: i32, out_$i180: i1, out_$i69: i32, out_vslice_dummy_var_91: i32, out_vslice_dummy_var_93: i32, out_vslice_dummy_var_94: i32, out_vslice_dummy_var_95: i32);
  modifies $M.13, $M.12, $M.11, $M.10, $M.9, $M.8, $M.1, $M.42, $M.43, $M.44, $M.45, $M.41, $CurrAddr, $M.23, $M.28, assertsPassed, $M.0, $M.2;



implementation xpc_discovery_loop_$bb29(in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p12: ref, in_$p19: ref, in_$i27: i32, in_$i28: i32, in_$i43: i32, in_$i44: i1, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$i51: i24, in_$i52: i24, in_$i53: i24, in_$p54: ref, in_$p55: ref, in_$i56: i8, in_$i57: i64, in_$i58: i64, in_$i59: i64, in_$i60: i1, in_$p61: ref, in_$i63: i32, in_$i64: i32, in_$i65: i32, in_$i66: i32, in_$i67: i32, in_$i68: i1, in_$i70: i32, in_$i71: i1, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$p77: ref, in_$i78: i24, in_$i79: i24, in_$i80: i24, in_$p81: ref, in_$p82: ref, in_$i83: i8, in_$i84: i64, in_$i85: i64, in_$i86: i64, in_$i87: i1, in_$p88: ref, in_$i90: i32, in_$p91: ref, in_$i92: i32, in_$i93: i1, in_$i94: i32, in_$p95: ref, in_$p96: ref, in_$p97: ref, in_$p98: ref, in_$p99: ref, in_$p100: ref, in_$i101: i24, in_$i102: i24, in_$i103: i24, in_$p104: ref, in_$p105: ref, in_$i106: i8, in_$i107: i64, in_$i108: i64, in_$i109: i64, in_$i110: i1, in_$p111: ref, in_$i113: i32, in_$p114: ref, in_$i115: i32, in_$i116: i1, in_$p117: ref, in_$p118: ref, in_$p119: ref, in_$p120: ref, in_$p121: ref, in_$p122: ref, in_$i123: i24, in_$i124: i24, in_$i125: i24, in_$p126: ref, in_$p127: ref, in_$i128: i8, in_$i129: i64, in_$i130: i64, in_$i131: i64, in_$i132: i1, in_$p133: ref, in_$i135: i32, in_$i136: i32, in_$i137: i1, in_$p138: ref, in_$p139: ref, in_$p140: ref, in_$p141: ref, in_$p142: ref, in_$p143: ref, in_$i144: i24, in_$i145: i24, in_$i146: i24, in_$p147: ref, in_$p148: ref, in_$i149: i8, in_$i150: i64, in_$i151: i64, in_$i152: i64, in_$i153: i1, in_$p154: ref, in_$i156: i32, in_$i157: i1, in_$p158: ref, in_$p159: ref, in_$p160: ref, in_$p161: ref, in_$p162: ref, in_$p163: ref, in_$i164: i24, in_$i165: i24, in_$i166: i24, in_$p167: ref, in_$p168: ref, in_$i169: i8, in_$i170: i64, in_$i171: i64, in_$i172: i64, in_$i173: i1, in_$p174: ref, in_$i176: i1, in_$p177: ref, in_$i178: i64, in_$i179: i32, in_$i180: i1, in_$i69: i32, in_$i181: i32, in_$i182: i1, in_$i42: i32, in_vslice_dummy_var_90: i32, in_vslice_dummy_var_91: i32, in_vslice_dummy_var_92: i32, in_vslice_dummy_var_93: i32, in_vslice_dummy_var_94: i32, in_vslice_dummy_var_95: i32) returns (out_$i43: i32, out_$i44: i1, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$i51: i24, out_$i52: i24, out_$i53: i24, out_$p54: ref, out_$p55: ref, out_$i56: i8, out_$i57: i64, out_$i58: i64, out_$i59: i64, out_$i60: i1, out_$p61: ref, out_$i63: i32, out_$i64: i32, out_$i65: i32, out_$i66: i32, out_$i67: i32, out_$i68: i1, out_$i70: i32, out_$i71: i1, out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$p77: ref, out_$i78: i24, out_$i79: i24, out_$i80: i24, out_$p81: ref, out_$p82: ref, out_$i83: i8, out_$i84: i64, out_$i85: i64, out_$i86: i64, out_$i87: i1, out_$p88: ref, out_$i90: i32, out_$p91: ref, out_$i92: i32, out_$i93: i1, out_$i94: i32, out_$p95: ref, out_$p96: ref, out_$p97: ref, out_$p98: ref, out_$p99: ref, out_$p100: ref, out_$i101: i24, out_$i102: i24, out_$i103: i24, out_$p104: ref, out_$p105: ref, out_$i106: i8, out_$i107: i64, out_$i108: i64, out_$i109: i64, out_$i110: i1, out_$p111: ref, out_$i113: i32, out_$p114: ref, out_$i115: i32, out_$i116: i1, out_$p117: ref, out_$p118: ref, out_$p119: ref, out_$p120: ref, out_$p121: ref, out_$p122: ref, out_$i123: i24, out_$i124: i24, out_$i125: i24, out_$p126: ref, out_$p127: ref, out_$i128: i8, out_$i129: i64, out_$i130: i64, out_$i131: i64, out_$i132: i1, out_$p133: ref, out_$i135: i32, out_$i136: i32, out_$i137: i1, out_$p138: ref, out_$p139: ref, out_$p140: ref, out_$p141: ref, out_$p142: ref, out_$p143: ref, out_$i144: i24, out_$i145: i24, out_$i146: i24, out_$p147: ref, out_$p148: ref, out_$i149: i8, out_$i150: i64, out_$i151: i64, out_$i152: i64, out_$i153: i1, out_$p154: ref, out_$i156: i32, out_$i157: i1, out_$p158: ref, out_$p159: ref, out_$p160: ref, out_$p161: ref, out_$p162: ref, out_$p163: ref, out_$i164: i24, out_$i165: i24, out_$i166: i24, out_$p167: ref, out_$p168: ref, out_$i169: i8, out_$i170: i64, out_$i171: i64, out_$i172: i64, out_$i173: i1, out_$p174: ref, out_$i176: i1, out_$p177: ref, out_$i178: i64, out_$i179: i32, out_$i180: i1, out_$i69: i32, out_$i181: i32, out_$i182: i1, out_$i42: i32, out_vslice_dummy_var_90: i32, out_vslice_dummy_var_91: i32, out_vslice_dummy_var_92: i32, out_vslice_dummy_var_93: i32, out_vslice_dummy_var_94: i32, out_vslice_dummy_var_95: i32)
{

  entry:
    out_$i43, out_$i44, out_$p45, out_$p46, out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$i53, out_$p54, out_$p55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p61, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i70, out_$i71, out_$p72, out_$p73, out_$p74, out_$p75, out_$p76, out_$p77, out_$i78, out_$i79, out_$i80, out_$p81, out_$p82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$p88, out_$i90, out_$p91, out_$i92, out_$i93, out_$i94, out_$p95, out_$p96, out_$p97, out_$p98, out_$p99, out_$p100, out_$i101, out_$i102, out_$i103, out_$p104, out_$p105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$p111, out_$i113, out_$p114, out_$i115, out_$i116, out_$p117, out_$p118, out_$p119, out_$p120, out_$p121, out_$p122, out_$i123, out_$i124, out_$i125, out_$p126, out_$p127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$p133, out_$i135, out_$i136, out_$i137, out_$p138, out_$p139, out_$p140, out_$p141, out_$p142, out_$p143, out_$i144, out_$i145, out_$i146, out_$p147, out_$p148, out_$i149, out_$i150, out_$i151, out_$i152, out_$i153, out_$p154, out_$i156, out_$i157, out_$p158, out_$p159, out_$p160, out_$p161, out_$p162, out_$p163, out_$i164, out_$i165, out_$i166, out_$p167, out_$p168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i173, out_$p174, out_$i176, out_$p177, out_$i178, out_$i179, out_$i180, out_$i69, out_$i181, out_$i182, out_$i42, out_vslice_dummy_var_90, out_vslice_dummy_var_91, out_vslice_dummy_var_92, out_vslice_dummy_var_93, out_vslice_dummy_var_94, out_vslice_dummy_var_95 := in_$i43, in_$i44, in_$p45, in_$p46, in_$p47, in_$p48, in_$p49, in_$p50, in_$i51, in_$i52, in_$i53, in_$p54, in_$p55, in_$i56, in_$i57, in_$i58, in_$i59, in_$i60, in_$p61, in_$i63, in_$i64, in_$i65, in_$i66, in_$i67, in_$i68, in_$i70, in_$i71, in_$p72, in_$p73, in_$p74, in_$p75, in_$p76, in_$p77, in_$i78, in_$i79, in_$i80, in_$p81, in_$p82, in_$i83, in_$i84, in_$i85, in_$i86, in_$i87, in_$p88, in_$i90, in_$p91, in_$i92, in_$i93, in_$i94, in_$p95, in_$p96, in_$p97, in_$p98, in_$p99, in_$p100, in_$i101, in_$i102, in_$i103, in_$p104, in_$p105, in_$i106, in_$i107, in_$i108, in_$i109, in_$i110, in_$p111, in_$i113, in_$p114, in_$i115, in_$i116, in_$p117, in_$p118, in_$p119, in_$p120, in_$p121, in_$p122, in_$i123, in_$i124, in_$i125, in_$p126, in_$p127, in_$i128, in_$i129, in_$i130, in_$i131, in_$i132, in_$p133, in_$i135, in_$i136, in_$i137, in_$p138, in_$p139, in_$p140, in_$p141, in_$p142, in_$p143, in_$i144, in_$i145, in_$i146, in_$p147, in_$p148, in_$i149, in_$i150, in_$i151, in_$i152, in_$i153, in_$p154, in_$i156, in_$i157, in_$p158, in_$p159, in_$p160, in_$p161, in_$p162, in_$p163, in_$i164, in_$i165, in_$i166, in_$p167, in_$p168, in_$i169, in_$i170, in_$i171, in_$i172, in_$i173, in_$p174, in_$i176, in_$p177, in_$i178, in_$i179, in_$i180, in_$i69, in_$i181, in_$i182, in_$i42, in_vslice_dummy_var_90, in_vslice_dummy_var_91, in_vslice_dummy_var_92, in_vslice_dummy_var_93, in_vslice_dummy_var_94, in_vslice_dummy_var_95;
    goto $bb29, exit;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_6149;

  $bb80:
    assume out_$i182 == 1;
    assume {:verifier.code 0} true;
    out_$i42 := out_$i181;
    goto $bb80_dummy;

  corral_source_split_6205:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80;

  corral_source_split_6204:
    assume {:verifier.code 0} true;
    out_$i182 := $slt.i32(out_$i181, in_$i27);
    goto corral_source_split_6205;

  $bb45:
    assume {:verifier.code 0} true;
    out_$i181 := $add.i32(out_$i42, 1);
    call {:si_unique_call 1265} {:cexpr "region"} boogie_si_record_i32(out_$i181);
    goto corral_source_split_6204;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb45;

  corral_source_split_6368:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb45;

  corral_source_split_6202:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb43:
    assume out_$i71 == 1;
    goto corral_source_split_6202;

  corral_source_split_6200:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  corral_source_split_6199:
    assume {:verifier.code 0} true;
    out_$i71 := $ne.i32(out_$i70, 0);
    goto corral_source_split_6200;

  $bb42:
    assume {:verifier.code 0} true;
    out_$i70 := $M.0;
    goto corral_source_split_6199;

  corral_source_split_6197:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb41:
    call out_$i70, out_$i71, out_$p72, out_$p73, out_$p74, out_$p75, out_$p76, out_$p77, out_$i78, out_$i79, out_$i80, out_$p81, out_$p82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$p88, out_$i90, out_$p91, out_$i92, out_$i93, out_$i94, out_$i113, out_$p114, out_$i115, out_$i116, out_$p117, out_$p118, out_$p119, out_$p120, out_$p121, out_$p122, out_$i123, out_$i124, out_$i125, out_$p126, out_$p127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$p133, out_$i135, out_$i136, out_$i137, out_$p138, out_$p139, out_$p140, out_$p141, out_$p142, out_$p143, out_$i144, out_$i145, out_$i146, out_$p147, out_$p148, out_$i149, out_$i150, out_$i151, out_$i152, out_$i153, out_$p154, out_$i156, out_$i157, out_$p158, out_$p159, out_$p160, out_$p161, out_$p162, out_$p163, out_$i164, out_$i165, out_$i166, out_$p167, out_$p168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i173, out_$p174, out_$i176, out_$p177, out_$i178, out_$i179, out_$i180, out_$i69, out_vslice_dummy_var_91, out_vslice_dummy_var_93, out_vslice_dummy_var_94, out_vslice_dummy_var_95 := xpc_discovery_loop_$bb41(in_$p1, in_$p3, in_$p5, in_$p6, in_$p7, in_$p12, in_$p19, out_$i67, out_$i70, out_$i71, out_$p72, out_$p73, out_$p74, out_$p75, out_$p76, out_$p77, out_$i78, out_$i79, out_$i80, out_$p81, out_$p82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$p88, out_$i90, out_$p91, out_$i92, out_$i93, out_$i94, out_$i113, out_$p114, out_$i115, out_$i116, out_$p117, out_$p118, out_$p119, out_$p120, out_$p121, out_$p122, out_$i123, out_$i124, out_$i125, out_$p126, out_$p127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$p133, out_$i135, out_$i136, out_$i137, out_$p138, out_$p139, out_$p140, out_$p141, out_$p142, out_$p143, out_$i144, out_$i145, out_$i146, out_$p147, out_$p148, out_$i149, out_$i150, out_$i151, out_$i152, out_$i153, out_$p154, out_$i156, out_$i157, out_$p158, out_$p159, out_$p160, out_$p161, out_$p162, out_$p163, out_$i164, out_$i165, out_$i166, out_$p167, out_$p168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i173, out_$p174, out_$i176, out_$p177, out_$i178, out_$i179, out_$i180, out_$i69, out_vslice_dummy_var_91, out_vslice_dummy_var_93, out_vslice_dummy_var_94, out_vslice_dummy_var_95);
    goto $bb41_last;

  $bb41_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6197;

  corral_source_split_6195:
    assume {:verifier.code 0} true;
    out_$i69 := out_$i64;
    goto $bb41;

  $bb78:
    assume out_$i180 == 1;
    assume {:verifier.code 0} true;
    out_$i69 := out_$i179;
    assume false;
    return;

  corral_source_split_6301:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  corral_source_split_6300:
    assume {:verifier.code 0} true;
    out_$i180 := $sgt.i32(out_$i67, out_$i179);
    goto corral_source_split_6301;

  $bb61:
    assume {:verifier.code 0} true;
    out_$i179 := $add.i32(out_$i69, 2);
    call {:si_unique_call 1279} {:cexpr "nasid"} boogie_si_record_i32(out_$i179);
    goto corral_source_split_6300;

  corral_source_split_6371:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb59:
    assume !(out_$i132 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  corral_source_split_6298:
    assume {:verifier.code 0} true;
    goto $bb60;

  corral_source_split_6297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1278} out_vslice_dummy_var_93 := __dynamic_dev_dbg.ref.ref.ref.i32(in_$p5, out_$p133, .str.50, out_$i69);
    goto corral_source_split_6298;

  corral_source_split_6296:
    assume {:verifier.code 0} true;
    out_$p133 := $M.5;
    goto corral_source_split_6297;

  $bb58:
    assume out_$i132 == 1;
    goto corral_source_split_6296;

  corral_source_split_6294:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  corral_source_split_6293:
    assume {:verifier.code 0} true;
    out_$i132 := $ne.i64(out_$i131, 0);
    goto corral_source_split_6294;

  corral_source_split_6292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1276} out_$i131 := ldv__builtin_expect(out_$i130, 0);
    call {:si_unique_call 1277} {:cexpr "tmp___6"} boogie_si_record_i64(out_$i131);
    goto corral_source_split_6293;

  corral_source_split_6291:
    assume {:verifier.code 0} true;
    out_$i130 := $and.i64(out_$i129, 1);
    goto corral_source_split_6292;

  corral_source_split_6290:
    assume {:verifier.code 0} true;
    out_$i129 := $zext.i8.i64(out_$i128);
    goto corral_source_split_6291;

  corral_source_split_6289:
    assume {:verifier.code 0} true;
    out_$i128 := $load.i8($M.13, out_$p127);
    goto corral_source_split_6290;

  corral_source_split_6288:
    assume {:verifier.code 0} true;
    out_$p127 := $add.ref($add.ref(in_$p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6289;

  corral_source_split_6287:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, out_$p126, 0);
    goto corral_source_split_6288;

  corral_source_split_6286:
    assume {:verifier.code 0} true;
    out_$p126 := $add.ref($add.ref(in_$p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6287;

  corral_source_split_6285:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, out_$p122, out_$i125);
    goto corral_source_split_6286;

  corral_source_split_6284:
    assume {:verifier.code 0} true;
    out_$i125 := $or.i24(out_$i124, 540);
    goto corral_source_split_6285;

  corral_source_split_6283:
    assume {:verifier.code 0} true;
    out_$i124 := $and.i24(out_$i123, $sub.i24(0, 262144));
    goto corral_source_split_6284;

  corral_source_split_6282:
    assume {:verifier.code 0} true;
    out_$i123 := $load.i24($M.12, out_$p122);
    goto corral_source_split_6283;

  corral_source_split_6281:
    assume {:verifier.code 0} true;
    out_$p122 := $bitcast.ref.ref(out_$p121);
    goto corral_source_split_6282;

  corral_source_split_6280:
    assume {:verifier.code 0} true;
    out_$p121 := $add.ref($add.ref(in_$p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6281;

  corral_source_split_6279:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, out_$p120, .str.50);
    goto corral_source_split_6280;

  corral_source_split_6278:
    assume {:verifier.code 0} true;
    out_$p120 := $add.ref($add.ref(in_$p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6279;

  corral_source_split_6277:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, out_$p119, .str.38);
    goto corral_source_split_6278;

  corral_source_split_6276:
    assume {:verifier.code 0} true;
    out_$p119 := $add.ref($add.ref(in_$p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6277;

  corral_source_split_6275:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, out_$p118, .str.18);
    goto corral_source_split_6276;

  corral_source_split_6274:
    assume {:verifier.code 0} true;
    out_$p118 := $add.ref($add.ref(in_$p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6275;

  corral_source_split_6273:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, out_$p117, .str);
    goto corral_source_split_6274;

  corral_source_split_6272:
    assume {:verifier.code 0} true;
    out_$p117 := $add.ref($add.ref(in_$p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6273;

  $bb56:
    assume out_$i116 == 1;
    goto corral_source_split_6272;

  corral_source_split_6270:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  corral_source_split_6269:
    assume {:verifier.code 0} true;
    out_$i116 := $eq.i32(out_$i115, 0);
    goto corral_source_split_6270;

  corral_source_split_6268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1274} out_$i115 := variable_test_bit(out_$i113, out_$p114);
    call {:si_unique_call 1275} {:cexpr "tmp___7"} boogie_si_record_i32(out_$i115);
    goto corral_source_split_6269;

  corral_source_split_6267:
    assume {:verifier.code 0} true;
    out_$p114 := $M.37;
    goto corral_source_split_6268;

  $bb55:
    assume {:verifier.code 0} true;
    out_$i113 := $sdiv.i32(out_$i69, 2);
    goto corral_source_split_6267;

  $bb51:
    assume !(out_$i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  corral_source_split_6237:
    assume {:verifier.code 0} true;
    out_$i94 := out_$i69;
    assume true;
    goto $bb50, $bb51;

  corral_source_split_6236:
    assume {:verifier.code 0} true;
    out_$i93 := $ne.i32(out_$i92, 0);
    goto corral_source_split_6237;

  corral_source_split_6235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1269} out_$i92 := variable_test_bit(out_$i90, out_$p91);
    call {:si_unique_call 1270} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i92);
    goto corral_source_split_6236;

  corral_source_split_6234:
    assume {:verifier.code 0} true;
    out_$p91 := $M.36;
    goto corral_source_split_6235;

  $bb49:
    assume {:verifier.code 0} true;
    out_$i90 := $sdiv.i32(out_$i69, 2);
    goto corral_source_split_6234;

  $bb48:
    assume !(out_$i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  corral_source_split_6232:
    assume {:verifier.code 0} true;
    goto $bb49;

  corral_source_split_6231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1268} out_vslice_dummy_var_91 := __dynamic_dev_dbg.ref.ref.ref.i32(in_$p3, out_$p88, .str.48, out_$i69);
    goto corral_source_split_6232;

  corral_source_split_6230:
    assume {:verifier.code 0} true;
    out_$p88 := $M.5;
    goto corral_source_split_6231;

  $bb47:
    assume out_$i87 == 1;
    goto corral_source_split_6230;

  corral_source_split_6228:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  corral_source_split_6227:
    assume {:verifier.code 0} true;
    out_$i87 := $ne.i64(out_$i86, 0);
    goto corral_source_split_6228;

  corral_source_split_6226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1266} out_$i86 := ldv__builtin_expect(out_$i85, 0);
    call {:si_unique_call 1267} {:cexpr "tmp___3"} boogie_si_record_i64(out_$i86);
    goto corral_source_split_6227;

  corral_source_split_6225:
    assume {:verifier.code 0} true;
    out_$i85 := $and.i64(out_$i84, 1);
    goto corral_source_split_6226;

  corral_source_split_6224:
    assume {:verifier.code 0} true;
    out_$i84 := $zext.i8.i64(out_$i83);
    goto corral_source_split_6225;

  corral_source_split_6223:
    assume {:verifier.code 0} true;
    out_$i83 := $load.i8($M.13, out_$p82);
    goto corral_source_split_6224;

  corral_source_split_6222:
    assume {:verifier.code 0} true;
    out_$p82 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6223;

  corral_source_split_6221:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, out_$p81, 0);
    goto corral_source_split_6222;

  corral_source_split_6220:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6221;

  corral_source_split_6219:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, out_$p77, out_$i80);
    goto corral_source_split_6220;

  corral_source_split_6218:
    assume {:verifier.code 0} true;
    out_$i80 := $or.i24(out_$i79, 528);
    goto corral_source_split_6219;

  corral_source_split_6217:
    assume {:verifier.code 0} true;
    out_$i79 := $and.i24(out_$i78, $sub.i24(0, 262144));
    goto corral_source_split_6218;

  corral_source_split_6216:
    assume {:verifier.code 0} true;
    out_$i78 := $load.i24($M.12, out_$p77);
    goto corral_source_split_6217;

  corral_source_split_6215:
    assume {:verifier.code 0} true;
    out_$p77 := $bitcast.ref.ref(out_$p76);
    goto corral_source_split_6216;

  corral_source_split_6214:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6215;

  corral_source_split_6213:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, out_$p75, .str.48);
    goto corral_source_split_6214;

  corral_source_split_6212:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6213;

  corral_source_split_6211:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, out_$p74, .str.38);
    goto corral_source_split_6212;

  corral_source_split_6210:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6211;

  corral_source_split_6209:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, out_$p73, .str.18);
    goto corral_source_split_6210;

  corral_source_split_6208:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6209;

  corral_source_split_6207:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, out_$p72, .str);
    goto corral_source_split_6208;

  $bb46:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6207;

  $bb44:
    assume !(out_$i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb66:
    assume !(out_$i153 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  corral_source_split_6333:
    assume {:verifier.code 0} true;
    goto $bb67;

  corral_source_split_6332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1284} out_vslice_dummy_var_94 := __dynamic_dev_dbg.ref.ref.ref.i32(in_$p6, out_$p154, .str.51, out_$i69);
    goto corral_source_split_6333;

  corral_source_split_6331:
    assume {:verifier.code 0} true;
    out_$p154 := $M.5;
    goto corral_source_split_6332;

  $bb65:
    assume out_$i153 == 1;
    goto corral_source_split_6331;

  corral_source_split_6329:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  corral_source_split_6328:
    assume {:verifier.code 0} true;
    out_$i153 := $ne.i64(out_$i152, 0);
    goto corral_source_split_6329;

  corral_source_split_6327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1282} out_$i152 := ldv__builtin_expect(out_$i151, 0);
    call {:si_unique_call 1283} {:cexpr "tmp___8"} boogie_si_record_i64(out_$i152);
    goto corral_source_split_6328;

  corral_source_split_6326:
    assume {:verifier.code 0} true;
    out_$i151 := $and.i64(out_$i150, 1);
    goto corral_source_split_6327;

  corral_source_split_6325:
    assume {:verifier.code 0} true;
    out_$i150 := $zext.i8.i64(out_$i149);
    goto corral_source_split_6326;

  corral_source_split_6324:
    assume {:verifier.code 0} true;
    out_$i149 := $load.i8($M.13, out_$p148);
    goto corral_source_split_6325;

  corral_source_split_6323:
    assume {:verifier.code 0} true;
    out_$p148 := $add.ref($add.ref(in_$p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6324;

  corral_source_split_6322:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, out_$p147, 0);
    goto corral_source_split_6323;

  corral_source_split_6321:
    assume {:verifier.code 0} true;
    out_$p147 := $add.ref($add.ref(in_$p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6322;

  corral_source_split_6320:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, out_$p143, out_$i146);
    goto corral_source_split_6321;

  corral_source_split_6319:
    assume {:verifier.code 0} true;
    out_$i146 := $or.i24(out_$i145, 547);
    goto corral_source_split_6320;

  corral_source_split_6318:
    assume {:verifier.code 0} true;
    out_$i145 := $and.i24(out_$i144, $sub.i24(0, 262144));
    goto corral_source_split_6319;

  corral_source_split_6317:
    assume {:verifier.code 0} true;
    out_$i144 := $load.i24($M.12, out_$p143);
    goto corral_source_split_6318;

  corral_source_split_6316:
    assume {:verifier.code 0} true;
    out_$p143 := $bitcast.ref.ref(out_$p142);
    goto corral_source_split_6317;

  corral_source_split_6315:
    assume {:verifier.code 0} true;
    out_$p142 := $add.ref($add.ref(in_$p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6316;

  corral_source_split_6314:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, out_$p141, .str.51);
    goto corral_source_split_6315;

  corral_source_split_6313:
    assume {:verifier.code 0} true;
    out_$p141 := $add.ref($add.ref(in_$p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6314;

  corral_source_split_6312:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, out_$p140, .str.38);
    goto corral_source_split_6313;

  corral_source_split_6311:
    assume {:verifier.code 0} true;
    out_$p140 := $add.ref($add.ref(in_$p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6312;

  corral_source_split_6310:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, out_$p139, .str.18);
    goto corral_source_split_6311;

  corral_source_split_6309:
    assume {:verifier.code 0} true;
    out_$p139 := $add.ref($add.ref(in_$p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6310;

  corral_source_split_6308:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, out_$p138, .str);
    goto corral_source_split_6309;

  corral_source_split_6307:
    assume {:verifier.code 0} true;
    out_$p138 := $add.ref($add.ref(in_$p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6308;

  $bb63:
    assume out_$i137 == 1;
    goto corral_source_split_6307;

  corral_source_split_6305:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  corral_source_split_6304:
    assume {:verifier.code 0} true;
    out_$i137 := $ne.i32(out_$i136, 0);
    goto corral_source_split_6305;

  corral_source_split_6303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1280} out_$i136 := variable_test_bit(out_$i135, in_$p19);
    call {:si_unique_call 1281} {:cexpr "tmp___9"} boogie_si_record_i32(out_$i136);
    goto corral_source_split_6304;

  $bb62:
    assume {:verifier.code 0} true;
    out_$i135 := $sdiv.i32(out_$i69, 2);
    goto corral_source_split_6303;

  $bb57:
    assume !(out_$i116 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb75:
    assume !(out_$i176 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  corral_source_split_6366:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb73:
    assume {:verifier.code 0} true;
    out_$i176 := $eq.i32(out_$i156, 43);
    goto corral_source_split_6366;

  $bb72:
    assume !(out_$i173 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  corral_source_split_6364:
    assume {:verifier.code 0} true;
    goto $bb73;

  corral_source_split_6363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1289} out_vslice_dummy_var_95 := __dynamic_dev_dbg.ref.ref.ref.i32.i32(in_$p7, out_$p174, .str.52, out_$i69, out_$i156);
    goto corral_source_split_6364;

  corral_source_split_6362:
    assume {:verifier.code 0} true;
    out_$p174 := $M.5;
    goto corral_source_split_6363;

  $bb71:
    assume out_$i173 == 1;
    goto corral_source_split_6362;

  corral_source_split_6360:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  corral_source_split_6359:
    assume {:verifier.code 0} true;
    out_$i173 := $ne.i64(out_$i172, 0);
    goto corral_source_split_6360;

  corral_source_split_6358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1287} out_$i172 := ldv__builtin_expect(out_$i171, 0);
    call {:si_unique_call 1288} {:cexpr "tmp___10"} boogie_si_record_i64(out_$i172);
    goto corral_source_split_6359;

  corral_source_split_6357:
    assume {:verifier.code 0} true;
    out_$i171 := $and.i64(out_$i170, 1);
    goto corral_source_split_6358;

  corral_source_split_6356:
    assume {:verifier.code 0} true;
    out_$i170 := $zext.i8.i64(out_$i169);
    goto corral_source_split_6357;

  corral_source_split_6355:
    assume {:verifier.code 0} true;
    out_$i169 := $load.i8($M.13, out_$p168);
    goto corral_source_split_6356;

  corral_source_split_6354:
    assume {:verifier.code 0} true;
    out_$p168 := $add.ref($add.ref(in_$p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6355;

  corral_source_split_6353:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, out_$p167, 0);
    goto corral_source_split_6354;

  corral_source_split_6352:
    assume {:verifier.code 0} true;
    out_$p167 := $add.ref($add.ref(in_$p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6353;

  corral_source_split_6351:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, out_$p163, out_$i166);
    goto corral_source_split_6352;

  corral_source_split_6350:
    assume {:verifier.code 0} true;
    out_$i166 := $or.i24(out_$i165, 558);
    goto corral_source_split_6351;

  corral_source_split_6349:
    assume {:verifier.code 0} true;
    out_$i165 := $and.i24(out_$i164, $sub.i24(0, 262144));
    goto corral_source_split_6350;

  corral_source_split_6348:
    assume {:verifier.code 0} true;
    out_$i164 := $load.i24($M.12, out_$p163);
    goto corral_source_split_6349;

  corral_source_split_6347:
    assume {:verifier.code 0} true;
    out_$p163 := $bitcast.ref.ref(out_$p162);
    goto corral_source_split_6348;

  corral_source_split_6346:
    assume {:verifier.code 0} true;
    out_$p162 := $add.ref($add.ref(in_$p7, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6347;

  corral_source_split_6345:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, out_$p161, .str.52);
    goto corral_source_split_6346;

  corral_source_split_6344:
    assume {:verifier.code 0} true;
    out_$p161 := $add.ref($add.ref(in_$p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6345;

  corral_source_split_6343:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, out_$p160, .str.38);
    goto corral_source_split_6344;

  corral_source_split_6342:
    assume {:verifier.code 0} true;
    out_$p160 := $add.ref($add.ref(in_$p7, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6343;

  corral_source_split_6341:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, out_$p159, .str.18);
    goto corral_source_split_6342;

  corral_source_split_6340:
    assume {:verifier.code 0} true;
    out_$p159 := $add.ref($add.ref(in_$p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6341;

  corral_source_split_6339:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, out_$p158, .str);
    goto corral_source_split_6340;

  corral_source_split_6338:
    assume {:verifier.code 0} true;
    out_$p158 := $add.ref($add.ref(in_$p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6339;

  $bb69:
    assume out_$i157 == 1;
    goto corral_source_split_6338;

  corral_source_split_6336:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  corral_source_split_6335:
    assume {:verifier.code 0} true;
    out_$i157 := $ne.i32(out_$i156, 0);
    goto corral_source_split_6336;

  $bb68:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1285} out_$i156 := xpc_get_remote_rp(out_$i69, in_$p19, in_$p12, in_$p1);
    call {:si_unique_call 1286} {:cexpr "ret"} boogie_si_record_i32(out_$i156);
    goto corral_source_split_6335;

  $bb64:
    assume !(out_$i137 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  SeqInstr_603:
    goto corral_source_split_6371;

  SeqInstr_602:
    assume assertsPassed;
    goto SeqInstr_603;

  corral_source_split_6370:
    assume {:verifier.code 0} true;
    out_$i178 := $load.i64($M.42, in_$p1);
    call {:si_unique_call 1290} devirtbounce.33(out_$p177, in_$p12, out_$i178, out_$i69);
    goto SeqInstr_602;

  $bb77:
    assume {:verifier.code 0} true;
    out_$p177 := $load.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(112, 1)));
    goto corral_source_split_6370;

  $bb70:
    assume !(out_$i157 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb38:
    assume out_$i68 == 1;
    goto corral_source_split_6195;

  corral_source_split_6193:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  corral_source_split_6192:
    assume {:verifier.code 0} true;
    out_$i68 := $sgt.i32(out_$i67, out_$i64);
    goto corral_source_split_6193;

  corral_source_split_6191:
    assume {:verifier.code 0} true;
    out_$i67 := $mul.i32(out_$i66, in_$i28);
    goto corral_source_split_6192;

  corral_source_split_6190:
    assume {:verifier.code 0} true;
    out_$i66 := $mul.i32(out_$i65, 2);
    goto corral_source_split_6191;

  corral_source_split_6189:
    assume {:verifier.code 0} true;
    out_$i65 := $add.i32(out_$i42, 1);
    goto corral_source_split_6190;

  corral_source_split_6188:
    assume {:verifier.code 0} true;
    out_$i64 := $mul.i32(out_$i63, 2);
    call {:si_unique_call 1264} {:cexpr "nasid"} boogie_si_record_i32(out_$i64);
    goto corral_source_split_6189;

  $bb37:
    assume {:verifier.code 0} true;
    out_$i63 := $mul.i32(out_$i42, in_$i28);
    goto corral_source_split_6188;

  $bb36:
    assume !(out_$i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  corral_source_split_6186:
    assume {:verifier.code 0} true;
    goto $bb37;

  corral_source_split_6185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1263} out_vslice_dummy_var_90 := __dynamic_dev_dbg.ref.ref.ref.i32(in_$p2, out_$p61, .str.47, out_$i42);
    goto corral_source_split_6186;

  corral_source_split_6184:
    assume {:verifier.code 0} true;
    out_$p61 := $M.5;
    goto corral_source_split_6185;

  $bb35:
    assume out_$i60 == 1;
    goto corral_source_split_6184;

  corral_source_split_6182:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  corral_source_split_6181:
    assume {:verifier.code 0} true;
    out_$i60 := $ne.i64(out_$i59, 0);
    goto corral_source_split_6182;

  corral_source_split_6180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1261} out_$i59 := ldv__builtin_expect(out_$i58, 0);
    call {:si_unique_call 1262} {:cexpr "tmp___2"} boogie_si_record_i64(out_$i59);
    goto corral_source_split_6181;

  corral_source_split_6179:
    assume {:verifier.code 0} true;
    out_$i58 := $and.i64(out_$i57, 1);
    goto corral_source_split_6180;

  corral_source_split_6178:
    assume {:verifier.code 0} true;
    out_$i57 := $zext.i8.i64(out_$i56);
    goto corral_source_split_6179;

  corral_source_split_6177:
    assume {:verifier.code 0} true;
    out_$i56 := $load.i8($M.13, out_$p55);
    goto corral_source_split_6178;

  corral_source_split_6176:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6177;

  corral_source_split_6175:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, out_$p54, 0);
    goto corral_source_split_6176;

  corral_source_split_6174:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6175;

  corral_source_split_6173:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, out_$p50, out_$i53);
    goto corral_source_split_6174;

  corral_source_split_6172:
    assume {:verifier.code 0} true;
    out_$i53 := $or.i24(out_$i52, 520);
    goto corral_source_split_6173;

  corral_source_split_6171:
    assume {:verifier.code 0} true;
    out_$i52 := $and.i24(out_$i51, $sub.i24(0, 262144));
    goto corral_source_split_6172;

  corral_source_split_6170:
    assume {:verifier.code 0} true;
    out_$i51 := $load.i24($M.12, out_$p50);
    goto corral_source_split_6171;

  corral_source_split_6169:
    assume {:verifier.code 0} true;
    out_$p50 := $bitcast.ref.ref(out_$p49);
    goto corral_source_split_6170;

  corral_source_split_6168:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6169;

  corral_source_split_6167:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, out_$p48, .str.47);
    goto corral_source_split_6168;

  corral_source_split_6166:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6167;

  corral_source_split_6165:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, out_$p47, .str.38);
    goto corral_source_split_6166;

  corral_source_split_6164:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6165;

  corral_source_split_6163:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, out_$p46, .str.18);
    goto corral_source_split_6164;

  corral_source_split_6162:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6163;

  corral_source_split_6161:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, out_$p45, .str);
    goto corral_source_split_6162;

  $bb34:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6161;

  $bb32:
    assume !(out_$i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32;

  corral_source_split_6151:
    assume {:verifier.code 0} true;
    out_$i44 := $ne.i32(out_$i43, 0);
    goto corral_source_split_6152;

  $bb30:
    assume {:verifier.code 0} true;
    out_$i43 := $M.0;
    goto corral_source_split_6151;

  corral_source_split_6149:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb53:
    assume !(out_$i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  corral_source_split_6265:
    assume {:verifier.code 0} true;
    goto $bb54;

  corral_source_split_6264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1273} out_vslice_dummy_var_92 := __dynamic_dev_dbg.ref.ref.ref.i32(in_$p4, out_$p111, .str.49, out_$i94);
    goto corral_source_split_6265;

  corral_source_split_6263:
    assume {:verifier.code 0} true;
    out_$p111 := $M.5;
    goto corral_source_split_6264;

  $bb52:
    assume out_$i110 == 1;
    goto corral_source_split_6263;

  corral_source_split_6261:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  corral_source_split_6260:
    assume {:verifier.code 0} true;
    out_$i110 := $ne.i64(out_$i109, 0);
    goto corral_source_split_6261;

  corral_source_split_6259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1271} out_$i109 := ldv__builtin_expect(out_$i108, 0);
    call {:si_unique_call 1272} {:cexpr "tmp___4"} boogie_si_record_i64(out_$i109);
    goto corral_source_split_6260;

  corral_source_split_6258:
    assume {:verifier.code 0} true;
    out_$i108 := $and.i64(out_$i107, 1);
    goto corral_source_split_6259;

  corral_source_split_6257:
    assume {:verifier.code 0} true;
    out_$i107 := $zext.i8.i64(out_$i106);
    goto corral_source_split_6258;

  corral_source_split_6256:
    assume {:verifier.code 0} true;
    out_$i106 := $load.i8($M.13, out_$p105);
    goto corral_source_split_6257;

  corral_source_split_6255:
    assume {:verifier.code 0} true;
    out_$p105 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6256;

  corral_source_split_6254:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, out_$p104, 0);
    goto corral_source_split_6255;

  corral_source_split_6253:
    assume {:verifier.code 0} true;
    out_$p104 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6254;

  corral_source_split_6252:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, out_$p100, out_$i103);
    goto corral_source_split_6253;

  corral_source_split_6251:
    assume {:verifier.code 0} true;
    out_$i103 := $or.i24(out_$i102, 533);
    goto corral_source_split_6252;

  corral_source_split_6250:
    assume {:verifier.code 0} true;
    out_$i102 := $and.i24(out_$i101, $sub.i24(0, 262144));
    goto corral_source_split_6251;

  corral_source_split_6249:
    assume {:verifier.code 0} true;
    out_$i101 := $load.i24($M.12, out_$p100);
    goto corral_source_split_6250;

  corral_source_split_6248:
    assume {:verifier.code 0} true;
    out_$p100 := $bitcast.ref.ref(out_$p99);
    goto corral_source_split_6249;

  corral_source_split_6247:
    assume {:verifier.code 0} true;
    out_$p99 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6248;

  corral_source_split_6246:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, out_$p98, .str.49);
    goto corral_source_split_6247;

  corral_source_split_6245:
    assume {:verifier.code 0} true;
    out_$p98 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6246;

  corral_source_split_6244:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, out_$p97, .str.38);
    goto corral_source_split_6245;

  corral_source_split_6243:
    assume {:verifier.code 0} true;
    out_$p97 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6244;

  corral_source_split_6242:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, out_$p96, .str.18);
    goto corral_source_split_6243;

  corral_source_split_6241:
    assume {:verifier.code 0} true;
    out_$p96 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6242;

  corral_source_split_6240:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, out_$p95, .str);
    goto corral_source_split_6241;

  corral_source_split_6239:
    assume {:verifier.code 0} true;
    out_$p95 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6240;

  $bb50:
    assume out_$i93 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_6239;

  $bb74:
    assume out_$i176 == 1;
    goto corral_source_split_6368;

  $bb39:
    assume {:verifier.code 0} true;
    assume !(out_$i68 == 1);
    goto $bb40;

  corral_source_split_6373:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb79:
    assume !(out_$i180 == 1);
    goto corral_source_split_6373;

  $bb80_dummy:
    call {:si_unique_call 1} out_$i43, out_$i44, out_$p45, out_$p46, out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$i53, out_$p54, out_$p55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p61, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i70, out_$i71, out_$p72, out_$p73, out_$p74, out_$p75, out_$p76, out_$p77, out_$i78, out_$i79, out_$i80, out_$p81, out_$p82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$p88, out_$i90, out_$p91, out_$i92, out_$i93, out_$i94, out_$p95, out_$p96, out_$p97, out_$p98, out_$p99, out_$p100, out_$i101, out_$i102, out_$i103, out_$p104, out_$p105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$p111, out_$i113, out_$p114, out_$i115, out_$i116, out_$p117, out_$p118, out_$p119, out_$p120, out_$p121, out_$p122, out_$i123, out_$i124, out_$i125, out_$p126, out_$p127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$p133, out_$i135, out_$i136, out_$i137, out_$p138, out_$p139, out_$p140, out_$p141, out_$p142, out_$p143, out_$i144, out_$i145, out_$i146, out_$p147, out_$p148, out_$i149, out_$i150, out_$i151, out_$i152, out_$i153, out_$p154, out_$i156, out_$i157, out_$p158, out_$p159, out_$p160, out_$p161, out_$p162, out_$p163, out_$i164, out_$i165, out_$i166, out_$p167, out_$p168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i173, out_$p174, out_$i176, out_$p177, out_$i178, out_$i179, out_$i180, out_$i69, out_$i181, out_$i182, out_$i42, out_vslice_dummy_var_90, out_vslice_dummy_var_91, out_vslice_dummy_var_92, out_vslice_dummy_var_93, out_vslice_dummy_var_94, out_vslice_dummy_var_95 := xpc_discovery_loop_$bb29(in_$p1, in_$p2, in_$p3, in_$p4, in_$p5, in_$p6, in_$p7, in_$p12, in_$p19, in_$i27, in_$i28, out_$i43, out_$i44, out_$p45, out_$p46, out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$i53, out_$p54, out_$p55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p61, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i70, out_$i71, out_$p72, out_$p73, out_$p74, out_$p75, out_$p76, out_$p77, out_$i78, out_$i79, out_$i80, out_$p81, out_$p82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$p88, out_$i90, out_$p91, out_$i92, out_$i93, out_$i94, out_$p95, out_$p96, out_$p97, out_$p98, out_$p99, out_$p100, out_$i101, out_$i102, out_$i103, out_$p104, out_$p105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$p111, out_$i113, out_$p114, out_$i115, out_$i116, out_$p117, out_$p118, out_$p119, out_$p120, out_$p121, out_$p122, out_$i123, out_$i124, out_$i125, out_$p126, out_$p127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$p133, out_$i135, out_$i136, out_$i137, out_$p138, out_$p139, out_$p140, out_$p141, out_$p142, out_$p143, out_$i144, out_$i145, out_$i146, out_$p147, out_$p148, out_$i149, out_$i150, out_$i151, out_$i152, out_$i153, out_$p154, out_$i156, out_$i157, out_$p158, out_$p159, out_$p160, out_$p161, out_$p162, out_$p163, out_$i164, out_$i165, out_$i166, out_$p167, out_$p168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i173, out_$p174, out_$i176, out_$p177, out_$i178, out_$i179, out_$i180, out_$i69, out_$i181, out_$i182, out_$i42, out_vslice_dummy_var_90, out_vslice_dummy_var_91, out_vslice_dummy_var_92, out_vslice_dummy_var_93, out_vslice_dummy_var_94, out_vslice_dummy_var_95);
    return;

  exit:
    return;
}



procedure xpc_discovery_loop_$bb29(in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p12: ref, in_$p19: ref, in_$i27: i32, in_$i28: i32, in_$i43: i32, in_$i44: i1, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$i51: i24, in_$i52: i24, in_$i53: i24, in_$p54: ref, in_$p55: ref, in_$i56: i8, in_$i57: i64, in_$i58: i64, in_$i59: i64, in_$i60: i1, in_$p61: ref, in_$i63: i32, in_$i64: i32, in_$i65: i32, in_$i66: i32, in_$i67: i32, in_$i68: i1, in_$i70: i32, in_$i71: i1, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$p77: ref, in_$i78: i24, in_$i79: i24, in_$i80: i24, in_$p81: ref, in_$p82: ref, in_$i83: i8, in_$i84: i64, in_$i85: i64, in_$i86: i64, in_$i87: i1, in_$p88: ref, in_$i90: i32, in_$p91: ref, in_$i92: i32, in_$i93: i1, in_$i94: i32, in_$p95: ref, in_$p96: ref, in_$p97: ref, in_$p98: ref, in_$p99: ref, in_$p100: ref, in_$i101: i24, in_$i102: i24, in_$i103: i24, in_$p104: ref, in_$p105: ref, in_$i106: i8, in_$i107: i64, in_$i108: i64, in_$i109: i64, in_$i110: i1, in_$p111: ref, in_$i113: i32, in_$p114: ref, in_$i115: i32, in_$i116: i1, in_$p117: ref, in_$p118: ref, in_$p119: ref, in_$p120: ref, in_$p121: ref, in_$p122: ref, in_$i123: i24, in_$i124: i24, in_$i125: i24, in_$p126: ref, in_$p127: ref, in_$i128: i8, in_$i129: i64, in_$i130: i64, in_$i131: i64, in_$i132: i1, in_$p133: ref, in_$i135: i32, in_$i136: i32, in_$i137: i1, in_$p138: ref, in_$p139: ref, in_$p140: ref, in_$p141: ref, in_$p142: ref, in_$p143: ref, in_$i144: i24, in_$i145: i24, in_$i146: i24, in_$p147: ref, in_$p148: ref, in_$i149: i8, in_$i150: i64, in_$i151: i64, in_$i152: i64, in_$i153: i1, in_$p154: ref, in_$i156: i32, in_$i157: i1, in_$p158: ref, in_$p159: ref, in_$p160: ref, in_$p161: ref, in_$p162: ref, in_$p163: ref, in_$i164: i24, in_$i165: i24, in_$i166: i24, in_$p167: ref, in_$p168: ref, in_$i169: i8, in_$i170: i64, in_$i171: i64, in_$i172: i64, in_$i173: i1, in_$p174: ref, in_$i176: i1, in_$p177: ref, in_$i178: i64, in_$i179: i32, in_$i180: i1, in_$i69: i32, in_$i181: i32, in_$i182: i1, in_$i42: i32, in_vslice_dummy_var_90: i32, in_vslice_dummy_var_91: i32, in_vslice_dummy_var_92: i32, in_vslice_dummy_var_93: i32, in_vslice_dummy_var_94: i32, in_vslice_dummy_var_95: i32) returns (out_$i43: i32, out_$i44: i1, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$i51: i24, out_$i52: i24, out_$i53: i24, out_$p54: ref, out_$p55: ref, out_$i56: i8, out_$i57: i64, out_$i58: i64, out_$i59: i64, out_$i60: i1, out_$p61: ref, out_$i63: i32, out_$i64: i32, out_$i65: i32, out_$i66: i32, out_$i67: i32, out_$i68: i1, out_$i70: i32, out_$i71: i1, out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$p77: ref, out_$i78: i24, out_$i79: i24, out_$i80: i24, out_$p81: ref, out_$p82: ref, out_$i83: i8, out_$i84: i64, out_$i85: i64, out_$i86: i64, out_$i87: i1, out_$p88: ref, out_$i90: i32, out_$p91: ref, out_$i92: i32, out_$i93: i1, out_$i94: i32, out_$p95: ref, out_$p96: ref, out_$p97: ref, out_$p98: ref, out_$p99: ref, out_$p100: ref, out_$i101: i24, out_$i102: i24, out_$i103: i24, out_$p104: ref, out_$p105: ref, out_$i106: i8, out_$i107: i64, out_$i108: i64, out_$i109: i64, out_$i110: i1, out_$p111: ref, out_$i113: i32, out_$p114: ref, out_$i115: i32, out_$i116: i1, out_$p117: ref, out_$p118: ref, out_$p119: ref, out_$p120: ref, out_$p121: ref, out_$p122: ref, out_$i123: i24, out_$i124: i24, out_$i125: i24, out_$p126: ref, out_$p127: ref, out_$i128: i8, out_$i129: i64, out_$i130: i64, out_$i131: i64, out_$i132: i1, out_$p133: ref, out_$i135: i32, out_$i136: i32, out_$i137: i1, out_$p138: ref, out_$p139: ref, out_$p140: ref, out_$p141: ref, out_$p142: ref, out_$p143: ref, out_$i144: i24, out_$i145: i24, out_$i146: i24, out_$p147: ref, out_$p148: ref, out_$i149: i8, out_$i150: i64, out_$i151: i64, out_$i152: i64, out_$i153: i1, out_$p154: ref, out_$i156: i32, out_$i157: i1, out_$p158: ref, out_$p159: ref, out_$p160: ref, out_$p161: ref, out_$p162: ref, out_$p163: ref, out_$i164: i24, out_$i165: i24, out_$i166: i24, out_$p167: ref, out_$p168: ref, out_$i169: i8, out_$i170: i64, out_$i171: i64, out_$i172: i64, out_$i173: i1, out_$p174: ref, out_$i176: i1, out_$p177: ref, out_$i178: i64, out_$i179: i32, out_$i180: i1, out_$i69: i32, out_$i181: i32, out_$i182: i1, out_$i42: i32, out_vslice_dummy_var_90: i32, out_vslice_dummy_var_91: i32, out_vslice_dummy_var_92: i32, out_vslice_dummy_var_93: i32, out_vslice_dummy_var_94: i32, out_vslice_dummy_var_95: i32);
  modifies $M.13, $M.12, $M.11, $M.10, $M.9, $M.8, $M.1, $M.42, $M.43, $M.44, $M.45, $M.41, $CurrAddr, $M.23, $M.28, assertsPassed, $M.0, $M.2;



implementation xpc_get_remote_rp_loop_$bb13(in_$p1: ref, in_$p20: ref, in_$i25: i64, in_$p26: ref, in_$i27: i64, in_$i28: i64, in_$i29: i64, in_$p30: ref, in_$i31: i64, in_$i32: i64, in_$i33: i64, in_$p34: ref, in_$i35: i32, in_$i36: i32, in_$i37: i1, in_$i24: i32) returns (out_$i25: i64, out_$p26: ref, out_$i27: i64, out_$i28: i64, out_$i29: i64, out_$p30: ref, out_$i31: i64, out_$i32: i64, out_$i33: i64, out_$p34: ref, out_$i35: i32, out_$i36: i32, out_$i37: i1, out_$i24: i32)
{

  entry:
    out_$i25, out_$p26, out_$i27, out_$i28, out_$i29, out_$p30, out_$i31, out_$i32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i24 := in_$i25, in_$p26, in_$i27, in_$i28, in_$i29, in_$p30, in_$i31, in_$i32, in_$i33, in_$p34, in_$i35, in_$i36, in_$i37, in_$i24;
    goto $bb13, exit;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_6448;

  $bb15:
    assume out_$i37 == 1;
    assume {:verifier.code 0} true;
    out_$i24 := out_$i35;
    goto $bb15_dummy;

  corral_source_split_6462:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15;

  corral_source_split_6461:
    assume {:verifier.code 0} true;
    out_$i37 := $slt.i32(out_$i35, out_$i36);
    goto corral_source_split_6462;

  corral_source_split_6460:
    assume {:verifier.code 0} true;
    out_$i36 := $M.35;
    goto corral_source_split_6461;

  corral_source_split_6459:
    assume {:verifier.code 0} true;
    out_$i35 := $add.i32(out_$i24, 1);
    call {:si_unique_call 1302} {:cexpr "l"} boogie_si_record_i32(out_$i35);
    goto corral_source_split_6460;

  corral_source_split_6458:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, out_$p34, out_$i32);
    goto corral_source_split_6459;

  corral_source_split_6457:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref(in_$p1, $mul.ref(out_$i33, 8));
    goto corral_source_split_6458;

  corral_source_split_6456:
    assume {:verifier.code 0} true;
    out_$i33 := $sext.i32.i64(out_$i24);
    goto corral_source_split_6457;

  corral_source_split_6455:
    assume {:verifier.code 0} true;
    out_$i32 := $or.i64(out_$i27, out_$i31);
    goto corral_source_split_6456;

  corral_source_split_6454:
    assume {:verifier.code 0} true;
    out_$i31 := $load.i64($M.1, out_$p30);
    goto corral_source_split_6455;

  corral_source_split_6453:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref(in_$p20, $mul.ref(out_$i29, 8));
    goto corral_source_split_6454;

  corral_source_split_6452:
    assume {:verifier.code 0} true;
    out_$i28 := $sext.i32.i64(out_$i24);
    out_$i29 := $add.i64(128, out_$i28);
    goto corral_source_split_6453;

  corral_source_split_6451:
    assume {:verifier.code 0} true;
    out_$i27 := $load.i64($M.1, out_$p26);
    goto corral_source_split_6452;

  corral_source_split_6450:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref(in_$p1, $mul.ref(out_$i25, 8));
    goto corral_source_split_6451;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i25 := $sext.i32.i64(out_$i24);
    goto corral_source_split_6450;

  corral_source_split_6448:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb15_dummy:
    call {:si_unique_call 1} out_$i25, out_$p26, out_$i27, out_$i28, out_$i29, out_$p30, out_$i31, out_$i32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i24 := xpc_get_remote_rp_loop_$bb13(in_$p1, in_$p20, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29, out_$p30, out_$i31, out_$i32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i24);
    return;

  exit:
    return;
}



procedure xpc_get_remote_rp_loop_$bb13(in_$p1: ref, in_$p20: ref, in_$i25: i64, in_$p26: ref, in_$i27: i64, in_$i28: i64, in_$i29: i64, in_$p30: ref, in_$i31: i64, in_$i32: i64, in_$i33: i64, in_$p34: ref, in_$i35: i32, in_$i36: i32, in_$i37: i1, in_$i24: i32) returns (out_$i25: i64, out_$p26: ref, out_$i27: i64, out_$i28: i64, out_$i29: i64, out_$p30: ref, out_$i31: i64, out_$i32: i64, out_$i33: i64, out_$p34: ref, out_$i35: i32, out_$i36: i32, out_$i37: i1, out_$i24: i32);
  modifies $M.1;



implementation xpc_get_rsvd_page_pa_loop_$bb1(in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p9: ref, in_$i10: i64, in_$p11: ref, in_$i12: i32, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$i19: i24, in_$i20: i24, in_$i21: i24, in_$p22: ref, in_$p23: ref, in_$i24: i8, in_$i25: i64, in_$i26: i64, in_$i27: i64, in_$i28: i1, in_$p29: ref, in_$i30: i64, in_$i31: i64, in_$i32: i64, in_$i34: i1, in_$i35: i32, in_$i37: i64, in_$i38: i1, in_$p39: ref, in_$i40: i64, in_$i41: i1, in_$p42: ref, in_$i43: i64, in_$i44: i64, in_$i45: i64, in_$p46: ref, in_$p47: ref, in_$i48: i64, in_$i49: i1, in_$i50: i64, in_$i53: i64, in_$p54: ref, in_$p55: ref, in_$i56: i64, in_$p57: ref, in_$i58: i64, in_$i59: i64, in_$i60: i32, in_$i61: i1, in_$i62: i32, in_vslice_dummy_var_96: i32) returns (out_$i10: i64, out_$p11: ref, out_$i12: i32, out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$i19: i24, out_$i20: i24, out_$i21: i24, out_$p22: ref, out_$p23: ref, out_$i24: i8, out_$i25: i64, out_$i26: i64, out_$i27: i64, out_$i28: i1, out_$p29: ref, out_$i30: i64, out_$i31: i64, out_$i32: i64, out_$i34: i1, out_$i35: i32, out_$i37: i64, out_$i38: i1, out_$p39: ref, out_$i40: i64, out_$i41: i1, out_$p42: ref, out_$i43: i64, out_$i44: i64, out_$i45: i64, out_$p46: ref, out_$p47: ref, out_$i48: i64, out_$i49: i1, out_$i50: i64, out_$i53: i64, out_$p54: ref, out_$p55: ref, out_$i56: i64, out_$p57: ref, out_$i58: i64, out_$i59: i64, out_$i60: i32, out_$i61: i1, out_$i62: i32, out_vslice_dummy_var_96: i32)
{

  entry:
    out_$i10, out_$p11, out_$i12, out_$p13, out_$p14, out_$p15, out_$p16, out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$p22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i34, out_$i35, out_$i37, out_$i38, out_$p39, out_$i40, out_$i41, out_$p42, out_$i43, out_$i44, out_$i45, out_$p46, out_$p47, out_$i48, out_$i49, out_$i50, out_$i53, out_$p54, out_$p55, out_$i56, out_$p57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_vslice_dummy_var_96 := in_$i10, in_$p11, in_$i12, in_$p13, in_$p14, in_$p15, in_$p16, in_$p17, in_$p18, in_$i19, in_$i20, in_$i21, in_$p22, in_$p23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$p29, in_$i30, in_$i31, in_$i32, in_$i34, in_$i35, in_$i37, in_$i38, in_$p39, in_$i40, in_$i41, in_$p42, in_$i43, in_$i44, in_$i45, in_$p46, in_$p47, in_$i48, in_$i49, in_$i50, in_$i53, in_$p54, in_$p55, in_$i56, in_$p57, in_$i58, in_$i59, in_$i60, in_$i61, in_$i62, in_vslice_dummy_var_96;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1311} out_$i12 := devirtbounce.34(in_$p9, out_$p11, in_$p1, in_$p2, in_$p3);
    call {:si_unique_call 1312} {:cexpr "ret"} boogie_si_record_i32(out_$i12);
    goto corral_source_split_6518;

  $bb23:
    assume {:verifier.code 0} true;
    out_$i10, out_$p11 := out_$i53, out_$p54;
    goto $bb23_dummy;

  $bb19:
    assume !(out_$i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_6587:
    assume {:verifier.code 0} true;
    out_$i62 := out_$i60;
    assume true;
    goto $bb19;

  corral_source_split_6586:
    assume {:verifier.code 0} true;
    out_$i61 := $ne.i32(out_$i60, 0);
    goto corral_source_split_6587;

  corral_source_split_6585:
    assume {:verifier.code 0} true;
    out_$i59 := $load.i64($M.45, in_$p3);
    call {:si_unique_call 1323} out_$i60 := devirtbounce.18(out_$p57, out_$i56, out_$i58, out_$i59);
    call {:si_unique_call 1324} {:cexpr "ret"} boogie_si_record_i32(out_$i60);
    goto corral_source_split_6586;

  corral_source_split_6584:
    assume {:verifier.code 0} true;
    out_$i58 := $load.i64($M.44, in_$p2);
    goto corral_source_split_6585;

  corral_source_split_6583:
    assume {:verifier.code 0} true;
    out_$p57 := $load.ref($M.1, xp_remote_memcpy);
    goto corral_source_split_6584;

  corral_source_split_6582:
    assume {:verifier.code 0} true;
    out_$p55 := $load.ref($M.1, xp_pa);
    call {:si_unique_call 1321} out_$i56 := devirtbounce.5(out_$p55, out_$p54);
    call {:si_unique_call 1322} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i56);
    goto corral_source_split_6583;

  $bb17:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6582;

  $bb10:
    assume !(out_$i38 == 1);
    assume {:verifier.code 0} true;
    out_$i53, out_$p54 := out_$i10, out_$p11;
    goto $bb17;

  $bb16:
    assume {:verifier.code 0} true;
    out_$i53, out_$p54 := out_$i45, out_$p46;
    goto $bb17;

  $bb15:
    assume !(out_$i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_6576:
    assume {:verifier.code 0} true;
    out_$i50 := out_$i45;
    assume true;
    goto $bb15;

  corral_source_split_6575:
    assume {:verifier.code 0} true;
    out_$i49 := $eq.i64(out_$i48, 0);
    goto corral_source_split_6576;

  corral_source_split_6574:
    assume {:verifier.code 0} true;
    out_$i48 := $p2i.ref.i64(out_$p47);
    goto corral_source_split_6575;

  corral_source_split_6573:
    assume {:verifier.code 0} true;
    out_$p47 := $load.ref($M.41, in_$p4);
    goto corral_source_split_6574;

  corral_source_split_6572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1319} out_$p46 := xpc_kmalloc_cacheline_aligned(out_$i45, 208, in_$p4);
    goto corral_source_split_6573;

  corral_source_split_6571:
    assume {:verifier.code 0} true;
    out_$i45 := $and.i64(out_$i44, $sub.i64(0, 64));
    call {:si_unique_call 1318} {:cexpr "buf_len"} boogie_si_record_i64(out_$i45);
    goto corral_source_split_6572;

  corral_source_split_6570:
    assume {:verifier.code 0} true;
    out_$i44 := $add.i64(out_$i43, 63);
    goto corral_source_split_6571;

  $bb13:
    assume {:verifier.code 0} true;
    out_$i43 := $load.i64($M.45, in_$p3);
    goto corral_source_split_6570;

  $bb12:
    assume !(out_$i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_6568:
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_6567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1317} kfree(out_$p42);
    goto corral_source_split_6568;

  corral_source_split_6566:
    assume {:verifier.code 0} true;
    out_$p42 := $load.ref($M.41, in_$p4);
    goto corral_source_split_6567;

  $bb11:
    assume out_$i41 == 1;
    goto corral_source_split_6566;

  corral_source_split_6564:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_6563:
    assume {:verifier.code 0} true;
    out_$i41 := $ne.i64(out_$i40, 0);
    goto corral_source_split_6564;

  corral_source_split_6562:
    assume {:verifier.code 0} true;
    out_$i40 := $p2i.ref.i64(out_$p39);
    goto corral_source_split_6563;

  corral_source_split_6561:
    assume {:verifier.code 0} true;
    out_$p39 := $load.ref($M.41, in_$p4);
    goto corral_source_split_6562;

  $bb9:
    assume out_$i38 == 1;
    goto corral_source_split_6561;

  corral_source_split_6559:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_6558:
    assume {:verifier.code 0} true;
    out_$i38 := $ugt.i64(out_$i37, out_$i10);
    goto corral_source_split_6559;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i64($M.45, in_$p3);
    goto corral_source_split_6558;

  $bb6:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_6549:
    assume {:verifier.code 0} true;
    out_$i35 := out_$i12;
    assume true;
    goto $bb6;

  $bb4:
    assume {:verifier.code 0} true;
    out_$i34 := $ne.i32(out_$i12, 57);
    goto corral_source_split_6549;

  $bb3:
    assume !(out_$i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  corral_source_split_6547:
    assume {:verifier.code 0} true;
    goto $bb4;

  corral_source_split_6546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1315} out_vslice_dummy_var_96 := __dynamic_dev_dbg.ref.ref.ref.i32.i64.i64.i64(in_$p5, out_$p29, .str.101, out_$i12, out_$i30, out_$i31, out_$i32);
    goto corral_source_split_6547;

  corral_source_split_6545:
    assume {:verifier.code 0} true;
    out_$i32 := $load.i64($M.45, in_$p3);
    goto corral_source_split_6546;

  corral_source_split_6544:
    assume {:verifier.code 0} true;
    out_$i31 := $load.i64($M.44, in_$p2);
    goto corral_source_split_6545;

  corral_source_split_6543:
    assume {:verifier.code 0} true;
    out_$i30 := $load.i64($M.43, in_$p1);
    goto corral_source_split_6544;

  corral_source_split_6542:
    assume {:verifier.code 0} true;
    out_$p29 := $M.5;
    goto corral_source_split_6543;

  $bb2:
    assume out_$i28 == 1;
    goto corral_source_split_6542;

  corral_source_split_6540:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  corral_source_split_6539:
    assume {:verifier.code 0} true;
    out_$i28 := $ne.i64(out_$i27, 0);
    goto corral_source_split_6540;

  corral_source_split_6538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1313} out_$i27 := ldv__builtin_expect(out_$i26, 0);
    call {:si_unique_call 1314} {:cexpr "tmp"} boogie_si_record_i64(out_$i27);
    goto corral_source_split_6539;

  corral_source_split_6537:
    assume {:verifier.code 0} true;
    out_$i26 := $and.i64(out_$i25, 1);
    goto corral_source_split_6538;

  corral_source_split_6536:
    assume {:verifier.code 0} true;
    out_$i25 := $zext.i8.i64(out_$i24);
    goto corral_source_split_6537;

  corral_source_split_6535:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i8($M.13, out_$p23);
    goto corral_source_split_6536;

  corral_source_split_6534:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(in_$p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6535;

  corral_source_split_6533:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, out_$p22, 0);
    goto corral_source_split_6534;

  corral_source_split_6532:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(in_$p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6533;

  corral_source_split_6531:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, out_$p18, out_$i21);
    goto corral_source_split_6532;

  corral_source_split_6530:
    assume {:verifier.code 0} true;
    out_$i21 := $or.i24(out_$i20, 145);
    goto corral_source_split_6531;

  corral_source_split_6529:
    assume {:verifier.code 0} true;
    out_$i20 := $and.i24(out_$i19, $sub.i24(0, 262144));
    goto corral_source_split_6530;

  corral_source_split_6528:
    assume {:verifier.code 0} true;
    out_$i19 := $load.i24($M.12, out_$p18);
    goto corral_source_split_6529;

  corral_source_split_6527:
    assume {:verifier.code 0} true;
    out_$p18 := $bitcast.ref.ref(out_$p17);
    goto corral_source_split_6528;

  corral_source_split_6526:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(in_$p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6527;

  corral_source_split_6525:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, out_$p16, .str.101);
    goto corral_source_split_6526;

  corral_source_split_6524:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(in_$p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6525;

  corral_source_split_6523:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, out_$p15, .str.38);
    goto corral_source_split_6524;

  corral_source_split_6522:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(in_$p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6523;

  corral_source_split_6521:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, out_$p14, .str.100);
    goto corral_source_split_6522;

  corral_source_split_6520:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(in_$p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6521;

  corral_source_split_6519:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, out_$p13, .str);
    goto corral_source_split_6520;

  corral_source_split_6518:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(in_$p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6519;

  $bb23_dummy:
    call {:si_unique_call 1} out_$i10, out_$p11, out_$i12, out_$p13, out_$p14, out_$p15, out_$p16, out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$p22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i34, out_$i35, out_$i37, out_$i38, out_$p39, out_$i40, out_$i41, out_$p42, out_$i43, out_$i44, out_$i45, out_$p46, out_$p47, out_$i48, out_$i49, out_$i50, out_$i53, out_$p54, out_$p55, out_$i56, out_$p57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_vslice_dummy_var_96 := xpc_get_rsvd_page_pa_loop_$bb1(in_$p1, in_$p2, in_$p3, in_$p4, in_$p5, in_$p9, out_$i10, out_$p11, out_$i12, out_$p13, out_$p14, out_$p15, out_$p16, out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$p22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i34, out_$i35, out_$i37, out_$i38, out_$p39, out_$i40, out_$i41, out_$p42, out_$i43, out_$i44, out_$i45, out_$p46, out_$p47, out_$i48, out_$i49, out_$i50, out_$i53, out_$p54, out_$p55, out_$i56, out_$p57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_vslice_dummy_var_96);
    return;

  exit:
    return;
}



procedure xpc_get_rsvd_page_pa_loop_$bb1(in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p9: ref, in_$i10: i64, in_$p11: ref, in_$i12: i32, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$i19: i24, in_$i20: i24, in_$i21: i24, in_$p22: ref, in_$p23: ref, in_$i24: i8, in_$i25: i64, in_$i26: i64, in_$i27: i64, in_$i28: i1, in_$p29: ref, in_$i30: i64, in_$i31: i64, in_$i32: i64, in_$i34: i1, in_$i35: i32, in_$i37: i64, in_$i38: i1, in_$p39: ref, in_$i40: i64, in_$i41: i1, in_$p42: ref, in_$i43: i64, in_$i44: i64, in_$i45: i64, in_$p46: ref, in_$p47: ref, in_$i48: i64, in_$i49: i1, in_$i50: i64, in_$i53: i64, in_$p54: ref, in_$p55: ref, in_$i56: i64, in_$p57: ref, in_$i58: i64, in_$i59: i64, in_$i60: i32, in_$i61: i1, in_$i62: i32, in_vslice_dummy_var_96: i32) returns (out_$i10: i64, out_$p11: ref, out_$i12: i32, out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$i19: i24, out_$i20: i24, out_$i21: i24, out_$p22: ref, out_$p23: ref, out_$i24: i8, out_$i25: i64, out_$i26: i64, out_$i27: i64, out_$i28: i1, out_$p29: ref, out_$i30: i64, out_$i31: i64, out_$i32: i64, out_$i34: i1, out_$i35: i32, out_$i37: i64, out_$i38: i1, out_$p39: ref, out_$i40: i64, out_$i41: i1, out_$p42: ref, out_$i43: i64, out_$i44: i64, out_$i45: i64, out_$p46: ref, out_$p47: ref, out_$i48: i64, out_$i49: i1, out_$i50: i64, out_$i53: i64, out_$p54: ref, out_$p55: ref, out_$i56: i64, out_$p57: ref, out_$i58: i64, out_$i59: i64, out_$i60: i32, out_$i61: i1, out_$i62: i32, out_vslice_dummy_var_96: i32);
  modifies $M.1, $CurrAddr, $M.41, $M.13, $M.12, $M.11, $M.10, $M.9, $M.8;



implementation xpc_check_remote_hb_loop_$bb4(in_$i4: i32, in_$i5: i1, in_$i6: i32, in_$i7: i16, in_$i8: i32, in_$i9: i1, in_$p10: ref, in_$i11: i64, in_$p12: ref, in_$p13: ref, in_$i14: i8, in_$i15: i32, in_$i16: i1, in_$p17: ref, in_$i18: i8, in_$i19: i32, in_$i20: i1, in_$p21: ref, in_$i22: i32, in_$i23: i1, in_$i24: i32, in_$i25: i32, in_$i26: i16, in_$i27: i32, in_$i28: i16, in_$i29: i32, in_$i30: i1, in_$i3: i16) returns (out_$i4: i32, out_$i5: i1, out_$i6: i32, out_$i7: i16, out_$i8: i32, out_$i9: i1, out_$p10: ref, out_$i11: i64, out_$p12: ref, out_$p13: ref, out_$i14: i8, out_$i15: i32, out_$i16: i1, out_$p17: ref, out_$i18: i8, out_$i19: i32, out_$i20: i1, out_$p21: ref, out_$i22: i32, out_$i23: i1, out_$i24: i32, out_$i25: i32, out_$i26: i16, out_$i27: i32, out_$i28: i16, out_$i29: i32, out_$i30: i1, out_$i3: i16)
{

  entry:
    out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$p10, out_$i11, out_$p12, out_$p13, out_$i14, out_$i15, out_$i16, out_$p17, out_$i18, out_$i19, out_$i20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i3 := in_$i4, in_$i5, in_$i6, in_$i7, in_$i8, in_$i9, in_$p10, in_$i11, in_$p12, in_$p13, in_$i14, in_$i15, in_$i16, in_$p17, in_$i18, in_$i19, in_$i20, in_$p21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i3;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_6675;

  $bb23:
    assume out_$i30 == 1;
    assume {:verifier.code 0} true;
    out_$i3 := out_$i26;
    goto $bb23_dummy;

  corral_source_split_6695:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23;

  corral_source_split_6694:
    assume {:verifier.code 0} true;
    out_$i30 := $slt.i32(out_$i27, out_$i29);
    goto corral_source_split_6695;

  corral_source_split_6693:
    assume {:verifier.code 0} true;
    out_$i29 := $sext.i16.i32(out_$i28);
    goto corral_source_split_6694;

  corral_source_split_6692:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i16($M.1, xp_max_npartitions);
    goto corral_source_split_6693;

  corral_source_split_6691:
    assume {:verifier.code 0} true;
    out_$i27 := $sext.i16.i32(out_$i26);
    goto corral_source_split_6692;

  corral_source_split_6690:
    assume {:verifier.code 0} true;
    out_$i26 := $trunc.i32.i16(out_$i25);
    call {:si_unique_call 1338} {:cexpr "partid"} boogie_si_record_i16(out_$i26);
    goto corral_source_split_6691;

  corral_source_split_6689:
    assume {:verifier.code 0} true;
    out_$i25 := $add.i32(out_$i24, 1);
    goto corral_source_split_6690;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i24 := $sext.i16.i32(out_$i3);
    goto corral_source_split_6689;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_6687:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb10:
    assume out_$i9 == 1;
    goto corral_source_split_6687;

  corral_source_split_6685:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_6684:
    assume {:verifier.code 0} true;
    out_$i9 := $eq.i32(out_$i6, out_$i8);
    goto corral_source_split_6685;

  corral_source_split_6683:
    assume {:verifier.code 0} true;
    out_$i8 := $sext.i16.i32(out_$i7);
    goto corral_source_split_6684;

  corral_source_split_6682:
    assume {:verifier.code 0} true;
    out_$i7 := $load.i16($M.1, xp_partition_id);
    goto corral_source_split_6683;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i6 := $sext.i16.i32(out_$i3);
    goto corral_source_split_6682;

  $bb7:
    assume !(out_$i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_6678:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7;

  corral_source_split_6677:
    assume {:verifier.code 0} true;
    out_$i5 := $ne.i32(out_$i4, 0);
    goto corral_source_split_6678;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i4 := $M.0;
    goto corral_source_split_6677;

  corral_source_split_6675:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb17:
    assume {:verifier.code 0} true;
    assume out_$i20 == 1;
    goto $bb15;

  $bb14:
    assume {:verifier.code 0} true;
    assume out_$i16 == 1;
    goto $bb15;

  corral_source_split_6703:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb16;

  corral_source_split_6702:
    assume {:verifier.code 0} true;
    out_$i16 := $eq.i32(out_$i15, 0);
    goto corral_source_split_6703;

  corral_source_split_6701:
    assume {:verifier.code 0} true;
    out_$i15 := $zext.i8.i32(out_$i14);
    goto corral_source_split_6702;

  corral_source_split_6700:
    assume {:verifier.code 0} true;
    out_$i14 := $load.i8($M.1, out_$p13);
    goto corral_source_split_6701;

  corral_source_split_6699:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(out_$p10, $mul.ref(out_$i11, 872)), $mul.ref(112, 1));
    goto corral_source_split_6700;

  corral_source_split_6698:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref(out_$p10, $mul.ref(out_$i11, 872));
    goto corral_source_split_6699;

  corral_source_split_6697:
    assume {:verifier.code 0} true;
    out_$i11 := $sext.i16.i64(out_$i3);
    goto corral_source_split_6698;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p10 := $M.3;
    goto corral_source_split_6697;

  $bb11:
    assume !(out_$i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_6709:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_6708:
    assume {:verifier.code 0} true;
    out_$i20 := $eq.i32(out_$i19, 4);
    goto corral_source_split_6709;

  corral_source_split_6707:
    assume {:verifier.code 0} true;
    out_$i19 := $zext.i8.i32(out_$i18);
    goto corral_source_split_6708;

  corral_source_split_6706:
    assume {:verifier.code 0} true;
    out_$i18 := $load.i8($M.1, out_$p17);
    goto corral_source_split_6707;

  corral_source_split_6705:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(out_$p10, $mul.ref(out_$i11, 872)), $mul.ref(112, 1));
    goto corral_source_split_6706;

  $bb16:
    assume !(out_$i16 == 1);
    goto corral_source_split_6705;

  $bb21:
    assume !(out_$i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_6715:
    assume {:verifier.code 0} true;
    goto $bb22;

  SeqInstr_615:
    goto corral_source_split_6715;

  SeqInstr_614:
    assume assertsPassed;
    goto SeqInstr_615;

  corral_source_split_6714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1341} xpc_deactivate_partition(303, out_$p12, out_$i22);
    goto SeqInstr_614;

  $bb20:
    assume out_$i23 == 1;
    goto corral_source_split_6714;

  corral_source_split_6712:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_6711:
    assume {:verifier.code 0} true;
    out_$i23 := $ne.i32(out_$i22, 0);
    goto corral_source_split_6712;

  SeqInstr_612:
    call {:si_unique_call 1340} {:cexpr "ret"} boogie_si_record_i32(out_$i22);
    goto corral_source_split_6711;

  SeqInstr_611:
    assume assertsPassed;
    goto SeqInstr_612;

  $bb19:
    assume {:verifier.code 0} true;
    out_$p21 := $load.ref($M.4, $add.ref($add.ref(xpc_arch_ops, $mul.ref(0, 328)), $mul.ref(104, 1)));
    call {:si_unique_call 1339} out_$i22 := devirtbounce.22(out_$p21, out_$p12);
    goto SeqInstr_611;

  $bb18:
    assume !(out_$i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23_dummy:
    call {:si_unique_call 1} out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$p10, out_$i11, out_$p12, out_$p13, out_$i14, out_$i15, out_$i16, out_$p17, out_$i18, out_$i19, out_$i20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i3 := xpc_check_remote_hb_loop_$bb4(out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$p10, out_$i11, out_$p12, out_$p13, out_$i14, out_$i15, out_$i16, out_$p17, out_$i18, out_$i19, out_$i20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i3);
    return;

  exit:
    return;
}



procedure xpc_check_remote_hb_loop_$bb4(in_$i4: i32, in_$i5: i1, in_$i6: i32, in_$i7: i16, in_$i8: i32, in_$i9: i1, in_$p10: ref, in_$i11: i64, in_$p12: ref, in_$p13: ref, in_$i14: i8, in_$i15: i32, in_$i16: i1, in_$p17: ref, in_$i18: i8, in_$i19: i32, in_$i20: i1, in_$p21: ref, in_$i22: i32, in_$i23: i1, in_$i24: i32, in_$i25: i32, in_$i26: i16, in_$i27: i32, in_$i28: i16, in_$i29: i32, in_$i30: i1, in_$i3: i16) returns (out_$i4: i32, out_$i5: i1, out_$i6: i32, out_$i7: i16, out_$i8: i32, out_$i9: i1, out_$p10: ref, out_$i11: i64, out_$p12: ref, out_$p13: ref, out_$i14: i8, out_$i15: i32, out_$i16: i1, out_$p17: ref, out_$i18: i8, out_$i19: i32, out_$i20: i1, out_$p21: ref, out_$i22: i32, out_$i23: i1, out_$i24: i32, out_$i25: i32, out_$i26: i16, out_$i27: i32, out_$i28: i16, out_$i29: i32, out_$i30: i1, out_$i3: i16);
  modifies $M.1, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $CurrAddr, $M.23, $M.28, $M.0, $M.2, assertsPassed, $M.24, $M.40, $M.18, $M.19, $M.20, $M.21, $M.22, $M.31, $M.41, $M.42, $M.43, $M.44, $M.45, $M.32;



implementation xpc_init_mq_node_loop_$bb19(in_$i0: i32, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$i32: i64, in_$i33: i1, in_$p34: ref, in_$i35: i32, in_$i36: i32, in_$i37: i1, in_$i28: i32) returns (out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$i32: i64, out_$i33: i1, out_$p34: ref, out_$i35: i32, out_$i36: i32, out_$i37: i1, out_$i28: i32)
{

  entry:
    out_$p29, out_$p30, out_$p31, out_$i32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i28 := in_$p29, in_$p30, in_$p31, in_$i32, in_$i33, in_$p34, in_$i35, in_$i36, in_$i37, in_$i28;
    goto $bb19, exit;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_6806;

  $bb25:
    assume out_$i37 == 1;
    assume {:verifier.code 0} true;
    out_$i28 := out_$i35;
    goto $bb25_dummy;

  corral_source_split_6825:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25;

  corral_source_split_6824:
    assume {:verifier.code 0} true;
    out_$i37 := $slt.i32(out_$i35, out_$i36);
    goto corral_source_split_6825;

  corral_source_split_6823:
    assume {:verifier.code 0} true;
    out_$i36 := $load.i32($M.1, nr_cpu_ids);
    goto corral_source_split_6824;

  corral_source_split_6822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1379} out_$i35 := cpumask_next(out_$i28, out_$p34);
    call {:si_unique_call 1380} {:cexpr "tmp___6"} boogie_si_record_i32(out_$i35);
    goto corral_source_split_6823;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1378} out_$p34 := cpumask_of_node(in_$i0);
    goto corral_source_split_6822;

  $bb22:
    assume !(out_$i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_6813:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22;

  corral_source_split_6812:
    assume {:verifier.code 0} true;
    out_$i33 := $eq.i64(out_$i32, 0);
    goto corral_source_split_6813;

  corral_source_split_6811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1374} out_$i32 := IS_ERR(out_$p31);
    call {:si_unique_call 1375} {:cexpr "tmp___4"} boogie_si_record_i64(out_$i32);
    goto corral_source_split_6812;

  corral_source_split_6810:
    assume {:verifier.code 0} true;
    out_$p31 := $bitcast.ref.ref(out_$p30);
    goto corral_source_split_6811;

  corral_source_split_6809:
    assume {:verifier.code 0} true;
    out_$p30 := $M.15;
    goto corral_source_split_6810;

  corral_source_split_6808:
    assume {:verifier.code 0} true;
    $M.15 := out_$p29;
    goto corral_source_split_6809;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1373} out_$p29 := xpc_create_gru_mq_uv(131072, in_$i0, .str.106, xpc_handle_notify_IRQ_uv);
    goto corral_source_split_6808;

  corral_source_split_6806:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb25_dummy:
    call {:si_unique_call 1} out_$p29, out_$p30, out_$p31, out_$i32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i28 := xpc_init_mq_node_loop_$bb19(in_$i0, out_$p29, out_$p30, out_$p31, out_$i32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i28);
    return;

  exit:
    return;
}



procedure xpc_init_mq_node_loop_$bb19(in_$i0: i32, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$i32: i64, in_$i33: i1, in_$p34: ref, in_$i35: i32, in_$i36: i32, in_$i37: i1, in_$i28: i32) returns (out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$i32: i64, out_$i33: i1, out_$p34: ref, out_$i35: i32, out_$i36: i32, out_$i37: i1, out_$i28: i32);
  modifies $M.15, $M.1, $CurrAddr;



implementation xpc_init_mq_node_loop_$bb4(in_$i0: i32, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$i9: i64, in_$i10: i1, in_$p11: ref, in_$i12: i32, in_$i13: i32, in_$i14: i1, in_$i5: i32) returns (out_$p6: ref, out_$p7: ref, out_$p8: ref, out_$i9: i64, out_$i10: i1, out_$p11: ref, out_$i12: i32, out_$i13: i32, out_$i14: i1, out_$i5: i32)
{

  entry:
    out_$p6, out_$p7, out_$p8, out_$i9, out_$i10, out_$p11, out_$i12, out_$i13, out_$i14, out_$i5 := in_$p6, in_$p7, in_$p8, in_$i9, in_$i10, in_$p11, in_$i12, in_$i13, in_$i14, in_$i5;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_6767;

  $bb10:
    assume out_$i14 == 1;
    assume {:verifier.code 0} true;
    out_$i5 := out_$i12;
    goto $bb10_dummy;

  corral_source_split_6786:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_6785:
    assume {:verifier.code 0} true;
    out_$i14 := $slt.i32(out_$i12, out_$i13);
    goto corral_source_split_6786;

  corral_source_split_6784:
    assume {:verifier.code 0} true;
    out_$i13 := $load.i32($M.1, nr_cpu_ids);
    goto corral_source_split_6785;

  corral_source_split_6783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1365} out_$i12 := cpumask_next(out_$i5, out_$p11);
    call {:si_unique_call 1366} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i12);
    goto corral_source_split_6784;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1364} out_$p11 := cpumask_of_node(in_$i0);
    goto corral_source_split_6783;

  $bb7:
    assume !(out_$i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_6774:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7;

  corral_source_split_6773:
    assume {:verifier.code 0} true;
    out_$i10 := $eq.i64(out_$i9, 0);
    goto corral_source_split_6774;

  corral_source_split_6772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1360} out_$i9 := IS_ERR(out_$p8);
    call {:si_unique_call 1361} {:cexpr "tmp"} boogie_si_record_i64(out_$i9);
    goto corral_source_split_6773;

  corral_source_split_6771:
    assume {:verifier.code 0} true;
    out_$p8 := $bitcast.ref.ref(out_$p7);
    goto corral_source_split_6772;

  corral_source_split_6770:
    assume {:verifier.code 0} true;
    out_$p7 := $M.16;
    goto corral_source_split_6771;

  corral_source_split_6769:
    assume {:verifier.code 0} true;
    $M.16 := out_$p6;
    goto corral_source_split_6770;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1359} out_$p6 := xpc_create_gru_mq_uv(65536, in_$i0, .str.105, xpc_handle_activate_IRQ_uv);
    goto corral_source_split_6769;

  corral_source_split_6767:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p6, out_$p7, out_$p8, out_$i9, out_$i10, out_$p11, out_$i12, out_$i13, out_$i14, out_$i5 := xpc_init_mq_node_loop_$bb4(in_$i0, out_$p6, out_$p7, out_$p8, out_$i9, out_$i10, out_$p11, out_$i12, out_$i13, out_$i14, out_$i5);
    return;

  exit:
    return;
}



procedure xpc_init_mq_node_loop_$bb4(in_$i0: i32, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$i9: i64, in_$i10: i1, in_$p11: ref, in_$i12: i32, in_$i13: i32, in_$i14: i1, in_$i5: i32) returns (out_$p6: ref, out_$p7: ref, out_$p8: ref, out_$i9: i64, out_$i10: i1, out_$p11: ref, out_$i12: i32, out_$i13: i32, out_$i14: i1, out_$i5: i32);
  modifies $M.16, $M.1, $CurrAddr;



implementation alloc_pages_exact_node_loop_$bb12()
{

  entry:
    goto $bb12, exit;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb12_dummy;

  $bb12_dummy:
    call {:si_unique_call 1} alloc_pages_exact_node_loop_$bb12();
    return;

  exit:
    return;
}



procedure alloc_pages_exact_node_loop_$bb12();



implementation main_loop_$bb1(in_$i0: i32, in_$i1: i1, in_$i2: i1, in_$i3: i1, in_$i4: i1, in_$i5: i1, in_$i6: i32, in_$i7: i1, in_$i8: i32, in_$i9: i1, in_$i10: i32, in_$i11: i1, in_$i12: i1, in_$i13: i1, in_$i14: i32, in_$i15: i1, in_$i16: i32, in_$i17: i1, in_$i18: i32, in_$i19: i1, in_$i20: i32, in_$i21: i32, in_$i22: i1, in_$i23: i32, in_$i24: i1, in_$i25: i32, in_$i26: i1, in_$i27: i32, in_$i28: i1, in_$i29: i32, in_$i30: i1, in_$p31: ref, in_$i32: i64, in_$p33: ref, in_$i35: i32, in_$i36: i1, in_$i37: i32, in_$i38: i1, in_$i39: i32, in_$i40: i1, in_$p41: ref, in_$i42: i64, in_$p43: ref, in_vslice_dummy_var_110: i32, in_vslice_dummy_var_111: i32) returns (out_$i0: i32, out_$i1: i1, out_$i2: i1, out_$i3: i1, out_$i4: i1, out_$i5: i1, out_$i6: i32, out_$i7: i1, out_$i8: i32, out_$i9: i1, out_$i10: i32, out_$i11: i1, out_$i12: i1, out_$i13: i1, out_$i14: i32, out_$i15: i1, out_$i16: i32, out_$i17: i1, out_$i18: i32, out_$i19: i1, out_$i20: i32, out_$i21: i32, out_$i22: i1, out_$i23: i32, out_$i24: i1, out_$i25: i32, out_$i26: i1, out_$i27: i32, out_$i28: i1, out_$i29: i32, out_$i30: i1, out_$p31: ref, out_$i32: i64, out_$p33: ref, out_$i35: i32, out_$i36: i1, out_$i37: i32, out_$i38: i1, out_$i39: i32, out_$i40: i1, out_$p41: ref, out_$i42: i64, out_$p43: ref, out_vslice_dummy_var_110: i32, out_vslice_dummy_var_111: i32)
{

  entry:
    out_$i0, out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$p31, out_$i32, out_$p33, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$p41, out_$i42, out_$p43, out_vslice_dummy_var_110, out_vslice_dummy_var_111 := in_$i0, in_$i1, in_$i2, in_$i3, in_$i4, in_$i5, in_$i6, in_$i7, in_$i8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$p31, in_$i32, in_$p33, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$p41, in_$i42, in_$p43, in_vslice_dummy_var_110, in_vslice_dummy_var_111;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1557} out_$i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1558} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i0);
    call {:si_unique_call 1559} {:cexpr "tmp"} boogie_si_record_i32(out_$i0);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb17_dummy;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb15:
    assume !(out_$i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_7278:
    assume {:verifier.code 0} true;
    goto $bb16;

  SeqInstr_630:
    goto corral_source_split_7278;

  SeqInstr_629:
    assume assertsPassed;
    goto SeqInstr_630;

  corral_source_split_7277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1560} ldv_main_exported_1();
    goto SeqInstr_629;

  $bb14:
    assume out_$i7 == 1;
    goto corral_source_split_7277;

  corral_source_split_7275:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_7274:
    assume {:verifier.code 0} true;
    out_$i7 := $ne.i32(out_$i6, 0);
    goto corral_source_split_7275;

  corral_source_split_7273:
    assume {:verifier.code 0} true;
    out_$i6 := $M.47;
    goto corral_source_split_7274;

  $bb12:
    assume out_$i5 == 1;
    goto corral_source_split_7273;

  $bb10:
    assume out_$i4 == 1;
    assume {:verifier.code 0} true;
    out_$i5 := $eq.i32(out_$i0, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb3:
    assume out_$i1 == 1;
    assume {:verifier.code 0} true;
    out_$i4 := $slt.i32(out_$i0, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i1 := $slt.i32(out_$i0, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb19:
    assume !(out_$i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb29:
    assume {:verifier.code 0} true;
    assume !(out_$i15 == 1);
    goto $bb30;

  $bb32:
    assume {:verifier.code 0} true;
    assume !(out_$i17 == 1);
    goto $bb30;

  corral_source_split_7292:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32;

  corral_source_split_7291:
    assume {:verifier.code 0} true;
    out_$i17 := $eq.i32(out_$i16, 0);
    goto corral_source_split_7292;

  corral_source_split_7290:
    assume {:verifier.code 0} true;
    out_$i16 := $M.48;
    goto corral_source_split_7291;

  $bb28:
    assume out_$i15 == 1;
    goto corral_source_split_7290;

  corral_source_split_7288:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  corral_source_split_7287:
    assume {:verifier.code 0} true;
    out_$i15 := $eq.i32(out_$i14, 3);
    goto corral_source_split_7288;

  corral_source_split_7286:
    assume {:verifier.code 0} true;
    out_$i14 := $M.49;
    goto corral_source_split_7287;

  $bb26:
    assume out_$i13 == 1;
    goto corral_source_split_7286;

  $bb21:
    assume out_$i11 == 1;
    assume {:verifier.code 0} true;
    out_$i13 := $eq.i32(out_$i10, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb20:
    assume {:verifier.code 0} true;
    out_$i11 := $slt.i32(out_$i10, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_7280:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1561} out_$i10 := __VERIFIER_nondet_int();
    call {:si_unique_call 1562} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i10);
    call {:si_unique_call 1563} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i10);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb18:
    assume out_$i9 == 1;
    goto corral_source_split_7280;

  corral_source_split_7271:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_7270:
    assume {:verifier.code 0} true;
    out_$i9 := $ne.i32(out_$i8, 0);
    goto corral_source_split_7271;

  corral_source_split_7269:
    assume {:verifier.code 0} true;
    out_$i8 := $M.49;
    goto corral_source_split_7270;

  $bb11:
    assume !(out_$i4 == 1);
    goto corral_source_split_7269;

  $bb37:
    assume !(out_$i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb42:
    assume !(out_$i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  corral_source_split_7313:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42;

  corral_source_split_7312:
    assume {:verifier.code 0} true;
    out_$i24 := $ne.i32(out_$i23, 0);
    goto corral_source_split_7313;

  $bb40:
    assume {:verifier.code 0} true;
    out_$i23 := $M.52;
    goto corral_source_split_7312;

  $bb39:
    assume !(out_$i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_7310:
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_7309:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 1572} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_7310;

  corral_source_split_7308:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1571} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_7309;

  corral_source_split_7307:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1570} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_7308;

  corral_source_split_7306:
    assume {:verifier.code 0} true;
    $M.49 := 3;
    call {:si_unique_call 1569} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_7307;

  $bb38:
    assume out_$i22 == 1;
    goto corral_source_split_7306;

  corral_source_split_7304:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  corral_source_split_7303:
    assume {:verifier.code 0} true;
    out_$i22 := $eq.i32(out_$i21, 0);
    goto corral_source_split_7304;

  corral_source_split_7302:
    assume {:verifier.code 0} true;
    out_$i21 := $M.52;
    goto corral_source_split_7303;

  corral_source_split_7301:
    assume {:verifier.code 0} true;
    $M.52 := out_$i20;
    call {:si_unique_call 1568} {:cexpr "ldv_retval_0"} boogie_si_record_i32(out_$i20);
    goto corral_source_split_7302;

  SeqInstr_639:
    goto corral_source_split_7301;

  SeqInstr_638:
    assume assertsPassed;
    goto SeqInstr_639;

  corral_source_split_7300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1567} out_$i20 := xpc_init();
    goto SeqInstr_638;

  $bb36:
    assume out_$i19 == 1;
    goto corral_source_split_7300;

  corral_source_split_7284:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  corral_source_split_7283:
    assume {:verifier.code 0} true;
    out_$i19 := $eq.i32(out_$i18, 1);
    goto corral_source_split_7284;

  corral_source_split_7282:
    assume {:verifier.code 0} true;
    out_$i18 := $M.49;
    goto corral_source_split_7283;

  $bb23:
    assume out_$i12 == 1;
    goto corral_source_split_7282;

  $bb22:
    assume !(out_$i11 == 1);
    assume {:verifier.code 0} true;
    out_$i12 := $eq.i32(out_$i10, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb24:
    assume {:verifier.code 0} true;
    assume !(out_$i12 == 1);
    goto $bb25;

  $bb27:
    assume {:verifier.code 0} true;
    assume !(out_$i13 == 1);
    goto $bb25;

  $bb48:
    assume !(out_$i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb53:
    assume !(out_$i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  corral_source_split_7329:
    assume {:verifier.code 0} true;
    goto $bb54;

  corral_source_split_7328:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1578} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_7329;

  SeqInstr_642:
    goto corral_source_split_7328;

  SeqInstr_641:
    assume assertsPassed;
    goto SeqInstr_642;

  corral_source_split_7327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1577} out_vslice_dummy_var_110 := xpc_system_reboot(out_$p31, out_$i32, out_$p33);
    goto SeqInstr_641;

  corral_source_split_7326:
    assume {:verifier.code 0} true;
    out_$p33 := $M.55;
    goto corral_source_split_7327;

  corral_source_split_7325:
    assume {:verifier.code 0} true;
    out_$i32 := $M.54;
    goto corral_source_split_7326;

  corral_source_split_7324:
    assume {:verifier.code 0} true;
    out_$p31 := $M.53;
    goto corral_source_split_7325;

  $bb52:
    assume out_$i30 == 1;
    goto corral_source_split_7324;

  corral_source_split_7322:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  corral_source_split_7321:
    assume {:verifier.code 0} true;
    out_$i30 := $eq.i32(out_$i29, 1);
    goto corral_source_split_7322;

  corral_source_split_7320:
    assume {:verifier.code 0} true;
    out_$i29 := $M.50;
    goto corral_source_split_7321;

  $bb50:
    assume out_$i28 == 1;
    goto corral_source_split_7320;

  $bb49:
    assume {:verifier.code 0} true;
    out_$i28 := $eq.i32(out_$i27, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  corral_source_split_7318:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1574} out_$i27 := __VERIFIER_nondet_int();
    call {:si_unique_call 1575} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i27);
    call {:si_unique_call 1576} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i27);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb47:
    assume out_$i26 == 1;
    goto corral_source_split_7318;

  corral_source_split_7263:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  corral_source_split_7262:
    assume {:verifier.code 0} true;
    out_$i26 := $ne.i32(out_$i25, 0);
    goto corral_source_split_7263;

  corral_source_split_7261:
    assume {:verifier.code 0} true;
    out_$i25 := $M.50;
    goto corral_source_split_7262;

  $bb5:
    assume out_$i2 == 1;
    goto corral_source_split_7261;

  $bb4:
    assume !(out_$i1 == 1);
    assume {:verifier.code 0} true;
    out_$i2 := $slt.i32(out_$i0, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb51:
    assume !(out_$i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb59:
    assume !(out_$i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb64:
    assume !(out_$i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  corral_source_split_7342:
    assume {:verifier.code 0} true;
    goto $bb65;

  corral_source_split_7341:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1583} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_7342;

  SeqInstr_645:
    goto corral_source_split_7341;

  SeqInstr_644:
    assume assertsPassed;
    goto SeqInstr_645;

  corral_source_split_7340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1582} out_vslice_dummy_var_111 := xpc_system_die(out_$p41, out_$i42, out_$p43);
    goto SeqInstr_644;

  corral_source_split_7339:
    assume {:verifier.code 0} true;
    out_$p43 := $M.58;
    goto corral_source_split_7340;

  corral_source_split_7338:
    assume {:verifier.code 0} true;
    out_$i42 := $M.57;
    goto corral_source_split_7339;

  corral_source_split_7337:
    assume {:verifier.code 0} true;
    out_$p41 := $M.56;
    goto corral_source_split_7338;

  $bb63:
    assume out_$i40 == 1;
    goto corral_source_split_7337;

  corral_source_split_7335:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  corral_source_split_7334:
    assume {:verifier.code 0} true;
    out_$i40 := $eq.i32(out_$i39, 1);
    goto corral_source_split_7335;

  corral_source_split_7333:
    assume {:verifier.code 0} true;
    out_$i39 := $M.51;
    goto corral_source_split_7334;

  $bb61:
    assume out_$i38 == 1;
    goto corral_source_split_7333;

  $bb60:
    assume {:verifier.code 0} true;
    out_$i38 := $eq.i32(out_$i37, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  corral_source_split_7331:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1579} out_$i37 := __VERIFIER_nondet_int();
    call {:si_unique_call 1580} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i37);
    call {:si_unique_call 1581} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i37);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb58:
    assume out_$i36 == 1;
    goto corral_source_split_7331;

  corral_source_split_7267:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  corral_source_split_7266:
    assume {:verifier.code 0} true;
    out_$i36 := $ne.i32(out_$i35, 0);
    goto corral_source_split_7267;

  corral_source_split_7265:
    assume {:verifier.code 0} true;
    out_$i35 := $M.51;
    goto corral_source_split_7266;

  $bb7:
    assume out_$i3 == 1;
    goto corral_source_split_7265;

  $bb6:
    assume !(out_$i2 == 1);
    assume {:verifier.code 0} true;
    out_$i3 := $eq.i32(out_$i0, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb62:
    assume !(out_$i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb8:
    assume {:verifier.code 0} true;
    assume !(out_$i3 == 1);
    goto $bb9;

  $bb13:
    assume {:verifier.code 0} true;
    assume !(out_$i5 == 1);
    goto $bb9;

  $bb17_dummy:
    call {:si_unique_call 1} out_$i0, out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$p31, out_$i32, out_$p33, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$p41, out_$i42, out_$p43, out_vslice_dummy_var_110, out_vslice_dummy_var_111 := main_loop_$bb1(out_$i0, out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$p31, out_$i32, out_$p33, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$p41, out_$i42, out_$p43, out_vslice_dummy_var_110, out_vslice_dummy_var_111);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$i0: i32, in_$i1: i1, in_$i2: i1, in_$i3: i1, in_$i4: i1, in_$i5: i1, in_$i6: i32, in_$i7: i1, in_$i8: i32, in_$i9: i1, in_$i10: i32, in_$i11: i1, in_$i12: i1, in_$i13: i1, in_$i14: i32, in_$i15: i1, in_$i16: i32, in_$i17: i1, in_$i18: i32, in_$i19: i1, in_$i20: i32, in_$i21: i32, in_$i22: i1, in_$i23: i32, in_$i24: i1, in_$i25: i32, in_$i26: i1, in_$i27: i32, in_$i28: i1, in_$i29: i32, in_$i30: i1, in_$p31: ref, in_$i32: i64, in_$p33: ref, in_$i35: i32, in_$i36: i1, in_$i37: i32, in_$i38: i1, in_$i39: i32, in_$i40: i1, in_$p41: ref, in_$i42: i64, in_$p43: ref, in_vslice_dummy_var_110: i32, in_vslice_dummy_var_111: i32) returns (out_$i0: i32, out_$i1: i1, out_$i2: i1, out_$i3: i1, out_$i4: i1, out_$i5: i1, out_$i6: i32, out_$i7: i1, out_$i8: i32, out_$i9: i1, out_$i10: i32, out_$i11: i1, out_$i12: i1, out_$i13: i1, out_$i14: i32, out_$i15: i1, out_$i16: i32, out_$i17: i1, out_$i18: i32, out_$i19: i1, out_$i20: i32, out_$i21: i32, out_$i22: i1, out_$i23: i32, out_$i24: i1, out_$i25: i32, out_$i26: i1, out_$i27: i32, out_$i28: i1, out_$i29: i32, out_$i30: i1, out_$p31: ref, out_$i32: i64, out_$p33: ref, out_$i35: i32, out_$i36: i1, out_$i37: i32, out_$i38: i1, out_$i39: i32, out_$i40: i1, out_$p41: ref, out_$i42: i64, out_$p43: ref, out_vslice_dummy_var_110: i32, out_vslice_dummy_var_111: i32);
  modifies $M.47, $M.1, $M.25, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.48, $M.23, $M.24, $M.28, $CurrAddr, $M.0, $M.2, assertsPassed, $M.50, $M.51, $M.49, $M.52, $M.6, $M.4, $M.3, $M.34, $M.35, $M.36, $M.37, $M.14, $M.16, $M.15, $M.40, $M.18, $M.19, $M.20, $M.21, $M.22, $M.43, $M.44, $M.45, $M.41, $M.31, $M.42, $M.32;


