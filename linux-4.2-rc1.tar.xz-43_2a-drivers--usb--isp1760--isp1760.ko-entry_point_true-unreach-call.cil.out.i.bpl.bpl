var $M.0: [ref]i8;

var $M.1: [ref]i32;

var $M.2: i32;

var $M.3: i32;

var $M.4: i32;

var $M.5: i32;

var $M.6: i32;

var $M.7: i32;

var $M.8: i32;

var $M.9: i32;

var $M.12: [ref]ref;

var $M.13: [ref]ref;

var $M.14: [ref]ref;

var $M.15: [ref]ref;

var $M.16: [ref]i24;

var $M.17: [ref]i8;

var $M.22: i32;

var $M.23: ref;

var $M.24: i32;

var $M.25: ref;

var $M.26: i32;

var $M.27: ref;

var $M.28: i32;

var $M.29: ref;

var $M.30: i32;

var $M.31: [ref]i8;

var $M.32: [ref]i8;

var $M.33: [ref]i8;

var $M.34: [ref]i8;

var $M.35: ref;

var $M.36: [ref]i8;

var $M.37: ref;

var $M.38: [ref]i8;

var $M.39: ref;

var $M.40: [ref]i8;

var $M.42: [ref]ref;

var $M.43: [ref]ref;

var $M.44: [ref]i8;

var $M.45: ref;

var $M.46: ref;

var $M.47: i32;

var $M.49: i32;

var $M.51: i32;

var $M.53: i32;

var $M.54: i32;

var $M.55: i32;

var $M.56: i32;

var $M.57: i32;

var $M.58: i32;

var $M.59: i32;

var $M.60: i32;

var $M.61: i32;

var $M.66: ref;

var $M.67: i32;

var $M.68: ref;

var $M.69: ref;

var $M.70: ref;

var $M.71: ref;

var $M.72: ref;

var $M.79: [ref]i32;

var $M.80: [ref]i32;

var $M.81: [ref]i32;

var $M.82: [ref]i32;

var $M.83: [ref]i32;

var $M.84: [ref]i32;

var $M.85: [ref]i64;

var $M.86: [ref]i8;

var $M.131: [ref]i8;

var $M.132: [ref]i8;

var $M.156: [ref]i8;

var $M.157: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 556783);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32800));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const probed_7: ref;

axiom probed_7 == $sub.ref(0, 1028);

const ldv_irq_1_3: ref;

axiom ldv_irq_1_3 == $sub.ref(0, 2056);

const ldv_irq_1_0: ref;

axiom ldv_irq_1_0 == $sub.ref(0, 3084);

const ldv_irq_1_2: ref;

axiom ldv_irq_1_2 == $sub.ref(0, 4112);

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 5140);

const ldv_irq_1_1: ref;

axiom ldv_irq_1_1 == $sub.ref(0, 6168);

const isp1760_plat_driver_group1: ref;

axiom isp1760_plat_driver_group1 == $sub.ref(0, 7200);

const isp1761_pci_driver_group1: ref;

axiom isp1761_pci_driver_group1 == $sub.ref(0, 8232);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 9260);

const ldv_state_variable_6: ref;

axiom ldv_state_variable_6 == $sub.ref(0, 10288);

const ldv_state_variable_3: ref;

axiom ldv_state_variable_3 == $sub.ref(0, 11316);

const ldv_state_variable_7: ref;

axiom ldv_state_variable_7 == $sub.ref(0, 12344);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 13372);

const ldv_state_variable_8: ref;

axiom ldv_state_variable_8 == $sub.ref(0, 14400);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 15428);

const ldv_state_variable_4: ref;

axiom ldv_state_variable_4 == $sub.ref(0, 16456);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 17484);

const ldv_state_variable_5: ref;

axiom ldv_state_variable_5 == $sub.ref(0, 18512);

const ldv_retval_2: ref;

axiom ldv_retval_2 == $sub.ref(0, 19540);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0, 20568);

const ldv_retval_3: ref;

axiom ldv_retval_3 == $sub.ref(0, 21596);

const ldv_retval_4: ref;

axiom ldv_retval_4 == $sub.ref(0, 22624);

const ldv_timer_2_0: ref;

axiom ldv_timer_2_0 == $sub.ref(0, 23652);

const ldv_timer_list_2_0: ref;

axiom ldv_timer_list_2_0 == $sub.ref(0, 24684);

const ldv_timer_2_1: ref;

axiom ldv_timer_2_1 == $sub.ref(0, 25712);

const ldv_timer_list_2_1: ref;

axiom ldv_timer_list_2_1 == $sub.ref(0, 26744);

const ldv_timer_2_2: ref;

axiom ldv_timer_2_2 == $sub.ref(0, 27772);

const ldv_timer_list_2_2: ref;

axiom ldv_timer_list_2_2 == $sub.ref(0, 28804);

const ldv_timer_2_3: ref;

axiom ldv_timer_2_3 == $sub.ref(0, 29832);

const ldv_timer_list_2_3: ref;

axiom ldv_timer_list_2_3 == $sub.ref(0, 30864);

const isp1760_hc_driver_group0: ref;

axiom isp1760_hc_driver_group0 == $sub.ref(0, 31896);

const isp1760_hc_driver_group1: ref;

axiom isp1760_hc_driver_group1 == $sub.ref(0, 32928);

const isp1760_hc_driver_group2: ref;

axiom isp1760_hc_driver_group2 == $sub.ref(0, 33960);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 34988);

const ldv_timer_3_0: ref;

axiom ldv_timer_3_0 == $sub.ref(0, 36016);

const ldv_timer_list_3_0: ref;

axiom ldv_timer_list_3_0 == $sub.ref(0, 37048);

const ldv_timer_3_1: ref;

axiom ldv_timer_3_1 == $sub.ref(0, 38076);

const ldv_timer_list_3_1: ref;

axiom ldv_timer_list_3_1 == $sub.ref(0, 39108);

const ldv_timer_3_2: ref;

axiom ldv_timer_3_2 == $sub.ref(0, 40136);

const ldv_timer_list_3_2: ref;

axiom ldv_timer_list_3_2 == $sub.ref(0, 41168);

const ldv_timer_3_3: ref;

axiom ldv_timer_3_3 == $sub.ref(0, 42196);

const ldv_timer_list_3_3: ref;

axiom ldv_timer_list_3_3 == $sub.ref(0, 43228);

const ldv_irq_line_1_0: ref;

axiom ldv_irq_line_1_0 == $sub.ref(0, 44256);

const ldv_irq_data_1_0: ref;

axiom ldv_irq_data_1_0 == $sub.ref(0, 45288);

const ldv_irq_line_1_1: ref;

axiom ldv_irq_line_1_1 == $sub.ref(0, 46316);

const ldv_irq_data_1_1: ref;

axiom ldv_irq_data_1_1 == $sub.ref(0, 47348);

const ldv_irq_line_1_2: ref;

axiom ldv_irq_line_1_2 == $sub.ref(0, 48376);

const ldv_irq_data_1_2: ref;

axiom ldv_irq_data_1_2 == $sub.ref(0, 49408);

const ldv_irq_line_1_3: ref;

axiom ldv_irq_line_1_3 == $sub.ref(0, 50436);

const ldv_irq_data_1_3: ref;

axiom ldv_irq_data_1_3 == $sub.ref(0, 51468);

const isp1760_ep_ops_group0: ref;

axiom isp1760_ep_ops_group0 == $sub.ref(0, 52500);

const isp1760_ep_ops_group1: ref;

axiom isp1760_ep_ops_group1 == $sub.ref(0, 53532);

const isp1760_udc_ops_group0: ref;

axiom isp1760_udc_ops_group0 == $sub.ref(0, 54564);

const ldv_spin: ref;

axiom ldv_spin == $sub.ref(0, 55592);

const pci_counter: ref;

axiom pci_counter == $sub.ref(0, 56620);

const {:count 2} __mod_pci__isp1760_plx_device_table: ref;

axiom __mod_pci__isp1760_plx_device_table == $sub.ref(0, 57708);

const {:count 3} __mod_of__isp1760_of_match_device_table: ref;

axiom __mod_of__isp1760_of_match_device_table == $sub.ref(0, 59332);

const isp1760_ep_ops: ref;

axiom isp1760_ep_ops == $sub.ref(0, 60436);

const isp1760_udc_ops: ref;

axiom isp1760_udc_ops == $sub.ref(0, 61540);

const errata2_timer: ref;

axiom errata2_timer == $sub.ref(0, 62692);

const isp1760_hc_driver: ref;

axiom isp1760_hc_driver == $sub.ref(0, 64068);

const {:count 2} isp1760_plx: ref;

axiom isp1760_plx == $sub.ref(0, 65156);

const isp1761_pci_driver: ref;

axiom isp1761_pci_driver == $sub.ref(0, 66492);

const {:count 3} isp1760_of_match: ref;

axiom isp1760_of_match == $sub.ref(0, 68116);

const isp1760_plat_driver: ref;

axiom isp1760_plat_driver == $sub.ref(0, 69316);

const urb_listitem_cachep: ref;

axiom urb_listitem_cachep == $sub.ref(0, 70348);

const qh_cachep: ref;

axiom qh_cachep == $sub.ref(0, 71380);

const qtd_cachep: ref;

axiom qtd_cachep == $sub.ref(0, 72412);

const {:count 8} .str.26: ref;

axiom .str.26 == $sub.ref(0, 73444);

const {:count 38} .str.9: ref;

axiom .str.9 == $sub.ref(0, 74506);

const {:count 16} .str.10: ref;

axiom .str.10 == $sub.ref(0, 75546);

const {:count 10} .str.11: ref;

axiom .str.11 == $sub.ref(0, 76580);

const {:count 10} .str.12: ref;

axiom .str.12 == $sub.ref(0, 77614);

const {:count 10} .str.13: ref;

axiom .str.13 == $sub.ref(0, 78648);

const {:count 14} .str.14: ref;

axiom .str.14 == $sub.ref(0, 79686);

const {:count 14} .str.15: ref;

axiom .str.15 == $sub.ref(0, 80724);

const {:count 33} .str.16: ref;

axiom .str.16 == $sub.ref(0, 81781);

const {:count 21} .str.3: ref;

axiom .str.3 == $sub.ref(0, 82826);

const {:count 9} .str.4: ref;

axiom .str.4 == $sub.ref(0, 83859);

const {:count 12} .str.5: ref;

axiom .str.5 == $sub.ref(0, 84895);

const {:count 3} .str.101: ref;

axiom .str.101 == $sub.ref(0, 85922);

const {:count 4} .str.102: ref;

axiom .str.102 == $sub.ref(0, 86950);

const .str.103: ref;

axiom .str.103 == $sub.ref(0, 87975);

const {:count 7} .str.100: ref;

axiom .str.100 == $sub.ref(0, 89006);

const {:count 16} .str.59: ref;

axiom .str.59 == $sub.ref(0, 90046);

const {:count 212} .str.55: ref;

axiom .str.55 == $sub.ref(0, 91282);

const {:count 10} .str.60: ref;

axiom .str.60 == $sub.ref(0, 92316);

const {:count 10} .str.61: ref;

axiom .str.61 == $sub.ref(0, 93350);

const {:count 12} .str.62: ref;

axiom .str.62 == $sub.ref(0, 94386);

const {:count 12} .str.63: ref;

axiom .str.63 == $sub.ref(0, 95422);

const {:count 14} .str.64: ref;

axiom .str.64 == $sub.ref(0, 96460);

const {:count 10} .str.65: ref;

axiom .str.65 == $sub.ref(0, 97494);

const {:count 10} .str.66: ref;

axiom .str.66 == $sub.ref(0, 98528);

const {:count 12} .str.67: ref;

axiom .str.67 == $sub.ref(0, 99564);

const {:count 23} .str.54: ref;

axiom .str.54 == $sub.ref(0, 100611);

const {:count 33} .str.56: ref;

axiom .str.56 == $sub.ref(0, 101668);

const {:count 36} .str.83: ref;

axiom .str.83 == $sub.ref(0, 102728);

const {:count 18} .str.84: ref;

axiom .str.84 == $sub.ref(0, 103770);

const {:count 25} .str.85: ref;

axiom .str.85 == $sub.ref(0, 104819);

const {:count 84} .str.86: ref;

axiom .str.86 == $sub.ref(0, 105927);

const {:count 24} .str.96: ref;

axiom .str.96 == $sub.ref(0, 106975);

const {:count 27} .str.97: ref;

axiom .str.97 == $sub.ref(0, 108026);

const {:count 31} .str.98: ref;

axiom .str.98 == $sub.ref(0, 109081);

const {:count 23} .str.91: ref;

axiom .str.91 == $sub.ref(0, 110128);

const {:count 23} .str.92: ref;

axiom .str.92 == $sub.ref(0, 111175);

const {:count 4} .str.93: ref;

axiom .str.93 == $sub.ref(0, 112203);

const {:count 6} .str.94: ref;

axiom .str.94 == $sub.ref(0, 113233);

const {:count 27} .str.95: ref;

axiom .str.95 == $sub.ref(0, 114284);

const {:count 21} .str.72: ref;

axiom .str.72 == $sub.ref(0, 115329);

const {:count 40} .str.73: ref;

axiom .str.73 == $sub.ref(0, 116393);

const {:count 23} .str.89: ref;

axiom .str.89 == $sub.ref(0, 117440);

const {:count 19} .str.90: ref;

axiom .str.90 == $sub.ref(0, 118483);

const {:count 28} .str.87: ref;

axiom .str.87 == $sub.ref(0, 119535);

const {:count 12} .str.88: ref;

axiom .str.88 == $sub.ref(0, 120571);

const {:count 20} .str.76: ref;

axiom .str.76 == $sub.ref(0, 121615);

const {:count 26} .str.77: ref;

axiom .str.77 == $sub.ref(0, 122665);

const {:count 24} .str.78: ref;

axiom .str.78 == $sub.ref(0, 123713);

const {:count 39} .str.79: ref;

axiom .str.79 == $sub.ref(0, 124776);

const {:count 29} .str.74: ref;

axiom .str.74 == $sub.ref(0, 125829);

const {:count 38} .str.75: ref;

axiom .str.75 == $sub.ref(0, 126891);

const {:count 20} .str.80: ref;

axiom .str.80 == $sub.ref(0, 127935);

const {:count 36} .str.81: ref;

axiom .str.81 == $sub.ref(0, 128995);

const {:count 60} .str.82: ref;

axiom .str.82 == $sub.ref(0, 130079);

const {:count 23} .str.68: ref;

axiom .str.68 == $sub.ref(0, 131126);

const {:count 35} .str.69: ref;

axiom .str.69 == $sub.ref(0, 132185);

const {:count 34} .str.70: ref;

axiom .str.70 == $sub.ref(0, 133243);

const {:count 84} .str.71: ref;

axiom .str.71 == $sub.ref(0, 134351);

const jiffies: ref;

axiom jiffies == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 42} .str.57: ref;

axiom .str.57 == $sub.ref(0, 135417);

const {:count 29} .str.58: ref;

axiom .str.58 == $sub.ref(0, 136470);

const {:count 212} .str.29: ref;

axiom .str.29 == $sub.ref(0, 137706);

const {:count 7} .str.7: ref;

axiom .str.7 == $sub.ref(0, 138737);

const {:count 8} .str.8: ref;

axiom .str.8 == $sub.ref(0, 139769);

const {:count 23} .str.6: ref;

axiom .str.6 == $sub.ref(0, 140816);

const {:count 23} .str.25: ref;

axiom .str.25 == $sub.ref(0, 141863);

const {:count 43} .str.17: ref;

axiom .str.17 == $sub.ref(0, 142930);

const iomem_resource: ref;

axiom iomem_resource == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 8} .str.18: ref;

axiom .str.18 == $sub.ref(0, 143962);

const {:count 33} .str.19: ref;

axiom .str.19 == $sub.ref(0, 145019);

const {:count 23} .str.20: ref;

axiom .str.20 == $sub.ref(0, 146066);

const {:count 30} .str.21: ref;

axiom .str.21 == $sub.ref(0, 147120);

const {:count 15} .str.22: ref;

axiom .str.22 == $sub.ref(0, 148159);

const {:count 20} .str.23: ref;

axiom .str.23 == $sub.ref(0, 149203);

const {:count 13} .str.24: ref;

axiom .str.24 == $sub.ref(0, 150240);

const {:count 12} .str.27: ref;

axiom .str.27 == $sub.ref(0, 151276);

const {:count 32} .str.28: ref;

axiom .str.28 == $sub.ref(0, 152332);

const {:count 20} .str.38: ref;

axiom .str.38 == $sub.ref(0, 153376);

const {:count 27} .str.39: ref;

axiom .str.39 == $sub.ref(0, 154427);

const {:count 9} .str.40: ref;

axiom .str.40 == $sub.ref(0, 155460);

const {:count 32} .str.48: ref;

axiom .str.48 == $sub.ref(0, 156516);

const {:count 25} .str.49: ref;

axiom .str.49 == $sub.ref(0, 157565);

const {:count 24} .str.50: ref;

axiom .str.50 == $sub.ref(0, 158613);

const {:count 19} .str.51: ref;

axiom .str.51 == $sub.ref(0, 159656);

const {:count 34} .str.52: ref;

axiom .str.52 == $sub.ref(0, 160714);

const {:count 20} .str.53: ref;

axiom .str.53 == $sub.ref(0, 161758);

const {:count 47} .str.44: ref;

axiom .str.44 == $sub.ref(0, 162829);

const {:count 20} .str.45: ref;

axiom .str.45 == $sub.ref(0, 163873);

const {:count 23} .str.46: ref;

axiom .str.46 == $sub.ref(0, 164920);

const {:count 37} .str.47: ref;

axiom .str.47 == $sub.ref(0, 165981);

const ehci_cf_port_reset_rwsem: ref;

axiom ehci_cf_port_reset_rwsem == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const {:count 33} .str.41: ref;

axiom .str.41 == $sub.ref(0, 167038);

const {:count 46} .str.30: ref;

axiom .str.30 == $sub.ref(0, 168108);

const {:count 17} .str.31: ref;

axiom .str.31 == $sub.ref(0, 169149);

const {:count 19} .str.36: ref;

axiom .str.36 == $sub.ref(0, 170192);

const {:count 26} .str.37: ref;

axiom .str.37 == $sub.ref(0, 171242);

const {:count 19} .str.32: ref;

axiom .str.32 == $sub.ref(0, 172285);

const {:count 31} .str.33: ref;

axiom .str.33 == $sub.ref(0, 173340);

const {:count 40} .str.34: ref;

axiom .str.34 == $sub.ref(0, 174404);

const {:count 35} .str.35: ref;

axiom .str.35 == $sub.ref(0, 175463);

const {:count 22} .str.42: ref;

axiom .str.42 == $sub.ref(0, 176509);

const {:count 22} .str.43: ref;

axiom .str.43 == $sub.ref(0, 177555);

const {:count 17} .str.109: ref;

axiom .str.109 == $sub.ref(0, 178596);

const {:count 4} .str.110: ref;

axiom .str.110 == $sub.ref(0, 179624);

const {:count 23} .str.104: ref;

axiom .str.104 == $sub.ref(0, 180671);

const {:count 33} .str.105: ref;

axiom .str.105 == $sub.ref(0, 181728);

const {:count 18} .str.106: ref;

axiom .str.106 == $sub.ref(0, 182770);

const {:count 29} .str.107: ref;

axiom .str.107 == $sub.ref(0, 183823);

const {:count 28} .str.108: ref;

axiom .str.108 == $sub.ref(0, 184875);

const {:count 19} .str.111: ref;

axiom .str.111 == $sub.ref(0, 185918);

const {:count 21} .str.122: ref;

axiom .str.122 == $sub.ref(0, 186963);

const {:count 26} .str.123: ref;

axiom .str.123 == $sub.ref(0, 188013);

const {:count 22} .str.124: ref;

axiom .str.124 == $sub.ref(0, 189059);

const {:count 32} .str.125: ref;

axiom .str.125 == $sub.ref(0, 190115);

const {:count 20} .str.126: ref;

axiom .str.126 == $sub.ref(0, 191159);

const {:count 19} .str.121: ref;

axiom .str.121 == $sub.ref(0, 192202);

const {:count 17} .str.114: ref;

axiom .str.114 == $sub.ref(0, 193243);

const {:count 39} .str.115: ref;

axiom .str.115 == $sub.ref(0, 194306);

const {:count 7} .str.116: ref;

axiom .str.116 == $sub.ref(0, 195337);

const {:count 34} .str.117: ref;

axiom .str.117 == $sub.ref(0, 196395);

const {:count 25} .str.118: ref;

axiom .str.118 == $sub.ref(0, 197444);

const {:count 23} .str.119: ref;

axiom .str.119 == $sub.ref(0, 198491);

const {:count 44} .str.120: ref;

axiom .str.120 == $sub.ref(0, 199559);

const {:count 19} .str.112: ref;

axiom .str.112 == $sub.ref(0, 200602);

const {:count 26} .str.113: ref;

axiom .str.113 == $sub.ref(0, 201652);

const {:count 18} .str.127: ref;

axiom .str.127 == $sub.ref(0, 202694);

const {:count 77} .str.128: ref;

axiom .str.128 == $sub.ref(0, 203795);

const {:count 35} .str.129: ref;

axiom .str.129 == $sub.ref(0, 204854);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32800));

const .str: ref;

axiom .str == $sub.ref(0, 205899);

const {:count 12} .str.1: ref;

axiom .str.1 == $sub.ref(0, 206935);

const {:count 11} .str.2: ref;

axiom .str.2 == $sub.ref(0, 207970);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 209002);

const {:count 3} .str.1.236: ref;

axiom .str.1.236 == $sub.ref(0, 210029);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 211067);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 212095);

const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 213127);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const malloc: ref;

axiom malloc == $sub.ref(0, 214159);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 0} $r := $malloc($i0);
    return;
}



const isp1760_plat_probe: ref;

axiom isp1760_plat_probe == $sub.ref(0, 215191);

procedure isp1760_plat_probe($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.0, $CurrAddr, $M.2, $M.4, $M.6, $M.8, $M.23, $M.22, $M.25, $M.24, $M.27, $M.26, $M.29, $M.28, $M.3, $M.5, $M.7, $M.9, assertsPassed, $M.32, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.30, $M.38, $M.36, $M.40;



implementation isp1760_plat_probe($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p8: ref;
  var $i9: i64;
  var $i10: i64;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i22: i32;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $i29: i8;
  var $i30: i1;
  var $i31: i32;
  var $i32: i32;
  var $i33: i1;
  var $i34: i8;
  var $i35: i1;
  var $i36: i32;
  var $i37: i32;
  var $i38: i1;
  var $i39: i8;
  var $i40: i1;
  var $i41: i32;
  var $i42: i32;
  var $i43: i1;
  var $i44: i8;
  var $i45: i1;
  var $i46: i32;
  var $i47: i32;
  var $p49: ref;
  var $p50: ref;
  var $i51: i64;
  var $i52: i1;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $i58: i8;
  var $i59: i32;
  var $i60: i1;
  var $i61: i32;
  var $i62: i32;
  var $p63: ref;
  var $p64: ref;
  var $i65: i8;
  var $i66: i32;
  var $i67: i1;
  var $i68: i32;
  var $i69: i32;
  var $p70: ref;
  var $p71: ref;
  var $i72: i8;
  var $i73: i32;
  var $i74: i1;
  var $i75: i32;
  var $i76: i32;
  var $p77: ref;
  var $p78: ref;
  var $i79: i8;
  var $i80: i32;
  var $i81: i1;
  var $i82: i32;
  var $i83: i32;
  var $p84: ref;
  var $p85: ref;
  var $i86: i8;
  var $i87: i32;
  var $i88: i1;
  var $i89: i32;
  var $i90: i32;
  var $p91: ref;
  var $p92: ref;
  var $i93: i8;
  var $i94: i32;
  var $i95: i1;
  var $i96: i32;
  var $i97: i32;
  var $i98: i32;
  var $i48: i32;
  var $p99: ref;
  var $i100: i64;
  var $i101: i32;
  var $p102: ref;
  var $i103: i32;
  var $i104: i1;
  var $i7: i32;
  var vslice_dummy_var_12: i32;
  var vslice_dummy_var_13: i32;
  var vslice_dummy_var_14: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2} $p2 := platform_get_resource($p0, 512, 0);
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3} $p3 := platform_get_resource($p0, 1024, 0);
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.0, $p8);
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 0} true;
    $i10 := $and.i64($i9, 15);
    call {:si_unique_call 5} {:cexpr "irqflags"} boogie_si_record_i64($i10);
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(1240, 1));
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_16;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_18;

  corral_source_split_18:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 1480)), $mul.ref(16, 1));
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 8} $p50 := dev_get_platdata($p49);
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($p50);
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    $i52 := $ne.i64($i51, 0);
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    $i98 := 0;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i48 := $i98;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    $i100 := $load.i64($M.0, $p99);
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    $i101 := $trunc.i64.i32($i100);
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p0, $mul.ref(0, 1480)), $mul.ref(16, 1));
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} $i103 := isp1760_register($p2, $i101, $i10, $p102, $i48);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    call {:si_unique_call 25} {:cexpr "ret"} boogie_si_record_i32($i103);
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    $i104 := $slt.i32($i103, 0);
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    assume {:branchcond $i104} true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} vslice_dummy_var_14 := printk.ref(.str.16);
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb47:
    assume $i104 == 1;
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    $i7 := $i103;
    goto $bb3;

  SeqInstr_1:
    assume !assertsPassed;
    return;

  $bb26:
    assume $i52 == 1;
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 1480)), $mul.ref(16, 1));
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    call {:si_unique_call 26} $p54 := dev_get_platdata($p53);
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p54);
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p55);
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($p56, $mul.ref(0, 1));
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    $i58 := $load.i8($M.0, $p57);
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    $i59 := $zext.i8.i32($i58);
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    $i60 := $ne.i32($i59, 0);
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    $i62 := 0;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p55);
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($p63, $mul.ref(0, 1));
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    $i65 := $load.i8($M.0, $p64);
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    $i66 := $zext.i8.i32($i65);
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    $i67 := $ne.i32($i66, 0);
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    assume {:branchcond $i67} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    $i69 := $i62;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    $p70 := $bitcast.ref.ref($p55);
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($p70, $mul.ref(0, 1));
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    $i72 := $load.i8($M.0, $p71);
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    $i73 := $zext.i8.i32($i72);
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    $i74 := $ne.i32($i73, 0);
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    assume {:branchcond $i74} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    $i76 := $i69;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p55);
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($p77, $mul.ref(0, 1));
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    $i79 := $load.i8($M.0, $p78);
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    $i80 := $zext.i8.i32($i79);
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    $i81 := $ne.i32($i80, 0);
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    $i83 := $i76;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    $p84 := $bitcast.ref.ref($p55);
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($p84, $mul.ref(0, 1));
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    $i86 := $load.i8($M.0, $p85);
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    $i87 := $zext.i8.i32($i86);
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    $i88 := $ne.i32($i87, 0);
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    $i90 := $i83;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    $p91 := $bitcast.ref.ref($p55);
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($p91, $mul.ref(0, 1));
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    $i93 := $load.i8($M.0, $p92);
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    $i94 := $zext.i8.i32($i93);
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    $i95 := $ne.i32($i94, 0);
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    $i97 := $i90;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    $i98 := $i97;
    goto $bb46;

  $bb43:
    assume $i95 == 1;
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    $i96 := $or.i32($i90, 32);
    call {:si_unique_call 32} {:cexpr "devflags"} boogie_si_record_i32($i96);
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    $i97 := $i96;
    goto $bb45;

  $bb40:
    assume $i88 == 1;
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    $i89 := $or.i32($i83, 16);
    call {:si_unique_call 31} {:cexpr "devflags"} boogie_si_record_i32($i89);
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    $i90 := $i89;
    goto $bb42;

  $bb37:
    assume $i81 == 1;
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    $i82 := $or.i32($i76, 8);
    call {:si_unique_call 30} {:cexpr "devflags"} boogie_si_record_i32($i82);
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    $i83 := $i82;
    goto $bb39;

  $bb34:
    assume $i74 == 1;
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    $i75 := $or.i32($i69, 4);
    call {:si_unique_call 29} {:cexpr "devflags"} boogie_si_record_i32($i75);
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    $i76 := $i75;
    goto $bb36;

  $bb31:
    assume $i67 == 1;
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    $i68 := $or.i32($i62, 2);
    call {:si_unique_call 28} {:cexpr "devflags"} boogie_si_record_i32($i68);
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    $i69 := $i68;
    goto $bb33;

  $bb28:
    assume $i60 == 1;
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    $i61 := $or.i32(0, 64);
    call {:si_unique_call 27} {:cexpr "devflags"} boogie_si_record_i32($i61);
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    $i62 := $i61;
    goto $bb30;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(1240, 1));
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p1, 0);
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6} $i19 := of_device_is_compatible($p18, .str.10);
    call {:si_unique_call 7} {:cexpr "tmp"} boogie_si_record_i32($i19);
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i22 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 10} vslice_dummy_var_13 := of_property_read_u32($p18, .str.11, $p1);
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.1, $p1);
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 16);
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i27 := $i22;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 12} $i28 := of_property_read_bool($p18, .str.12);
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    $i29 := $zext.i1.i8($i28);
    call {:si_unique_call 13} {:cexpr "tmp___0"} boogie_si_record_i8($i29);
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i8.i1($i29);
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    $i32 := $i27;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    call {:si_unique_call 15} $i33 := of_property_read_bool($p18, .str.13);
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    $i34 := $zext.i1.i8($i33);
    call {:si_unique_call 16} {:cexpr "tmp___1"} boogie_si_record_i8($i34);
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i8.i1($i34);
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    $i37 := $i32;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    call {:si_unique_call 18} $i38 := of_property_read_bool($p18, .str.14);
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    $i39 := $zext.i1.i8($i38);
    call {:si_unique_call 19} {:cexpr "tmp___2"} boogie_si_record_i8($i39);
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i8.i1($i39);
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    $i42 := $i37;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    call {:si_unique_call 21} $i43 := of_property_read_bool($p18, .str.15);
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    $i44 := $zext.i1.i8($i43);
    call {:si_unique_call 22} {:cexpr "tmp___3"} boogie_si_record_i8($i44);
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i8.i1($i44);
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    $i47 := $i42;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    $i48 := $i47;
    goto $bb25;

  $bb22:
    assume $i45 == 1;
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    $i46 := $or.i32($i42, 32);
    call {:si_unique_call 23} {:cexpr "devflags"} boogie_si_record_i32($i46);
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    $i47 := $i46;
    goto $bb24;

  $bb19:
    assume $i40 == 1;
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    $i41 := $or.i32($i37, 16);
    call {:si_unique_call 20} {:cexpr "devflags"} boogie_si_record_i32($i41);
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    $i42 := $i41;
    goto $bb21;

  $bb16:
    assume $i35 == 1;
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    $i36 := $or.i32($i32, 8);
    call {:si_unique_call 17} {:cexpr "devflags"} boogie_si_record_i32($i36);
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    $i37 := $i36;
    goto $bb18;

  $bb13:
    assume $i30 == 1;
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    $i31 := $or.i32($i27, 4);
    call {:si_unique_call 14} {:cexpr "devflags"} boogie_si_record_i32($i31);
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    $i32 := $i31;
    goto $bb15;

  $bb10:
    assume $i25 == 1;
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    $i26 := $or.i32($i22, 2);
    call {:si_unique_call 11} {:cexpr "devflags"} boogie_si_record_i32($i26);
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    $i27 := $i26;
    goto $bb12;

  $bb7:
    assume $i20 == 1;
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    $i21 := $or.i32(0, 64);
    call {:si_unique_call 9} {:cexpr "devflags"} boogie_si_record_i32($i21);
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    $i22 := $i21;
    goto $bb9;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4} vslice_dummy_var_12 := printk.ref(.str.9);
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 19);
    goto $bb3;
}



const isp1760_plat_remove: ref;

axiom isp1760_plat_remove == $sub.ref(0, 216223);

procedure isp1760_plat_remove($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.4, $M.6, $M.8;



implementation isp1760_plat_remove($p0: ref) returns ($r: i32)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1480)), $mul.ref(16, 1));
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} isp1760_unregister($p1);
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const isp1760_unregister: ref;

axiom isp1760_unregister == $sub.ref(0, 217255);

procedure isp1760_unregister($p0: ref);
  free requires assertsPassed;
  modifies $M.2, $M.4, $M.6, $M.8;



implementation isp1760_unregister($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} $p1 := dev_get_drvdata($p0);
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 36} isp1760_udc_unregister($p2);
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 6056)), $mul.ref(32, 1));
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} isp1760_hcd_unregister($p3);
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    return;
}



const dev_get_drvdata: ref;

axiom dev_get_drvdata == $sub.ref(0, 218287);

procedure dev_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(512, 1));
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const isp1760_udc_unregister: ref;

axiom isp1760_udc_unregister == $sub.ref(0, 219319);

procedure isp1760_udc_unregister($p0: ref);
  free requires assertsPassed;
  modifies $M.2, $M.4, $M.6, $M.8;



implementation isp1760_udc_unregister($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 6056)), $mul.ref(2416, 1));
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6056)), $mul.ref(2416, 1)), $mul.ref(0, 1));
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6056)), $mul.ref(2416, 1)), $mul.ref(40, 1));
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 38} usb_del_gadget_udc($p6);
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6056)), $mul.ref(2416, 1)), $mul.ref(8, 1));
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p1);
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} ldv_free_irq_108($i8, $p9);
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6056)), $mul.ref(2416, 1)), $mul.ref(16, 1));
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} kfree($p11);
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const isp1760_hcd_unregister: ref;

axiom isp1760_hcd_unregister == $sub.ref(0, 220351);

procedure isp1760_hcd_unregister($p0: ref);
  free requires assertsPassed;



implementation isp1760_hcd_unregister($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(0, 1));
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(0, 1));
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 41} usb_remove_hcd($p6);
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(0, 1));
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} usb_put_hcd($p8);
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const usb_remove_hcd: ref;

axiom usb_remove_hcd == $sub.ref(0, 221383);

procedure usb_remove_hcd($p0: ref);
  free requires assertsPassed;



implementation usb_remove_hcd($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    return;
}



const usb_put_hcd: ref;

axiom usb_put_hcd == $sub.ref(0, 222415);

procedure usb_put_hcd($p0: ref);
  free requires assertsPassed;



implementation usb_put_hcd($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    return;
}



const usb_del_gadget_udc: ref;

axiom usb_del_gadget_udc == $sub.ref(0, 223447);

procedure usb_del_gadget_udc($p0: ref);
  free requires assertsPassed;



implementation usb_del_gadget_udc($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    return;
}



const ldv_free_irq_108: ref;

axiom ldv_free_irq_108 == $sub.ref(0, 224479);

procedure ldv_free_irq_108($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.2, $M.4, $M.6, $M.8;



implementation ldv_free_irq_108($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} {:cexpr "ldv_free_irq_108:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} free_irq($i0, $p1);
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 45} disable_suitable_irq_1($i0, $p1);
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    return;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 225511);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} free_($p0);
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 226543);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 47} $free($p0);
    return;
}



const free_irq: ref;

axiom free_irq == $sub.ref(0, 227575);

procedure free_irq($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation free_irq($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} {:cexpr "free_irq:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    return;
}



const disable_suitable_irq_1: ref;

axiom disable_suitable_irq_1 == $sub.ref(0, 228607);

procedure disable_suitable_irq_1($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.2, $M.4, $M.6, $M.8;



implementation disable_suitable_irq_1($i0: i32, $p1: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} {:cexpr "disable_suitable_irq_1:arg:line"} boogie_si_record_i32($i0);
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    $i2 := $M.2;
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i6 := $M.4;
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i10 := $M.6;
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i14 := $M.8;
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb20:
    assume $i15 == 1;
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    $i16 := $M.9;
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i0, $i16);
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb22;

  $bb23:
    assume $i17 == 1;
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    $M.8 := 0;
    call {:si_unique_call 53} {:cexpr "ldv_irq_1_3"} boogie_si_record_i32(0);
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb14:
    assume $i11 == 1;
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    $i12 := $M.7;
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i0, $i12);
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb16;

  $bb17:
    assume $i13 == 1;
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    $M.6 := 0;
    call {:si_unique_call 52} {:cexpr "ldv_irq_1_2"} boogie_si_record_i32(0);
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb8:
    assume $i7 == 1;
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    $i8 := $M.5;
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i0, $i8);
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb10;

  $bb11:
    assume $i9 == 1;
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    $M.4 := 0;
    call {:si_unique_call 51} {:cexpr "ldv_irq_1_1"} boogie_si_record_i32(0);
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    $i4 := $M.3;
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, $i4);
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    $M.2 := 0;
    call {:si_unique_call 50} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32(0);
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const platform_get_resource: ref;

axiom platform_get_resource == $sub.ref(0, 229639);

procedure platform_get_resource($p0: ref, $i1: i32, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation platform_get_resource($p0: ref, $i1: i32, $i2: i32) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 54} {:cexpr "platform_get_resource:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 55} {:cexpr "platform_get_resource:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 56} $p3 := external_alloc();
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const printk: ref;

axiom printk == $sub.ref(0, 230671);

procedure printk.ref($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 1} true;
    call {:si_unique_call 57} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 58} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const of_device_is_compatible: ref;

axiom of_device_is_compatible == $sub.ref(0, 231703);

procedure of_device_is_compatible($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation of_device_is_compatible($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 1} true;
    call {:si_unique_call 59} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 60} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const of_property_read_u32: ref;

axiom of_property_read_u32 == $sub.ref(0, 232735);

procedure of_property_read_u32($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation of_property_read_u32($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 61} $i3 := of_property_read_u32_array($p0, $p1, $p2, 1);
    call {:si_unique_call 62} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const of_property_read_bool: ref;

axiom of_property_read_bool == $sub.ref(0, 233767);

procedure of_property_read_bool($p0: ref, $p1: ref) returns ($r: i1);
  free requires assertsPassed;



implementation of_property_read_bool($p0: ref, $p1: ref) returns ($r: i1)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 63} $p2 := of_find_property($p0, $p1, $0.ref);
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const dev_get_platdata: ref;

axiom dev_get_platdata == $sub.ref(0, 234799);

procedure dev_get_platdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_platdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(504, 1));
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const isp1760_register: ref;

axiom isp1760_register == $sub.ref(0, 235831);

procedure isp1760_register($p0: ref, $i1: i32, $i2: i64, $p3: ref, $i4: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.4, $M.6, $M.8, $CurrAddr, $M.23, $M.22, $M.25, $M.24, $M.27, $M.26, $M.29, $M.28, $M.3, $M.5, $M.7, $M.9, assertsPassed, $M.1, $M.32, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.30, $M.38, $M.36, $M.40;



implementation isp1760_register($p0: ref, $i1: i32, $i2: i64, $p3: ref, $i4: i32) returns ($r: i32)
{
  var $i5: i32;
  var $i6: i1;
  var $i7: i8;
  var $i8: i32;
  var $i9: i1;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i1;
  var $i25: i8;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i32;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i1;
  var $i37: i8;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i32;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var $i49: i32;
  var $i50: i1;
  var $i51: i1;
  var $i52: i32;
  var $i53: i1;
  var $p54: ref;
  var $p55: ref;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 64} {:cexpr "isp1760_register:arg:irq"} boogie_si_record_i32($i1);
    call {:si_unique_call 65} {:cexpr "isp1760_register:arg:irqflags"} boogie_si_record_i64($i2);
    call {:si_unique_call 66} {:cexpr "isp1760_register:arg:devflags"} boogie_si_record_i32($i4);
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 64);
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i6);
    call {:si_unique_call 67} {:cexpr "udc_disabled"} boogie_si_record_i8($i7);
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 68} $i8 := usb_disabled();
    call {:si_unique_call 69} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 1424)), $mul.ref(1160, 1));
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p12, $0.ref);
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 70} $p13 := devm_kzalloc($p3, 6048, 208);
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, 0);
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p14, $mul.ref(0, 6056)), $mul.ref(0, 1));
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p17, $p3);
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p14, $mul.ref(0, 6056)), $mul.ref(16, 1));
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, $i4);
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 71} $p19 := __devm_gpiod_get_optional($p3, $0.ref, 7);
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p14, $mul.ref(0, 6056)), $mul.ref(24, 1));
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p20, $p19);
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p14, $mul.ref(0, 6056)), $mul.ref(24, 1));
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 72} $i24 := IS_ERR($p23);
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    $i25 := $zext.i1.i8($i24);
    call {:si_unique_call 73} {:cexpr "tmp___2"} boogie_si_record_i8($i25);
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i8.i1($i25);
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 76} $p32 := devm_ioremap_resource($p3, $p0);
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p14, $mul.ref(0, 6056)), $mul.ref(8, 1));
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p33, $p32);
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p14, $mul.ref(0, 6056)), $mul.ref(8, 1));
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 77} $i36 := IS_ERR($p35);
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    $i37 := $zext.i1.i8($i36);
    call {:si_unique_call 78} {:cexpr "tmp___4"} boogie_si_record_i8($i37);
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i8.i1($i37);
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 81} isp1760_init_core($p14);
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 82} $i43 := usb_disabled();
    call {:si_unique_call 83} {:cexpr "tmp___5"} boogie_si_record_i32($i43);
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i43, 0);
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i8.i1($i7);
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    assume {:branchcond $i51} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i51 == 1);
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 86} $i52 := isp1760_udc_register($p14, $i1, $i2);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    call {:si_unique_call 87} {:cexpr "ret"} boogie_si_record_i32($i52);
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    $i53 := $slt.i32($i52, 0);
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p14);
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 89} dev_set_drvdata($p3, $p55);
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb25:
    assume $i53 == 1;
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p14, $mul.ref(0, 6056)), $mul.ref(32, 1));
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 88} isp1760_hcd_unregister($p54);
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    $i11 := $i52;
    goto $bb6;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i51 == 1;
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb17:
    assume $i44 == 1;
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p14, $mul.ref(0, 6056)), $mul.ref(32, 1));
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p14, $mul.ref(0, 6056)), $mul.ref(8, 1));
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    $i48 := $or.i64($i2, 128);
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 84} $i49 := isp1760_hcd_register($p45, $p47, $p0, $i1, $i48, $p3);
    call {:si_unique_call 85} {:cexpr "ret"} boogie_si_record_i32($i49);
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    $i50 := $slt.i32($i49, 0);
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb19:
    assume $i50 == 1;
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    $i11 := $i49;
    goto $bb6;

  $bb14:
    assume $i38 == 1;
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p14, $mul.ref(0, 6056)), $mul.ref(8, 1));
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 79} $i41 := PTR_ERR($p40);
    call {:si_unique_call 80} {:cexpr "tmp___3"} boogie_si_record_i64($i41);
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i64.i32($i41);
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    $i11 := $i42;
    goto $bb6;

  $bb11:
    assume $i26 == 1;
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p14, $mul.ref(0, 6056)), $mul.ref(24, 1));
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 74} $i30 := PTR_ERR($p29);
    call {:si_unique_call 75} {:cexpr "tmp___1"} boogie_si_record_i64($i30);
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i64.i32($i30);
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    $i11 := $i31;
    goto $bb6;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 12);
    goto $bb6;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1($i7);
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 19);
    goto $bb6;
}



const usb_disabled: ref;

axiom usb_disabled == $sub.ref(0, 236863);

procedure usb_disabled() returns ($r: i32);
  free requires assertsPassed;



implementation usb_disabled() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 1} true;
    call {:si_unique_call 90} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 91} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const devm_kzalloc: ref;

axiom devm_kzalloc == $sub.ref(0, 237895);

procedure devm_kzalloc($p0: ref, $i1: i64, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation devm_kzalloc($p0: ref, $i1: i64, $i2: i32) returns ($r: ref)
{
  var $i3: i32;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 92} {:cexpr "devm_kzalloc:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 93} {:cexpr "devm_kzalloc:arg:gfp"} boogie_si_record_i32($i2);
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    $i3 := $or.i32($i2, 32768);
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 94} $p4 := devm_kmalloc($p0, $i1, $i3);
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const __devm_gpiod_get_optional: ref;

axiom __devm_gpiod_get_optional == $sub.ref(0, 238927);

procedure __devm_gpiod_get_optional($p0: ref, $p1: ref, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation __devm_gpiod_get_optional($p0: ref, $p1: ref, $i2: i32) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 95} {:cexpr "__devm_gpiod_get_optional:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 96} $p3 := external_alloc();
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const IS_ERR: ref;

axiom IS_ERR == $sub.ref(0, 239959);

procedure IS_ERR($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation IS_ERR($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 97} $i1 := ldv_is_err($p0);
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 98} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const PTR_ERR: ref;

axiom PTR_ERR == $sub.ref(0, 240991);

procedure PTR_ERR($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation PTR_ERR($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 99} $i1 := ldv_ptr_err($p0);
    call {:si_unique_call 100} {:cexpr "tmp"} boogie_si_record_i64($i1);
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const devm_ioremap_resource: ref;

axiom devm_ioremap_resource == $sub.ref(0, 242023);

procedure devm_ioremap_resource($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devm_ioremap_resource($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 101} $p2 := external_alloc();
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const isp1760_init_core: ref;

axiom isp1760_init_core == $sub.ref(0, 243055);

procedure isp1760_init_core($p0: ref);
  free requires assertsPassed;



implementation isp1760_init_core($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i22: i32;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i32;
  var $p29: ref;
  var $i30: i32;
  var $i31: i32;
  var $i32: i1;
  var $i33: i32;
  var $i34: i32;
  var $p35: ref;
  var $i36: i32;
  var $i37: i32;
  var $i38: i1;
  var $i39: i32;
  var $i40: i32;
  var $p41: ref;
  var $i42: i32;
  var $i43: i32;
  var $i44: i1;
  var $i45: i32;
  var $i46: i32;
  var $p47: ref;
  var $i48: i32;
  var $i49: i32;
  var $i50: i1;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $i54: i32;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i32;
  var $i61: i32;
  var $i62: i1;
  var $p63: ref;
  var $i64: i32;
  var $i65: i32;
  var $i66: i1;
  var $i67: i32;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i32;
  var $i74: i32;
  var $i75: i1;
  var $i76: i32;
  var $p77: ref;
  var $i78: i32;
  var $i79: i32;
  var $i80: i1;
  var $p81: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 6056)), $mul.ref(24, 1));
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 6056)), $mul.ref(8, 1));
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 106} isp1760_write32($p10, 780, 1);
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 107} msleep(100);
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 6056)), $mul.ref(16, 1));
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i12, 2);
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i16 := 256;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 6056)), $mul.ref(16, 1));
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i18, 8);
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i22 := $i16;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 6056)), $mul.ref(16, 1));
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    $i25 := $and.i32($i24, 16);
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    $i28 := $i22;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 6056)), $mul.ref(16, 1));
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    $i31 := $and.i32($i30, 32);
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    $i34 := $i28;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 6056)), $mul.ref(16, 1));
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    $i37 := $and.i32($i36, 128);
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    $i40 := $i34;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 6056)), $mul.ref(16, 1));
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    $i43 := $and.i32($i42, 256);
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 0);
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    $i46 := $i40;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 6056)), $mul.ref(16, 1));
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.0, $p47);
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    $i49 := $and.i32($i48, 64);
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i49, 0);
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    $i54 := $i46;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 6056)), $mul.ref(8, 1));
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 116} isp1760_write32($p56, 768, $i54);
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 6056)), $mul.ref(8, 1));
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 117} isp1760_write32($p58, 768, $i54);
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 6056)), $mul.ref(16, 1));
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.0, $p59);
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    $i61 := $and.i32($i60, 64);
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    $i62 := $ne.i32($i61, 0);
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i62 == 1);
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i67 := 8388632;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p0, $mul.ref(0, 6056)), $mul.ref(8, 1));
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.0, $p68);
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 118} isp1760_write32($p69, 884, $i67);
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 6056)), $mul.ref(0, 1));
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.0, $p70);
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 6056)), $mul.ref(16, 1));
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.0, $p72);
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    $i74 := $and.i32($i73, 2);
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    $i75 := $ne.i32($i74, 0);
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    $i76 := (if $i75 == 1 then 16 else 32);
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p0, $mul.ref(0, 6056)), $mul.ref(16, 1));
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.0, $p77);
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    $i79 := $and.i32($i78, 8);
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    $i80 := $ne.i32($i79, 0);
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    $p81 := (if $i80 == 1 then .str.7 else .str.8);
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 119} _dev_info.ref.ref.i32.ref($p71, .str.6, $i76, $p81);
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    return;

  $bb29:
    assume $i62 == 1;
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 6056)), $mul.ref(16, 1));
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.0, $p63);
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    $i65 := $and.i32($i64, 4);
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    $i66 := $ne.i32($i65, 0);
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    assume {:branchcond $i66} true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i66 == 1);
    goto $bb31;

  $bb32:
    assume $i66 == 1;
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    $i67 := 394240;
    goto $bb34;

  $bb26:
    assume $i50 == 1;
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 6056)), $mul.ref(8, 1));
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 114} isp1760_write32($p52, 524, 0);
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    $i53 := $or.i32($i46, 1024);
    call {:si_unique_call 115} {:cexpr "hwmode"} boogie_si_record_i32($i53);
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    $i54 := $i53;
    goto $bb28;

  $bb23:
    assume $i44 == 1;
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    $i45 := $or.i32($i40, 2);
    call {:si_unique_call 113} {:cexpr "hwmode"} boogie_si_record_i32($i45);
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    $i46 := $i45;
    goto $bb25;

  $bb20:
    assume $i38 == 1;
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    $i39 := $or.i32($i34, 4);
    call {:si_unique_call 112} {:cexpr "hwmode"} boogie_si_record_i32($i39);
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    $i40 := $i39;
    goto $bb22;

  $bb17:
    assume $i32 == 1;
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    $i33 := $or.i32($i28, 32);
    call {:si_unique_call 111} {:cexpr "hwmode"} boogie_si_record_i32($i33);
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    $i34 := $i33;
    goto $bb19;

  $bb14:
    assume $i26 == 1;
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    $i27 := $or.i32($i22, 64);
    call {:si_unique_call 110} {:cexpr "hwmode"} boogie_si_record_i32($i27);
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    $i28 := $i27;
    goto $bb16;

  $bb11:
    assume $i20 == 1;
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    $i21 := $or.i32($i16, 32768);
    call {:si_unique_call 109} {:cexpr "hwmode"} boogie_si_record_i32($i21);
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    $i22 := $i21;
    goto $bb13;

  $bb8:
    assume $i14 == 1;
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    $i15 := $and.i32(256, $sub.i32(0, 257));
    call {:si_unique_call 108} {:cexpr "hwmode"} boogie_si_record_i32($i15);
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb10;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 6056)), $mul.ref(24, 1));
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 102} gpiod_set_value_cansleep($p6, 1);
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 103} __const_udelay(4295000);
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 104} __const_udelay(4295000);
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 120} __const_udelay(4295000);
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 121} __const_udelay(4295000);
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 122} __const_udelay(4295000);
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 123} __const_udelay(4295000);
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 124} __const_udelay(4295000);
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 125} __const_udelay(4295000);
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 126} __const_udelay(4295000);
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 127} __const_udelay(4295000);
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 128} __const_udelay(4295000);
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 129} __const_udelay(4295000);
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 130} __const_udelay(4295000);
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 131} __const_udelay(4295000);
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    call {:si_unique_call 132} __const_udelay(4295000);
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    call {:si_unique_call 133} __const_udelay(4295000);
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 134} __const_udelay(4295000);
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 135} __const_udelay(4295000);
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    call {:si_unique_call 136} __const_udelay(4295000);
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    call {:si_unique_call 137} __const_udelay(4295000);
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    call {:si_unique_call 138} __const_udelay(4295000);
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    call {:si_unique_call 139} __const_udelay(4295000);
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 140} __const_udelay(4295000);
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    call {:si_unique_call 141} __const_udelay(4295000);
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    call {:si_unique_call 142} __const_udelay(4295000);
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    call {:si_unique_call 143} __const_udelay(4295000);
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    call {:si_unique_call 144} __const_udelay(4295000);
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    call {:si_unique_call 145} __const_udelay(4295000);
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    call {:si_unique_call 146} __const_udelay(4295000);
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    call {:si_unique_call 147} __const_udelay(4295000);
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    call {:si_unique_call 148} __const_udelay(4295000);
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    call {:si_unique_call 149} __const_udelay(4295000);
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    call {:si_unique_call 150} __const_udelay(4295000);
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    call {:si_unique_call 151} __const_udelay(4295000);
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    call {:si_unique_call 152} __const_udelay(4295000);
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    call {:si_unique_call 153} __const_udelay(4295000);
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} __const_udelay(4295000);
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} __const_udelay(4295000);
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} __const_udelay(4295000);
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} __const_udelay(4295000);
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} __const_udelay(4295000);
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} __const_udelay(4295000);
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} __const_udelay(4295000);
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    call {:si_unique_call 161} __const_udelay(4295000);
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    call {:si_unique_call 162} __const_udelay(4295000);
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    call {:si_unique_call 163} __const_udelay(4295000);
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    call {:si_unique_call 164} __const_udelay(4295000);
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    call {:si_unique_call 165} __const_udelay(4295000);
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    call {:si_unique_call 166} __const_udelay(4295000);
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    call {:si_unique_call 167} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 6056)), $mul.ref(24, 1));
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 105} gpiod_set_value_cansleep($p8, 0);
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    goto $bb7;
}



const isp1760_hcd_register: ref;

axiom isp1760_hcd_register == $sub.ref(0, 244087);

procedure isp1760_hcd_register($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i64, $p5: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation isp1760_hcd_register($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i64, $p5: ref) returns ($r: i32)
{
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $p18: ref;
  var $i19: i64;
  var $p20: ref;
  var $p21: ref;
  var $i22: i16;
  var $i23: i16;
  var $i24: i16;
  var $i25: i32;
  var $i26: i1;
  var $p28: ref;
  var $p29: ref;
  var $i10: i32;
  var vslice_dummy_var_15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} {:cexpr "isp1760_hcd_register:arg:irq"} boogie_si_record_i32($i3);
    call {:si_unique_call 169} {:cexpr "isp1760_hcd_register:arg:irqflags"} boogie_si_record_i64($i4);
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 170} $p6 := dev_name($p5);
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 171} $p7 := usb_create_hcd(isp1760_hc_driver, $p5, $p6);
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p7, $mul.ref(0, 968)), $mul.ref(968, 1));
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p12, $p0);
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(0, 1));
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p13, $p7);
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 172} init_memory($p0);
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p7, $mul.ref(0, 968)), $mul.ref(580, 1));
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, $i3);
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p7, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p15, $p1);
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    $i17 := $load.i64($M.0, $p16);
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p7, $mul.ref(0, 968)), $mul.ref(592, 1));
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p18, $i17);
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} $i19 := resource_size($p2);
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p7, $mul.ref(0, 968)), $mul.ref(600, 1));
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p20, $i19);
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p7, $mul.ref(0, 968)), $mul.ref(576, 1));
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    $i22 := $load.i16($M.0, $p21);
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    $i23 := $and.i16($i22, $sub.i16(0, 2049));
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    $i24 := $or.i16($i23, 2048);
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p21, $i24);
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} $i25 := usb_add_hcd($p7, $i3, $i4);
    call {:si_unique_call 175} {:cexpr "ret"} boogie_si_record_i32($i25);
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 968)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 177} vslice_dummy_var_15 := device_wakeup_enable($p29);
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb5:
    assume $i26 == 1;
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 176} usb_put_hcd($p7);
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    $i10 := $i25;
    goto $bb3;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 12);
    goto $bb3;
}



const isp1760_udc_register: ref;

axiom isp1760_udc_register == $sub.ref(0, 245119);

procedure isp1760_udc_register($p0: ref, $i1: i32, $i2: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.4, $M.6, $M.8, $CurrAddr, $M.23, $M.22, $M.25, $M.24, $M.27, $M.26, $M.29, $M.28, $M.3, $M.5, $M.7, $M.9, assertsPassed, $M.1, $M.32, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.30, $M.38, $M.36, $M.40;



implementation isp1760_udc_register($p0: ref, $i1: i32, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i18: i32;
  var $i19: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i64;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $i35: i64;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $p42: ref;
  var $p44: ref;
  var $p46: ref;
  var $p48: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $i55: i1;
  var $i41: i32;
  var $p56: ref;
  var $i57: i32;
  var $i58: i1;
  var $p59: ref;
  var $i60: i32;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i20: i32;
  var vslice_dummy_var_16: ref;
  var vslice_dummy_var_17: i32;
  var vslice_dummy_var_18: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 178} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 179} {:cexpr "isp1760_udc_register:arg:irq"} boogie_si_record_i32($i1);
    call {:si_unique_call 180} {:cexpr "isp1760_udc_register:arg:irqflags"} boogie_si_record_i64($i2);
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 6056)), $mul.ref(2416, 1));
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6056)), $mul.ref(2416, 1)), $mul.ref(8, 1));
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, $sub.i32(0, 1));
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6056)), $mul.ref(2416, 1)), $mul.ref(0, 1));
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, $p0);
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 6056)), $mul.ref(8, 1));
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6056)), $mul.ref(2416, 1)), $mul.ref(24, 1));
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p9, $p8);
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6056)), $mul.ref(2416, 1)), $mul.ref(1624, 1));
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 181} vslice_dummy_var_16 := spinlock_check($p10);
    $p13 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 6056)), $mul.ref(2416, 1)), $mul.ref(1624, 1)), $mul.ref(0, 1));
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 182} __raw_spin_lock_init($p14, .str.3, $p3);
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6056)), $mul.ref(2416, 1)), $mul.ref(1696, 1));
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p4);
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 183} vslice_dummy_var_17 := reg_timer_3($p15, isp1760_udc_vbus_poll, $i16);
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 184} $i18 := isp1760_udc_init($p4);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    call {:si_unique_call 185} {:cexpr "ret"} boogie_si_record_i32($i18);
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i18, 0);
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 6056)), $mul.ref(0, 1));
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 186} $p23 := dev_name($p22);
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 187} $i24 := strlen($p23);
    call {:si_unique_call 188} {:cexpr "tmp"} boogie_si_record_i64($i24);
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    $i25 := $add.i64($i24, 7);
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 189} $p26 := kmalloc($i25, 208);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    $p27 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6056)), $mul.ref(2416, 1)), $mul.ref(16, 1));
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p27, $p26);
    $p28 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6056)), $mul.ref(2416, 1)), $mul.ref(16, 1));
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    $i31 := $eq.i64($i30, 0);
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    $p32 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6056)), $mul.ref(2416, 1)), $mul.ref(16, 1));
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} vslice_dummy_var_18 := sprintf.ref.ref.ref($p33, .str.4, $p23);
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    $i35 := $or.i64($i2, 128);
    $p36 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6056)), $mul.ref(2416, 1)), $mul.ref(16, 1));
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p4);
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} $i39 := ldv_request_irq_106($i1, isp1760_udc_irq, $i35, $p37, $p38);
    call {:si_unique_call 192} {:cexpr "ret"} boogie_si_record_i32($i39);
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    $i40 := $slt.i32($i39, 0);
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    $p42 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6056)), $mul.ref(2416, 1)), $mul.ref(8, 1));
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p42, $i1);
    $p44 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 6056)), $mul.ref(2416, 1)), $mul.ref(40, 1)), $mul.ref(88, 1));
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p44, isp1760_udc_ops);
    $p46 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 6056)), $mul.ref(2416, 1)), $mul.ref(40, 1)), $mul.ref(120, 1));
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p46, 0);
    $p48 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 6056)), $mul.ref(2416, 1)), $mul.ref(40, 1)), $mul.ref(124, 1));
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p48, 3);
    $p50 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 6056)), $mul.ref(2416, 1)), $mul.ref(40, 1)), $mul.ref(136, 1));
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p50, .str.5);
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 193} isp1760_udc_init_eps($p4);
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 6056)), $mul.ref(0, 1));
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    $p53 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6056)), $mul.ref(2416, 1)), $mul.ref(40, 1));
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 194} $i54 := usb_add_gadget_udc($p52, $p53);
    call {:si_unique_call 195} {:cexpr "ret"} boogie_si_record_i32($i54);
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    $i55 := $slt.i32($i54, 0);
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i20 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  $bb12:
    assume $i55 == 1;
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    $i41 := $i54;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6056)), $mul.ref(2416, 1)), $mul.ref(8, 1));
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.0, $p56);
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    $i58 := $sge.i32($i57, 0);
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    $p62 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6056)), $mul.ref(2416, 1)), $mul.ref(16, 1));
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 197} kfree($p63);
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    $i20 := $i41;
    goto $bb3;

  $bb15:
    assume $i58 == 1;
    $p59 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6056)), $mul.ref(2416, 1)), $mul.ref(8, 1));
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.0, $p59);
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p4);
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 196} ldv_free_irq_107($i60, $p61);
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb8:
    assume $i40 == 1;
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    $i41 := $i39;
    goto $bb10;

  $bb5:
    assume $i31 == 1;
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_10:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    $i20 := $i18;
    goto $bb3;

  SeqInstr_7:
    assume !assertsPassed;
    return;
}



const dev_set_drvdata: ref;

axiom dev_set_drvdata == $sub.ref(0, 246151);

procedure dev_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation dev_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(512, 1));
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p1);
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    return;
}



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 247183);

procedure spinlock_check($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spinlock_check($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __raw_spin_lock_init: ref;

axiom __raw_spin_lock_init == $sub.ref(0, 248215);

procedure __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    return;
}



const isp1760_udc_vbus_poll: ref;

axiom isp1760_udc_vbus_poll == $sub.ref(0, 249247);

procedure isp1760_udc_vbus_poll($i0: i64);



const reg_timer_3: ref;

axiom reg_timer_3 == $sub.ref(0, 250279);

procedure reg_timer_3($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.23, $M.0, $M.22, $M.25, $M.24, $M.27, $M.26, $M.29, $M.28;



implementation reg_timer_3($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $i3: i64;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 198} {:cexpr "reg_timer_3:arg:data"} boogie_si_record_i64($i2);
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p1);
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, $p2i.ref.i64(isp1760_udc_vbus_poll));
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 199} activate_suitable_timer_3($p0, $i2);
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const isp1760_udc_init: ref;

axiom isp1760_udc_init == $sub.ref(0, 251311);

procedure isp1760_udc_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.0, $M.32, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.30, $M.38, $M.36, $M.40, $M.23, $M.22, $M.25, $M.24, $M.27, $M.26, $M.29, $M.28, $CurrAddr, $M.2, $M.4, $M.6, $M.8, $M.3, $M.5, $M.7, $M.9, assertsPassed;



implementation isp1760_udc_init($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i16;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i12: i1;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 200} isp1760_udc_write($p0, 632, 47806);
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 201} $i1 := isp1760_udc_read($p0, 624);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    call {:si_unique_call 202} {:cexpr "chipid"} boogie_si_record_i32($i1);
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} $i2 := isp1760_udc_read($p0, 632);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    call {:si_unique_call 204} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i16($i2);
    call {:si_unique_call 205} {:cexpr "scratch"} boogie_si_record_i16($i3);
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32($i3);
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 47806);
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i1, 71042);
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 208} isp1760_udc_write($p0, 524, 16);
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} usleep_range(10000, 11000);
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 210} isp1760_udc_write($p0, 524, 0);
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 211} usleep_range(10000, 11000);
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i1, 1409552);
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb7;

  $bb8:
    assume $i13 == 1;
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 3640)), $mul.ref(0, 1));
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 6056)), $mul.ref(0, 1));
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 207} dev_err.ref.ref.i32($p17, .str.58, $i1);
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 19);
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 3640)), $mul.ref(0, 1));
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 6056)), $mul.ref(0, 1));
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i3);
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} dev_err.ref.ref.i32.i32($p9, .str.57, $i10, $i1);
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 19);
    goto $bb3;

  SeqInstr_16:
    assume !assertsPassed;
    return;

  SeqInstr_13:
    assume !assertsPassed;
    return;
}



const dev_name: ref;

axiom dev_name == $sub.ref(0, 252343);

procedure dev_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(312, 1));
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(16, 1));
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 212} $p9 := kobject_name($p8);
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    $p7 := $p9;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(312, 1));
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    $p7 := $p6;
    goto $bb3;
}



const strlen: ref;

axiom strlen == $sub.ref(0, 253375);

procedure strlen($p0: ref) returns ($r: i64);



const kmalloc: ref;

axiom kmalloc == $sub.ref(0, 254407);

procedure kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 213} {:cexpr "kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 214} {:cexpr "kmalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 215} ldv_check_alloc_flags($i1);
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 216} $p2 := ldv_undef_ptr();
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  SeqInstr_19:
    assume !assertsPassed;
    return;
}



const sprintf: ref;

axiom sprintf == $sub.ref(0, 255439);

procedure sprintf.ref.ref.i32.ref($p0: ref, $p1: ref, p.2: i32, p.3: ref) returns ($r: i32);



procedure sprintf.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32);



const isp1760_udc_irq: ref;

axiom isp1760_udc_irq == $sub.ref(0, 256471);

procedure isp1760_udc_irq($i0: i32, $p1: ref) returns ($r: i32);



const ldv_request_irq_106: ref;

axiom ldv_request_irq_106 == $sub.ref(0, 257503);

procedure ldv_request_irq_106($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3, $M.2, $M.5, $M.4, $M.7, $M.6, $M.9, $M.8;



implementation ldv_request_irq_106($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 217} {:cexpr "ldv_request_irq_106:arg:irq"} boogie_si_record_i32($i0);
    call {:si_unique_call 218} {:cexpr "ldv_request_irq_106:arg:flags"} boogie_si_record_i64($i2);
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 219} $i5 := request_irq($i0, $p1, $i2, $p3, $p4);
    call {:si_unique_call 220} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 221} $i6 := reg_check_1($p1);
    call {:si_unique_call 222} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i5, 0);
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 223} activate_suitable_irq_1($i0, $p4);
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const isp1760_udc_init_eps: ref;

axiom isp1760_udc_init_eps == $sub.ref(0, 258535);

procedure isp1760_udc_init_eps($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation isp1760_udc_init_eps($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p16: ref;
  var $p17: ref;
  var $p20: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p26: ref;
  var $p28: ref;
  var $p29: ref;
  var $p31: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p46: ref;
  var $p47: ref;
  var $p50: ref;
  var $p52: ref;
  var $p53: ref;
  var $p55: ref;
  var $p57: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i1;
  var $i70: i32;
  var $i71: i32;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p79: ref;
  var $p80: ref;
  var $p83: ref;
  var $p85: ref;
  var $p86: ref;
  var $p88: ref;
  var $p90: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p109: ref;
  var $p110: ref;
  var $p113: ref;
  var $p115: ref;
  var $p116: ref;
  var $p118: ref;
  var $p120: ref;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $p130: ref;
  var $p131: ref;
  var $i132: i1;
  var $i133: i32;
  var $i134: i32;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $p142: ref;
  var $p143: ref;
  var $p146: ref;
  var $p148: ref;
  var $p149: ref;
  var $p151: ref;
  var $p153: ref;
  var $p155: ref;
  var $p156: ref;
  var $p157: ref;
  var $p159: ref;
  var $p160: ref;
  var $p161: ref;
  var $p163: ref;
  var $p164: ref;
  var $p165: ref;
  var $p166: ref;
  var $p167: ref;
  var $p168: ref;
  var $p169: ref;
  var $p172: ref;
  var $p173: ref;
  var $p176: ref;
  var $p178: ref;
  var $p179: ref;
  var $p181: ref;
  var $p183: ref;
  var $p185: ref;
  var $p186: ref;
  var $p187: ref;
  var $p189: ref;
  var $p190: ref;
  var $p191: ref;
  var $p193: ref;
  var $p194: ref;
  var $i195: i1;
  var $i196: i32;
  var $i197: i32;
  var $p198: ref;
  var $p199: ref;
  var $p200: ref;
  var $p201: ref;
  var $p202: ref;
  var $p205: ref;
  var $p206: ref;
  var $p209: ref;
  var $p211: ref;
  var $p212: ref;
  var $p214: ref;
  var $p216: ref;
  var $p218: ref;
  var $p219: ref;
  var $p220: ref;
  var $p222: ref;
  var $p223: ref;
  var $p224: ref;
  var $p226: ref;
  var $p227: ref;
  var $p228: ref;
  var $p229: ref;
  var $p230: ref;
  var $p231: ref;
  var $p232: ref;
  var $p235: ref;
  var $p236: ref;
  var $p239: ref;
  var $p241: ref;
  var $p242: ref;
  var $p244: ref;
  var $p246: ref;
  var $p248: ref;
  var $p249: ref;
  var $p250: ref;
  var $p252: ref;
  var $p253: ref;
  var $p254: ref;
  var $p256: ref;
  var $p257: ref;
  var $i258: i1;
  var $i259: i32;
  var $i260: i32;
  var $p261: ref;
  var $p262: ref;
  var $p263: ref;
  var $p264: ref;
  var $p265: ref;
  var $p268: ref;
  var $p269: ref;
  var $p272: ref;
  var $p274: ref;
  var $p275: ref;
  var $p277: ref;
  var $p279: ref;
  var $p281: ref;
  var $p282: ref;
  var $p283: ref;
  var $p285: ref;
  var $p286: ref;
  var $p287: ref;
  var $p289: ref;
  var $p290: ref;
  var $p291: ref;
  var $p292: ref;
  var $p293: ref;
  var $p294: ref;
  var $p295: ref;
  var $p298: ref;
  var $p299: ref;
  var $p302: ref;
  var $p304: ref;
  var $p305: ref;
  var $p307: ref;
  var $p309: ref;
  var $p311: ref;
  var $p312: ref;
  var $p313: ref;
  var $p315: ref;
  var $p316: ref;
  var $p317: ref;
  var $p319: ref;
  var $p320: ref;
  var $i321: i1;
  var $i322: i32;
  var $i323: i32;
  var $p324: ref;
  var $p325: ref;
  var $p326: ref;
  var $p327: ref;
  var $p328: ref;
  var $p331: ref;
  var $p332: ref;
  var $p335: ref;
  var $p337: ref;
  var $p338: ref;
  var $p340: ref;
  var $p342: ref;
  var $p344: ref;
  var $p345: ref;
  var $p346: ref;
  var $p348: ref;
  var $p349: ref;
  var $p350: ref;
  var $p352: ref;
  var $p353: ref;
  var $p354: ref;
  var $p355: ref;
  var $p356: ref;
  var $p357: ref;
  var $p358: ref;
  var $p361: ref;
  var $p362: ref;
  var $p365: ref;
  var $p367: ref;
  var $p368: ref;
  var $p370: ref;
  var $p372: ref;
  var $p374: ref;
  var $p375: ref;
  var $p376: ref;
  var $p378: ref;
  var $p379: ref;
  var $p380: ref;
  var $p382: ref;
  var $p383: ref;
  var $i384: i1;
  var $i385: i32;
  var $i386: i32;
  var $p387: ref;
  var $p388: ref;
  var $p389: ref;
  var $p390: ref;
  var $p391: ref;
  var $p394: ref;
  var $p395: ref;
  var $p398: ref;
  var $p400: ref;
  var $p401: ref;
  var $p403: ref;
  var $p405: ref;
  var $p407: ref;
  var $p408: ref;
  var $p409: ref;
  var $p411: ref;
  var $p412: ref;
  var $p413: ref;
  var $p415: ref;
  var $p416: ref;
  var $p417: ref;
  var $p418: ref;
  var $p419: ref;
  var $p420: ref;
  var $p421: ref;
  var $p424: ref;
  var $p425: ref;
  var $p428: ref;
  var $p430: ref;
  var $p431: ref;
  var $p433: ref;
  var $p435: ref;
  var $p437: ref;
  var $p438: ref;
  var $p439: ref;
  var $p441: ref;
  var $p442: ref;
  var $p443: ref;
  var $p445: ref;
  var $p446: ref;
  var $i447: i1;
  var $i448: i32;
  var $i449: i32;
  var $p450: ref;
  var $p451: ref;
  var $p452: ref;
  var $p453: ref;
  var $p454: ref;
  var $p457: ref;
  var $p458: ref;
  var $p461: ref;
  var $p463: ref;
  var $p464: ref;
  var $p466: ref;
  var $p468: ref;
  var $p470: ref;
  var $p471: ref;
  var $p472: ref;
  var $p474: ref;
  var vslice_dummy_var_19: i32;
  var vslice_dummy_var_20: i32;
  var vslice_dummy_var_21: i32;
  var vslice_dummy_var_22: i32;
  var vslice_dummy_var_23: i32;
  var vslice_dummy_var_24: i32;
  var vslice_dummy_var_25: i32;
  var vslice_dummy_var_26: i32;
  var vslice_dummy_var_27: i32;
  var vslice_dummy_var_28: i32;
  var vslice_dummy_var_29: i32;
  var vslice_dummy_var_30: i32;
  var vslice_dummy_var_31: i32;
  var vslice_dummy_var_32: i32;
  var vslice_dummy_var_33: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3640)), $mul.ref(40, 1)), $mul.ref(104, 1));
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 224} INIT_LIST_HEAD($p2);
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 3640)), $mul.ref(1824, 1));
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 120)), $mul.ref(0, 1));
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p5, $p0);
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 120)), $mul.ref(72, 1));
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 225} INIT_LIST_HEAD($p6);
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    $i7 := 0;
    assume {:branchcond 0} true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !(0 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    $i8 := (if $i7 == 1 then 128 else 0);
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 120)), $mul.ref(88, 1));
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, $i8);
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 120)), $mul.ref(104, 1));
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, $0.ref);
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 120)), $mul.ref(96, 1));
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb6, $bb7;

  $bb7:
    assume !(0 == 1);
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    $p13 := .str.103;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 226} vslice_dummy_var_19 := sprintf.ref.ref.i32.ref($p12, .str.100, 0, $p13);
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 120)), $mul.ref(8, 1)), $mul.ref(16, 1));
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p16, isp1760_ep_ops);
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p4, $mul.ref(0, 120)), $mul.ref(96, 1));
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 120)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p20, $p17);
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb9, $bb10;

  $bb10:
    assume !(1 == 1);
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 120)), $mul.ref(8, 1)), $mul.ref(40, 1));
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p28, 512);
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p4, $mul.ref(0, 120)), $mul.ref(92, 1));
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, 0);
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 120)), $mul.ref(8, 1)), $mul.ref(24, 1));
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3640)), $mul.ref(40, 1)), $mul.ref(104, 1));
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 227} list_add_tail($p31, $p33);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 3640)), $mul.ref(1824, 1));
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p35, $mul.ref(1, 120)), $mul.ref(0, 1));
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p37, $p0);
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p35, $mul.ref(1, 120)), $mul.ref(72, 1));
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 228} INIT_LIST_HEAD($p38);
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p35, $mul.ref(1, 120)), $mul.ref(88, 1));
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p39, 1);
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p35, $mul.ref(1, 120)), $mul.ref(104, 1));
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p40, $0.ref);
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p35, $mul.ref(1, 120)), $mul.ref(96, 1));
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb17, $bb18;

  $bb18:
    assume !(1 == 1);
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    $p43 := .str.103;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 229} vslice_dummy_var_20 := sprintf.ref.ref.i32.ref($p42, .str.100, 1, $p43);
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p35, $mul.ref(1, 120)), $mul.ref(8, 1)), $mul.ref(16, 1));
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p46, isp1760_ep_ops);
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p35, $mul.ref(1, 120)), $mul.ref(96, 1));
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p35, $mul.ref(1, 120)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p50, $p47);
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb20, $bb21;

  $bb21:
    assume !(0 == 1);
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p35, $mul.ref(1, 120)), $mul.ref(8, 1)), $mul.ref(40, 1));
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p52, 512);
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p35, $mul.ref(1, 120)), $mul.ref(92, 1));
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p53, 0);
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p35, $mul.ref(1, 120)), $mul.ref(8, 1)), $mul.ref(24, 1));
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3640)), $mul.ref(40, 1)), $mul.ref(104, 1));
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 230} list_add_tail($p55, $p57);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 3640)), $mul.ref(1824, 1));
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p64);
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p65, $mul.ref(2, 120)), $mul.ref(0, 1));
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p67, $p0);
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p65, $mul.ref(2, 120)), $mul.ref(72, 1));
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 231} INIT_LIST_HEAD($p68);
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    $i69 := 0;
    assume {:branchcond 1} true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    $i70 := (if $i69 == 1 then 128 else 0);
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    $i71 := $or.i32($i70, 1);
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p65, $mul.ref(2, 120)), $mul.ref(88, 1));
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p72, $i71);
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p65, $mul.ref(2, 120)), $mul.ref(104, 1));
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p73, $0.ref);
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p65, $mul.ref(2, 120)), $mul.ref(96, 1));
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    $p75 := $bitcast.ref.ref($p74);
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb27, $bb28;

  $bb28:
    assume !(1 == 1);
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    $p76 := .str.103;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 232} vslice_dummy_var_21 := sprintf.ref.ref.i32.ref($p75, .str.100, 1, $p76);
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($add.ref($p65, $mul.ref(2, 120)), $mul.ref(8, 1)), $mul.ref(16, 1));
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p79, isp1760_ep_ops);
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p65, $mul.ref(2, 120)), $mul.ref(96, 1));
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($add.ref($p65, $mul.ref(2, 120)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p83, $p80);
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb30, $bb31;

  $bb31:
    assume !(0 == 1);
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($add.ref($p65, $mul.ref(2, 120)), $mul.ref(8, 1)), $mul.ref(40, 1));
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p85, 512);
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p65, $mul.ref(2, 120)), $mul.ref(92, 1));
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p86, 0);
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($add.ref($p65, $mul.ref(2, 120)), $mul.ref(8, 1)), $mul.ref(24, 1));
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3640)), $mul.ref(40, 1)), $mul.ref(104, 1));
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 233} list_add_tail($p88, $p90);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p0, $mul.ref(0, 3640)), $mul.ref(1824, 1));
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    $p98 := $bitcast.ref.ref($p97);
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p98, $mul.ref(3, 120)), $mul.ref(0, 1));
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p100, $p0);
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p98, $mul.ref(3, 120)), $mul.ref(72, 1));
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 234} INIT_LIST_HEAD($p101);
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p98, $mul.ref(3, 120)), $mul.ref(88, 1));
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p102, 2);
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p98, $mul.ref(3, 120)), $mul.ref(104, 1));
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p103, $0.ref);
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p98, $mul.ref(3, 120)), $mul.ref(96, 1));
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    $p105 := $bitcast.ref.ref($p104);
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb37, $bb38;

  $bb38:
    assume !(1 == 1);
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    $p106 := .str.103;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 235} vslice_dummy_var_22 := sprintf.ref.ref.i32.ref($p105, .str.100, 2, $p106);
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($add.ref($p98, $mul.ref(3, 120)), $mul.ref(8, 1)), $mul.ref(16, 1));
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p109, isp1760_ep_ops);
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p98, $mul.ref(3, 120)), $mul.ref(96, 1));
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($add.ref($p98, $mul.ref(3, 120)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p113, $p110);
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb40, $bb41;

  $bb41:
    assume !(0 == 1);
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($add.ref($p98, $mul.ref(3, 120)), $mul.ref(8, 1)), $mul.ref(40, 1));
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p115, 512);
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p98, $mul.ref(3, 120)), $mul.ref(92, 1));
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p116, 0);
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($add.ref($p98, $mul.ref(3, 120)), $mul.ref(8, 1)), $mul.ref(24, 1));
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3640)), $mul.ref(40, 1)), $mul.ref(104, 1));
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 236} list_add_tail($p118, $p120);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p0, $mul.ref(0, 3640)), $mul.ref(1824, 1));
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    $p128 := $bitcast.ref.ref($p127);
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p128, $mul.ref(4, 120)), $mul.ref(0, 1));
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p130, $p0);
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p128, $mul.ref(4, 120)), $mul.ref(72, 1));
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 237} INIT_LIST_HEAD($p131);
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    $i132 := 0;
    assume {:branchcond 1} true;
    goto $bb44, $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    $i133 := (if $i132 == 1 then 128 else 0);
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    $i134 := $or.i32($i133, 2);
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p128, $mul.ref(4, 120)), $mul.ref(88, 1));
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p135, $i134);
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p128, $mul.ref(4, 120)), $mul.ref(104, 1));
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p136, $0.ref);
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p128, $mul.ref(4, 120)), $mul.ref(96, 1));
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    $p138 := $bitcast.ref.ref($p137);
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb47, $bb48;

  $bb48:
    assume !(1 == 1);
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    $p139 := .str.103;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 238} vslice_dummy_var_23 := sprintf.ref.ref.i32.ref($p138, .str.100, 2, $p139);
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($add.ref($p128, $mul.ref(4, 120)), $mul.ref(8, 1)), $mul.ref(16, 1));
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p142, isp1760_ep_ops);
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p128, $mul.ref(4, 120)), $mul.ref(96, 1));
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($add.ref($p128, $mul.ref(4, 120)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p146, $p143);
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb50, $bb51;

  $bb51:
    assume !(0 == 1);
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($add.ref($p128, $mul.ref(4, 120)), $mul.ref(8, 1)), $mul.ref(40, 1));
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p148, 512);
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p128, $mul.ref(4, 120)), $mul.ref(92, 1));
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p149, 0);
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($add.ref($p128, $mul.ref(4, 120)), $mul.ref(8, 1)), $mul.ref(24, 1));
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3640)), $mul.ref(40, 1)), $mul.ref(104, 1));
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 239} list_add_tail($p151, $p153);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p0, $mul.ref(0, 3640)), $mul.ref(1824, 1));
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    $p161 := $bitcast.ref.ref($p160);
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p161, $mul.ref(5, 120)), $mul.ref(0, 1));
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p163, $p0);
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p161, $mul.ref(5, 120)), $mul.ref(72, 1));
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 240} INIT_LIST_HEAD($p164);
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb54, $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p161, $mul.ref(5, 120)), $mul.ref(88, 1));
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p165, 3);
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p161, $mul.ref(5, 120)), $mul.ref(104, 1));
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p166, $0.ref);
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p161, $mul.ref(5, 120)), $mul.ref(96, 1));
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    $p168 := $bitcast.ref.ref($p167);
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb57, $bb58;

  $bb58:
    assume !(1 == 1);
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    $p169 := .str.103;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 241} vslice_dummy_var_24 := sprintf.ref.ref.i32.ref($p168, .str.100, 3, $p169);
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($add.ref($p161, $mul.ref(5, 120)), $mul.ref(8, 1)), $mul.ref(16, 1));
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p172, isp1760_ep_ops);
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p161, $mul.ref(5, 120)), $mul.ref(96, 1));
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($add.ref($p161, $mul.ref(5, 120)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p176, $p173);
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb60, $bb61;

  $bb61:
    assume !(0 == 1);
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($add.ref($p161, $mul.ref(5, 120)), $mul.ref(8, 1)), $mul.ref(40, 1));
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p178, 512);
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($p161, $mul.ref(5, 120)), $mul.ref(92, 1));
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p179, 0);
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($add.ref($p161, $mul.ref(5, 120)), $mul.ref(8, 1)), $mul.ref(24, 1));
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3640)), $mul.ref(40, 1)), $mul.ref(104, 1));
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 242} list_add_tail($p181, $p183);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($p0, $mul.ref(0, 3640)), $mul.ref(1824, 1));
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    $p191 := $bitcast.ref.ref($p190);
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($p191, $mul.ref(6, 120)), $mul.ref(0, 1));
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p193, $p0);
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($p191, $mul.ref(6, 120)), $mul.ref(72, 1));
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 243} INIT_LIST_HEAD($p194);
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    $i195 := 0;
    assume {:branchcond 1} true;
    goto $bb64, $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    $i196 := (if $i195 == 1 then 128 else 0);
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    $i197 := $or.i32($i196, 3);
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($p191, $mul.ref(6, 120)), $mul.ref(88, 1));
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p198, $i197);
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($p191, $mul.ref(6, 120)), $mul.ref(104, 1));
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p199, $0.ref);
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($p191, $mul.ref(6, 120)), $mul.ref(96, 1));
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    $p201 := $bitcast.ref.ref($p200);
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb67, $bb68;

  $bb68:
    assume !(1 == 1);
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    $p202 := .str.103;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} vslice_dummy_var_25 := sprintf.ref.ref.i32.ref($p201, .str.100, 3, $p202);
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($add.ref($p191, $mul.ref(6, 120)), $mul.ref(8, 1)), $mul.ref(16, 1));
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p205, isp1760_ep_ops);
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($p191, $mul.ref(6, 120)), $mul.ref(96, 1));
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($add.ref($p191, $mul.ref(6, 120)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p209, $p206);
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb70, $bb71;

  $bb71:
    assume !(0 == 1);
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($add.ref($p191, $mul.ref(6, 120)), $mul.ref(8, 1)), $mul.ref(40, 1));
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p211, 512);
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($p191, $mul.ref(6, 120)), $mul.ref(92, 1));
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p212, 0);
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($add.ref($p191, $mul.ref(6, 120)), $mul.ref(8, 1)), $mul.ref(24, 1));
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3640)), $mul.ref(40, 1)), $mul.ref(104, 1));
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 245} list_add_tail($p214, $p216);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($p0, $mul.ref(0, 3640)), $mul.ref(1824, 1));
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    $p224 := $bitcast.ref.ref($p223);
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($p224, $mul.ref(7, 120)), $mul.ref(0, 1));
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p226, $p0);
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    $p227 := $add.ref($add.ref($p224, $mul.ref(7, 120)), $mul.ref(72, 1));
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 246} INIT_LIST_HEAD($p227);
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb74, $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($add.ref($p224, $mul.ref(7, 120)), $mul.ref(88, 1));
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p228, 4);
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($add.ref($p224, $mul.ref(7, 120)), $mul.ref(104, 1));
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p229, $0.ref);
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    $p230 := $add.ref($add.ref($p224, $mul.ref(7, 120)), $mul.ref(96, 1));
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    $p231 := $bitcast.ref.ref($p230);
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb77, $bb78;

  $bb78:
    assume !(1 == 1);
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    $p232 := .str.103;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 247} vslice_dummy_var_26 := sprintf.ref.ref.i32.ref($p231, .str.100, 4, $p232);
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($add.ref($add.ref($p224, $mul.ref(7, 120)), $mul.ref(8, 1)), $mul.ref(16, 1));
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p235, isp1760_ep_ops);
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    $p236 := $add.ref($add.ref($p224, $mul.ref(7, 120)), $mul.ref(96, 1));
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    $p239 := $add.ref($add.ref($add.ref($p224, $mul.ref(7, 120)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p239, $p236);
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb80, $bb81;

  $bb81:
    assume !(0 == 1);
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    $p241 := $add.ref($add.ref($add.ref($p224, $mul.ref(7, 120)), $mul.ref(8, 1)), $mul.ref(40, 1));
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p241, 512);
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($add.ref($p224, $mul.ref(7, 120)), $mul.ref(92, 1));
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p242, 0);
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($add.ref($p224, $mul.ref(7, 120)), $mul.ref(8, 1)), $mul.ref(24, 1));
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    $p246 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3640)), $mul.ref(40, 1)), $mul.ref(104, 1));
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 248} list_add_tail($p244, $p246);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $p253 := $add.ref($add.ref($p0, $mul.ref(0, 3640)), $mul.ref(1824, 1));
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    $p254 := $bitcast.ref.ref($p253);
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    $p256 := $add.ref($add.ref($p254, $mul.ref(8, 120)), $mul.ref(0, 1));
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p256, $p0);
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    $p257 := $add.ref($add.ref($p254, $mul.ref(8, 120)), $mul.ref(72, 1));
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 249} INIT_LIST_HEAD($p257);
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    $i258 := 0;
    assume {:branchcond 1} true;
    goto $bb84, $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    $i259 := (if $i258 == 1 then 128 else 0);
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    $i260 := $or.i32($i259, 4);
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    $p261 := $add.ref($add.ref($p254, $mul.ref(8, 120)), $mul.ref(88, 1));
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p261, $i260);
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    $p262 := $add.ref($add.ref($p254, $mul.ref(8, 120)), $mul.ref(104, 1));
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p262, $0.ref);
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    $p263 := $add.ref($add.ref($p254, $mul.ref(8, 120)), $mul.ref(96, 1));
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    $p264 := $bitcast.ref.ref($p263);
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb87, $bb88;

  $bb88:
    assume !(1 == 1);
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    $p265 := .str.103;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 250} vslice_dummy_var_27 := sprintf.ref.ref.i32.ref($p264, .str.100, 4, $p265);
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    $p268 := $add.ref($add.ref($add.ref($p254, $mul.ref(8, 120)), $mul.ref(8, 1)), $mul.ref(16, 1));
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p268, isp1760_ep_ops);
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    $p269 := $add.ref($add.ref($p254, $mul.ref(8, 120)), $mul.ref(96, 1));
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    $p272 := $add.ref($add.ref($add.ref($p254, $mul.ref(8, 120)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p272, $p269);
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb90, $bb91;

  $bb91:
    assume !(0 == 1);
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    $p274 := $add.ref($add.ref($add.ref($p254, $mul.ref(8, 120)), $mul.ref(8, 1)), $mul.ref(40, 1));
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p274, 512);
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    $p275 := $add.ref($add.ref($p254, $mul.ref(8, 120)), $mul.ref(92, 1));
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p275, 0);
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    $p277 := $add.ref($add.ref($add.ref($p254, $mul.ref(8, 120)), $mul.ref(8, 1)), $mul.ref(24, 1));
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    $p279 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3640)), $mul.ref(40, 1)), $mul.ref(104, 1));
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 251} list_add_tail($p277, $p279);
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    $p286 := $add.ref($add.ref($p0, $mul.ref(0, 3640)), $mul.ref(1824, 1));
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    $p287 := $bitcast.ref.ref($p286);
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    $p289 := $add.ref($add.ref($p287, $mul.ref(9, 120)), $mul.ref(0, 1));
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p289, $p0);
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    $p290 := $add.ref($add.ref($p287, $mul.ref(9, 120)), $mul.ref(72, 1));
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 252} INIT_LIST_HEAD($p290);
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb94, $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    $p291 := $add.ref($add.ref($p287, $mul.ref(9, 120)), $mul.ref(88, 1));
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p291, 5);
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    $p292 := $add.ref($add.ref($p287, $mul.ref(9, 120)), $mul.ref(104, 1));
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p292, $0.ref);
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    $p293 := $add.ref($add.ref($p287, $mul.ref(9, 120)), $mul.ref(96, 1));
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    $p294 := $bitcast.ref.ref($p293);
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb97, $bb98;

  $bb98:
    assume !(1 == 1);
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    $p295 := .str.103;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 253} vslice_dummy_var_28 := sprintf.ref.ref.i32.ref($p294, .str.100, 5, $p295);
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    $p298 := $add.ref($add.ref($add.ref($p287, $mul.ref(9, 120)), $mul.ref(8, 1)), $mul.ref(16, 1));
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p298, isp1760_ep_ops);
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    $p299 := $add.ref($add.ref($p287, $mul.ref(9, 120)), $mul.ref(96, 1));
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    $p302 := $add.ref($add.ref($add.ref($p287, $mul.ref(9, 120)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p302, $p299);
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb100, $bb101;

  $bb101:
    assume !(0 == 1);
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    $p304 := $add.ref($add.ref($add.ref($p287, $mul.ref(9, 120)), $mul.ref(8, 1)), $mul.ref(40, 1));
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p304, 512);
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    $p305 := $add.ref($add.ref($p287, $mul.ref(9, 120)), $mul.ref(92, 1));
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p305, 0);
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    $p307 := $add.ref($add.ref($add.ref($p287, $mul.ref(9, 120)), $mul.ref(8, 1)), $mul.ref(24, 1));
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    $p309 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3640)), $mul.ref(40, 1)), $mul.ref(104, 1));
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 254} list_add_tail($p307, $p309);
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    $p316 := $add.ref($add.ref($p0, $mul.ref(0, 3640)), $mul.ref(1824, 1));
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    $p317 := $bitcast.ref.ref($p316);
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    $p319 := $add.ref($add.ref($p317, $mul.ref(10, 120)), $mul.ref(0, 1));
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p319, $p0);
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    $p320 := $add.ref($add.ref($p317, $mul.ref(10, 120)), $mul.ref(72, 1));
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 255} INIT_LIST_HEAD($p320);
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    $i321 := 0;
    assume {:branchcond 1} true;
    goto $bb104, $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    $i322 := (if $i321 == 1 then 128 else 0);
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    $i323 := $or.i32($i322, 5);
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    $p324 := $add.ref($add.ref($p317, $mul.ref(10, 120)), $mul.ref(88, 1));
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p324, $i323);
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    $p325 := $add.ref($add.ref($p317, $mul.ref(10, 120)), $mul.ref(104, 1));
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p325, $0.ref);
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    $p326 := $add.ref($add.ref($p317, $mul.ref(10, 120)), $mul.ref(96, 1));
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    $p327 := $bitcast.ref.ref($p326);
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb107, $bb108;

  $bb108:
    assume !(1 == 1);
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    $p328 := .str.103;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 256} vslice_dummy_var_29 := sprintf.ref.ref.i32.ref($p327, .str.100, 5, $p328);
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    $p331 := $add.ref($add.ref($add.ref($p317, $mul.ref(10, 120)), $mul.ref(8, 1)), $mul.ref(16, 1));
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p331, isp1760_ep_ops);
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    $p332 := $add.ref($add.ref($p317, $mul.ref(10, 120)), $mul.ref(96, 1));
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    $p335 := $add.ref($add.ref($add.ref($p317, $mul.ref(10, 120)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p335, $p332);
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb110, $bb111;

  $bb111:
    assume !(0 == 1);
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    $p337 := $add.ref($add.ref($add.ref($p317, $mul.ref(10, 120)), $mul.ref(8, 1)), $mul.ref(40, 1));
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p337, 512);
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    $p338 := $add.ref($add.ref($p317, $mul.ref(10, 120)), $mul.ref(92, 1));
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p338, 0);
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    $p340 := $add.ref($add.ref($add.ref($p317, $mul.ref(10, 120)), $mul.ref(8, 1)), $mul.ref(24, 1));
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    $p342 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3640)), $mul.ref(40, 1)), $mul.ref(104, 1));
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 257} list_add_tail($p340, $p342);
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    $p349 := $add.ref($add.ref($p0, $mul.ref(0, 3640)), $mul.ref(1824, 1));
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    $p350 := $bitcast.ref.ref($p349);
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    $p352 := $add.ref($add.ref($p350, $mul.ref(11, 120)), $mul.ref(0, 1));
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p352, $p0);
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    $p353 := $add.ref($add.ref($p350, $mul.ref(11, 120)), $mul.ref(72, 1));
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 258} INIT_LIST_HEAD($p353);
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb114, $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    $p354 := $add.ref($add.ref($p350, $mul.ref(11, 120)), $mul.ref(88, 1));
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p354, 6);
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    $p355 := $add.ref($add.ref($p350, $mul.ref(11, 120)), $mul.ref(104, 1));
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p355, $0.ref);
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    $p356 := $add.ref($add.ref($p350, $mul.ref(11, 120)), $mul.ref(96, 1));
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    $p357 := $bitcast.ref.ref($p356);
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb117, $bb118;

  $bb118:
    assume !(1 == 1);
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    $p358 := .str.103;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 259} vslice_dummy_var_30 := sprintf.ref.ref.i32.ref($p357, .str.100, 6, $p358);
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    $p361 := $add.ref($add.ref($add.ref($p350, $mul.ref(11, 120)), $mul.ref(8, 1)), $mul.ref(16, 1));
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p361, isp1760_ep_ops);
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    $p362 := $add.ref($add.ref($p350, $mul.ref(11, 120)), $mul.ref(96, 1));
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    $p365 := $add.ref($add.ref($add.ref($p350, $mul.ref(11, 120)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p365, $p362);
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb120, $bb121;

  $bb121:
    assume !(0 == 1);
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    $p367 := $add.ref($add.ref($add.ref($p350, $mul.ref(11, 120)), $mul.ref(8, 1)), $mul.ref(40, 1));
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p367, 512);
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    $p368 := $add.ref($add.ref($p350, $mul.ref(11, 120)), $mul.ref(92, 1));
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p368, 0);
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    $p370 := $add.ref($add.ref($add.ref($p350, $mul.ref(11, 120)), $mul.ref(8, 1)), $mul.ref(24, 1));
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    $p372 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3640)), $mul.ref(40, 1)), $mul.ref(104, 1));
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 260} list_add_tail($p370, $p372);
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    $p379 := $add.ref($add.ref($p0, $mul.ref(0, 3640)), $mul.ref(1824, 1));
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    $p380 := $bitcast.ref.ref($p379);
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    $p382 := $add.ref($add.ref($p380, $mul.ref(12, 120)), $mul.ref(0, 1));
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p382, $p0);
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    $p383 := $add.ref($add.ref($p380, $mul.ref(12, 120)), $mul.ref(72, 1));
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 261} INIT_LIST_HEAD($p383);
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    $i384 := 0;
    assume {:branchcond 1} true;
    goto $bb124, $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    $i385 := (if $i384 == 1 then 128 else 0);
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    $i386 := $or.i32($i385, 6);
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    $p387 := $add.ref($add.ref($p380, $mul.ref(12, 120)), $mul.ref(88, 1));
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p387, $i386);
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    $p388 := $add.ref($add.ref($p380, $mul.ref(12, 120)), $mul.ref(104, 1));
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p388, $0.ref);
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    $p389 := $add.ref($add.ref($p380, $mul.ref(12, 120)), $mul.ref(96, 1));
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    $p390 := $bitcast.ref.ref($p389);
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb127, $bb128;

  $bb128:
    assume !(1 == 1);
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    $p391 := .str.103;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 262} vslice_dummy_var_31 := sprintf.ref.ref.i32.ref($p390, .str.100, 6, $p391);
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    $p394 := $add.ref($add.ref($add.ref($p380, $mul.ref(12, 120)), $mul.ref(8, 1)), $mul.ref(16, 1));
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p394, isp1760_ep_ops);
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    $p395 := $add.ref($add.ref($p380, $mul.ref(12, 120)), $mul.ref(96, 1));
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    $p398 := $add.ref($add.ref($add.ref($p380, $mul.ref(12, 120)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p398, $p395);
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb130, $bb131;

  $bb131:
    assume !(0 == 1);
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    $p400 := $add.ref($add.ref($add.ref($p380, $mul.ref(12, 120)), $mul.ref(8, 1)), $mul.ref(40, 1));
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p400, 512);
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    $p401 := $add.ref($add.ref($p380, $mul.ref(12, 120)), $mul.ref(92, 1));
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p401, 0);
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    $p403 := $add.ref($add.ref($add.ref($p380, $mul.ref(12, 120)), $mul.ref(8, 1)), $mul.ref(24, 1));
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    $p405 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3640)), $mul.ref(40, 1)), $mul.ref(104, 1));
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 263} list_add_tail($p403, $p405);
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    $p412 := $add.ref($add.ref($p0, $mul.ref(0, 3640)), $mul.ref(1824, 1));
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    $p413 := $bitcast.ref.ref($p412);
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    $p415 := $add.ref($add.ref($p413, $mul.ref(13, 120)), $mul.ref(0, 1));
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p415, $p0);
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    $p416 := $add.ref($add.ref($p413, $mul.ref(13, 120)), $mul.ref(72, 1));
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 264} INIT_LIST_HEAD($p416);
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb134, $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    $p417 := $add.ref($add.ref($p413, $mul.ref(13, 120)), $mul.ref(88, 1));
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p417, 7);
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    $p418 := $add.ref($add.ref($p413, $mul.ref(13, 120)), $mul.ref(104, 1));
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p418, $0.ref);
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    $p419 := $add.ref($add.ref($p413, $mul.ref(13, 120)), $mul.ref(96, 1));
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    $p420 := $bitcast.ref.ref($p419);
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb137, $bb138;

  $bb138:
    assume !(1 == 1);
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    $p421 := .str.103;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 265} vslice_dummy_var_32 := sprintf.ref.ref.i32.ref($p420, .str.100, 7, $p421);
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    $p424 := $add.ref($add.ref($add.ref($p413, $mul.ref(13, 120)), $mul.ref(8, 1)), $mul.ref(16, 1));
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p424, isp1760_ep_ops);
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    $p425 := $add.ref($add.ref($p413, $mul.ref(13, 120)), $mul.ref(96, 1));
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    $p428 := $add.ref($add.ref($add.ref($p413, $mul.ref(13, 120)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p428, $p425);
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb140, $bb141;

  $bb141:
    assume !(0 == 1);
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    $p430 := $add.ref($add.ref($add.ref($p413, $mul.ref(13, 120)), $mul.ref(8, 1)), $mul.ref(40, 1));
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p430, 512);
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    $p431 := $add.ref($add.ref($p413, $mul.ref(13, 120)), $mul.ref(92, 1));
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p431, 0);
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    $p433 := $add.ref($add.ref($add.ref($p413, $mul.ref(13, 120)), $mul.ref(8, 1)), $mul.ref(24, 1));
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    $p435 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3640)), $mul.ref(40, 1)), $mul.ref(104, 1));
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 266} list_add_tail($p433, $p435);
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    $p442 := $add.ref($add.ref($p0, $mul.ref(0, 3640)), $mul.ref(1824, 1));
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    $p443 := $bitcast.ref.ref($p442);
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    $p445 := $add.ref($add.ref($p443, $mul.ref(14, 120)), $mul.ref(0, 1));
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p445, $p0);
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    $p446 := $add.ref($add.ref($p443, $mul.ref(14, 120)), $mul.ref(72, 1));
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 267} INIT_LIST_HEAD($p446);
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    $i447 := 0;
    assume {:branchcond 1} true;
    goto $bb144, $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    $i448 := (if $i447 == 1 then 128 else 0);
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    $i449 := $or.i32($i448, 7);
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    $p450 := $add.ref($add.ref($p443, $mul.ref(14, 120)), $mul.ref(88, 1));
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p450, $i449);
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    $p451 := $add.ref($add.ref($p443, $mul.ref(14, 120)), $mul.ref(104, 1));
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p451, $0.ref);
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    $p452 := $add.ref($add.ref($p443, $mul.ref(14, 120)), $mul.ref(96, 1));
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    $p453 := $bitcast.ref.ref($p452);
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb147, $bb148;

  $bb148:
    assume !(1 == 1);
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    $p454 := .str.103;
    goto $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 268} vslice_dummy_var_33 := sprintf.ref.ref.i32.ref($p453, .str.100, 7, $p454);
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    $p457 := $add.ref($add.ref($add.ref($p443, $mul.ref(14, 120)), $mul.ref(8, 1)), $mul.ref(16, 1));
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p457, isp1760_ep_ops);
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    $p458 := $add.ref($add.ref($p443, $mul.ref(14, 120)), $mul.ref(96, 1));
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    $p461 := $add.ref($add.ref($add.ref($p443, $mul.ref(14, 120)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p461, $p458);
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb150, $bb151;

  $bb151:
    assume !(0 == 1);
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    $p463 := $add.ref($add.ref($add.ref($p443, $mul.ref(14, 120)), $mul.ref(8, 1)), $mul.ref(40, 1));
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p463, 512);
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    $p464 := $add.ref($add.ref($p443, $mul.ref(14, 120)), $mul.ref(92, 1));
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p464, 0);
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    $p466 := $add.ref($add.ref($add.ref($p443, $mul.ref(14, 120)), $mul.ref(8, 1)), $mul.ref(24, 1));
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    $p468 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3640)), $mul.ref(40, 1)), $mul.ref(104, 1));
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 269} list_add_tail($p466, $p468);
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    return;

  $bb150:
    assume 0 == 1;
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    $p470 := $add.ref($add.ref($add.ref($p443, $mul.ref(14, 120)), $mul.ref(8, 1)), $mul.ref(40, 1));
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p470, 64);
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    $p471 := $add.ref($add.ref($p443, $mul.ref(14, 120)), $mul.ref(92, 1));
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p471, 64);
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    $p472 := $add.ref($add.ref($p443, $mul.ref(14, 120)), $mul.ref(8, 1));
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    $p474 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3640)), $mul.ref(40, 1)), $mul.ref(96, 1));
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p474, $p472);
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb147:
    assume 1 == 1;
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    $p454 := .str.101;
    goto $bb149;

  $bb144:
    assume 1 == 1;
    assume {:verifier.code 0} true;
    $i447 := 1;
    goto $bb146;

  $bb140:
    assume 0 == 1;
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    $p437 := $add.ref($add.ref($add.ref($p413, $mul.ref(13, 120)), $mul.ref(8, 1)), $mul.ref(40, 1));
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p437, 64);
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    $p438 := $add.ref($add.ref($p413, $mul.ref(13, 120)), $mul.ref(92, 1));
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p438, 64);
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    $p439 := $add.ref($add.ref($p413, $mul.ref(13, 120)), $mul.ref(8, 1));
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    $p441 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3640)), $mul.ref(40, 1)), $mul.ref(96, 1));
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p441, $p439);
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb137:
    assume 1 == 1;
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    $p421 := .str.102;
    goto $bb139;

  $bb134:
    assume 1 == 1;
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb130:
    assume 0 == 1;
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    $p407 := $add.ref($add.ref($add.ref($p380, $mul.ref(12, 120)), $mul.ref(8, 1)), $mul.ref(40, 1));
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p407, 64);
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    $p408 := $add.ref($add.ref($p380, $mul.ref(12, 120)), $mul.ref(92, 1));
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p408, 64);
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    $p409 := $add.ref($add.ref($p380, $mul.ref(12, 120)), $mul.ref(8, 1));
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    $p411 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3640)), $mul.ref(40, 1)), $mul.ref(96, 1));
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p411, $p409);
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb127:
    assume 1 == 1;
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    $p391 := .str.101;
    goto $bb129;

  $bb124:
    assume 1 == 1;
    assume {:verifier.code 0} true;
    $i384 := 1;
    goto $bb126;

  $bb120:
    assume 0 == 1;
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    $p374 := $add.ref($add.ref($add.ref($p350, $mul.ref(11, 120)), $mul.ref(8, 1)), $mul.ref(40, 1));
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p374, 64);
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    $p375 := $add.ref($add.ref($p350, $mul.ref(11, 120)), $mul.ref(92, 1));
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p375, 64);
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    $p376 := $add.ref($add.ref($p350, $mul.ref(11, 120)), $mul.ref(8, 1));
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    $p378 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3640)), $mul.ref(40, 1)), $mul.ref(96, 1));
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p378, $p376);
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb117:
    assume 1 == 1;
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    $p358 := .str.102;
    goto $bb119;

  $bb114:
    assume 1 == 1;
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb110:
    assume 0 == 1;
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    $p344 := $add.ref($add.ref($add.ref($p317, $mul.ref(10, 120)), $mul.ref(8, 1)), $mul.ref(40, 1));
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p344, 64);
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    $p345 := $add.ref($add.ref($p317, $mul.ref(10, 120)), $mul.ref(92, 1));
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p345, 64);
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    $p346 := $add.ref($add.ref($p317, $mul.ref(10, 120)), $mul.ref(8, 1));
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    $p348 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3640)), $mul.ref(40, 1)), $mul.ref(96, 1));
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p348, $p346);
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb107:
    assume 1 == 1;
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    $p328 := .str.101;
    goto $bb109;

  $bb104:
    assume 1 == 1;
    assume {:verifier.code 0} true;
    $i321 := 1;
    goto $bb106;

  $bb100:
    assume 0 == 1;
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    $p311 := $add.ref($add.ref($add.ref($p287, $mul.ref(9, 120)), $mul.ref(8, 1)), $mul.ref(40, 1));
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p311, 64);
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    $p312 := $add.ref($add.ref($p287, $mul.ref(9, 120)), $mul.ref(92, 1));
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p312, 64);
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    $p313 := $add.ref($add.ref($p287, $mul.ref(9, 120)), $mul.ref(8, 1));
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    $p315 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3640)), $mul.ref(40, 1)), $mul.ref(96, 1));
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p315, $p313);
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb97:
    assume 1 == 1;
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    $p295 := .str.102;
    goto $bb99;

  $bb94:
    assume 1 == 1;
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb90:
    assume 0 == 1;
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    $p281 := $add.ref($add.ref($add.ref($p254, $mul.ref(8, 120)), $mul.ref(8, 1)), $mul.ref(40, 1));
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p281, 64);
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    $p282 := $add.ref($add.ref($p254, $mul.ref(8, 120)), $mul.ref(92, 1));
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p282, 64);
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    $p283 := $add.ref($add.ref($p254, $mul.ref(8, 120)), $mul.ref(8, 1));
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    $p285 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3640)), $mul.ref(40, 1)), $mul.ref(96, 1));
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p285, $p283);
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb87:
    assume 1 == 1;
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    $p265 := .str.101;
    goto $bb89;

  $bb84:
    assume 1 == 1;
    assume {:verifier.code 0} true;
    $i258 := 1;
    goto $bb86;

  $bb80:
    assume 0 == 1;
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    $p248 := $add.ref($add.ref($add.ref($p224, $mul.ref(7, 120)), $mul.ref(8, 1)), $mul.ref(40, 1));
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p248, 64);
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($add.ref($p224, $mul.ref(7, 120)), $mul.ref(92, 1));
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p249, 64);
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    $p250 := $add.ref($add.ref($p224, $mul.ref(7, 120)), $mul.ref(8, 1));
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    $p252 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3640)), $mul.ref(40, 1)), $mul.ref(96, 1));
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p252, $p250);
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb77:
    assume 1 == 1;
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    $p232 := .str.102;
    goto $bb79;

  $bb74:
    assume 1 == 1;
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb70:
    assume 0 == 1;
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($add.ref($p191, $mul.ref(6, 120)), $mul.ref(8, 1)), $mul.ref(40, 1));
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p218, 64);
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($add.ref($p191, $mul.ref(6, 120)), $mul.ref(92, 1));
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p219, 64);
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($p191, $mul.ref(6, 120)), $mul.ref(8, 1));
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    $p222 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3640)), $mul.ref(40, 1)), $mul.ref(96, 1));
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p222, $p220);
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb67:
    assume 1 == 1;
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    $p202 := .str.101;
    goto $bb69;

  $bb64:
    assume 1 == 1;
    assume {:verifier.code 0} true;
    $i195 := 1;
    goto $bb66;

  $bb60:
    assume 0 == 1;
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($add.ref($p161, $mul.ref(5, 120)), $mul.ref(8, 1)), $mul.ref(40, 1));
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p185, 64);
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($p161, $mul.ref(5, 120)), $mul.ref(92, 1));
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p186, 64);
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($p161, $mul.ref(5, 120)), $mul.ref(8, 1));
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3640)), $mul.ref(40, 1)), $mul.ref(96, 1));
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p189, $p187);
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb57:
    assume 1 == 1;
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    $p169 := .str.102;
    goto $bb59;

  $bb54:
    assume 1 == 1;
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb50:
    assume 0 == 1;
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($add.ref($p128, $mul.ref(4, 120)), $mul.ref(8, 1)), $mul.ref(40, 1));
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p155, 64);
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p128, $mul.ref(4, 120)), $mul.ref(92, 1));
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p156, 64);
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p128, $mul.ref(4, 120)), $mul.ref(8, 1));
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3640)), $mul.ref(40, 1)), $mul.ref(96, 1));
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p159, $p157);
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb47:
    assume 1 == 1;
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    $p139 := .str.101;
    goto $bb49;

  $bb44:
    assume 1 == 1;
    assume {:verifier.code 0} true;
    $i132 := 1;
    goto $bb46;

  $bb40:
    assume 0 == 1;
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($add.ref($p98, $mul.ref(3, 120)), $mul.ref(8, 1)), $mul.ref(40, 1));
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p122, 64);
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p98, $mul.ref(3, 120)), $mul.ref(92, 1));
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p123, 64);
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p98, $mul.ref(3, 120)), $mul.ref(8, 1));
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3640)), $mul.ref(40, 1)), $mul.ref(96, 1));
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p126, $p124);
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb37:
    assume 1 == 1;
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    $p106 := .str.102;
    goto $bb39;

  $bb34:
    assume 1 == 1;
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb30:
    assume 0 == 1;
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($add.ref($p65, $mul.ref(2, 120)), $mul.ref(8, 1)), $mul.ref(40, 1));
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p92, 64);
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p65, $mul.ref(2, 120)), $mul.ref(92, 1));
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p93, 64);
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p65, $mul.ref(2, 120)), $mul.ref(8, 1));
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3640)), $mul.ref(40, 1)), $mul.ref(96, 1));
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p96, $p94);
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb27:
    assume 1 == 1;
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    $p76 := .str.101;
    goto $bb29;

  $bb24:
    assume 1 == 1;
    assume {:verifier.code 0} true;
    $i69 := 1;
    goto $bb26;

  $bb20:
    assume 0 == 1;
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($p35, $mul.ref(1, 120)), $mul.ref(8, 1)), $mul.ref(40, 1));
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p59, 64);
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p35, $mul.ref(1, 120)), $mul.ref(92, 1));
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p60, 64);
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p35, $mul.ref(1, 120)), $mul.ref(8, 1));
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3640)), $mul.ref(40, 1)), $mul.ref(96, 1));
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p63, $p61);
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb17:
    assume 1 == 1;
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    $p43 := .str.102;
    goto $bb19;

  $bb14:
    assume 1 == 1;
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb9:
    assume 1 == 1;
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 120)), $mul.ref(8, 1)), $mul.ref(40, 1));
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p22, 64);
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p4, $mul.ref(0, 120)), $mul.ref(92, 1));
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, 64);
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p4, $mul.ref(0, 120)), $mul.ref(8, 1));
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3640)), $mul.ref(40, 1)), $mul.ref(96, 1));
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p26, $p24);
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb6:
    assume 0 == 1;
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    $p13 := .str.101;
    goto $bb8;

  $bb3:
    assume 0 == 1;
    assume {:verifier.code 0} true;
    $i7 := 1;
    goto $bb5;
}



const usb_add_gadget_udc: ref;

axiom usb_add_gadget_udc == $sub.ref(0, 259567);

procedure usb_add_gadget_udc($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_add_gadget_udc($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 1} true;
    call {:si_unique_call 270} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 271} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_free_irq_107: ref;

axiom ldv_free_irq_107 == $sub.ref(0, 260599);

procedure ldv_free_irq_107($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.2, $M.4, $M.6, $M.8;



implementation ldv_free_irq_107($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 272} {:cexpr "ldv_free_irq_107:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 273} free_irq($i0, $p1);
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 274} disable_suitable_irq_1($i0, $p1);
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    return;
}



const INIT_LIST_HEAD: ref;

axiom INIT_LIST_HEAD == $sub.ref(0, 261631);

procedure INIT_LIST_HEAD($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation INIT_LIST_HEAD($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $p0);
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p0);
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    return;
}



const list_add_tail: ref;

axiom list_add_tail == $sub.ref(0, 262663);

procedure list_add_tail($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add_tail($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} __list_add($p0, $p3, $p1);
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    return;
}



const __list_add: ref;

axiom __list_add == $sub.ref(0, 263695);

procedure __list_add($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __list_add($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    return;
}



const request_irq: ref;

axiom request_irq == $sub.ref(0, 264727);

procedure request_irq($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation request_irq($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 276} {:cexpr "request_irq:arg:irq"} boogie_si_record_i32($i0);
    call {:si_unique_call 277} {:cexpr "request_irq:arg:flags"} boogie_si_record_i64($i2);
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 278} $i5 := request_threaded_irq($i0, $p1, $0.ref, $i2, $p3, $p4);
    call {:si_unique_call 279} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const reg_check_1: ref;

axiom reg_check_1 == $sub.ref(0, 265759);

procedure reg_check_1($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation reg_check_1($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, $p2i.ref.i64(isp1760_udc_irq));
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i3 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    $i3 := 1;
    goto $bb3;
}



const activate_suitable_irq_1: ref;

axiom activate_suitable_irq_1 == $sub.ref(0, 266791);

procedure activate_suitable_irq_1($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.3, $M.2, $M.5, $M.4, $M.7, $M.6, $M.9, $M.8;



implementation activate_suitable_irq_1($i0: i32, $p1: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 280} {:cexpr "activate_suitable_irq_1:arg:line"} boogie_si_record_i32($i0);
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    $i2 := $M.2;
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i4 := $M.4;
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i6 := $M.6;
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i8 := $M.8;
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i9 == 1;
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    $M.9 := $i0;
    call {:si_unique_call 287} {:cexpr "ldv_irq_line_1_3"} boogie_si_record_i32($i0);
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    $M.8 := 1;
    call {:si_unique_call 288} {:cexpr "ldv_irq_1_3"} boogie_si_record_i32(1);
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8:
    assume $i7 == 1;
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    $M.7 := $i0;
    call {:si_unique_call 285} {:cexpr "ldv_irq_line_1_2"} boogie_si_record_i32($i0);
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    $M.6 := 1;
    call {:si_unique_call 286} {:cexpr "ldv_irq_1_2"} boogie_si_record_i32(1);
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    $M.5 := $i0;
    call {:si_unique_call 283} {:cexpr "ldv_irq_line_1_1"} boogie_si_record_i32($i0);
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    $M.4 := 1;
    call {:si_unique_call 284} {:cexpr "ldv_irq_1_1"} boogie_si_record_i32(1);
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    $M.3 := $i0;
    call {:si_unique_call 281} {:cexpr "ldv_irq_line_1_0"} boogie_si_record_i32($i0);
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    $M.2 := 1;
    call {:si_unique_call 282} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32(1);
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const request_threaded_irq: ref;

axiom request_threaded_irq == $sub.ref(0, 267823);

procedure request_threaded_irq($i0: i32, $p1: ref, $p2: ref, $i3: i64, $p4: ref, $p5: ref) returns ($r: i32);
  free requires assertsPassed;



implementation request_threaded_irq($i0: i32, $p1: ref, $p2: ref, $i3: i64, $p4: ref, $p5: ref) returns ($r: i32)
{
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 289} {:cexpr "request_threaded_irq:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 290} {:cexpr "request_threaded_irq:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 1} true;
    call {:si_unique_call 291} $i6 := __VERIFIER_nondet_int();
    call {:si_unique_call 292} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i6);
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const isp1760_udc_read: ref;

axiom isp1760_udc_read == $sub.ref(0, 268855);

procedure isp1760_udc_read($p0: ref, $i1: i16) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.0, $M.32, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.30, $M.38, $M.36, $M.40, $M.23, $M.22, $M.25, $M.24, $M.27, $M.26, $M.29, $M.28, $CurrAddr, $M.2, $M.4, $M.6, $M.8, $M.3, $M.5, $M.7, $M.9, assertsPassed;



implementation isp1760_udc_read($p0: ref, $i1: i16) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 293} {:cexpr "isp1760_udc_read:arg:reg"} boogie_si_record_i16($i1);
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 3640)), $mul.ref(24, 1));
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32($i1);
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 294} $i5 := isp1760_read32($p3, $i4);
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    call {:si_unique_call 295} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  SeqInstr_22:
    assume !assertsPassed;
    return;
}



const isp1760_udc_write: ref;

axiom isp1760_udc_write == $sub.ref(0, 269887);

procedure isp1760_udc_write($p0: ref, $i1: i16, $i2: i32);
  free requires assertsPassed;



implementation isp1760_udc_write($p0: ref, $i1: i16, $i2: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 296} {:cexpr "isp1760_udc_write:arg:reg"} boogie_si_record_i16($i1);
    call {:si_unique_call 297} {:cexpr "isp1760_udc_write:arg:val"} boogie_si_record_i32($i2);
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 3640)), $mul.ref(24, 1));
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i1);
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 298} isp1760_write32($p4, $i5, $i2);
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    return;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 270919);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 299} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 300} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __dynamic_dev_dbg: ref;

axiom __dynamic_dev_dbg == $sub.ref(0, 271951);

procedure __dynamic_dev_dbg.ref.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i32, p.6: i32, p.7: i32, p.8: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i32, p.6: i32, p.7: i32, p.8: i32)
{

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: ref);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: ref)
{

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.ref.i32.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: ref);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.ref.i32.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: ref)
{

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.ref.ref.i32.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: ref, p.5: i32, p.6: ref, p.7: ref, p.8: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.ref.ref.i32.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: ref, p.5: i32, p.6: ref, p.7: ref, p.8: i32)
{

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: ref, p.5: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: ref, p.5: i32)
{

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref($p0: ref, $p1: ref, $p2: ref)
{

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32.i32.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i32, p.6: i32, p.7: i32, p.8: i32, p.9: i32);



procedure __dynamic_dev_dbg.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32);



procedure __dynamic_dev_dbg.ref.ref.ref.ref.ref.i32.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: ref, p.5: i32, p.6: i32, p.7: i32, p.8: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.ref.ref.i32.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: ref, p.5: i32, p.6: i32, p.7: i32, p.8: i32)
{

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i32, p.6: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i32, p.6: i32)
{

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    return;
}



const spin_lock: ref;

axiom spin_lock == $sub.ref(0, 272983);

procedure spin_lock($p0: ref);
  free requires assertsPassed;
  modifies $M.30;



implementation spin_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 301} ldv_spin_lock();
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 302} ldv_spin_lock_58($p0);
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    return;
}



const isp1760_udc_connect: ref;

axiom isp1760_udc_connect == $sub.ref(0, 274015);

procedure isp1760_udc_connect($p0: ref);



const spin_unlock: ref;

axiom spin_unlock == $sub.ref(0, 275047);

procedure spin_unlock($p0: ref);
  free requires assertsPassed;
  modifies $M.30;



implementation spin_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 303} ldv_spin_unlock();
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 304} ldv_spin_unlock_62($p0);
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    return;
}



const isp1760_udc_reset: ref;

axiom isp1760_udc_reset == $sub.ref(0, 276079);

procedure isp1760_udc_reset($p0: ref);



const isp1760_ep_tx_complete: ref;

axiom isp1760_ep_tx_complete == $sub.ref(0, 277111);

procedure isp1760_ep_tx_complete($p0: ref);



const isp1760_ep_rx_ready: ref;

axiom isp1760_ep_rx_ready == $sub.ref(0, 278143);

procedure isp1760_ep_rx_ready($p0: ref);



const isp1760_ep0_setup: ref;

axiom isp1760_ep0_setup == $sub.ref(0, 279175);

procedure isp1760_ep0_setup($p0: ref);



const isp1760_udc_resume: ref;

axiom isp1760_udc_resume == $sub.ref(0, 280207);

procedure isp1760_udc_resume($p0: ref);



const isp1760_udc_disconnect: ref;

axiom isp1760_udc_disconnect == $sub.ref(0, 281239);

procedure isp1760_udc_disconnect($p0: ref);



const isp1760_udc_suspend: ref;

axiom isp1760_udc_suspend == $sub.ref(0, 282271);

procedure isp1760_udc_suspend($p0: ref);



const usb_gadget_set_state: ref;

axiom usb_gadget_set_state == $sub.ref(0, 283303);

procedure usb_gadget_set_state($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation usb_gadget_set_state($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 305} {:cexpr "usb_gadget_set_state:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    return;
}



const ldv_del_timer_103: ref;

axiom ldv_del_timer_103 == $sub.ref(0, 284335);

procedure ldv_del_timer_103($p0: ref) returns ($r: i32);



const del_timer: ref;

axiom del_timer == $sub.ref(0, 285367);

procedure del_timer($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation del_timer($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 1} true;
    call {:si_unique_call 306} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 307} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const disable_suitable_timer_3: ref;

axiom disable_suitable_timer_3 == $sub.ref(0, 286399);

procedure disable_suitable_timer_3($p0: ref);
  free requires assertsPassed;
  modifies $M.22, $M.24, $M.26, $M.28;



implementation disable_suitable_timer_3($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i64;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i64;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $i15: i64;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $i21: i64;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    $i1 := $M.22;
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i7 := $M.24;
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i13 := $M.26;
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i19 := $M.28;
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb20:
    assume $i20 == 1;
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p0);
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    $p22 := $M.29;
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i21, $i23);
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb22;

  $bb23:
    assume $i24 == 1;
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    $M.28 := 0;
    call {:si_unique_call 311} {:cexpr "ldv_timer_3_3"} boogie_si_record_i32(0);
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb14:
    assume $i14 == 1;
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p0);
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    $p16 := $M.27;
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i15, $i17);
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb16;

  $bb17:
    assume $i18 == 1;
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    $M.26 := 0;
    call {:si_unique_call 310} {:cexpr "ldv_timer_3_2"} boogie_si_record_i32(0);
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb8:
    assume $i8 == 1;
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p0);
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    $p10 := $M.25;
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i9, $i11);
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb10;

  $bb11:
    assume $i12 == 1;
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    $M.24 := 0;
    call {:si_unique_call 309} {:cexpr "ldv_timer_3_1"} boogie_si_record_i32(0);
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    $p4 := $M.23;
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i3, $i5);
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    $M.22 := 0;
    call {:si_unique_call 308} {:cexpr "ldv_timer_3_0"} boogie_si_record_i32(0);
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const dev_err: ref;

axiom dev_err == $sub.ref(0, 287431);

procedure dev_err.ref.ref($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation dev_err.ref.ref($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_err.ref.ref.ref($p0: ref, $p1: ref, p.2: ref);
  free requires assertsPassed;



implementation dev_err.ref.ref.ref($p0: ref, $p1: ref, p.2: ref)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_err.ref.ref.i64.i32($p0: ref, $p1: ref, p.2: i64, p.3: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.i64.i32($p0: ref, $p1: ref, p.2: i64, p.3: i32)
{

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_err.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32)
{

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_err.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32)
{

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_err.ref.ref.i32($p0: ref, $p1: ref, p.2: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.i32($p0: ref, $p1: ref, p.2: i32)
{

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_1676;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    return;
}



const isp1760_udc_ctrl_send_stall: ref;

axiom isp1760_udc_ctrl_send_stall == $sub.ref(0, 288463);

procedure isp1760_udc_ctrl_send_stall($p0: ref);



const isp1760_ep0_setup_standard: ref;

axiom isp1760_ep0_setup_standard == $sub.ref(0, 289495);

procedure isp1760_ep0_setup_standard($p0: ref, $p1: ref) returns ($r: i1);



const isp1760_udc_get_status: ref;

axiom isp1760_udc_get_status == $sub.ref(0, 290527);

procedure isp1760_udc_get_status($p0: ref, $p1: ref) returns ($r: i32);



const isp1760_udc_find_ep: ref;

axiom isp1760_udc_find_ep == $sub.ref(0, 291559);

procedure isp1760_udc_find_ep($p0: ref, $i1: i16) returns ($r: ref);



const __isp1760_udc_set_halt: ref;

axiom __isp1760_udc_set_halt == $sub.ref(0, 292591);

procedure __isp1760_udc_set_halt($p0: ref, $i1: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.0, $CurrAddr, $M.1, $M.32, $M.30, $M.38, $M.36, $M.40, $M.23, $M.22, $M.25, $M.24, $M.27, $M.26, $M.29, $M.28, $M.2, $M.4, $M.6, $M.8, $M.3, $M.5, $M.7, $M.9, assertsPassed;



implementation __isp1760_udc_set_halt($p0: ref, $i1: i1) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i24;
  var $i14: i24;
  var $i15: i24;
  var $p16: ref;
  var $p17: ref;
  var $i18: i8;
  var $i19: i64;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i24;
  var $i46: i24;
  var $i47: i24;
  var $p48: ref;
  var $p49: ref;
  var $i50: i8;
  var $i51: i64;
  var $i52: i64;
  var $i53: i64;
  var $i54: i1;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i32;
  var $i62: i1;
  var $i63: i32;
  var $p64: ref;
  var $i65: i32;
  var $i66: i1;
  var $i67: i1;
  var $i68: i32;
  var $i69: i1;
  var $i70: i32;
  var $i71: i16;
  var $i72: i32;
  var $i73: i32;
  var $i74: i32;
  var $p75: ref;
  var $i76: i32;
  var $i77: i32;
  var $i78: i1;
  var $p79: ref;
  var $i80: i32;
  var $i81: i1;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $i87: i1;
  var $p88: ref;
  var $i89: i8;
  var $i61: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 312} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 313} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i1);
    call {:si_unique_call 314} {:cexpr "__isp1760_udc_set_halt:arg:halt___0"} boogie_si_record_i1($i1);
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 120)), $mul.ref(0, 1));
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p7, .str.26);
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p8, .str.91);
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p9, .str.55);
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p10, .str.92);
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    $i13 := $load.i24($M.16, $p12);
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    $i14 := $and.i24($i13, $sub.i24(0, 262144));
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    $i15 := $or.i24($i14, 406);
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    $M.16 := $store.i24($M.16, $p12, $i15);
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    $M.17 := $store.i8($M.17, $p16, 0);
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.17, $p17);
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i64($i18);
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    $i20 := $and.i64($i19, 1);
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 315} $i21 := ldv__builtin_expect($i20, 0);
    call {:si_unique_call 316} {:cexpr "tmp"} boogie_si_record_i64($i21);
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 120)), $mul.ref(104, 1));
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p32);
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i33, 0);
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 323} isp1760_udc_select_ep($p0);
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    $i62 := $trunc.i8.i1($i4);
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    $i63 := $zext.i1.i32($i62);
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} isp1760_udc_write($p6, 552, $i63);
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 120)), $mul.ref(88, 1));
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.0, $p64);
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    $i66 := $eq.i32($i65, 0);
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    assume {:branchcond $i66} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i66 == 1);
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    $i69 := $trunc.i8.i1($i4);
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i69 == 1);
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 327} $i70 := isp1760_udc_read($p6, 520);
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    call {:si_unique_call 328} {:cexpr "tmp___2"} boogie_si_record_i32($i70);
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    $i71 := $trunc.i32.i16($i70);
    call {:si_unique_call 329} {:cexpr "eptype"} boogie_si_record_i16($i71);
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    $i72 := $zext.i16.i32($i71);
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    $i73 := $and.i32($i72, $sub.i32(0, 9));
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 330} isp1760_udc_write($p6, 520, $i73);
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    $i74 := $zext.i16.i32($i71);
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 331} isp1760_udc_write($p6, 520, $i74);
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p0, $mul.ref(0, 120)), $mul.ref(88, 1));
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.0, $p75);
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    $i77 := $and.i32($i76, 128);
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    $i78 := $ne.i32($i77, 0);
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i87 := $trunc.i8.i1($i4);
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p0, $mul.ref(0, 120)), $mul.ref(113, 1));
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    $i89 := $zext.i1.i8($i87);
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p88, $i89);
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    $i61 := 0;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    $r := $i61;
    return;

  $bb19:
    assume $i78 == 1;
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p0, $mul.ref(0, 120)), $mul.ref(72, 1));
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} $i80 := list_empty($p79);
    call {:si_unique_call 333} {:cexpr "tmp___3"} boogie_si_record_i32($i80);
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    $i81 := $eq.i32($i80, 0);
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb21:
    assume $i81 == 1;
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 120)), $mul.ref(72, 1)), $mul.ref(0, 1));
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.0, $p83);
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    $p85 := $bitcast.ref.ref($p84);
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($p85, $mul.ref($sub.ref(0, 88), 120));
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 334} isp1760_udc_transmit($p0, $p86);
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    goto $bb23;

  SeqInstr_25:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i69 == 1;
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb14:
    assume $i66 == 1;
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 325} __isp1760_udc_select_ep($p0, 128);
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    $i67 := $trunc.i8.i1($i4);
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    $i68 := $zext.i1.i32($i67);
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} isp1760_udc_write($p6, 552, $i68);
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb4:
    assume $i34 == 1;
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 120)), $mul.ref(104, 1));
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 318} $i37 := usb_endpoint_xfer_isoc($p36);
    call {:si_unique_call 319} {:cexpr "tmp___1"} boogie_si_record_i32($i37);
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb6:
    assume $i38 == 1;
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p39, .str.26);
    goto corral_source_split_1728;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p40, .str.91);
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p41, .str.55);
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p42, .str.95);
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    $i45 := $load.i24($M.16, $p44);
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    $i46 := $and.i24($i45, $sub.i24(0, 262144));
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    $i47 := $or.i24($i46, 410);
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    $M.16 := $store.i24($M.16, $p44, $i47);
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    $M.17 := $store.i8($M.17, $p48, 0);
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    $i50 := $load.i8($M.17, $p49);
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    $i51 := $zext.i8.i64($i50);
    goto corral_source_split_1745;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    $i52 := $and.i64($i51, 1);
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 320} $i53 := ldv__builtin_expect($i52, 0);
    call {:si_unique_call 321} {:cexpr "tmp___0"} boogie_si_record_i64($i53);
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    $i54 := $ne.i64($i53, 0);
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i61 := $sub.i32(0, 22);
    goto $bb11;

  $bb8:
    assume $i54 == 1;
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p6, $mul.ref(0, 3640)), $mul.ref(0, 1));
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p56, $mul.ref(0, 6056)), $mul.ref(0, 1));
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 120)), $mul.ref(88, 1));
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.0, $p59);
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 322} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p3, $p58, .str.95, .str.91, $i60);
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb1:
    assume $i22 == 1;
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p6, $mul.ref(0, 3640)), $mul.ref(0, 1));
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 6056)), $mul.ref(0, 1));
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i8.i1($i4);
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    $p28 := (if $i27 == 1 then .str.93 else .str.94);
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 120)), $mul.ref(88, 1));
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 317} __dynamic_dev_dbg.ref.ref.ref.ref.ref.i32($p2, $p26, .str.92, .str.91, $p28, $i30);
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const isp1760_udc_ctrl_send_status: ref;

axiom isp1760_udc_ctrl_send_status == $sub.ref(0, 293623);

procedure isp1760_udc_ctrl_send_status($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation isp1760_udc_ctrl_send_status($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i1;
  var $i5: i32;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} {:cexpr "isp1760_udc_ctrl_send_status:arg:dir"} boogie_si_record_i32($i1);
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 120)), $mul.ref(0, 1));
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i1, 128);
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} isp1760_udc_write($p3, 556, $i5);
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 337} isp1760_udc_write($p3, 552, 2);
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 3640)), $mul.ref(3624, 1));
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, 0);
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    return;
}



const isp1760_udc_set_address: ref;

axiom isp1760_udc_set_address == $sub.ref(0, 294655);

procedure isp1760_udc_set_address($p0: ref, $i1: i16) returns ($r: i32);



const usb_endpoint_xfer_isoc: ref;

axiom usb_endpoint_xfer_isoc == $sub.ref(0, 295687);

procedure usb_endpoint_xfer_isoc($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_xfer_isoc($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 10)), $mul.ref(3, 1));
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 3);
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 1);
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const isp1760_udc_select_ep: ref;

axiom isp1760_udc_select_ep == $sub.ref(0, 296719);

procedure isp1760_udc_select_ep($p0: ref);
  free requires assertsPassed;



implementation isp1760_udc_select_ep($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 120)), $mul.ref(88, 1));
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 128);
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 338} __isp1760_udc_select_ep($p0, $i3);
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    return;
}



const __isp1760_udc_select_ep: ref;

axiom __isp1760_udc_select_ep == $sub.ref(0, 297751);

procedure __isp1760_udc_select_ep($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __isp1760_udc_select_ep($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} {:cexpr "__isp1760_udc_select_ep:arg:dir"} boogie_si_record_i32($i1);
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 120)), $mul.ref(0, 1));
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 120)), $mul.ref(88, 1));
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 15);
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    $i7 := $shl.i32($i6, 1);
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i1, 128);
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    $i9 := (if $i8 == 1 then 1 else 0);
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    $i10 := $or.i32($i7, $i9);
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 340} isp1760_udc_write($p3, 556, $i10);
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    return;
}



const list_empty: ref;

axiom list_empty == $sub.ref(0, 298783);

procedure list_empty($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation list_empty($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i3, $i4);
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const isp1760_udc_transmit: ref;

axiom isp1760_udc_transmit == $sub.ref(0, 299815);

procedure isp1760_udc_transmit($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $CurrAddr;



implementation isp1760_udc_transmit($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i64;
  var $p13: ref;
  var $p15: ref;
  var $i16: i32;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i24;
  var $i33: i24;
  var $i34: i24;
  var $p35: ref;
  var $p36: ref;
  var $i37: i8;
  var $i38: i64;
  var $i39: i64;
  var $i40: i64;
  var $i41: i1;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $p49: ref;
  var $i50: i32;
  var $p52: ref;
  var $i53: i32;
  var $p54: ref;
  var $i55: i32;
  var $i56: i1;
  var $p57: ref;
  var $i58: i32;
  var $p59: ref;
  var $i60: i32;
  var $i61: i1;
  var $i66: i32;
  var $i67: i32;
  var $p68: ref;
  var $i69: i1;
  var $i64: i32;
  var $p65: ref;
  var $p70: ref;
  var $i71: i32;
  var $p62: ref;
  var $i63: i32;
  var $i72: i1;
  var $p73: ref;
  var $i74: i16;
  var $i75: i32;
  var $i76: i16;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $i81: i32;
  var $i82: i1;
  var $p83: ref;
  var $i84: i32;
  var $i85: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 341} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 120)), $mul.ref(0, 1));
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 120)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 120)), $mul.ref(0, 1)), $mul.ref(84, 1));
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    $i12 := $zext.i32.i64($i11);
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p8, $mul.ref($i12, 4));
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 120)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 120)), $mul.ref(0, 1)), $mul.ref(84, 1));
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32($i16, $i19);
    call {:si_unique_call 342} {:cexpr "_min1"} boogie_si_record_i32($i20);
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 120)), $mul.ref(92, 1));
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    call {:si_unique_call 343} {:cexpr "_min2"} boogie_si_record_i32($i22);
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    $i23 := $ult.i32($i20, $i22);
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i23 == 1);
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    $i24 := $i22;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 120)), $mul.ref(112, 1));
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p25, $i24);
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p26, .str.26);
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p27, .str.72);
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p28, .str.55);
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p29, .str.73);
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    $i32 := $load.i24($M.16, $p31);
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    $i33 := $and.i24($i32, $sub.i24(0, 262144));
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    $i34 := $or.i24($i33, 257);
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    $M.16 := $store.i24($M.16, $p31, $i34);
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    $M.17 := $store.i8($M.17, $p35, 0);
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.17, $p36);
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i64($i37);
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    $i39 := $and.i64($i38, 1);
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} $i40 := ldv__builtin_expect($i39, 0);
    call {:si_unique_call 345} {:cexpr "tmp"} boogie_si_record_i64($i40);
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    $i41 := $ne.i64($i40, 0);
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 347} __isp1760_udc_select_ep($p0, 128);
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p1, $mul.ref(0, 120)), $mul.ref(112, 1));
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 0);
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    assume {:branchcond $i56} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p1, $mul.ref(0, 120)), $mul.ref(112, 1));
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.0, $p59);
    call {:si_unique_call 349} {:cexpr "i"} boogie_si_record_i32($i60);
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    $i61 := $sgt.i32($i60, 2);
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    $p62, $i63 := $p13, $i60;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i61 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i72 := $sgt.i32($i63, 0);
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p0, $mul.ref(0, 120)), $mul.ref(88, 1));
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    $i81 := $load.i32($M.0, $p80);
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    $i82 := $eq.i32($i81, 0);
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p1, $mul.ref(0, 120)), $mul.ref(112, 1));
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    $i84 := $load.i32($M.0, $p83);
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    $i85 := $eq.i32($i84, 0);
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    assume {:branchcond $i85} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    return;

  $bb24:
    assume $i85 == 1;
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 354} isp1760_udc_write($p4, 552, 8);
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb21:
    assume $i82 == 1;
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 353} isp1760_udc_write($p4, 552, 4);
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb18:
    assume $i72 == 1;
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p62);
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    $i74 := $load.i16($M.0, $p73);
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    $i75 := $zext.i16.i32($i74);
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    $i76 := $trunc.i32.i16($i75);
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p4, $mul.ref(0, 3640)), $mul.ref(24, 1));
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.0, $p77);
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($p78, $mul.ref(544, 1));
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 352} writew($i76, $p79);
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb10:
    assume $i61 == 1;
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    $i64, $p65 := $i60, $p13;
    goto $bb13;

  $bb13:
    call $i66, $i67, $p68, $i69, $i64, $p65, $p70, $i71 := isp1760_udc_transmit_loop_$bb13($p4, $i66, $i67, $p68, $i69, $i64, $p65, $p70, $i71);
    goto $bb13_last;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.0, $p65);
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 350} isp1760_udc_write($p4, 544, $i66);
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    $i67 := $add.i32($i64, $sub.i32(0, 4));
    call {:si_unique_call 351} {:cexpr "i"} boogie_si_record_i32($i67);
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($p65, $mul.ref(1, 4));
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    $i69 := $sgt.i32($i67, 2);
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    $p70, $i71 := $p68, $i67;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    $p62, $i63 := $p70, $i71;
    goto $bb12;

  $bb15:
    assume $i69 == 1;
    assume {:verifier.code 0} true;
    $i64, $p65 := $i67, $p68;
    goto $bb15_dummy;

  $bb7:
    assume $i56 == 1;
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p1, $mul.ref(0, 120)), $mul.ref(112, 1));
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.0, $p57);
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} isp1760_udc_write($p4, 540, $i58);
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i41 == 1;
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p4, $mul.ref(0, 3640)), $mul.ref(0, 1));
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p43, $mul.ref(0, 6056)), $mul.ref(0, 1));
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p1, $mul.ref(0, 120)), $mul.ref(112, 1));
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 120)), $mul.ref(0, 1)), $mul.ref(84, 1));
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 120)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.0, $p52);
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 346} __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32.i32($p2, $p45, .str.73, .str.72, $i47, $i50, $i53);
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i23 == 1;
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    $i24 := $i20;
    goto $bb3;

  $bb15_dummy:
    assume false;
    return;

  $bb13_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1930;
}



const writew: ref;

axiom writew == $sub.ref(0, 300847);

procedure writew($i0: i16, $p1: ref);
  free requires assertsPassed;



implementation writew($i0: i16, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 355} {:cexpr "writew:arg:val"} boogie_si_record_i16($i0);
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    call {:si_unique_call 356} devirtbounce.2(0, $i0, $p2);
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_lock: ref;

axiom ldv_spin_lock == $sub.ref(0, 301879);

procedure ldv_spin_lock();
  free requires assertsPassed;
  modifies $M.30;



implementation ldv_spin_lock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    $M.30 := 1;
    call {:si_unique_call 357} {:cexpr "ldv_spin"} boogie_si_record_i32(1);
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    return;
}



const spin_unlock_irqrestore: ref;

axiom spin_unlock_irqrestore == $sub.ref(0, 302911);

procedure spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.30;



implementation spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 358} {:cexpr "spin_unlock_irqrestore:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 359} ldv_spin_unlock();
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 360} ldv_spin_unlock_irqrestore_65($p0, $i1);
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock: ref;

axiom ldv_spin_unlock == $sub.ref(0, 303943);

procedure ldv_spin_unlock();
  free requires assertsPassed;
  modifies $M.30;



implementation ldv_spin_unlock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    $M.30 := 0;
    call {:si_unique_call 361} {:cexpr "ldv_spin"} boogie_si_record_i32(0);
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock_irqrestore_65: ref;

axiom ldv_spin_unlock_irqrestore_65 == $sub.ref(0, 304975);

procedure ldv_spin_unlock_irqrestore_65($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation ldv_spin_unlock_irqrestore_65($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 362} {:cexpr "ldv_spin_unlock_irqrestore_65:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 363} _raw_spin_unlock_irqrestore($p3, $i1);
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irqrestore: ref;

axiom _raw_spin_unlock_irqrestore == $sub.ref(0, 306007);

procedure _raw_spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation _raw_spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 364} {:cexpr "_raw_spin_unlock_irqrestore:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    return;
}



const isp1760_udc_receive: ref;

axiom isp1760_udc_receive == $sub.ref(0, 307039);

procedure isp1760_udc_receive($p0: ref, $p1: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.0, $CurrAddr, $M.1, $M.32, $M.30, $M.38, $M.36, $M.40, $M.23, $M.22, $M.25, $M.24, $M.27, $M.26, $M.29, $M.28, $M.2, $M.4, $M.6, $M.8, $M.3, $M.5, $M.7, $M.9, assertsPassed;



implementation isp1760_udc_receive($p0: ref, $p1: ref) returns ($r: i1)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i24;
  var $i15: i24;
  var $i16: i24;
  var $p17: ref;
  var $p18: ref;
  var $i19: i8;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p29: ref;
  var $i30: i32;
  var $p32: ref;
  var $i33: i32;
  var $p35: ref;
  var $i36: i32;
  var $p38: ref;
  var $i39: i32;
  var $i40: i32;
  var $i41: i1;
  var $i42: i32;
  var $i43: i1;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p50: ref;
  var $i51: i32;
  var $i52: i64;
  var $p53: ref;
  var $i54: i1;
  var $i59: i32;
  var $i60: i32;
  var $p61: ref;
  var $i62: i1;
  var $i57: i32;
  var $p58: ref;
  var $p63: ref;
  var $i64: i32;
  var $p55: ref;
  var $i56: i32;
  var $i65: i1;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i16;
  var $p70: ref;
  var $p72: ref;
  var $i73: i32;
  var $i74: i32;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $i83: i24;
  var $i84: i24;
  var $i85: i24;
  var $p86: ref;
  var $p87: ref;
  var $i88: i8;
  var $i89: i64;
  var $i90: i64;
  var $i91: i64;
  var $i92: i1;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p98: ref;
  var $i99: i32;
  var $p101: ref;
  var $i102: i32;
  var $p103: ref;
  var $i104: i32;
  var $p105: ref;
  var $p107: ref;
  var $i108: i32;
  var $p110: ref;
  var $i111: i32;
  var $i112: i1;
  var $p113: ref;
  var $i114: i32;
  var $i115: i1;
  var $p116: ref;
  var $i44: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 365} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 366} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 120)), $mul.ref(0, 1));
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 367} isp1760_udc_select_ep($p0);
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 368} $i6 := isp1760_udc_read($p5, 540);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    call {:si_unique_call 369} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 65535);
    call {:si_unique_call 370} {:cexpr "len"} boogie_si_record_i32($i7);
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p8, .str.26);
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p9, .str.80);
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p10, .str.55);
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p11, .str.81);
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    $i14 := $load.i24($M.16, $p13);
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    $i15 := $and.i24($i14, $sub.i24(0, 262144));
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    $i16 := $or.i24($i15, 191);
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    $M.16 := $store.i24($M.16, $p13, $i16);
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    $M.17 := $store.i8($M.17, $p17, 0);
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.17, $p18);
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i64($i19);
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    $i21 := $and.i64($i20, 1);
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 371} $i22 := ldv__builtin_expect($i21, 0);
    call {:si_unique_call 372} {:cexpr "tmp___0"} boogie_si_record_i64($i22);
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 120)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 120)), $mul.ref(0, 1)), $mul.ref(84, 1));
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    $i40 := $sub.i32($i36, $i39);
    call {:si_unique_call 374} {:cexpr "_min2"} boogie_si_record_i32($i40);
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    $i41 := $ult.i32($i7, $i40);
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i41 == 1);
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    $i42 := $i40;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i42, 0);
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 120)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 120)), $mul.ref(0, 1)), $mul.ref(84, 1));
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p50);
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    $i52 := $zext.i32.i64($i51);
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($p48, $mul.ref($i52, 4));
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    $i54 := $sgt.i32($i42, 2);
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    $p55, $i56 := $p53, $i42;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i54 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i65 := $sgt.i32($i56, 0);
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 120)), $mul.ref(0, 1)), $mul.ref(84, 1));
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.0, $p72);
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    $i74 := $add.i32($i73, $i42);
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 120)), $mul.ref(0, 1)), $mul.ref(84, 1));
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p76, $i74);
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p77, .str.26);
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p78, .str.80);
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p79, .str.55);
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p80, .str.82);
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    $p82 := $bitcast.ref.ref($p81);
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    $i83 := $load.i24($M.16, $p82);
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    $i84 := $and.i24($i83, $sub.i24(0, 262144));
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    $i85 := $or.i24($i84, 229);
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    $M.16 := $store.i24($M.16, $p82, $i85);
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    $M.17 := $store.i8($M.17, $p86, 0);
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    $i88 := $load.i8($M.17, $p87);
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    $i89 := $zext.i8.i64($i88);
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    $i90 := $and.i64($i89, 1);
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 379} $i91 := ldv__builtin_expect($i90, 0);
    call {:si_unique_call 380} {:cexpr "tmp___1"} boogie_si_record_i64($i91);
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    $i92 := $ne.i64($i91, 0);
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p0, $mul.ref(0, 120)), $mul.ref(112, 1));
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p105, 0);
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 120)), $mul.ref(0, 1)), $mul.ref(84, 1));
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    $i108 := $load.i32($M.0, $p107);
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 120)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    $i111 := $load.i32($M.0, $p110);
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    $i112 := $eq.i32($i108, $i111);
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    assume {:branchcond $i112} true;
    goto $bb25, $bb27;

  $bb27:
    assume !($i112 == 1);
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p0, $mul.ref(0, 120)), $mul.ref(92, 1));
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    $i114 := $load.i32($M.0, $p113);
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    $i115 := $ugt.i32($i114, $i42);
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i44 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    $r := $i44;
    return;

  $bb28:
    assume {:verifier.code 0} true;
    assume $i115 == 1;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p1, $mul.ref(0, 120)), $mul.ref(88, 1));
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 382} list_del($p116);
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    $i44 := 1;
    goto $bb9;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i112 == 1;
    goto $bb26;

  $bb22:
    assume $i92 == 1;
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p5, $mul.ref(0, 3640)), $mul.ref(0, 1));
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    $p94 := $load.ref($M.0, $p93);
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p94, $mul.ref(0, 6056)), $mul.ref(0, 1));
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    $p96 := $load.ref($M.0, $p95);
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 120)), $mul.ref(0, 1)), $mul.ref(84, 1));
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    $i99 := $load.i32($M.0, $p98);
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 120)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    $i102 := $load.i32($M.0, $p101);
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p0, $mul.ref(0, 120)), $mul.ref(92, 1));
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    $i104 := $load.i32($M.0, $p103);
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 381} __dynamic_dev_dbg.ref.ref.ref.ref.ref.i32.i32.i32.i32($p3, $p96, .str.82, .str.80, $p1, $i99, $i102, $i104, $i42);
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb19:
    assume $i65 == 1;
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p5, $mul.ref(0, 3640)), $mul.ref(24, 1));
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($p67, $mul.ref(544, 1));
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 378} $i69 := readw($p68);
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    $p70 := $bitcast.ref.ref($p55);
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p70, $i69);
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb11:
    assume $i54 == 1;
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    $i57, $p58 := $i42, $p53;
    goto $bb14;

  $bb14:
    call $i59, $i60, $p61, $i62, $i57, $p58, $p63, $i64 := isp1760_udc_receive_loop_$bb14($p5, $i59, $i60, $p61, $i62, $i57, $p58, $p63, $i64);
    goto $bb14_last;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} $i59 := isp1760_udc_read($p5, 544);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p58, $i59);
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    $i60 := $add.i32($i57, $sub.i32(0, 4));
    call {:si_unique_call 377} {:cexpr "i"} boogie_si_record_i32($i60);
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($p58, $mul.ref(1, 4));
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    $i62 := $sgt.i32($i60, 2);
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    $p63, $i64 := $p61, $i60;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    $p55, $i56 := $p63, $i64;
    goto $bb13;

  $bb16:
    assume $i62 == 1;
    assume {:verifier.code 0} true;
    $i57, $p58 := $i60, $p61;
    goto $bb16_dummy;

  SeqInstr_31:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i43 == 1;
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 375} isp1760_udc_write($p5, 552, 16);
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    $i44 := 0;
    goto $bb9;

  $bb4:
    assume $i41 == 1;
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    $i42 := $i7;
    goto $bb6;

  $bb1:
    assume $i23 == 1;
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p5, $mul.ref(0, 3640)), $mul.ref(0, 1));
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 6056)), $mul.ref(0, 1));
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 120)), $mul.ref(0, 1)), $mul.ref(84, 1));
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 120)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 373} __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32.i32($p2, $p27, .str.81, .str.80, $i7, $i30, $i33);
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_28:
    assume !assertsPassed;
    return;

  $bb16_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2056;
}



const isp1760_udc_request_complete: ref;

axiom isp1760_udc_request_complete == $sub.ref(0, 308071);

procedure isp1760_udc_request_complete($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.0, $M.30, $CurrAddr, $M.36, $M.38, assertsPassed, $M.1, $M.32, $M.40, $M.23, $M.22, $M.25, $M.24, $M.27, $M.26, $M.29, $M.28, $M.2, $M.4, $M.6, $M.8, $M.3, $M.5, $M.7, $M.9;



implementation isp1760_udc_request_complete($p0: ref, $p1: ref, $i2: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i24;
  var $i13: i24;
  var $i14: i24;
  var $p15: ref;
  var $p16: ref;
  var $i17: i8;
  var $i18: i64;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p30: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i1;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $i41: i8;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 383} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 384} {:cexpr "isp1760_udc_request_complete:arg:status"} boogie_si_record_i32($i2);
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 120)), $mul.ref(0, 1));
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p6, .str.26);
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p7, .str.74);
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p8, .str.55);
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p9, .str.75);
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    $i12 := $load.i24($M.16, $p11);
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    $i13 := $and.i24($i12, $sub.i24(0, 262144));
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    $i14 := $or.i24($i13, 134);
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    $M.16 := $store.i24($M.16, $p11, $i14);
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    $M.17 := $store.i8($M.17, $p15, 0);
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.17, $p16);
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i64($i17);
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    $i19 := $and.i64($i18, 1);
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 385} $i20 := ldv__builtin_expect($i19, 0);
    call {:si_unique_call 386} {:cexpr "tmp"} boogie_si_record_i64($i20);
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 120)), $mul.ref(104, 1));
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p28, $0.ref);
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 120)), $mul.ref(0, 1)), $mul.ref(80, 1));
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, $i2);
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 120)), $mul.ref(0, 1)), $mul.ref(48, 1));
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 120)), $mul.ref(8, 1));
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref(0, 120)), $mul.ref(0, 1));
    call {:si_unique_call 388} devirtbounce.3($p33, $p34, $p35);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 389} ldv_spin_lock();
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i2, 0);
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p5, $mul.ref(0, 3640)), $mul.ref(1624, 1));
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 391} spin_unlock_irqrestore($p44, $u0);
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i36 == 1;
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 120)), $mul.ref(88, 1));
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 0);
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i39 == 1);
    goto $bb6;

  $bb7:
    assume $i39 == 1;
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p5, $mul.ref(0, 3640)), $mul.ref(3628, 1));
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    $i41 := $load.i8($M.0, $p40);
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i41);
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i42, 0);
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i43 == 1);
    goto $bb6;

  $bb9:
    assume $i43 == 1;
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 390} isp1760_udc_ctrl_send_status($p0, 0);
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    goto $bb11;

  SeqInstr_34:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i21 == 1;
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 120)), $mul.ref(0, 1));
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 3640)), $mul.ref(0, 1));
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 6056)), $mul.ref(0, 1));
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p3, $p27, .str.75, $p1, $i2);
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const readw: ref;

axiom readw == $sub.ref(0, 309103);

procedure readw($p0: ref) returns ($r: i16);
  free requires assertsPassed;



implementation readw($p0: ref) returns ($r: i16)
{
  var $p1: ref;
  var $i2: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    call {:si_unique_call 392} $i2 := devirtbounce.4(0, $p1);
    call {:si_unique_call 393} {:cexpr "ret"} boogie_si_record_i16($i2);
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const list_del: ref;

axiom list_del == $sub.ref(0, 310135);

procedure list_del($p0: ref);
  free requires assertsPassed;



implementation list_del($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    return;
}



const isp1760_udc_init_hw: ref;

axiom isp1760_udc_init_hw == $sub.ref(0, 311167);

procedure isp1760_udc_init_hw($p0: ref);
  free requires assertsPassed;



implementation isp1760_udc_init_hw($p0: ref)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 394} isp1760_udc_write($p0, 528, 84);
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 395} isp1760_udc_write($p0, 532, 67108281);
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3640)), $mul.ref(3632, 1));
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 397} isp1760_udc_write($p0, 512, 128);
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 3640)), $mul.ref(0, 1));
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 396} isp1760_set_pullup($p5, 1);
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const usb_gadget_udc_reset: ref;

axiom usb_gadget_udc_reset == $sub.ref(0, 312199);

procedure usb_gadget_udc_reset($p0: ref, $p1: ref);



const isp1760_set_pullup: ref;

axiom isp1760_set_pullup == $sub.ref(0, 313231);

procedure isp1760_set_pullup($p0: ref, $i1: i1);
  free requires assertsPassed;



implementation isp1760_set_pullup($p0: ref, $i1: i1)
{
  var $i2: i8;
  var $p3: ref;
  var $p4: ref;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 398} {:cexpr "isp1760_set_pullup:arg:enable"} boogie_si_record_i1($i1);
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 6056)), $mul.ref(8, 1));
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i2);
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    $i6 := (if $i5 == 1 then 1 else 65536);
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 399} isp1760_write32($p4, 884, $i6);
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    return;
}



const isp1760_write32: ref;

axiom isp1760_write32 == $sub.ref(0, 314263);

procedure isp1760_write32($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;



implementation isp1760_write32($p0: ref, $i1: i32, $i2: i32)
{
  var $i3: i64;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 400} {:cexpr "isp1760_write32:arg:reg"} boogie_si_record_i32($i1);
    call {:si_unique_call 401} {:cexpr "isp1760_write32:arg:val"} boogie_si_record_i32($i2);
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    $i3 := $zext.i32.i64($i1);
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p0, $mul.ref($i3, 1));
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 402} writel($i2, $p4);
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    return;
}



const writel: ref;

axiom writel == $sub.ref(0, 315295);

procedure writel($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation writel($i0: i32, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} {:cexpr "writel:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    call {:si_unique_call 404} devirtbounce.5(0, $i0, $p2);
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock_62: ref;

axiom ldv_spin_unlock_62 == $sub.ref(0, 316327);

procedure ldv_spin_unlock_62($p0: ref);
  free requires assertsPassed;



implementation ldv_spin_unlock_62($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 405} _raw_spin_unlock($p2);
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock: ref;

axiom _raw_spin_unlock == $sub.ref(0, 317359);

procedure _raw_spin_unlock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    return;
}



const msecs_to_jiffies: ref;

axiom msecs_to_jiffies == $sub.ref(0, 318391);

procedure msecs_to_jiffies($i0: i32) returns ($r: i64);
  free requires assertsPassed;



implementation msecs_to_jiffies($i0: i32) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} {:cexpr "msecs_to_jiffies:arg:m"} boogie_si_record_i32($i0);
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 407} $i1 := __msecs_to_jiffies($i0);
    call {:si_unique_call 408} {:cexpr "tmp___0"} boogie_si_record_i64($i1);
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_mod_timer_102: ref;

axiom ldv_mod_timer_102 == $sub.ref(0, 319423);

procedure ldv_mod_timer_102($p0: ref, $i1: i64) returns ($r: i32);



const mod_timer: ref;

axiom mod_timer == $sub.ref(0, 320455);

procedure mod_timer($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation mod_timer($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 409} {:cexpr "mod_timer:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 1} true;
    call {:si_unique_call 410} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 411} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const activate_pending_timer_3: ref;

axiom activate_pending_timer_3 == $sub.ref(0, 321487);

procedure activate_pending_timer_3($p0: ref, $i1: i64, $i2: i32);
  free requires assertsPassed;
  modifies $M.23, $M.0, $M.22, $M.25, $M.24, $M.27, $M.26, $M.29, $M.28;



implementation activate_pending_timer_3($p0: ref, $i1: i64, $i2: i32)
{
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i64;
  var $i33: i1;
  var $i34: i32;
  var $i35: i1;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 412} {:cexpr "activate_pending_timer_3:arg:data"} boogie_si_record_i64($i1);
    call {:si_unique_call 413} {:cexpr "activate_pending_timer_3:arg:pending_flag"} boogie_si_record_i32($i2);
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    $p3 := $M.23;
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p0);
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i4, $i5);
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p12 := $M.25;
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p0);
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i13, $i14);
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p21 := $M.27;
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p0);
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i22, $i23);
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p30 := $M.29;
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p0);
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    $i33 := $eq.i64($i31, $i32);
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 418} activate_suitable_timer_3($p0, $i1);
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb29:
    assume $i33 == 1;
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    $i34 := $M.28;
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 2);
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb31, $bb33;

  $bb33:
    assume !($i35 == 1);
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i2, 0);
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb34:
    assume {:verifier.code 0} true;
    assume $i36 == 1;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $M.29 := $p0;
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    $p37 := $M.29;
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p38, $i1);
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    $M.28 := 1;
    call {:si_unique_call 417} {:cexpr "ldv_timer_3_3"} boogie_si_record_i32(1);
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb31:
    assume {:verifier.code 0} true;
    assume $i35 == 1;
    goto $bb32;

  $bb20:
    assume $i24 == 1;
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    $i25 := $M.26;
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 2);
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb24;

  $bb24:
    assume !($i26 == 1);
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i2, 0);
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i27 == 1;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $M.27 := $p0;
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    $p28 := $M.27;
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p29, $i1);
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    $M.26 := 1;
    call {:si_unique_call 416} {:cexpr "ldv_timer_3_2"} boogie_si_record_i32(1);
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb23;

  $bb11:
    assume $i15 == 1;
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    $i16 := $M.24;
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 2);
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i17 == 1);
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i2, 0);
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $M.25 := $p0;
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    $p19 := $M.25;
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p20, $i1);
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    $M.24 := 1;
    call {:si_unique_call 415} {:cexpr "ldv_timer_3_1"} boogie_si_record_i32(1);
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb14;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    $i7 := $M.22;
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 2);
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i8 == 1);
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i2, 0);
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $M.23 := $p0;
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    $p10 := $M.23;
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p11, $i1);
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    $M.22 := 1;
    call {:si_unique_call 414} {:cexpr "ldv_timer_3_0"} boogie_si_record_i32(1);
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb4;
}



const activate_suitable_timer_3: ref;

axiom activate_suitable_timer_3 == $sub.ref(0, 322519);

procedure activate_suitable_timer_3($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.23, $M.0, $M.22, $M.25, $M.24, $M.27, $M.26, $M.29, $M.28;



implementation activate_suitable_timer_3($p0: ref, $i1: i64)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 419} {:cexpr "activate_suitable_timer_3:arg:data"} boogie_si_record_i64($i1);
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    $i2 := $M.22;
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i3 == 1);
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    $i4 := $M.22;
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 2);
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i8 := $M.24;
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i9 == 1);
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    $i10 := $M.24;
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 2);
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i14 := $M.26;
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 0);
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb14, $bb16;

  $bb16:
    assume !($i15 == 1);
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    $i16 := $M.26;
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 2);
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i20 := $M.28;
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 0);
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i21 == 1);
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    $i22 := $M.28;
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 2);
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $M.29 := $p0;
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    $p24 := $M.29;
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p25, $i1);
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    $M.28 := 1;
    call {:si_unique_call 423} {:cexpr "ldv_timer_3_3"} boogie_si_record_i32(1);
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb21;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $M.27 := $p0;
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    $p18 := $M.27;
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p19, $i1);
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    $M.26 := 1;
    call {:si_unique_call 422} {:cexpr "ldv_timer_3_2"} boogie_si_record_i32(1);
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb15;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $M.25 := $p0;
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    $p12 := $M.25;
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p13, $i1);
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    $M.24 := 1;
    call {:si_unique_call 421} {:cexpr "ldv_timer_3_1"} boogie_si_record_i32(1);
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb9;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $M.23 := $p0;
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    $p6 := $M.23;
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p7, $i1);
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    $M.22 := 1;
    call {:si_unique_call 420} {:cexpr "ldv_timer_3_0"} boogie_si_record_i32(1);
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb2;
}



const __msecs_to_jiffies: ref;

axiom __msecs_to_jiffies == $sub.ref(0, 323551);

procedure __msecs_to_jiffies($i0: i32) returns ($r: i64);
  free requires assertsPassed;



implementation __msecs_to_jiffies($i0: i32) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 424} {:cexpr "__msecs_to_jiffies:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 1} true;
    call {:si_unique_call 425} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 426} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_spin_lock_58: ref;

axiom ldv_spin_lock_58 == $sub.ref(0, 324583);

procedure ldv_spin_lock_58($p0: ref);
  free requires assertsPassed;



implementation ldv_spin_lock_58($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 427} _raw_spin_lock($p2);
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock: ref;

axiom _raw_spin_lock == $sub.ref(0, 325615);

procedure _raw_spin_lock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    return;
}



const isp1760_read32: ref;

axiom isp1760_read32 == $sub.ref(0, 326647);

procedure isp1760_read32($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.0, $M.32, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.30, $M.38, $M.36, $M.40, $M.23, $M.22, $M.25, $M.24, $M.27, $M.26, $M.29, $M.28, $CurrAddr, $M.2, $M.4, $M.6, $M.8, $M.3, $M.5, $M.7, $M.9, assertsPassed;



implementation isp1760_read32($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i64;
  var $p3: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 428} {:cexpr "isp1760_read32:arg:reg"} boogie_si_record_i32($i1);
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    $i2 := $zext.i32.i64($i1);
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p0, $mul.ref($i2, 1));
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 429} $i4 := readl($p3);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    call {:si_unique_call 430} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_37:
    assume !assertsPassed;
    return;
}



const readl: ref;

axiom readl == $sub.ref(0, 327679);

procedure readl($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.0, $M.32, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.30, $M.38, $M.36, $M.40, $M.23, $M.22, $M.25, $M.24, $M.27, $M.26, $M.29, $M.28, $CurrAddr, $M.2, $M.4, $M.6, $M.8, $M.3, $M.5, $M.7, $M.9, assertsPassed;



implementation readl($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    call {:si_unique_call 431} $i2 := devirtbounce.6(0, $p1);
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    call {:si_unique_call 432} {:cexpr "ret"} boogie_si_record_i32($i2);
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_40:
    assume !assertsPassed;
    return;
}



const ldv_check_alloc_flags: ref;

axiom ldv_check_alloc_flags == $sub.ref(0, 328711);

procedure ldv_check_alloc_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_alloc_flags($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} {:cexpr "ldv_check_alloc_flags:arg:flags"} boogie_si_record_i32($i0);
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    $i1 := $M.30;
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i0, 16);
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 434} ldv_error();
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    goto corral_source_split_2398;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_43:
    assume !assertsPassed;
    return;
}



const ldv_undef_ptr: ref;

axiom ldv_undef_ptr == $sub.ref(0, 329743);

procedure ldv_undef_ptr() returns ($r: ref);
  free requires assertsPassed;



implementation ldv_undef_ptr() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 1} true;
    call {:si_unique_call 435} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 436} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 330775);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 437} __VERIFIER_error();
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_46:
    assume !assertsPassed;
    return;
}



const kobject_name: ref;

axiom kobject_name == $sub.ref(0, 331807);

procedure kobject_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation kobject_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(0, 1));
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const usleep_range: ref;

axiom usleep_range == $sub.ref(0, 332839);

procedure usleep_range($i0: i64, $i1: i64);
  free requires assertsPassed;



implementation usleep_range($i0: i64, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} {:cexpr "usleep_range:arg:arg0"} boogie_si_record_i64($i0);
    call {:si_unique_call 439} {:cexpr "usleep_range:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mod_timer_105: ref;

axiom ldv_mod_timer_105 == $sub.ref(0, 333871);

procedure ldv_mod_timer_105($p0: ref, $i1: i64) returns ($r: i32);



const usb_create_hcd: ref;

axiom usb_create_hcd == $sub.ref(0, 334903);

procedure usb_create_hcd($p0: ref, $p1: ref, $p2: ref) returns ($r: ref);
  free requires assertsPassed;



implementation usb_create_hcd($p0: ref, $p1: ref, $p2: ref) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} $p3 := external_alloc();
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const init_memory: ref;

axiom init_memory == $sub.ref(0, 335935);

procedure init_memory($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation init_memory($p0: ref)
{
  var $p3: ref;
  var $p6: ref;
  var $p9: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;
  var $p18: ref;
  var $i20: i64;
  var $p23: ref;
  var $i24: i64;
  var $p27: ref;
  var $i28: i64;
  var $p31: ref;
  var $i32: i32;
  var $i33: i32;
  var $i34: i64;
  var $p37: ref;
  var $i39: i64;
  var $p42: ref;
  var $i43: i64;
  var $p46: ref;
  var $i47: i64;
  var $p50: ref;
  var $i51: i32;
  var $i52: i32;
  var $p55: ref;
  var $i56: i32;
  var $i57: i32;
  var $i59: i1;
  var $i60: i32;
  var $i61: i1;
  var $i62: i32;
  var $i63: i64;
  var $i64: i64;
  var $i65: i1;
  var $i66: i1;
  var $i67: i32;
  var $i68: i64;
  var $i70: i32;
  var $i71: i64;
  var $p74: ref;
  var $i75: i32;
  var $i76: i64;
  var $p79: ref;
  var $i80: i32;
  var $i81: i64;
  var $p84: ref;
  var $i85: i32;
  var $i86: i64;
  var $p89: ref;
  var $i90: i32;
  var $i91: i32;
  var $i92: i32;
  var $i93: i64;
  var $p96: ref;
  var $i97: i32;
  var $i98: i64;
  var $p101: ref;
  var $i102: i32;
  var $i103: i64;
  var $p106: ref;
  var $i107: i32;
  var $i108: i64;
  var $p111: ref;
  var $i112: i32;
  var $i113: i32;
  var $i114: i32;
  var $i115: i64;
  var $p118: ref;
  var $i119: i32;
  var $i120: i64;
  var $p123: ref;
  var $i124: i32;
  var $i125: i64;
  var $p128: ref;
  var $i129: i32;
  var $i130: i64;
  var $p133: ref;
  var $i134: i32;
  var $i58: i32;
  var $i135: i32;
  var $i136: i64;
  var $p139: ref;
  var $i140: i32;
  var $i141: i64;
  var $p144: ref;
  var $i145: i32;
  var $i146: i64;
  var $p149: ref;
  var $i150: i32;
  var $i151: i64;
  var $p154: ref;
  var $i155: i32;
  var $i156: i32;
  var $i157: i32;
  var $i158: i64;
  var $p161: ref;
  var $i162: i32;
  var $i163: i64;
  var $p166: ref;
  var $i167: i32;
  var $i168: i64;
  var $p171: ref;
  var $i172: i32;
  var $i173: i64;
  var $p176: ref;
  var $i177: i32;
  var $i178: i32;
  var $i179: i32;
  var $i180: i64;
  var $p183: ref;
  var $i184: i32;
  var $i185: i64;
  var $p188: ref;
  var $i189: i32;
  var $i190: i64;
  var $p193: ref;
  var $i194: i32;
  var $i195: i64;
  var $p198: ref;
  var $i199: i32;
  var $i200: i32;
  var $i201: i32;
  var $i202: i64;
  var $p205: ref;
  var $i206: i32;
  var $i207: i64;
  var $p210: ref;
  var $i211: i32;
  var $i212: i64;
  var $p215: ref;
  var $i216: i32;
  var $i217: i64;
  var $p220: ref;
  var $i221: i32;
  var $i222: i32;
  var $i223: i32;
  var $i224: i64;
  var $p227: ref;
  var $i228: i32;
  var $i229: i64;
  var $p232: ref;
  var $i233: i32;
  var $i234: i64;
  var $p237: ref;
  var $i238: i32;
  var $i239: i64;
  var $p242: ref;
  var $i243: i32;
  var $i244: i32;
  var $i245: i32;
  var $i246: i64;
  var $p249: ref;
  var $i250: i32;
  var $i251: i64;
  var $p254: ref;
  var $i255: i32;
  var $i256: i64;
  var $p259: ref;
  var $i260: i32;
  var $i261: i64;
  var $p264: ref;
  var $i265: i32;
  var $i266: i32;
  var $i267: i32;
  var $i268: i64;
  var $p271: ref;
  var $i272: i32;
  var $i273: i64;
  var $p276: ref;
  var $i277: i32;
  var $i278: i64;
  var $p281: ref;
  var $i282: i32;
  var $i283: i64;
  var $p286: ref;
  var $i287: i32;
  var $i288: i32;
  var $i289: i32;
  var $i290: i64;
  var $p293: ref;
  var $i294: i32;
  var $i295: i64;
  var $p298: ref;
  var $i299: i32;
  var $i300: i64;
  var $p303: ref;
  var $i304: i32;
  var $i305: i64;
  var $p308: ref;
  var $i309: i32;
  var $i310: i32;
  var $i311: i32;
  var $i312: i64;
  var $p315: ref;
  var $i316: i32;
  var $i317: i64;
  var $p320: ref;
  var $i321: i32;
  var $i322: i64;
  var $p325: ref;
  var $i326: i32;
  var $i327: i64;
  var $p330: ref;
  var $i331: i32;
  var $i332: i32;
  var $i333: i32;
  var $i334: i64;
  var $p337: ref;
  var $i338: i32;
  var $i339: i64;
  var $p342: ref;
  var $i343: i32;
  var $i344: i64;
  var $p347: ref;
  var $i348: i32;
  var $i349: i64;
  var $p352: ref;
  var $i353: i32;
  var $i354: i32;
  var $i355: i32;
  var $i356: i64;
  var $p359: ref;
  var $i360: i32;
  var $i361: i64;
  var $p364: ref;
  var $i365: i32;
  var $i366: i64;
  var $p369: ref;
  var $i370: i32;
  var $i371: i64;
  var $p374: ref;
  var $i375: i32;
  var $i376: i32;
  var $i377: i32;
  var $i378: i64;
  var $p381: ref;
  var $i382: i32;
  var $i383: i64;
  var $p386: ref;
  var $i387: i32;
  var $i388: i64;
  var $p391: ref;
  var $i392: i32;
  var $i393: i64;
  var $p396: ref;
  var $i397: i32;
  var $i398: i32;
  var $i399: i32;
  var $i400: i64;
  var $p403: ref;
  var $i404: i32;
  var $i405: i64;
  var $p408: ref;
  var $i409: i32;
  var $i410: i64;
  var $p413: ref;
  var $i414: i32;
  var $i415: i64;
  var $p418: ref;
  var $i419: i32;
  var $i420: i32;
  var $i421: i32;
  var $i422: i64;
  var $p425: ref;
  var $i426: i32;
  var $i427: i64;
  var $p430: ref;
  var $i431: i32;
  var $i432: i64;
  var $p435: ref;
  var $i436: i32;
  var $i437: i64;
  var $p440: ref;
  var $i441: i32;
  var $i442: i32;
  var $i443: i32;
  var $i444: i64;
  var $p447: ref;
  var $i448: i32;
  var $i449: i64;
  var $p452: ref;
  var $i453: i32;
  var $i454: i64;
  var $p457: ref;
  var $i458: i32;
  var $i459: i64;
  var $p462: ref;
  var $i463: i32;
  var $i464: i32;
  var $i465: i32;
  var $i466: i64;
  var $p469: ref;
  var $i470: i32;
  var $i471: i64;
  var $p474: ref;
  var $i475: i32;
  var $i476: i64;
  var $p479: ref;
  var $i480: i32;
  var $i481: i64;
  var $p484: ref;
  var $i485: i32;
  var $i486: i32;
  var $i487: i32;
  var $i488: i64;
  var $p491: ref;
  var $i492: i32;
  var $i493: i64;
  var $p496: ref;
  var $i497: i32;
  var $i498: i64;
  var $p501: ref;
  var $i502: i32;
  var $i503: i64;
  var $p506: ref;
  var $i507: i32;
  var $i508: i32;
  var $i509: i32;
  var $i510: i64;
  var $p513: ref;
  var $i514: i32;
  var $i515: i64;
  var $p518: ref;
  var $i519: i32;
  var $i520: i64;
  var $p523: ref;
  var $i524: i32;
  var $i525: i64;
  var $p528: ref;
  var $i529: i32;
  var $i530: i32;
  var $i531: i32;
  var $i532: i64;
  var $p535: ref;
  var $i536: i32;
  var $i537: i64;
  var $p540: ref;
  var $i541: i32;
  var $i542: i64;
  var $p545: ref;
  var $i546: i32;
  var $i547: i64;
  var $p550: ref;
  var $i551: i32;
  var $i38: i32;
  var $p554: ref;
  var $p557: ref;
  var $p560: ref;
  var $p563: ref;
  var $i564: i32;
  var $i565: i32;
  var $p568: ref;
  var $p571: ref;
  var $p574: ref;
  var $p577: ref;
  var $i578: i32;
  var $i579: i32;
  var $p582: ref;
  var $p585: ref;
  var $p588: ref;
  var $p591: ref;
  var $i592: i32;
  var $i593: i32;
  var $p596: ref;
  var $p599: ref;
  var $p602: ref;
  var $p605: ref;
  var $i606: i32;
  var $i607: i32;
  var $p610: ref;
  var $p613: ref;
  var $p616: ref;
  var $p619: ref;
  var $i620: i32;
  var $i621: i32;
  var $p624: ref;
  var $p627: ref;
  var $p630: ref;
  var $p633: ref;
  var $i634: i32;
  var $i635: i32;
  var $p638: ref;
  var $p641: ref;
  var $p644: ref;
  var $p647: ref;
  var $i648: i32;
  var $i649: i32;
  var $p652: ref;
  var $p655: ref;
  var $p658: ref;
  var $p661: ref;
  var $i662: i32;
  var $i663: i32;
  var $p666: ref;
  var $p669: ref;
  var $p672: ref;
  var $p675: ref;
  var $i676: i32;
  var $i677: i32;
  var $p680: ref;
  var $p683: ref;
  var $p686: ref;
  var $p689: ref;
  var $i690: i32;
  var $i691: i32;
  var $p694: ref;
  var $p697: ref;
  var $p700: ref;
  var $p703: ref;
  var $i704: i32;
  var $i705: i32;
  var $p708: ref;
  var $p711: ref;
  var $p714: ref;
  var $p717: ref;
  var $i718: i32;
  var $i719: i32;
  var $p722: ref;
  var $p725: ref;
  var $p728: ref;
  var $p731: ref;
  var $i732: i32;
  var $i733: i32;
  var $p736: ref;
  var $p739: ref;
  var $p742: ref;
  var $p745: ref;
  var $i746: i32;
  var $i747: i32;
  var $p750: ref;
  var $p753: ref;
  var $p756: ref;
  var $p759: ref;
  var $i760: i32;
  var $i761: i32;
  var $p764: ref;
  var $p767: ref;
  var $p770: ref;
  var $p773: ref;
  var $i774: i32;
  var $i775: i32;
  var $p778: ref;
  var $p781: ref;
  var $p784: ref;
  var $p787: ref;
  var $i788: i32;
  var $i789: i32;
  var $p792: ref;
  var $p795: ref;
  var $p798: ref;
  var $p801: ref;
  var $i802: i32;
  var $i803: i32;
  var $p806: ref;
  var $p809: ref;
  var $p812: ref;
  var $p815: ref;
  var $i816: i32;
  var $i817: i32;
  var $p820: ref;
  var $p823: ref;
  var $p826: ref;
  var $p829: ref;
  var $i830: i32;
  var $i831: i32;
  var $p834: ref;
  var $p837: ref;
  var $p840: ref;
  var $p843: ref;
  var $i844: i32;
  var $i845: i32;
  var $p848: ref;
  var $p851: ref;
  var $p854: ref;
  var $p857: ref;
  var $i858: i32;
  var $i859: i32;
  var $p862: ref;
  var $p865: ref;
  var $p868: ref;
  var $p871: ref;
  var $i872: i32;
  var $i873: i32;
  var $p876: ref;
  var $p879: ref;
  var $p882: ref;
  var $p885: ref;
  var $i886: i32;
  var $i887: i32;
  var $p890: ref;
  var $p893: ref;
  var $p896: ref;
  var $p899: ref;
  var $i900: i32;
  var $i901: i32;
  var $p904: ref;
  var $p907: ref;
  var $p910: ref;
  var $p913: ref;
  var $i914: i32;
  var $i915: i32;
  var $p918: ref;
  var $p921: ref;
  var $p924: ref;
  var $p927: ref;
  var $i928: i32;
  var $i929: i32;
  var $p932: ref;
  var $p935: ref;
  var $p938: ref;
  var $p941: ref;
  var $i942: i32;
  var $i943: i32;
  var $p946: ref;
  var $p949: ref;
  var $p952: ref;
  var $p955: ref;
  var $i956: i32;
  var $i957: i32;
  var $p960: ref;
  var $p963: ref;
  var $p966: ref;
  var $p969: ref;
  var $i970: i32;
  var $i971: i32;
  var $p974: ref;
  var $p977: ref;
  var $p980: ref;
  var $p983: ref;
  var $i984: i32;
  var $i19: i32;
  var vslice_dummy_var_34: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3, 4096);
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, 256);
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, 1);
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    $i14 := $add.i32($i13, 4096);
    call {:si_unique_call 441} {:cexpr "payload_addr"} boogie_si_record_i32($i14);
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p554 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(1, 12)), $mul.ref(0, 1));
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p554, $i14);
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    $p557 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(1, 12)), $mul.ref(4, 1));
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p557, 256);
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    $p560 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(1, 12)), $mul.ref(8, 1));
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p560, 1);
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    $p563 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(1, 12)), $mul.ref(4, 1));
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    $i564 := $load.i32($M.0, $p563);
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    $i565 := $add.i32($i564, $i14);
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p568 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(2, 12)), $mul.ref(0, 1));
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p568, $i565);
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    $p571 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(2, 12)), $mul.ref(4, 1));
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p571, 256);
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    $p574 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(2, 12)), $mul.ref(8, 1));
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p574, 1);
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    $p577 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(2, 12)), $mul.ref(4, 1));
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    $i578 := $load.i32($M.0, $p577);
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    $i579 := $add.i32($i578, $i565);
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p582 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(3, 12)), $mul.ref(0, 1));
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p582, $i579);
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    $p585 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(3, 12)), $mul.ref(4, 1));
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p585, 256);
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    $p588 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(3, 12)), $mul.ref(8, 1));
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p588, 1);
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    $p591 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(3, 12)), $mul.ref(4, 1));
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    $i592 := $load.i32($M.0, $p591);
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    $i593 := $add.i32($i592, $i579);
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p596 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(4, 12)), $mul.ref(0, 1));
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p596, $i593);
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    $p599 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(4, 12)), $mul.ref(4, 1));
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p599, 256);
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    $p602 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(4, 12)), $mul.ref(8, 1));
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p602, 1);
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    $p605 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(4, 12)), $mul.ref(4, 1));
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    $i606 := $load.i32($M.0, $p605);
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    $i607 := $add.i32($i606, $i593);
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p610 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(5, 12)), $mul.ref(0, 1));
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p610, $i607);
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    $p613 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(5, 12)), $mul.ref(4, 1));
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p613, 256);
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    $p616 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(5, 12)), $mul.ref(8, 1));
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p616, 1);
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    $p619 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(5, 12)), $mul.ref(4, 1));
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    $i620 := $load.i32($M.0, $p619);
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    $i621 := $add.i32($i620, $i607);
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p624 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(6, 12)), $mul.ref(0, 1));
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p624, $i621);
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    $p627 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(6, 12)), $mul.ref(4, 1));
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p627, 256);
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    $p630 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(6, 12)), $mul.ref(8, 1));
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p630, 1);
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    $p633 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(6, 12)), $mul.ref(4, 1));
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    $i634 := $load.i32($M.0, $p633);
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    $i635 := $add.i32($i634, $i621);
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p638 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(7, 12)), $mul.ref(0, 1));
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p638, $i635);
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    $p641 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(7, 12)), $mul.ref(4, 1));
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p641, 256);
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    $p644 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(7, 12)), $mul.ref(8, 1));
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p644, 1);
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    $p647 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(7, 12)), $mul.ref(4, 1));
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    $i648 := $load.i32($M.0, $p647);
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    $i649 := $add.i32($i648, $i635);
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p652 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(8, 12)), $mul.ref(0, 1));
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p652, $i649);
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    $p655 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(8, 12)), $mul.ref(4, 1));
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p655, 256);
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    $p658 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(8, 12)), $mul.ref(8, 1));
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p658, 1);
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    $p661 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(8, 12)), $mul.ref(4, 1));
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    $i662 := $load.i32($M.0, $p661);
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    $i663 := $add.i32($i662, $i649);
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p666 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(9, 12)), $mul.ref(0, 1));
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p666, $i663);
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    $p669 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(9, 12)), $mul.ref(4, 1));
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p669, 256);
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    $p672 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(9, 12)), $mul.ref(8, 1));
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p672, 1);
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    $p675 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(9, 12)), $mul.ref(4, 1));
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    $i676 := $load.i32($M.0, $p675);
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    $i677 := $add.i32($i676, $i663);
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p680 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(10, 12)), $mul.ref(0, 1));
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p680, $i677);
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    $p683 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(10, 12)), $mul.ref(4, 1));
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p683, 256);
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    $p686 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(10, 12)), $mul.ref(8, 1));
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p686, 1);
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    $p689 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(10, 12)), $mul.ref(4, 1));
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    $i690 := $load.i32($M.0, $p689);
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    $i691 := $add.i32($i690, $i677);
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p694 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(11, 12)), $mul.ref(0, 1));
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p694, $i691);
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    $p697 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(11, 12)), $mul.ref(4, 1));
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p697, 256);
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    $p700 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(11, 12)), $mul.ref(8, 1));
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p700, 1);
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    $p703 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(11, 12)), $mul.ref(4, 1));
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    $i704 := $load.i32($M.0, $p703);
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    $i705 := $add.i32($i704, $i691);
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p708 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(12, 12)), $mul.ref(0, 1));
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p708, $i705);
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    $p711 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(12, 12)), $mul.ref(4, 1));
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p711, 256);
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    $p714 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(12, 12)), $mul.ref(8, 1));
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p714, 1);
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    $p717 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(12, 12)), $mul.ref(4, 1));
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    $i718 := $load.i32($M.0, $p717);
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    $i719 := $add.i32($i718, $i705);
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p722 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(13, 12)), $mul.ref(0, 1));
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p722, $i719);
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    $p725 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(13, 12)), $mul.ref(4, 1));
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p725, 256);
    goto corral_source_split_2993;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    $p728 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(13, 12)), $mul.ref(8, 1));
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p728, 1);
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    $p731 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(13, 12)), $mul.ref(4, 1));
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    $i732 := $load.i32($M.0, $p731);
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    $i733 := $add.i32($i732, $i719);
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p736 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(14, 12)), $mul.ref(0, 1));
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p736, $i733);
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    $p739 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(14, 12)), $mul.ref(4, 1));
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p739, 256);
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    $p742 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(14, 12)), $mul.ref(8, 1));
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p742, 1);
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    $p745 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(14, 12)), $mul.ref(4, 1));
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    $i746 := $load.i32($M.0, $p745);
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    $i747 := $add.i32($i746, $i733);
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p750 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(15, 12)), $mul.ref(0, 1));
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p750, $i747);
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    $p753 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(15, 12)), $mul.ref(4, 1));
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p753, 256);
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    $p756 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(15, 12)), $mul.ref(8, 1));
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p756, 1);
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    $p759 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(15, 12)), $mul.ref(4, 1));
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    $i760 := $load.i32($M.0, $p759);
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    $i761 := $add.i32($i760, $i747);
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p764 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(16, 12)), $mul.ref(0, 1));
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p764, $i761);
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    $p767 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(16, 12)), $mul.ref(4, 1));
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p767, 256);
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    $p770 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(16, 12)), $mul.ref(8, 1));
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p770, 1);
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    $p773 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(16, 12)), $mul.ref(4, 1));
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    $i774 := $load.i32($M.0, $p773);
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    $i775 := $add.i32($i774, $i761);
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p778 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(17, 12)), $mul.ref(0, 1));
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p778, $i775);
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    $p781 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(17, 12)), $mul.ref(4, 1));
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p781, 256);
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    $p784 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(17, 12)), $mul.ref(8, 1));
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p784, 1);
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    $p787 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(17, 12)), $mul.ref(4, 1));
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    $i788 := $load.i32($M.0, $p787);
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    $i789 := $add.i32($i788, $i775);
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p792 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(18, 12)), $mul.ref(0, 1));
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p792, $i789);
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    $p795 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(18, 12)), $mul.ref(4, 1));
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p795, 256);
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    $p798 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(18, 12)), $mul.ref(8, 1));
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p798, 1);
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    $p801 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(18, 12)), $mul.ref(4, 1));
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    $i802 := $load.i32($M.0, $p801);
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    $i803 := $add.i32($i802, $i789);
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p806 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(19, 12)), $mul.ref(0, 1));
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p806, $i803);
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    $p809 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(19, 12)), $mul.ref(4, 1));
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p809, 256);
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    $p812 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(19, 12)), $mul.ref(8, 1));
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p812, 1);
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    $p815 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(19, 12)), $mul.ref(4, 1));
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    $i816 := $load.i32($M.0, $p815);
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    $i817 := $add.i32($i816, $i803);
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $p820 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(20, 12)), $mul.ref(0, 1));
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p820, $i817);
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    $p823 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(20, 12)), $mul.ref(4, 1));
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p823, 256);
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    $p826 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(20, 12)), $mul.ref(8, 1));
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p826, 1);
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    $p829 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(20, 12)), $mul.ref(4, 1));
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    $i830 := $load.i32($M.0, $p829);
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    $i831 := $add.i32($i830, $i817);
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $p834 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(21, 12)), $mul.ref(0, 1));
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p834, $i831);
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    $p837 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(21, 12)), $mul.ref(4, 1));
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p837, 256);
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    $p840 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(21, 12)), $mul.ref(8, 1));
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p840, 1);
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    $p843 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(21, 12)), $mul.ref(4, 1));
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    $i844 := $load.i32($M.0, $p843);
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    $i845 := $add.i32($i844, $i831);
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $p848 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(22, 12)), $mul.ref(0, 1));
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p848, $i845);
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    $p851 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(22, 12)), $mul.ref(4, 1));
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p851, 256);
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    $p854 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(22, 12)), $mul.ref(8, 1));
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p854, 1);
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    $p857 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(22, 12)), $mul.ref(4, 1));
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    $i858 := $load.i32($M.0, $p857);
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    $i859 := $add.i32($i858, $i845);
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $p862 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(23, 12)), $mul.ref(0, 1));
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p862, $i859);
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    $p865 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(23, 12)), $mul.ref(4, 1));
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p865, 256);
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    $p868 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(23, 12)), $mul.ref(8, 1));
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p868, 1);
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    $p871 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(23, 12)), $mul.ref(4, 1));
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    $i872 := $load.i32($M.0, $p871);
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    $i873 := $add.i32($i872, $i859);
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $p876 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(24, 12)), $mul.ref(0, 1));
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p876, $i873);
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    $p879 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(24, 12)), $mul.ref(4, 1));
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p879, 256);
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    $p882 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(24, 12)), $mul.ref(8, 1));
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p882, 1);
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    $p885 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(24, 12)), $mul.ref(4, 1));
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    $i886 := $load.i32($M.0, $p885);
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    $i887 := $add.i32($i886, $i873);
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $p890 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(25, 12)), $mul.ref(0, 1));
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p890, $i887);
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    $p893 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(25, 12)), $mul.ref(4, 1));
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p893, 256);
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    $p896 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(25, 12)), $mul.ref(8, 1));
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p896, 1);
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    $p899 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(25, 12)), $mul.ref(4, 1));
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    $i900 := $load.i32($M.0, $p899);
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    $i901 := $add.i32($i900, $i887);
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $p904 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(26, 12)), $mul.ref(0, 1));
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p904, $i901);
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    $p907 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(26, 12)), $mul.ref(4, 1));
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p907, 256);
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    $p910 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(26, 12)), $mul.ref(8, 1));
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p910, 1);
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    $p913 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(26, 12)), $mul.ref(4, 1));
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    $i914 := $load.i32($M.0, $p913);
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    $i915 := $add.i32($i914, $i901);
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $p918 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(27, 12)), $mul.ref(0, 1));
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p918, $i915);
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    $p921 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(27, 12)), $mul.ref(4, 1));
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p921, 256);
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    $p924 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(27, 12)), $mul.ref(8, 1));
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p924, 1);
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    $p927 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(27, 12)), $mul.ref(4, 1));
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    $i928 := $load.i32($M.0, $p927);
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    $i929 := $add.i32($i928, $i915);
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $p932 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(28, 12)), $mul.ref(0, 1));
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p932, $i929);
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    $p935 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(28, 12)), $mul.ref(4, 1));
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p935, 256);
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    $p938 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(28, 12)), $mul.ref(8, 1));
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p938, 1);
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    $p941 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(28, 12)), $mul.ref(4, 1));
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    $i942 := $load.i32($M.0, $p941);
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    $i943 := $add.i32($i942, $i929);
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $p946 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(29, 12)), $mul.ref(0, 1));
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p946, $i943);
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    $p949 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(29, 12)), $mul.ref(4, 1));
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p949, 256);
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    $p952 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(29, 12)), $mul.ref(8, 1));
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p952, 1);
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    $p955 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(29, 12)), $mul.ref(4, 1));
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    $i956 := $load.i32($M.0, $p955);
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    $i957 := $add.i32($i956, $i943);
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $p960 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(30, 12)), $mul.ref(0, 1));
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p960, $i957);
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    $p963 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(30, 12)), $mul.ref(4, 1));
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p963, 256);
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    $p966 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(30, 12)), $mul.ref(8, 1));
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p966, 1);
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    $p969 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(30, 12)), $mul.ref(4, 1));
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    $i970 := $load.i32($M.0, $p969);
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    $i971 := $add.i32($i970, $i957);
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $p974 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(31, 12)), $mul.ref(0, 1));
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p974, $i971);
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    $p977 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(31, 12)), $mul.ref(4, 1));
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p977, 256);
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    $p980 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(31, 12)), $mul.ref(8, 1));
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p980, 1);
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    $p983 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(31, 12)), $mul.ref(4, 1));
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    $i984 := $load.i32($M.0, $p983);
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    $i19 := $add.i32($i984, $i971);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64(32);
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i15, 12)), $mul.ref(0, 1));
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, $i19);
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64(32);
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i20, 12)), $mul.ref(4, 1));
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, 1024);
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    $i24 := $sext.i32.i64(32);
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i24, 12)), $mul.ref(8, 1));
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, 1);
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64(32);
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i28, 12)), $mul.ref(4, 1));
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    $i33 := $add.i32($i32, $i19);
    call {:si_unique_call 442} {:cexpr "payload_addr"} boogie_si_record_i32($i33);
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i135 := $add.i32(32, 1);
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    $i136 := $sext.i32.i64($i135);
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i136, 12)), $mul.ref(0, 1));
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p139, $i33);
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    $i140 := $add.i32(32, 1);
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    $i141 := $sext.i32.i64($i140);
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i141, 12)), $mul.ref(4, 1));
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p144, 1024);
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    $i145 := $add.i32(32, 1);
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    $i146 := $sext.i32.i64($i145);
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i146, 12)), $mul.ref(8, 1));
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p149, 1);
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    $i150 := $add.i32(32, 1);
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    $i151 := $sext.i32.i64($i150);
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i151, 12)), $mul.ref(4, 1));
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    $i155 := $load.i32($M.0, $p154);
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    $i156 := $add.i32($i155, $i33);
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i157 := $add.i32(32, 2);
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    $i158 := $sext.i32.i64($i157);
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i158, 12)), $mul.ref(0, 1));
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p161, $i156);
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    $i162 := $add.i32(32, 2);
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    $i163 := $sext.i32.i64($i162);
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i163, 12)), $mul.ref(4, 1));
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p166, 1024);
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    $i167 := $add.i32(32, 2);
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    $i168 := $sext.i32.i64($i167);
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i168, 12)), $mul.ref(8, 1));
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p171, 1);
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    $i172 := $add.i32(32, 2);
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    $i173 := $sext.i32.i64($i172);
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i173, 12)), $mul.ref(4, 1));
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    $i177 := $load.i32($M.0, $p176);
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    $i178 := $add.i32($i177, $i156);
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i179 := $add.i32(32, 3);
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    $i180 := $sext.i32.i64($i179);
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i180, 12)), $mul.ref(0, 1));
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p183, $i178);
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    $i184 := $add.i32(32, 3);
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    $i185 := $sext.i32.i64($i184);
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i185, 12)), $mul.ref(4, 1));
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p188, 1024);
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    $i189 := $add.i32(32, 3);
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    $i190 := $sext.i32.i64($i189);
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i190, 12)), $mul.ref(8, 1));
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p193, 1);
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    $i194 := $add.i32(32, 3);
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    $i195 := $sext.i32.i64($i194);
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i195, 12)), $mul.ref(4, 1));
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    $i199 := $load.i32($M.0, $p198);
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    $i200 := $add.i32($i199, $i178);
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i201 := $add.i32(32, 4);
    goto corral_source_split_2593;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    $i202 := $sext.i32.i64($i201);
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i202, 12)), $mul.ref(0, 1));
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p205, $i200);
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    $i206 := $add.i32(32, 4);
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    $i207 := $sext.i32.i64($i206);
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i207, 12)), $mul.ref(4, 1));
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p210, 1024);
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    $i211 := $add.i32(32, 4);
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    $i212 := $sext.i32.i64($i211);
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i212, 12)), $mul.ref(8, 1));
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p215, 1);
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    $i216 := $add.i32(32, 4);
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    $i217 := $sext.i32.i64($i216);
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i217, 12)), $mul.ref(4, 1));
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    $i221 := $load.i32($M.0, $p220);
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    $i222 := $add.i32($i221, $i200);
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i223 := $add.i32(32, 5);
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    $i224 := $sext.i32.i64($i223);
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    $p227 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i224, 12)), $mul.ref(0, 1));
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p227, $i222);
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    $i228 := $add.i32(32, 5);
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    $i229 := $sext.i32.i64($i228);
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i229, 12)), $mul.ref(4, 1));
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p232, 1024);
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    $i233 := $add.i32(32, 5);
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    $i234 := $sext.i32.i64($i233);
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i234, 12)), $mul.ref(8, 1));
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p237, 1);
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    $i238 := $add.i32(32, 5);
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    $i239 := $sext.i32.i64($i238);
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i239, 12)), $mul.ref(4, 1));
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    $i243 := $load.i32($M.0, $p242);
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    $i244 := $add.i32($i243, $i222);
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i245 := $add.i32(32, 6);
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    $i246 := $sext.i32.i64($i245);
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i246, 12)), $mul.ref(0, 1));
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p249, $i244);
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    $i250 := $add.i32(32, 6);
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    $i251 := $sext.i32.i64($i250);
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    $p254 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i251, 12)), $mul.ref(4, 1));
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p254, 1024);
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    $i255 := $add.i32(32, 6);
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    $i256 := $sext.i32.i64($i255);
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    $p259 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i256, 12)), $mul.ref(8, 1));
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p259, 1);
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    $i260 := $add.i32(32, 6);
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    $i261 := $sext.i32.i64($i260);
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    $p264 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i261, 12)), $mul.ref(4, 1));
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    $i265 := $load.i32($M.0, $p264);
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    $i266 := $add.i32($i265, $i244);
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i267 := $add.i32(32, 7);
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    $i268 := $sext.i32.i64($i267);
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    $p271 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i268, 12)), $mul.ref(0, 1));
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p271, $i266);
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    $i272 := $add.i32(32, 7);
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    $i273 := $sext.i32.i64($i272);
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    $p276 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i273, 12)), $mul.ref(4, 1));
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p276, 1024);
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    $i277 := $add.i32(32, 7);
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    $i278 := $sext.i32.i64($i277);
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    $p281 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i278, 12)), $mul.ref(8, 1));
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p281, 1);
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    $i282 := $add.i32(32, 7);
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    $i283 := $sext.i32.i64($i282);
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    $p286 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i283, 12)), $mul.ref(4, 1));
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    $i287 := $load.i32($M.0, $p286);
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    $i288 := $add.i32($i287, $i266);
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i289 := $add.i32(32, 8);
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    $i290 := $sext.i32.i64($i289);
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    $p293 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i290, 12)), $mul.ref(0, 1));
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p293, $i288);
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    $i294 := $add.i32(32, 8);
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    $i295 := $sext.i32.i64($i294);
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    $p298 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i295, 12)), $mul.ref(4, 1));
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p298, 1024);
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    $i299 := $add.i32(32, 8);
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    $i300 := $sext.i32.i64($i299);
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    $p303 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i300, 12)), $mul.ref(8, 1));
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p303, 1);
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    $i304 := $add.i32(32, 8);
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    $i305 := $sext.i32.i64($i304);
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    $p308 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i305, 12)), $mul.ref(4, 1));
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    $i309 := $load.i32($M.0, $p308);
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    $i310 := $add.i32($i309, $i288);
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i311 := $add.i32(32, 9);
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    $i312 := $sext.i32.i64($i311);
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    $p315 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i312, 12)), $mul.ref(0, 1));
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p315, $i310);
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    $i316 := $add.i32(32, 9);
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    $i317 := $sext.i32.i64($i316);
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    $p320 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i317, 12)), $mul.ref(4, 1));
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p320, 1024);
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    $i321 := $add.i32(32, 9);
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    $i322 := $sext.i32.i64($i321);
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    $p325 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i322, 12)), $mul.ref(8, 1));
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p325, 1);
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    $i326 := $add.i32(32, 9);
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    $i327 := $sext.i32.i64($i326);
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    $p330 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i327, 12)), $mul.ref(4, 1));
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    $i331 := $load.i32($M.0, $p330);
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    $i332 := $add.i32($i331, $i310);
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i333 := $add.i32(32, 10);
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    $i334 := $sext.i32.i64($i333);
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    $p337 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i334, 12)), $mul.ref(0, 1));
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p337, $i332);
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    $i338 := $add.i32(32, 10);
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    $i339 := $sext.i32.i64($i338);
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    $p342 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i339, 12)), $mul.ref(4, 1));
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p342, 1024);
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    $i343 := $add.i32(32, 10);
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    $i344 := $sext.i32.i64($i343);
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    $p347 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i344, 12)), $mul.ref(8, 1));
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p347, 1);
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    $i348 := $add.i32(32, 10);
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    $i349 := $sext.i32.i64($i348);
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    $p352 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i349, 12)), $mul.ref(4, 1));
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    $i353 := $load.i32($M.0, $p352);
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    $i354 := $add.i32($i353, $i332);
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i355 := $add.i32(32, 11);
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    $i356 := $sext.i32.i64($i355);
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    $p359 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i356, 12)), $mul.ref(0, 1));
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p359, $i354);
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    $i360 := $add.i32(32, 11);
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    $i361 := $sext.i32.i64($i360);
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    $p364 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i361, 12)), $mul.ref(4, 1));
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p364, 1024);
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    $i365 := $add.i32(32, 11);
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    $i366 := $sext.i32.i64($i365);
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    $p369 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i366, 12)), $mul.ref(8, 1));
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p369, 1);
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    $i370 := $add.i32(32, 11);
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    $i371 := $sext.i32.i64($i370);
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    $p374 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i371, 12)), $mul.ref(4, 1));
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    $i375 := $load.i32($M.0, $p374);
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    $i376 := $add.i32($i375, $i354);
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i377 := $add.i32(32, 12);
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    $i378 := $sext.i32.i64($i377);
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    $p381 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i378, 12)), $mul.ref(0, 1));
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p381, $i376);
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    $i382 := $add.i32(32, 12);
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    $i383 := $sext.i32.i64($i382);
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    $p386 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i383, 12)), $mul.ref(4, 1));
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p386, 1024);
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    $i387 := $add.i32(32, 12);
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    $i388 := $sext.i32.i64($i387);
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    $p391 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i388, 12)), $mul.ref(8, 1));
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p391, 1);
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    $i392 := $add.i32(32, 12);
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    $i393 := $sext.i32.i64($i392);
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    $p396 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i393, 12)), $mul.ref(4, 1));
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    $i397 := $load.i32($M.0, $p396);
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    $i398 := $add.i32($i397, $i376);
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i399 := $add.i32(32, 13);
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    $i400 := $sext.i32.i64($i399);
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    $p403 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i400, 12)), $mul.ref(0, 1));
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p403, $i398);
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    $i404 := $add.i32(32, 13);
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    $i405 := $sext.i32.i64($i404);
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    $p408 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i405, 12)), $mul.ref(4, 1));
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p408, 1024);
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    $i409 := $add.i32(32, 13);
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    $i410 := $sext.i32.i64($i409);
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    $p413 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i410, 12)), $mul.ref(8, 1));
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p413, 1);
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    $i414 := $add.i32(32, 13);
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    $i415 := $sext.i32.i64($i414);
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    $p418 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i415, 12)), $mul.ref(4, 1));
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    $i419 := $load.i32($M.0, $p418);
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    $i420 := $add.i32($i419, $i398);
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i421 := $add.i32(32, 14);
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    $i422 := $sext.i32.i64($i421);
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    $p425 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i422, 12)), $mul.ref(0, 1));
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p425, $i420);
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    $i426 := $add.i32(32, 14);
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    $i427 := $sext.i32.i64($i426);
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    $p430 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i427, 12)), $mul.ref(4, 1));
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p430, 1024);
    goto corral_source_split_2780;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    $i431 := $add.i32(32, 14);
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    $i432 := $sext.i32.i64($i431);
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    $p435 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i432, 12)), $mul.ref(8, 1));
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p435, 1);
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    $i436 := $add.i32(32, 14);
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    $i437 := $sext.i32.i64($i436);
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    $p440 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i437, 12)), $mul.ref(4, 1));
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    $i441 := $load.i32($M.0, $p440);
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    $i442 := $add.i32($i441, $i420);
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i443 := $add.i32(32, 15);
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    $i444 := $sext.i32.i64($i443);
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    $p447 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i444, 12)), $mul.ref(0, 1));
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p447, $i442);
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    $i448 := $add.i32(32, 15);
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    $i449 := $sext.i32.i64($i448);
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    $p452 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i449, 12)), $mul.ref(4, 1));
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p452, 1024);
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    $i453 := $add.i32(32, 15);
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    $i454 := $sext.i32.i64($i453);
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    $p457 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i454, 12)), $mul.ref(8, 1));
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p457, 1);
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    $i458 := $add.i32(32, 15);
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    $i459 := $sext.i32.i64($i458);
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    $p462 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i459, 12)), $mul.ref(4, 1));
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    $i463 := $load.i32($M.0, $p462);
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    $i464 := $add.i32($i463, $i442);
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i465 := $add.i32(32, 16);
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    $i466 := $sext.i32.i64($i465);
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    $p469 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i466, 12)), $mul.ref(0, 1));
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p469, $i464);
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    $i470 := $add.i32(32, 16);
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    $i471 := $sext.i32.i64($i470);
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    $p474 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i471, 12)), $mul.ref(4, 1));
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p474, 1024);
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    $i475 := $add.i32(32, 16);
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    $i476 := $sext.i32.i64($i475);
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    $p479 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i476, 12)), $mul.ref(8, 1));
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p479, 1);
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    $i480 := $add.i32(32, 16);
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    $i481 := $sext.i32.i64($i480);
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    $p484 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i481, 12)), $mul.ref(4, 1));
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    $i485 := $load.i32($M.0, $p484);
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    $i486 := $add.i32($i485, $i464);
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i487 := $add.i32(32, 17);
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    $i488 := $sext.i32.i64($i487);
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    $p491 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i488, 12)), $mul.ref(0, 1));
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p491, $i486);
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    $i492 := $add.i32(32, 17);
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    $i493 := $sext.i32.i64($i492);
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    $p496 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i493, 12)), $mul.ref(4, 1));
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p496, 1024);
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    $i497 := $add.i32(32, 17);
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    $i498 := $sext.i32.i64($i497);
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    $p501 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i498, 12)), $mul.ref(8, 1));
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p501, 1);
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    $i502 := $add.i32(32, 17);
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    $i503 := $sext.i32.i64($i502);
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    $p506 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i503, 12)), $mul.ref(4, 1));
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    $i507 := $load.i32($M.0, $p506);
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    $i508 := $add.i32($i507, $i486);
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i509 := $add.i32(32, 18);
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    $i510 := $sext.i32.i64($i509);
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    $p513 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i510, 12)), $mul.ref(0, 1));
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p513, $i508);
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    $i514 := $add.i32(32, 18);
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    $i515 := $sext.i32.i64($i514);
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    $p518 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i515, 12)), $mul.ref(4, 1));
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p518, 1024);
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    $i519 := $add.i32(32, 18);
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    $i520 := $sext.i32.i64($i519);
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    $p523 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i520, 12)), $mul.ref(8, 1));
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p523, 1);
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    $i524 := $add.i32(32, 18);
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    $i525 := $sext.i32.i64($i524);
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    $p528 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i525, 12)), $mul.ref(4, 1));
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    $i529 := $load.i32($M.0, $p528);
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    $i530 := $add.i32($i529, $i508);
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i531 := $add.i32(32, 19);
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    $i532 := $sext.i32.i64($i531);
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    $p535 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i532, 12)), $mul.ref(0, 1));
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p535, $i530);
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    $i536 := $add.i32(32, 19);
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    $i537 := $sext.i32.i64($i536);
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    $p540 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i537, 12)), $mul.ref(4, 1));
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p540, 1024);
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    $i541 := $add.i32(32, 19);
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    $i542 := $sext.i32.i64($i541);
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    $p545 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i542, 12)), $mul.ref(8, 1));
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p545, 1);
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    $i546 := $add.i32(32, 19);
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    $i547 := $sext.i32.i64($i546);
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    $p550 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i547, 12)), $mul.ref(4, 1));
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    $i551 := $load.i32($M.0, $p550);
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    $i38 := $add.i32($i551, $i530);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i34 := $sext.i32.i64(20);
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i34, 12)), $mul.ref(0, 1));
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p37, $i38);
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    $i39 := $sext.i32.i64(20);
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i39, 12)), $mul.ref(4, 1));
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p42, 8192);
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    $i43 := $sext.i32.i64(20);
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i43, 12)), $mul.ref(8, 1));
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p46, 1);
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    $i47 := $sext.i32.i64(20);
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i47, 12)), $mul.ref(4, 1));
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p50);
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    $i52 := $add.i32($i51, $i38);
    call {:si_unique_call 443} {:cexpr "payload_addr"} boogie_si_record_i32($i52);
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i70 := $add.i32(20, 1);
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    $i71 := $sext.i32.i64($i70);
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i71, 12)), $mul.ref(0, 1));
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p74, $i52);
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    $i75 := $add.i32(20, 1);
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    $i76 := $sext.i32.i64($i75);
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i76, 12)), $mul.ref(4, 1));
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p79, 8192);
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    $i80 := $add.i32(20, 1);
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    $i81 := $sext.i32.i64($i80);
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i81, 12)), $mul.ref(8, 1));
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p84, 1);
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    $i85 := $add.i32(20, 1);
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    $i86 := $sext.i32.i64($i85);
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i86, 12)), $mul.ref(4, 1));
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    $i90 := $load.i32($M.0, $p89);
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    $i91 := $add.i32($i90, $i52);
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i92 := $add.i32(20, 2);
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    $i93 := $sext.i32.i64($i92);
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i93, 12)), $mul.ref(0, 1));
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p96, $i91);
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    $i97 := $add.i32(20, 2);
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    $i98 := $sext.i32.i64($i97);
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i98, 12)), $mul.ref(4, 1));
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p101, 8192);
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    $i102 := $add.i32(20, 2);
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    $i103 := $sext.i32.i64($i102);
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i103, 12)), $mul.ref(8, 1));
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p106, 1);
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    $i107 := $add.i32(20, 2);
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    $i108 := $sext.i32.i64($i107);
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i108, 12)), $mul.ref(4, 1));
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    $i112 := $load.i32($M.0, $p111);
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    $i113 := $add.i32($i112, $i91);
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i114 := $add.i32(20, 3);
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    $i115 := $sext.i32.i64($i114);
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i115, 12)), $mul.ref(0, 1));
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p118, $i113);
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    $i119 := $add.i32(20, 3);
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    $i120 := $sext.i32.i64($i119);
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i120, 12)), $mul.ref(4, 1));
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p123, 8192);
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    $i124 := $add.i32(20, 3);
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    $i125 := $sext.i32.i64($i124);
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i125, 12)), $mul.ref(8, 1));
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p128, 1);
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    $i129 := $add.i32(20, 3);
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    $i130 := $sext.i32.i64($i129);
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i130, 12)), $mul.ref(4, 1));
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    $i134 := $load.i32($M.0, $p133);
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    $i58 := $add.i32($i134, $i113);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.0, $p55);
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    $i57 := $sub.i32($i58, $i56);
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    $i59 := $ugt.i32($i57, 61440);
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    $i60 := $zext.i1.i32($i59);
    call {:si_unique_call 444} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i60);
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    $i61 := $ne.i32($i60, 0);
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    $i62 := $zext.i1.i32($i61);
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    $i63 := $sext.i32.i64($i62);
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 445} $i64 := ldv__builtin_expect($i63, 0);
    call {:si_unique_call 446} {:cexpr "tmp"} boogie_si_record_i64($i64);
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    $i65 := $ne.i64($i64, 0);
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i66 := $ne.i32($i60, 0);
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    $i67 := $zext.i1.i32($i66);
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    $i68 := $sext.i32.i64($i67);
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} vslice_dummy_var_34 := ldv__builtin_expect($i68, 0);
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    return;

  $bb13:
    assume $i65 == 1;
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 447} warn_slowpath_null(.str.29, 332);
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    goto $bb15;
}



const resource_size: ref;

axiom resource_size == $sub.ref(0, 336967);

procedure resource_size($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation resource_size($p0: ref) returns ($r: i64)
{
  var $p1: ref;
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $i6: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.0, $p1);
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    $i5 := $sub.i64($i2, $i4);
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    $i6 := $add.i64($i5, 1);
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const usb_add_hcd: ref;

axiom usb_add_hcd == $sub.ref(0, 337999);

procedure usb_add_hcd($p0: ref, $i1: i32, $i2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation usb_add_hcd($p0: ref, $i1: i32, $i2: i64) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 449} {:cexpr "usb_add_hcd:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 450} {:cexpr "usb_add_hcd:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 1} true;
    call {:si_unique_call 451} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 452} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const device_wakeup_enable: ref;

axiom device_wakeup_enable == $sub.ref(0, 339031);

procedure device_wakeup_enable($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation device_wakeup_enable($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 1} true;
    call {:si_unique_call 453} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 454} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const warn_slowpath_null: ref;

axiom warn_slowpath_null == $sub.ref(0, 340063);

procedure warn_slowpath_null($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation warn_slowpath_null($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 455} {:cexpr "warn_slowpath_null:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 341095);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 1} true;
    call {:si_unique_call 456} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 457} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const gpiod_set_value_cansleep: ref;

axiom gpiod_set_value_cansleep == $sub.ref(0, 342127);

procedure gpiod_set_value_cansleep($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation gpiod_set_value_cansleep($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 458} {:cexpr "gpiod_set_value_cansleep:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    return;
}



const __const_udelay: ref;

axiom __const_udelay == $sub.ref(0, 343159);

procedure __const_udelay($i0: i64);
  free requires assertsPassed;



implementation __const_udelay($i0: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 459} {:cexpr "__const_udelay:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    return;
}



const msleep: ref;

axiom msleep == $sub.ref(0, 344191);

procedure msleep($i0: i32);
  free requires assertsPassed;



implementation msleep($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 460} {:cexpr "msleep:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    return;
}



const _dev_info: ref;

axiom _dev_info == $sub.ref(0, 345223);

procedure _dev_info.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    return;
}



procedure _dev_info.ref.ref.i32($p0: ref, $p1: ref, p.2: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref.i32($p0: ref, $p1: ref, p.2: i32)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    return;
}



procedure _dev_info.ref.ref.i32.ref($p0: ref, $p1: ref, p.2: i32, p.3: ref);
  free requires assertsPassed;



implementation _dev_info.ref.ref.i32.ref($p0: ref, $p1: ref, p.2: i32, p.3: ref)
{

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    return;
}



const ldv_ptr_err: ref;

axiom ldv_ptr_err == $sub.ref(0, 346255);

procedure ldv_ptr_err($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation ldv_ptr_err($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    $i2 := $sub.i64(2012, $i1);
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_is_err: ref;

axiom ldv_is_err == $sub.ref(0, 347287);

procedure ldv_is_err($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation ldv_is_err($p0: ref) returns ($r: i1)
{
  var $i1: i64;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 2012);
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const devm_kmalloc: ref;

axiom devm_kmalloc == $sub.ref(0, 348319);

procedure devm_kmalloc($p0: ref, $i1: i64, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation devm_kmalloc($p0: ref, $i1: i64, $i2: i32) returns ($r: ref)
{
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 461} {:cexpr "devm_kmalloc:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 462} {:cexpr "devm_kmalloc:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} $p3 := external_alloc();
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const of_find_property: ref;

axiom of_find_property == $sub.ref(0, 349351);

procedure of_find_property($p0: ref, $p1: ref, $p2: ref) returns ($r: ref);
  free requires assertsPassed;



implementation of_find_property($p0: ref, $p1: ref, $p2: ref) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 464} $p3 := external_alloc();
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const of_property_read_u32_array: ref;

axiom of_property_read_u32_array == $sub.ref(0, 350383);

procedure of_property_read_u32_array($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i32);
  free requires assertsPassed;



implementation of_property_read_u32_array($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 465} {:cexpr "of_property_read_u32_array:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 1} true;
    call {:si_unique_call 466} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 467} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const isp1761_pci_probe: ref;

axiom isp1761_pci_probe == $sub.ref(0, 351415);

procedure isp1761_pci_probe($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.32, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.30, $M.2, $M.4, $M.6, $M.8, $CurrAddr, $M.38, $M.36, $M.40, $M.23, $M.22, $M.25, $M.24, $M.27, $M.26, $M.29, $M.28, $M.3, $M.5, $M.7, $M.9, assertsPassed;



implementation isp1761_pci_probe($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $i10: i32;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1580, 1));
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 0);
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} $i6 := pci_enable_device($p0);
    call {:si_unique_call 469} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i6, 0);
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 470} $i8 := isp1761_pci_init($p0);
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    call {:si_unique_call 471} {:cexpr "ret"} boogie_si_record_i32($i8);
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i8, 0);
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 473} pci_set_master($p0);
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1)), $mul.ref(1160, 1));
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p12, $0.ref);
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1584, 1));
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p14, $mul.ref(3, 56));
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1580, 1));
    goto corral_source_split_3256;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 474} $i19 := isp1760_register($p15, $i17, 0, $p18, 0);
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    call {:si_unique_call 475} {:cexpr "ret"} boogie_si_record_i32($i19);
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i19, 0);
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb12:
    assume $i20 == 1;
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    $i10 := $i19;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 472} pci_disable_device($p0);
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    $i5 := $i10;
    goto $bb3;

  SeqInstr_52:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i9 == 1;
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    $i10 := $i8;
    goto $bb10;

  SeqInstr_49:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i7 == 1;
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 19);
    goto $bb3;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 19);
    goto $bb3;
}



const isp1761_pci_remove: ref;

axiom isp1761_pci_remove == $sub.ref(0, 352447);

procedure isp1761_pci_remove($p0: ref);
  free requires assertsPassed;
  modifies $M.2, $M.4, $M.6, $M.8;



implementation isp1761_pci_remove($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 476} isp1760_unregister($p1);
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 477} pci_disable_device($p0);
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    return;
}



const isp1761_pci_shutdown: ref;

axiom isp1761_pci_shutdown == $sub.ref(0, 353479);

procedure isp1761_pci_shutdown($p0: ref);
  free requires assertsPassed;



implementation isp1761_pci_shutdown($p0: ref)
{
  var vslice_dummy_var_35: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 478} vslice_dummy_var_35 := printk.ref(.str.25);
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    return;
}



const pci_disable_device: ref;

axiom pci_disable_device == $sub.ref(0, 354511);

procedure pci_disable_device($p0: ref);
  free requires assertsPassed;



implementation pci_disable_device($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    return;
}



const pci_enable_device: ref;

axiom pci_enable_device == $sub.ref(0, 355543);

procedure pci_enable_device($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_enable_device($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 1} true;
    call {:si_unique_call 479} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 480} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const isp1761_pci_init: ref;

axiom isp1761_pci_init == $sub.ref(0, 356575);

procedure isp1761_pci_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.0, $M.32, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.30, $CurrAddr, $M.38, $M.36, $M.40, $M.23, $M.22, $M.25, $M.24, $M.27, $M.26, $M.29, $M.28, $M.2, $M.4, $M.6, $M.8, $M.3, $M.5, $M.7, $M.9, assertsPassed;



implementation isp1761_pci_init($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p5: ref;
  var $i6: i64;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p14: ref;
  var $i15: i64;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p23: ref;
  var $i24: i64;
  var $p27: ref;
  var $i28: i64;
  var $i29: i64;
  var $i30: i64;
  var $i31: i64;
  var $i32: i1;
  var $p35: ref;
  var $i36: i64;
  var $i37: i1;
  var $p39: ref;
  var $i40: i64;
  var $i41: i1;
  var $i44: i8;
  var $i45: i32;
  var $i46: i1;
  var $i48: i8;
  var $i49: i32;
  var $i50: i1;
  var $i51: i8;
  var $i52: i32;
  var $i53: i8;
  var $i54: i32;
  var $i55: i1;
  var $i56: i8;
  var $i57: i32;
  var $i58: i8;
  var $p61: ref;
  var $p62: ref;
  var $i63: i32;
  var $i64: i32;
  var $i65: i32;
  var $i66: i1;
  var $i67: i1;
  var $i68: i1;
  var $i60: i32;
  var $i69: i32;
  var $i70: i1;
  var $p71: ref;
  var $p74: ref;
  var $i75: i64;
  var $p78: ref;
  var $i79: i64;
  var $i80: i1;
  var $p83: ref;
  var $i84: i64;
  var $p87: ref;
  var $i88: i64;
  var $i89: i1;
  var $p92: ref;
  var $i93: i64;
  var $p96: ref;
  var $i97: i64;
  var $i98: i64;
  var $i99: i64;
  var $i100: i64;
  var $p101: ref;
  var $i102: i64;
  var $i103: i1;
  var $p105: ref;
  var $i106: i64;
  var $i107: i1;
  var $p109: ref;
  var $i110: i32;
  var $i111: i32;
  var $p112: ref;
  var $i34: i32;
  var vslice_dummy_var_36: i32;
  var vslice_dummy_var_37: i32;
  var vslice_dummy_var_38: i32;
  var vslice_dummy_var_39: i32;
  var vslice_dummy_var_40: i32;
  var vslice_dummy_var_41: i32;
  var vslice_dummy_var_42: i32;
  var vslice_dummy_var_43: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 481} $p1 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 482} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(3, 56)), $mul.ref(0, 1));
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    $i6 := $load.i64($M.0, $p5);
    call {:si_unique_call 483} {:cexpr "mem_start"} boogie_si_record_i64($i6);
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(3, 56)), $mul.ref(0, 1));
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    $i10 := $load.i64($M.0, $p9);
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i11 == 1);
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(3, 56)), $mul.ref(8, 1));
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    $i15 := $load.i64($M.0, $p14);
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(3, 56)), $mul.ref(0, 1));
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    $i19 := $load.i64($M.0, $p18);
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i15, $i19);
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i20 == 1);
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    $i31 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    $i32 := $ule.i64($i31, 65534);
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} $p35 := __request_region(iomem_resource, $i6, $i31, .str.18, 0);
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p35);
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    $i37 := $eq.i64($i36, 0);
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 487} $p39 := ioremap_nocache($i6, $i31);
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p39);
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    $i41 := $eq.i64($i40, 0);
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 490} vslice_dummy_var_39 := pci_read_config_byte($p0, 13, $p1);
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.31, $p1);
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i44);
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i60 := 20;
    goto $bb26;

  $bb26:
    call $p61, $p62, $i63, $i64, $i65, $i66, $i67, $i68, $i60, $i69 := isp1761_pci_init_loop_$bb26($p39, $p61, $p62, $i63, $i64, $i65, $i66, $i67, $i68, $i60, $i69);
    goto $bb26_last;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($p39, $mul.ref(776, 1));
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 493} writel(64206, $p61);
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} __const_udelay(429500);
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($p39, $mul.ref(776, 1));
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 495} $i63 := readl($p62);
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    call {:si_unique_call 496} {:cexpr "tmp___1"} boogie_si_record_i32($i63);
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    $i64 := $and.i32($i63, 65535);
    call {:si_unique_call 497} {:cexpr "reg_data"} boogie_si_record_i32($i64);
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    $i65 := $sub.i32($i60, 1);
    call {:si_unique_call 498} {:cexpr "retry_count"} boogie_si_record_i32($i65);
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    $i66 := $ne.i32($i64, 64206);
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    $i67 := $ne.i32($i65, 0);
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    $i68 := $and.i1($i66, $i67);
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    $i69 := $i64;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} iounmap($p39);
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} __release_region(iomem_resource, $i6, $i31);
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    $i70 := $ne.i32($i69, 64206);
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    $i75 := $load.i64($M.0, $p74);
    call {:si_unique_call 502} {:cexpr "mem_start"} boogie_si_record_i64($i75);
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    $i79 := $load.i64($M.0, $p78);
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    $i80 := $ne.i64($i79, 0);
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    assume {:branchcond $i80} true;
    goto $bb34, $bb36;

  $bb36:
    assume !($i80 == 1);
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    $i84 := $load.i64($M.0, $p83);
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    $i88 := $load.i64($M.0, $p87);
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    $i89 := $ne.i64($i84, $i88);
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i89 == 1);
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    $i100 := 0;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} $p101 := __request_region(iomem_resource, $i75, $i100, .str.22, 0);
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    $i102 := $p2i.ref.i64($p101);
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    $i103 := $eq.i64($i102, 0);
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    assume {:branchcond $i103} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 505} $p105 := ioremap_nocache($i75, $i100);
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    $i106 := $p2i.ref.i64($p105);
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    $i107 := $eq.i64($i106, 0);
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    assume {:branchcond $i107} true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($p105, $mul.ref(104, 1));
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 508} $i110 := readl($p109);
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    call {:si_unique_call 509} {:cexpr "reg_data"} boogie_si_record_i32($i110);
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    $i111 := $or.i32($i110, 2304);
    call {:si_unique_call 510} {:cexpr "reg_data"} boogie_si_record_i32($i111);
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($p105, $mul.ref(104, 1));
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} writel($i111, $p112);
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} iounmap($p105);
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} __release_region(iomem_resource, $i75, $i100);
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    $i34 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    $r := $i34;
    return;

  SeqInstr_58:
    assume !assertsPassed;
    return;

  $bb43:
    assume $i107 == 1;
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 506} vslice_dummy_var_43 := printk.ref(.str.24);
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} __release_region(iomem_resource, $i75, $i100);
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    $i34 := $sub.i32(0, 12);
    goto $bb9;

  $bb40:
    assume $i103 == 1;
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 504} vslice_dummy_var_42 := printk.ref(.str.23);
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    $i34 := $sub.i32(0, 16);
    goto $bb9;

  $bb37:
    assume {:verifier.code 0} true;
    assume $i89 == 1;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    $i93 := $load.i64($M.0, $p92);
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    $i97 := $load.i64($M.0, $p96);
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    $i98 := $sub.i64($i93, $i97);
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    $i99 := $add.i64($i98, 1);
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    $i100 := $i99;
    goto $bb39;

  $bb34:
    assume {:verifier.code 0} true;
    assume $i80 == 1;
    goto $bb35;

  $bb31:
    assume $i70 == 1;
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} dev_err.ref.ref.i32($p71, .str.21, $i69);
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    $i34 := $sub.i32(0, 12);
    goto $bb9;

  $bb28:
    assume $i68 == 1;
    assume {:verifier.code 0} true;
    $i60 := $i65;
    goto $bb28_dummy;

  SeqInstr_55:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i46 == 1;
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 491} vslice_dummy_var_40 := pci_read_config_byte($p0, 63, $p2);
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    $i48 := $load.i8($M.31, $p2);
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i32($i48);
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i49, 0);
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i50 == 1);
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb19:
    assume $i50 == 1;
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    $i51 := $load.i8($M.31, $p2);
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    $i52 := $zext.i8.i32($i51);
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.31, $p1);
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    $i54 := $zext.i8.i32($i53);
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    $i55 := $slt.i32($i52, $i54);
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i55 == 1);
    goto $bb21;

  $bb22:
    assume $i55 == 1;
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    $i56 := $load.i8($M.31, $p2);
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    $i57 := $zext.i8.i32($i56);
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    $i58 := $trunc.i32.i8($i57);
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} vslice_dummy_var_41 := pci_write_config_byte($p0, 13, $i58);
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb14:
    assume $i41 == 1;
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} vslice_dummy_var_38 := printk.ref(.str.20);
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 489} __release_region(iomem_resource, $i6, $i31);
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    $i34 := $sub.i32(0, 12);
    goto $bb9;

  $bb11:
    assume $i37 == 1;
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 486} vslice_dummy_var_37 := printk.ref(.str.19);
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    $i34 := $sub.i32(0, 16);
    goto $bb9;

  $bb7:
    assume $i32 == 1;
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 484} vslice_dummy_var_36 := printk.ref(.str.17);
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    $i34 := $sub.i32(0, 12);
    goto $bb9;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(3, 56)), $mul.ref(8, 1));
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    $i24 := $load.i64($M.0, $p23);
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(3, 56)), $mul.ref(0, 1));
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    $i28 := $load.i64($M.0, $p27);
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    $i29 := $sub.i64($i24, $i28);
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    $i30 := $add.i64($i29, 1);
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    $i31 := $i30;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb2;

  $bb28_dummy:
    assume false;
    return;

  $bb26_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3347;
}



const pci_set_master: ref;

axiom pci_set_master == $sub.ref(0, 357607);

procedure pci_set_master($p0: ref);
  free requires assertsPassed;



implementation pci_set_master($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    return;
}



const __request_region: ref;

axiom __request_region == $sub.ref(0, 358639);

procedure __request_region($p0: ref, $i1: i64, $i2: i64, $p3: ref, $i4: i32) returns ($r: ref);
  free requires assertsPassed;



implementation __request_region($p0: ref, $i1: i64, $i2: i64, $p3: ref, $i4: i32) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} {:cexpr "__request_region:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 515} {:cexpr "__request_region:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 516} {:cexpr "__request_region:arg:arg4"} boogie_si_record_i32($i4);
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} $p5 := external_alloc();
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const ioremap_nocache: ref;

axiom ioremap_nocache == $sub.ref(0, 359671);

procedure ioremap_nocache($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;



implementation ioremap_nocache($i0: i64, $i1: i64) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 518} {:cexpr "ioremap_nocache:arg:arg0"} boogie_si_record_i64($i0);
    call {:si_unique_call 519} {:cexpr "ioremap_nocache:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 520} $p2 := external_alloc();
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __release_region: ref;

axiom __release_region == $sub.ref(0, 360703);

procedure __release_region($p0: ref, $i1: i64, $i2: i64);
  free requires assertsPassed;



implementation __release_region($p0: ref, $i1: i64, $i2: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 521} {:cexpr "__release_region:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 522} {:cexpr "__release_region:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    return;
}



const pci_read_config_byte: ref;

axiom pci_read_config_byte == $sub.ref(0, 361735);

procedure pci_read_config_byte($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_read_config_byte($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 523} {:cexpr "pci_read_config_byte:arg:where"} boogie_si_record_i32($i1);
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(16, 1));
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(56, 1));
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 524} $i7 := pci_bus_read_config_byte($p4, $i6, $i1, $p2);
    call {:si_unique_call 525} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const pci_write_config_byte: ref;

axiom pci_write_config_byte == $sub.ref(0, 362767);

procedure pci_write_config_byte($p0: ref, $i1: i32, $i2: i8) returns ($r: i32);
  free requires assertsPassed;



implementation pci_write_config_byte($p0: ref, $i1: i32, $i2: i8) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i8;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 526} {:cexpr "pci_write_config_byte:arg:where"} boogie_si_record_i32($i1);
    call {:si_unique_call 527} {:cexpr "pci_write_config_byte:arg:val"} boogie_si_record_i8($i2);
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(16, 1));
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(56, 1));
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i2);
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i8($i7);
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} $i9 := pci_bus_write_config_byte($p4, $i6, $i1, $i8);
    call {:si_unique_call 529} {:cexpr "tmp"} boogie_si_record_i32($i9);
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const iounmap: ref;

axiom iounmap == $sub.ref(0, 363799);

procedure iounmap($p0: ref);
  free requires assertsPassed;



implementation iounmap($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    return;
}



const pci_bus_write_config_byte: ref;

axiom pci_bus_write_config_byte == $sub.ref(0, 364831);

procedure pci_bus_write_config_byte($p0: ref, $i1: i32, $i2: i32, $i3: i8) returns ($r: i32);
  free requires assertsPassed;



implementation pci_bus_write_config_byte($p0: ref, $i1: i32, $i2: i32, $i3: i8) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 530} {:cexpr "pci_bus_write_config_byte:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 531} {:cexpr "pci_bus_write_config_byte:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 532} {:cexpr "pci_bus_write_config_byte:arg:arg3"} boogie_si_record_i8($i3);
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 1} true;
    call {:si_unique_call 533} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 534} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const pci_bus_read_config_byte: ref;

axiom pci_bus_read_config_byte == $sub.ref(0, 365863);

procedure pci_bus_read_config_byte($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_bus_read_config_byte($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 535} {:cexpr "pci_bus_read_config_byte:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 536} {:cexpr "pci_bus_read_config_byte:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 1} true;
    call {:si_unique_call 537} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 538} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const isp1760_irq: ref;

axiom isp1760_irq == $sub.ref(0, 366895);

procedure isp1760_irq($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.30, $M.38, $M.36, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.1, $M.32, $CurrAddr, $M.40, $M.23, $M.22, $M.25, $M.24, $M.27, $M.26, $M.29, $M.28, assertsPassed, $M.2, $M.4, $M.6, $M.8, $M.3, $M.5, $M.7, $M.9;



implementation isp1760_irq($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $p31: ref;
  var $i7: i32;
  var $p32: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} $p1 := hcd_to_priv($p0);
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 2384)), $mul.ref(16, 1));
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} spin_lock($p2);
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(960, 1));
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 1);
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} $i10 := reg_read32($p9, 784);
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    call {:si_unique_call 543} {:cexpr "imask"} boogie_si_record_i32($i10);
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} $i14 := ldv__builtin_expect($i13, 0);
    call {:si_unique_call 545} {:cexpr "tmp___0"} boogie_si_record_i64($i14);
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 546} reg_write32($p17, 784, $i10);
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 547} $i20 := reg_read32($p19, 320);
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    call {:si_unique_call 548} {:cexpr "tmp___1"} boogie_si_record_i32($i20);
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 2384)), $mul.ref(1632, 1));
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    $i23 := $or.i32($i22, $i20);
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 2384)), $mul.ref(1632, 1));
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, $i23);
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 549} $i27 := reg_read32($p26, 336);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    call {:si_unique_call 550} {:cexpr "tmp___2"} boogie_si_record_i32($i27);
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 2384)), $mul.ref(856, 1));
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    $i30 := $or.i32($i29, $i27);
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 2384)), $mul.ref(856, 1));
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p31, $i30);
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 551} handle_done_ptds($p0);
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    $i7 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref(0, 2384)), $mul.ref(16, 1));
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} spin_unlock($p32);
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  SeqInstr_70:
    assume !assertsPassed;
    return;

  SeqInstr_67:
    assume !assertsPassed;
    return;

  SeqInstr_64:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  SeqInstr_61:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;
}



const isp1760_hc_setup: ref;

axiom isp1760_hc_setup == $sub.ref(0, 367927);

procedure isp1760_hc_setup($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.32, $M.0, $M.40, $M.1, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.30, $CurrAddr, $M.38, $M.36, $M.23, $M.22, $M.25, $M.24, $M.27, $M.26, $M.29, $M.28, $M.2, $M.4, $M.6, $M.8, $M.3, $M.5, $M.7, $M.9, assertsPassed;



implementation isp1760_hc_setup($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $p39: ref;
  var $i40: i32;
  var $i14: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} $p1 := hcd_to_priv($p0);
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 553} reg_write32($p3, 776, $sub.i32(0, 559039810));
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} $i6 := reg_read32($p5, 772);
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    call {:si_unique_call 555} {:cexpr "scratch"} boogie_si_record_i32($i6);
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} $i9 := reg_read32($p8, 776);
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    call {:si_unique_call 557} {:cexpr "scratch"} boogie_si_record_i32($i9);
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, $sub.i32(0, 559039810));
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 559} reg_write32($p16, 820, 0);
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_3519;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 560} reg_write32($p18, 340, $sub.i32(0, 1));
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 561} reg_write32($p20, 324, $sub.i32(0, 1));
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} reg_write32($p22, 308, $sub.i32(0, 1));
    goto corral_source_split_3527;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 563} $i23 := ehci_reset($p0);
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    call {:si_unique_call 564} {:cexpr "result"} boogie_si_record_i32($i23);
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 565} $i27 := reg_read32($p26, 768);
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    call {:si_unique_call 566} {:cexpr "tmp___0"} boogie_si_record_i32($i27);
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    $i28 := $and.i32($i27, 2147483647);
    call {:si_unique_call 567} {:cexpr "hwmode"} boogie_si_record_i32($i28);
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    $i31 := $or.i32($i28, $sub.i32(0, 2147483648));
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 568} reg_write32($p30, 768, $i31);
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 569} __const_udelay(4295000);
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 570} __const_udelay(4295000);
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 576} __const_udelay(4295000);
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 577} __const_udelay(4295000);
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 578} __const_udelay(4295000);
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 579} __const_udelay(4295000);
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 580} __const_udelay(4295000);
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 581} __const_udelay(4295000);
    goto corral_source_split_3569;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 582} __const_udelay(4295000);
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 583} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 571} reg_write32($p33, 768, $i28);
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 572} reg_write32($p35, 788, 384);
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 573} $i38 := reg_read32($p37, 4);
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 2384)), $mul.ref(8, 1));
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    $M.32 := $store.i32($M.32, $p39, $i38);
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} $i40 := priv_init($p0);
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    call {:si_unique_call 575} {:cexpr "tmp___2"} boogie_si_record_i32($i40);
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    $i14 := $i40;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  SeqInstr_88:
    assume !assertsPassed;
    return;

  SeqInstr_85:
    assume !assertsPassed;
    return;

  SeqInstr_82:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i24 == 1;
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    $i14 := $i23;
    goto $bb3;

  SeqInstr_79:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_3509;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 558} dev_err.ref.ref($p13, .str.42);
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 19);
    goto $bb3;

  SeqInstr_76:
    assume !assertsPassed;
    return;

  SeqInstr_73:
    assume !assertsPassed;
    return;
}



const isp1760_run: ref;

axiom isp1760_run == $sub.ref(0, 368959);

procedure isp1760_run($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.23, $M.22, $M.25, $M.24, $M.27, $M.26, $M.29, $M.28, $M.1, $M.32, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.30, $M.38, $M.36, $M.40, $CurrAddr, $M.2, $M.4, $M.6, $M.8, $M.3, $M.5, $M.7, $M.9, assertsPassed;



implementation isp1760_run($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i16;
  var $i3: i16;
  var $i4: i16;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $i28: i32;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $i38: i64;
  var $i40: i64;
  var $i41: i64;
  var $i42: i64;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $i50: i32;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i33: i32;
  var vslice_dummy_var_44: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(576, 1));
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    $i2 := $load.i16($M.0, $p1);
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    $i3 := $and.i16($i2, $sub.i16(0, 17));
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    $i4 := $or.i16($i3, 16);
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p1, $i4);
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(960, 1));
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, 1);
    goto corral_source_split_3580;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 584} reg_write32($p7, 812, 0);
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 585} reg_write32($p9, 800, $sub.i32(0, 1));
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 586} reg_write32($p11, 808, 0);
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} reg_write32($p13, 796, $sub.i32(0, 1));
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 588} reg_write32($p15, 804, 0);
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} reg_write32($p17, 792, $sub.i32(0, 1));
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_3599;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 590} $i20 := reg_read32($p19, 768);
    goto SeqInstr_91, SeqInstr_92;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  SeqInstr_93:
    call {:si_unique_call 591} {:cexpr "temp"} boogie_si_record_i32($i20);
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    $i23 := $or.i32($i20, 1);
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 592} reg_write32($p22, 768, $i23);
    goto corral_source_split_3605;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 593} $i26 := reg_read32($p25, 32);
    goto SeqInstr_94, SeqInstr_95;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  SeqInstr_96:
    call {:si_unique_call 594} {:cexpr "command"} boogie_si_record_i32($i26);
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    $i27 := $and.i32($i26, $sub.i32(0, 131));
    call {:si_unique_call 595} {:cexpr "command"} boogie_si_record_i32($i27);
    goto corral_source_split_3609;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    $i28 := $or.i32($i27, 1);
    call {:si_unique_call 596} {:cexpr "command"} boogie_si_record_i32($i28);
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 597} reg_write32($p30, 32, $i28);
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 598} $i31 := handshake($p0, 32, 1, 1, 250000);
    goto SeqInstr_97, SeqInstr_98;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  SeqInstr_99:
    call {:si_unique_call 599} {:cexpr "retval"} boogie_si_record_i32($i31);
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 600} down_write(ehci_cf_port_reset_rwsem);
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 601} reg_write32($p35, 96, 1);
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 602} $i36 := handshake($p0, 96, 1, 1, 250000);
    goto SeqInstr_100, SeqInstr_101;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  SeqInstr_102:
    call {:si_unique_call 603} {:cexpr "retval"} boogie_si_record_i32($i36);
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 604} up_write(ehci_cf_port_reset_rwsem);
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p0);
    goto corral_source_split_3631;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 605} vslice_dummy_var_44 := reg_timer_3(errata2_timer, errata2_function, $i38);
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 606} $i40 := msecs_to_jiffies(200);
    call {:si_unique_call 607} {:cexpr "tmp"} boogie_si_record_i64($i40);
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    $i41 := $load.i64($M.0, jiffies);
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    $i42 := $add.i64($i40, $i41);
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $add.ref($add.ref(errata2_timer, $mul.ref(0, 128)), $mul.ref(16, 1)), $i42);
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 608} add_timer(errata2_timer);
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_3639;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 609} $i45 := reg_read32($p44, 772);
    goto SeqInstr_103, SeqInstr_104;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  SeqInstr_105:
    call {:si_unique_call 610} {:cexpr "chipid"} boogie_si_record_i32($i45);
    goto corral_source_split_3640;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    $i49 := $and.i32($i45, 65535);
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    $i50 := $lshr.i32($i45, 16);
    goto corral_source_split_3644;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 611} _dev_info.ref.ref.i32.i32($p48, .str.41, $i49, $i50);
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} reg_write32($p52, 344, $sub.i32(0, 2147483648));
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} reg_write32($p54, 328, $sub.i32(0, 2147483648));
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 614} reg_write32($p56, 312, 1);
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_3655;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 615} reg_write32($p58, 340, $sub.i32(0, 1));
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 616} reg_write32($p60, 324, $sub.i32(0, 1));
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p61);
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} reg_write32($p62, 308, $sub.i32(0, 1));
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p63);
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 618} reg_write32($p64, 820, 3);
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    $i33 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    $r := $i33;
    return;

  SeqInstr_103:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i37 == 1;
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    $i33 := $i36;
    goto $bb3;

  SeqInstr_100:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i32 == 1;
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    $i33 := $i31;
    goto $bb3;

  SeqInstr_97:
    assume !assertsPassed;
    return;

  SeqInstr_94:
    assume !assertsPassed;
    return;

  SeqInstr_91:
    assume !assertsPassed;
    return;
}



const isp1760_stop: ref;

axiom isp1760_stop == $sub.ref(0, 369991);

procedure isp1760_stop($p0: ref);
  free requires assertsPassed;
  modifies $M.22, $M.24, $M.26, $M.28, $M.30, $M.0, $M.40, $M.23, $M.25, $M.27, $M.29, $M.1, $M.32, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.38, $M.36, $CurrAddr, $M.2, $M.4, $M.6, $M.8, $M.3, $M.5, $M.7, $M.9, assertsPassed;



implementation isp1760_stop($p0: ref)
{
  var $p1: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var vslice_dummy_var_45: i32;
  var vslice_dummy_var_46: i32;
  var vslice_dummy_var_47: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 619} $p1 := hcd_to_priv($p0);
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 620} vslice_dummy_var_45 := ldv_del_timer_77(errata2_timer);
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 621} vslice_dummy_var_46 := isp1760_hub_control($p0, 8961, 8, 1, $0.ref, 0);
    goto SeqInstr_106, SeqInstr_107;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  SeqInstr_108:
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 622} __const_udelay(4295000);
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 623} __const_udelay(4295000);
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} __const_udelay(4295000);
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 633} __const_udelay(4295000);
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 634} __const_udelay(4295000);
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 635} __const_udelay(4295000);
    goto corral_source_split_3699;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 636} __const_udelay(4295000);
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} __const_udelay(4295000);
    goto corral_source_split_3703;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} __const_udelay(4295000);
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 639} __const_udelay(4295000);
    goto corral_source_split_3707;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 640} __const_udelay(4295000);
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 641} __const_udelay(4295000);
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 642} __const_udelay(4295000);
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 643} __const_udelay(4295000);
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 644} __const_udelay(4295000);
    goto corral_source_split_3717;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} __const_udelay(4295000);
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} __const_udelay(4295000);
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 647} __const_udelay(4295000);
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 648} __const_udelay(4295000);
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 649} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 2384)), $mul.ref(16, 1));
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 624} spin_lock_irq($p4);
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 625} vslice_dummy_var_47 := ehci_reset($p0);
    goto SeqInstr_109, SeqInstr_110;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  SeqInstr_111:
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 626} $i8 := reg_read32($p7, 768);
    goto SeqInstr_112, SeqInstr_113;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  SeqInstr_114:
    call {:si_unique_call 627} {:cexpr "temp"} boogie_si_record_i32($i8);
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, $sub.i32(0, 2));
    call {:si_unique_call 628} {:cexpr "temp"} boogie_si_record_i32($i9);
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 629} reg_write32($p11, 768, $i9);
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 2384)), $mul.ref(16, 1));
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 630} spin_unlock_irq($p12);
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} reg_write32($p14, 96, 0);
    goto corral_source_split_3691;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_112:
    assume !assertsPassed;
    return;

  SeqInstr_109:
    assume !assertsPassed;
    return;

  SeqInstr_106:
    assume !assertsPassed;
    return;
}



const isp1760_shutdown: ref;

axiom isp1760_shutdown == $sub.ref(0, 371023);

procedure isp1760_shutdown($p0: ref);
  free requires assertsPassed;
  modifies $M.22, $M.24, $M.26, $M.28, $M.30, $M.0, $M.40, $M.23, $M.25, $M.27, $M.29, $M.1, $M.32, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.38, $M.36, $CurrAddr, $M.2, $M.4, $M.6, $M.8, $M.3, $M.5, $M.7, $M.9, assertsPassed;



implementation isp1760_shutdown($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3727;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 650} isp1760_stop($p0);
    goto SeqInstr_115, SeqInstr_116;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  SeqInstr_117:
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_3729;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} $i3 := reg_read32($p2, 768);
    goto SeqInstr_118, SeqInstr_119;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  SeqInstr_120:
    call {:si_unique_call 652} {:cexpr "temp"} boogie_si_record_i32($i3);
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, $sub.i32(0, 2));
    call {:si_unique_call 653} {:cexpr "temp"} boogie_si_record_i32($i4);
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 654} reg_write32($p6, 768, $i4);
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_3736;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 655} $i9 := reg_read32($p8, 32);
    goto SeqInstr_121, SeqInstr_122;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  SeqInstr_123:
    call {:si_unique_call 656} {:cexpr "command"} boogie_si_record_i32($i9);
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, $sub.i32(0, 2));
    call {:si_unique_call 657} {:cexpr "command"} boogie_si_record_i32($i10);
    goto corral_source_split_3739;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 658} reg_write32($p12, 32, $i10);
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_121:
    assume !assertsPassed;
    return;

  SeqInstr_118:
    assume !assertsPassed;
    return;

  SeqInstr_115:
    assume !assertsPassed;
    return;
}



const isp1760_get_frame: ref;

axiom isp1760_get_frame == $sub.ref(0, 372055);

procedure isp1760_get_frame($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.0, $M.32, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.30, $M.38, $M.36, $M.40, $M.23, $M.22, $M.25, $M.24, $M.27, $M.26, $M.29, $M.28, $CurrAddr, $M.2, $M.4, $M.6, $M.8, $M.3, $M.5, $M.7, $M.9, assertsPassed;



implementation isp1760_get_frame($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 659} $p1 := hcd_to_priv($p0);
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3747;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 660} $i4 := reg_read32($p3, 44);
    goto SeqInstr_124, SeqInstr_125;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  SeqInstr_126:
    call {:si_unique_call 661} {:cexpr "fr"} boogie_si_record_i32($i4);
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    $i5 := $lshr.i32($i4, 3);
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 2384)), $mul.ref(2360, 1));
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.33, $p6);
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    $i8 := $urem.i32($i5, $i7);
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  SeqInstr_124:
    assume !assertsPassed;
    return;
}



const isp1760_urb_enqueue: ref;

axiom isp1760_urb_enqueue == $sub.ref(0, 373087);

procedure isp1760_urb_enqueue($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.30, $CurrAddr, assertsPassed, $M.36, $M.38, $M.1, $M.32, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.40, $M.23, $M.22, $M.25, $M.24, $M.27, $M.26, $M.29, $M.28, $M.2, $M.4, $M.6, $M.8, $M.3, $M.5, $M.7, $M.9;



implementation isp1760_urb_enqueue($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $p15: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p29: ref;
  var $p30: ref;
  var $p32: ref;
  var $p33: ref;
  var $p17: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $i42: i32;
  var $i43: i1;
  var $i45: i32;
  var $i46: i1;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i64;
  var $i53: i1;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $i58: i64;
  var $i59: i64;
  var $i60: i1;
  var $i62: i64;
  var $i63: i64;
  var $i64: i1;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i64;
  var $i72: i1;
  var $p61: ref;
  var $i65: i32;
  var $i73: i1;
  var $p74: ref;
  var $p76: ref;
  var $i77: i64;
  var $i78: i1;
  var $p79: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p75: ref;
  var $p84: ref;
  var $i44: i32;
  var $p85: ref;
  var $i24: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 662} $p3 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    call {:si_unique_call 663} {:cexpr "isp1760_urb_enqueue:arg:mem_flags"} boogie_si_record_i32($i2);
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 664} $p4 := hcd_to_priv($p0);
    goto corral_source_split_3755;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p5, $p3);
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, $p3);
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_3760;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    $i9 := $lshr.i32($i8, 30);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i9, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i9, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i9, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_3797;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} dev_err.ref.ref.ref($p33, .str.46, .str.45);
    goto corral_source_split_3798;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32(0, 32);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    $r := $i24;
    return;

  $bb6:
    assume $i12 == 1;
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p4, $mul.ref(0, 2384)), $mul.ref(2312, 1));
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($p19, $mul.ref(1, 16));
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    $p17 := $p20;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_3782;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_3784;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    $i36 := $and.i32($i35, 128);
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 667} packetize_urb($p0, $p1, $p3, $i2);
    goto SeqInstr_127, SeqInstr_128;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  SeqInstr_129:
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 668} $i39 := list_empty($p3);
    call {:si_unique_call 669} {:cexpr "tmp___0"} boogie_si_record_i32($i39);
    goto corral_source_split_3805;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 670} ldv_spin_lock();
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(568, 1));
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 671} $i42 := constant_test_bit(0, $p41);
    call {:si_unique_call 672} {:cexpr "tmp___1"} boogie_si_record_i32($i42);
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i42, 0);
    goto corral_source_split_3813;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 675} $i45 := usb_hcd_link_urb_to_ep($p0, $p1);
    call {:si_unique_call 676} {:cexpr "retval"} boogie_si_record_i32($i45);
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(80, 1));
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_3829;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p48, $mul.ref(0, 72)), $mul.ref(32, 1));
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p50);
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    $i52 := $p2i.ref.i64($p51);
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    $i53 := $ne.i64($i52, 0);
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i53 == 1);
    goto corral_source_split_3845;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 678} $p76 := qh_alloc(32);
    goto SeqInstr_130, SeqInstr_131;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  SeqInstr_132:
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    $i77 := $p2i.ref.i64($p76);
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    $i78 := $eq.i64($i77, 0);
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p76, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 684} list_add_tail($p79, $p17);
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(80, 1));
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.0, $p81);
    goto corral_source_split_3889;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p82, $mul.ref(0, 72)), $mul.ref(32, 1));
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p83, $p76);
    assume {:verifier.code 0} true;
    $p75 := $p76;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto corral_source_split_3876;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p75, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 680} list_splice_tail($p3, $p84);
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} schedule_ptds($p0);
    goto SeqInstr_133, SeqInstr_134;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  SeqInstr_135:
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    $i44 := $i45;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p4, $mul.ref(0, 2384)), $mul.ref(16, 1));
    goto corral_source_split_3819;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 674} spin_unlock_irqrestore($p85, $u0);
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    $i24 := $i44;
    goto $bb16;

  SeqInstr_133:
    assume !assertsPassed;
    return;

  $bb50:
    assume $i78 == 1;
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 682} usb_hcd_unlink_urb_from_ep($p0, $p1);
    goto corral_source_split_3882;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 683} qtd_list_free($p3);
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    $i44 := $sub.i32(0, 12);
    goto $bb27;

  SeqInstr_130:
    assume !assertsPassed;
    return;

  $bb32:
    assume $i53 == 1;
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p17, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_3838;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p55);
    goto corral_source_split_3839;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p56, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    $i58 := $p2i.ref.i64($p57);
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    $i59 := $p2i.ref.i64($p17);
    goto corral_source_split_3842;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    $i60 := $ne.i64($i58, $i59);
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i60 == 1);
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $i65 := 0;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    $i73 := $eq.i32($i65, 0);
    goto corral_source_split_3861;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p75 := $p50;
    goto $bb49;

  $bb46:
    assume $i73 == 1;
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p51, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} list_add_tail($p74, $p17);
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb34:
    assume $i60 == 1;
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    $p61 := $p55;
    goto $bb37;

  $bb37:
    call $i62, $i63, $i64, $p67, $p68, $p69, $p70, $i71, $i72, $p61 := isp1760_urb_enqueue_loop_$bb37($p51, $i59, $i62, $i63, $i64, $p67, $p68, $p69, $p70, $i71, $i72, $p61);
    goto $bb37_last;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i62 := $p2i.ref.i64($p61);
    goto corral_source_split_3854;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    $i63 := $p2i.ref.i64($p51);
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    $i64 := $eq.i64($i62, $i63);
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($p61, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p67);
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p68);
    goto corral_source_split_3865;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p69, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    $i71 := $p2i.ref.i64($p70);
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    $i72 := $ne.i64($i71, $i59);
    goto corral_source_split_3868;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i72 == 1);
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb43:
    assume $i72 == 1;
    assume {:verifier.code 0} true;
    $p61 := $p68;
    goto $bb43_dummy;

  $bb39:
    assume $i64 == 1;
    goto corral_source_split_3858;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    $i65 := 1;
    goto $bb41;

  $bb29:
    assume $i46 == 1;
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 677} qtd_list_free($p3);
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    $i44 := $i45;
    goto $bb27;

  $bb25:
    assume $i43 == 1;
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 673} qtd_list_free($p3);
    goto corral_source_split_3816;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    $i44 := $sub.i32(0, 108);
    goto $bb27;

  $bb22:
    assume $i40 == 1;
    goto corral_source_split_3808;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32(0, 12);
    goto $bb16;

  SeqInstr_127:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i37 == 1;
    goto corral_source_split_3800;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_3801;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p38, 0);
    goto corral_source_split_3802;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 2384)), $mul.ref(2312, 1));
    goto corral_source_split_3764;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    $p17 := $p15;
    goto $bb13;

  $bb2:
    assume $i10 == 1;
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i9, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i13 == 1);
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(168, 1));
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i22, 0);
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p4, $mul.ref(0, 2384)), $mul.ref(2312, 1));
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_3793;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($p26, $mul.ref(2, 16));
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    $p17 := $p27;
    goto $bb13;

  $bb14:
    assume $i23 == 1;
    goto corral_source_split_3788;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32(0, 22);
    goto $bb16;

  $bb9:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i9, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb8;

  $bb11:
    assume $i14 == 1;
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3778;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 665} dev_err.ref.ref.ref($p30, .str.44, .str.45);
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32(0, 32);
    goto $bb16;

  $bb43_dummy:
    assume false;
    return;

  $bb37_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3852;
}



const isp1760_urb_dequeue: ref;

axiom isp1760_urb_dequeue == $sub.ref(0, 374119);

procedure isp1760_urb_dequeue($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.30, $M.0, $CurrAddr, $M.36, $M.1, $M.32, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.38, $M.40, $M.23, $M.22, $M.25, $M.24, $M.27, $M.26, $M.29, $M.28, assertsPassed, $M.2, $M.4, $M.6, $M.8, $M.3, $M.5, $M.7, $M.9;



implementation isp1760_urb_dequeue($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i64;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $i40: i1;
  var $p24: ref;
  var $p41: ref;
  var $i6: i32;
  var $p42: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 685} {:cexpr "isp1760_urb_dequeue:arg:status"} boogie_si_record_i32($i2);
    goto corral_source_split_3892;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 686} $p3 := hcd_to_priv($p0);
    goto corral_source_split_3893;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 687} ldv_spin_lock();
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} $i4 := usb_hcd_check_unlink_urb($p0, $p1, $i2);
    call {:si_unique_call 689} {:cexpr "retval"} boogie_si_record_i32($i4);
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(80, 1));
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 72)), $mul.ref(32, 1));
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_3909;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 48)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_3915;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($p17, $mul.ref($sub.ref(0, 24), 72));
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p17, $mul.ref($sub.ref(0, 24), 72)), $mul.ref(24, 1));
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p11, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i20, $i22);
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p41, $i2);
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 693} schedule_ptds($p0);
    goto SeqInstr_139, SeqInstr_140;

  SeqInstr_140:
    assume assertsPassed;
    goto SeqInstr_141;

  SeqInstr_141:
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    $i6 := $i4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p3, $mul.ref(0, 2384)), $mul.ref(16, 1));
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 690} spin_unlock_irqrestore($p42, $u0);
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  SeqInstr_139:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i23 == 1;
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    $p24 := $p18;
    goto $bb11;

  $bb11:
    call $p25, $p26, $i27, $i28, $i29, $p30, $p34, $p35, $p36, $p37, $p38, $i39, $i40, $p24 := isp1760_urb_dequeue_loop_$bb11($p1, $i22, $p25, $p26, $i27, $i28, $i29, $p30, $p34, $p35, $p36, $p37, $p38, $i39, $i40, $p24);
    goto $bb11_last;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_3928;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_3929;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p1);
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    $i29 := $eq.i64($i27, $i28);
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    $p30 := $p24;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p24, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($p36, $mul.ref($sub.ref(0, 24), 72));
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p36, $mul.ref($sub.ref(0, 24), 72)), $mul.ref(24, 1));
    goto corral_source_split_3948;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($p38);
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    $i40 := $ne.i64($i39, $i22);
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i40 == 1);
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb17:
    assume $i40 == 1;
    assume {:verifier.code 0} true;
    $p24 := $p37;
    goto $bb17_dummy;

  $bb13:
    assume $i29 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} dequeue_urb_from_qtd($p0, $p11, $p30);
    goto SeqInstr_136, SeqInstr_137;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  SeqInstr_138:
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p11, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_3937;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 692} list_move($p31, $p32);
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_136:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    $i6 := $i4;
    goto $bb3;

  $bb17_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3926;
}



const isp1760_endpoint_disable: ref;

axiom isp1760_endpoint_disable == $sub.ref(0, 375151);

procedure isp1760_endpoint_disable($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.30, $M.0, $CurrAddr, $M.36, $M.38, assertsPassed, $M.1, $M.32, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.40, $M.23, $M.22, $M.25, $M.24, $M.27, $M.26, $M.29, $M.28, $M.2, $M.4, $M.6, $M.8, $M.3, $M.5, $M.7, $M.9;



implementation isp1760_endpoint_disable($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i64;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $p34: ref;
  var $i35: i64;
  var $i36: i1;
  var $i38: i64;
  var $i39: i64;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i64;
  var $i50: i1;
  var $p37: ref;
  var $i43: i32;
  var $i51: i32;
  var $i52: i1;
  var $i21: i32;
  var $p53: ref;
  var $p54: ref;
  var vslice_dummy_var_48: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 694} $p2 := hcd_to_priv($p0);
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 695} ldv_spin_lock();
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(32, 1));
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p5, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_3968;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 697} $i9 := list_empty($p8);
    call {:si_unique_call 698} {:cexpr "tmp___0"} boogie_si_record_i32($i9);
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    call {:si_unique_call 699} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i11);
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_3972;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i12);
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 700} $i15 := ldv__builtin_expect($i14, 0);
    call {:si_unique_call 701} {:cexpr "tmp___1"} boogie_si_record_i64($i15);
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_3976;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i11, 0);
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    $i18 := $zext.i1.i32($i17);
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i18);
    goto corral_source_split_3983;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 703} vslice_dummy_var_48 := ldv__builtin_expect($i19, 0);
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    $i21 := 0;
    goto $bb8;

  $bb8:
    call $p22, $p23, $i24, $p26, $p27, $p28, $p29, $i30, $p31, $p32, $i33, $p34, $i35, $i36, $i38, $i39, $i40, $p41, $p42, $p45, $p46, $p47, $p48, $i49, $i50, $p37, $i43, $i51, $i52, $i21 := isp1760_endpoint_disable_loop_$bb8($p2, $p5, $p22, $p23, $i24, $p26, $p27, $p28, $p29, $i30, $p31, $p32, $i33, $p34, $i35, $i36, $i38, $i39, $i40, $p41, $p42, $p45, $p46, $p47, $p48, $i49, $i50, $p37, $i43, $i51, $i52, $i21);
    goto $bb8_last;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(2312, 1));
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_3989;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    $i24 := $sext.i32.i64($i21);
    goto corral_source_split_3990;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p23, $mul.ref($i24, 16)), $mul.ref(0, 1));
    goto corral_source_split_3992;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_3995;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(2312, 1));
    goto corral_source_split_3997;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    $i33 := $sext.i32.i64($i21);
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($p32, $mul.ref($i33, 16));
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i30, $i35);
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i43 := $i21;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    $i51 := $add.i32($i43, 1);
    call {:si_unique_call 705} {:cexpr "i"} boogie_si_record_i32($i51);
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    $i52 := $sle.i32($i51, 2);
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 706} qh_free($p5);
    goto corral_source_split_4029;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(32, 1));
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p53, $0.ref);
    goto corral_source_split_4031;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 707} schedule_ptds($p0);
    goto SeqInstr_142, SeqInstr_143;

  SeqInstr_143:
    assume assertsPassed;
    goto SeqInstr_144;

  SeqInstr_144:
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(16, 1));
    goto corral_source_split_3965;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 696} spin_unlock_irqrestore($p54, $u0);
    goto corral_source_split_3966;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_142:
    assume !assertsPassed;
    return;

  $bb22:
    assume $i52 == 1;
    assume {:verifier.code 0} true;
    $i21 := $i51;
    goto $bb22_dummy;

  $bb10:
    assume $i36 == 1;
    goto corral_source_split_4004;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    $p37 := $p27;
    goto $bb13;

  $bb13:
    call $i38, $i39, $i40, $p41, $p45, $p46, $p47, $p48, $i49, $i50, $p37 := isp1760_endpoint_disable_loop_$bb13($p5, $i35, $i38, $i39, $i40, $p41, $p45, $p46, $p47, $p48, $i49, $i50, $p37);
    goto $bb13_last;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p37);
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($p5);
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    $i40 := $eq.i64($i38, $i39);
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    $p41 := $p37;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p37, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p47, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    $i49 := $p2i.ref.i64($p48);
    goto corral_source_split_4024;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    $i50 := $ne.i64($i49, $i35);
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i50 == 1);
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb19:
    assume $i50 == 1;
    assume {:verifier.code 0} true;
    $p37 := $p46;
    goto $bb19_dummy;

  $bb15:
    assume $i40 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 704} list_del($p42);
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    $i43 := 3;
    goto $bb17;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_3978;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 702} warn_slowpath_null(.str.29, 1690);
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb19_dummy:
    assume false;
    return;

  $bb13_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4006;

  $bb22_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3986;
}



const isp1760_hub_status_data: ref;

axiom isp1760_hub_status_data == $sub.ref(0, 376183);

procedure isp1760_hub_status_data($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.30, $M.1, $M.32, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.38, $M.36, $M.40, $M.23, $M.22, $M.25, $M.24, $M.27, $M.26, $M.29, $M.28, $CurrAddr, $M.2, $M.4, $M.6, $M.8, $M.3, $M.5, $M.7, $M.9, assertsPassed;



implementation isp1760_hub_status_data($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i22: i1;
  var $i23: i64;
  var $p24: ref;
  var $i25: i64;
  var $i26: i64;
  var $i27: i1;
  var $i28: i8;
  var $i29: i32;
  var $i30: i32;
  var $i31: i8;
  var $i32: i32;
  var $i18: i32;
  var $p33: ref;
  var $i34: i1;
  var $i35: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 708} $p2 := hcd_to_priv($p0);
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(960, 1));
    goto corral_source_split_4036;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 1);
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1, 0);
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 709} ldv_spin_lock();
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_4047;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 710} $i10 := reg_read32($p9, 100);
    goto SeqInstr_145, SeqInstr_146;

  SeqInstr_146:
    assume assertsPassed;
    goto SeqInstr_147;

  SeqInstr_147:
    call {:si_unique_call 711} {:cexpr "temp"} boogie_si_record_i32($i10);
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 8192);
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i10, 2);
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb14;

  $bb14:
    assume !($i20 == 1);
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    $i21 := $and.i32($i10, 64);
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_4079;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i32 := 0;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    $i18 := $i32;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_4063;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(16, 1));
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 714} spin_unlock_irqrestore($p33, $u0);
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i18, 0);
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i34 == 1);
    goto corral_source_split_4092;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    $i35 := 0;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    $i7 := $i35;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb21:
    assume $i34 == 1;
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    $i35 := 1;
    goto $bb23;

  $bb15:
    assume $i22 == 1;
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    $i23 := $load.i64($M.0, jiffies);
    goto corral_source_split_4082;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(2368, 1));
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    $i25 := $load.i64($M.0, $p24);
    goto corral_source_split_4084;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    $i26 := $sub.i64($i23, $i25);
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    $i27 := $sge.i64($i26, 0);
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb17;

  $bb18:
    assume {:verifier.code 0} true;
    assume $i27 == 1;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.0, $p1);
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    $i29 := $sext.i8.i32($i28);
    goto corral_source_split_4072;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    $i30 := $or.i32($i29, 2);
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i32.i8($i30);
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1, $i31);
    goto corral_source_split_4075;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    $i32 := 4;
    goto $bb20;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb13;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i10, 2);
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_4055;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb7:
    assume $i14 == 1;
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i10, $sub.i32(0, 3));
    call {:si_unique_call 712} {:cexpr "temp"} boogie_si_record_i32($i15);
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_4060;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 713} reg_write32($p17, 100, $i15);
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb9;

  SeqInstr_145:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_4041;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;
}



const isp1760_hub_control: ref;

axiom isp1760_hub_control == $sub.ref(0, 377215);

procedure isp1760_hub_control($p0: ref, $i1: i16, $i2: i16, $i3: i16, $p4: ref, $i5: i16) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.30, $M.0, $M.23, $M.22, $M.25, $M.24, $M.27, $M.26, $M.29, $M.28, $M.1, $M.32, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.38, $M.36, $M.40, $CurrAddr, $M.2, $M.4, $M.6, $M.8, $M.3, $M.5, $M.7, $M.9, assertsPassed;



implementation isp1760_hub_control($p0: ref, $i1: i16, $i2: i16, $i3: i16, $p4: ref, $i5: i16) returns ($r: i32)
{
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i32;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i32;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $i47: i1;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $i51: i32;
  var $i52: i1;
  var $i53: i32;
  var $i54: i1;
  var $i55: i32;
  var $i56: i1;
  var $i57: i32;
  var $p58: ref;
  var $p59: ref;
  var $i60: i32;
  var $i61: i64;
  var $i62: i64;
  var $i63: i64;
  var $p64: ref;
  var $p65: ref;
  var $i66: i32;
  var $i67: i32;
  var $i68: i1;
  var $p69: ref;
  var $p70: ref;
  var $i71: i32;
  var $p72: ref;
  var $p73: ref;
  var $i74: i32;
  var $p75: ref;
  var $p76: ref;
  var $p78: ref;
  var $i79: i32;
  var $i80: i1;
  var $i81: i32;
  var $i82: i1;
  var $i83: i32;
  var $i84: i32;
  var $i85: i16;
  var $p86: ref;
  var $p87: ref;
  var $i88: i32;
  var $i89: i32;
  var $i90: i1;
  var $i91: i32;
  var $i92: i32;
  var $i93: i32;
  var $i94: i1;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $i99: i64;
  var $i100: i1;
  var $i101: i64;
  var $i102: i64;
  var $i103: i64;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $i107: i64;
  var $i112: i64;
  var $p113: ref;
  var $i114: i64;
  var $i115: i64;
  var $i116: i1;
  var $i117: i32;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $i121: i32;
  var $p122: ref;
  var $p123: ref;
  var $i124: i32;
  var $i125: i32;
  var $i126: i1;
  var $p128: ref;
  var $p129: ref;
  var $i130: i32;
  var $i131: i32;
  var $i132: i32;
  var $i133: i32;
  var $i134: i32;
  var $i135: i32;
  var $i109: i32;
  var $i110: i32;
  var $i111: i32;
  var $i136: i32;
  var $i137: i32;
  var $i138: i32;
  var $i139: i32;
  var $i140: i1;
  var $i141: i64;
  var $p142: ref;
  var $i143: i64;
  var $i144: i64;
  var $i145: i1;
  var $i146: i32;
  var $p147: ref;
  var $p148: ref;
  var $p149: ref;
  var $i150: i32;
  var $i151: i32;
  var $i152: i1;
  var $p154: ref;
  var $p155: ref;
  var $i156: i32;
  var $i157: i32;
  var $p158: ref;
  var $p159: ref;
  var $i160: i32;
  var $i161: i32;
  var $i162: i32;
  var $i163: i32;
  var $i164: i32;
  var $i165: i32;
  var $i166: i32;
  var $i167: i1;
  var $p169: ref;
  var $p170: ref;
  var $i171: i32;
  var $i172: i1;
  var $i173: i32;
  var $i174: i32;
  var $i175: i32;
  var $i176: i32;
  var $i177: i1;
  var $i178: i32;
  var $i179: i32;
  var $i180: i32;
  var $i181: i1;
  var $i182: i32;
  var $i183: i32;
  var $i184: i32;
  var $i185: i1;
  var $i186: i32;
  var $i187: i32;
  var $i188: i32;
  var $i189: i1;
  var $i190: i32;
  var $i191: i32;
  var $i192: i32;
  var $i193: i1;
  var $i194: i1;
  var $i195: i1;
  var $i196: i32;
  var $i197: i32;
  var $i198: i16;
  var $i199: i32;
  var $i200: i1;
  var $i201: i32;
  var $i202: i1;
  var $p203: ref;
  var $p204: ref;
  var $i205: i32;
  var $i206: i32;
  var $i207: i1;
  var $i208: i32;
  var $i209: i1;
  var $i210: i1;
  var $i211: i1;
  var $i212: i1;
  var $i213: i1;
  var $i214: i1;
  var $i215: i1;
  var $p216: ref;
  var $p217: ref;
  var $i218: i32;
  var $i219: i32;
  var $i220: i1;
  var $i221: i32;
  var $i222: i1;
  var $p223: ref;
  var $p224: ref;
  var $i225: i32;
  var $p226: ref;
  var $i227: i32;
  var $i228: i32;
  var $i229: i1;
  var $p230: ref;
  var $p231: ref;
  var $i232: i32;
  var $i233: i32;
  var $i234: i1;
  var $i235: i32;
  var $i236: i1;
  var $i237: i32;
  var $i238: i1;
  var $i239: i32;
  var $i241: i32;
  var $i242: i32;
  var $i243: i64;
  var $i244: i64;
  var $i245: i64;
  var $p246: ref;
  var $i240: i32;
  var $p247: ref;
  var $p248: ref;
  var $p249: ref;
  var $p250: ref;
  var $i28: i32;
  var $p252: ref;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var vslice_dummy_var_49: i32;
  var vslice_dummy_var_50: i32;
  var vslice_dummy_var_51: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 715} {:cexpr "isp1760_hub_control:arg:typeReq"} boogie_si_record_i16($i1);
    call {:si_unique_call 716} {:cexpr "isp1760_hub_control:arg:wValue"} boogie_si_record_i16($i2);
    call {:si_unique_call 717} {:cexpr "isp1760_hub_control:arg:wIndex"} boogie_si_record_i16($i3);
    call {:si_unique_call 718} {:cexpr "isp1760_hub_control:arg:wLength"} boogie_si_record_i16($i5);
    goto corral_source_split_4096;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 719} $p6 := hcd_to_priv($p0);
    goto corral_source_split_4097;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 2384)), $mul.ref(8, 1));
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_4099;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 15);
    call {:si_unique_call 720} {:cexpr "ports"} boogie_si_record_i32($i9);
    goto corral_source_split_4100;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} ldv_spin_lock();
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i1);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i10, 8963);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i10, 40966);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i10, 41728);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i10, 41728);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb191:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb192:
    assume {:verifier.code 0} true;
    $i28 := $sub.i32(0, 32);
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    $p252 := $add.ref($add.ref($p6, $mul.ref(0, 2384)), $mul.ref(16, 1));
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 725} spin_unlock_irqrestore($p252, $u0);
    goto corral_source_split_4133;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    $r := $i28;
    return;

  $bb8:
    assume $i14 == 1;
    goto corral_source_split_4103;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    $i79 := $zext.i16.i32($i3);
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    $i80 := $eq.i32($i79, 0);
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    assume {:branchcond $i80} true;
    goto $bb86, $bb88;

  $bb88:
    assume !($i80 == 1);
    goto corral_source_split_4205;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    $i81 := $zext.i16.i32($i3);
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    $i82 := $sgt.i32($i81, $i9);
    goto corral_source_split_4207;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    $i83 := $zext.i16.i32($i3);
    goto corral_source_split_4209;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    $i84 := $sub.i32($i83, 1);
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    $i85 := $trunc.i32.i16($i84);
    call {:si_unique_call 736} {:cexpr "wIndex"} boogie_si_record_i16($i85);
    goto corral_source_split_4211;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    $p87 := $load.ref($M.0, $p86);
    goto corral_source_split_4213;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 737} $i88 := reg_read32($p87, 100);
    goto SeqInstr_154, SeqInstr_155;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  SeqInstr_156:
    call {:si_unique_call 738} {:cexpr "temp"} boogie_si_record_i32($i88);
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    $i89 := $and.i32($i88, 2);
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    $i90 := $ne.i32($i89, 0);
    goto corral_source_split_4216;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  $bb93:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    $i92 := 0;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    goto corral_source_split_4221;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    $i93 := $and.i32($i88, 64);
    goto corral_source_split_4222;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    $i94 := $ne.i32($i93, 0);
    goto corral_source_split_4223;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    assume {:branchcond $i94} true;
    goto $bb95, $bb96;

  $bb96:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    $i136, $i137, $i138 := $i88, $i92, 0;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4276;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    $i139 := $and.i32($i136, 256);
    goto corral_source_split_4277;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    $i140 := $ne.i32($i139, 0);
    goto corral_source_split_4278;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    assume !($i140 == 1);
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    $i163, $i164, $i165 := $i136, $i137, $i138;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4311;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    $i166 := $and.i32($i163, 8192);
    goto corral_source_split_4312;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    $i167 := $ne.i32($i166, 0);
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    assume {:branchcond $i167} true;
    goto $bb116, $bb117;

  $bb117:
    assume !($i167 == 1);
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    $i171 := $and.i32($i163, 1);
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    $i172 := $ne.i32($i171, 0);
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    assume {:branchcond $i172} true;
    goto $bb119, $bb120;

  $bb120:
    assume !($i172 == 1);
    assume {:verifier.code 0} true;
    $i175 := $i164;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    goto corral_source_split_4327;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    $i176 := $and.i32($i163, 4);
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    $i177 := $ne.i32($i176, 0);
    goto corral_source_split_4329;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    assume {:branchcond $i177} true;
    goto $bb122, $bb123;

  $bb123:
    assume !($i177 == 1);
    assume {:verifier.code 0} true;
    $i179 := $i175;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    goto corral_source_split_4334;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    $i180 := $and.i32($i163, 192);
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    $i181 := $ne.i32($i180, 0);
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    assume {:branchcond $i181} true;
    goto $bb125, $bb126;

  $bb126:
    assume !($i181 == 1);
    assume {:verifier.code 0} true;
    $i183 := $i179;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    goto corral_source_split_4341;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    $i184 := $and.i32($i163, 256);
    goto corral_source_split_4342;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    $i185 := $ne.i32($i184, 0);
    goto corral_source_split_4343;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    assume {:branchcond $i185} true;
    goto $bb128, $bb129;

  $bb129:
    assume !($i185 == 1);
    assume {:verifier.code 0} true;
    $i187 := $i183;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    goto corral_source_split_4348;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    $i188 := $and.i32($i163, 4096);
    goto corral_source_split_4349;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    $i189 := $ne.i32($i188, 0);
    goto corral_source_split_4350;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    assume {:branchcond $i189} true;
    goto $bb131, $bb132;

  $bb132:
    assume !($i189 == 1);
    assume {:verifier.code 0} true;
    $i191 := $i187;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    goto corral_source_split_4355;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 768} put_unaligned_le32($i191, $p4);
    goto corral_source_split_4356;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    $i28 := $i165;
    goto $bb41;

  $bb131:
    assume $i189 == 1;
    goto corral_source_split_4352;

  corral_source_split_4352:
    assume {:verifier.code 0} true;
    $i190 := $or.i32($i187, 256);
    call {:si_unique_call 767} {:cexpr "status"} boogie_si_record_i32($i190);
    goto corral_source_split_4353;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    $i191 := $i190;
    goto $bb133;

  $bb128:
    assume $i185 == 1;
    goto corral_source_split_4345;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    $i186 := $or.i32($i183, 16);
    call {:si_unique_call 766} {:cexpr "status"} boogie_si_record_i32($i186);
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    $i187 := $i186;
    goto $bb130;

  $bb125:
    assume $i181 == 1;
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    $i182 := $or.i32($i179, 4);
    call {:si_unique_call 765} {:cexpr "status"} boogie_si_record_i32($i182);
    goto corral_source_split_4339;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    $i183 := $i182;
    goto $bb127;

  $bb122:
    assume $i177 == 1;
    goto corral_source_split_4331;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    $i178 := $or.i32($i175, 2);
    call {:si_unique_call 764} {:cexpr "status"} boogie_si_record_i32($i178);
    goto corral_source_split_4332;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    $i179 := $i178;
    goto $bb124;

  $bb119:
    assume $i172 == 1;
    goto corral_source_split_4323;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    $i173 := $or.i32($i164, 1);
    call {:si_unique_call 762} {:cexpr "status"} boogie_si_record_i32($i173);
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    $i174 := $or.i32($i173, 1024);
    call {:si_unique_call 763} {:cexpr "status"} boogie_si_record_i32($i174);
    goto corral_source_split_4325;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    $i175 := $i174;
    goto $bb121;

  $bb116:
    assume $i167 == 1;
    goto corral_source_split_4315;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    $p170 := $load.ref($M.0, $p169);
    goto corral_source_split_4317;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 761} dev_err.ref.ref($p170, .str.51);
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb107:
    assume $i140 == 1;
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    $i141 := $load.i64($M.0, jiffies);
    goto corral_source_split_4281;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p6, $mul.ref(0, 2384)), $mul.ref(2368, 1));
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    $i143 := $load.i64($M.0, $p142);
    goto corral_source_split_4283;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    $i144 := $sub.i64($i141, $i143);
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    $i145 := $sge.i64($i144, 0);
    goto corral_source_split_4285;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    assume {:branchcond $i145} true;
    goto $bb110, $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    assume !($i145 == 1);
    goto $bb109;

  $bb110:
    assume $i145 == 1;
    goto corral_source_split_4287;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    $i146 := $or.i32($i137, 1048576);
    call {:si_unique_call 752} {:cexpr "status"} boogie_si_record_i32($i146);
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p6, $mul.ref(0, 2384)), $mul.ref(2368, 1));
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p147, 0);
    goto corral_source_split_4290;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_4291;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    $p149 := $load.ref($M.0, $p148);
    goto corral_source_split_4292;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    $i150 := $and.i32($i136, $sub.i32(0, 257));
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 753} reg_write32($p149, 100, $i150);
    goto corral_source_split_4294;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 754} $i151 := handshake($p0, 100, 256, 0, 750);
    goto SeqInstr_163, SeqInstr_164;

  SeqInstr_164:
    assume assertsPassed;
    goto SeqInstr_165;

  SeqInstr_165:
    call {:si_unique_call 755} {:cexpr "retval"} boogie_si_record_i32($i151);
    goto corral_source_split_4295;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    $i152 := $ne.i32($i151, 0);
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    assume {:branchcond $i152} true;
    goto $bb112, $bb113;

  $bb113:
    assume !($i152 == 1);
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_4305;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    $p159 := $load.ref($M.0, $p158);
    goto corral_source_split_4306;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 757} $i160 := reg_read32($p159, 100);
    goto SeqInstr_166, SeqInstr_167;

  SeqInstr_167:
    assume assertsPassed;
    goto SeqInstr_168;

  SeqInstr_168:
    call {:si_unique_call 758} {:cexpr "tmp___2"} boogie_si_record_i32($i160);
    goto corral_source_split_4307;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    $i161 := $zext.i16.i32($i85);
    goto corral_source_split_4308;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 759} $i162 := check_reset_complete($p0, $i161, $i160);
    call {:si_unique_call 760} {:cexpr "tmp___3"} boogie_si_record_i32($i162);
    goto corral_source_split_4309;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    $i163, $i164, $i165 := $i162, $i146, $i151;
    goto $bb115;

  SeqInstr_166:
    assume !assertsPassed;
    return;

  $bb112:
    assume $i152 == 1;
    goto corral_source_split_4298;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    $p155 := $load.ref($M.0, $p154);
    goto corral_source_split_4300;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    $i156 := $zext.i16.i32($i85);
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    $i157 := $add.i32($i156, 1);
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} dev_err.ref.ref.i32.i32($p155, .str.50, $i157, $i151);
    goto corral_source_split_4303;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    goto $bb40;

  SeqInstr_163:
    assume !assertsPassed;
    return;

  $bb95:
    assume $i94 == 1;
    goto corral_source_split_4225;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4226;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    $p97 := $load.ref($M.0, $p96);
    goto corral_source_split_4227;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 740} dev_err.ref.ref($p97, .str.48);
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p6, $mul.ref(0, 2384)), $mul.ref(2368, 1));
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    $i99 := $load.i64($M.0, $p98);
    goto corral_source_split_4230;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    $i100 := $eq.i64($i99, 0);
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i100 == 1);
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    $i112 := $load.i64($M.0, jiffies);
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p6, $mul.ref(0, 2384)), $mul.ref(2368, 1));
    goto corral_source_split_4246;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    $i114 := $load.i64($M.0, $p113);
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    $i115 := $sub.i64($i112, $i114);
    goto corral_source_split_4248;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    $i116 := $sge.i64($i115, 0);
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i116 == 1);
    assume {:verifier.code 0} true;
    $i133, $i134, $i135 := $i88, $i92, 0;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i109, $i110, $i111 := $i133, $i134, $i135;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    $i136, $i137, $i138 := $i109, $i110, $i111;
    goto $bb106;

  $bb100:
    assume $i116 == 1;
    goto corral_source_split_4253;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    $i117 := $or.i32($i92, 262144);
    call {:si_unique_call 744} {:cexpr "status"} boogie_si_record_i32($i117);
    goto corral_source_split_4254;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p6, $mul.ref(0, 2384)), $mul.ref(2368, 1));
    goto corral_source_split_4255;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p118, 0);
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_4257;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    $p120 := $load.ref($M.0, $p119);
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 745} $i121 := reg_read32($p120, 100);
    goto SeqInstr_157, SeqInstr_158;

  SeqInstr_158:
    assume assertsPassed;
    goto SeqInstr_159;

  SeqInstr_159:
    call {:si_unique_call 746} {:cexpr "temp"} boogie_si_record_i32($i121);
    goto corral_source_split_4259;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_4260;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    $p123 := $load.ref($M.0, $p122);
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    $i124 := $and.i32($i121, $sub.i32(0, 67));
    goto corral_source_split_4262;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 747} reg_write32($p123, 100, $i124);
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} $i125 := handshake($p0, 100, 64, 0, 2000);
    goto SeqInstr_160, SeqInstr_161;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  SeqInstr_162:
    call {:si_unique_call 749} {:cexpr "retval"} boogie_si_record_i32($i125);
    goto corral_source_split_4264;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    $i126 := $ne.i32($i125, 0);
    goto corral_source_split_4265;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb102, $bb103;

  $bb103:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    $i132 := $and.i32($i121, $sub.i32(0, 3265));
    call {:si_unique_call 751} {:cexpr "temp"} boogie_si_record_i32($i132);
    goto corral_source_split_4274;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    $i133, $i134, $i135 := $i132, $i117, $i125;
    goto $bb105;

  $bb102:
    assume $i126 == 1;
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    $p129 := $load.ref($M.0, $p128);
    goto corral_source_split_4269;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    $i130 := $zext.i16.i32($i85);
    goto corral_source_split_4270;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    $i131 := $add.i32($i130, 1);
    goto corral_source_split_4271;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 750} dev_err.ref.ref.i32.i32($p129, .str.49, $i131, $i125);
    goto corral_source_split_4272;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    goto $bb40;

  SeqInstr_160:
    assume !assertsPassed;
    return;

  SeqInstr_157:
    assume !assertsPassed;
    return;

  $bb97:
    assume $i100 == 1;
    goto corral_source_split_4233;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} $i101 := msecs_to_jiffies(20);
    call {:si_unique_call 742} {:cexpr "tmp___1"} boogie_si_record_i64($i101);
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    $i102 := $load.i64($M.0, jiffies);
    goto corral_source_split_4235;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    $i103 := $add.i64($i101, $i102);
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p6, $mul.ref(0, 2384)), $mul.ref(2368, 1));
    goto corral_source_split_4237;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p104, $i103);
    goto corral_source_split_4238;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(328, 1));
    goto corral_source_split_4239;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p6, $mul.ref(0, 2384)), $mul.ref(2368, 1));
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    $i107 := $load.i64($M.0, $p106);
    goto corral_source_split_4241;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 743} vslice_dummy_var_50 := ldv_mod_timer_76($p105, $i107);
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    $i109, $i110, $i111 := $i88, $i92, 0;
    goto $bb99;

  $bb92:
    assume $i90 == 1;
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    $i91 := $or.i32(0, 65536);
    call {:si_unique_call 739} {:cexpr "status"} boogie_si_record_i32($i91);
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    $i92 := $i91;
    goto $bb94;

  SeqInstr_154:
    assume !assertsPassed;
    return;

  $bb89:
    assume {:verifier.code 0} true;
    assume $i82 == 1;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb86:
    assume {:verifier.code 0} true;
    assume $i80 == 1;
    goto $bb87;

  $bb6:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i10, 40966);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb10;

  $bb11:
    assume $i15 == 1;
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    $p78 := $bitcast.ref.ref($p4);
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 722} isp1760_hub_descriptor($p6, $p78);
    goto corral_source_split_4109;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    $i28 := 0;
    goto $bb41;

  $bb4:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i10, 40960);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i10, 40960);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb10;

  $bb15:
    assume $i17 == 1;
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    call {:si_unique_call 723} cmdloc_dummy_var_1 := $memset.i8(cmdloc_dummy_var_0, $p4, 0, 4, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_1;
    goto corral_source_split_4112;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    $i28 := 0;
    goto $bb41;

  $bb13:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i10, 8963);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb10;

  $bb17:
    assume $i18 == 1;
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    $i196 := $zext.i16.i32($i3);
    goto corral_source_split_4115;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    $i197 := $and.i32($i196, 255);
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    $i198 := $trunc.i32.i16($i197);
    call {:si_unique_call 724} {:cexpr "wIndex"} boogie_si_record_i16($i198);
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    $i199 := $zext.i16.i32($i198);
    goto corral_source_split_4118;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    $i200 := $eq.i32($i199, 0);
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    assume {:branchcond $i200} true;
    goto $bb146, $bb148;

  $bb148:
    assume !($i200 == 1);
    goto corral_source_split_4360;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    $i201 := $zext.i16.i32($i198);
    goto corral_source_split_4361;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    $i202 := $sgt.i32($i201, $i9);
    goto corral_source_split_4362;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    assume {:branchcond $i202} true;
    goto $bb149, $bb150;

  $bb150:
    assume !($i202 == 1);
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    $p204 := $load.ref($M.0, $p203);
    goto corral_source_split_4365;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 769} $i205 := reg_read32($p204, 100);
    goto SeqInstr_169, SeqInstr_170;

  SeqInstr_170:
    assume assertsPassed;
    goto SeqInstr_171;

  SeqInstr_171:
    call {:si_unique_call 770} {:cexpr "temp"} boogie_si_record_i32($i205);
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    $i206 := $and.i32($i205, 8192);
    goto corral_source_split_4367;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    $i207 := $ne.i32($i206, 0);
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    assume {:branchcond $i207} true;
    goto $bb152, $bb153;

  $bb153:
    assume !($i207 == 1);
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    $i208 := $zext.i16.i32($i2);
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb155:
    assume {:verifier.code 0} true;
    $i209 := $slt.i32($i208, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i209} true;
    goto $bb156, $bb157;

  $bb157:
    assume !($i209 == 1);
    assume {:verifier.code 0} true;
    $i210 := $slt.i32($i208, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i210} true;
    goto $bb158, $bb159;

  $bb159:
    assume !($i210 == 1);
    assume {:verifier.code 0} true;
    $i211 := $eq.i32($i208, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i211} true;
    goto $bb160, $bb161;

  $bb161:
    assume {:verifier.code 0} true;
    assume !($i211 == 1);
    goto $bb162;

  $bb162:
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb190:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb160:
    assume $i211 == 1;
    goto corral_source_split_4372;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($p6, $mul.ref(0, 2384)), $mul.ref(8, 1));
    goto corral_source_split_4373;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    $i227 := $load.i32($M.0, $p226);
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    $i228 := $and.i32($i227, 16);
    goto corral_source_split_4375;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    $i229 := $ne.i32($i228, 0);
    goto corral_source_split_4376;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    assume {:branchcond $i229} true;
    goto $bb178, $bb179;

  $bb179:
    assume !($i229 == 1);
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_4392;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    $p250 := $load.ref($M.0, $p249);
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 772} vslice_dummy_var_51 := reg_read32($p250, 32);
    goto SeqInstr_172, SeqInstr_173;

  SeqInstr_173:
    assume assertsPassed;
    goto SeqInstr_174;

  SeqInstr_174:
    goto corral_source_split_4394;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    $i28 := 0;
    goto $bb41;

  SeqInstr_172:
    assume !assertsPassed;
    return;

  $bb178:
    assume $i229 == 1;
    goto corral_source_split_4405;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    $p230 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    $p231 := $load.ref($M.0, $p230);
    goto corral_source_split_4407;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    $i232 := $or.i32($i205, 4096);
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 774} reg_write32($p231, 100, $i232);
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb158:
    assume $i210 == 1;
    assume {:verifier.code 0} true;
    $i212 := $eq.i32($i208, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i212} true;
    goto $bb163, $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    assume !($i212 == 1);
    goto $bb162;

  $bb163:
    assume $i212 == 1;
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    $i233 := $and.i32($i205, 64);
    goto corral_source_split_4379;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    $i234 := $ne.i32($i233, 0);
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    assume {:branchcond $i234} true;
    goto $bb181, $bb182;

  $bb182:
    assume !($i234 == 1);
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb183:
    assume {:verifier.code 0} true;
    $i235 := $and.i32($i205, 5);
    goto corral_source_split_4413;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    $i236 := $eq.i32($i235, 1);
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    assume {:branchcond $i236} true;
    goto $bb184, $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    assume !($i236 == 1);
    goto $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    $i241 := $or.i32($i205, 256);
    call {:si_unique_call 775} {:cexpr "temp"} boogie_si_record_i32($i241);
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    $i242 := $and.i32($i241, $sub.i32(0, 5));
    call {:si_unique_call 776} {:cexpr "temp"} boogie_si_record_i32($i242);
    goto corral_source_split_4421;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} $i243 := msecs_to_jiffies(50);
    call {:si_unique_call 778} {:cexpr "tmp___4"} boogie_si_record_i64($i243);
    goto corral_source_split_4422;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    $i244 := $load.i64($M.0, jiffies);
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    $i245 := $add.i64($i243, $i244);
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    $p246 := $add.ref($add.ref($p6, $mul.ref(0, 2384)), $mul.ref(2368, 1));
    goto corral_source_split_4425;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p246, $i245);
    assume {:verifier.code 0} true;
    $i240 := $i242;
    goto $bb189;

  $bb189:
    assume {:verifier.code 0} true;
    goto corral_source_split_4430;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_4431;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    $p248 := $load.ref($M.0, $p247);
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 780} reg_write32($p248, 100, $i240);
    goto corral_source_split_4433;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb184:
    assume $i236 == 1;
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    $i237 := $and.i32($i205, 3072);
    goto corral_source_split_4417;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    $i238 := $eq.i32($i237, 1024);
    goto corral_source_split_4418;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    assume {:branchcond $i238} true;
    goto $bb187, $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    assume !($i238 == 1);
    goto $bb186;

  $bb187:
    assume $i238 == 1;
    goto corral_source_split_4427;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    $i239 := $or.i32($i205, 8192);
    call {:si_unique_call 779} {:cexpr "temp"} boogie_si_record_i32($i239);
    goto corral_source_split_4428;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    $i240 := $i239;
    goto $bb189;

  $bb181:
    assume $i234 == 1;
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb156:
    assume $i209 == 1;
    assume {:verifier.code 0} true;
    $i213 := $slt.i32($i208, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i213} true;
    goto $bb165, $bb166;

  $bb166:
    assume !($i213 == 1);
    assume {:verifier.code 0} true;
    $i214 := $eq.i32($i208, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i214} true;
    goto $bb167, $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    assume !($i214 == 1);
    goto $bb162;

  $bb167:
    assume $i214 == 1;
    goto corral_source_split_4382;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    $i219 := $and.i32($i205, 4);
    goto corral_source_split_4383;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    $i220 := $eq.i32($i219, 0);
    goto corral_source_split_4384;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    assume {:branchcond $i220} true;
    goto $bb172, $bb174;

  $bb174:
    assume !($i220 == 1);
    goto corral_source_split_4396;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    $i221 := $and.i32($i205, 256);
    goto corral_source_split_4397;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    $i222 := $ne.i32($i221, 0);
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    assume {:branchcond $i222} true;
    goto $bb175, $bb176;

  $bb176:
    assume !($i222 == 1);
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_4400;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    $p224 := $load.ref($M.0, $p223);
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    $i225 := $or.i32($i205, 128);
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 773} reg_write32($p224, 100, $i225);
    goto corral_source_split_4403;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb175:
    assume {:verifier.code 0} true;
    assume $i222 == 1;
    goto $bb173;

  $bb173:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb172:
    assume {:verifier.code 0} true;
    assume $i220 == 1;
    goto $bb173;

  $bb165:
    assume $i213 == 1;
    assume {:verifier.code 0} true;
    $i215 := $eq.i32($i208, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i215} true;
    goto $bb169, $bb170;

  $bb170:
    assume {:verifier.code 0} true;
    assume !($i215 == 1);
    goto $bb162;

  $bb169:
    assume $i215 == 1;
    goto corral_source_split_4386;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_4387;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    $p217 := $load.ref($M.0, $p216);
    goto corral_source_split_4388;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    $i218 := $or.i32($i205, 4);
    goto corral_source_split_4389;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 771} reg_write32($p217, 100, $i218);
    goto corral_source_split_4390;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb152:
    assume $i207 == 1;
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    $i28 := 0;
    goto $bb41;

  SeqInstr_169:
    assume !assertsPassed;
    return;

  $bb149:
    assume {:verifier.code 0} true;
    assume $i202 == 1;
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb146:
    assume {:verifier.code 0} true;
    assume $i200 == 1;
    goto $bb147;

  $bb2:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i10, 8195);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i10, 8961);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i10, 8961);
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb10;

  $bb23:
    assume $i21 == 1;
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    $i29 := $zext.i16.i32($i3);
    goto corral_source_split_4122;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 0);
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb44;

  $bb44:
    assume !($i30 == 1);
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    $i31 := $zext.i16.i32($i3);
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    $i32 := $sgt.i32($i31, $i9);
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 726} $i35 := reg_read32($p34, 100);
    goto SeqInstr_148, SeqInstr_149;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  SeqInstr_150:
    call {:si_unique_call 727} {:cexpr "temp"} boogie_si_record_i32($i35);
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    $i36 := $zext.i16.i32($i2);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $i37 := $slt.i32($i36, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    $i38 := $slt.i32($i36, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    $i39 := $slt.i32($i36, 20);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i36, 20);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb55:
    assume $i40 == 1;
    goto corral_source_split_4145;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.0, $p75);
    goto corral_source_split_4174;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 730} vslice_dummy_var_49 := reg_read32($p76, 32);
    goto SeqInstr_151, SeqInstr_152;

  SeqInstr_152:
    assume assertsPassed;
    goto SeqInstr_153;

  SeqInstr_153:
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    $i28 := 0;
    goto $bb41;

  SeqInstr_151:
    assume !assertsPassed;
    return;

  $bb53:
    assume $i39 == 1;
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb51:
    assume $i38 == 1;
    assume {:verifier.code 0} true;
    $i41 := $slt.i32($i36, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i41 == 1);
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb58:
    assume $i41 == 1;
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb49:
    assume $i37 == 1;
    assume {:verifier.code 0} true;
    $i42 := $slt.i32($i36, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    $i43 := $slt.i32($i36, 16);
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i43 == 1);
    goto corral_source_split_4151;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.0, $p72);
    goto corral_source_split_4153;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    $i74 := $or.i32($i35, 2);
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 728} reg_write32($p73, 100, $i74);
    goto corral_source_split_4155;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb62:
    assume $i43 == 1;
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i36, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb57;

  $bb64:
    assume $i44 == 1;
    goto corral_source_split_4157;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p6, $mul.ref(0, 2384)), $mul.ref(8, 1));
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.0, $p65);
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    $i67 := $and.i32($i66, 16);
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    $i68 := $ne.i32($i67, 0);
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb82:
    assume $i68 == 1;
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_4200;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.0, $p69);
    goto corral_source_split_4201;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    $i71 := $and.i32($i35, $sub.i32(0, 4097));
    goto corral_source_split_4202;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 735} reg_write32($p70, 100, $i71);
    goto corral_source_split_4203;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb60:
    assume $i42 == 1;
    assume {:verifier.code 0} true;
    $i45 := $slt.i32($i36, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i36, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb57;

  $bb68:
    assume $i46 == 1;
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    $i51 := $and.i32($i35, 256);
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, 0);
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $i53 := $and.i32($i35, 128);
    goto corral_source_split_4179;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i53, 0);
    goto corral_source_split_4180;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb76:
    assume $i54 == 1;
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    $i55 := $and.i32($i35, 4);
    goto corral_source_split_4183;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    $i56 := $eq.i32($i55, 0);
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    assume {:branchcond $i56} true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $i57 := $and.i32($i35, $sub.i32(0, 3));
    call {:si_unique_call 731} {:cexpr "temp"} boogie_si_record_i32($i57);
    goto corral_source_split_4188;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_4189;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    $i60 := $or.i32($i57, 64);
    goto corral_source_split_4191;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 732} reg_write32($p59, 100, $i60);
    goto corral_source_split_4192;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 733} $i61 := msecs_to_jiffies(40);
    call {:si_unique_call 734} {:cexpr "tmp___0"} boogie_si_record_i64($i61);
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    $i62 := $load.i64($M.0, jiffies);
    goto corral_source_split_4194;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    $i63 := $add.i64($i61, $i62);
    goto corral_source_split_4195;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p6, $mul.ref(0, 2384)), $mul.ref(2368, 1));
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p64, $i63);
    goto corral_source_split_4197;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb78:
    assume $i56 == 1;
    goto corral_source_split_4186;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb73:
    assume $i52 == 1;
    goto corral_source_split_4177;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb66:
    assume $i45 == 1;
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i36, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb70, $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    assume !($i47 == 1);
    goto $bb57;

  $bb70:
    assume $i47 == 1;
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    $i50 := $and.i32($i35, $sub.i32(0, 5));
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 729} reg_write32($p49, 100, $i50);
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    goto $bb72;

  SeqInstr_148:
    assume !assertsPassed;
    return;

  $bb45:
    assume {:verifier.code 0} true;
    assume $i32 == 1;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb42:
    assume {:verifier.code 0} true;
    assume $i30 == 1;
    goto $bb43;

  $bb21:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i10, 8195);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb10;

  $bb25:
    assume $i22 == 1;
    goto corral_source_split_4125;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    $i192 := $zext.i16.i32($i2);
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    $i193 := $slt.i32($i192, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i193} true;
    goto $bb136, $bb137;

  $bb137:
    assume !($i193 == 1);
    assume {:verifier.code 0} true;
    $i194 := $eq.i32($i192, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i194} true;
    goto $bb138, $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    assume !($i194 == 1);
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb138:
    assume {:verifier.code 0} true;
    assume $i194 == 1;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    $i28 := 0;
    goto $bb41;

  $bb136:
    assume $i193 == 1;
    assume {:verifier.code 0} true;
    $i195 := $eq.i32($i192, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i195} true;
    goto $bb142, $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    assume !($i195 == 1);
    goto $bb141;

  $bb142:
    assume $i195 == 1;
    goto corral_source_split_4358;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb19:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i10, 8193);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb10;

  $bb27:
    assume $i23 == 1;
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    $i24 := $zext.i16.i32($i2);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i24, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i24, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i28 := 0;
    goto $bb41;

  $bb30:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i24, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb35;

  $bb36:
    assume $i27 == 1;
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    goto $bb33;
}



const isp1760_clear_tt_buffer_complete: ref;

axiom isp1760_clear_tt_buffer_complete == $sub.ref(0, 378247);

procedure isp1760_clear_tt_buffer_complete($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.30, $M.0, $CurrAddr, $M.36, $M.38, assertsPassed, $M.1, $M.32, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.40, $M.23, $M.22, $M.25, $M.24, $M.27, $M.26, $M.29, $M.28, $M.2, $M.4, $M.6, $M.8, $M.3, $M.5, $M.7, $M.9;



implementation isp1760_clear_tt_buffer_complete($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 781} $p2 := hcd_to_priv($p0);
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(32, 1));
    goto corral_source_split_4437;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_4438;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_4439;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} ldv_spin_lock();
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p5, $mul.ref(0, 48)), $mul.ref(44, 1));
    goto corral_source_split_4446;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, 0);
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 783} schedule_ptds($p0);
    goto SeqInstr_175, SeqInstr_176;

  SeqInstr_176:
    assume assertsPassed;
    goto SeqInstr_177;

  SeqInstr_177:
    goto corral_source_split_4448;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(16, 1));
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} spin_unlock_irqrestore($p9, $u0);
    goto corral_source_split_4450;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_175:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const hcd_to_priv: ref;

axiom hcd_to_priv == $sub.ref(0, 379279);

procedure hcd_to_priv($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation hcd_to_priv($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(968, 1));
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_4455;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const schedule_ptds: ref;

axiom schedule_ptds == $sub.ref(0, 380311);

procedure schedule_ptds($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.30, $M.36, $M.38, assertsPassed, $M.1, $M.32, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.40, $M.23, $M.22, $M.25, $M.24, $M.27, $M.26, $M.29, $M.28, $M.2, $M.4, $M.6, $M.8, $M.3, $M.5, $M.7, $M.9;



implementation schedule_ptds($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;
  var $i13: i64;
  var $p15: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p25: ref;
  var $p26: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i64;
  var $i31: i1;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $p39: ref;
  var $p40: ref;
  var $p42: ref;
  var $i43: i64;
  var $i44: i1;
  var $p32: ref;
  var $p33: ref;
  var $i45: i32;
  var $i46: i1;
  var $i16: i32;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p51: ref;
  var $p52: ref;
  var $p54: ref;
  var $i55: i64;
  var $i56: i64;
  var $i57: i1;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p65: ref;
  var $p66: ref;
  var $p68: ref;
  var $i69: i64;
  var $i70: i1;
  var $p58: ref;
  var $p59: ref;
  var $p72: ref;
  var $p73: ref;
  var $i74: i64;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p80: ref;
  var $p81: ref;
  var $p83: ref;
  var $i84: i64;
  var $i85: i64;
  var $i86: i1;
  var $p90: ref;
  var $p91: ref;
  var $p93: ref;
  var $i94: i64;
  var $i95: i1;
  var $p87: ref;
  var $p88: ref;
  var $i96: i32;
  var $i97: i1;
  var $i71: i32;
  var vslice_dummy_var_52: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 785} $p1 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_4457;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p1);
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4460;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, $p1);
    goto corral_source_split_4461;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_4462;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_4463;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 790} $p15 := hcd_to_priv($p0);
    goto corral_source_split_4480;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb8;

  $bb8:
    call $p17, $p18, $i19, $p20, $p21, $p22, $p23, $p25, $p26, $p28, $i29, $i30, $i31, $p34, $i35, $i36, $p37, $p39, $p40, $p42, $i43, $i44, $p32, $p33, $i45, $i46, $i16 := schedule_ptds_loop_$bb8($p0, $p1, $p15, $p17, $p18, $i19, $p20, $p21, $p22, $p23, $p25, $p26, $p28, $i29, $i30, $i31, $p34, $i35, $i36, $p37, $p39, $p40, $p42, $i43, $i44, $p32, $p33, $i45, $i46, $i16);
    goto $bb8_last;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p15, $mul.ref(0, 2384)), $mul.ref(2312, 1));
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_4485;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i16);
    goto corral_source_split_4486;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($p18, $mul.ref($i19, 16));
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p18, $mul.ref($i19, 16)), $mul.ref(0, 1));
    goto corral_source_split_4488;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.34, $p21);
    goto corral_source_split_4489;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_4490;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p23, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4491;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_4492;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p23, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_4495;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p20);
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i29, $i30);
    goto corral_source_split_4497;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i45 := $add.i32($i16, 1);
    call {:si_unique_call 795} {:cexpr "i"} boogie_si_record_i32($i45);
    goto corral_source_split_4521;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    $i46 := $sle.i32($i45, 2);
    goto corral_source_split_4522;

  corral_source_split_4522:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_4525;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p48);
    goto corral_source_split_4526;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p49, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4527;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    goto corral_source_split_4529;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p49, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    $i55 := $p2i.ref.i64($p54);
    goto corral_source_split_4531;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    $i56 := $p2i.ref.i64($p1);
    goto corral_source_split_4532;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    $i57 := $ne.i64($i55, $i56);
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i57 == 1);
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i71 := 0;
    goto $bb32;

  $bb32:
    call $p72, $p73, $i74, $p75, $p76, $p77, $p78, $p80, $p81, $p83, $i84, $i85, $i86, $p90, $p91, $p93, $i94, $i95, $p87, $p88, $i96, $i97, $i71 := schedule_ptds_loop_$bb32($p0, $p15, $p72, $p73, $i74, $p75, $p76, $p77, $p78, $p80, $p81, $p83, $i84, $i85, $i86, $p90, $p91, $p93, $i94, $i95, $p87, $p88, $i96, $i97, $i71);
    goto $bb32_last;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p15, $mul.ref(0, 2384)), $mul.ref(2312, 1));
    goto corral_source_split_4556;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p72);
    goto corral_source_split_4557;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    $i74 := $sext.i32.i64($i71);
    goto corral_source_split_4558;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($p73, $mul.ref($i74, 16));
    goto corral_source_split_4559;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p73, $mul.ref($i74, 16)), $mul.ref(0, 1));
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.34, $p76);
    goto corral_source_split_4561;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    $p78 := $bitcast.ref.ref($p77);
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($add.ref($p78, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4563;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.0, $p80);
    goto corral_source_split_4564;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    goto corral_source_split_4565;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p78, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_4566;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    $i84 := $p2i.ref.i64($p83);
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    $i85 := $p2i.ref.i64($p75);
    goto corral_source_split_4568;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    $i86 := $ne.i64($i84, $i85);
    goto corral_source_split_4569;

  corral_source_split_4569:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i86 == 1);
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i96 := $add.i32($i71, 1);
    call {:si_unique_call 799} {:cexpr "i"} boogie_si_record_i32($i96);
    goto corral_source_split_4585;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    $i97 := $sle.i32($i96, 2);
    goto corral_source_split_4586;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb42:
    assume $i97 == 1;
    assume {:verifier.code 0} true;
    $i71 := $i96;
    goto $bb42_dummy;

  $bb34:
    assume $i86 == 1;
    goto corral_source_split_4571;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    $p87, $p88 := $p77, $p81;
    goto $bb37;

  $bb37:
    call $p90, $p91, $p93, $i94, $i95, $p87, $p88 := schedule_ptds_loop_$bb37($p0, $i85, $p90, $p91, $p93, $i94, $i95, $p87, $p88);
    goto $bb37_last;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 798} enqueue_qtds($p0, $p87);
    goto SeqInstr_181, SeqInstr_182;

  SeqInstr_182:
    assume assertsPassed;
    goto SeqInstr_183;

  SeqInstr_183:
    goto corral_source_split_4575;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($add.ref($p88, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4576;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.0, $p90);
    goto corral_source_split_4577;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    goto corral_source_split_4578;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p88, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_4579;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    $i94 := $p2i.ref.i64($p93);
    goto corral_source_split_4580;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    $i95 := $ne.i64($i94, $i85);
    goto corral_source_split_4581;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i95 == 1);
    goto corral_source_split_4583;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb39:
    assume $i95 == 1;
    assume {:verifier.code 0} true;
    $p87, $p88 := $p88, $p91;
    goto $bb39_dummy;

  SeqInstr_181:
    assume !assertsPassed;
    return;

  $bb24:
    assume $i57 == 1;
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    $p58, $p59 := $p52, $p48;
    goto $bb27;

  $bb27:
    call $p60, $p61, $p62, $p63, $p65, $p66, $p68, $i69, $i70, $p58, $p59 := schedule_ptds_loop_$bb27($p0, $i56, $p60, $p61, $p62, $p63, $p65, $p66, $p68, $i69, $i70, $p58, $p59);
    goto $bb27_last;

  corral_source_split_4537:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p59, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_4540;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 796} isp1760_urb_done($p0, $p61);
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    $p62 := $M.35;
    goto corral_source_split_4542;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p59);
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 797} kmem_cache_free($p62, $p63);
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($p58, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4545;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_4546;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p58, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_4548;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    $i69 := $p2i.ref.i64($p68);
    goto corral_source_split_4549;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    $i70 := $ne.i64($i69, $i56);
    goto corral_source_split_4550;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i70 == 1);
    goto corral_source_split_4552;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb29:
    assume $i70 == 1;
    assume {:verifier.code 0} true;
    $p58, $p59 := $p66, $p58;
    goto $bb29_dummy;

  $bb21:
    assume $i46 == 1;
    assume {:verifier.code 0} true;
    $i16 := $i45;
    goto $bb21_dummy;

  $bb10:
    assume $i31 == 1;
    goto corral_source_split_4499;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    $p32, $p33 := $p22, $p26;
    goto $bb13;

  $bb13:
    call $p34, $i35, $i36, $p37, $p39, $p40, $p42, $i43, $i44, $p32, $p33 := schedule_ptds_loop_$bb13($p0, $p1, $i30, $p34, $i35, $i36, $p37, $p39, $p40, $p42, $i43, $i44, $p32, $p33);
    goto $bb13_last;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 791} collect_qtds($p0, $p32, $p1);
    goto SeqInstr_178, SeqInstr_179;

  SeqInstr_179:
    assume assertsPassed;
    goto SeqInstr_180;

  SeqInstr_180:
    goto corral_source_split_4503;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p32, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 792} $i35 := list_empty($p34);
    call {:si_unique_call 793} {:cexpr "tmp___0"} boogie_si_record_i32($i35);
    goto corral_source_split_4505;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_4506;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4512;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    goto corral_source_split_4514;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p33, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p42);
    goto corral_source_split_4516;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    $i44 := $ne.i64($i43, $i30);
    goto corral_source_split_4517;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i44 == 1);
    goto corral_source_split_4519;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb18:
    assume $i44 == 1;
    assume {:verifier.code 0} true;
    $p32, $p33 := $p33, $p40;
    goto $bb18_dummy;

  $bb15:
    assume $i36 == 1;
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p32, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_4509;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 794} list_del($p37);
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    goto $bb17;

  SeqInstr_178:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32(1, 0);
    goto corral_source_split_4466;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_4467;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 786} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 787} {:cexpr "tmp"} boogie_si_record_i64($i9);
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32(1, 0);
    goto corral_source_split_4475;

  corral_source_split_4475:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    goto corral_source_split_4476;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_4477;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 789} vslice_dummy_var_52 := ldv__builtin_expect($i13, 0);
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i10 == 1;
    goto corral_source_split_4472;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 788} warn_slowpath_null(.str.29, 921);
    goto corral_source_split_4473;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb39_dummy:
    assume false;
    return;

  $bb37_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4573;

  $bb42_dummy:
    assume false;
    return;

  $bb32_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4554;

  $bb29_dummy:
    assume false;
    return;

  $bb27_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4537;

  $bb18_dummy:
    assume false;
    return;

  $bb13_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4501;

  $bb21_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4482;
}



const collect_qtds: ref;

axiom collect_qtds == $sub.ref(0, 381343);

procedure collect_qtds($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0, $M.38, assertsPassed, $CurrAddr, $M.1, $M.32, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.30, $M.36, $M.40, $M.23, $M.22, $M.25, $M.24, $M.27, $M.26, $M.29, $M.28, $M.2, $M.4, $M.6, $M.8, $M.3, $M.5, $M.7, $M.9;



implementation collect_qtds($p0: ref, $p1: ref, $p2: ref)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $i33: i64;
  var $i34: i1;
  var $p35: ref;
  var $i36: i8;
  var $i37: i32;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i64;
  var $i50: i32;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $p55: ref;
  var $i56: i64;
  var $i57: i32;
  var $i58: i32;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i32;
  var $i63: i1;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $i67: i32;
  var $i68: i32;
  var $i69: i1;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i1;
  var $p74: ref;
  var $p75: ref;
  var $i76: i32;
  var $i77: i1;
  var $i78: i1;
  var $p79: ref;
  var $i80: i32;
  var $i81: i1;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $i85: i32;
  var $i86: i1;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $i93: i64;
  var $i94: i1;
  var $i95: i32;
  var $i96: i64;
  var $i97: i64;
  var $i98: i1;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $i110: i64;
  var $i111: i1;
  var $p18: ref;
  var $p19: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4588;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_4589;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_4590;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_4591;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p6, $mul.ref($sub.ref(0, 24), 72));
    goto corral_source_split_4592;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p6, $mul.ref($sub.ref(0, 24), 72)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_4593;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_4594;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_4595;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p11, $mul.ref($sub.ref(0, 24), 72));
    goto corral_source_split_4596;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p6, $mul.ref($sub.ref(0, 24), 72)), $mul.ref(24, 1));
    goto corral_source_split_4597;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_4598;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_4599;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_4600;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i14, $i16);
    goto corral_source_split_4601;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_4603;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    $p18, $p19 := $p12, $p7;
    goto $bb4;

  $bb4:
    call $p20, $i21, $i22, $i23, $i24, $p25, $i26, $i27, $p28, $p29, $i30, $i31, $p32, $i33, $i34, $p35, $i36, $i37, $i38, $i39, $i40, $i41, $p42, $p43, $p44, $i45, $p46, $p47, $p48, $i49, $i50, $p51, $p52, $p53, $i54, $p55, $i56, $i57, $i58, $p59, $p60, $p61, $i62, $i63, $p64, $p65, $p66, $i67, $i68, $i69, $p70, $p71, $p72, $i73, $p74, $p75, $i76, $i77, $i78, $p79, $i80, $i81, $p82, $p83, $p84, $i85, $i86, $p87, $p88, $p89, $p90, $p91, $p92, $i93, $i94, $i95, $i96, $i97, $i98, $p99, $p100, $p101, $p102, $p103, $p105, $p106, $p107, $p108, $p109, $i110, $i111, $p18, $p19 := collect_qtds_loop_$bb4($p0, $p1, $p2, $i16, $p20, $i21, $i22, $i23, $i24, $p25, $i26, $i27, $p28, $p29, $i30, $i31, $p32, $i33, $i34, $p35, $i36, $i37, $i38, $i39, $i40, $i41, $p42, $p43, $p44, $i45, $p46, $p47, $p48, $i49, $i50, $p51, $p52, $p53, $i54, $p55, $i56, $i57, $i58, $p59, $p60, $p61, $i62, $i63, $p64, $p65, $p66, $i67, $i68, $i69, $p70, $p71, $p72, $i73, $p74, $p75, $i76, $i77, $i78, $p79, $i80, $i81, $p82, $p83, $p84, $i85, $i86, $p87, $p88, $p89, $p90, $p91, $p92, $i93, $i94, $i95, $i96, $i97, $i98, $p99, $p100, $p101, $p102, $p103, $p105, $p106, $p107, $p108, $p109, $i110, $i111, $p18, $p19);
    goto $bb4_last;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_4607;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_4608;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    $i22 := $ule.i32($i21, 2);
    goto corral_source_split_4609;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} $i23 := last_qtd_of_urb($p19, $p1);
    call {:si_unique_call 801} {:cexpr "last_qtd"} boogie_si_record_i32($i23);
    goto corral_source_split_4613;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_4614;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p19, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_4626;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, 3);
    goto corral_source_split_4627;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p19, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_4686;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.0, $p75);
    goto corral_source_split_4687;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    $i77 := $ne.i32($i76, 0);
    goto corral_source_split_4688;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i78 := $ne.i32($i23, 0);
    goto corral_source_split_4693;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p19, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_4732;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} list_del($p103);
    goto corral_source_split_4733;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 811} qtd_free($p19);
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($add.ref($p18, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    $p106 := $load.ref($M.0, $p105);
    goto corral_source_split_4736;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    $p107 := $bitcast.ref.ref($p106);
    goto corral_source_split_4737;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($p107, $mul.ref($sub.ref(0, 24), 72));
    goto corral_source_split_4738;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p18, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_4739;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    $i110 := $p2i.ref.i64($p109);
    goto corral_source_split_4740;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    $i111 := $ne.i64($i110, $i16);
    goto corral_source_split_4741;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i111 == 1);
    goto corral_source_split_4743;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb60:
    assume $i111 == 1;
    assume {:verifier.code 0} true;
    $p18, $p19 := $p108, $p18;
    goto $bb60_dummy;

  $bb48:
    assume $i78 == 1;
    goto corral_source_split_4695;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p19, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_4696;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    $i80 := $load.i32($M.0, $p79);
    goto corral_source_split_4697;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    $i81 := $eq.i32($i80, 4);
    goto corral_source_split_4698;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    assume !($i81 == 1);
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $p90 := $M.35;
    goto corral_source_split_4713;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 806} $p91 := kmem_cache_zalloc($p90, 32);
    goto SeqInstr_187, SeqInstr_188;

  SeqInstr_188:
    assume assertsPassed;
    goto SeqInstr_189;

  SeqInstr_189:
    goto corral_source_split_4714;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    $p92 := $bitcast.ref.ref($p91);
    goto corral_source_split_4715;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    $i93 := $p2i.ref.i64($p92);
    goto corral_source_split_4716;

  corral_source_split_4716:
    assume {:verifier.code 0} true;
    $i94 := $eq.i64($i93, 0);
    goto corral_source_split_4717;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    $i95 := $zext.i1.i32($i94);
    goto corral_source_split_4718;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    $i96 := $sext.i32.i64($i95);
    goto corral_source_split_4719;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 807} $i97 := ldv__builtin_expect($i96, 0);
    call {:si_unique_call 808} {:cexpr "tmp___1"} boogie_si_record_i64($i97);
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    $i98 := $ne.i64($i97, 0);
    goto corral_source_split_4721;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p19, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_4725;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    $p100 := $load.ref($M.0, $p99);
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p92, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_4727;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p101, $p100);
    goto corral_source_split_4728;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p92, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_4729;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 809} list_add_tail($p102, $p2);
    goto corral_source_split_4730;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb56:
    assume $i98 == 1;
    goto corral_source_split_4723;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_187:
    assume !assertsPassed;
    return;

  $bb50:
    assume $i81 == 1;
    goto corral_source_split_4700;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p19, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_4701;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.0, $p82);
    goto corral_source_split_4702;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p83, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_4703;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    $i85 := $load.i32($M.0, $p84);
    goto corral_source_split_4704;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    $i86 := $eq.i32($i85, $sub.i32(0, 115));
    goto corral_source_split_4705;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    assume !($i86 == 1);
    goto $bb52;

  $bb53:
    assume $i86 == 1;
    goto corral_source_split_4707;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p19, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_4708;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.0, $p87);
    goto corral_source_split_4709;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p88, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_4710;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p89, $sub.i32(0, 32));
    goto corral_source_split_4711;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb45:
    assume $i77 == 1;
    goto corral_source_split_4690;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 805} free_mem($p0, $p19);
    goto corral_source_split_4691;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb16:
    assume $i31 == 1;
    goto corral_source_split_4629;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p19, $mul.ref(0, 72)), $mul.ref(56, 1));
    goto corral_source_split_4630;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    $i33 := $load.i64($M.0, $p32);
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i33, 0);
    goto corral_source_split_4632;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 803} $i62 := is_short_bulk($p19);
    call {:si_unique_call 804} {:cexpr "tmp"} boogie_si_record_i32($i62);
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    $i63 := $ne.i32($i62, 0);
    goto corral_source_split_4664;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb35:
    assume $i63 == 1;
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p19, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_4667;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.0, $p64);
    goto corral_source_split_4668;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p65, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_4669;

  corral_source_split_4669:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.0, $p66);
    goto corral_source_split_4670;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    $i68 := $and.i32($i67, 1);
    goto corral_source_split_4671;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    $i69 := $ne.i32($i68, 0);
    goto corral_source_split_4672;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i73 := $eq.i32($i23, 0);
    goto corral_source_split_4680;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb40:
    assume $i73 == 1;
    goto corral_source_split_4682;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p18, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_4683;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p74, 4);
    goto corral_source_split_4684;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb37:
    assume $i69 == 1;
    goto corral_source_split_4674;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p19, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_4675;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.0, $p70);
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p71, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_4677;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p72, $sub.i32(0, 121));
    goto corral_source_split_4678;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb18:
    assume $i34 == 1;
    goto corral_source_split_4634;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p19, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_4635;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.0, $p35);
    goto corral_source_split_4636;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i36);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i38 := $slt.i32($i37, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    $i39 := $slt.i32($i37, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i37, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i40 == 1;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb23:
    assume $i39 == 1;
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_4639;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_4640;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p19, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_4641;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    goto corral_source_split_4642;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p19, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_4643;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_4644;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p19, $mul.ref(0, 72)), $mul.ref(56, 1));
    goto corral_source_split_4645;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    $i49 := $load.i64($M.0, $p48);
    goto corral_source_split_4646;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    $i50 := $trunc.i64.i32($i49);
    goto corral_source_split_4647;

  corral_source_split_4647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} mem_reads8($p43, $i45, $p47, $i50);
    goto SeqInstr_184, SeqInstr_185;

  SeqInstr_185:
    assume assertsPassed;
    goto SeqInstr_186;

  SeqInstr_186:
    goto corral_source_split_4648;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p19, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_4651;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p52, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_4652;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p53);
    goto corral_source_split_4653;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p19, $mul.ref(0, 72)), $mul.ref(56, 1));
    goto corral_source_split_4654;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    $i56 := $load.i64($M.0, $p55);
    goto corral_source_split_4655;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    $i57 := $trunc.i64.i32($i56);
    goto corral_source_split_4656;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    $i58 := $add.i32($i54, $i57);
    goto corral_source_split_4657;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p19, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_4658;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_4659;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p60, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_4660;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p61, $i58);
    goto corral_source_split_4661;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    goto $bb26;

  SeqInstr_184:
    assume !assertsPassed;
    return;

  $bb21:
    assume $i38 == 1;
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i37, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb28;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i41 == 1;
    goto $bb30;

  $bb10:
    assume $i24 == 1;
    goto corral_source_split_4616;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p19, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_4617;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_4618;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 4);
    goto corral_source_split_4619;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb12;

  $bb13:
    assume $i27 == 1;
    goto corral_source_split_4621;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p18, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, 4);
    goto corral_source_split_4623;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb6:
    assume $i22 == 1;
    goto corral_source_split_4611;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb60_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4605;
}



const isp1760_urb_done: ref;

axiom isp1760_urb_done == $sub.ref(0, 382375);

procedure isp1760_urb_done($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.30;



implementation isp1760_urb_done($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i64;
  var $p25: ref;
  var $i26: i64;
  var $i27: i64;
  var $i28: i1;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i64;
  var $p34: ref;
  var $i35: i64;
  var $i36: i64;
  var $i37: i1;
  var $p29: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $p41: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4745;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 812} $p2 := hcd_to_priv($p0);
    goto corral_source_split_4746;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(24, 1));
    goto corral_source_split_4747;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_4748;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_4749;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_4760;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_4761;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 128);
    goto corral_source_split_4762;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_4763;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 813} usb_hcd_unlink_urb_from_ep($p0, $p1);
    goto corral_source_split_4799;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(16, 1));
    goto corral_source_split_4800;

  corral_source_split_4800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 814} spin_unlock($p38);
    goto corral_source_split_4801;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_4802;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_4803;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 815} usb_hcd_giveback_urb($p0, $p1, $i40);
    goto corral_source_split_4804;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(16, 1));
    goto corral_source_split_4805;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 816} spin_lock($p41);
    goto corral_source_split_4806;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    return;

  $bb7:
    assume $i13 == 1;
    goto corral_source_split_4765;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_4766;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_4767;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    $i16 := $lshr.i32($i15, 30);
    goto corral_source_split_4768;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 2);
    goto corral_source_split_4769;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb9;

  $bb10:
    assume $i17 == 1;
    goto corral_source_split_4771;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_4773;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_4774;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_4775;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_4776;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_4777;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    $i24 := $zext.i32.i64($i23);
    goto corral_source_split_4778;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p21, $mul.ref($i24, 1));
    goto corral_source_split_4779;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p25);
    goto corral_source_split_4780;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p19);
    goto corral_source_split_4781;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    $i28 := $ugt.i64($i26, $i27);
    goto corral_source_split_4782;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb12:
    assume $i28 == 1;
    goto corral_source_split_4784;

  corral_source_split_4784:
    assume {:verifier.code 0} true;
    $p29 := $p19;
    goto $bb15;

  $bb15:
    call $p30, $p31, $i32, $i33, $p34, $i35, $i36, $i37, $p29 := isp1760_urb_done_loop_$bb15($p20, $p22, $p30, $p31, $i32, $i33, $p34, $i35, $i36, $i37, $p29);
    goto $bb15_last;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($p29, $mul.ref(4096, 1));
    goto corral_source_split_4788;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p20);
    goto corral_source_split_4789;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p22);
    goto corral_source_split_4790;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    $i33 := $zext.i32.i64($i32);
    goto corral_source_split_4791;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($p31, $mul.ref($i33, 1));
    goto corral_source_split_4792;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    goto corral_source_split_4793;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p30);
    goto corral_source_split_4794;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    $i37 := $ugt.i64($i35, $i36);
    goto corral_source_split_4795;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i37 == 1);
    goto corral_source_split_4797;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb17:
    assume $i37 == 1;
    assume {:verifier.code 0} true;
    $p29 := $p30;
    goto $bb17_dummy;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_4751;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_4752;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_4753;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, $sub.i32(0, 115));
    goto corral_source_split_4754;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i8 == 1;
    goto corral_source_split_4756;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_4757;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, 0);
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb17_dummy:
    assume false;
    return;

  $bb15_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4786;
}



const kmem_cache_free: ref;

axiom kmem_cache_free == $sub.ref(0, 383407);

procedure kmem_cache_free($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation kmem_cache_free($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4808;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    return;
}



const enqueue_qtds: ref;

axiom enqueue_qtds == $sub.ref(0, 384439);

procedure enqueue_qtds($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.36, $CurrAddr, $M.1, $M.32, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.30, $M.38, $M.40, $M.23, $M.22, $M.25, $M.24, $M.27, $M.26, $M.29, $M.28, $M.2, $M.4, $M.6, $M.8, $M.3, $M.5, $M.7, $M.9, assertsPassed;



implementation enqueue_qtds($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $i16: i1;
  var $i17: i32;
  var $i18: i64;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $p38: ref;
  var $p36: ref;
  var $i37: i32;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $i43: i1;
  var $i44: i32;
  var $p45: ref;
  var $p46: ref;
  var $i47: i64;
  var $i48: i64;
  var $i49: i1;
  var $i50: i32;
  var $i51: i32;
  var $i52: i32;
  var $i53: i32;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i64;
  var $p62: ref;
  var $i63: i64;
  var $i64: i1;
  var $p68: ref;
  var $i69: i32;
  var $i70: i1;
  var $p71: ref;
  var $i72: i32;
  var $i73: i1;
  var $i74: i32;
  var $i75: i1;
  var $i76: i32;
  var $i77: i64;
  var $i78: i64;
  var $i79: i1;
  var $i80: i1;
  var $i81: i32;
  var $i82: i64;
  var $p84: ref;
  var $i85: i64;
  var $i86: i1;
  var $p87: ref;
  var $i88: i32;
  var $i89: i1;
  var $p90: ref;
  var $i91: i64;
  var $i92: i1;
  var $p93: ref;
  var $i94: i8;
  var $i95: i32;
  var $i96: i1;
  var $p97: ref;
  var $i98: i8;
  var $i99: i32;
  var $i100: i1;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $i104: i32;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $i109: i64;
  var $i110: i32;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $i114: i32;
  var $i115: i1;
  var $i116: i1;
  var $i117: i1;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $i121: i32;
  var $i122: i32;
  var $i123: i1;
  var $i124: i32;
  var $i125: i32;
  var $i126: i1;
  var $i127: i32;
  var $i128: i32;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $i135: i64;
  var $i136: i1;
  var $p65: ref;
  var $i66: i32;
  var $i67: i32;
  var $i137: i1;
  var $p139: ref;
  var $p140: ref;
  var $i141: i64;
  var $i142: i1;
  var $i143: i32;
  var $p145: ref;
  var $p146: ref;
  var $i147: i64;
  var $i148: i64;
  var $i149: i1;
  var $i150: i1;
  var $p152: ref;
  var $p153: ref;
  var $i154: i64;
  var $i155: i1;
  var $i156: i32;
  var $p158: ref;
  var $p159: ref;
  var $i160: i64;
  var $i161: i64;
  var $i162: i1;
  var $i163: i1;
  var $p165: ref;
  var $p166: ref;
  var $i167: i64;
  var $i168: i1;
  var $i169: i32;
  var $p171: ref;
  var $p172: ref;
  var $i173: i64;
  var $i174: i64;
  var $i175: i1;
  var $i176: i1;
  var $p178: ref;
  var $p179: ref;
  var $i180: i64;
  var $i181: i1;
  var $i182: i32;
  var $p184: ref;
  var $p185: ref;
  var $i186: i64;
  var $i187: i64;
  var $i188: i1;
  var $i189: i1;
  var $p191: ref;
  var $p192: ref;
  var $i193: i64;
  var $i194: i1;
  var $i195: i32;
  var $p197: ref;
  var $p198: ref;
  var $i199: i64;
  var $i200: i64;
  var $i201: i1;
  var $i202: i1;
  var $p204: ref;
  var $p205: ref;
  var $i206: i64;
  var $i207: i1;
  var $i208: i32;
  var $p210: ref;
  var $p211: ref;
  var $i212: i64;
  var $i213: i64;
  var $i214: i1;
  var $i215: i1;
  var $p217: ref;
  var $p218: ref;
  var $i219: i64;
  var $i220: i1;
  var $i221: i32;
  var $p223: ref;
  var $p224: ref;
  var $i225: i64;
  var $i226: i64;
  var $i227: i1;
  var $i228: i1;
  var $p230: ref;
  var $p231: ref;
  var $i232: i64;
  var $i233: i1;
  var $i234: i32;
  var $p236: ref;
  var $p237: ref;
  var $i238: i64;
  var $i239: i64;
  var $i240: i1;
  var $i241: i1;
  var $p243: ref;
  var $p244: ref;
  var $i245: i64;
  var $i246: i1;
  var $i247: i32;
  var $p249: ref;
  var $p250: ref;
  var $i251: i64;
  var $i252: i64;
  var $i253: i1;
  var $i254: i1;
  var $p256: ref;
  var $p257: ref;
  var $i258: i64;
  var $i259: i1;
  var $i260: i32;
  var $p262: ref;
  var $p263: ref;
  var $i264: i64;
  var $i265: i64;
  var $i266: i1;
  var $i267: i1;
  var $p269: ref;
  var $p270: ref;
  var $i271: i64;
  var $i272: i1;
  var $i273: i32;
  var $p275: ref;
  var $p276: ref;
  var $i277: i64;
  var $i278: i64;
  var $i279: i1;
  var $i280: i1;
  var $p282: ref;
  var $p283: ref;
  var $i284: i64;
  var $i285: i1;
  var $i286: i32;
  var $p288: ref;
  var $p289: ref;
  var $i290: i64;
  var $i291: i64;
  var $i292: i1;
  var $i293: i1;
  var $p295: ref;
  var $p296: ref;
  var $i297: i64;
  var $i298: i1;
  var $i299: i32;
  var $p301: ref;
  var $p302: ref;
  var $i303: i64;
  var $i304: i64;
  var $i305: i1;
  var $i306: i1;
  var $p308: ref;
  var $p309: ref;
  var $i310: i64;
  var $i311: i1;
  var $i312: i32;
  var $p314: ref;
  var $p315: ref;
  var $i316: i64;
  var $i317: i64;
  var $i318: i1;
  var $i319: i1;
  var $p321: ref;
  var $p322: ref;
  var $i323: i64;
  var $i324: i1;
  var $i325: i32;
  var $p327: ref;
  var $p328: ref;
  var $i329: i64;
  var $i330: i64;
  var $i331: i1;
  var $i332: i1;
  var $p334: ref;
  var $p335: ref;
  var $i336: i64;
  var $i337: i1;
  var $i338: i32;
  var $p340: ref;
  var $p341: ref;
  var $i342: i64;
  var $i343: i64;
  var $i344: i1;
  var $i345: i1;
  var $p347: ref;
  var $p348: ref;
  var $i349: i64;
  var $i350: i1;
  var $i351: i32;
  var $p353: ref;
  var $p354: ref;
  var $i355: i64;
  var $i356: i64;
  var $i357: i1;
  var $i358: i1;
  var $p360: ref;
  var $p361: ref;
  var $i362: i64;
  var $i363: i1;
  var $i364: i32;
  var $p366: ref;
  var $p367: ref;
  var $i368: i64;
  var $i369: i64;
  var $i370: i1;
  var $i371: i1;
  var $p373: ref;
  var $p374: ref;
  var $i375: i64;
  var $i376: i1;
  var $i377: i32;
  var $p379: ref;
  var $p380: ref;
  var $i381: i64;
  var $i382: i64;
  var $i383: i1;
  var $i384: i1;
  var $p386: ref;
  var $p387: ref;
  var $i388: i64;
  var $i389: i1;
  var $i390: i32;
  var $p392: ref;
  var $p393: ref;
  var $i394: i64;
  var $i395: i64;
  var $i396: i1;
  var $i397: i1;
  var $p399: ref;
  var $p400: ref;
  var $i401: i64;
  var $i402: i1;
  var $i403: i32;
  var $p405: ref;
  var $p406: ref;
  var $i407: i64;
  var $i408: i64;
  var $i409: i1;
  var $i410: i1;
  var $p412: ref;
  var $p413: ref;
  var $i414: i64;
  var $i415: i1;
  var $i416: i32;
  var $p418: ref;
  var $p419: ref;
  var $i420: i64;
  var $i421: i64;
  var $i422: i1;
  var $i423: i1;
  var $p425: ref;
  var $p426: ref;
  var $i427: i64;
  var $i428: i1;
  var $i429: i32;
  var $p431: ref;
  var $p432: ref;
  var $i433: i64;
  var $i434: i64;
  var $i435: i1;
  var $i436: i1;
  var $p438: ref;
  var $p439: ref;
  var $i440: i64;
  var $i441: i1;
  var $i442: i32;
  var $p444: ref;
  var $p445: ref;
  var $i446: i64;
  var $i447: i64;
  var $i448: i1;
  var $i449: i1;
  var $p451: ref;
  var $p452: ref;
  var $i453: i64;
  var $i454: i1;
  var $i455: i32;
  var $p457: ref;
  var $p458: ref;
  var $i459: i64;
  var $i460: i64;
  var $i461: i1;
  var $i462: i1;
  var $p464: ref;
  var $p465: ref;
  var $i466: i64;
  var $i467: i1;
  var $i468: i32;
  var $p470: ref;
  var $p471: ref;
  var $i472: i64;
  var $i473: i64;
  var $i474: i1;
  var $i475: i1;
  var $p477: ref;
  var $p478: ref;
  var $i479: i64;
  var $i480: i1;
  var $i481: i32;
  var $p483: ref;
  var $p484: ref;
  var $i485: i64;
  var $i486: i64;
  var $i487: i1;
  var $i488: i1;
  var $p490: ref;
  var $p491: ref;
  var $i492: i64;
  var $i493: i1;
  var $i494: i32;
  var $p496: ref;
  var $p497: ref;
  var $i498: i64;
  var $i499: i64;
  var $i500: i1;
  var $i501: i1;
  var $p503: ref;
  var $p504: ref;
  var $i505: i64;
  var $i506: i1;
  var $i507: i32;
  var $p509: ref;
  var $p510: ref;
  var $i511: i64;
  var $i512: i64;
  var $i513: i1;
  var $i514: i1;
  var $p516: ref;
  var $p517: ref;
  var $i518: i64;
  var $i519: i1;
  var $i520: i32;
  var $p522: ref;
  var $p523: ref;
  var $i524: i64;
  var $i525: i64;
  var $i526: i1;
  var $i527: i1;
  var $p529: ref;
  var $p530: ref;
  var $i531: i64;
  var $i532: i1;
  var $i54: i32;
  var $p534: ref;
  var $p535: ref;
  var $i536: i64;
  var $i537: i64;
  var $i538: i1;
  var vslice_dummy_var_53: i64;
  var vslice_dummy_var_54: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 817} $p2 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    goto corral_source_split_4810;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 818} $p3 := hcd_to_priv($p0);
    goto corral_source_split_4811;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_4812;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 819} $i5 := list_empty($p4);
    call {:si_unique_call 820} {:cexpr "tmp___1"} boogie_si_record_i32($i5);
    goto corral_source_split_4813;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_4815;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_4816;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 821} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 822} {:cexpr "tmp___2"} boogie_si_record_i64($i9);
    goto corral_source_split_4817;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_4818;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(44, 1));
    goto corral_source_split_4835;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_4837;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_4841;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_4842;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_4843;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    goto corral_source_split_4844;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p26, $mul.ref($sub.ref(0, 24), 72)), $mul.ref(40, 1));
    goto corral_source_split_4845;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_4846;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_4847;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_4848;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    $i32 := $lshr.i32($i31, 30);
    goto corral_source_split_4849;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 1);
    goto corral_source_split_4850;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i33 == 1);
    goto corral_source_split_4856;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p3, $mul.ref(0, 2384)), $mul.ref(88, 1));
    goto corral_source_split_4857;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p36, $i37 := $p38, 3072;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4859;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i44 := $sub.i32(0, 1);
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_4869;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p36, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_4870;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_4871;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    $i47 := $p2i.ref.i64($p46);
    goto corral_source_split_4872;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    $i48 := $p2i.ref.i64($p1);
    goto corral_source_split_4873;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    $i49 := $eq.i64($i47, $i48);
    goto corral_source_split_4874;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    $i50, $i51 := 0, $i44;
    assume true;
    goto $bb22, $bb24;

  $bb24:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i137 := $eq.i32($i44, $sub.i32(0, 1));
    goto corral_source_split_4889;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    assume !($i137 == 1);
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $i143 := $i44;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    goto corral_source_split_5012;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    goto corral_source_split_5013;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p36, $mul.ref(1, 24)), $mul.ref(0, 1));
    goto corral_source_split_5014;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    $p146 := $load.ref($M.0, $p145);
    goto corral_source_split_5015;

  corral_source_split_5015:
    assume {:verifier.code 0} true;
    $i147 := $p2i.ref.i64($p146);
    goto corral_source_split_5016;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    $i148 := $p2i.ref.i64($p1);
    goto corral_source_split_5017;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    $i149 := $eq.i64($i147, $i148);
    goto corral_source_split_5018;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    $i50, $i51 := 1, $i143;
    assume {:branchcond $i149} true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i149 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $i150 := $eq.i32($i143, $sub.i32(0, 1));
    goto corral_source_split_5020;

  corral_source_split_5020:
    assume {:verifier.code 0} true;
    assume {:branchcond $i150} true;
    goto $bb84, $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    assume !($i150 == 1);
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $i156 := $i143;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    goto corral_source_split_5031;

  corral_source_split_5031:
    assume {:verifier.code 0} true;
    goto corral_source_split_5032;

  corral_source_split_5032:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p36, $mul.ref(2, 24)), $mul.ref(0, 1));
    goto corral_source_split_5033;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    $p159 := $load.ref($M.0, $p158);
    goto corral_source_split_5034;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    $i160 := $p2i.ref.i64($p159);
    goto corral_source_split_5035;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    $i161 := $p2i.ref.i64($p1);
    goto corral_source_split_5036;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    $i162 := $eq.i64($i160, $i161);
    goto corral_source_split_5037;

  corral_source_split_5037:
    assume {:verifier.code 0} true;
    $i50, $i51 := 2, $i156;
    assume {:branchcond $i162} true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i162 == 1);
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    $i163 := $eq.i32($i156, $sub.i32(0, 1));
    goto corral_source_split_5039;

  corral_source_split_5039:
    assume {:verifier.code 0} true;
    assume {:branchcond $i163} true;
    goto $bb94, $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    assume !($i163 == 1);
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    $i169 := $i156;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    goto corral_source_split_5050;

  corral_source_split_5050:
    assume {:verifier.code 0} true;
    goto corral_source_split_5051;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p36, $mul.ref(3, 24)), $mul.ref(0, 1));
    goto corral_source_split_5052;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    $p172 := $load.ref($M.0, $p171);
    goto corral_source_split_5053;

  corral_source_split_5053:
    assume {:verifier.code 0} true;
    $i173 := $p2i.ref.i64($p172);
    goto corral_source_split_5054;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    $i174 := $p2i.ref.i64($p1);
    goto corral_source_split_5055;

  corral_source_split_5055:
    assume {:verifier.code 0} true;
    $i175 := $eq.i64($i173, $i174);
    goto corral_source_split_5056;

  corral_source_split_5056:
    assume {:verifier.code 0} true;
    $i50, $i51 := 3, $i169;
    assume {:branchcond $i175} true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i175 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    $i176 := $eq.i32($i169, $sub.i32(0, 1));
    goto corral_source_split_5058;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    assume {:branchcond $i176} true;
    goto $bb104, $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    assume !($i176 == 1);
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    $i182 := $i169;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    goto corral_source_split_5069;

  corral_source_split_5069:
    assume {:verifier.code 0} true;
    goto corral_source_split_5070;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($p36, $mul.ref(4, 24)), $mul.ref(0, 1));
    goto corral_source_split_5071;

  corral_source_split_5071:
    assume {:verifier.code 0} true;
    $p185 := $load.ref($M.0, $p184);
    goto corral_source_split_5072;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    $i186 := $p2i.ref.i64($p185);
    goto corral_source_split_5073;

  corral_source_split_5073:
    assume {:verifier.code 0} true;
    $i187 := $p2i.ref.i64($p1);
    goto corral_source_split_5074;

  corral_source_split_5074:
    assume {:verifier.code 0} true;
    $i188 := $eq.i64($i186, $i187);
    goto corral_source_split_5075;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    $i50, $i51 := 4, $i182;
    assume {:branchcond $i188} true;
    goto $bb110, $bb111;

  $bb111:
    assume !($i188 == 1);
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    $i189 := $eq.i32($i182, $sub.i32(0, 1));
    goto corral_source_split_5077;

  corral_source_split_5077:
    assume {:verifier.code 0} true;
    assume {:branchcond $i189} true;
    goto $bb114, $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    assume !($i189 == 1);
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    $i195 := $i182;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    goto corral_source_split_5088;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    goto corral_source_split_5089;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($p36, $mul.ref(5, 24)), $mul.ref(0, 1));
    goto corral_source_split_5090;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    $p198 := $load.ref($M.0, $p197);
    goto corral_source_split_5091;

  corral_source_split_5091:
    assume {:verifier.code 0} true;
    $i199 := $p2i.ref.i64($p198);
    goto corral_source_split_5092;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    $i200 := $p2i.ref.i64($p1);
    goto corral_source_split_5093;

  corral_source_split_5093:
    assume {:verifier.code 0} true;
    $i201 := $eq.i64($i199, $i200);
    goto corral_source_split_5094;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    $i50, $i51 := 5, $i195;
    assume {:branchcond $i201} true;
    goto $bb120, $bb121;

  $bb121:
    assume !($i201 == 1);
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    $i202 := $eq.i32($i195, $sub.i32(0, 1));
    goto corral_source_split_5096;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    assume {:branchcond $i202} true;
    goto $bb124, $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    assume !($i202 == 1);
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    $i208 := $i195;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    goto corral_source_split_5107;

  corral_source_split_5107:
    assume {:verifier.code 0} true;
    goto corral_source_split_5108;

  corral_source_split_5108:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($p36, $mul.ref(6, 24)), $mul.ref(0, 1));
    goto corral_source_split_5109;

  corral_source_split_5109:
    assume {:verifier.code 0} true;
    $p211 := $load.ref($M.0, $p210);
    goto corral_source_split_5110;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    $i212 := $p2i.ref.i64($p211);
    goto corral_source_split_5111;

  corral_source_split_5111:
    assume {:verifier.code 0} true;
    $i213 := $p2i.ref.i64($p1);
    goto corral_source_split_5112;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    $i214 := $eq.i64($i212, $i213);
    goto corral_source_split_5113;

  corral_source_split_5113:
    assume {:verifier.code 0} true;
    $i50, $i51 := 6, $i208;
    assume {:branchcond $i214} true;
    goto $bb130, $bb131;

  $bb131:
    assume !($i214 == 1);
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    $i215 := $eq.i32($i208, $sub.i32(0, 1));
    goto corral_source_split_5115;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    assume {:branchcond $i215} true;
    goto $bb134, $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    assume !($i215 == 1);
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    $i221 := $i208;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    goto corral_source_split_5126;

  corral_source_split_5126:
    assume {:verifier.code 0} true;
    goto corral_source_split_5127;

  corral_source_split_5127:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($p36, $mul.ref(7, 24)), $mul.ref(0, 1));
    goto corral_source_split_5128;

  corral_source_split_5128:
    assume {:verifier.code 0} true;
    $p224 := $load.ref($M.0, $p223);
    goto corral_source_split_5129;

  corral_source_split_5129:
    assume {:verifier.code 0} true;
    $i225 := $p2i.ref.i64($p224);
    goto corral_source_split_5130;

  corral_source_split_5130:
    assume {:verifier.code 0} true;
    $i226 := $p2i.ref.i64($p1);
    goto corral_source_split_5131;

  corral_source_split_5131:
    assume {:verifier.code 0} true;
    $i227 := $eq.i64($i225, $i226);
    goto corral_source_split_5132;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    $i50, $i51 := 7, $i221;
    assume {:branchcond $i227} true;
    goto $bb140, $bb141;

  $bb141:
    assume !($i227 == 1);
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    $i228 := $eq.i32($i221, $sub.i32(0, 1));
    goto corral_source_split_5134;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    assume {:branchcond $i228} true;
    goto $bb144, $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    assume !($i228 == 1);
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    $i234 := $i221;
    goto $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    goto corral_source_split_5145;

  corral_source_split_5145:
    assume {:verifier.code 0} true;
    goto corral_source_split_5146;

  corral_source_split_5146:
    assume {:verifier.code 0} true;
    $p236 := $add.ref($add.ref($p36, $mul.ref(8, 24)), $mul.ref(0, 1));
    goto corral_source_split_5147;

  corral_source_split_5147:
    assume {:verifier.code 0} true;
    $p237 := $load.ref($M.0, $p236);
    goto corral_source_split_5148;

  corral_source_split_5148:
    assume {:verifier.code 0} true;
    $i238 := $p2i.ref.i64($p237);
    goto corral_source_split_5149;

  corral_source_split_5149:
    assume {:verifier.code 0} true;
    $i239 := $p2i.ref.i64($p1);
    goto corral_source_split_5150;

  corral_source_split_5150:
    assume {:verifier.code 0} true;
    $i240 := $eq.i64($i238, $i239);
    goto corral_source_split_5151;

  corral_source_split_5151:
    assume {:verifier.code 0} true;
    $i50, $i51 := 8, $i234;
    assume {:branchcond $i240} true;
    goto $bb150, $bb151;

  $bb151:
    assume !($i240 == 1);
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    $i241 := $eq.i32($i234, $sub.i32(0, 1));
    goto corral_source_split_5153;

  corral_source_split_5153:
    assume {:verifier.code 0} true;
    assume {:branchcond $i241} true;
    goto $bb154, $bb155;

  $bb155:
    assume {:verifier.code 0} true;
    assume !($i241 == 1);
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    $i247 := $i234;
    goto $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    goto corral_source_split_5164;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    goto corral_source_split_5165;

  corral_source_split_5165:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($add.ref($p36, $mul.ref(9, 24)), $mul.ref(0, 1));
    goto corral_source_split_5166;

  corral_source_split_5166:
    assume {:verifier.code 0} true;
    $p250 := $load.ref($M.0, $p249);
    goto corral_source_split_5167;

  corral_source_split_5167:
    assume {:verifier.code 0} true;
    $i251 := $p2i.ref.i64($p250);
    goto corral_source_split_5168;

  corral_source_split_5168:
    assume {:verifier.code 0} true;
    $i252 := $p2i.ref.i64($p1);
    goto corral_source_split_5169;

  corral_source_split_5169:
    assume {:verifier.code 0} true;
    $i253 := $eq.i64($i251, $i252);
    goto corral_source_split_5170;

  corral_source_split_5170:
    assume {:verifier.code 0} true;
    $i50, $i51 := 9, $i247;
    assume {:branchcond $i253} true;
    goto $bb160, $bb161;

  $bb161:
    assume !($i253 == 1);
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb162:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    $i254 := $eq.i32($i247, $sub.i32(0, 1));
    goto corral_source_split_5172;

  corral_source_split_5172:
    assume {:verifier.code 0} true;
    assume {:branchcond $i254} true;
    goto $bb164, $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    assume !($i254 == 1);
    goto $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    $i260 := $i247;
    goto $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    goto corral_source_split_5183;

  corral_source_split_5183:
    assume {:verifier.code 0} true;
    goto corral_source_split_5184;

  corral_source_split_5184:
    assume {:verifier.code 0} true;
    $p262 := $add.ref($add.ref($p36, $mul.ref(10, 24)), $mul.ref(0, 1));
    goto corral_source_split_5185;

  corral_source_split_5185:
    assume {:verifier.code 0} true;
    $p263 := $load.ref($M.0, $p262);
    goto corral_source_split_5186;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    $i264 := $p2i.ref.i64($p263);
    goto corral_source_split_5187;

  corral_source_split_5187:
    assume {:verifier.code 0} true;
    $i265 := $p2i.ref.i64($p1);
    goto corral_source_split_5188;

  corral_source_split_5188:
    assume {:verifier.code 0} true;
    $i266 := $eq.i64($i264, $i265);
    goto corral_source_split_5189;

  corral_source_split_5189:
    assume {:verifier.code 0} true;
    $i50, $i51 := 10, $i260;
    assume {:branchcond $i266} true;
    goto $bb170, $bb171;

  $bb171:
    assume !($i266 == 1);
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb172:
    assume {:verifier.code 0} true;
    goto $bb173;

  $bb173:
    assume {:verifier.code 0} true;
    $i267 := $eq.i32($i260, $sub.i32(0, 1));
    goto corral_source_split_5191;

  corral_source_split_5191:
    assume {:verifier.code 0} true;
    assume {:branchcond $i267} true;
    goto $bb174, $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    assume !($i267 == 1);
    goto $bb176;

  $bb176:
    assume {:verifier.code 0} true;
    $i273 := $i260;
    goto $bb179;

  $bb179:
    assume {:verifier.code 0} true;
    goto corral_source_split_5202;

  corral_source_split_5202:
    assume {:verifier.code 0} true;
    goto corral_source_split_5203;

  corral_source_split_5203:
    assume {:verifier.code 0} true;
    $p275 := $add.ref($add.ref($p36, $mul.ref(11, 24)), $mul.ref(0, 1));
    goto corral_source_split_5204;

  corral_source_split_5204:
    assume {:verifier.code 0} true;
    $p276 := $load.ref($M.0, $p275);
    goto corral_source_split_5205;

  corral_source_split_5205:
    assume {:verifier.code 0} true;
    $i277 := $p2i.ref.i64($p276);
    goto corral_source_split_5206;

  corral_source_split_5206:
    assume {:verifier.code 0} true;
    $i278 := $p2i.ref.i64($p1);
    goto corral_source_split_5207;

  corral_source_split_5207:
    assume {:verifier.code 0} true;
    $i279 := $eq.i64($i277, $i278);
    goto corral_source_split_5208;

  corral_source_split_5208:
    assume {:verifier.code 0} true;
    $i50, $i51 := 11, $i273;
    assume {:branchcond $i279} true;
    goto $bb180, $bb181;

  $bb181:
    assume !($i279 == 1);
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb182:
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb183:
    assume {:verifier.code 0} true;
    $i280 := $eq.i32($i273, $sub.i32(0, 1));
    goto corral_source_split_5210;

  corral_source_split_5210:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb184, $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    assume !($i280 == 1);
    goto $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    $i286 := $i273;
    goto $bb189;

  $bb189:
    assume {:verifier.code 0} true;
    goto corral_source_split_5221;

  corral_source_split_5221:
    assume {:verifier.code 0} true;
    goto corral_source_split_5222;

  corral_source_split_5222:
    assume {:verifier.code 0} true;
    $p288 := $add.ref($add.ref($p36, $mul.ref(12, 24)), $mul.ref(0, 1));
    goto corral_source_split_5223;

  corral_source_split_5223:
    assume {:verifier.code 0} true;
    $p289 := $load.ref($M.0, $p288);
    goto corral_source_split_5224;

  corral_source_split_5224:
    assume {:verifier.code 0} true;
    $i290 := $p2i.ref.i64($p289);
    goto corral_source_split_5225;

  corral_source_split_5225:
    assume {:verifier.code 0} true;
    $i291 := $p2i.ref.i64($p1);
    goto corral_source_split_5226;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    $i292 := $eq.i64($i290, $i291);
    goto corral_source_split_5227;

  corral_source_split_5227:
    assume {:verifier.code 0} true;
    $i50, $i51 := 12, $i286;
    assume {:branchcond $i292} true;
    goto $bb190, $bb191;

  $bb191:
    assume !($i292 == 1);
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb192:
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb193:
    assume {:verifier.code 0} true;
    $i293 := $eq.i32($i286, $sub.i32(0, 1));
    goto corral_source_split_5229;

  corral_source_split_5229:
    assume {:verifier.code 0} true;
    assume {:branchcond $i293} true;
    goto $bb194, $bb195;

  $bb195:
    assume {:verifier.code 0} true;
    assume !($i293 == 1);
    goto $bb196;

  $bb196:
    assume {:verifier.code 0} true;
    $i299 := $i286;
    goto $bb199;

  $bb199:
    assume {:verifier.code 0} true;
    goto corral_source_split_5240;

  corral_source_split_5240:
    assume {:verifier.code 0} true;
    goto corral_source_split_5241;

  corral_source_split_5241:
    assume {:verifier.code 0} true;
    $p301 := $add.ref($add.ref($p36, $mul.ref(13, 24)), $mul.ref(0, 1));
    goto corral_source_split_5242;

  corral_source_split_5242:
    assume {:verifier.code 0} true;
    $p302 := $load.ref($M.0, $p301);
    goto corral_source_split_5243;

  corral_source_split_5243:
    assume {:verifier.code 0} true;
    $i303 := $p2i.ref.i64($p302);
    goto corral_source_split_5244;

  corral_source_split_5244:
    assume {:verifier.code 0} true;
    $i304 := $p2i.ref.i64($p1);
    goto corral_source_split_5245;

  corral_source_split_5245:
    assume {:verifier.code 0} true;
    $i305 := $eq.i64($i303, $i304);
    goto corral_source_split_5246;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    $i50, $i51 := 13, $i299;
    assume {:branchcond $i305} true;
    goto $bb200, $bb201;

  $bb201:
    assume !($i305 == 1);
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb202:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb203:
    assume {:verifier.code 0} true;
    $i306 := $eq.i32($i299, $sub.i32(0, 1));
    goto corral_source_split_5248;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    assume {:branchcond $i306} true;
    goto $bb204, $bb205;

  $bb205:
    assume {:verifier.code 0} true;
    assume !($i306 == 1);
    goto $bb206;

  $bb206:
    assume {:verifier.code 0} true;
    $i312 := $i299;
    goto $bb209;

  $bb209:
    assume {:verifier.code 0} true;
    goto corral_source_split_5259;

  corral_source_split_5259:
    assume {:verifier.code 0} true;
    goto corral_source_split_5260;

  corral_source_split_5260:
    assume {:verifier.code 0} true;
    $p314 := $add.ref($add.ref($p36, $mul.ref(14, 24)), $mul.ref(0, 1));
    goto corral_source_split_5261;

  corral_source_split_5261:
    assume {:verifier.code 0} true;
    $p315 := $load.ref($M.0, $p314);
    goto corral_source_split_5262;

  corral_source_split_5262:
    assume {:verifier.code 0} true;
    $i316 := $p2i.ref.i64($p315);
    goto corral_source_split_5263;

  corral_source_split_5263:
    assume {:verifier.code 0} true;
    $i317 := $p2i.ref.i64($p1);
    goto corral_source_split_5264;

  corral_source_split_5264:
    assume {:verifier.code 0} true;
    $i318 := $eq.i64($i316, $i317);
    goto corral_source_split_5265;

  corral_source_split_5265:
    assume {:verifier.code 0} true;
    $i50, $i51 := 14, $i312;
    assume {:branchcond $i318} true;
    goto $bb210, $bb211;

  $bb211:
    assume !($i318 == 1);
    assume {:verifier.code 0} true;
    goto $bb212;

  $bb212:
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb213:
    assume {:verifier.code 0} true;
    $i319 := $eq.i32($i312, $sub.i32(0, 1));
    goto corral_source_split_5267;

  corral_source_split_5267:
    assume {:verifier.code 0} true;
    assume {:branchcond $i319} true;
    goto $bb214, $bb215;

  $bb215:
    assume {:verifier.code 0} true;
    assume !($i319 == 1);
    goto $bb216;

  $bb216:
    assume {:verifier.code 0} true;
    $i325 := $i312;
    goto $bb219;

  $bb219:
    assume {:verifier.code 0} true;
    goto corral_source_split_5278;

  corral_source_split_5278:
    assume {:verifier.code 0} true;
    goto corral_source_split_5279;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    $p327 := $add.ref($add.ref($p36, $mul.ref(15, 24)), $mul.ref(0, 1));
    goto corral_source_split_5280;

  corral_source_split_5280:
    assume {:verifier.code 0} true;
    $p328 := $load.ref($M.0, $p327);
    goto corral_source_split_5281;

  corral_source_split_5281:
    assume {:verifier.code 0} true;
    $i329 := $p2i.ref.i64($p328);
    goto corral_source_split_5282;

  corral_source_split_5282:
    assume {:verifier.code 0} true;
    $i330 := $p2i.ref.i64($p1);
    goto corral_source_split_5283;

  corral_source_split_5283:
    assume {:verifier.code 0} true;
    $i331 := $eq.i64($i329, $i330);
    goto corral_source_split_5284;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    $i50, $i51 := 15, $i325;
    assume {:branchcond $i331} true;
    goto $bb220, $bb221;

  $bb221:
    assume !($i331 == 1);
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb222:
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb223:
    assume {:verifier.code 0} true;
    $i332 := $eq.i32($i325, $sub.i32(0, 1));
    goto corral_source_split_5286;

  corral_source_split_5286:
    assume {:verifier.code 0} true;
    assume {:branchcond $i332} true;
    goto $bb224, $bb225;

  $bb225:
    assume {:verifier.code 0} true;
    assume !($i332 == 1);
    goto $bb226;

  $bb226:
    assume {:verifier.code 0} true;
    $i338 := $i325;
    goto $bb229;

  $bb229:
    assume {:verifier.code 0} true;
    goto corral_source_split_5297;

  corral_source_split_5297:
    assume {:verifier.code 0} true;
    goto corral_source_split_5298;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    $p340 := $add.ref($add.ref($p36, $mul.ref(16, 24)), $mul.ref(0, 1));
    goto corral_source_split_5299;

  corral_source_split_5299:
    assume {:verifier.code 0} true;
    $p341 := $load.ref($M.0, $p340);
    goto corral_source_split_5300;

  corral_source_split_5300:
    assume {:verifier.code 0} true;
    $i342 := $p2i.ref.i64($p341);
    goto corral_source_split_5301;

  corral_source_split_5301:
    assume {:verifier.code 0} true;
    $i343 := $p2i.ref.i64($p1);
    goto corral_source_split_5302;

  corral_source_split_5302:
    assume {:verifier.code 0} true;
    $i344 := $eq.i64($i342, $i343);
    goto corral_source_split_5303;

  corral_source_split_5303:
    assume {:verifier.code 0} true;
    $i50, $i51 := 16, $i338;
    assume {:branchcond $i344} true;
    goto $bb230, $bb231;

  $bb231:
    assume !($i344 == 1);
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb232:
    assume {:verifier.code 0} true;
    goto $bb233;

  $bb233:
    assume {:verifier.code 0} true;
    $i345 := $eq.i32($i338, $sub.i32(0, 1));
    goto corral_source_split_5305;

  corral_source_split_5305:
    assume {:verifier.code 0} true;
    assume {:branchcond $i345} true;
    goto $bb234, $bb235;

  $bb235:
    assume {:verifier.code 0} true;
    assume !($i345 == 1);
    goto $bb236;

  $bb236:
    assume {:verifier.code 0} true;
    $i351 := $i338;
    goto $bb239;

  $bb239:
    assume {:verifier.code 0} true;
    goto corral_source_split_5316;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    goto corral_source_split_5317;

  corral_source_split_5317:
    assume {:verifier.code 0} true;
    $p353 := $add.ref($add.ref($p36, $mul.ref(17, 24)), $mul.ref(0, 1));
    goto corral_source_split_5318;

  corral_source_split_5318:
    assume {:verifier.code 0} true;
    $p354 := $load.ref($M.0, $p353);
    goto corral_source_split_5319;

  corral_source_split_5319:
    assume {:verifier.code 0} true;
    $i355 := $p2i.ref.i64($p354);
    goto corral_source_split_5320;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    $i356 := $p2i.ref.i64($p1);
    goto corral_source_split_5321;

  corral_source_split_5321:
    assume {:verifier.code 0} true;
    $i357 := $eq.i64($i355, $i356);
    goto corral_source_split_5322;

  corral_source_split_5322:
    assume {:verifier.code 0} true;
    $i50, $i51 := 17, $i351;
    assume {:branchcond $i357} true;
    goto $bb240, $bb241;

  $bb241:
    assume !($i357 == 1);
    assume {:verifier.code 0} true;
    goto $bb242;

  $bb242:
    assume {:verifier.code 0} true;
    goto $bb243;

  $bb243:
    assume {:verifier.code 0} true;
    $i358 := $eq.i32($i351, $sub.i32(0, 1));
    goto corral_source_split_5324;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    assume {:branchcond $i358} true;
    goto $bb244, $bb245;

  $bb245:
    assume {:verifier.code 0} true;
    assume !($i358 == 1);
    goto $bb246;

  $bb246:
    assume {:verifier.code 0} true;
    $i364 := $i351;
    goto $bb249;

  $bb249:
    assume {:verifier.code 0} true;
    goto corral_source_split_5335;

  corral_source_split_5335:
    assume {:verifier.code 0} true;
    goto corral_source_split_5336;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    $p366 := $add.ref($add.ref($p36, $mul.ref(18, 24)), $mul.ref(0, 1));
    goto corral_source_split_5337;

  corral_source_split_5337:
    assume {:verifier.code 0} true;
    $p367 := $load.ref($M.0, $p366);
    goto corral_source_split_5338;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    $i368 := $p2i.ref.i64($p367);
    goto corral_source_split_5339;

  corral_source_split_5339:
    assume {:verifier.code 0} true;
    $i369 := $p2i.ref.i64($p1);
    goto corral_source_split_5340;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    $i370 := $eq.i64($i368, $i369);
    goto corral_source_split_5341;

  corral_source_split_5341:
    assume {:verifier.code 0} true;
    $i50, $i51 := 18, $i364;
    assume {:branchcond $i370} true;
    goto $bb250, $bb251;

  $bb251:
    assume !($i370 == 1);
    assume {:verifier.code 0} true;
    goto $bb252;

  $bb252:
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb253:
    assume {:verifier.code 0} true;
    $i371 := $eq.i32($i364, $sub.i32(0, 1));
    goto corral_source_split_5343;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    assume {:branchcond $i371} true;
    goto $bb254, $bb255;

  $bb255:
    assume {:verifier.code 0} true;
    assume !($i371 == 1);
    goto $bb256;

  $bb256:
    assume {:verifier.code 0} true;
    $i377 := $i364;
    goto $bb259;

  $bb259:
    assume {:verifier.code 0} true;
    goto corral_source_split_5354;

  corral_source_split_5354:
    assume {:verifier.code 0} true;
    goto corral_source_split_5355;

  corral_source_split_5355:
    assume {:verifier.code 0} true;
    $p379 := $add.ref($add.ref($p36, $mul.ref(19, 24)), $mul.ref(0, 1));
    goto corral_source_split_5356;

  corral_source_split_5356:
    assume {:verifier.code 0} true;
    $p380 := $load.ref($M.0, $p379);
    goto corral_source_split_5357;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    $i381 := $p2i.ref.i64($p380);
    goto corral_source_split_5358;

  corral_source_split_5358:
    assume {:verifier.code 0} true;
    $i382 := $p2i.ref.i64($p1);
    goto corral_source_split_5359;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    $i383 := $eq.i64($i381, $i382);
    goto corral_source_split_5360;

  corral_source_split_5360:
    assume {:verifier.code 0} true;
    $i50, $i51 := 19, $i377;
    assume {:branchcond $i383} true;
    goto $bb260, $bb261;

  $bb261:
    assume !($i383 == 1);
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb262:
    assume {:verifier.code 0} true;
    goto $bb263;

  $bb263:
    assume {:verifier.code 0} true;
    $i384 := $eq.i32($i377, $sub.i32(0, 1));
    goto corral_source_split_5362;

  corral_source_split_5362:
    assume {:verifier.code 0} true;
    assume {:branchcond $i384} true;
    goto $bb264, $bb265;

  $bb265:
    assume {:verifier.code 0} true;
    assume !($i384 == 1);
    goto $bb266;

  $bb266:
    assume {:verifier.code 0} true;
    $i390 := $i377;
    goto $bb269;

  $bb269:
    assume {:verifier.code 0} true;
    goto corral_source_split_5373;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    goto corral_source_split_5374;

  corral_source_split_5374:
    assume {:verifier.code 0} true;
    $p392 := $add.ref($add.ref($p36, $mul.ref(20, 24)), $mul.ref(0, 1));
    goto corral_source_split_5375;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    $p393 := $load.ref($M.0, $p392);
    goto corral_source_split_5376;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    $i394 := $p2i.ref.i64($p393);
    goto corral_source_split_5377;

  corral_source_split_5377:
    assume {:verifier.code 0} true;
    $i395 := $p2i.ref.i64($p1);
    goto corral_source_split_5378;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    $i396 := $eq.i64($i394, $i395);
    goto corral_source_split_5379;

  corral_source_split_5379:
    assume {:verifier.code 0} true;
    $i50, $i51 := 20, $i390;
    assume {:branchcond $i396} true;
    goto $bb270, $bb271;

  $bb271:
    assume !($i396 == 1);
    assume {:verifier.code 0} true;
    goto $bb272;

  $bb272:
    assume {:verifier.code 0} true;
    goto $bb273;

  $bb273:
    assume {:verifier.code 0} true;
    $i397 := $eq.i32($i390, $sub.i32(0, 1));
    goto corral_source_split_5381;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    assume {:branchcond $i397} true;
    goto $bb274, $bb275;

  $bb275:
    assume {:verifier.code 0} true;
    assume !($i397 == 1);
    goto $bb276;

  $bb276:
    assume {:verifier.code 0} true;
    $i403 := $i390;
    goto $bb279;

  $bb279:
    assume {:verifier.code 0} true;
    goto corral_source_split_5392;

  corral_source_split_5392:
    assume {:verifier.code 0} true;
    goto corral_source_split_5393;

  corral_source_split_5393:
    assume {:verifier.code 0} true;
    $p405 := $add.ref($add.ref($p36, $mul.ref(21, 24)), $mul.ref(0, 1));
    goto corral_source_split_5394;

  corral_source_split_5394:
    assume {:verifier.code 0} true;
    $p406 := $load.ref($M.0, $p405);
    goto corral_source_split_5395;

  corral_source_split_5395:
    assume {:verifier.code 0} true;
    $i407 := $p2i.ref.i64($p406);
    goto corral_source_split_5396;

  corral_source_split_5396:
    assume {:verifier.code 0} true;
    $i408 := $p2i.ref.i64($p1);
    goto corral_source_split_5397;

  corral_source_split_5397:
    assume {:verifier.code 0} true;
    $i409 := $eq.i64($i407, $i408);
    goto corral_source_split_5398;

  corral_source_split_5398:
    assume {:verifier.code 0} true;
    $i50, $i51 := 21, $i403;
    assume {:branchcond $i409} true;
    goto $bb280, $bb281;

  $bb281:
    assume !($i409 == 1);
    assume {:verifier.code 0} true;
    goto $bb282;

  $bb282:
    assume {:verifier.code 0} true;
    goto $bb283;

  $bb283:
    assume {:verifier.code 0} true;
    $i410 := $eq.i32($i403, $sub.i32(0, 1));
    goto corral_source_split_5400;

  corral_source_split_5400:
    assume {:verifier.code 0} true;
    assume {:branchcond $i410} true;
    goto $bb284, $bb285;

  $bb285:
    assume {:verifier.code 0} true;
    assume !($i410 == 1);
    goto $bb286;

  $bb286:
    assume {:verifier.code 0} true;
    $i416 := $i403;
    goto $bb289;

  $bb289:
    assume {:verifier.code 0} true;
    goto corral_source_split_5411;

  corral_source_split_5411:
    assume {:verifier.code 0} true;
    goto corral_source_split_5412;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    $p418 := $add.ref($add.ref($p36, $mul.ref(22, 24)), $mul.ref(0, 1));
    goto corral_source_split_5413;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    $p419 := $load.ref($M.0, $p418);
    goto corral_source_split_5414;

  corral_source_split_5414:
    assume {:verifier.code 0} true;
    $i420 := $p2i.ref.i64($p419);
    goto corral_source_split_5415;

  corral_source_split_5415:
    assume {:verifier.code 0} true;
    $i421 := $p2i.ref.i64($p1);
    goto corral_source_split_5416;

  corral_source_split_5416:
    assume {:verifier.code 0} true;
    $i422 := $eq.i64($i420, $i421);
    goto corral_source_split_5417;

  corral_source_split_5417:
    assume {:verifier.code 0} true;
    $i50, $i51 := 22, $i416;
    assume {:branchcond $i422} true;
    goto $bb290, $bb291;

  $bb291:
    assume !($i422 == 1);
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb292:
    assume {:verifier.code 0} true;
    goto $bb293;

  $bb293:
    assume {:verifier.code 0} true;
    $i423 := $eq.i32($i416, $sub.i32(0, 1));
    goto corral_source_split_5419;

  corral_source_split_5419:
    assume {:verifier.code 0} true;
    assume {:branchcond $i423} true;
    goto $bb294, $bb295;

  $bb295:
    assume {:verifier.code 0} true;
    assume !($i423 == 1);
    goto $bb296;

  $bb296:
    assume {:verifier.code 0} true;
    $i429 := $i416;
    goto $bb299;

  $bb299:
    assume {:verifier.code 0} true;
    goto corral_source_split_5430;

  corral_source_split_5430:
    assume {:verifier.code 0} true;
    goto corral_source_split_5431;

  corral_source_split_5431:
    assume {:verifier.code 0} true;
    $p431 := $add.ref($add.ref($p36, $mul.ref(23, 24)), $mul.ref(0, 1));
    goto corral_source_split_5432;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    $p432 := $load.ref($M.0, $p431);
    goto corral_source_split_5433;

  corral_source_split_5433:
    assume {:verifier.code 0} true;
    $i433 := $p2i.ref.i64($p432);
    goto corral_source_split_5434;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    $i434 := $p2i.ref.i64($p1);
    goto corral_source_split_5435;

  corral_source_split_5435:
    assume {:verifier.code 0} true;
    $i435 := $eq.i64($i433, $i434);
    goto corral_source_split_5436;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    $i50, $i51 := 23, $i429;
    assume {:branchcond $i435} true;
    goto $bb300, $bb301;

  $bb301:
    assume !($i435 == 1);
    assume {:verifier.code 0} true;
    goto $bb302;

  $bb302:
    assume {:verifier.code 0} true;
    goto $bb303;

  $bb303:
    assume {:verifier.code 0} true;
    $i436 := $eq.i32($i429, $sub.i32(0, 1));
    goto corral_source_split_5438;

  corral_source_split_5438:
    assume {:verifier.code 0} true;
    assume {:branchcond $i436} true;
    goto $bb304, $bb305;

  $bb305:
    assume {:verifier.code 0} true;
    assume !($i436 == 1);
    goto $bb306;

  $bb306:
    assume {:verifier.code 0} true;
    $i442 := $i429;
    goto $bb309;

  $bb309:
    assume {:verifier.code 0} true;
    goto corral_source_split_5449;

  corral_source_split_5449:
    assume {:verifier.code 0} true;
    goto corral_source_split_5450;

  corral_source_split_5450:
    assume {:verifier.code 0} true;
    $p444 := $add.ref($add.ref($p36, $mul.ref(24, 24)), $mul.ref(0, 1));
    goto corral_source_split_5451;

  corral_source_split_5451:
    assume {:verifier.code 0} true;
    $p445 := $load.ref($M.0, $p444);
    goto corral_source_split_5452;

  corral_source_split_5452:
    assume {:verifier.code 0} true;
    $i446 := $p2i.ref.i64($p445);
    goto corral_source_split_5453;

  corral_source_split_5453:
    assume {:verifier.code 0} true;
    $i447 := $p2i.ref.i64($p1);
    goto corral_source_split_5454;

  corral_source_split_5454:
    assume {:verifier.code 0} true;
    $i448 := $eq.i64($i446, $i447);
    goto corral_source_split_5455;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    $i50, $i51 := 24, $i442;
    assume {:branchcond $i448} true;
    goto $bb310, $bb311;

  $bb311:
    assume !($i448 == 1);
    assume {:verifier.code 0} true;
    goto $bb312;

  $bb312:
    assume {:verifier.code 0} true;
    goto $bb313;

  $bb313:
    assume {:verifier.code 0} true;
    $i449 := $eq.i32($i442, $sub.i32(0, 1));
    goto corral_source_split_5457;

  corral_source_split_5457:
    assume {:verifier.code 0} true;
    assume {:branchcond $i449} true;
    goto $bb314, $bb315;

  $bb315:
    assume {:verifier.code 0} true;
    assume !($i449 == 1);
    goto $bb316;

  $bb316:
    assume {:verifier.code 0} true;
    $i455 := $i442;
    goto $bb319;

  $bb319:
    assume {:verifier.code 0} true;
    goto corral_source_split_5468;

  corral_source_split_5468:
    assume {:verifier.code 0} true;
    goto corral_source_split_5469;

  corral_source_split_5469:
    assume {:verifier.code 0} true;
    $p457 := $add.ref($add.ref($p36, $mul.ref(25, 24)), $mul.ref(0, 1));
    goto corral_source_split_5470;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    $p458 := $load.ref($M.0, $p457);
    goto corral_source_split_5471;

  corral_source_split_5471:
    assume {:verifier.code 0} true;
    $i459 := $p2i.ref.i64($p458);
    goto corral_source_split_5472;

  corral_source_split_5472:
    assume {:verifier.code 0} true;
    $i460 := $p2i.ref.i64($p1);
    goto corral_source_split_5473;

  corral_source_split_5473:
    assume {:verifier.code 0} true;
    $i461 := $eq.i64($i459, $i460);
    goto corral_source_split_5474;

  corral_source_split_5474:
    assume {:verifier.code 0} true;
    $i50, $i51 := 25, $i455;
    assume {:branchcond $i461} true;
    goto $bb320, $bb321;

  $bb321:
    assume !($i461 == 1);
    assume {:verifier.code 0} true;
    goto $bb322;

  $bb322:
    assume {:verifier.code 0} true;
    goto $bb323;

  $bb323:
    assume {:verifier.code 0} true;
    $i462 := $eq.i32($i455, $sub.i32(0, 1));
    goto corral_source_split_5476;

  corral_source_split_5476:
    assume {:verifier.code 0} true;
    assume {:branchcond $i462} true;
    goto $bb324, $bb325;

  $bb325:
    assume {:verifier.code 0} true;
    assume !($i462 == 1);
    goto $bb326;

  $bb326:
    assume {:verifier.code 0} true;
    $i468 := $i455;
    goto $bb329;

  $bb329:
    assume {:verifier.code 0} true;
    goto corral_source_split_5487;

  corral_source_split_5487:
    assume {:verifier.code 0} true;
    goto corral_source_split_5488;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    $p470 := $add.ref($add.ref($p36, $mul.ref(26, 24)), $mul.ref(0, 1));
    goto corral_source_split_5489;

  corral_source_split_5489:
    assume {:verifier.code 0} true;
    $p471 := $load.ref($M.0, $p470);
    goto corral_source_split_5490;

  corral_source_split_5490:
    assume {:verifier.code 0} true;
    $i472 := $p2i.ref.i64($p471);
    goto corral_source_split_5491;

  corral_source_split_5491:
    assume {:verifier.code 0} true;
    $i473 := $p2i.ref.i64($p1);
    goto corral_source_split_5492;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    $i474 := $eq.i64($i472, $i473);
    goto corral_source_split_5493;

  corral_source_split_5493:
    assume {:verifier.code 0} true;
    $i50, $i51 := 26, $i468;
    assume {:branchcond $i474} true;
    goto $bb330, $bb331;

  $bb331:
    assume !($i474 == 1);
    assume {:verifier.code 0} true;
    goto $bb332;

  $bb332:
    assume {:verifier.code 0} true;
    goto $bb333;

  $bb333:
    assume {:verifier.code 0} true;
    $i475 := $eq.i32($i468, $sub.i32(0, 1));
    goto corral_source_split_5495;

  corral_source_split_5495:
    assume {:verifier.code 0} true;
    assume {:branchcond $i475} true;
    goto $bb334, $bb335;

  $bb335:
    assume {:verifier.code 0} true;
    assume !($i475 == 1);
    goto $bb336;

  $bb336:
    assume {:verifier.code 0} true;
    $i481 := $i468;
    goto $bb339;

  $bb339:
    assume {:verifier.code 0} true;
    goto corral_source_split_5506;

  corral_source_split_5506:
    assume {:verifier.code 0} true;
    goto corral_source_split_5507;

  corral_source_split_5507:
    assume {:verifier.code 0} true;
    $p483 := $add.ref($add.ref($p36, $mul.ref(27, 24)), $mul.ref(0, 1));
    goto corral_source_split_5508;

  corral_source_split_5508:
    assume {:verifier.code 0} true;
    $p484 := $load.ref($M.0, $p483);
    goto corral_source_split_5509;

  corral_source_split_5509:
    assume {:verifier.code 0} true;
    $i485 := $p2i.ref.i64($p484);
    goto corral_source_split_5510;

  corral_source_split_5510:
    assume {:verifier.code 0} true;
    $i486 := $p2i.ref.i64($p1);
    goto corral_source_split_5511;

  corral_source_split_5511:
    assume {:verifier.code 0} true;
    $i487 := $eq.i64($i485, $i486);
    goto corral_source_split_5512;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    $i50, $i51 := 27, $i481;
    assume {:branchcond $i487} true;
    goto $bb340, $bb341;

  $bb341:
    assume !($i487 == 1);
    assume {:verifier.code 0} true;
    goto $bb342;

  $bb342:
    assume {:verifier.code 0} true;
    goto $bb343;

  $bb343:
    assume {:verifier.code 0} true;
    $i488 := $eq.i32($i481, $sub.i32(0, 1));
    goto corral_source_split_5514;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    assume {:branchcond $i488} true;
    goto $bb344, $bb345;

  $bb345:
    assume {:verifier.code 0} true;
    assume !($i488 == 1);
    goto $bb346;

  $bb346:
    assume {:verifier.code 0} true;
    $i494 := $i481;
    goto $bb349;

  $bb349:
    assume {:verifier.code 0} true;
    goto corral_source_split_5525;

  corral_source_split_5525:
    assume {:verifier.code 0} true;
    goto corral_source_split_5526;

  corral_source_split_5526:
    assume {:verifier.code 0} true;
    $p496 := $add.ref($add.ref($p36, $mul.ref(28, 24)), $mul.ref(0, 1));
    goto corral_source_split_5527;

  corral_source_split_5527:
    assume {:verifier.code 0} true;
    $p497 := $load.ref($M.0, $p496);
    goto corral_source_split_5528;

  corral_source_split_5528:
    assume {:verifier.code 0} true;
    $i498 := $p2i.ref.i64($p497);
    goto corral_source_split_5529;

  corral_source_split_5529:
    assume {:verifier.code 0} true;
    $i499 := $p2i.ref.i64($p1);
    goto corral_source_split_5530;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    $i500 := $eq.i64($i498, $i499);
    goto corral_source_split_5531;

  corral_source_split_5531:
    assume {:verifier.code 0} true;
    $i50, $i51 := 28, $i494;
    assume {:branchcond $i500} true;
    goto $bb350, $bb351;

  $bb351:
    assume !($i500 == 1);
    assume {:verifier.code 0} true;
    goto $bb352;

  $bb352:
    assume {:verifier.code 0} true;
    goto $bb353;

  $bb353:
    assume {:verifier.code 0} true;
    $i501 := $eq.i32($i494, $sub.i32(0, 1));
    goto corral_source_split_5533;

  corral_source_split_5533:
    assume {:verifier.code 0} true;
    assume {:branchcond $i501} true;
    goto $bb354, $bb355;

  $bb355:
    assume {:verifier.code 0} true;
    assume !($i501 == 1);
    goto $bb356;

  $bb356:
    assume {:verifier.code 0} true;
    $i507 := $i494;
    goto $bb359;

  $bb359:
    assume {:verifier.code 0} true;
    goto corral_source_split_5544;

  corral_source_split_5544:
    assume {:verifier.code 0} true;
    goto corral_source_split_5545;

  corral_source_split_5545:
    assume {:verifier.code 0} true;
    $p509 := $add.ref($add.ref($p36, $mul.ref(29, 24)), $mul.ref(0, 1));
    goto corral_source_split_5546;

  corral_source_split_5546:
    assume {:verifier.code 0} true;
    $p510 := $load.ref($M.0, $p509);
    goto corral_source_split_5547;

  corral_source_split_5547:
    assume {:verifier.code 0} true;
    $i511 := $p2i.ref.i64($p510);
    goto corral_source_split_5548;

  corral_source_split_5548:
    assume {:verifier.code 0} true;
    $i512 := $p2i.ref.i64($p1);
    goto corral_source_split_5549;

  corral_source_split_5549:
    assume {:verifier.code 0} true;
    $i513 := $eq.i64($i511, $i512);
    goto corral_source_split_5550;

  corral_source_split_5550:
    assume {:verifier.code 0} true;
    $i50, $i51 := 29, $i507;
    assume {:branchcond $i513} true;
    goto $bb360, $bb361;

  $bb361:
    assume !($i513 == 1);
    assume {:verifier.code 0} true;
    goto $bb362;

  $bb362:
    assume {:verifier.code 0} true;
    goto $bb363;

  $bb363:
    assume {:verifier.code 0} true;
    $i514 := $eq.i32($i507, $sub.i32(0, 1));
    goto corral_source_split_5552;

  corral_source_split_5552:
    assume {:verifier.code 0} true;
    assume {:branchcond $i514} true;
    goto $bb364, $bb365;

  $bb365:
    assume {:verifier.code 0} true;
    assume !($i514 == 1);
    goto $bb366;

  $bb366:
    assume {:verifier.code 0} true;
    $i520 := $i507;
    goto $bb369;

  $bb369:
    assume {:verifier.code 0} true;
    goto corral_source_split_5563;

  corral_source_split_5563:
    assume {:verifier.code 0} true;
    goto corral_source_split_5564;

  corral_source_split_5564:
    assume {:verifier.code 0} true;
    $p522 := $add.ref($add.ref($p36, $mul.ref(30, 24)), $mul.ref(0, 1));
    goto corral_source_split_5565;

  corral_source_split_5565:
    assume {:verifier.code 0} true;
    $p523 := $load.ref($M.0, $p522);
    goto corral_source_split_5566;

  corral_source_split_5566:
    assume {:verifier.code 0} true;
    $i524 := $p2i.ref.i64($p523);
    goto corral_source_split_5567;

  corral_source_split_5567:
    assume {:verifier.code 0} true;
    $i525 := $p2i.ref.i64($p1);
    goto corral_source_split_5568;

  corral_source_split_5568:
    assume {:verifier.code 0} true;
    $i526 := $eq.i64($i524, $i525);
    goto corral_source_split_5569;

  corral_source_split_5569:
    assume {:verifier.code 0} true;
    $i50, $i51 := 30, $i520;
    assume {:branchcond $i526} true;
    goto $bb370, $bb371;

  $bb371:
    assume !($i526 == 1);
    assume {:verifier.code 0} true;
    goto $bb372;

  $bb372:
    assume {:verifier.code 0} true;
    goto $bb373;

  $bb373:
    assume {:verifier.code 0} true;
    $i527 := $eq.i32($i520, $sub.i32(0, 1));
    goto corral_source_split_5571;

  corral_source_split_5571:
    assume {:verifier.code 0} true;
    assume {:branchcond $i527} true;
    goto $bb374, $bb375;

  $bb375:
    assume {:verifier.code 0} true;
    assume !($i527 == 1);
    goto $bb376;

  $bb376:
    assume {:verifier.code 0} true;
    $i54 := $i520;
    goto $bb379;

  $bb379:
    assume {:verifier.code 0} true;
    goto corral_source_split_5582;

  corral_source_split_5582:
    assume {:verifier.code 0} true;
    goto corral_source_split_5583;

  corral_source_split_5583:
    assume {:verifier.code 0} true;
    $p534 := $add.ref($add.ref($p36, $mul.ref(31, 24)), $mul.ref(0, 1));
    goto corral_source_split_5584;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    $p535 := $load.ref($M.0, $p534);
    goto corral_source_split_5585;

  corral_source_split_5585:
    assume {:verifier.code 0} true;
    $i536 := $p2i.ref.i64($p535);
    goto corral_source_split_5586;

  corral_source_split_5586:
    assume {:verifier.code 0} true;
    $i537 := $p2i.ref.i64($p1);
    goto corral_source_split_5587;

  corral_source_split_5587:
    assume {:verifier.code 0} true;
    $i538 := $eq.i64($i536, $i537);
    goto corral_source_split_5588;

  corral_source_split_5588:
    assume {:verifier.code 0} true;
    $i50, $i51 := 31, $i54;
    assume {:branchcond $i538} true;
    goto $bb380, $bb381;

  $bb381:
    assume !($i538 == 1);
    assume {:verifier.code 0} true;
    goto $bb382;

  $bb382:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i52, $i53 := 32, $i54;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4878;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_4879;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p57);
    goto corral_source_split_4881;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($p58, $mul.ref($sub.ref(0, 24), 72));
    goto corral_source_split_4882;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p58, $mul.ref($sub.ref(0, 24), 72)), $mul.ref(24, 1));
    goto corral_source_split_4883;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    $i61 := $p2i.ref.i64($p60);
    goto corral_source_split_4884;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_4885;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    $i63 := $p2i.ref.i64($p62);
    goto corral_source_split_4886;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    $i64 := $ne.i64($i61, $i63);
    goto corral_source_split_4887;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i64 == 1);
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb29:
    assume $i64 == 1;
    goto corral_source_split_4891;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    $p65, $i66, $i67 := $p59, 0, $i52;
    goto $bb32;

  $bb32:
    call $p68, $i69, $i70, $p71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $p84, $i85, $i86, $p87, $i88, $i89, $p90, $i91, $i92, $p93, $i94, $i95, $i96, $p97, $i98, $i99, $i100, $p101, $p102, $p103, $i104, $p105, $p106, $p107, $p108, $i109, $i110, $p111, $p112, $p113, $i114, $i115, $i116, $i117, $p118, $p119, $p120, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $i128, $p130, $p131, $p132, $p133, $p134, $i135, $i136, $p65, $i66, $i67, vslice_dummy_var_54 := enqueue_qtds_loop_$bb32($p0, $p1, $p2, $p36, $i37, $i53, $i63, $p68, $i69, $i70, $p71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $p84, $i85, $i86, $p87, $i88, $i89, $p90, $i91, $i92, $p93, $i94, $i95, $i96, $p97, $i98, $i99, $i100, $p101, $p102, $p103, $i104, $p105, $p106, $p107, $p108, $i109, $i110, $p111, $p112, $p113, $i114, $i115, $i116, $i117, $p118, $p119, $p120, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $i128, $p130, $p131, $p132, $p133, $p134, $i135, $i136, $p65, $i66, $i67, vslice_dummy_var_54);
    goto $bb32_last;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p65, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_4895;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.0, $p68);
    goto corral_source_split_4896;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    $i70 := $eq.i32($i69, 0);
    goto corral_source_split_4897;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    $p112 := $p65;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto corral_source_split_4960;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p65, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_4961;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    $i114 := $load.i32($M.0, $p113);
    goto corral_source_split_4962;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    $i115 := $eq.i32($i114, 1);
    goto corral_source_split_4963;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    $i127, $i128 := $i67, $i66;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($add.ref($p112, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_4993;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    $p131 := $load.ref($M.0, $p130);
    goto corral_source_split_4994;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    $p132 := $bitcast.ref.ref($p131);
    goto corral_source_split_4995;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($p132, $mul.ref($sub.ref(0, 24), 72));
    goto corral_source_split_4996;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p132, $mul.ref($sub.ref(0, 24), 72)), $mul.ref(24, 1));
    goto corral_source_split_4997;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    $i135 := $p2i.ref.i64($p134);
    goto corral_source_split_4998;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    $i136 := $ne.i64($i135, $i63);
    goto corral_source_split_4999;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i136 == 1);
    goto corral_source_split_5001;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb71:
    assume $i136 == 1;
    assume {:verifier.code 0} true;
    $p65, $i66, $i67 := $p133, $i128, $i127;
    goto $bb71_dummy;

  $bb56:
    assume $i115 == 1;
    goto corral_source_split_4965;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    $i116 := $sgt.i32($i67, 31);
    goto corral_source_split_4966;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    assume !($i116 == 1);
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $i124 := $i67;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto corral_source_split_4986;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    $i125 := $add.i32($i66, 1);
    call {:si_unique_call 837} {:cexpr "n"} boogie_si_record_i32($i125);
    goto corral_source_split_4987;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    $i126 := $sgt.i32($i125, 1);
    goto corral_source_split_4988;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    $i127, $i128 := $i124, $i125;
    goto $bb70;

  $bb67:
    assume $i126 == 1;
    goto corral_source_split_4990;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb58:
    assume $i116 == 1;
    goto corral_source_split_4968;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    $i117 := $sge.i32($i53, 0);
    goto corral_source_split_4969;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    assume !($i117 == 1);
    goto $bb60;

  $bb61:
    assume $i117 == 1;
    goto corral_source_split_4971;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p112, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_4972;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    $p119 := $load.ref($M.0, $p118);
    goto corral_source_split_4973;

  corral_source_split_4973:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p119, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_4974;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    $i121 := $load.i32($M.0, $p120);
    goto corral_source_split_4975;

  corral_source_split_4975:
    assume {:verifier.code 0} true;
    $i122 := $lshr.i32($i121, 30);
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    $i123 := $eq.i32($i122, 1);
    goto corral_source_split_4977;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i123 == 1);
    goto corral_source_split_4982;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} create_ptd_atl($p1, $p112, $p2);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    call {:si_unique_call 836} start_bus_transfer($p0, $i37, $i53, $p36, $p112, $p1, $p2);
    goto SeqInstr_190, SeqInstr_191;

  SeqInstr_191:
    assume assertsPassed;
    goto SeqInstr_192;

  SeqInstr_192:
    goto corral_source_split_4984;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    $i124 := $i53;
    goto $bb66;

  SeqInstr_190:
    assume !assertsPassed;
    return;

  $bb63:
    assume $i123 == 1;
    goto corral_source_split_4979;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 834} create_ptd_int($p1, $p112, $p2);
    goto corral_source_split_4980;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb34:
    assume $i70 == 1;
    goto corral_source_split_4899;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p65, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_4900;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.0, $p71);
    goto corral_source_split_4901;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    $i73 := $ne.i32($i72, 0);
    goto corral_source_split_4902;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    $i74 := $zext.i1.i32($i73);
    call {:si_unique_call 827} {:cexpr "__ret_warn_on___0"} boogie_si_record_i32($i74);
    goto corral_source_split_4903;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    $i75 := $ne.i32($i74, 0);
    goto corral_source_split_4904;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    $i76 := $zext.i1.i32($i75);
    goto corral_source_split_4905;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    $i77 := $sext.i32.i64($i76);
    goto corral_source_split_4906;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 828} $i78 := ldv__builtin_expect($i77, 0);
    call {:si_unique_call 829} {:cexpr "tmp___3"} boogie_si_record_i64($i78);
    goto corral_source_split_4907;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    $i79 := $ne.i64($i78, 0);
    goto corral_source_split_4908;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i80 := $ne.i32($i74, 0);
    goto corral_source_split_4913;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    $i81 := $zext.i1.i32($i80);
    goto corral_source_split_4914;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    $i82 := $sext.i32.i64($i81);
    goto corral_source_split_4915;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 831} vslice_dummy_var_54 := ldv__builtin_expect($i82, 0);
    goto corral_source_split_4916;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 832} alloc_mem($p0, $p65);
    goto corral_source_split_4917;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p65, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_4918;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    $i85 := $load.i64($M.0, $p84);
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    $i86 := $ne.i64($i85, 0);
    goto corral_source_split_4920;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    assume !($i86 == 1);
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p65, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_4929;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    $i91 := $load.i64($M.0, $p90);
    goto corral_source_split_4930;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    $i92 := $ne.i64($i91, 0);
    goto corral_source_split_4931;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    assume !($i92 == 1);
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p65, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_4957;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p111, 1);
    goto corral_source_split_4958;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    $p112 := $p65;
    goto $bb55;

  $bb46:
    assume $i92 == 1;
    goto corral_source_split_4933;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p65, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_4934;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    $i94 := $load.i8($M.0, $p93);
    goto corral_source_split_4935;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    $i95 := $zext.i8.i32($i94);
    goto corral_source_split_4936;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    $i96 := $eq.i32($i95, 2);
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb51;

  $bb51:
    assume !($i96 == 1);
    goto corral_source_split_4951;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p65, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_4952;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    $i98 := $load.i8($M.0, $p97);
    goto corral_source_split_4953;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    $i99 := $zext.i8.i32($i98);
    goto corral_source_split_4954;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    $i100 := $eq.i32($i99, 0);
    goto corral_source_split_4955;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    assume !($i100 == 1);
    goto $bb48;

  $bb52:
    assume {:verifier.code 0} true;
    assume $i100 == 1;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_4939;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    $p102 := $load.ref($M.0, $p101);
    goto corral_source_split_4940;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p65, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_4941;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    $i104 := $load.i32($M.0, $p103);
    goto corral_source_split_4942;

  corral_source_split_4942:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p65, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_4943;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    $p106 := $load.ref($M.0, $p105);
    goto corral_source_split_4944;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    $p107 := $bitcast.ref.ref($p106);
    goto corral_source_split_4945;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p65, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_4946;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    $i109 := $load.i64($M.0, $p108);
    goto corral_source_split_4947;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    $i110 := $trunc.i64.i32($i109);
    goto corral_source_split_4948;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} mem_writes8($p102, $i104, $p107, $i110);
    goto corral_source_split_4949;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb49:
    assume {:verifier.code 0} true;
    assume $i96 == 1;
    goto $bb50;

  $bb39:
    assume $i86 == 1;
    goto corral_source_split_4922;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p65, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_4923;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    $i88 := $load.i32($M.0, $p87);
    goto corral_source_split_4924;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    $i89 := $eq.i32($i88, 0);
    goto corral_source_split_4925;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    assume !($i89 == 1);
    goto $bb41;

  $bb42:
    assume $i89 == 1;
    goto corral_source_split_4927;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb36:
    assume $i79 == 1;
    goto corral_source_split_4910;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 830} warn_slowpath_null(.str.29, 871);
    goto corral_source_split_4911;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb380:
    assume {:verifier.code 0} true;
    assume $i538 == 1;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4876;

  corral_source_split_4876:
    assume {:verifier.code 0} true;
    $i52, $i53 := $i50, $i51;
    goto $bb25;

  $bb374:
    assume $i527 == 1;
    goto corral_source_split_5573;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    goto corral_source_split_5574;

  corral_source_split_5574:
    assume {:verifier.code 0} true;
    $p529 := $add.ref($add.ref($p36, $mul.ref(31, 24)), $mul.ref(8, 1));
    goto corral_source_split_5575;

  corral_source_split_5575:
    assume {:verifier.code 0} true;
    $p530 := $load.ref($M.0, $p529);
    goto corral_source_split_5576;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    $i531 := $p2i.ref.i64($p530);
    goto corral_source_split_5577;

  corral_source_split_5577:
    assume {:verifier.code 0} true;
    $i532 := $eq.i64($i531, 0);
    goto corral_source_split_5578;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    assume {:branchcond $i532} true;
    goto $bb377, $bb378;

  $bb378:
    assume {:verifier.code 0} true;
    assume !($i532 == 1);
    goto $bb376;

  $bb377:
    assume $i532 == 1;
    goto corral_source_split_5580;

  corral_source_split_5580:
    assume {:verifier.code 0} true;
    $i54 := 31;
    goto $bb379;

  $bb370:
    assume {:verifier.code 0} true;
    assume $i526 == 1;
    goto $bb23;

  $bb364:
    assume $i514 == 1;
    goto corral_source_split_5554;

  corral_source_split_5554:
    assume {:verifier.code 0} true;
    goto corral_source_split_5555;

  corral_source_split_5555:
    assume {:verifier.code 0} true;
    $p516 := $add.ref($add.ref($p36, $mul.ref(30, 24)), $mul.ref(8, 1));
    goto corral_source_split_5556;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    $p517 := $load.ref($M.0, $p516);
    goto corral_source_split_5557;

  corral_source_split_5557:
    assume {:verifier.code 0} true;
    $i518 := $p2i.ref.i64($p517);
    goto corral_source_split_5558;

  corral_source_split_5558:
    assume {:verifier.code 0} true;
    $i519 := $eq.i64($i518, 0);
    goto corral_source_split_5559;

  corral_source_split_5559:
    assume {:verifier.code 0} true;
    assume {:branchcond $i519} true;
    goto $bb367, $bb368;

  $bb368:
    assume {:verifier.code 0} true;
    assume !($i519 == 1);
    goto $bb366;

  $bb367:
    assume $i519 == 1;
    goto corral_source_split_5561;

  corral_source_split_5561:
    assume {:verifier.code 0} true;
    $i520 := 30;
    goto $bb369;

  $bb360:
    assume {:verifier.code 0} true;
    assume $i513 == 1;
    goto $bb23;

  $bb354:
    assume $i501 == 1;
    goto corral_source_split_5535;

  corral_source_split_5535:
    assume {:verifier.code 0} true;
    goto corral_source_split_5536;

  corral_source_split_5536:
    assume {:verifier.code 0} true;
    $p503 := $add.ref($add.ref($p36, $mul.ref(29, 24)), $mul.ref(8, 1));
    goto corral_source_split_5537;

  corral_source_split_5537:
    assume {:verifier.code 0} true;
    $p504 := $load.ref($M.0, $p503);
    goto corral_source_split_5538;

  corral_source_split_5538:
    assume {:verifier.code 0} true;
    $i505 := $p2i.ref.i64($p504);
    goto corral_source_split_5539;

  corral_source_split_5539:
    assume {:verifier.code 0} true;
    $i506 := $eq.i64($i505, 0);
    goto corral_source_split_5540;

  corral_source_split_5540:
    assume {:verifier.code 0} true;
    assume {:branchcond $i506} true;
    goto $bb357, $bb358;

  $bb358:
    assume {:verifier.code 0} true;
    assume !($i506 == 1);
    goto $bb356;

  $bb357:
    assume $i506 == 1;
    goto corral_source_split_5542;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    $i507 := 29;
    goto $bb359;

  $bb350:
    assume {:verifier.code 0} true;
    assume $i500 == 1;
    goto $bb23;

  $bb344:
    assume $i488 == 1;
    goto corral_source_split_5516;

  corral_source_split_5516:
    assume {:verifier.code 0} true;
    goto corral_source_split_5517;

  corral_source_split_5517:
    assume {:verifier.code 0} true;
    $p490 := $add.ref($add.ref($p36, $mul.ref(28, 24)), $mul.ref(8, 1));
    goto corral_source_split_5518;

  corral_source_split_5518:
    assume {:verifier.code 0} true;
    $p491 := $load.ref($M.0, $p490);
    goto corral_source_split_5519;

  corral_source_split_5519:
    assume {:verifier.code 0} true;
    $i492 := $p2i.ref.i64($p491);
    goto corral_source_split_5520;

  corral_source_split_5520:
    assume {:verifier.code 0} true;
    $i493 := $eq.i64($i492, 0);
    goto corral_source_split_5521;

  corral_source_split_5521:
    assume {:verifier.code 0} true;
    assume {:branchcond $i493} true;
    goto $bb347, $bb348;

  $bb348:
    assume {:verifier.code 0} true;
    assume !($i493 == 1);
    goto $bb346;

  $bb347:
    assume $i493 == 1;
    goto corral_source_split_5523;

  corral_source_split_5523:
    assume {:verifier.code 0} true;
    $i494 := 28;
    goto $bb349;

  $bb340:
    assume {:verifier.code 0} true;
    assume $i487 == 1;
    goto $bb23;

  $bb334:
    assume $i475 == 1;
    goto corral_source_split_5497;

  corral_source_split_5497:
    assume {:verifier.code 0} true;
    goto corral_source_split_5498;

  corral_source_split_5498:
    assume {:verifier.code 0} true;
    $p477 := $add.ref($add.ref($p36, $mul.ref(27, 24)), $mul.ref(8, 1));
    goto corral_source_split_5499;

  corral_source_split_5499:
    assume {:verifier.code 0} true;
    $p478 := $load.ref($M.0, $p477);
    goto corral_source_split_5500;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    $i479 := $p2i.ref.i64($p478);
    goto corral_source_split_5501;

  corral_source_split_5501:
    assume {:verifier.code 0} true;
    $i480 := $eq.i64($i479, 0);
    goto corral_source_split_5502;

  corral_source_split_5502:
    assume {:verifier.code 0} true;
    assume {:branchcond $i480} true;
    goto $bb337, $bb338;

  $bb338:
    assume {:verifier.code 0} true;
    assume !($i480 == 1);
    goto $bb336;

  $bb337:
    assume $i480 == 1;
    goto corral_source_split_5504;

  corral_source_split_5504:
    assume {:verifier.code 0} true;
    $i481 := 27;
    goto $bb339;

  $bb330:
    assume {:verifier.code 0} true;
    assume $i474 == 1;
    goto $bb23;

  $bb324:
    assume $i462 == 1;
    goto corral_source_split_5478;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    goto corral_source_split_5479;

  corral_source_split_5479:
    assume {:verifier.code 0} true;
    $p464 := $add.ref($add.ref($p36, $mul.ref(26, 24)), $mul.ref(8, 1));
    goto corral_source_split_5480;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    $p465 := $load.ref($M.0, $p464);
    goto corral_source_split_5481;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    $i466 := $p2i.ref.i64($p465);
    goto corral_source_split_5482;

  corral_source_split_5482:
    assume {:verifier.code 0} true;
    $i467 := $eq.i64($i466, 0);
    goto corral_source_split_5483;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    assume {:branchcond $i467} true;
    goto $bb327, $bb328;

  $bb328:
    assume {:verifier.code 0} true;
    assume !($i467 == 1);
    goto $bb326;

  $bb327:
    assume $i467 == 1;
    goto corral_source_split_5485;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    $i468 := 26;
    goto $bb329;

  $bb320:
    assume {:verifier.code 0} true;
    assume $i461 == 1;
    goto $bb23;

  $bb314:
    assume $i449 == 1;
    goto corral_source_split_5459;

  corral_source_split_5459:
    assume {:verifier.code 0} true;
    goto corral_source_split_5460;

  corral_source_split_5460:
    assume {:verifier.code 0} true;
    $p451 := $add.ref($add.ref($p36, $mul.ref(25, 24)), $mul.ref(8, 1));
    goto corral_source_split_5461;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    $p452 := $load.ref($M.0, $p451);
    goto corral_source_split_5462;

  corral_source_split_5462:
    assume {:verifier.code 0} true;
    $i453 := $p2i.ref.i64($p452);
    goto corral_source_split_5463;

  corral_source_split_5463:
    assume {:verifier.code 0} true;
    $i454 := $eq.i64($i453, 0);
    goto corral_source_split_5464;

  corral_source_split_5464:
    assume {:verifier.code 0} true;
    assume {:branchcond $i454} true;
    goto $bb317, $bb318;

  $bb318:
    assume {:verifier.code 0} true;
    assume !($i454 == 1);
    goto $bb316;

  $bb317:
    assume $i454 == 1;
    goto corral_source_split_5466;

  corral_source_split_5466:
    assume {:verifier.code 0} true;
    $i455 := 25;
    goto $bb319;

  $bb310:
    assume {:verifier.code 0} true;
    assume $i448 == 1;
    goto $bb23;

  $bb304:
    assume $i436 == 1;
    goto corral_source_split_5440;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    goto corral_source_split_5441;

  corral_source_split_5441:
    assume {:verifier.code 0} true;
    $p438 := $add.ref($add.ref($p36, $mul.ref(24, 24)), $mul.ref(8, 1));
    goto corral_source_split_5442;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    $p439 := $load.ref($M.0, $p438);
    goto corral_source_split_5443;

  corral_source_split_5443:
    assume {:verifier.code 0} true;
    $i440 := $p2i.ref.i64($p439);
    goto corral_source_split_5444;

  corral_source_split_5444:
    assume {:verifier.code 0} true;
    $i441 := $eq.i64($i440, 0);
    goto corral_source_split_5445;

  corral_source_split_5445:
    assume {:verifier.code 0} true;
    assume {:branchcond $i441} true;
    goto $bb307, $bb308;

  $bb308:
    assume {:verifier.code 0} true;
    assume !($i441 == 1);
    goto $bb306;

  $bb307:
    assume $i441 == 1;
    goto corral_source_split_5447;

  corral_source_split_5447:
    assume {:verifier.code 0} true;
    $i442 := 24;
    goto $bb309;

  $bb300:
    assume {:verifier.code 0} true;
    assume $i435 == 1;
    goto $bb23;

  $bb294:
    assume $i423 == 1;
    goto corral_source_split_5421;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    goto corral_source_split_5422;

  corral_source_split_5422:
    assume {:verifier.code 0} true;
    $p425 := $add.ref($add.ref($p36, $mul.ref(23, 24)), $mul.ref(8, 1));
    goto corral_source_split_5423;

  corral_source_split_5423:
    assume {:verifier.code 0} true;
    $p426 := $load.ref($M.0, $p425);
    goto corral_source_split_5424;

  corral_source_split_5424:
    assume {:verifier.code 0} true;
    $i427 := $p2i.ref.i64($p426);
    goto corral_source_split_5425;

  corral_source_split_5425:
    assume {:verifier.code 0} true;
    $i428 := $eq.i64($i427, 0);
    goto corral_source_split_5426;

  corral_source_split_5426:
    assume {:verifier.code 0} true;
    assume {:branchcond $i428} true;
    goto $bb297, $bb298;

  $bb298:
    assume {:verifier.code 0} true;
    assume !($i428 == 1);
    goto $bb296;

  $bb297:
    assume $i428 == 1;
    goto corral_source_split_5428;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    $i429 := 23;
    goto $bb299;

  $bb290:
    assume {:verifier.code 0} true;
    assume $i422 == 1;
    goto $bb23;

  $bb284:
    assume $i410 == 1;
    goto corral_source_split_5402;

  corral_source_split_5402:
    assume {:verifier.code 0} true;
    goto corral_source_split_5403;

  corral_source_split_5403:
    assume {:verifier.code 0} true;
    $p412 := $add.ref($add.ref($p36, $mul.ref(22, 24)), $mul.ref(8, 1));
    goto corral_source_split_5404;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    $p413 := $load.ref($M.0, $p412);
    goto corral_source_split_5405;

  corral_source_split_5405:
    assume {:verifier.code 0} true;
    $i414 := $p2i.ref.i64($p413);
    goto corral_source_split_5406;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    $i415 := $eq.i64($i414, 0);
    goto corral_source_split_5407;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    assume {:branchcond $i415} true;
    goto $bb287, $bb288;

  $bb288:
    assume {:verifier.code 0} true;
    assume !($i415 == 1);
    goto $bb286;

  $bb287:
    assume $i415 == 1;
    goto corral_source_split_5409;

  corral_source_split_5409:
    assume {:verifier.code 0} true;
    $i416 := 22;
    goto $bb289;

  $bb280:
    assume {:verifier.code 0} true;
    assume $i409 == 1;
    goto $bb23;

  $bb274:
    assume $i397 == 1;
    goto corral_source_split_5383;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    goto corral_source_split_5384;

  corral_source_split_5384:
    assume {:verifier.code 0} true;
    $p399 := $add.ref($add.ref($p36, $mul.ref(21, 24)), $mul.ref(8, 1));
    goto corral_source_split_5385;

  corral_source_split_5385:
    assume {:verifier.code 0} true;
    $p400 := $load.ref($M.0, $p399);
    goto corral_source_split_5386;

  corral_source_split_5386:
    assume {:verifier.code 0} true;
    $i401 := $p2i.ref.i64($p400);
    goto corral_source_split_5387;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    $i402 := $eq.i64($i401, 0);
    goto corral_source_split_5388;

  corral_source_split_5388:
    assume {:verifier.code 0} true;
    assume {:branchcond $i402} true;
    goto $bb277, $bb278;

  $bb278:
    assume {:verifier.code 0} true;
    assume !($i402 == 1);
    goto $bb276;

  $bb277:
    assume $i402 == 1;
    goto corral_source_split_5390;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    $i403 := 21;
    goto $bb279;

  $bb270:
    assume {:verifier.code 0} true;
    assume $i396 == 1;
    goto $bb23;

  $bb264:
    assume $i384 == 1;
    goto corral_source_split_5364;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    goto corral_source_split_5365;

  corral_source_split_5365:
    assume {:verifier.code 0} true;
    $p386 := $add.ref($add.ref($p36, $mul.ref(20, 24)), $mul.ref(8, 1));
    goto corral_source_split_5366;

  corral_source_split_5366:
    assume {:verifier.code 0} true;
    $p387 := $load.ref($M.0, $p386);
    goto corral_source_split_5367;

  corral_source_split_5367:
    assume {:verifier.code 0} true;
    $i388 := $p2i.ref.i64($p387);
    goto corral_source_split_5368;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    $i389 := $eq.i64($i388, 0);
    goto corral_source_split_5369;

  corral_source_split_5369:
    assume {:verifier.code 0} true;
    assume {:branchcond $i389} true;
    goto $bb267, $bb268;

  $bb268:
    assume {:verifier.code 0} true;
    assume !($i389 == 1);
    goto $bb266;

  $bb267:
    assume $i389 == 1;
    goto corral_source_split_5371;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    $i390 := 20;
    goto $bb269;

  $bb260:
    assume {:verifier.code 0} true;
    assume $i383 == 1;
    goto $bb23;

  $bb254:
    assume $i371 == 1;
    goto corral_source_split_5345;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    goto corral_source_split_5346;

  corral_source_split_5346:
    assume {:verifier.code 0} true;
    $p373 := $add.ref($add.ref($p36, $mul.ref(19, 24)), $mul.ref(8, 1));
    goto corral_source_split_5347;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    $p374 := $load.ref($M.0, $p373);
    goto corral_source_split_5348;

  corral_source_split_5348:
    assume {:verifier.code 0} true;
    $i375 := $p2i.ref.i64($p374);
    goto corral_source_split_5349;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    $i376 := $eq.i64($i375, 0);
    goto corral_source_split_5350;

  corral_source_split_5350:
    assume {:verifier.code 0} true;
    assume {:branchcond $i376} true;
    goto $bb257, $bb258;

  $bb258:
    assume {:verifier.code 0} true;
    assume !($i376 == 1);
    goto $bb256;

  $bb257:
    assume $i376 == 1;
    goto corral_source_split_5352;

  corral_source_split_5352:
    assume {:verifier.code 0} true;
    $i377 := 19;
    goto $bb259;

  $bb250:
    assume {:verifier.code 0} true;
    assume $i370 == 1;
    goto $bb23;

  $bb244:
    assume $i358 == 1;
    goto corral_source_split_5326;

  corral_source_split_5326:
    assume {:verifier.code 0} true;
    goto corral_source_split_5327;

  corral_source_split_5327:
    assume {:verifier.code 0} true;
    $p360 := $add.ref($add.ref($p36, $mul.ref(18, 24)), $mul.ref(8, 1));
    goto corral_source_split_5328;

  corral_source_split_5328:
    assume {:verifier.code 0} true;
    $p361 := $load.ref($M.0, $p360);
    goto corral_source_split_5329;

  corral_source_split_5329:
    assume {:verifier.code 0} true;
    $i362 := $p2i.ref.i64($p361);
    goto corral_source_split_5330;

  corral_source_split_5330:
    assume {:verifier.code 0} true;
    $i363 := $eq.i64($i362, 0);
    goto corral_source_split_5331;

  corral_source_split_5331:
    assume {:verifier.code 0} true;
    assume {:branchcond $i363} true;
    goto $bb247, $bb248;

  $bb248:
    assume {:verifier.code 0} true;
    assume !($i363 == 1);
    goto $bb246;

  $bb247:
    assume $i363 == 1;
    goto corral_source_split_5333;

  corral_source_split_5333:
    assume {:verifier.code 0} true;
    $i364 := 18;
    goto $bb249;

  $bb240:
    assume {:verifier.code 0} true;
    assume $i357 == 1;
    goto $bb23;

  $bb234:
    assume $i345 == 1;
    goto corral_source_split_5307;

  corral_source_split_5307:
    assume {:verifier.code 0} true;
    goto corral_source_split_5308;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    $p347 := $add.ref($add.ref($p36, $mul.ref(17, 24)), $mul.ref(8, 1));
    goto corral_source_split_5309;

  corral_source_split_5309:
    assume {:verifier.code 0} true;
    $p348 := $load.ref($M.0, $p347);
    goto corral_source_split_5310;

  corral_source_split_5310:
    assume {:verifier.code 0} true;
    $i349 := $p2i.ref.i64($p348);
    goto corral_source_split_5311;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    $i350 := $eq.i64($i349, 0);
    goto corral_source_split_5312;

  corral_source_split_5312:
    assume {:verifier.code 0} true;
    assume {:branchcond $i350} true;
    goto $bb237, $bb238;

  $bb238:
    assume {:verifier.code 0} true;
    assume !($i350 == 1);
    goto $bb236;

  $bb237:
    assume $i350 == 1;
    goto corral_source_split_5314;

  corral_source_split_5314:
    assume {:verifier.code 0} true;
    $i351 := 17;
    goto $bb239;

  $bb230:
    assume {:verifier.code 0} true;
    assume $i344 == 1;
    goto $bb23;

  $bb224:
    assume $i332 == 1;
    goto corral_source_split_5288;

  corral_source_split_5288:
    assume {:verifier.code 0} true;
    goto corral_source_split_5289;

  corral_source_split_5289:
    assume {:verifier.code 0} true;
    $p334 := $add.ref($add.ref($p36, $mul.ref(16, 24)), $mul.ref(8, 1));
    goto corral_source_split_5290;

  corral_source_split_5290:
    assume {:verifier.code 0} true;
    $p335 := $load.ref($M.0, $p334);
    goto corral_source_split_5291;

  corral_source_split_5291:
    assume {:verifier.code 0} true;
    $i336 := $p2i.ref.i64($p335);
    goto corral_source_split_5292;

  corral_source_split_5292:
    assume {:verifier.code 0} true;
    $i337 := $eq.i64($i336, 0);
    goto corral_source_split_5293;

  corral_source_split_5293:
    assume {:verifier.code 0} true;
    assume {:branchcond $i337} true;
    goto $bb227, $bb228;

  $bb228:
    assume {:verifier.code 0} true;
    assume !($i337 == 1);
    goto $bb226;

  $bb227:
    assume $i337 == 1;
    goto corral_source_split_5295;

  corral_source_split_5295:
    assume {:verifier.code 0} true;
    $i338 := 16;
    goto $bb229;

  $bb220:
    assume {:verifier.code 0} true;
    assume $i331 == 1;
    goto $bb23;

  $bb214:
    assume $i319 == 1;
    goto corral_source_split_5269;

  corral_source_split_5269:
    assume {:verifier.code 0} true;
    goto corral_source_split_5270;

  corral_source_split_5270:
    assume {:verifier.code 0} true;
    $p321 := $add.ref($add.ref($p36, $mul.ref(15, 24)), $mul.ref(8, 1));
    goto corral_source_split_5271;

  corral_source_split_5271:
    assume {:verifier.code 0} true;
    $p322 := $load.ref($M.0, $p321);
    goto corral_source_split_5272;

  corral_source_split_5272:
    assume {:verifier.code 0} true;
    $i323 := $p2i.ref.i64($p322);
    goto corral_source_split_5273;

  corral_source_split_5273:
    assume {:verifier.code 0} true;
    $i324 := $eq.i64($i323, 0);
    goto corral_source_split_5274;

  corral_source_split_5274:
    assume {:verifier.code 0} true;
    assume {:branchcond $i324} true;
    goto $bb217, $bb218;

  $bb218:
    assume {:verifier.code 0} true;
    assume !($i324 == 1);
    goto $bb216;

  $bb217:
    assume $i324 == 1;
    goto corral_source_split_5276;

  corral_source_split_5276:
    assume {:verifier.code 0} true;
    $i325 := 15;
    goto $bb219;

  $bb210:
    assume {:verifier.code 0} true;
    assume $i318 == 1;
    goto $bb23;

  $bb204:
    assume $i306 == 1;
    goto corral_source_split_5250;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    goto corral_source_split_5251;

  corral_source_split_5251:
    assume {:verifier.code 0} true;
    $p308 := $add.ref($add.ref($p36, $mul.ref(14, 24)), $mul.ref(8, 1));
    goto corral_source_split_5252;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    $p309 := $load.ref($M.0, $p308);
    goto corral_source_split_5253;

  corral_source_split_5253:
    assume {:verifier.code 0} true;
    $i310 := $p2i.ref.i64($p309);
    goto corral_source_split_5254;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    $i311 := $eq.i64($i310, 0);
    goto corral_source_split_5255;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    assume {:branchcond $i311} true;
    goto $bb207, $bb208;

  $bb208:
    assume {:verifier.code 0} true;
    assume !($i311 == 1);
    goto $bb206;

  $bb207:
    assume $i311 == 1;
    goto corral_source_split_5257;

  corral_source_split_5257:
    assume {:verifier.code 0} true;
    $i312 := 14;
    goto $bb209;

  $bb200:
    assume {:verifier.code 0} true;
    assume $i305 == 1;
    goto $bb23;

  $bb194:
    assume $i293 == 1;
    goto corral_source_split_5231;

  corral_source_split_5231:
    assume {:verifier.code 0} true;
    goto corral_source_split_5232;

  corral_source_split_5232:
    assume {:verifier.code 0} true;
    $p295 := $add.ref($add.ref($p36, $mul.ref(13, 24)), $mul.ref(8, 1));
    goto corral_source_split_5233;

  corral_source_split_5233:
    assume {:verifier.code 0} true;
    $p296 := $load.ref($M.0, $p295);
    goto corral_source_split_5234;

  corral_source_split_5234:
    assume {:verifier.code 0} true;
    $i297 := $p2i.ref.i64($p296);
    goto corral_source_split_5235;

  corral_source_split_5235:
    assume {:verifier.code 0} true;
    $i298 := $eq.i64($i297, 0);
    goto corral_source_split_5236;

  corral_source_split_5236:
    assume {:verifier.code 0} true;
    assume {:branchcond $i298} true;
    goto $bb197, $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    assume !($i298 == 1);
    goto $bb196;

  $bb197:
    assume $i298 == 1;
    goto corral_source_split_5238;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    $i299 := 13;
    goto $bb199;

  $bb190:
    assume {:verifier.code 0} true;
    assume $i292 == 1;
    goto $bb23;

  $bb184:
    assume $i280 == 1;
    goto corral_source_split_5212;

  corral_source_split_5212:
    assume {:verifier.code 0} true;
    goto corral_source_split_5213;

  corral_source_split_5213:
    assume {:verifier.code 0} true;
    $p282 := $add.ref($add.ref($p36, $mul.ref(12, 24)), $mul.ref(8, 1));
    goto corral_source_split_5214;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    $p283 := $load.ref($M.0, $p282);
    goto corral_source_split_5215;

  corral_source_split_5215:
    assume {:verifier.code 0} true;
    $i284 := $p2i.ref.i64($p283);
    goto corral_source_split_5216;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    $i285 := $eq.i64($i284, 0);
    goto corral_source_split_5217;

  corral_source_split_5217:
    assume {:verifier.code 0} true;
    assume {:branchcond $i285} true;
    goto $bb187, $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    assume !($i285 == 1);
    goto $bb186;

  $bb187:
    assume $i285 == 1;
    goto corral_source_split_5219;

  corral_source_split_5219:
    assume {:verifier.code 0} true;
    $i286 := 12;
    goto $bb189;

  $bb180:
    assume {:verifier.code 0} true;
    assume $i279 == 1;
    goto $bb23;

  $bb174:
    assume $i267 == 1;
    goto corral_source_split_5193;

  corral_source_split_5193:
    assume {:verifier.code 0} true;
    goto corral_source_split_5194;

  corral_source_split_5194:
    assume {:verifier.code 0} true;
    $p269 := $add.ref($add.ref($p36, $mul.ref(11, 24)), $mul.ref(8, 1));
    goto corral_source_split_5195;

  corral_source_split_5195:
    assume {:verifier.code 0} true;
    $p270 := $load.ref($M.0, $p269);
    goto corral_source_split_5196;

  corral_source_split_5196:
    assume {:verifier.code 0} true;
    $i271 := $p2i.ref.i64($p270);
    goto corral_source_split_5197;

  corral_source_split_5197:
    assume {:verifier.code 0} true;
    $i272 := $eq.i64($i271, 0);
    goto corral_source_split_5198;

  corral_source_split_5198:
    assume {:verifier.code 0} true;
    assume {:branchcond $i272} true;
    goto $bb177, $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    assume !($i272 == 1);
    goto $bb176;

  $bb177:
    assume $i272 == 1;
    goto corral_source_split_5200;

  corral_source_split_5200:
    assume {:verifier.code 0} true;
    $i273 := 11;
    goto $bb179;

  $bb170:
    assume {:verifier.code 0} true;
    assume $i266 == 1;
    goto $bb23;

  $bb164:
    assume $i254 == 1;
    goto corral_source_split_5174;

  corral_source_split_5174:
    assume {:verifier.code 0} true;
    goto corral_source_split_5175;

  corral_source_split_5175:
    assume {:verifier.code 0} true;
    $p256 := $add.ref($add.ref($p36, $mul.ref(10, 24)), $mul.ref(8, 1));
    goto corral_source_split_5176;

  corral_source_split_5176:
    assume {:verifier.code 0} true;
    $p257 := $load.ref($M.0, $p256);
    goto corral_source_split_5177;

  corral_source_split_5177:
    assume {:verifier.code 0} true;
    $i258 := $p2i.ref.i64($p257);
    goto corral_source_split_5178;

  corral_source_split_5178:
    assume {:verifier.code 0} true;
    $i259 := $eq.i64($i258, 0);
    goto corral_source_split_5179;

  corral_source_split_5179:
    assume {:verifier.code 0} true;
    assume {:branchcond $i259} true;
    goto $bb167, $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    assume !($i259 == 1);
    goto $bb166;

  $bb167:
    assume $i259 == 1;
    goto corral_source_split_5181;

  corral_source_split_5181:
    assume {:verifier.code 0} true;
    $i260 := 10;
    goto $bb169;

  $bb160:
    assume {:verifier.code 0} true;
    assume $i253 == 1;
    goto $bb23;

  $bb154:
    assume $i241 == 1;
    goto corral_source_split_5155;

  corral_source_split_5155:
    assume {:verifier.code 0} true;
    goto corral_source_split_5156;

  corral_source_split_5156:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($add.ref($p36, $mul.ref(9, 24)), $mul.ref(8, 1));
    goto corral_source_split_5157;

  corral_source_split_5157:
    assume {:verifier.code 0} true;
    $p244 := $load.ref($M.0, $p243);
    goto corral_source_split_5158;

  corral_source_split_5158:
    assume {:verifier.code 0} true;
    $i245 := $p2i.ref.i64($p244);
    goto corral_source_split_5159;

  corral_source_split_5159:
    assume {:verifier.code 0} true;
    $i246 := $eq.i64($i245, 0);
    goto corral_source_split_5160;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    assume {:branchcond $i246} true;
    goto $bb157, $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    assume !($i246 == 1);
    goto $bb156;

  $bb157:
    assume $i246 == 1;
    goto corral_source_split_5162;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    $i247 := 9;
    goto $bb159;

  $bb150:
    assume {:verifier.code 0} true;
    assume $i240 == 1;
    goto $bb23;

  $bb144:
    assume $i228 == 1;
    goto corral_source_split_5136;

  corral_source_split_5136:
    assume {:verifier.code 0} true;
    goto corral_source_split_5137;

  corral_source_split_5137:
    assume {:verifier.code 0} true;
    $p230 := $add.ref($add.ref($p36, $mul.ref(8, 24)), $mul.ref(8, 1));
    goto corral_source_split_5138;

  corral_source_split_5138:
    assume {:verifier.code 0} true;
    $p231 := $load.ref($M.0, $p230);
    goto corral_source_split_5139;

  corral_source_split_5139:
    assume {:verifier.code 0} true;
    $i232 := $p2i.ref.i64($p231);
    goto corral_source_split_5140;

  corral_source_split_5140:
    assume {:verifier.code 0} true;
    $i233 := $eq.i64($i232, 0);
    goto corral_source_split_5141;

  corral_source_split_5141:
    assume {:verifier.code 0} true;
    assume {:branchcond $i233} true;
    goto $bb147, $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    assume !($i233 == 1);
    goto $bb146;

  $bb147:
    assume $i233 == 1;
    goto corral_source_split_5143;

  corral_source_split_5143:
    assume {:verifier.code 0} true;
    $i234 := 8;
    goto $bb149;

  $bb140:
    assume {:verifier.code 0} true;
    assume $i227 == 1;
    goto $bb23;

  $bb134:
    assume $i215 == 1;
    goto corral_source_split_5117;

  corral_source_split_5117:
    assume {:verifier.code 0} true;
    goto corral_source_split_5118;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($p36, $mul.ref(7, 24)), $mul.ref(8, 1));
    goto corral_source_split_5119;

  corral_source_split_5119:
    assume {:verifier.code 0} true;
    $p218 := $load.ref($M.0, $p217);
    goto corral_source_split_5120;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    $i219 := $p2i.ref.i64($p218);
    goto corral_source_split_5121;

  corral_source_split_5121:
    assume {:verifier.code 0} true;
    $i220 := $eq.i64($i219, 0);
    goto corral_source_split_5122;

  corral_source_split_5122:
    assume {:verifier.code 0} true;
    assume {:branchcond $i220} true;
    goto $bb137, $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    assume !($i220 == 1);
    goto $bb136;

  $bb137:
    assume $i220 == 1;
    goto corral_source_split_5124;

  corral_source_split_5124:
    assume {:verifier.code 0} true;
    $i221 := 7;
    goto $bb139;

  $bb130:
    assume {:verifier.code 0} true;
    assume $i214 == 1;
    goto $bb23;

  $bb124:
    assume $i202 == 1;
    goto corral_source_split_5098;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    goto corral_source_split_5099;

  corral_source_split_5099:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($p36, $mul.ref(6, 24)), $mul.ref(8, 1));
    goto corral_source_split_5100;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    $p205 := $load.ref($M.0, $p204);
    goto corral_source_split_5101;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    $i206 := $p2i.ref.i64($p205);
    goto corral_source_split_5102;

  corral_source_split_5102:
    assume {:verifier.code 0} true;
    $i207 := $eq.i64($i206, 0);
    goto corral_source_split_5103;

  corral_source_split_5103:
    assume {:verifier.code 0} true;
    assume {:branchcond $i207} true;
    goto $bb127, $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    assume !($i207 == 1);
    goto $bb126;

  $bb127:
    assume $i207 == 1;
    goto corral_source_split_5105;

  corral_source_split_5105:
    assume {:verifier.code 0} true;
    $i208 := 6;
    goto $bb129;

  $bb120:
    assume {:verifier.code 0} true;
    assume $i201 == 1;
    goto $bb23;

  $bb114:
    assume $i189 == 1;
    goto corral_source_split_5079;

  corral_source_split_5079:
    assume {:verifier.code 0} true;
    goto corral_source_split_5080;

  corral_source_split_5080:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($p36, $mul.ref(5, 24)), $mul.ref(8, 1));
    goto corral_source_split_5081;

  corral_source_split_5081:
    assume {:verifier.code 0} true;
    $p192 := $load.ref($M.0, $p191);
    goto corral_source_split_5082;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    $i193 := $p2i.ref.i64($p192);
    goto corral_source_split_5083;

  corral_source_split_5083:
    assume {:verifier.code 0} true;
    $i194 := $eq.i64($i193, 0);
    goto corral_source_split_5084;

  corral_source_split_5084:
    assume {:verifier.code 0} true;
    assume {:branchcond $i194} true;
    goto $bb117, $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    assume !($i194 == 1);
    goto $bb116;

  $bb117:
    assume $i194 == 1;
    goto corral_source_split_5086;

  corral_source_split_5086:
    assume {:verifier.code 0} true;
    $i195 := 5;
    goto $bb119;

  $bb110:
    assume {:verifier.code 0} true;
    assume $i188 == 1;
    goto $bb23;

  $bb104:
    assume $i176 == 1;
    goto corral_source_split_5060;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    goto corral_source_split_5061;

  corral_source_split_5061:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p36, $mul.ref(4, 24)), $mul.ref(8, 1));
    goto corral_source_split_5062;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    $p179 := $load.ref($M.0, $p178);
    goto corral_source_split_5063;

  corral_source_split_5063:
    assume {:verifier.code 0} true;
    $i180 := $p2i.ref.i64($p179);
    goto corral_source_split_5064;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    $i181 := $eq.i64($i180, 0);
    goto corral_source_split_5065;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    assume {:branchcond $i181} true;
    goto $bb107, $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    assume !($i181 == 1);
    goto $bb106;

  $bb107:
    assume $i181 == 1;
    goto corral_source_split_5067;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    $i182 := 4;
    goto $bb109;

  $bb100:
    assume {:verifier.code 0} true;
    assume $i175 == 1;
    goto $bb23;

  $bb94:
    assume $i163 == 1;
    goto corral_source_split_5041;

  corral_source_split_5041:
    assume {:verifier.code 0} true;
    goto corral_source_split_5042;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p36, $mul.ref(3, 24)), $mul.ref(8, 1));
    goto corral_source_split_5043;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    $p166 := $load.ref($M.0, $p165);
    goto corral_source_split_5044;

  corral_source_split_5044:
    assume {:verifier.code 0} true;
    $i167 := $p2i.ref.i64($p166);
    goto corral_source_split_5045;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    $i168 := $eq.i64($i167, 0);
    goto corral_source_split_5046;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    assume !($i168 == 1);
    goto $bb96;

  $bb97:
    assume $i168 == 1;
    goto corral_source_split_5048;

  corral_source_split_5048:
    assume {:verifier.code 0} true;
    $i169 := 3;
    goto $bb99;

  $bb90:
    assume {:verifier.code 0} true;
    assume $i162 == 1;
    goto $bb23;

  $bb84:
    assume $i150 == 1;
    goto corral_source_split_5022;

  corral_source_split_5022:
    assume {:verifier.code 0} true;
    goto corral_source_split_5023;

  corral_source_split_5023:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p36, $mul.ref(2, 24)), $mul.ref(8, 1));
    goto corral_source_split_5024;

  corral_source_split_5024:
    assume {:verifier.code 0} true;
    $p153 := $load.ref($M.0, $p152);
    goto corral_source_split_5025;

  corral_source_split_5025:
    assume {:verifier.code 0} true;
    $i154 := $p2i.ref.i64($p153);
    goto corral_source_split_5026;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    $i155 := $eq.i64($i154, 0);
    goto corral_source_split_5027;

  corral_source_split_5027:
    assume {:verifier.code 0} true;
    assume {:branchcond $i155} true;
    goto $bb87, $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    assume !($i155 == 1);
    goto $bb86;

  $bb87:
    assume $i155 == 1;
    goto corral_source_split_5029;

  corral_source_split_5029:
    assume {:verifier.code 0} true;
    $i156 := 2;
    goto $bb89;

  $bb80:
    assume {:verifier.code 0} true;
    assume $i149 == 1;
    goto $bb23;

  $bb74:
    assume $i137 == 1;
    goto corral_source_split_5003;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    goto corral_source_split_5004;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p36, $mul.ref(1, 24)), $mul.ref(8, 1));
    goto corral_source_split_5005;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    $p140 := $load.ref($M.0, $p139);
    goto corral_source_split_5006;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    $i141 := $p2i.ref.i64($p140);
    goto corral_source_split_5007;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    $i142 := $eq.i64($i141, 0);
    goto corral_source_split_5008;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    assume {:branchcond $i142} true;
    goto $bb77, $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    assume !($i142 == 1);
    goto $bb76;

  $bb77:
    assume $i142 == 1;
    goto corral_source_split_5010;

  corral_source_split_5010:
    assume {:verifier.code 0} true;
    $i143 := 1;
    goto $bb79;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i49 == 1;
    goto $bb23;

  $bb16:
    assume 1 == 1;
    goto corral_source_split_4861;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p36, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_4862;

  corral_source_split_4862:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_4863;

  corral_source_split_4863:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p41);
    goto corral_source_split_4864;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    $i43 := $eq.i64($i42, 0);
    goto corral_source_split_4865;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i43 == 1);
    goto $bb18;

  $bb19:
    assume $i43 == 1;
    goto corral_source_split_4867;

  corral_source_split_4867:
    assume {:verifier.code 0} true;
    $i44 := 0;
    goto $bb21;

  $bb11:
    assume $i33 == 1;
    goto corral_source_split_4852;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p3, $mul.ref(0, 2384)), $mul.ref(864, 1));
    goto corral_source_split_4853;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    $p36, $i37 := $p34, 2048;
    goto $bb13;

  $bb8:
    assume $i22 == 1;
    goto corral_source_split_4839;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_4820;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32(1, 0);
    goto corral_source_split_4821;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    goto corral_source_split_4822;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_4823;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 823} $i14 := ldv__builtin_expect($i13, 0);
    call {:si_unique_call 824} {:cexpr "tmp___0"} boogie_si_record_i64($i14);
    goto corral_source_split_4824;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_4825;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32(1, 0);
    goto corral_source_split_4830;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i32($i16);
    goto corral_source_split_4831;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i17);
    goto corral_source_split_4832;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 826} vslice_dummy_var_53 := ldv__builtin_expect($i18, 0);
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i15 == 1;
    goto corral_source_split_4827;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 825} warn_slowpath_null(.str.29, 843);
    goto corral_source_split_4828;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb71_dummy:
    assume false;
    return;

  $bb32_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4893;
}



const alloc_mem: ref;

axiom alloc_mem == $sub.ref(0, 385471);

procedure alloc_mem($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation alloc_mem($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $i12: i1;
  var $i13: i32;
  var $i14: i64;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p21: ref;
  var $i22: i32;
  var $i23: i64;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var $i33: i64;
  var $p36: ref;
  var $i37: i64;
  var $p40: ref;
  var $i41: i32;
  var $p42: ref;
  var $p45: ref;
  var $i46: i32;
  var $i47: i64;
  var $p48: ref;
  var $i49: i64;
  var $i50: i1;
  var $p53: ref;
  var $i54: i32;
  var $i55: i1;
  var $p58: ref;
  var $i59: i32;
  var $i60: i64;
  var $p61: ref;
  var $i62: i64;
  var $i63: i1;
  var $p66: ref;
  var $i67: i32;
  var $i68: i1;
  var $p71: ref;
  var $i72: i32;
  var $i73: i64;
  var $p74: ref;
  var $i75: i64;
  var $i76: i1;
  var $p79: ref;
  var $i80: i32;
  var $i81: i1;
  var $p84: ref;
  var $i85: i32;
  var $i86: i64;
  var $p87: ref;
  var $i88: i64;
  var $i89: i1;
  var $p92: ref;
  var $i93: i32;
  var $i94: i1;
  var $p97: ref;
  var $i98: i32;
  var $i99: i64;
  var $p100: ref;
  var $i101: i64;
  var $i102: i1;
  var $p105: ref;
  var $i106: i32;
  var $i107: i1;
  var $p110: ref;
  var $i111: i32;
  var $i112: i64;
  var $p113: ref;
  var $i114: i64;
  var $i115: i1;
  var $p118: ref;
  var $i119: i32;
  var $i120: i1;
  var $p123: ref;
  var $i124: i32;
  var $i125: i64;
  var $p126: ref;
  var $i127: i64;
  var $i128: i1;
  var $p131: ref;
  var $i132: i32;
  var $i133: i1;
  var $p136: ref;
  var $i137: i32;
  var $i138: i64;
  var $p139: ref;
  var $i140: i64;
  var $i141: i1;
  var $p144: ref;
  var $i145: i32;
  var $i146: i1;
  var $p149: ref;
  var $i150: i32;
  var $i151: i64;
  var $p152: ref;
  var $i153: i64;
  var $i154: i1;
  var $p157: ref;
  var $i158: i32;
  var $i159: i1;
  var $p162: ref;
  var $i163: i32;
  var $i164: i64;
  var $p165: ref;
  var $i166: i64;
  var $i167: i1;
  var $p170: ref;
  var $i171: i32;
  var $i172: i1;
  var $p175: ref;
  var $i176: i32;
  var $i177: i64;
  var $p178: ref;
  var $i179: i64;
  var $i180: i1;
  var $p183: ref;
  var $i184: i32;
  var $i185: i1;
  var $p188: ref;
  var $i189: i32;
  var $i190: i64;
  var $p191: ref;
  var $i192: i64;
  var $i193: i1;
  var $p196: ref;
  var $i197: i32;
  var $i198: i1;
  var $p201: ref;
  var $i202: i32;
  var $i203: i64;
  var $p204: ref;
  var $i205: i64;
  var $i206: i1;
  var $p209: ref;
  var $i210: i32;
  var $i211: i1;
  var $p214: ref;
  var $i215: i32;
  var $i216: i64;
  var $p217: ref;
  var $i218: i64;
  var $i219: i1;
  var $p222: ref;
  var $i223: i32;
  var $i224: i1;
  var $p227: ref;
  var $i228: i32;
  var $i229: i64;
  var $p230: ref;
  var $i231: i64;
  var $i232: i1;
  var $p235: ref;
  var $i236: i32;
  var $i237: i1;
  var $p240: ref;
  var $i241: i32;
  var $i242: i64;
  var $p243: ref;
  var $i244: i64;
  var $i245: i1;
  var $p248: ref;
  var $i249: i32;
  var $i250: i1;
  var $p253: ref;
  var $i254: i32;
  var $i255: i64;
  var $p256: ref;
  var $i257: i64;
  var $i258: i1;
  var $p261: ref;
  var $i262: i32;
  var $i263: i1;
  var $p266: ref;
  var $i267: i32;
  var $i268: i64;
  var $p269: ref;
  var $i270: i64;
  var $i271: i1;
  var $p274: ref;
  var $i275: i32;
  var $i276: i1;
  var $p279: ref;
  var $i280: i32;
  var $i281: i64;
  var $p282: ref;
  var $i283: i64;
  var $i284: i1;
  var $p287: ref;
  var $i288: i32;
  var $i289: i1;
  var $p292: ref;
  var $i293: i32;
  var $i294: i64;
  var $p295: ref;
  var $i296: i64;
  var $i297: i1;
  var $p300: ref;
  var $i301: i32;
  var $i302: i1;
  var $p305: ref;
  var $i306: i32;
  var $i307: i64;
  var $p308: ref;
  var $i309: i64;
  var $i310: i1;
  var $p313: ref;
  var $i314: i32;
  var $i315: i1;
  var $p318: ref;
  var $i319: i32;
  var $i320: i64;
  var $p321: ref;
  var $i322: i64;
  var $i323: i1;
  var $p326: ref;
  var $i327: i32;
  var $i328: i1;
  var $p331: ref;
  var $i332: i32;
  var $i333: i64;
  var $p334: ref;
  var $i335: i64;
  var $i336: i1;
  var $p339: ref;
  var $i340: i32;
  var $i341: i1;
  var $p344: ref;
  var $i345: i32;
  var $i346: i64;
  var $p347: ref;
  var $i348: i64;
  var $i349: i1;
  var $p352: ref;
  var $i353: i32;
  var $i354: i1;
  var $p357: ref;
  var $i358: i32;
  var $i359: i64;
  var $p360: ref;
  var $i361: i64;
  var $i362: i1;
  var $p365: ref;
  var $i366: i32;
  var $i367: i1;
  var $p370: ref;
  var $i371: i32;
  var $i372: i64;
  var $p373: ref;
  var $i374: i64;
  var $i375: i1;
  var $p378: ref;
  var $i379: i32;
  var $i380: i1;
  var $p383: ref;
  var $i384: i32;
  var $i385: i64;
  var $p386: ref;
  var $i387: i64;
  var $i388: i1;
  var $p391: ref;
  var $i392: i32;
  var $i393: i1;
  var $p396: ref;
  var $i397: i32;
  var $i398: i64;
  var $p399: ref;
  var $i400: i64;
  var $i401: i1;
  var $p404: ref;
  var $i405: i32;
  var $i406: i1;
  var $p409: ref;
  var $i410: i32;
  var $i411: i64;
  var $p412: ref;
  var $i413: i64;
  var $i414: i1;
  var $p417: ref;
  var $i418: i32;
  var $i419: i1;
  var $p422: ref;
  var $i423: i32;
  var $i424: i64;
  var $p425: ref;
  var $i426: i64;
  var $i427: i1;
  var $p430: ref;
  var $i431: i32;
  var $i432: i1;
  var $p435: ref;
  var $i436: i32;
  var $i437: i64;
  var $p438: ref;
  var $i439: i64;
  var $i440: i1;
  var $p443: ref;
  var $i444: i32;
  var $i445: i1;
  var $p448: ref;
  var $i449: i32;
  var $i450: i64;
  var $p451: ref;
  var $i452: i64;
  var $i453: i1;
  var $p456: ref;
  var $i457: i32;
  var $i458: i1;
  var $p461: ref;
  var $i462: i32;
  var $i463: i64;
  var $p464: ref;
  var $i465: i64;
  var $i466: i1;
  var $p469: ref;
  var $i470: i32;
  var $i471: i1;
  var $p474: ref;
  var $i475: i32;
  var $i476: i64;
  var $p477: ref;
  var $i478: i64;
  var $i479: i1;
  var $p482: ref;
  var $i483: i32;
  var $i484: i1;
  var $p487: ref;
  var $i488: i32;
  var $i489: i64;
  var $p490: ref;
  var $i491: i64;
  var $i492: i1;
  var $p495: ref;
  var $i496: i32;
  var $i497: i1;
  var $p500: ref;
  var $i501: i32;
  var $i502: i64;
  var $p503: ref;
  var $i504: i64;
  var $i505: i1;
  var $p508: ref;
  var $i509: i32;
  var $i510: i1;
  var $p513: ref;
  var $i514: i32;
  var $i515: i64;
  var $p516: ref;
  var $i517: i64;
  var $i518: i1;
  var $p521: ref;
  var $i522: i32;
  var $i523: i1;
  var $p526: ref;
  var $i527: i32;
  var $i528: i64;
  var $p529: ref;
  var $i530: i64;
  var $i531: i1;
  var $p534: ref;
  var $i535: i32;
  var $i536: i1;
  var $p539: ref;
  var $i540: i32;
  var $i541: i64;
  var $p542: ref;
  var $i543: i64;
  var $i544: i1;
  var $p547: ref;
  var $i548: i32;
  var $i549: i1;
  var $p552: ref;
  var $i553: i32;
  var $i554: i64;
  var $p555: ref;
  var $i556: i64;
  var $i557: i1;
  var $p560: ref;
  var $i561: i32;
  var $i562: i1;
  var $p565: ref;
  var $i566: i32;
  var $i567: i64;
  var $p568: ref;
  var $i569: i64;
  var $i570: i1;
  var $p573: ref;
  var $i574: i32;
  var $i575: i1;
  var $p578: ref;
  var $i579: i32;
  var $i580: i64;
  var $p581: ref;
  var $i582: i64;
  var $i583: i1;
  var $p586: ref;
  var $i587: i32;
  var $i588: i1;
  var $p591: ref;
  var $i592: i32;
  var $i593: i64;
  var $p594: ref;
  var $i595: i64;
  var $i596: i1;
  var $p599: ref;
  var $i600: i32;
  var $i601: i1;
  var $p604: ref;
  var $i605: i32;
  var $i606: i64;
  var $p607: ref;
  var $i608: i64;
  var $i609: i1;
  var $p612: ref;
  var $i613: i32;
  var $i614: i1;
  var $p617: ref;
  var $i618: i32;
  var $i619: i64;
  var $p620: ref;
  var $i621: i64;
  var $i622: i1;
  var $p625: ref;
  var $i626: i32;
  var $i627: i1;
  var $p630: ref;
  var $i631: i32;
  var $i632: i64;
  var $p633: ref;
  var $i634: i64;
  var $i635: i1;
  var $p638: ref;
  var $i639: i32;
  var $i640: i1;
  var $p643: ref;
  var $i644: i32;
  var $i645: i64;
  var $p646: ref;
  var $i647: i64;
  var $i648: i1;
  var $p651: ref;
  var $i652: i32;
  var $i653: i1;
  var $p656: ref;
  var $i657: i32;
  var $i658: i64;
  var $p659: ref;
  var $i660: i64;
  var $i661: i1;
  var $p664: ref;
  var $i665: i32;
  var $i666: i1;
  var $p669: ref;
  var $i670: i32;
  var $i671: i64;
  var $p672: ref;
  var $i673: i64;
  var $i674: i1;
  var $p677: ref;
  var $i678: i32;
  var $i679: i1;
  var $p682: ref;
  var $i683: i32;
  var $i684: i64;
  var $p685: ref;
  var $i686: i64;
  var $i687: i1;
  var $p690: ref;
  var $i691: i32;
  var $i692: i1;
  var $p695: ref;
  var $i696: i32;
  var $i697: i64;
  var $p698: ref;
  var $i699: i64;
  var $i700: i1;
  var $p703: ref;
  var $i704: i32;
  var $i705: i1;
  var $p708: ref;
  var $i709: i32;
  var $i710: i64;
  var $p711: ref;
  var $i712: i64;
  var $i713: i1;
  var $p716: ref;
  var $i717: i32;
  var $i718: i1;
  var $p721: ref;
  var $i722: i32;
  var $i723: i64;
  var $p724: ref;
  var $i725: i64;
  var $i726: i1;
  var $p729: ref;
  var $i730: i32;
  var $i731: i1;
  var $p734: ref;
  var $i735: i32;
  var $i736: i64;
  var $p737: ref;
  var $i738: i64;
  var $i739: i1;
  var $p742: ref;
  var $i743: i32;
  var $i744: i1;
  var $p747: ref;
  var $i748: i32;
  var $i749: i64;
  var $p750: ref;
  var $i751: i64;
  var $i752: i1;
  var $p755: ref;
  var $i756: i32;
  var $i757: i1;
  var vslice_dummy_var_55: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5590;

  corral_source_split_5590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 838} $p2 := hcd_to_priv($p0);
    goto corral_source_split_5591;

  corral_source_split_5591:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_5592;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_5593;

  corral_source_split_5593:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_5594;

  corral_source_split_5594:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    call {:si_unique_call 839} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i6);
    goto corral_source_split_5595;

  corral_source_split_5595:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_5596;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_5597;

  corral_source_split_5597:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_5598;

  corral_source_split_5598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 840} $i10 := ldv__builtin_expect($i9, 0);
    call {:si_unique_call 841} {:cexpr "tmp___0"} boogie_si_record_i64($i10);
    goto corral_source_split_5599;

  corral_source_split_5599:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_5600;

  corral_source_split_5600:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i6, 0);
    goto corral_source_split_5605;

  corral_source_split_5605:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i12);
    goto corral_source_split_5606;

  corral_source_split_5606:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_5607;

  corral_source_split_5607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 843} vslice_dummy_var_55 := ldv__builtin_expect($i14, 0);
    goto corral_source_split_5608;

  corral_source_split_5608:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_5609;

  corral_source_split_5609:
    assume {:verifier.code 0} true;
    $i17 := $load.i64($M.0, $p16);
    goto corral_source_split_5610;

  corral_source_split_5610:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i17, 0);
    goto corral_source_split_5611;

  corral_source_split_5611:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_5615;

  corral_source_split_5615:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_5616;

  corral_source_split_5616:
    assume {:verifier.code 0} true;
    $i23 := $zext.i32.i64($i22);
    goto corral_source_split_5617;

  corral_source_split_5617:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_5618;

  corral_source_split_5618:
    assume {:verifier.code 0} true;
    $i25 := $load.i64($M.0, $p24);
    goto corral_source_split_5619;

  corral_source_split_5619:
    assume {:verifier.code 0} true;
    $i26 := $uge.i64($i23, $i25);
    goto corral_source_split_5620;

  corral_source_split_5620:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(1, 12)), $mul.ref(4, 1));
    goto corral_source_split_5637;

  corral_source_split_5637:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_5638;

  corral_source_split_5638:
    assume {:verifier.code 0} true;
    $i47 := $zext.i32.i64($i46);
    goto corral_source_split_5639;

  corral_source_split_5639:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_5640;

  corral_source_split_5640:
    assume {:verifier.code 0} true;
    $i49 := $load.i64($M.0, $p48);
    goto corral_source_split_5641;

  corral_source_split_5641:
    assume {:verifier.code 0} true;
    $i50 := $uge.i64($i47, $i49);
    goto corral_source_split_5642;

  corral_source_split_5642:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i50 == 1);
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(2, 12)), $mul.ref(4, 1));
    goto corral_source_split_5649;

  corral_source_split_5649:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, $p58);
    goto corral_source_split_5650;

  corral_source_split_5650:
    assume {:verifier.code 0} true;
    $i60 := $zext.i32.i64($i59);
    goto corral_source_split_5651;

  corral_source_split_5651:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_5652;

  corral_source_split_5652:
    assume {:verifier.code 0} true;
    $i62 := $load.i64($M.0, $p61);
    goto corral_source_split_5653;

  corral_source_split_5653:
    assume {:verifier.code 0} true;
    $i63 := $uge.i64($i60, $i62);
    goto corral_source_split_5654;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i63 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(3, 12)), $mul.ref(4, 1));
    goto corral_source_split_5661;

  corral_source_split_5661:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.0, $p71);
    goto corral_source_split_5662;

  corral_source_split_5662:
    assume {:verifier.code 0} true;
    $i73 := $zext.i32.i64($i72);
    goto corral_source_split_5663;

  corral_source_split_5663:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_5664;

  corral_source_split_5664:
    assume {:verifier.code 0} true;
    $i75 := $load.i64($M.0, $p74);
    goto corral_source_split_5665;

  corral_source_split_5665:
    assume {:verifier.code 0} true;
    $i76 := $uge.i64($i73, $i75);
    goto corral_source_split_5666;

  corral_source_split_5666:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i76 == 1);
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(4, 12)), $mul.ref(4, 1));
    goto corral_source_split_5673;

  corral_source_split_5673:
    assume {:verifier.code 0} true;
    $i85 := $load.i32($M.0, $p84);
    goto corral_source_split_5674;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    $i86 := $zext.i32.i64($i85);
    goto corral_source_split_5675;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_5676;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    $i88 := $load.i64($M.0, $p87);
    goto corral_source_split_5677;

  corral_source_split_5677:
    assume {:verifier.code 0} true;
    $i89 := $uge.i64($i86, $i88);
    goto corral_source_split_5678;

  corral_source_split_5678:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    assume !($i89 == 1);
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(5, 12)), $mul.ref(4, 1));
    goto corral_source_split_5685;

  corral_source_split_5685:
    assume {:verifier.code 0} true;
    $i98 := $load.i32($M.0, $p97);
    goto corral_source_split_5686;

  corral_source_split_5686:
    assume {:verifier.code 0} true;
    $i99 := $zext.i32.i64($i98);
    goto corral_source_split_5687;

  corral_source_split_5687:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_5688;

  corral_source_split_5688:
    assume {:verifier.code 0} true;
    $i101 := $load.i64($M.0, $p100);
    goto corral_source_split_5689;

  corral_source_split_5689:
    assume {:verifier.code 0} true;
    $i102 := $uge.i64($i99, $i101);
    goto corral_source_split_5690;

  corral_source_split_5690:
    assume {:verifier.code 0} true;
    assume {:branchcond $i102} true;
    goto $bb47, $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    assume !($i102 == 1);
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(6, 12)), $mul.ref(4, 1));
    goto corral_source_split_5697;

  corral_source_split_5697:
    assume {:verifier.code 0} true;
    $i111 := $load.i32($M.0, $p110);
    goto corral_source_split_5698;

  corral_source_split_5698:
    assume {:verifier.code 0} true;
    $i112 := $zext.i32.i64($i111);
    goto corral_source_split_5699;

  corral_source_split_5699:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_5700;

  corral_source_split_5700:
    assume {:verifier.code 0} true;
    $i114 := $load.i64($M.0, $p113);
    goto corral_source_split_5701;

  corral_source_split_5701:
    assume {:verifier.code 0} true;
    $i115 := $uge.i64($i112, $i114);
    goto corral_source_split_5702;

  corral_source_split_5702:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    assume !($i115 == 1);
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(7, 12)), $mul.ref(4, 1));
    goto corral_source_split_5709;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    $i124 := $load.i32($M.0, $p123);
    goto corral_source_split_5710;

  corral_source_split_5710:
    assume {:verifier.code 0} true;
    $i125 := $zext.i32.i64($i124);
    goto corral_source_split_5711;

  corral_source_split_5711:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_5712;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    $i127 := $load.i64($M.0, $p126);
    goto corral_source_split_5713;

  corral_source_split_5713:
    assume {:verifier.code 0} true;
    $i128 := $uge.i64($i125, $i127);
    goto corral_source_split_5714;

  corral_source_split_5714:
    assume {:verifier.code 0} true;
    assume {:branchcond $i128} true;
    goto $bb61, $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    assume !($i128 == 1);
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(8, 12)), $mul.ref(4, 1));
    goto corral_source_split_5721;

  corral_source_split_5721:
    assume {:verifier.code 0} true;
    $i137 := $load.i32($M.0, $p136);
    goto corral_source_split_5722;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    $i138 := $zext.i32.i64($i137);
    goto corral_source_split_5723;

  corral_source_split_5723:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_5724;

  corral_source_split_5724:
    assume {:verifier.code 0} true;
    $i140 := $load.i64($M.0, $p139);
    goto corral_source_split_5725;

  corral_source_split_5725:
    assume {:verifier.code 0} true;
    $i141 := $uge.i64($i138, $i140);
    goto corral_source_split_5726;

  corral_source_split_5726:
    assume {:verifier.code 0} true;
    assume {:branchcond $i141} true;
    goto $bb68, $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    assume !($i141 == 1);
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(9, 12)), $mul.ref(4, 1));
    goto corral_source_split_5733;

  corral_source_split_5733:
    assume {:verifier.code 0} true;
    $i150 := $load.i32($M.0, $p149);
    goto corral_source_split_5734;

  corral_source_split_5734:
    assume {:verifier.code 0} true;
    $i151 := $zext.i32.i64($i150);
    goto corral_source_split_5735;

  corral_source_split_5735:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_5736;

  corral_source_split_5736:
    assume {:verifier.code 0} true;
    $i153 := $load.i64($M.0, $p152);
    goto corral_source_split_5737;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    $i154 := $uge.i64($i151, $i153);
    goto corral_source_split_5738;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    assume {:branchcond $i154} true;
    goto $bb75, $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    assume !($i154 == 1);
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(10, 12)), $mul.ref(4, 1));
    goto corral_source_split_5745;

  corral_source_split_5745:
    assume {:verifier.code 0} true;
    $i163 := $load.i32($M.0, $p162);
    goto corral_source_split_5746;

  corral_source_split_5746:
    assume {:verifier.code 0} true;
    $i164 := $zext.i32.i64($i163);
    goto corral_source_split_5747;

  corral_source_split_5747:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_5748;

  corral_source_split_5748:
    assume {:verifier.code 0} true;
    $i166 := $load.i64($M.0, $p165);
    goto corral_source_split_5749;

  corral_source_split_5749:
    assume {:verifier.code 0} true;
    $i167 := $uge.i64($i164, $i166);
    goto corral_source_split_5750;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    assume {:branchcond $i167} true;
    goto $bb82, $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    assume !($i167 == 1);
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(11, 12)), $mul.ref(4, 1));
    goto corral_source_split_5757;

  corral_source_split_5757:
    assume {:verifier.code 0} true;
    $i176 := $load.i32($M.0, $p175);
    goto corral_source_split_5758;

  corral_source_split_5758:
    assume {:verifier.code 0} true;
    $i177 := $zext.i32.i64($i176);
    goto corral_source_split_5759;

  corral_source_split_5759:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_5760;

  corral_source_split_5760:
    assume {:verifier.code 0} true;
    $i179 := $load.i64($M.0, $p178);
    goto corral_source_split_5761;

  corral_source_split_5761:
    assume {:verifier.code 0} true;
    $i180 := $uge.i64($i177, $i179);
    goto corral_source_split_5762;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    assume {:branchcond $i180} true;
    goto $bb89, $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    assume !($i180 == 1);
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(12, 12)), $mul.ref(4, 1));
    goto corral_source_split_5769;

  corral_source_split_5769:
    assume {:verifier.code 0} true;
    $i189 := $load.i32($M.0, $p188);
    goto corral_source_split_5770;

  corral_source_split_5770:
    assume {:verifier.code 0} true;
    $i190 := $zext.i32.i64($i189);
    goto corral_source_split_5771;

  corral_source_split_5771:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_5772;

  corral_source_split_5772:
    assume {:verifier.code 0} true;
    $i192 := $load.i64($M.0, $p191);
    goto corral_source_split_5773;

  corral_source_split_5773:
    assume {:verifier.code 0} true;
    $i193 := $uge.i64($i190, $i192);
    goto corral_source_split_5774;

  corral_source_split_5774:
    assume {:verifier.code 0} true;
    assume {:branchcond $i193} true;
    goto $bb96, $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    assume !($i193 == 1);
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(13, 12)), $mul.ref(4, 1));
    goto corral_source_split_5781;

  corral_source_split_5781:
    assume {:verifier.code 0} true;
    $i202 := $load.i32($M.0, $p201);
    goto corral_source_split_5782;

  corral_source_split_5782:
    assume {:verifier.code 0} true;
    $i203 := $zext.i32.i64($i202);
    goto corral_source_split_5783;

  corral_source_split_5783:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_5784;

  corral_source_split_5784:
    assume {:verifier.code 0} true;
    $i205 := $load.i64($M.0, $p204);
    goto corral_source_split_5785;

  corral_source_split_5785:
    assume {:verifier.code 0} true;
    $i206 := $uge.i64($i203, $i205);
    goto corral_source_split_5786;

  corral_source_split_5786:
    assume {:verifier.code 0} true;
    assume {:branchcond $i206} true;
    goto $bb103, $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    assume !($i206 == 1);
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(14, 12)), $mul.ref(4, 1));
    goto corral_source_split_5793;

  corral_source_split_5793:
    assume {:verifier.code 0} true;
    $i215 := $load.i32($M.0, $p214);
    goto corral_source_split_5794;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    $i216 := $zext.i32.i64($i215);
    goto corral_source_split_5795;

  corral_source_split_5795:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_5796;

  corral_source_split_5796:
    assume {:verifier.code 0} true;
    $i218 := $load.i64($M.0, $p217);
    goto corral_source_split_5797;

  corral_source_split_5797:
    assume {:verifier.code 0} true;
    $i219 := $uge.i64($i216, $i218);
    goto corral_source_split_5798;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    assume {:branchcond $i219} true;
    goto $bb110, $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    assume !($i219 == 1);
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    $p227 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(15, 12)), $mul.ref(4, 1));
    goto corral_source_split_5805;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    $i228 := $load.i32($M.0, $p227);
    goto corral_source_split_5806;

  corral_source_split_5806:
    assume {:verifier.code 0} true;
    $i229 := $zext.i32.i64($i228);
    goto corral_source_split_5807;

  corral_source_split_5807:
    assume {:verifier.code 0} true;
    $p230 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_5808;

  corral_source_split_5808:
    assume {:verifier.code 0} true;
    $i231 := $load.i64($M.0, $p230);
    goto corral_source_split_5809;

  corral_source_split_5809:
    assume {:verifier.code 0} true;
    $i232 := $uge.i64($i229, $i231);
    goto corral_source_split_5810;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb117, $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    assume !($i232 == 1);
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(16, 12)), $mul.ref(4, 1));
    goto corral_source_split_5817;

  corral_source_split_5817:
    assume {:verifier.code 0} true;
    $i241 := $load.i32($M.0, $p240);
    goto corral_source_split_5818;

  corral_source_split_5818:
    assume {:verifier.code 0} true;
    $i242 := $zext.i32.i64($i241);
    goto corral_source_split_5819;

  corral_source_split_5819:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_5820;

  corral_source_split_5820:
    assume {:verifier.code 0} true;
    $i244 := $load.i64($M.0, $p243);
    goto corral_source_split_5821;

  corral_source_split_5821:
    assume {:verifier.code 0} true;
    $i245 := $uge.i64($i242, $i244);
    goto corral_source_split_5822;

  corral_source_split_5822:
    assume {:verifier.code 0} true;
    assume {:branchcond $i245} true;
    goto $bb124, $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    assume !($i245 == 1);
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    $p253 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(17, 12)), $mul.ref(4, 1));
    goto corral_source_split_5829;

  corral_source_split_5829:
    assume {:verifier.code 0} true;
    $i254 := $load.i32($M.0, $p253);
    goto corral_source_split_5830;

  corral_source_split_5830:
    assume {:verifier.code 0} true;
    $i255 := $zext.i32.i64($i254);
    goto corral_source_split_5831;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    $p256 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_5832;

  corral_source_split_5832:
    assume {:verifier.code 0} true;
    $i257 := $load.i64($M.0, $p256);
    goto corral_source_split_5833;

  corral_source_split_5833:
    assume {:verifier.code 0} true;
    $i258 := $uge.i64($i255, $i257);
    goto corral_source_split_5834;

  corral_source_split_5834:
    assume {:verifier.code 0} true;
    assume {:branchcond $i258} true;
    goto $bb131, $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    assume !($i258 == 1);
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    $p266 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(18, 12)), $mul.ref(4, 1));
    goto corral_source_split_5841;

  corral_source_split_5841:
    assume {:verifier.code 0} true;
    $i267 := $load.i32($M.0, $p266);
    goto corral_source_split_5842;

  corral_source_split_5842:
    assume {:verifier.code 0} true;
    $i268 := $zext.i32.i64($i267);
    goto corral_source_split_5843;

  corral_source_split_5843:
    assume {:verifier.code 0} true;
    $p269 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_5844;

  corral_source_split_5844:
    assume {:verifier.code 0} true;
    $i270 := $load.i64($M.0, $p269);
    goto corral_source_split_5845;

  corral_source_split_5845:
    assume {:verifier.code 0} true;
    $i271 := $uge.i64($i268, $i270);
    goto corral_source_split_5846;

  corral_source_split_5846:
    assume {:verifier.code 0} true;
    assume {:branchcond $i271} true;
    goto $bb138, $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    assume !($i271 == 1);
    goto $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    $p279 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(19, 12)), $mul.ref(4, 1));
    goto corral_source_split_5853;

  corral_source_split_5853:
    assume {:verifier.code 0} true;
    $i280 := $load.i32($M.0, $p279);
    goto corral_source_split_5854;

  corral_source_split_5854:
    assume {:verifier.code 0} true;
    $i281 := $zext.i32.i64($i280);
    goto corral_source_split_5855;

  corral_source_split_5855:
    assume {:verifier.code 0} true;
    $p282 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_5856;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    $i283 := $load.i64($M.0, $p282);
    goto corral_source_split_5857;

  corral_source_split_5857:
    assume {:verifier.code 0} true;
    $i284 := $uge.i64($i281, $i283);
    goto corral_source_split_5858;

  corral_source_split_5858:
    assume {:verifier.code 0} true;
    assume {:branchcond $i284} true;
    goto $bb145, $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    assume !($i284 == 1);
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    $p292 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(20, 12)), $mul.ref(4, 1));
    goto corral_source_split_5865;

  corral_source_split_5865:
    assume {:verifier.code 0} true;
    $i293 := $load.i32($M.0, $p292);
    goto corral_source_split_5866;

  corral_source_split_5866:
    assume {:verifier.code 0} true;
    $i294 := $zext.i32.i64($i293);
    goto corral_source_split_5867;

  corral_source_split_5867:
    assume {:verifier.code 0} true;
    $p295 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_5868;

  corral_source_split_5868:
    assume {:verifier.code 0} true;
    $i296 := $load.i64($M.0, $p295);
    goto corral_source_split_5869;

  corral_source_split_5869:
    assume {:verifier.code 0} true;
    $i297 := $uge.i64($i294, $i296);
    goto corral_source_split_5870;

  corral_source_split_5870:
    assume {:verifier.code 0} true;
    assume {:branchcond $i297} true;
    goto $bb152, $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    assume !($i297 == 1);
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    $p305 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(21, 12)), $mul.ref(4, 1));
    goto corral_source_split_5877;

  corral_source_split_5877:
    assume {:verifier.code 0} true;
    $i306 := $load.i32($M.0, $p305);
    goto corral_source_split_5878;

  corral_source_split_5878:
    assume {:verifier.code 0} true;
    $i307 := $zext.i32.i64($i306);
    goto corral_source_split_5879;

  corral_source_split_5879:
    assume {:verifier.code 0} true;
    $p308 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_5880;

  corral_source_split_5880:
    assume {:verifier.code 0} true;
    $i309 := $load.i64($M.0, $p308);
    goto corral_source_split_5881;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    $i310 := $uge.i64($i307, $i309);
    goto corral_source_split_5882;

  corral_source_split_5882:
    assume {:verifier.code 0} true;
    assume {:branchcond $i310} true;
    goto $bb159, $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    assume !($i310 == 1);
    goto $bb161;

  $bb161:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    $p318 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(22, 12)), $mul.ref(4, 1));
    goto corral_source_split_5889;

  corral_source_split_5889:
    assume {:verifier.code 0} true;
    $i319 := $load.i32($M.0, $p318);
    goto corral_source_split_5890;

  corral_source_split_5890:
    assume {:verifier.code 0} true;
    $i320 := $zext.i32.i64($i319);
    goto corral_source_split_5891;

  corral_source_split_5891:
    assume {:verifier.code 0} true;
    $p321 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_5892;

  corral_source_split_5892:
    assume {:verifier.code 0} true;
    $i322 := $load.i64($M.0, $p321);
    goto corral_source_split_5893;

  corral_source_split_5893:
    assume {:verifier.code 0} true;
    $i323 := $uge.i64($i320, $i322);
    goto corral_source_split_5894;

  corral_source_split_5894:
    assume {:verifier.code 0} true;
    assume {:branchcond $i323} true;
    goto $bb166, $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    assume !($i323 == 1);
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb172:
    assume {:verifier.code 0} true;
    $p331 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(23, 12)), $mul.ref(4, 1));
    goto corral_source_split_5901;

  corral_source_split_5901:
    assume {:verifier.code 0} true;
    $i332 := $load.i32($M.0, $p331);
    goto corral_source_split_5902;

  corral_source_split_5902:
    assume {:verifier.code 0} true;
    $i333 := $zext.i32.i64($i332);
    goto corral_source_split_5903;

  corral_source_split_5903:
    assume {:verifier.code 0} true;
    $p334 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_5904;

  corral_source_split_5904:
    assume {:verifier.code 0} true;
    $i335 := $load.i64($M.0, $p334);
    goto corral_source_split_5905;

  corral_source_split_5905:
    assume {:verifier.code 0} true;
    $i336 := $uge.i64($i333, $i335);
    goto corral_source_split_5906;

  corral_source_split_5906:
    assume {:verifier.code 0} true;
    assume {:branchcond $i336} true;
    goto $bb173, $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    assume !($i336 == 1);
    goto $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb179:
    assume {:verifier.code 0} true;
    $p344 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(24, 12)), $mul.ref(4, 1));
    goto corral_source_split_5913;

  corral_source_split_5913:
    assume {:verifier.code 0} true;
    $i345 := $load.i32($M.0, $p344);
    goto corral_source_split_5914;

  corral_source_split_5914:
    assume {:verifier.code 0} true;
    $i346 := $zext.i32.i64($i345);
    goto corral_source_split_5915;

  corral_source_split_5915:
    assume {:verifier.code 0} true;
    $p347 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_5916;

  corral_source_split_5916:
    assume {:verifier.code 0} true;
    $i348 := $load.i64($M.0, $p347);
    goto corral_source_split_5917;

  corral_source_split_5917:
    assume {:verifier.code 0} true;
    $i349 := $uge.i64($i346, $i348);
    goto corral_source_split_5918;

  corral_source_split_5918:
    assume {:verifier.code 0} true;
    assume {:branchcond $i349} true;
    goto $bb180, $bb181;

  $bb181:
    assume {:verifier.code 0} true;
    assume !($i349 == 1);
    goto $bb182;

  $bb182:
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    $p357 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(25, 12)), $mul.ref(4, 1));
    goto corral_source_split_5925;

  corral_source_split_5925:
    assume {:verifier.code 0} true;
    $i358 := $load.i32($M.0, $p357);
    goto corral_source_split_5926;

  corral_source_split_5926:
    assume {:verifier.code 0} true;
    $i359 := $zext.i32.i64($i358);
    goto corral_source_split_5927;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    $p360 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_5928;

  corral_source_split_5928:
    assume {:verifier.code 0} true;
    $i361 := $load.i64($M.0, $p360);
    goto corral_source_split_5929;

  corral_source_split_5929:
    assume {:verifier.code 0} true;
    $i362 := $uge.i64($i359, $i361);
    goto corral_source_split_5930;

  corral_source_split_5930:
    assume {:verifier.code 0} true;
    assume {:branchcond $i362} true;
    goto $bb187, $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    assume !($i362 == 1);
    goto $bb189;

  $bb189:
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb192:
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb193:
    assume {:verifier.code 0} true;
    $p370 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(26, 12)), $mul.ref(4, 1));
    goto corral_source_split_5937;

  corral_source_split_5937:
    assume {:verifier.code 0} true;
    $i371 := $load.i32($M.0, $p370);
    goto corral_source_split_5938;

  corral_source_split_5938:
    assume {:verifier.code 0} true;
    $i372 := $zext.i32.i64($i371);
    goto corral_source_split_5939;

  corral_source_split_5939:
    assume {:verifier.code 0} true;
    $p373 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_5940;

  corral_source_split_5940:
    assume {:verifier.code 0} true;
    $i374 := $load.i64($M.0, $p373);
    goto corral_source_split_5941;

  corral_source_split_5941:
    assume {:verifier.code 0} true;
    $i375 := $uge.i64($i372, $i374);
    goto corral_source_split_5942;

  corral_source_split_5942:
    assume {:verifier.code 0} true;
    assume {:branchcond $i375} true;
    goto $bb194, $bb195;

  $bb195:
    assume {:verifier.code 0} true;
    assume !($i375 == 1);
    goto $bb196;

  $bb196:
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb199:
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb200:
    assume {:verifier.code 0} true;
    $p383 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(27, 12)), $mul.ref(4, 1));
    goto corral_source_split_5949;

  corral_source_split_5949:
    assume {:verifier.code 0} true;
    $i384 := $load.i32($M.0, $p383);
    goto corral_source_split_5950;

  corral_source_split_5950:
    assume {:verifier.code 0} true;
    $i385 := $zext.i32.i64($i384);
    goto corral_source_split_5951;

  corral_source_split_5951:
    assume {:verifier.code 0} true;
    $p386 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_5952;

  corral_source_split_5952:
    assume {:verifier.code 0} true;
    $i387 := $load.i64($M.0, $p386);
    goto corral_source_split_5953;

  corral_source_split_5953:
    assume {:verifier.code 0} true;
    $i388 := $uge.i64($i385, $i387);
    goto corral_source_split_5954;

  corral_source_split_5954:
    assume {:verifier.code 0} true;
    assume {:branchcond $i388} true;
    goto $bb201, $bb202;

  $bb202:
    assume {:verifier.code 0} true;
    assume !($i388 == 1);
    goto $bb203;

  $bb203:
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb206:
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb207:
    assume {:verifier.code 0} true;
    $p396 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(28, 12)), $mul.ref(4, 1));
    goto corral_source_split_5961;

  corral_source_split_5961:
    assume {:verifier.code 0} true;
    $i397 := $load.i32($M.0, $p396);
    goto corral_source_split_5962;

  corral_source_split_5962:
    assume {:verifier.code 0} true;
    $i398 := $zext.i32.i64($i397);
    goto corral_source_split_5963;

  corral_source_split_5963:
    assume {:verifier.code 0} true;
    $p399 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_5964;

  corral_source_split_5964:
    assume {:verifier.code 0} true;
    $i400 := $load.i64($M.0, $p399);
    goto corral_source_split_5965;

  corral_source_split_5965:
    assume {:verifier.code 0} true;
    $i401 := $uge.i64($i398, $i400);
    goto corral_source_split_5966;

  corral_source_split_5966:
    assume {:verifier.code 0} true;
    assume {:branchcond $i401} true;
    goto $bb208, $bb209;

  $bb209:
    assume {:verifier.code 0} true;
    assume !($i401 == 1);
    goto $bb210;

  $bb210:
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb213:
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb214:
    assume {:verifier.code 0} true;
    $p409 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(29, 12)), $mul.ref(4, 1));
    goto corral_source_split_5973;

  corral_source_split_5973:
    assume {:verifier.code 0} true;
    $i410 := $load.i32($M.0, $p409);
    goto corral_source_split_5974;

  corral_source_split_5974:
    assume {:verifier.code 0} true;
    $i411 := $zext.i32.i64($i410);
    goto corral_source_split_5975;

  corral_source_split_5975:
    assume {:verifier.code 0} true;
    $p412 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_5976;

  corral_source_split_5976:
    assume {:verifier.code 0} true;
    $i413 := $load.i64($M.0, $p412);
    goto corral_source_split_5977;

  corral_source_split_5977:
    assume {:verifier.code 0} true;
    $i414 := $uge.i64($i411, $i413);
    goto corral_source_split_5978;

  corral_source_split_5978:
    assume {:verifier.code 0} true;
    assume {:branchcond $i414} true;
    goto $bb215, $bb216;

  $bb216:
    assume {:verifier.code 0} true;
    assume !($i414 == 1);
    goto $bb217;

  $bb217:
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb220:
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb221:
    assume {:verifier.code 0} true;
    $p422 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(30, 12)), $mul.ref(4, 1));
    goto corral_source_split_5985;

  corral_source_split_5985:
    assume {:verifier.code 0} true;
    $i423 := $load.i32($M.0, $p422);
    goto corral_source_split_5986;

  corral_source_split_5986:
    assume {:verifier.code 0} true;
    $i424 := $zext.i32.i64($i423);
    goto corral_source_split_5987;

  corral_source_split_5987:
    assume {:verifier.code 0} true;
    $p425 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_5988;

  corral_source_split_5988:
    assume {:verifier.code 0} true;
    $i426 := $load.i64($M.0, $p425);
    goto corral_source_split_5989;

  corral_source_split_5989:
    assume {:verifier.code 0} true;
    $i427 := $uge.i64($i424, $i426);
    goto corral_source_split_5990;

  corral_source_split_5990:
    assume {:verifier.code 0} true;
    assume {:branchcond $i427} true;
    goto $bb222, $bb223;

  $bb223:
    assume {:verifier.code 0} true;
    assume !($i427 == 1);
    goto $bb224;

  $bb224:
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb227:
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb228:
    assume {:verifier.code 0} true;
    $p435 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(31, 12)), $mul.ref(4, 1));
    goto corral_source_split_5997;

  corral_source_split_5997:
    assume {:verifier.code 0} true;
    $i436 := $load.i32($M.0, $p435);
    goto corral_source_split_5998;

  corral_source_split_5998:
    assume {:verifier.code 0} true;
    $i437 := $zext.i32.i64($i436);
    goto corral_source_split_5999;

  corral_source_split_5999:
    assume {:verifier.code 0} true;
    $p438 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_6000;

  corral_source_split_6000:
    assume {:verifier.code 0} true;
    $i439 := $load.i64($M.0, $p438);
    goto corral_source_split_6001;

  corral_source_split_6001:
    assume {:verifier.code 0} true;
    $i440 := $uge.i64($i437, $i439);
    goto corral_source_split_6002;

  corral_source_split_6002:
    assume {:verifier.code 0} true;
    assume {:branchcond $i440} true;
    goto $bb229, $bb230;

  $bb230:
    assume {:verifier.code 0} true;
    assume !($i440 == 1);
    goto $bb231;

  $bb231:
    assume {:verifier.code 0} true;
    goto $bb234;

  $bb234:
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb235:
    assume {:verifier.code 0} true;
    $p448 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(32, 12)), $mul.ref(4, 1));
    goto corral_source_split_6009;

  corral_source_split_6009:
    assume {:verifier.code 0} true;
    $i449 := $load.i32($M.0, $p448);
    goto corral_source_split_6010;

  corral_source_split_6010:
    assume {:verifier.code 0} true;
    $i450 := $zext.i32.i64($i449);
    goto corral_source_split_6011;

  corral_source_split_6011:
    assume {:verifier.code 0} true;
    $p451 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_6012;

  corral_source_split_6012:
    assume {:verifier.code 0} true;
    $i452 := $load.i64($M.0, $p451);
    goto corral_source_split_6013;

  corral_source_split_6013:
    assume {:verifier.code 0} true;
    $i453 := $uge.i64($i450, $i452);
    goto corral_source_split_6014;

  corral_source_split_6014:
    assume {:verifier.code 0} true;
    assume {:branchcond $i453} true;
    goto $bb236, $bb237;

  $bb237:
    assume {:verifier.code 0} true;
    assume !($i453 == 1);
    goto $bb238;

  $bb238:
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb241:
    assume {:verifier.code 0} true;
    goto $bb242;

  $bb242:
    assume {:verifier.code 0} true;
    $p461 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(33, 12)), $mul.ref(4, 1));
    goto corral_source_split_6021;

  corral_source_split_6021:
    assume {:verifier.code 0} true;
    $i462 := $load.i32($M.0, $p461);
    goto corral_source_split_6022;

  corral_source_split_6022:
    assume {:verifier.code 0} true;
    $i463 := $zext.i32.i64($i462);
    goto corral_source_split_6023;

  corral_source_split_6023:
    assume {:verifier.code 0} true;
    $p464 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_6024;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    $i465 := $load.i64($M.0, $p464);
    goto corral_source_split_6025;

  corral_source_split_6025:
    assume {:verifier.code 0} true;
    $i466 := $uge.i64($i463, $i465);
    goto corral_source_split_6026;

  corral_source_split_6026:
    assume {:verifier.code 0} true;
    assume {:branchcond $i466} true;
    goto $bb243, $bb244;

  $bb244:
    assume {:verifier.code 0} true;
    assume !($i466 == 1);
    goto $bb245;

  $bb245:
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb248:
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb249:
    assume {:verifier.code 0} true;
    $p474 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(34, 12)), $mul.ref(4, 1));
    goto corral_source_split_6033;

  corral_source_split_6033:
    assume {:verifier.code 0} true;
    $i475 := $load.i32($M.0, $p474);
    goto corral_source_split_6034;

  corral_source_split_6034:
    assume {:verifier.code 0} true;
    $i476 := $zext.i32.i64($i475);
    goto corral_source_split_6035;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    $p477 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_6036;

  corral_source_split_6036:
    assume {:verifier.code 0} true;
    $i478 := $load.i64($M.0, $p477);
    goto corral_source_split_6037;

  corral_source_split_6037:
    assume {:verifier.code 0} true;
    $i479 := $uge.i64($i476, $i478);
    goto corral_source_split_6038;

  corral_source_split_6038:
    assume {:verifier.code 0} true;
    assume {:branchcond $i479} true;
    goto $bb250, $bb251;

  $bb251:
    assume {:verifier.code 0} true;
    assume !($i479 == 1);
    goto $bb252;

  $bb252:
    assume {:verifier.code 0} true;
    goto $bb255;

  $bb255:
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb256:
    assume {:verifier.code 0} true;
    $p487 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(35, 12)), $mul.ref(4, 1));
    goto corral_source_split_6045;

  corral_source_split_6045:
    assume {:verifier.code 0} true;
    $i488 := $load.i32($M.0, $p487);
    goto corral_source_split_6046;

  corral_source_split_6046:
    assume {:verifier.code 0} true;
    $i489 := $zext.i32.i64($i488);
    goto corral_source_split_6047;

  corral_source_split_6047:
    assume {:verifier.code 0} true;
    $p490 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_6048;

  corral_source_split_6048:
    assume {:verifier.code 0} true;
    $i491 := $load.i64($M.0, $p490);
    goto corral_source_split_6049;

  corral_source_split_6049:
    assume {:verifier.code 0} true;
    $i492 := $uge.i64($i489, $i491);
    goto corral_source_split_6050;

  corral_source_split_6050:
    assume {:verifier.code 0} true;
    assume {:branchcond $i492} true;
    goto $bb257, $bb258;

  $bb258:
    assume {:verifier.code 0} true;
    assume !($i492 == 1);
    goto $bb259;

  $bb259:
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb262:
    assume {:verifier.code 0} true;
    goto $bb263;

  $bb263:
    assume {:verifier.code 0} true;
    $p500 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(36, 12)), $mul.ref(4, 1));
    goto corral_source_split_6057;

  corral_source_split_6057:
    assume {:verifier.code 0} true;
    $i501 := $load.i32($M.0, $p500);
    goto corral_source_split_6058;

  corral_source_split_6058:
    assume {:verifier.code 0} true;
    $i502 := $zext.i32.i64($i501);
    goto corral_source_split_6059;

  corral_source_split_6059:
    assume {:verifier.code 0} true;
    $p503 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_6060;

  corral_source_split_6060:
    assume {:verifier.code 0} true;
    $i504 := $load.i64($M.0, $p503);
    goto corral_source_split_6061;

  corral_source_split_6061:
    assume {:verifier.code 0} true;
    $i505 := $uge.i64($i502, $i504);
    goto corral_source_split_6062;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    assume {:branchcond $i505} true;
    goto $bb264, $bb265;

  $bb265:
    assume {:verifier.code 0} true;
    assume !($i505 == 1);
    goto $bb266;

  $bb266:
    assume {:verifier.code 0} true;
    goto $bb269;

  $bb269:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb270:
    assume {:verifier.code 0} true;
    $p513 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(37, 12)), $mul.ref(4, 1));
    goto corral_source_split_6069;

  corral_source_split_6069:
    assume {:verifier.code 0} true;
    $i514 := $load.i32($M.0, $p513);
    goto corral_source_split_6070;

  corral_source_split_6070:
    assume {:verifier.code 0} true;
    $i515 := $zext.i32.i64($i514);
    goto corral_source_split_6071;

  corral_source_split_6071:
    assume {:verifier.code 0} true;
    $p516 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_6072;

  corral_source_split_6072:
    assume {:verifier.code 0} true;
    $i517 := $load.i64($M.0, $p516);
    goto corral_source_split_6073;

  corral_source_split_6073:
    assume {:verifier.code 0} true;
    $i518 := $uge.i64($i515, $i517);
    goto corral_source_split_6074;

  corral_source_split_6074:
    assume {:verifier.code 0} true;
    assume {:branchcond $i518} true;
    goto $bb271, $bb272;

  $bb272:
    assume {:verifier.code 0} true;
    assume !($i518 == 1);
    goto $bb273;

  $bb273:
    assume {:verifier.code 0} true;
    goto $bb276;

  $bb276:
    assume {:verifier.code 0} true;
    goto $bb277;

  $bb277:
    assume {:verifier.code 0} true;
    $p526 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(38, 12)), $mul.ref(4, 1));
    goto corral_source_split_6081;

  corral_source_split_6081:
    assume {:verifier.code 0} true;
    $i527 := $load.i32($M.0, $p526);
    goto corral_source_split_6082;

  corral_source_split_6082:
    assume {:verifier.code 0} true;
    $i528 := $zext.i32.i64($i527);
    goto corral_source_split_6083;

  corral_source_split_6083:
    assume {:verifier.code 0} true;
    $p529 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_6084;

  corral_source_split_6084:
    assume {:verifier.code 0} true;
    $i530 := $load.i64($M.0, $p529);
    goto corral_source_split_6085;

  corral_source_split_6085:
    assume {:verifier.code 0} true;
    $i531 := $uge.i64($i528, $i530);
    goto corral_source_split_6086;

  corral_source_split_6086:
    assume {:verifier.code 0} true;
    assume {:branchcond $i531} true;
    goto $bb278, $bb279;

  $bb279:
    assume {:verifier.code 0} true;
    assume !($i531 == 1);
    goto $bb280;

  $bb280:
    assume {:verifier.code 0} true;
    goto $bb283;

  $bb283:
    assume {:verifier.code 0} true;
    goto $bb284;

  $bb284:
    assume {:verifier.code 0} true;
    $p539 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(39, 12)), $mul.ref(4, 1));
    goto corral_source_split_6093;

  corral_source_split_6093:
    assume {:verifier.code 0} true;
    $i540 := $load.i32($M.0, $p539);
    goto corral_source_split_6094;

  corral_source_split_6094:
    assume {:verifier.code 0} true;
    $i541 := $zext.i32.i64($i540);
    goto corral_source_split_6095;

  corral_source_split_6095:
    assume {:verifier.code 0} true;
    $p542 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_6096;

  corral_source_split_6096:
    assume {:verifier.code 0} true;
    $i543 := $load.i64($M.0, $p542);
    goto corral_source_split_6097;

  corral_source_split_6097:
    assume {:verifier.code 0} true;
    $i544 := $uge.i64($i541, $i543);
    goto corral_source_split_6098;

  corral_source_split_6098:
    assume {:verifier.code 0} true;
    assume {:branchcond $i544} true;
    goto $bb285, $bb286;

  $bb286:
    assume {:verifier.code 0} true;
    assume !($i544 == 1);
    goto $bb287;

  $bb287:
    assume {:verifier.code 0} true;
    goto $bb290;

  $bb290:
    assume {:verifier.code 0} true;
    goto $bb291;

  $bb291:
    assume {:verifier.code 0} true;
    $p552 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(40, 12)), $mul.ref(4, 1));
    goto corral_source_split_6105;

  corral_source_split_6105:
    assume {:verifier.code 0} true;
    $i553 := $load.i32($M.0, $p552);
    goto corral_source_split_6106;

  corral_source_split_6106:
    assume {:verifier.code 0} true;
    $i554 := $zext.i32.i64($i553);
    goto corral_source_split_6107;

  corral_source_split_6107:
    assume {:verifier.code 0} true;
    $p555 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_6108;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    $i556 := $load.i64($M.0, $p555);
    goto corral_source_split_6109;

  corral_source_split_6109:
    assume {:verifier.code 0} true;
    $i557 := $uge.i64($i554, $i556);
    goto corral_source_split_6110;

  corral_source_split_6110:
    assume {:verifier.code 0} true;
    assume {:branchcond $i557} true;
    goto $bb292, $bb293;

  $bb293:
    assume {:verifier.code 0} true;
    assume !($i557 == 1);
    goto $bb294;

  $bb294:
    assume {:verifier.code 0} true;
    goto $bb297;

  $bb297:
    assume {:verifier.code 0} true;
    goto $bb298;

  $bb298:
    assume {:verifier.code 0} true;
    $p565 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(41, 12)), $mul.ref(4, 1));
    goto corral_source_split_6117;

  corral_source_split_6117:
    assume {:verifier.code 0} true;
    $i566 := $load.i32($M.0, $p565);
    goto corral_source_split_6118;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    $i567 := $zext.i32.i64($i566);
    goto corral_source_split_6119;

  corral_source_split_6119:
    assume {:verifier.code 0} true;
    $p568 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_6120;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    $i569 := $load.i64($M.0, $p568);
    goto corral_source_split_6121;

  corral_source_split_6121:
    assume {:verifier.code 0} true;
    $i570 := $uge.i64($i567, $i569);
    goto corral_source_split_6122;

  corral_source_split_6122:
    assume {:verifier.code 0} true;
    assume {:branchcond $i570} true;
    goto $bb299, $bb300;

  $bb300:
    assume {:verifier.code 0} true;
    assume !($i570 == 1);
    goto $bb301;

  $bb301:
    assume {:verifier.code 0} true;
    goto $bb304;

  $bb304:
    assume {:verifier.code 0} true;
    goto $bb305;

  $bb305:
    assume {:verifier.code 0} true;
    $p578 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(42, 12)), $mul.ref(4, 1));
    goto corral_source_split_6129;

  corral_source_split_6129:
    assume {:verifier.code 0} true;
    $i579 := $load.i32($M.0, $p578);
    goto corral_source_split_6130;

  corral_source_split_6130:
    assume {:verifier.code 0} true;
    $i580 := $zext.i32.i64($i579);
    goto corral_source_split_6131;

  corral_source_split_6131:
    assume {:verifier.code 0} true;
    $p581 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_6132;

  corral_source_split_6132:
    assume {:verifier.code 0} true;
    $i582 := $load.i64($M.0, $p581);
    goto corral_source_split_6133;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    $i583 := $uge.i64($i580, $i582);
    goto corral_source_split_6134;

  corral_source_split_6134:
    assume {:verifier.code 0} true;
    assume {:branchcond $i583} true;
    goto $bb306, $bb307;

  $bb307:
    assume {:verifier.code 0} true;
    assume !($i583 == 1);
    goto $bb308;

  $bb308:
    assume {:verifier.code 0} true;
    goto $bb311;

  $bb311:
    assume {:verifier.code 0} true;
    goto $bb312;

  $bb312:
    assume {:verifier.code 0} true;
    $p591 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(43, 12)), $mul.ref(4, 1));
    goto corral_source_split_6141;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    $i592 := $load.i32($M.0, $p591);
    goto corral_source_split_6142;

  corral_source_split_6142:
    assume {:verifier.code 0} true;
    $i593 := $zext.i32.i64($i592);
    goto corral_source_split_6143;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    $p594 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_6144;

  corral_source_split_6144:
    assume {:verifier.code 0} true;
    $i595 := $load.i64($M.0, $p594);
    goto corral_source_split_6145;

  corral_source_split_6145:
    assume {:verifier.code 0} true;
    $i596 := $uge.i64($i593, $i595);
    goto corral_source_split_6146;

  corral_source_split_6146:
    assume {:verifier.code 0} true;
    assume {:branchcond $i596} true;
    goto $bb313, $bb314;

  $bb314:
    assume {:verifier.code 0} true;
    assume !($i596 == 1);
    goto $bb315;

  $bb315:
    assume {:verifier.code 0} true;
    goto $bb318;

  $bb318:
    assume {:verifier.code 0} true;
    goto $bb319;

  $bb319:
    assume {:verifier.code 0} true;
    $p604 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(44, 12)), $mul.ref(4, 1));
    goto corral_source_split_6153;

  corral_source_split_6153:
    assume {:verifier.code 0} true;
    $i605 := $load.i32($M.0, $p604);
    goto corral_source_split_6154;

  corral_source_split_6154:
    assume {:verifier.code 0} true;
    $i606 := $zext.i32.i64($i605);
    goto corral_source_split_6155;

  corral_source_split_6155:
    assume {:verifier.code 0} true;
    $p607 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_6156;

  corral_source_split_6156:
    assume {:verifier.code 0} true;
    $i608 := $load.i64($M.0, $p607);
    goto corral_source_split_6157;

  corral_source_split_6157:
    assume {:verifier.code 0} true;
    $i609 := $uge.i64($i606, $i608);
    goto corral_source_split_6158;

  corral_source_split_6158:
    assume {:verifier.code 0} true;
    assume {:branchcond $i609} true;
    goto $bb320, $bb321;

  $bb321:
    assume {:verifier.code 0} true;
    assume !($i609 == 1);
    goto $bb322;

  $bb322:
    assume {:verifier.code 0} true;
    goto $bb325;

  $bb325:
    assume {:verifier.code 0} true;
    goto $bb326;

  $bb326:
    assume {:verifier.code 0} true;
    $p617 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(45, 12)), $mul.ref(4, 1));
    goto corral_source_split_6165;

  corral_source_split_6165:
    assume {:verifier.code 0} true;
    $i618 := $load.i32($M.0, $p617);
    goto corral_source_split_6166;

  corral_source_split_6166:
    assume {:verifier.code 0} true;
    $i619 := $zext.i32.i64($i618);
    goto corral_source_split_6167;

  corral_source_split_6167:
    assume {:verifier.code 0} true;
    $p620 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_6168;

  corral_source_split_6168:
    assume {:verifier.code 0} true;
    $i621 := $load.i64($M.0, $p620);
    goto corral_source_split_6169;

  corral_source_split_6169:
    assume {:verifier.code 0} true;
    $i622 := $uge.i64($i619, $i621);
    goto corral_source_split_6170;

  corral_source_split_6170:
    assume {:verifier.code 0} true;
    assume {:branchcond $i622} true;
    goto $bb327, $bb328;

  $bb328:
    assume {:verifier.code 0} true;
    assume !($i622 == 1);
    goto $bb329;

  $bb329:
    assume {:verifier.code 0} true;
    goto $bb332;

  $bb332:
    assume {:verifier.code 0} true;
    goto $bb333;

  $bb333:
    assume {:verifier.code 0} true;
    $p630 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(46, 12)), $mul.ref(4, 1));
    goto corral_source_split_6177;

  corral_source_split_6177:
    assume {:verifier.code 0} true;
    $i631 := $load.i32($M.0, $p630);
    goto corral_source_split_6178;

  corral_source_split_6178:
    assume {:verifier.code 0} true;
    $i632 := $zext.i32.i64($i631);
    goto corral_source_split_6179;

  corral_source_split_6179:
    assume {:verifier.code 0} true;
    $p633 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_6180;

  corral_source_split_6180:
    assume {:verifier.code 0} true;
    $i634 := $load.i64($M.0, $p633);
    goto corral_source_split_6181;

  corral_source_split_6181:
    assume {:verifier.code 0} true;
    $i635 := $uge.i64($i632, $i634);
    goto corral_source_split_6182;

  corral_source_split_6182:
    assume {:verifier.code 0} true;
    assume {:branchcond $i635} true;
    goto $bb334, $bb335;

  $bb335:
    assume {:verifier.code 0} true;
    assume !($i635 == 1);
    goto $bb336;

  $bb336:
    assume {:verifier.code 0} true;
    goto $bb339;

  $bb339:
    assume {:verifier.code 0} true;
    goto $bb340;

  $bb340:
    assume {:verifier.code 0} true;
    $p643 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(47, 12)), $mul.ref(4, 1));
    goto corral_source_split_6189;

  corral_source_split_6189:
    assume {:verifier.code 0} true;
    $i644 := $load.i32($M.0, $p643);
    goto corral_source_split_6190;

  corral_source_split_6190:
    assume {:verifier.code 0} true;
    $i645 := $zext.i32.i64($i644);
    goto corral_source_split_6191;

  corral_source_split_6191:
    assume {:verifier.code 0} true;
    $p646 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_6192;

  corral_source_split_6192:
    assume {:verifier.code 0} true;
    $i647 := $load.i64($M.0, $p646);
    goto corral_source_split_6193;

  corral_source_split_6193:
    assume {:verifier.code 0} true;
    $i648 := $uge.i64($i645, $i647);
    goto corral_source_split_6194;

  corral_source_split_6194:
    assume {:verifier.code 0} true;
    assume {:branchcond $i648} true;
    goto $bb341, $bb342;

  $bb342:
    assume {:verifier.code 0} true;
    assume !($i648 == 1);
    goto $bb343;

  $bb343:
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb346:
    assume {:verifier.code 0} true;
    goto $bb347;

  $bb347:
    assume {:verifier.code 0} true;
    $p656 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(48, 12)), $mul.ref(4, 1));
    goto corral_source_split_6201;

  corral_source_split_6201:
    assume {:verifier.code 0} true;
    $i657 := $load.i32($M.0, $p656);
    goto corral_source_split_6202;

  corral_source_split_6202:
    assume {:verifier.code 0} true;
    $i658 := $zext.i32.i64($i657);
    goto corral_source_split_6203;

  corral_source_split_6203:
    assume {:verifier.code 0} true;
    $p659 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_6204;

  corral_source_split_6204:
    assume {:verifier.code 0} true;
    $i660 := $load.i64($M.0, $p659);
    goto corral_source_split_6205;

  corral_source_split_6205:
    assume {:verifier.code 0} true;
    $i661 := $uge.i64($i658, $i660);
    goto corral_source_split_6206;

  corral_source_split_6206:
    assume {:verifier.code 0} true;
    assume {:branchcond $i661} true;
    goto $bb348, $bb349;

  $bb349:
    assume {:verifier.code 0} true;
    assume !($i661 == 1);
    goto $bb350;

  $bb350:
    assume {:verifier.code 0} true;
    goto $bb353;

  $bb353:
    assume {:verifier.code 0} true;
    goto $bb354;

  $bb354:
    assume {:verifier.code 0} true;
    $p669 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(49, 12)), $mul.ref(4, 1));
    goto corral_source_split_6213;

  corral_source_split_6213:
    assume {:verifier.code 0} true;
    $i670 := $load.i32($M.0, $p669);
    goto corral_source_split_6214;

  corral_source_split_6214:
    assume {:verifier.code 0} true;
    $i671 := $zext.i32.i64($i670);
    goto corral_source_split_6215;

  corral_source_split_6215:
    assume {:verifier.code 0} true;
    $p672 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_6216;

  corral_source_split_6216:
    assume {:verifier.code 0} true;
    $i673 := $load.i64($M.0, $p672);
    goto corral_source_split_6217;

  corral_source_split_6217:
    assume {:verifier.code 0} true;
    $i674 := $uge.i64($i671, $i673);
    goto corral_source_split_6218;

  corral_source_split_6218:
    assume {:verifier.code 0} true;
    assume {:branchcond $i674} true;
    goto $bb355, $bb356;

  $bb356:
    assume {:verifier.code 0} true;
    assume !($i674 == 1);
    goto $bb357;

  $bb357:
    assume {:verifier.code 0} true;
    goto $bb360;

  $bb360:
    assume {:verifier.code 0} true;
    goto $bb361;

  $bb361:
    assume {:verifier.code 0} true;
    $p682 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(50, 12)), $mul.ref(4, 1));
    goto corral_source_split_6225;

  corral_source_split_6225:
    assume {:verifier.code 0} true;
    $i683 := $load.i32($M.0, $p682);
    goto corral_source_split_6226;

  corral_source_split_6226:
    assume {:verifier.code 0} true;
    $i684 := $zext.i32.i64($i683);
    goto corral_source_split_6227;

  corral_source_split_6227:
    assume {:verifier.code 0} true;
    $p685 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_6228;

  corral_source_split_6228:
    assume {:verifier.code 0} true;
    $i686 := $load.i64($M.0, $p685);
    goto corral_source_split_6229;

  corral_source_split_6229:
    assume {:verifier.code 0} true;
    $i687 := $uge.i64($i684, $i686);
    goto corral_source_split_6230;

  corral_source_split_6230:
    assume {:verifier.code 0} true;
    assume {:branchcond $i687} true;
    goto $bb362, $bb363;

  $bb363:
    assume {:verifier.code 0} true;
    assume !($i687 == 1);
    goto $bb364;

  $bb364:
    assume {:verifier.code 0} true;
    goto $bb367;

  $bb367:
    assume {:verifier.code 0} true;
    goto $bb368;

  $bb368:
    assume {:verifier.code 0} true;
    $p695 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(51, 12)), $mul.ref(4, 1));
    goto corral_source_split_6237;

  corral_source_split_6237:
    assume {:verifier.code 0} true;
    $i696 := $load.i32($M.0, $p695);
    goto corral_source_split_6238;

  corral_source_split_6238:
    assume {:verifier.code 0} true;
    $i697 := $zext.i32.i64($i696);
    goto corral_source_split_6239;

  corral_source_split_6239:
    assume {:verifier.code 0} true;
    $p698 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_6240;

  corral_source_split_6240:
    assume {:verifier.code 0} true;
    $i699 := $load.i64($M.0, $p698);
    goto corral_source_split_6241;

  corral_source_split_6241:
    assume {:verifier.code 0} true;
    $i700 := $uge.i64($i697, $i699);
    goto corral_source_split_6242;

  corral_source_split_6242:
    assume {:verifier.code 0} true;
    assume {:branchcond $i700} true;
    goto $bb369, $bb370;

  $bb370:
    assume {:verifier.code 0} true;
    assume !($i700 == 1);
    goto $bb371;

  $bb371:
    assume {:verifier.code 0} true;
    goto $bb374;

  $bb374:
    assume {:verifier.code 0} true;
    goto $bb375;

  $bb375:
    assume {:verifier.code 0} true;
    $p708 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(52, 12)), $mul.ref(4, 1));
    goto corral_source_split_6249;

  corral_source_split_6249:
    assume {:verifier.code 0} true;
    $i709 := $load.i32($M.0, $p708);
    goto corral_source_split_6250;

  corral_source_split_6250:
    assume {:verifier.code 0} true;
    $i710 := $zext.i32.i64($i709);
    goto corral_source_split_6251;

  corral_source_split_6251:
    assume {:verifier.code 0} true;
    $p711 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_6252;

  corral_source_split_6252:
    assume {:verifier.code 0} true;
    $i712 := $load.i64($M.0, $p711);
    goto corral_source_split_6253;

  corral_source_split_6253:
    assume {:verifier.code 0} true;
    $i713 := $uge.i64($i710, $i712);
    goto corral_source_split_6254;

  corral_source_split_6254:
    assume {:verifier.code 0} true;
    assume {:branchcond $i713} true;
    goto $bb376, $bb377;

  $bb377:
    assume {:verifier.code 0} true;
    assume !($i713 == 1);
    goto $bb378;

  $bb378:
    assume {:verifier.code 0} true;
    goto $bb381;

  $bb381:
    assume {:verifier.code 0} true;
    goto $bb382;

  $bb382:
    assume {:verifier.code 0} true;
    $p721 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(53, 12)), $mul.ref(4, 1));
    goto corral_source_split_6261;

  corral_source_split_6261:
    assume {:verifier.code 0} true;
    $i722 := $load.i32($M.0, $p721);
    goto corral_source_split_6262;

  corral_source_split_6262:
    assume {:verifier.code 0} true;
    $i723 := $zext.i32.i64($i722);
    goto corral_source_split_6263;

  corral_source_split_6263:
    assume {:verifier.code 0} true;
    $p724 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_6264;

  corral_source_split_6264:
    assume {:verifier.code 0} true;
    $i725 := $load.i64($M.0, $p724);
    goto corral_source_split_6265;

  corral_source_split_6265:
    assume {:verifier.code 0} true;
    $i726 := $uge.i64($i723, $i725);
    goto corral_source_split_6266;

  corral_source_split_6266:
    assume {:verifier.code 0} true;
    assume {:branchcond $i726} true;
    goto $bb383, $bb384;

  $bb384:
    assume {:verifier.code 0} true;
    assume !($i726 == 1);
    goto $bb385;

  $bb385:
    assume {:verifier.code 0} true;
    goto $bb388;

  $bb388:
    assume {:verifier.code 0} true;
    goto $bb389;

  $bb389:
    assume {:verifier.code 0} true;
    $p734 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(54, 12)), $mul.ref(4, 1));
    goto corral_source_split_6273;

  corral_source_split_6273:
    assume {:verifier.code 0} true;
    $i735 := $load.i32($M.0, $p734);
    goto corral_source_split_6274;

  corral_source_split_6274:
    assume {:verifier.code 0} true;
    $i736 := $zext.i32.i64($i735);
    goto corral_source_split_6275;

  corral_source_split_6275:
    assume {:verifier.code 0} true;
    $p737 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_6276;

  corral_source_split_6276:
    assume {:verifier.code 0} true;
    $i738 := $load.i64($M.0, $p737);
    goto corral_source_split_6277;

  corral_source_split_6277:
    assume {:verifier.code 0} true;
    $i739 := $uge.i64($i736, $i738);
    goto corral_source_split_6278;

  corral_source_split_6278:
    assume {:verifier.code 0} true;
    assume {:branchcond $i739} true;
    goto $bb390, $bb391;

  $bb391:
    assume {:verifier.code 0} true;
    assume !($i739 == 1);
    goto $bb392;

  $bb392:
    assume {:verifier.code 0} true;
    goto $bb395;

  $bb395:
    assume {:verifier.code 0} true;
    goto $bb396;

  $bb396:
    assume {:verifier.code 0} true;
    $p747 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(55, 12)), $mul.ref(4, 1));
    goto corral_source_split_6285;

  corral_source_split_6285:
    assume {:verifier.code 0} true;
    $i748 := $load.i32($M.0, $p747);
    goto corral_source_split_6286;

  corral_source_split_6286:
    assume {:verifier.code 0} true;
    $i749 := $zext.i32.i64($i748);
    goto corral_source_split_6287;

  corral_source_split_6287:
    assume {:verifier.code 0} true;
    $p750 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_6288;

  corral_source_split_6288:
    assume {:verifier.code 0} true;
    $i751 := $load.i64($M.0, $p750);
    goto corral_source_split_6289;

  corral_source_split_6289:
    assume {:verifier.code 0} true;
    $i752 := $uge.i64($i749, $i751);
    goto corral_source_split_6290;

  corral_source_split_6290:
    assume {:verifier.code 0} true;
    assume {:branchcond $i752} true;
    goto $bb397, $bb398;

  $bb398:
    assume {:verifier.code 0} true;
    assume !($i752 == 1);
    goto $bb399;

  $bb399:
    assume {:verifier.code 0} true;
    goto $bb402;

  $bb402:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb397:
    assume $i752 == 1;
    goto corral_source_split_6292;

  corral_source_split_6292:
    assume {:verifier.code 0} true;
    $p755 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(55, 12)), $mul.ref(8, 1));
    goto corral_source_split_6293;

  corral_source_split_6293:
    assume {:verifier.code 0} true;
    $i756 := $load.i32($M.0, $p755);
    goto corral_source_split_6294;

  corral_source_split_6294:
    assume {:verifier.code 0} true;
    $i757 := $ne.i32($i756, 0);
    goto corral_source_split_6295;

  corral_source_split_6295:
    assume {:verifier.code 0} true;
    $i32 := 55;
    assume {:branchcond $i757} true;
    goto $bb400, $bb401;

  $bb401:
    assume {:verifier.code 0} true;
    assume !($i757 == 1);
    goto $bb399;

  $bb400:
    assume {:verifier.code 0} true;
    assume $i757 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_5627;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    $i33 := $sext.i32.i64($i32);
    goto corral_source_split_5628;

  corral_source_split_5628:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i33, 12)), $mul.ref(8, 1));
    goto corral_source_split_5629;

  corral_source_split_5629:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, 0);
    goto corral_source_split_5630;

  corral_source_split_5630:
    assume {:verifier.code 0} true;
    $i37 := $sext.i32.i64($i32);
    goto corral_source_split_5631;

  corral_source_split_5631:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i37, 12)), $mul.ref(0, 1));
    goto corral_source_split_5632;

  corral_source_split_5632:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_5633;

  corral_source_split_5633:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_5634;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p42, $i41);
    goto corral_source_split_5635;

  corral_source_split_5635:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb390:
    assume $i739 == 1;
    goto corral_source_split_6280;

  corral_source_split_6280:
    assume {:verifier.code 0} true;
    $p742 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(54, 12)), $mul.ref(8, 1));
    goto corral_source_split_6281;

  corral_source_split_6281:
    assume {:verifier.code 0} true;
    $i743 := $load.i32($M.0, $p742);
    goto corral_source_split_6282;

  corral_source_split_6282:
    assume {:verifier.code 0} true;
    $i744 := $ne.i32($i743, 0);
    goto corral_source_split_6283;

  corral_source_split_6283:
    assume {:verifier.code 0} true;
    $i32 := 54;
    assume {:branchcond $i744} true;
    goto $bb393, $bb394;

  $bb394:
    assume {:verifier.code 0} true;
    assume !($i744 == 1);
    goto $bb392;

  $bb393:
    assume {:verifier.code 0} true;
    assume $i744 == 1;
    goto $bb14;

  $bb383:
    assume $i726 == 1;
    goto corral_source_split_6268;

  corral_source_split_6268:
    assume {:verifier.code 0} true;
    $p729 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(53, 12)), $mul.ref(8, 1));
    goto corral_source_split_6269;

  corral_source_split_6269:
    assume {:verifier.code 0} true;
    $i730 := $load.i32($M.0, $p729);
    goto corral_source_split_6270;

  corral_source_split_6270:
    assume {:verifier.code 0} true;
    $i731 := $ne.i32($i730, 0);
    goto corral_source_split_6271;

  corral_source_split_6271:
    assume {:verifier.code 0} true;
    $i32 := 53;
    assume {:branchcond $i731} true;
    goto $bb386, $bb387;

  $bb387:
    assume {:verifier.code 0} true;
    assume !($i731 == 1);
    goto $bb385;

  $bb386:
    assume {:verifier.code 0} true;
    assume $i731 == 1;
    goto $bb14;

  $bb376:
    assume $i713 == 1;
    goto corral_source_split_6256;

  corral_source_split_6256:
    assume {:verifier.code 0} true;
    $p716 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(52, 12)), $mul.ref(8, 1));
    goto corral_source_split_6257;

  corral_source_split_6257:
    assume {:verifier.code 0} true;
    $i717 := $load.i32($M.0, $p716);
    goto corral_source_split_6258;

  corral_source_split_6258:
    assume {:verifier.code 0} true;
    $i718 := $ne.i32($i717, 0);
    goto corral_source_split_6259;

  corral_source_split_6259:
    assume {:verifier.code 0} true;
    $i32 := 52;
    assume {:branchcond $i718} true;
    goto $bb379, $bb380;

  $bb380:
    assume {:verifier.code 0} true;
    assume !($i718 == 1);
    goto $bb378;

  $bb379:
    assume {:verifier.code 0} true;
    assume $i718 == 1;
    goto $bb14;

  $bb369:
    assume $i700 == 1;
    goto corral_source_split_6244;

  corral_source_split_6244:
    assume {:verifier.code 0} true;
    $p703 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(51, 12)), $mul.ref(8, 1));
    goto corral_source_split_6245;

  corral_source_split_6245:
    assume {:verifier.code 0} true;
    $i704 := $load.i32($M.0, $p703);
    goto corral_source_split_6246;

  corral_source_split_6246:
    assume {:verifier.code 0} true;
    $i705 := $ne.i32($i704, 0);
    goto corral_source_split_6247;

  corral_source_split_6247:
    assume {:verifier.code 0} true;
    $i32 := 51;
    assume {:branchcond $i705} true;
    goto $bb372, $bb373;

  $bb373:
    assume {:verifier.code 0} true;
    assume !($i705 == 1);
    goto $bb371;

  $bb372:
    assume {:verifier.code 0} true;
    assume $i705 == 1;
    goto $bb14;

  $bb362:
    assume $i687 == 1;
    goto corral_source_split_6232;

  corral_source_split_6232:
    assume {:verifier.code 0} true;
    $p690 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(50, 12)), $mul.ref(8, 1));
    goto corral_source_split_6233;

  corral_source_split_6233:
    assume {:verifier.code 0} true;
    $i691 := $load.i32($M.0, $p690);
    goto corral_source_split_6234;

  corral_source_split_6234:
    assume {:verifier.code 0} true;
    $i692 := $ne.i32($i691, 0);
    goto corral_source_split_6235;

  corral_source_split_6235:
    assume {:verifier.code 0} true;
    $i32 := 50;
    assume {:branchcond $i692} true;
    goto $bb365, $bb366;

  $bb366:
    assume {:verifier.code 0} true;
    assume !($i692 == 1);
    goto $bb364;

  $bb365:
    assume {:verifier.code 0} true;
    assume $i692 == 1;
    goto $bb14;

  $bb355:
    assume $i674 == 1;
    goto corral_source_split_6220;

  corral_source_split_6220:
    assume {:verifier.code 0} true;
    $p677 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(49, 12)), $mul.ref(8, 1));
    goto corral_source_split_6221;

  corral_source_split_6221:
    assume {:verifier.code 0} true;
    $i678 := $load.i32($M.0, $p677);
    goto corral_source_split_6222;

  corral_source_split_6222:
    assume {:verifier.code 0} true;
    $i679 := $ne.i32($i678, 0);
    goto corral_source_split_6223;

  corral_source_split_6223:
    assume {:verifier.code 0} true;
    $i32 := 49;
    assume {:branchcond $i679} true;
    goto $bb358, $bb359;

  $bb359:
    assume {:verifier.code 0} true;
    assume !($i679 == 1);
    goto $bb357;

  $bb358:
    assume {:verifier.code 0} true;
    assume $i679 == 1;
    goto $bb14;

  $bb348:
    assume $i661 == 1;
    goto corral_source_split_6208;

  corral_source_split_6208:
    assume {:verifier.code 0} true;
    $p664 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(48, 12)), $mul.ref(8, 1));
    goto corral_source_split_6209;

  corral_source_split_6209:
    assume {:verifier.code 0} true;
    $i665 := $load.i32($M.0, $p664);
    goto corral_source_split_6210;

  corral_source_split_6210:
    assume {:verifier.code 0} true;
    $i666 := $ne.i32($i665, 0);
    goto corral_source_split_6211;

  corral_source_split_6211:
    assume {:verifier.code 0} true;
    $i32 := 48;
    assume {:branchcond $i666} true;
    goto $bb351, $bb352;

  $bb352:
    assume {:verifier.code 0} true;
    assume !($i666 == 1);
    goto $bb350;

  $bb351:
    assume {:verifier.code 0} true;
    assume $i666 == 1;
    goto $bb14;

  $bb341:
    assume $i648 == 1;
    goto corral_source_split_6196;

  corral_source_split_6196:
    assume {:verifier.code 0} true;
    $p651 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(47, 12)), $mul.ref(8, 1));
    goto corral_source_split_6197;

  corral_source_split_6197:
    assume {:verifier.code 0} true;
    $i652 := $load.i32($M.0, $p651);
    goto corral_source_split_6198;

  corral_source_split_6198:
    assume {:verifier.code 0} true;
    $i653 := $ne.i32($i652, 0);
    goto corral_source_split_6199;

  corral_source_split_6199:
    assume {:verifier.code 0} true;
    $i32 := 47;
    assume {:branchcond $i653} true;
    goto $bb344, $bb345;

  $bb345:
    assume {:verifier.code 0} true;
    assume !($i653 == 1);
    goto $bb343;

  $bb344:
    assume {:verifier.code 0} true;
    assume $i653 == 1;
    goto $bb14;

  $bb334:
    assume $i635 == 1;
    goto corral_source_split_6184;

  corral_source_split_6184:
    assume {:verifier.code 0} true;
    $p638 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(46, 12)), $mul.ref(8, 1));
    goto corral_source_split_6185;

  corral_source_split_6185:
    assume {:verifier.code 0} true;
    $i639 := $load.i32($M.0, $p638);
    goto corral_source_split_6186;

  corral_source_split_6186:
    assume {:verifier.code 0} true;
    $i640 := $ne.i32($i639, 0);
    goto corral_source_split_6187;

  corral_source_split_6187:
    assume {:verifier.code 0} true;
    $i32 := 46;
    assume {:branchcond $i640} true;
    goto $bb337, $bb338;

  $bb338:
    assume {:verifier.code 0} true;
    assume !($i640 == 1);
    goto $bb336;

  $bb337:
    assume {:verifier.code 0} true;
    assume $i640 == 1;
    goto $bb14;

  $bb327:
    assume $i622 == 1;
    goto corral_source_split_6172;

  corral_source_split_6172:
    assume {:verifier.code 0} true;
    $p625 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(45, 12)), $mul.ref(8, 1));
    goto corral_source_split_6173;

  corral_source_split_6173:
    assume {:verifier.code 0} true;
    $i626 := $load.i32($M.0, $p625);
    goto corral_source_split_6174;

  corral_source_split_6174:
    assume {:verifier.code 0} true;
    $i627 := $ne.i32($i626, 0);
    goto corral_source_split_6175;

  corral_source_split_6175:
    assume {:verifier.code 0} true;
    $i32 := 45;
    assume {:branchcond $i627} true;
    goto $bb330, $bb331;

  $bb331:
    assume {:verifier.code 0} true;
    assume !($i627 == 1);
    goto $bb329;

  $bb330:
    assume {:verifier.code 0} true;
    assume $i627 == 1;
    goto $bb14;

  $bb320:
    assume $i609 == 1;
    goto corral_source_split_6160;

  corral_source_split_6160:
    assume {:verifier.code 0} true;
    $p612 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(44, 12)), $mul.ref(8, 1));
    goto corral_source_split_6161;

  corral_source_split_6161:
    assume {:verifier.code 0} true;
    $i613 := $load.i32($M.0, $p612);
    goto corral_source_split_6162;

  corral_source_split_6162:
    assume {:verifier.code 0} true;
    $i614 := $ne.i32($i613, 0);
    goto corral_source_split_6163;

  corral_source_split_6163:
    assume {:verifier.code 0} true;
    $i32 := 44;
    assume {:branchcond $i614} true;
    goto $bb323, $bb324;

  $bb324:
    assume {:verifier.code 0} true;
    assume !($i614 == 1);
    goto $bb322;

  $bb323:
    assume {:verifier.code 0} true;
    assume $i614 == 1;
    goto $bb14;

  $bb313:
    assume $i596 == 1;
    goto corral_source_split_6148;

  corral_source_split_6148:
    assume {:verifier.code 0} true;
    $p599 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(43, 12)), $mul.ref(8, 1));
    goto corral_source_split_6149;

  corral_source_split_6149:
    assume {:verifier.code 0} true;
    $i600 := $load.i32($M.0, $p599);
    goto corral_source_split_6150;

  corral_source_split_6150:
    assume {:verifier.code 0} true;
    $i601 := $ne.i32($i600, 0);
    goto corral_source_split_6151;

  corral_source_split_6151:
    assume {:verifier.code 0} true;
    $i32 := 43;
    assume {:branchcond $i601} true;
    goto $bb316, $bb317;

  $bb317:
    assume {:verifier.code 0} true;
    assume !($i601 == 1);
    goto $bb315;

  $bb316:
    assume {:verifier.code 0} true;
    assume $i601 == 1;
    goto $bb14;

  $bb306:
    assume $i583 == 1;
    goto corral_source_split_6136;

  corral_source_split_6136:
    assume {:verifier.code 0} true;
    $p586 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(42, 12)), $mul.ref(8, 1));
    goto corral_source_split_6137;

  corral_source_split_6137:
    assume {:verifier.code 0} true;
    $i587 := $load.i32($M.0, $p586);
    goto corral_source_split_6138;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    $i588 := $ne.i32($i587, 0);
    goto corral_source_split_6139;

  corral_source_split_6139:
    assume {:verifier.code 0} true;
    $i32 := 42;
    assume {:branchcond $i588} true;
    goto $bb309, $bb310;

  $bb310:
    assume {:verifier.code 0} true;
    assume !($i588 == 1);
    goto $bb308;

  $bb309:
    assume {:verifier.code 0} true;
    assume $i588 == 1;
    goto $bb14;

  $bb299:
    assume $i570 == 1;
    goto corral_source_split_6124;

  corral_source_split_6124:
    assume {:verifier.code 0} true;
    $p573 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(41, 12)), $mul.ref(8, 1));
    goto corral_source_split_6125;

  corral_source_split_6125:
    assume {:verifier.code 0} true;
    $i574 := $load.i32($M.0, $p573);
    goto corral_source_split_6126;

  corral_source_split_6126:
    assume {:verifier.code 0} true;
    $i575 := $ne.i32($i574, 0);
    goto corral_source_split_6127;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    $i32 := 41;
    assume {:branchcond $i575} true;
    goto $bb302, $bb303;

  $bb303:
    assume {:verifier.code 0} true;
    assume !($i575 == 1);
    goto $bb301;

  $bb302:
    assume {:verifier.code 0} true;
    assume $i575 == 1;
    goto $bb14;

  $bb292:
    assume $i557 == 1;
    goto corral_source_split_6112;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    $p560 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(40, 12)), $mul.ref(8, 1));
    goto corral_source_split_6113;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    $i561 := $load.i32($M.0, $p560);
    goto corral_source_split_6114;

  corral_source_split_6114:
    assume {:verifier.code 0} true;
    $i562 := $ne.i32($i561, 0);
    goto corral_source_split_6115;

  corral_source_split_6115:
    assume {:verifier.code 0} true;
    $i32 := 40;
    assume {:branchcond $i562} true;
    goto $bb295, $bb296;

  $bb296:
    assume {:verifier.code 0} true;
    assume !($i562 == 1);
    goto $bb294;

  $bb295:
    assume {:verifier.code 0} true;
    assume $i562 == 1;
    goto $bb14;

  $bb285:
    assume $i544 == 1;
    goto corral_source_split_6100;

  corral_source_split_6100:
    assume {:verifier.code 0} true;
    $p547 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(39, 12)), $mul.ref(8, 1));
    goto corral_source_split_6101;

  corral_source_split_6101:
    assume {:verifier.code 0} true;
    $i548 := $load.i32($M.0, $p547);
    goto corral_source_split_6102;

  corral_source_split_6102:
    assume {:verifier.code 0} true;
    $i549 := $ne.i32($i548, 0);
    goto corral_source_split_6103;

  corral_source_split_6103:
    assume {:verifier.code 0} true;
    $i32 := 39;
    assume {:branchcond $i549} true;
    goto $bb288, $bb289;

  $bb289:
    assume {:verifier.code 0} true;
    assume !($i549 == 1);
    goto $bb287;

  $bb288:
    assume {:verifier.code 0} true;
    assume $i549 == 1;
    goto $bb14;

  $bb278:
    assume $i531 == 1;
    goto corral_source_split_6088;

  corral_source_split_6088:
    assume {:verifier.code 0} true;
    $p534 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(38, 12)), $mul.ref(8, 1));
    goto corral_source_split_6089;

  corral_source_split_6089:
    assume {:verifier.code 0} true;
    $i535 := $load.i32($M.0, $p534);
    goto corral_source_split_6090;

  corral_source_split_6090:
    assume {:verifier.code 0} true;
    $i536 := $ne.i32($i535, 0);
    goto corral_source_split_6091;

  corral_source_split_6091:
    assume {:verifier.code 0} true;
    $i32 := 38;
    assume {:branchcond $i536} true;
    goto $bb281, $bb282;

  $bb282:
    assume {:verifier.code 0} true;
    assume !($i536 == 1);
    goto $bb280;

  $bb281:
    assume {:verifier.code 0} true;
    assume $i536 == 1;
    goto $bb14;

  $bb271:
    assume $i518 == 1;
    goto corral_source_split_6076;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    $p521 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(37, 12)), $mul.ref(8, 1));
    goto corral_source_split_6077;

  corral_source_split_6077:
    assume {:verifier.code 0} true;
    $i522 := $load.i32($M.0, $p521);
    goto corral_source_split_6078;

  corral_source_split_6078:
    assume {:verifier.code 0} true;
    $i523 := $ne.i32($i522, 0);
    goto corral_source_split_6079;

  corral_source_split_6079:
    assume {:verifier.code 0} true;
    $i32 := 37;
    assume {:branchcond $i523} true;
    goto $bb274, $bb275;

  $bb275:
    assume {:verifier.code 0} true;
    assume !($i523 == 1);
    goto $bb273;

  $bb274:
    assume {:verifier.code 0} true;
    assume $i523 == 1;
    goto $bb14;

  $bb264:
    assume $i505 == 1;
    goto corral_source_split_6064;

  corral_source_split_6064:
    assume {:verifier.code 0} true;
    $p508 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(36, 12)), $mul.ref(8, 1));
    goto corral_source_split_6065;

  corral_source_split_6065:
    assume {:verifier.code 0} true;
    $i509 := $load.i32($M.0, $p508);
    goto corral_source_split_6066;

  corral_source_split_6066:
    assume {:verifier.code 0} true;
    $i510 := $ne.i32($i509, 0);
    goto corral_source_split_6067;

  corral_source_split_6067:
    assume {:verifier.code 0} true;
    $i32 := 36;
    assume {:branchcond $i510} true;
    goto $bb267, $bb268;

  $bb268:
    assume {:verifier.code 0} true;
    assume !($i510 == 1);
    goto $bb266;

  $bb267:
    assume {:verifier.code 0} true;
    assume $i510 == 1;
    goto $bb14;

  $bb257:
    assume $i492 == 1;
    goto corral_source_split_6052;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    $p495 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(35, 12)), $mul.ref(8, 1));
    goto corral_source_split_6053;

  corral_source_split_6053:
    assume {:verifier.code 0} true;
    $i496 := $load.i32($M.0, $p495);
    goto corral_source_split_6054;

  corral_source_split_6054:
    assume {:verifier.code 0} true;
    $i497 := $ne.i32($i496, 0);
    goto corral_source_split_6055;

  corral_source_split_6055:
    assume {:verifier.code 0} true;
    $i32 := 35;
    assume {:branchcond $i497} true;
    goto $bb260, $bb261;

  $bb261:
    assume {:verifier.code 0} true;
    assume !($i497 == 1);
    goto $bb259;

  $bb260:
    assume {:verifier.code 0} true;
    assume $i497 == 1;
    goto $bb14;

  $bb250:
    assume $i479 == 1;
    goto corral_source_split_6040;

  corral_source_split_6040:
    assume {:verifier.code 0} true;
    $p482 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(34, 12)), $mul.ref(8, 1));
    goto corral_source_split_6041;

  corral_source_split_6041:
    assume {:verifier.code 0} true;
    $i483 := $load.i32($M.0, $p482);
    goto corral_source_split_6042;

  corral_source_split_6042:
    assume {:verifier.code 0} true;
    $i484 := $ne.i32($i483, 0);
    goto corral_source_split_6043;

  corral_source_split_6043:
    assume {:verifier.code 0} true;
    $i32 := 34;
    assume {:branchcond $i484} true;
    goto $bb253, $bb254;

  $bb254:
    assume {:verifier.code 0} true;
    assume !($i484 == 1);
    goto $bb252;

  $bb253:
    assume {:verifier.code 0} true;
    assume $i484 == 1;
    goto $bb14;

  $bb243:
    assume $i466 == 1;
    goto corral_source_split_6028;

  corral_source_split_6028:
    assume {:verifier.code 0} true;
    $p469 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(33, 12)), $mul.ref(8, 1));
    goto corral_source_split_6029;

  corral_source_split_6029:
    assume {:verifier.code 0} true;
    $i470 := $load.i32($M.0, $p469);
    goto corral_source_split_6030;

  corral_source_split_6030:
    assume {:verifier.code 0} true;
    $i471 := $ne.i32($i470, 0);
    goto corral_source_split_6031;

  corral_source_split_6031:
    assume {:verifier.code 0} true;
    $i32 := 33;
    assume {:branchcond $i471} true;
    goto $bb246, $bb247;

  $bb247:
    assume {:verifier.code 0} true;
    assume !($i471 == 1);
    goto $bb245;

  $bb246:
    assume {:verifier.code 0} true;
    assume $i471 == 1;
    goto $bb14;

  $bb236:
    assume $i453 == 1;
    goto corral_source_split_6016;

  corral_source_split_6016:
    assume {:verifier.code 0} true;
    $p456 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(32, 12)), $mul.ref(8, 1));
    goto corral_source_split_6017;

  corral_source_split_6017:
    assume {:verifier.code 0} true;
    $i457 := $load.i32($M.0, $p456);
    goto corral_source_split_6018;

  corral_source_split_6018:
    assume {:verifier.code 0} true;
    $i458 := $ne.i32($i457, 0);
    goto corral_source_split_6019;

  corral_source_split_6019:
    assume {:verifier.code 0} true;
    $i32 := 32;
    assume {:branchcond $i458} true;
    goto $bb239, $bb240;

  $bb240:
    assume {:verifier.code 0} true;
    assume !($i458 == 1);
    goto $bb238;

  $bb239:
    assume {:verifier.code 0} true;
    assume $i458 == 1;
    goto $bb14;

  $bb229:
    assume $i440 == 1;
    goto corral_source_split_6004;

  corral_source_split_6004:
    assume {:verifier.code 0} true;
    $p443 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(31, 12)), $mul.ref(8, 1));
    goto corral_source_split_6005;

  corral_source_split_6005:
    assume {:verifier.code 0} true;
    $i444 := $load.i32($M.0, $p443);
    goto corral_source_split_6006;

  corral_source_split_6006:
    assume {:verifier.code 0} true;
    $i445 := $ne.i32($i444, 0);
    goto corral_source_split_6007;

  corral_source_split_6007:
    assume {:verifier.code 0} true;
    $i32 := 31;
    assume {:branchcond $i445} true;
    goto $bb232, $bb233;

  $bb233:
    assume {:verifier.code 0} true;
    assume !($i445 == 1);
    goto $bb231;

  $bb232:
    assume {:verifier.code 0} true;
    assume $i445 == 1;
    goto $bb14;

  $bb222:
    assume $i427 == 1;
    goto corral_source_split_5992;

  corral_source_split_5992:
    assume {:verifier.code 0} true;
    $p430 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(30, 12)), $mul.ref(8, 1));
    goto corral_source_split_5993;

  corral_source_split_5993:
    assume {:verifier.code 0} true;
    $i431 := $load.i32($M.0, $p430);
    goto corral_source_split_5994;

  corral_source_split_5994:
    assume {:verifier.code 0} true;
    $i432 := $ne.i32($i431, 0);
    goto corral_source_split_5995;

  corral_source_split_5995:
    assume {:verifier.code 0} true;
    $i32 := 30;
    assume {:branchcond $i432} true;
    goto $bb225, $bb226;

  $bb226:
    assume {:verifier.code 0} true;
    assume !($i432 == 1);
    goto $bb224;

  $bb225:
    assume {:verifier.code 0} true;
    assume $i432 == 1;
    goto $bb14;

  $bb215:
    assume $i414 == 1;
    goto corral_source_split_5980;

  corral_source_split_5980:
    assume {:verifier.code 0} true;
    $p417 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(29, 12)), $mul.ref(8, 1));
    goto corral_source_split_5981;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    $i418 := $load.i32($M.0, $p417);
    goto corral_source_split_5982;

  corral_source_split_5982:
    assume {:verifier.code 0} true;
    $i419 := $ne.i32($i418, 0);
    goto corral_source_split_5983;

  corral_source_split_5983:
    assume {:verifier.code 0} true;
    $i32 := 29;
    assume {:branchcond $i419} true;
    goto $bb218, $bb219;

  $bb219:
    assume {:verifier.code 0} true;
    assume !($i419 == 1);
    goto $bb217;

  $bb218:
    assume {:verifier.code 0} true;
    assume $i419 == 1;
    goto $bb14;

  $bb208:
    assume $i401 == 1;
    goto corral_source_split_5968;

  corral_source_split_5968:
    assume {:verifier.code 0} true;
    $p404 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(28, 12)), $mul.ref(8, 1));
    goto corral_source_split_5969;

  corral_source_split_5969:
    assume {:verifier.code 0} true;
    $i405 := $load.i32($M.0, $p404);
    goto corral_source_split_5970;

  corral_source_split_5970:
    assume {:verifier.code 0} true;
    $i406 := $ne.i32($i405, 0);
    goto corral_source_split_5971;

  corral_source_split_5971:
    assume {:verifier.code 0} true;
    $i32 := 28;
    assume {:branchcond $i406} true;
    goto $bb211, $bb212;

  $bb212:
    assume {:verifier.code 0} true;
    assume !($i406 == 1);
    goto $bb210;

  $bb211:
    assume {:verifier.code 0} true;
    assume $i406 == 1;
    goto $bb14;

  $bb201:
    assume $i388 == 1;
    goto corral_source_split_5956;

  corral_source_split_5956:
    assume {:verifier.code 0} true;
    $p391 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(27, 12)), $mul.ref(8, 1));
    goto corral_source_split_5957;

  corral_source_split_5957:
    assume {:verifier.code 0} true;
    $i392 := $load.i32($M.0, $p391);
    goto corral_source_split_5958;

  corral_source_split_5958:
    assume {:verifier.code 0} true;
    $i393 := $ne.i32($i392, 0);
    goto corral_source_split_5959;

  corral_source_split_5959:
    assume {:verifier.code 0} true;
    $i32 := 27;
    assume {:branchcond $i393} true;
    goto $bb204, $bb205;

  $bb205:
    assume {:verifier.code 0} true;
    assume !($i393 == 1);
    goto $bb203;

  $bb204:
    assume {:verifier.code 0} true;
    assume $i393 == 1;
    goto $bb14;

  $bb194:
    assume $i375 == 1;
    goto corral_source_split_5944;

  corral_source_split_5944:
    assume {:verifier.code 0} true;
    $p378 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(26, 12)), $mul.ref(8, 1));
    goto corral_source_split_5945;

  corral_source_split_5945:
    assume {:verifier.code 0} true;
    $i379 := $load.i32($M.0, $p378);
    goto corral_source_split_5946;

  corral_source_split_5946:
    assume {:verifier.code 0} true;
    $i380 := $ne.i32($i379, 0);
    goto corral_source_split_5947;

  corral_source_split_5947:
    assume {:verifier.code 0} true;
    $i32 := 26;
    assume {:branchcond $i380} true;
    goto $bb197, $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    assume !($i380 == 1);
    goto $bb196;

  $bb197:
    assume {:verifier.code 0} true;
    assume $i380 == 1;
    goto $bb14;

  $bb187:
    assume $i362 == 1;
    goto corral_source_split_5932;

  corral_source_split_5932:
    assume {:verifier.code 0} true;
    $p365 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(25, 12)), $mul.ref(8, 1));
    goto corral_source_split_5933;

  corral_source_split_5933:
    assume {:verifier.code 0} true;
    $i366 := $load.i32($M.0, $p365);
    goto corral_source_split_5934;

  corral_source_split_5934:
    assume {:verifier.code 0} true;
    $i367 := $ne.i32($i366, 0);
    goto corral_source_split_5935;

  corral_source_split_5935:
    assume {:verifier.code 0} true;
    $i32 := 25;
    assume {:branchcond $i367} true;
    goto $bb190, $bb191;

  $bb191:
    assume {:verifier.code 0} true;
    assume !($i367 == 1);
    goto $bb189;

  $bb190:
    assume {:verifier.code 0} true;
    assume $i367 == 1;
    goto $bb14;

  $bb180:
    assume $i349 == 1;
    goto corral_source_split_5920;

  corral_source_split_5920:
    assume {:verifier.code 0} true;
    $p352 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(24, 12)), $mul.ref(8, 1));
    goto corral_source_split_5921;

  corral_source_split_5921:
    assume {:verifier.code 0} true;
    $i353 := $load.i32($M.0, $p352);
    goto corral_source_split_5922;

  corral_source_split_5922:
    assume {:verifier.code 0} true;
    $i354 := $ne.i32($i353, 0);
    goto corral_source_split_5923;

  corral_source_split_5923:
    assume {:verifier.code 0} true;
    $i32 := 24;
    assume {:branchcond $i354} true;
    goto $bb183, $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    assume !($i354 == 1);
    goto $bb182;

  $bb183:
    assume {:verifier.code 0} true;
    assume $i354 == 1;
    goto $bb14;

  $bb173:
    assume $i336 == 1;
    goto corral_source_split_5908;

  corral_source_split_5908:
    assume {:verifier.code 0} true;
    $p339 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(23, 12)), $mul.ref(8, 1));
    goto corral_source_split_5909;

  corral_source_split_5909:
    assume {:verifier.code 0} true;
    $i340 := $load.i32($M.0, $p339);
    goto corral_source_split_5910;

  corral_source_split_5910:
    assume {:verifier.code 0} true;
    $i341 := $ne.i32($i340, 0);
    goto corral_source_split_5911;

  corral_source_split_5911:
    assume {:verifier.code 0} true;
    $i32 := 23;
    assume {:branchcond $i341} true;
    goto $bb176, $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    assume !($i341 == 1);
    goto $bb175;

  $bb176:
    assume {:verifier.code 0} true;
    assume $i341 == 1;
    goto $bb14;

  $bb166:
    assume $i323 == 1;
    goto corral_source_split_5896;

  corral_source_split_5896:
    assume {:verifier.code 0} true;
    $p326 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(22, 12)), $mul.ref(8, 1));
    goto corral_source_split_5897;

  corral_source_split_5897:
    assume {:verifier.code 0} true;
    $i327 := $load.i32($M.0, $p326);
    goto corral_source_split_5898;

  corral_source_split_5898:
    assume {:verifier.code 0} true;
    $i328 := $ne.i32($i327, 0);
    goto corral_source_split_5899;

  corral_source_split_5899:
    assume {:verifier.code 0} true;
    $i32 := 22;
    assume {:branchcond $i328} true;
    goto $bb169, $bb170;

  $bb170:
    assume {:verifier.code 0} true;
    assume !($i328 == 1);
    goto $bb168;

  $bb169:
    assume {:verifier.code 0} true;
    assume $i328 == 1;
    goto $bb14;

  $bb159:
    assume $i310 == 1;
    goto corral_source_split_5884;

  corral_source_split_5884:
    assume {:verifier.code 0} true;
    $p313 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(21, 12)), $mul.ref(8, 1));
    goto corral_source_split_5885;

  corral_source_split_5885:
    assume {:verifier.code 0} true;
    $i314 := $load.i32($M.0, $p313);
    goto corral_source_split_5886;

  corral_source_split_5886:
    assume {:verifier.code 0} true;
    $i315 := $ne.i32($i314, 0);
    goto corral_source_split_5887;

  corral_source_split_5887:
    assume {:verifier.code 0} true;
    $i32 := 21;
    assume {:branchcond $i315} true;
    goto $bb162, $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    assume !($i315 == 1);
    goto $bb161;

  $bb162:
    assume {:verifier.code 0} true;
    assume $i315 == 1;
    goto $bb14;

  $bb152:
    assume $i297 == 1;
    goto corral_source_split_5872;

  corral_source_split_5872:
    assume {:verifier.code 0} true;
    $p300 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(20, 12)), $mul.ref(8, 1));
    goto corral_source_split_5873;

  corral_source_split_5873:
    assume {:verifier.code 0} true;
    $i301 := $load.i32($M.0, $p300);
    goto corral_source_split_5874;

  corral_source_split_5874:
    assume {:verifier.code 0} true;
    $i302 := $ne.i32($i301, 0);
    goto corral_source_split_5875;

  corral_source_split_5875:
    assume {:verifier.code 0} true;
    $i32 := 20;
    assume {:branchcond $i302} true;
    goto $bb155, $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    assume !($i302 == 1);
    goto $bb154;

  $bb155:
    assume {:verifier.code 0} true;
    assume $i302 == 1;
    goto $bb14;

  $bb145:
    assume $i284 == 1;
    goto corral_source_split_5860;

  corral_source_split_5860:
    assume {:verifier.code 0} true;
    $p287 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(19, 12)), $mul.ref(8, 1));
    goto corral_source_split_5861;

  corral_source_split_5861:
    assume {:verifier.code 0} true;
    $i288 := $load.i32($M.0, $p287);
    goto corral_source_split_5862;

  corral_source_split_5862:
    assume {:verifier.code 0} true;
    $i289 := $ne.i32($i288, 0);
    goto corral_source_split_5863;

  corral_source_split_5863:
    assume {:verifier.code 0} true;
    $i32 := 19;
    assume {:branchcond $i289} true;
    goto $bb148, $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    assume !($i289 == 1);
    goto $bb147;

  $bb148:
    assume {:verifier.code 0} true;
    assume $i289 == 1;
    goto $bb14;

  $bb138:
    assume $i271 == 1;
    goto corral_source_split_5848;

  corral_source_split_5848:
    assume {:verifier.code 0} true;
    $p274 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(18, 12)), $mul.ref(8, 1));
    goto corral_source_split_5849;

  corral_source_split_5849:
    assume {:verifier.code 0} true;
    $i275 := $load.i32($M.0, $p274);
    goto corral_source_split_5850;

  corral_source_split_5850:
    assume {:verifier.code 0} true;
    $i276 := $ne.i32($i275, 0);
    goto corral_source_split_5851;

  corral_source_split_5851:
    assume {:verifier.code 0} true;
    $i32 := 18;
    assume {:branchcond $i276} true;
    goto $bb141, $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    assume !($i276 == 1);
    goto $bb140;

  $bb141:
    assume {:verifier.code 0} true;
    assume $i276 == 1;
    goto $bb14;

  $bb131:
    assume $i258 == 1;
    goto corral_source_split_5836;

  corral_source_split_5836:
    assume {:verifier.code 0} true;
    $p261 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(17, 12)), $mul.ref(8, 1));
    goto corral_source_split_5837;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    $i262 := $load.i32($M.0, $p261);
    goto corral_source_split_5838;

  corral_source_split_5838:
    assume {:verifier.code 0} true;
    $i263 := $ne.i32($i262, 0);
    goto corral_source_split_5839;

  corral_source_split_5839:
    assume {:verifier.code 0} true;
    $i32 := 17;
    assume {:branchcond $i263} true;
    goto $bb134, $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    assume !($i263 == 1);
    goto $bb133;

  $bb134:
    assume {:verifier.code 0} true;
    assume $i263 == 1;
    goto $bb14;

  $bb124:
    assume $i245 == 1;
    goto corral_source_split_5824;

  corral_source_split_5824:
    assume {:verifier.code 0} true;
    $p248 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(16, 12)), $mul.ref(8, 1));
    goto corral_source_split_5825;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    $i249 := $load.i32($M.0, $p248);
    goto corral_source_split_5826;

  corral_source_split_5826:
    assume {:verifier.code 0} true;
    $i250 := $ne.i32($i249, 0);
    goto corral_source_split_5827;

  corral_source_split_5827:
    assume {:verifier.code 0} true;
    $i32 := 16;
    assume {:branchcond $i250} true;
    goto $bb127, $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    assume !($i250 == 1);
    goto $bb126;

  $bb127:
    assume {:verifier.code 0} true;
    assume $i250 == 1;
    goto $bb14;

  $bb117:
    assume $i232 == 1;
    goto corral_source_split_5812;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(15, 12)), $mul.ref(8, 1));
    goto corral_source_split_5813;

  corral_source_split_5813:
    assume {:verifier.code 0} true;
    $i236 := $load.i32($M.0, $p235);
    goto corral_source_split_5814;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    $i237 := $ne.i32($i236, 0);
    goto corral_source_split_5815;

  corral_source_split_5815:
    assume {:verifier.code 0} true;
    $i32 := 15;
    assume true;
    goto $bb120, $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    assume !($i237 == 1);
    goto $bb119;

  $bb120:
    assume {:verifier.code 0} true;
    assume $i237 == 1;
    goto $bb14;

  $bb110:
    assume $i219 == 1;
    goto corral_source_split_5800;

  corral_source_split_5800:
    assume {:verifier.code 0} true;
    $p222 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(14, 12)), $mul.ref(8, 1));
    goto corral_source_split_5801;

  corral_source_split_5801:
    assume {:verifier.code 0} true;
    $i223 := $load.i32($M.0, $p222);
    goto corral_source_split_5802;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    $i224 := $ne.i32($i223, 0);
    goto corral_source_split_5803;

  corral_source_split_5803:
    assume {:verifier.code 0} true;
    $i32 := 14;
    assume {:branchcond $i224} true;
    goto $bb113, $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    assume !($i224 == 1);
    goto $bb112;

  $bb113:
    assume {:verifier.code 0} true;
    assume $i224 == 1;
    goto $bb14;

  $bb103:
    assume $i206 == 1;
    goto corral_source_split_5788;

  corral_source_split_5788:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(13, 12)), $mul.ref(8, 1));
    goto corral_source_split_5789;

  corral_source_split_5789:
    assume {:verifier.code 0} true;
    $i210 := $load.i32($M.0, $p209);
    goto corral_source_split_5790;

  corral_source_split_5790:
    assume {:verifier.code 0} true;
    $i211 := $ne.i32($i210, 0);
    goto corral_source_split_5791;

  corral_source_split_5791:
    assume {:verifier.code 0} true;
    $i32 := 13;
    assume {:branchcond $i211} true;
    goto $bb106, $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    assume !($i211 == 1);
    goto $bb105;

  $bb106:
    assume {:verifier.code 0} true;
    assume $i211 == 1;
    goto $bb14;

  $bb96:
    assume $i193 == 1;
    goto corral_source_split_5776;

  corral_source_split_5776:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(12, 12)), $mul.ref(8, 1));
    goto corral_source_split_5777;

  corral_source_split_5777:
    assume {:verifier.code 0} true;
    $i197 := $load.i32($M.0, $p196);
    goto corral_source_split_5778;

  corral_source_split_5778:
    assume {:verifier.code 0} true;
    $i198 := $ne.i32($i197, 0);
    goto corral_source_split_5779;

  corral_source_split_5779:
    assume {:verifier.code 0} true;
    $i32 := 12;
    assume {:branchcond $i198} true;
    goto $bb99, $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    assume !($i198 == 1);
    goto $bb98;

  $bb99:
    assume {:verifier.code 0} true;
    assume $i198 == 1;
    goto $bb14;

  $bb89:
    assume $i180 == 1;
    goto corral_source_split_5764;

  corral_source_split_5764:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(11, 12)), $mul.ref(8, 1));
    goto corral_source_split_5765;

  corral_source_split_5765:
    assume {:verifier.code 0} true;
    $i184 := $load.i32($M.0, $p183);
    goto corral_source_split_5766;

  corral_source_split_5766:
    assume {:verifier.code 0} true;
    $i185 := $ne.i32($i184, 0);
    goto corral_source_split_5767;

  corral_source_split_5767:
    assume {:verifier.code 0} true;
    $i32 := 11;
    assume {:branchcond $i185} true;
    goto $bb92, $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    assume !($i185 == 1);
    goto $bb91;

  $bb92:
    assume {:verifier.code 0} true;
    assume $i185 == 1;
    goto $bb14;

  $bb82:
    assume $i167 == 1;
    goto corral_source_split_5752;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(10, 12)), $mul.ref(8, 1));
    goto corral_source_split_5753;

  corral_source_split_5753:
    assume {:verifier.code 0} true;
    $i171 := $load.i32($M.0, $p170);
    goto corral_source_split_5754;

  corral_source_split_5754:
    assume {:verifier.code 0} true;
    $i172 := $ne.i32($i171, 0);
    goto corral_source_split_5755;

  corral_source_split_5755:
    assume {:verifier.code 0} true;
    $i32 := 10;
    assume {:branchcond $i172} true;
    goto $bb85, $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    assume !($i172 == 1);
    goto $bb84;

  $bb85:
    assume {:verifier.code 0} true;
    assume $i172 == 1;
    goto $bb14;

  $bb75:
    assume $i154 == 1;
    goto corral_source_split_5740;

  corral_source_split_5740:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(9, 12)), $mul.ref(8, 1));
    goto corral_source_split_5741;

  corral_source_split_5741:
    assume {:verifier.code 0} true;
    $i158 := $load.i32($M.0, $p157);
    goto corral_source_split_5742;

  corral_source_split_5742:
    assume {:verifier.code 0} true;
    $i159 := $ne.i32($i158, 0);
    goto corral_source_split_5743;

  corral_source_split_5743:
    assume {:verifier.code 0} true;
    $i32 := 9;
    assume {:branchcond $i159} true;
    goto $bb78, $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    assume !($i159 == 1);
    goto $bb77;

  $bb78:
    assume {:verifier.code 0} true;
    assume $i159 == 1;
    goto $bb14;

  $bb68:
    assume $i141 == 1;
    goto corral_source_split_5728;

  corral_source_split_5728:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(8, 12)), $mul.ref(8, 1));
    goto corral_source_split_5729;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    $i145 := $load.i32($M.0, $p144);
    goto corral_source_split_5730;

  corral_source_split_5730:
    assume {:verifier.code 0} true;
    $i146 := $ne.i32($i145, 0);
    goto corral_source_split_5731;

  corral_source_split_5731:
    assume {:verifier.code 0} true;
    $i32 := 8;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    assume !($i146 == 1);
    goto $bb70;

  $bb71:
    assume {:verifier.code 0} true;
    assume $i146 == 1;
    goto $bb14;

  $bb61:
    assume $i128 == 1;
    goto corral_source_split_5716;

  corral_source_split_5716:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(7, 12)), $mul.ref(8, 1));
    goto corral_source_split_5717;

  corral_source_split_5717:
    assume {:verifier.code 0} true;
    $i132 := $load.i32($M.0, $p131);
    goto corral_source_split_5718;

  corral_source_split_5718:
    assume {:verifier.code 0} true;
    $i133 := $ne.i32($i132, 0);
    goto corral_source_split_5719;

  corral_source_split_5719:
    assume {:verifier.code 0} true;
    $i32 := 7;
    assume {:branchcond $i133} true;
    goto $bb64, $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    assume !($i133 == 1);
    goto $bb63;

  $bb64:
    assume {:verifier.code 0} true;
    assume $i133 == 1;
    goto $bb14;

  $bb54:
    assume $i115 == 1;
    goto corral_source_split_5704;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(6, 12)), $mul.ref(8, 1));
    goto corral_source_split_5705;

  corral_source_split_5705:
    assume {:verifier.code 0} true;
    $i119 := $load.i32($M.0, $p118);
    goto corral_source_split_5706;

  corral_source_split_5706:
    assume {:verifier.code 0} true;
    $i120 := $ne.i32($i119, 0);
    goto corral_source_split_5707;

  corral_source_split_5707:
    assume {:verifier.code 0} true;
    $i32 := 6;
    assume {:branchcond $i120} true;
    goto $bb57, $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    assume !($i120 == 1);
    goto $bb56;

  $bb57:
    assume {:verifier.code 0} true;
    assume $i120 == 1;
    goto $bb14;

  $bb47:
    assume $i102 == 1;
    goto corral_source_split_5692;

  corral_source_split_5692:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(5, 12)), $mul.ref(8, 1));
    goto corral_source_split_5693;

  corral_source_split_5693:
    assume {:verifier.code 0} true;
    $i106 := $load.i32($M.0, $p105);
    goto corral_source_split_5694;

  corral_source_split_5694:
    assume {:verifier.code 0} true;
    $i107 := $ne.i32($i106, 0);
    goto corral_source_split_5695;

  corral_source_split_5695:
    assume {:verifier.code 0} true;
    $i32 := 5;
    assume {:branchcond $i107} true;
    goto $bb50, $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    assume !($i107 == 1);
    goto $bb49;

  $bb50:
    assume {:verifier.code 0} true;
    assume $i107 == 1;
    goto $bb14;

  $bb40:
    assume $i89 == 1;
    goto corral_source_split_5680;

  corral_source_split_5680:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(4, 12)), $mul.ref(8, 1));
    goto corral_source_split_5681;

  corral_source_split_5681:
    assume {:verifier.code 0} true;
    $i93 := $load.i32($M.0, $p92);
    goto corral_source_split_5682;

  corral_source_split_5682:
    assume {:verifier.code 0} true;
    $i94 := $ne.i32($i93, 0);
    goto corral_source_split_5683;

  corral_source_split_5683:
    assume {:verifier.code 0} true;
    $i32 := 4;
    assume {:branchcond $i94} true;
    goto $bb43, $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    assume !($i94 == 1);
    goto $bb42;

  $bb43:
    assume {:verifier.code 0} true;
    assume $i94 == 1;
    goto $bb14;

  $bb33:
    assume $i76 == 1;
    goto corral_source_split_5668;

  corral_source_split_5668:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(3, 12)), $mul.ref(8, 1));
    goto corral_source_split_5669;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    $i80 := $load.i32($M.0, $p79);
    goto corral_source_split_5670;

  corral_source_split_5670:
    assume {:verifier.code 0} true;
    $i81 := $ne.i32($i80, 0);
    goto corral_source_split_5671;

  corral_source_split_5671:
    assume {:verifier.code 0} true;
    $i32 := 3;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume !($i81 == 1);
    goto $bb35;

  $bb36:
    assume {:verifier.code 0} true;
    assume $i81 == 1;
    goto $bb14;

  $bb26:
    assume $i63 == 1;
    goto corral_source_split_5656;

  corral_source_split_5656:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(2, 12)), $mul.ref(8, 1));
    goto corral_source_split_5657;

  corral_source_split_5657:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.0, $p66);
    goto corral_source_split_5658;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    $i68 := $ne.i32($i67, 0);
    goto corral_source_split_5659;

  corral_source_split_5659:
    assume {:verifier.code 0} true;
    $i32 := 2;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i68 == 1);
    goto $bb28;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i68 == 1;
    goto $bb14;

  $bb19:
    assume $i50 == 1;
    goto corral_source_split_5644;

  corral_source_split_5644:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(1, 12)), $mul.ref(8, 1));
    goto corral_source_split_5645;

  corral_source_split_5645:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p53);
    goto corral_source_split_5646;

  corral_source_split_5646:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i54, 0);
    goto corral_source_split_5647;

  corral_source_split_5647:
    assume {:verifier.code 0} true;
    $i32 := 1;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i55 == 1);
    goto $bb21;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i55 == 1;
    goto $bb14;

  $bb10:
    assume $i26 == 1;
    goto corral_source_split_5622;

  corral_source_split_5622:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_5623;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_5624;

  corral_source_split_5624:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_5625;

  corral_source_split_5625:
    assume {:verifier.code 0} true;
    $i32 := 0;
    assume true;
    goto $bb13, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb12;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i31 == 1;
    goto $bb14;

  $bb4:
    assume $i18 == 1;
    goto corral_source_split_5613;

  corral_source_split_5613:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_5602;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 842} warn_slowpath_null(.str.29, 340);
    goto corral_source_split_5603;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mem_writes8: ref;

axiom mem_writes8 == $sub.ref(0, 386503);

procedure mem_writes8($p0: ref, $i1: i32, $p2: ref, $i3: i32);
  free requires assertsPassed;



implementation mem_writes8($p0: ref, $i1: i32, $p2: ref, $i3: i32)
{
  var $p4: ref;
  var $i5: i64;
  var $p6: ref;
  var $i7: i1;
  var $i8: i1;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $i20: i1;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $p21: ref;
  var $i22: i32;
  var $p23: ref;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i27: i1;
  var $i34: i32;
  var $p35: ref;
  var $i36: i32;
  var $p37: ref;
  var $p38: ref;
  var $i39: i1;
  var $p31: ref;
  var $i32: i32;
  var $p33: ref;
  var $p40: ref;
  var $i41: i32;
  var $p42: ref;
  var $p28: ref;
  var $i29: i32;
  var $p30: ref;
  var $p24: ref;
  var $i25: i32;
  var $p26: ref;
  var $i43: i1;
  var $i44: i1;
  var $i45: i32;
  var $p46: ref;
  var $i47: i32;
  var $p48: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 844} {:cexpr "mem_writes8:arg:dst_offset"} boogie_si_record_i32($i1);
    call {:si_unique_call 845} {:cexpr "mem_writes8:arg:bytes"} boogie_si_record_i32($i3);
    goto corral_source_split_6297;

  corral_source_split_6297:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_6298;

  corral_source_split_6298:
    assume {:verifier.code 0} true;
    $i5 := $zext.i32.i64($i1);
    goto corral_source_split_6299;

  corral_source_split_6299:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p4, $mul.ref($i5, 4));
    goto corral_source_split_6300;

  corral_source_split_6300:
    assume {:verifier.code 0} true;
    $i7 := $ule.i32($i1, 4095);
    goto corral_source_split_6301;

  corral_source_split_6301:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    goto corral_source_split_6306;

  corral_source_split_6306:
    assume {:verifier.code 0} true;
    $i27 := $ugt.i32($i3, 3);
    goto corral_source_split_6307;

  corral_source_split_6307:
    assume {:verifier.code 0} true;
    $p28, $i29, $p30 := $p2, $i3, $p6;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p24, $i25, $p26 := $p28, $i29, $p30;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6323;

  corral_source_split_6323:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i25, 0);
    goto corral_source_split_6324;

  corral_source_split_6324:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i44 := $ule.i32($i1, 4095);
    goto corral_source_split_6342;

  corral_source_split_6342:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i44 == 1);
    goto corral_source_split_6349;

  corral_source_split_6349:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p24);
    goto corral_source_split_6350;

  corral_source_split_6350:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p26);
    goto corral_source_split_6351;

  corral_source_split_6351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 851} __writel($i47, $p48);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    return;

  $bb24:
    assume $i44 == 1;
    goto corral_source_split_6344;

  corral_source_split_6344:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p24);
    goto corral_source_split_6345;

  corral_source_split_6345:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p26);
    goto corral_source_split_6346;

  corral_source_split_6346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 850} __writel($i45, $p46);
    goto corral_source_split_6347;

  corral_source_split_6347:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb20:
    assume $i43 == 1;
    goto corral_source_split_6340;

  corral_source_split_6340:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb12:
    assume $i27 == 1;
    goto corral_source_split_6326;

  corral_source_split_6326:
    assume {:verifier.code 0} true;
    $p31, $i32, $p33 := $p6, $i3, $p2;
    goto $bb15;

  $bb15:
    call $i34, $p35, $i36, $p37, $p38, $i39, $p31, $i32, $p33, $p40, $i41, $p42 := mem_writes8_loop_$bb15($i34, $p35, $i36, $p37, $p38, $i39, $p31, $i32, $p33, $p40, $i41, $p42);
    goto $bb15_last;

  corral_source_split_6328:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_6330;

  corral_source_split_6330:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p31);
    goto corral_source_split_6331;

  corral_source_split_6331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 848} __writel($i34, $p35);
    goto corral_source_split_6332;

  corral_source_split_6332:
    assume {:verifier.code 0} true;
    $i36 := $sub.i32($i32, 4);
    call {:si_unique_call 849} {:cexpr "bytes"} boogie_si_record_i32($i36);
    goto corral_source_split_6333;

  corral_source_split_6333:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($p33, $mul.ref(1, 4));
    goto corral_source_split_6334;

  corral_source_split_6334:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($p31, $mul.ref(1, 4));
    goto corral_source_split_6335;

  corral_source_split_6335:
    assume {:verifier.code 0} true;
    $i39 := $ugt.i32($i36, 3);
    goto corral_source_split_6336;

  corral_source_split_6336:
    assume {:verifier.code 0} true;
    $p40, $i41, $p42 := $p37, $i36, $p38;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6338;

  corral_source_split_6338:
    assume {:verifier.code 0} true;
    $p28, $i29, $p30 := $p40, $i41, $p42;
    goto $bb14;

  $bb17:
    assume $i39 == 1;
    assume {:verifier.code 0} true;
    $p31, $i32, $p33 := $p38, $i36, $p37;
    goto $bb17_dummy;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_6303;

  corral_source_split_6303:
    assume {:verifier.code 0} true;
    $i8 := $ugt.i32($i3, 3);
    goto corral_source_split_6304;

  corral_source_split_6304:
    assume {:verifier.code 0} true;
    $p9, $i10, $p11 := $p2, $i3, $p6;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p24, $i25, $p26 := $p9, $i10, $p11;
    goto $bb11;

  $bb3:
    assume $i8 == 1;
    goto corral_source_split_6309;

  corral_source_split_6309:
    assume {:verifier.code 0} true;
    $p12, $i13, $p14 := $p6, $i3, $p2;
    goto $bb6;

  $bb6:
    call $i15, $p16, $i17, $p18, $p19, $i20, $p12, $i13, $p14, $p21, $i22, $p23 := mem_writes8_loop_$bb6($i15, $p16, $i17, $p18, $p19, $i20, $p12, $i13, $p14, $p21, $i22, $p23);
    goto $bb6_last;

  corral_source_split_6311:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_6313;

  corral_source_split_6313:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p12);
    goto corral_source_split_6314;

  corral_source_split_6314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 846} __writel($i15, $p16);
    goto corral_source_split_6315;

  corral_source_split_6315:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32($i13, 4);
    call {:si_unique_call 847} {:cexpr "bytes"} boogie_si_record_i32($i17);
    goto corral_source_split_6316;

  corral_source_split_6316:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($p14, $mul.ref(1, 4));
    goto corral_source_split_6317;

  corral_source_split_6317:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p12, $mul.ref(1, 4));
    goto corral_source_split_6318;

  corral_source_split_6318:
    assume {:verifier.code 0} true;
    $i20 := $ugt.i32($i17, 3);
    goto corral_source_split_6319;

  corral_source_split_6319:
    assume {:verifier.code 0} true;
    $p21, $i22, $p23 := $p18, $i17, $p19;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6321;

  corral_source_split_6321:
    assume {:verifier.code 0} true;
    $p9, $i10, $p11 := $p21, $i22, $p23;
    goto $bb5;

  $bb8:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $p12, $i13, $p14 := $p19, $i17, $p18;
    goto $bb8_dummy;

  $bb17_dummy:
    assume false;
    return;

  $bb15_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6328;

  $bb8_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6311;
}



const create_ptd_int: ref;

axiom create_ptd_int == $sub.ref(0, 387535);

procedure create_ptd_int($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation create_ptd_int($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6353;

  corral_source_split_6353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 852} create_ptd_atl($p0, $p1, $p2);
    goto corral_source_split_6354;

  corral_source_split_6354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 853} transform_add_int($p0, $p1, $p2);
    goto corral_source_split_6355;

  corral_source_split_6355:
    assume {:verifier.code 0} true;
    return;
}



const create_ptd_atl: ref;

axiom create_ptd_atl == $sub.ref(0, 388567);

procedure create_ptd_atl($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation create_ptd_atl($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i16;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $p28: ref;
  var $i29: i64;
  var $i30: i32;
  var $i31: i32;
  var $i32: i32;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i32;
  var $i37: i32;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $i45: i32;
  var $i46: i32;
  var $i47: i32;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $i53: i32;
  var $i54: i32;
  var $i55: i32;
  var $p56: ref;
  var $p57: ref;
  var $i58: i32;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i32;
  var $i63: i32;
  var $i64: i32;
  var $i65: i32;
  var $i66: i32;
  var $p67: ref;
  var $p68: ref;
  var $i69: i32;
  var $p70: ref;
  var $i71: i8;
  var $i72: i32;
  var $i73: i32;
  var $i74: i32;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $i79: i32;
  var $i80: i32;
  var $i81: i1;
  var $p82: ref;
  var $i83: i32;
  var $i84: i32;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $i89: i32;
  var $i90: i32;
  var $i91: i1;
  var $p92: ref;
  var $i93: i32;
  var $i94: i32;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $i101: i32;
  var $i102: i1;
  var $p103: ref;
  var $i104: i32;
  var $i105: i32;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $i112: i32;
  var $i113: i1;
  var $p114: ref;
  var $i115: i32;
  var $i116: i32;
  var $p117: ref;
  var $p118: ref;
  var $i119: i32;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $i125: i32;
  var $i126: i32;
  var $i127: i32;
  var $p128: ref;
  var $p129: ref;
  var $i130: i32;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $i140: i32;
  var $i141: i32;
  var $i142: i32;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $p146: ref;
  var $i147: i32;
  var $i148: i32;
  var $i149: i1;
  var $p150: ref;
  var $p151: ref;
  var $p152: ref;
  var $p153: ref;
  var $p154: ref;
  var $i155: i32;
  var $i156: i1;
  var $p157: ref;
  var $i158: i32;
  var $i159: i32;
  var $p160: ref;
  var $p161: ref;
  var $i162: i32;
  var $i163: i32;
  var $i164: i32;
  var $p165: ref;
  var $p166: ref;
  var $p167: ref;
  var $p168: ref;
  var $i169: i32;
  var $i170: i32;
  var $i171: i1;
  var $p172: ref;
  var $p173: ref;
  var $p174: ref;
  var $i175: i32;
  var $i176: i32;
  var $i177: i1;
  var $p178: ref;
  var $i179: i32;
  var $p180: ref;
  var $i181: i32;
  var $i182: i32;
  var $i183: i32;
  var $p184: ref;
  var $p185: ref;
  var $p186: ref;
  var $i187: i32;
  var $i188: i32;
  var $p189: ref;
  var $i190: i32;
  var $i191: i32;
  var $i192: i32;
  var $p193: ref;
  var $p194: ref;
  var $i195: i32;
  var $i196: i32;
  var $i197: i32;
  var $p198: ref;
  var $p199: ref;
  var $i200: i32;
  var $i201: i32;
  var $i202: i32;
  var $p203: ref;
  var $p204: ref;
  var $i205: i32;
  var $p206: ref;
  var $i207: i32;
  var $i208: i32;
  var $i209: i32;
  var $p210: ref;
  var $p211: ref;
  var $p212: ref;
  var $p213: ref;
  var $i214: i32;
  var $i215: i32;
  var $i216: i1;
  var $p217: ref;
  var $p218: ref;
  var $i219: i64;
  var $p220: ref;
  var $p221: ref;
  var $p222: ref;
  var $p223: ref;
  var $i224: i64;
  var $i225: i1;
  var $p226: ref;
  var $i227: i32;
  var $i228: i32;
  var $p229: ref;
  var $i230: i32;
  var $i231: i1;
  var $p232: ref;
  var $i233: i32;
  var $i234: i32;
  var $p235: ref;
  var $p236: ref;
  var $i237: i32;
  var $i238: i32;
  var $p239: ref;
  var $p240: ref;
  var $i241: i32;
  var $i242: i32;
  var $p243: ref;
  var cmdloc_dummy_var_2: [ref]i8;
  var cmdloc_dummy_var_3: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6357;

  corral_source_split_6357:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_6358;

  corral_source_split_6358:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_2 := $M.0;
    call {:si_unique_call 854} cmdloc_dummy_var_3 := $memset.i8(cmdloc_dummy_var_2, $p3, 0, 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_3;
    goto corral_source_split_6359;

  corral_source_split_6359:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_6360;

  corral_source_split_6360:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6361;

  corral_source_split_6361:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_6362;

  corral_source_split_6362:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_6363;

  corral_source_split_6363:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_6364;

  corral_source_split_6364:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_6365;

  corral_source_split_6365:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_6366;

  corral_source_split_6366:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_6367;

  corral_source_split_6367:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_6368;

  corral_source_split_6368:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_6369;

  corral_source_split_6369:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_6370;

  corral_source_split_6370:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_6371;

  corral_source_split_6371:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i15, 128);
    goto corral_source_split_6372;

  corral_source_split_6372:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 0);
    goto corral_source_split_6373;

  corral_source_split_6373:
    assume {:verifier.code 0} true;
    $i18 := $zext.i1.i32($i17);
    goto corral_source_split_6374;

  corral_source_split_6374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 855} $i19 := usb_maxpacket($p7, $i11, $i18);
    call {:si_unique_call 856} {:cexpr "tmp"} boogie_si_record_i16($i19);
    goto corral_source_split_6375;

  corral_source_split_6375:
    assume {:verifier.code 0} true;
    $i20 := $zext.i16.i32($i19);
    call {:si_unique_call 857} {:cexpr "maxpacket"} boogie_si_record_i32($i20);
    goto corral_source_split_6376;

  corral_source_split_6376:
    assume {:verifier.code 0} true;
    $i21 := $lshr.i32($i20, 11);
    goto corral_source_split_6377;

  corral_source_split_6377:
    assume {:verifier.code 0} true;
    $i22 := $and.i32($i21, 3);
    goto corral_source_split_6378;

  corral_source_split_6378:
    assume {:verifier.code 0} true;
    $i23 := $add.i32($i22, 1);
    call {:si_unique_call 858} {:cexpr "multi"} boogie_si_record_i32($i23);
    goto corral_source_split_6379;

  corral_source_split_6379:
    assume {:verifier.code 0} true;
    $i24 := $and.i32($i20, 2047);
    call {:si_unique_call 859} {:cexpr "maxpacket"} boogie_si_record_i32($i24);
    goto corral_source_split_6380;

  corral_source_split_6380:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_6381;

  corral_source_split_6381:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p25, 1);
    goto corral_source_split_6382;

  corral_source_split_6382:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_6383;

  corral_source_split_6383:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_6384;

  corral_source_split_6384:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_6385;

  corral_source_split_6385:
    assume {:verifier.code 0} true;
    $i29 := $load.i64($M.0, $p28);
    goto corral_source_split_6386;

  corral_source_split_6386:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i64.i32($i29);
    goto corral_source_split_6387;

  corral_source_split_6387:
    assume {:verifier.code 0} true;
    $i31 := $shl.i32($i30, 3);
    goto corral_source_split_6388;

  corral_source_split_6388:
    assume {:verifier.code 0} true;
    $i32 := $or.i32($i27, $i31);
    goto corral_source_split_6389;

  corral_source_split_6389:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_6390;

  corral_source_split_6390:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, $i32);
    goto corral_source_split_6391;

  corral_source_split_6391:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_6392;

  corral_source_split_6392:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_6393;

  corral_source_split_6393:
    assume {:verifier.code 0} true;
    $i36 := $shl.i32($i24, 18);
    goto corral_source_split_6394;

  corral_source_split_6394:
    assume {:verifier.code 0} true;
    $i37 := $or.i32($i35, $i36);
    goto corral_source_split_6395;

  corral_source_split_6395:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_6396;

  corral_source_split_6396:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p38, $i37);
    goto corral_source_split_6397;

  corral_source_split_6397:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_6398;

  corral_source_split_6398:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_6399;

  corral_source_split_6399:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_6400;

  corral_source_split_6400:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_6401;

  corral_source_split_6401:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p42, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_6402;

  corral_source_split_6402:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    goto corral_source_split_6403;

  corral_source_split_6403:
    assume {:verifier.code 0} true;
    $i45 := $lshr.i32($i44, 15);
    goto corral_source_split_6404;

  corral_source_split_6404:
    assume {:verifier.code 0} true;
    $i46 := $shl.i32($i45, 31);
    goto corral_source_split_6405;

  corral_source_split_6405:
    assume {:verifier.code 0} true;
    $i47 := $or.i32($i40, $i46);
    goto corral_source_split_6406;

  corral_source_split_6406:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_6407;

  corral_source_split_6407:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p48, $i47);
    goto corral_source_split_6408;

  corral_source_split_6408:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_6409;

  corral_source_split_6409:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_6410;

  corral_source_split_6410:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p50, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_6411;

  corral_source_split_6411:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.0, $p51);
    goto corral_source_split_6412;

  corral_source_split_6412:
    assume {:verifier.code 0} true;
    $i53 := $lshr.i32($i52, 15);
    goto corral_source_split_6413;

  corral_source_split_6413:
    assume {:verifier.code 0} true;
    $i54 := $and.i32($i53, 15);
    goto corral_source_split_6414;

  corral_source_split_6414:
    assume {:verifier.code 0} true;
    $i55 := $lshr.i32($i54, 1);
    goto corral_source_split_6415;

  corral_source_split_6415:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_6416;

  corral_source_split_6416:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p56, $i55);
    goto corral_source_split_6417;

  corral_source_split_6417:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_6418;

  corral_source_split_6418:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.0, $p57);
    goto corral_source_split_6419;

  corral_source_split_6419:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_6420;

  corral_source_split_6420:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_6421;

  corral_source_split_6421:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p60, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_6422;

  corral_source_split_6422:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.0, $p61);
    goto corral_source_split_6423;

  corral_source_split_6423:
    assume {:verifier.code 0} true;
    $i63 := $lshr.i32($i62, 8);
    goto corral_source_split_6424;

  corral_source_split_6424:
    assume {:verifier.code 0} true;
    $i64 := $and.i32($i63, 127);
    goto corral_source_split_6425;

  corral_source_split_6425:
    assume {:verifier.code 0} true;
    $i65 := $shl.i32($i64, 3);
    goto corral_source_split_6426;

  corral_source_split_6426:
    assume {:verifier.code 0} true;
    $i66 := $or.i32($i58, $i65);
    goto corral_source_split_6427;

  corral_source_split_6427:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_6428;

  corral_source_split_6428:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p67, $i66);
    goto corral_source_split_6429;

  corral_source_split_6429:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_6430;

  corral_source_split_6430:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.0, $p68);
    goto corral_source_split_6431;

  corral_source_split_6431:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_6432;

  corral_source_split_6432:
    assume {:verifier.code 0} true;
    $i71 := $load.i8($M.0, $p70);
    goto corral_source_split_6433;

  corral_source_split_6433:
    assume {:verifier.code 0} true;
    $i72 := $zext.i8.i32($i71);
    goto corral_source_split_6434;

  corral_source_split_6434:
    assume {:verifier.code 0} true;
    $i73 := $shl.i32($i72, 10);
    goto corral_source_split_6435;

  corral_source_split_6435:
    assume {:verifier.code 0} true;
    $i74 := $or.i32($i69, $i73);
    goto corral_source_split_6436;

  corral_source_split_6436:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_6437;

  corral_source_split_6437:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p75, $i74);
    goto corral_source_split_6438;

  corral_source_split_6438:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_6439;

  corral_source_split_6439:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.0, $p76);
    goto corral_source_split_6440;

  corral_source_split_6440:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p77, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_6441;

  corral_source_split_6441:
    assume {:verifier.code 0} true;
    $i79 := $load.i32($M.0, $p78);
    goto corral_source_split_6442;

  corral_source_split_6442:
    assume {:verifier.code 0} true;
    $i80 := $lshr.i32($i79, 30);
    goto corral_source_split_6443;

  corral_source_split_6443:
    assume {:verifier.code 0} true;
    $i81 := $eq.i32($i80, 3);
    goto corral_source_split_6444;

  corral_source_split_6444:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i81 == 1);
    goto corral_source_split_6453;

  corral_source_split_6453:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_6454;

  corral_source_split_6454:
    assume {:verifier.code 0} true;
    $p87 := $load.ref($M.0, $p86);
    goto corral_source_split_6455;

  corral_source_split_6455:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p87, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_6456;

  corral_source_split_6456:
    assume {:verifier.code 0} true;
    $i89 := $load.i32($M.0, $p88);
    goto corral_source_split_6457;

  corral_source_split_6457:
    assume {:verifier.code 0} true;
    $i90 := $lshr.i32($i89, 30);
    goto corral_source_split_6458;

  corral_source_split_6458:
    assume {:verifier.code 0} true;
    $i91 := $eq.i32($i90, 1);
    goto corral_source_split_6459;

  corral_source_split_6459:
    assume {:verifier.code 0} true;
    assume {:branchcond $i91} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_6461;

  corral_source_split_6461:
    assume {:verifier.code 0} true;
    $p97 := $load.ref($M.0, $p96);
    goto corral_source_split_6462;

  corral_source_split_6462:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p97, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_6463;

  corral_source_split_6463:
    assume {:verifier.code 0} true;
    $p99 := $load.ref($M.0, $p98);
    goto corral_source_split_6464;

  corral_source_split_6464:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p99, $mul.ref(0, 2040)), $mul.ref(28, 1));
    goto corral_source_split_6465;

  corral_source_split_6465:
    assume {:verifier.code 0} true;
    $i101 := $load.i32($M.0, $p100);
    goto corral_source_split_6466;

  corral_source_split_6466:
    assume {:verifier.code 0} true;
    $i102 := $ne.i32($i101, 3);
    goto corral_source_split_6467;

  corral_source_split_6467:
    assume {:verifier.code 0} true;
    assume {:branchcond $i102} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i102 == 1);
    goto corral_source_split_6490;

  corral_source_split_6490:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_6491;

  corral_source_split_6491:
    assume {:verifier.code 0} true;
    $i162 := $load.i32($M.0, $p161);
    goto corral_source_split_6492;

  corral_source_split_6492:
    assume {:verifier.code 0} true;
    $i163 := $shl.i32($i23, 29);
    goto corral_source_split_6493;

  corral_source_split_6493:
    assume {:verifier.code 0} true;
    $i164 := $or.i32($i162, $i163);
    goto corral_source_split_6494;

  corral_source_split_6494:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_6495;

  corral_source_split_6495:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p165, $i164);
    goto corral_source_split_6496;

  corral_source_split_6496:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_6497;

  corral_source_split_6497:
    assume {:verifier.code 0} true;
    $p167 := $load.ref($M.0, $p166);
    goto corral_source_split_6498;

  corral_source_split_6498:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p167, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_6499;

  corral_source_split_6499:
    assume {:verifier.code 0} true;
    $i169 := $load.i32($M.0, $p168);
    goto corral_source_split_6500;

  corral_source_split_6500:
    assume {:verifier.code 0} true;
    $i170 := $lshr.i32($i169, 30);
    goto corral_source_split_6501;

  corral_source_split_6501:
    assume {:verifier.code 0} true;
    $i171 := $eq.i32($i170, 2);
    goto corral_source_split_6502;

  corral_source_split_6502:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb21;

  $bb21:
    assume !($i171 == 1);
    goto corral_source_split_6609;

  corral_source_split_6609:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_6610;

  corral_source_split_6610:
    assume {:verifier.code 0} true;
    $p173 := $load.ref($M.0, $p172);
    goto corral_source_split_6611;

  corral_source_split_6611:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($p173, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_6612;

  corral_source_split_6612:
    assume {:verifier.code 0} true;
    $i175 := $load.i32($M.0, $p174);
    goto corral_source_split_6613;

  corral_source_split_6613:
    assume {:verifier.code 0} true;
    $i176 := $lshr.i32($i175, 30);
    goto corral_source_split_6614;

  corral_source_split_6614:
    assume {:verifier.code 0} true;
    $i177 := $eq.i32($i176, 3);
    goto corral_source_split_6615;

  corral_source_split_6615:
    assume {:verifier.code 0} true;
    assume {:branchcond $i177} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_6562;

  corral_source_split_6562:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p185, 0);
    goto corral_source_split_6563;

  corral_source_split_6563:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_6564;

  corral_source_split_6564:
    assume {:verifier.code 0} true;
    $i187 := $load.i32($M.0, $p186);
    goto corral_source_split_6565;

  corral_source_split_6565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 860} $i188 := base_to_chip($i187);
    call {:si_unique_call 861} {:cexpr "tmp___0"} boogie_si_record_i32($i188);
    goto corral_source_split_6566;

  corral_source_split_6566:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_6567;

  corral_source_split_6567:
    assume {:verifier.code 0} true;
    $i190 := $load.i32($M.0, $p189);
    goto corral_source_split_6568;

  corral_source_split_6568:
    assume {:verifier.code 0} true;
    $i191 := $shl.i32($i188, 8);
    goto corral_source_split_6569;

  corral_source_split_6569:
    assume {:verifier.code 0} true;
    $i192 := $or.i32($i190, $i191);
    goto corral_source_split_6570;

  corral_source_split_6570:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_6571;

  corral_source_split_6571:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p193, $i192);
    goto corral_source_split_6572;

  corral_source_split_6572:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_6573;

  corral_source_split_6573:
    assume {:verifier.code 0} true;
    $i195 := $load.i32($M.0, $p194);
    goto corral_source_split_6574;

  corral_source_split_6574:
    assume {:verifier.code 0} true;
    $i196 := $shl.i32(0, 25);
    goto corral_source_split_6575;

  corral_source_split_6575:
    assume {:verifier.code 0} true;
    $i197 := $or.i32($i195, $i196);
    goto corral_source_split_6576;

  corral_source_split_6576:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_6577;

  corral_source_split_6577:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p198, $i197);
    goto corral_source_split_6578;

  corral_source_split_6578:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_6579;

  corral_source_split_6579:
    assume {:verifier.code 0} true;
    $i200 := $load.i32($M.0, $p199);
    goto corral_source_split_6580;

  corral_source_split_6580:
    assume {:verifier.code 0} true;
    $i201 := $shl.i32(0, 19);
    goto corral_source_split_6581;

  corral_source_split_6581:
    assume {:verifier.code 0} true;
    $i202 := $or.i32($i200, $i201);
    goto corral_source_split_6582;

  corral_source_split_6582:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_6583;

  corral_source_split_6583:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p203, $i202);
    goto corral_source_split_6584;

  corral_source_split_6584:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_6585;

  corral_source_split_6585:
    assume {:verifier.code 0} true;
    $i205 := $load.i32($M.0, $p204);
    goto corral_source_split_6586;

  corral_source_split_6586:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_6587;

  corral_source_split_6587:
    assume {:verifier.code 0} true;
    $i207 := $load.i32($M.0, $p206);
    goto corral_source_split_6588;

  corral_source_split_6588:
    assume {:verifier.code 0} true;
    $i208 := $shl.i32($i207, 25);
    goto corral_source_split_6589;

  corral_source_split_6589:
    assume {:verifier.code 0} true;
    $i209 := $or.i32($i205, $i208);
    goto corral_source_split_6590;

  corral_source_split_6590:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_6591;

  corral_source_split_6591:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p210, $i209);
    goto corral_source_split_6592;

  corral_source_split_6592:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_6593;

  corral_source_split_6593:
    assume {:verifier.code 0} true;
    $p212 := $load.ref($M.0, $p211);
    goto corral_source_split_6594;

  corral_source_split_6594:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($p212, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_6595;

  corral_source_split_6595:
    assume {:verifier.code 0} true;
    $i214 := $load.i32($M.0, $p213);
    goto corral_source_split_6596;

  corral_source_split_6596:
    assume {:verifier.code 0} true;
    $i215 := $lshr.i32($i214, 30);
    goto corral_source_split_6597;

  corral_source_split_6597:
    assume {:verifier.code 0} true;
    $i216 := $eq.i32($i215, 2);
    goto corral_source_split_6598;

  corral_source_split_6598:
    assume {:verifier.code 0} true;
    assume {:branchcond $i216} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i216 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p236 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_6646;

  corral_source_split_6646:
    assume {:verifier.code 0} true;
    $i237 := $load.i32($M.0, $p236);
    goto corral_source_split_6647;

  corral_source_split_6647:
    assume {:verifier.code 0} true;
    $i238 := $or.i32($i237, $sub.i32(0, 2147483648));
    goto corral_source_split_6648;

  corral_source_split_6648:
    assume {:verifier.code 0} true;
    $p239 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_6649;

  corral_source_split_6649:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p239, $i238);
    goto corral_source_split_6650;

  corral_source_split_6650:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_6651;

  corral_source_split_6651:
    assume {:verifier.code 0} true;
    $i241 := $load.i32($M.0, $p240);
    goto corral_source_split_6652;

  corral_source_split_6652:
    assume {:verifier.code 0} true;
    $i242 := $or.i32($i241, 16777216);
    goto corral_source_split_6653;

  corral_source_split_6653:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_6654;

  corral_source_split_6654:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p243, $i242);
    goto corral_source_split_6655;

  corral_source_split_6655:
    assume {:verifier.code 0} true;
    return;

  $bb25:
    assume $i216 == 1;
    goto corral_source_split_6617;

  corral_source_split_6617:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_6618;

  corral_source_split_6618:
    assume {:verifier.code 0} true;
    $p218 := $load.ref($M.0, $p217);
    goto corral_source_split_6619;

  corral_source_split_6619:
    assume {:verifier.code 0} true;
    $i219 := $p2i.ref.i64($p218);
    goto corral_source_split_6620;

  corral_source_split_6620:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_6621;

  corral_source_split_6621:
    assume {:verifier.code 0} true;
    $p221 := $load.ref($M.0, $p220);
    goto corral_source_split_6622;

  corral_source_split_6622:
    assume {:verifier.code 0} true;
    $p222 := $add.ref($add.ref($p221, $mul.ref(0, 192)), $mul.ref(144, 1));
    goto corral_source_split_6623;

  corral_source_split_6623:
    assume {:verifier.code 0} true;
    $p223 := $load.ref($M.0, $p222);
    goto corral_source_split_6624;

  corral_source_split_6624:
    assume {:verifier.code 0} true;
    $i224 := $p2i.ref.i64($p223);
    goto corral_source_split_6625;

  corral_source_split_6625:
    assume {:verifier.code 0} true;
    $i225 := $eq.i64($i219, $i224);
    goto corral_source_split_6626;

  corral_source_split_6626:
    assume {:verifier.code 0} true;
    assume {:branchcond $i225} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i225 == 1);
    goto corral_source_split_6635;

  corral_source_split_6635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 862} $i230 := last_qtd_of_urb($p1, $p0);
    call {:si_unique_call 863} {:cexpr "tmp___1"} boogie_si_record_i32($i230);
    goto corral_source_split_6636;

  corral_source_split_6636:
    assume {:verifier.code 0} true;
    $i231 := $ne.i32($i230, 0);
    goto corral_source_split_6637;

  corral_source_split_6637:
    assume {:verifier.code 0} true;
    assume {:branchcond $i231} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i231 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb30:
    assume $i231 == 1;
    goto corral_source_split_6639;

  corral_source_split_6639:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_6640;

  corral_source_split_6640:
    assume {:verifier.code 0} true;
    $i233 := $load.i32($M.0, $p232);
    goto corral_source_split_6641;

  corral_source_split_6641:
    assume {:verifier.code 0} true;
    $i234 := $or.i32($i233, 33554432);
    goto corral_source_split_6642;

  corral_source_split_6642:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_6643;

  corral_source_split_6643:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p235, $i234);
    goto corral_source_split_6644;

  corral_source_split_6644:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb27:
    assume $i225 == 1;
    goto corral_source_split_6628;

  corral_source_split_6628:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_6629;

  corral_source_split_6629:
    assume {:verifier.code 0} true;
    $i227 := $load.i32($M.0, $p226);
    goto corral_source_split_6630;

  corral_source_split_6630:
    assume {:verifier.code 0} true;
    $i228 := $and.i32($i227, $sub.i32(0, 33554433));
    goto corral_source_split_6631;

  corral_source_split_6631:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_6632;

  corral_source_split_6632:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p229, $i228);
    goto corral_source_split_6633;

  corral_source_split_6633:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i177 == 1;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_6600;

  corral_source_split_6600:
    assume {:verifier.code 0} true;
    $i179 := $load.i32($M.0, $p178);
    goto corral_source_split_6601;

  corral_source_split_6601:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(36, 1));
    goto corral_source_split_6602;

  corral_source_split_6602:
    assume {:verifier.code 0} true;
    $i181 := $load.i32($M.0, $p180);
    goto corral_source_split_6603;

  corral_source_split_6603:
    assume {:verifier.code 0} true;
    $i182 := $shl.i32($i181, 26);
    goto corral_source_split_6604;

  corral_source_split_6604:
    assume {:verifier.code 0} true;
    $i183 := $or.i32($i179, $i182);
    goto corral_source_split_6605;

  corral_source_split_6605:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_6606;

  corral_source_split_6606:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p184, $i183);
    goto corral_source_split_6607;

  corral_source_split_6607:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i171 == 1;
    goto $bb20;

  $bb7:
    assume $i102 == 1;
    goto corral_source_split_6476;

  corral_source_split_6476:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_6477;

  corral_source_split_6477:
    assume {:verifier.code 0} true;
    $i104 := $load.i32($M.0, $p103);
    goto corral_source_split_6478;

  corral_source_split_6478:
    assume {:verifier.code 0} true;
    $i105 := $or.i32($i104, 16384);
    goto corral_source_split_6479;

  corral_source_split_6479:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_6480;

  corral_source_split_6480:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p106, $i105);
    goto corral_source_split_6481;

  corral_source_split_6481:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_6482;

  corral_source_split_6482:
    assume {:verifier.code 0} true;
    $p108 := $load.ref($M.0, $p107);
    goto corral_source_split_6483;

  corral_source_split_6483:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p108, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_6484;

  corral_source_split_6484:
    assume {:verifier.code 0} true;
    $p110 := $load.ref($M.0, $p109);
    goto corral_source_split_6485;

  corral_source_split_6485:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p110, $mul.ref(0, 2040)), $mul.ref(28, 1));
    goto corral_source_split_6486;

  corral_source_split_6486:
    assume {:verifier.code 0} true;
    $i112 := $load.i32($M.0, $p111);
    goto corral_source_split_6487;

  corral_source_split_6487:
    assume {:verifier.code 0} true;
    $i113 := $eq.i32($i112, 1);
    goto corral_source_split_6488;

  corral_source_split_6488:
    assume {:verifier.code 0} true;
    assume {:branchcond $i113} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_6511;

  corral_source_split_6511:
    assume {:verifier.code 0} true;
    $i119 := $load.i32($M.0, $p118);
    goto corral_source_split_6512;

  corral_source_split_6512:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_6513;

  corral_source_split_6513:
    assume {:verifier.code 0} true;
    $p121 := $load.ref($M.0, $p120);
    goto corral_source_split_6514;

  corral_source_split_6514:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p121, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_6515;

  corral_source_split_6515:
    assume {:verifier.code 0} true;
    $p123 := $load.ref($M.0, $p122);
    goto corral_source_split_6516;

  corral_source_split_6516:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p123, $mul.ref(0, 2040)), $mul.ref(40, 1));
    goto corral_source_split_6517;

  corral_source_split_6517:
    assume {:verifier.code 0} true;
    $i125 := $load.i32($M.0, $p124);
    goto corral_source_split_6518;

  corral_source_split_6518:
    assume {:verifier.code 0} true;
    $i126 := $shl.i32($i125, 18);
    goto corral_source_split_6519;

  corral_source_split_6519:
    assume {:verifier.code 0} true;
    $i127 := $or.i32($i119, $i126);
    goto corral_source_split_6520;

  corral_source_split_6520:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_6521;

  corral_source_split_6521:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p128, $i127);
    goto corral_source_split_6522;

  corral_source_split_6522:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_6523;

  corral_source_split_6523:
    assume {:verifier.code 0} true;
    $i130 := $load.i32($M.0, $p129);
    goto corral_source_split_6524;

  corral_source_split_6524:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_6525;

  corral_source_split_6525:
    assume {:verifier.code 0} true;
    $p132 := $load.ref($M.0, $p131);
    goto corral_source_split_6526;

  corral_source_split_6526:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p132, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_6527;

  corral_source_split_6527:
    assume {:verifier.code 0} true;
    $p134 := $load.ref($M.0, $p133);
    goto corral_source_split_6528;

  corral_source_split_6528:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p134, $mul.ref(0, 2040)), $mul.ref(32, 1));
    goto corral_source_split_6529;

  corral_source_split_6529:
    assume {:verifier.code 0} true;
    $p136 := $load.ref($M.0, $p135);
    goto corral_source_split_6530;

  corral_source_split_6530:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p136, $mul.ref(0, 192)), $mul.ref(0, 1));
    goto corral_source_split_6531;

  corral_source_split_6531:
    assume {:verifier.code 0} true;
    $p138 := $load.ref($M.0, $p137);
    goto corral_source_split_6532;

  corral_source_split_6532:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p138, $mul.ref(0, 2040)), $mul.ref(0, 1));
    goto corral_source_split_6533;

  corral_source_split_6533:
    assume {:verifier.code 0} true;
    $i140 := $load.i32($M.0, $p139);
    goto corral_source_split_6534;

  corral_source_split_6534:
    assume {:verifier.code 0} true;
    $i141 := $shl.i32($i140, 25);
    goto corral_source_split_6535;

  corral_source_split_6535:
    assume {:verifier.code 0} true;
    $i142 := $or.i32($i130, $i141);
    goto corral_source_split_6536;

  corral_source_split_6536:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_6537;

  corral_source_split_6537:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p143, $i142);
    goto corral_source_split_6538;

  corral_source_split_6538:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_6539;

  corral_source_split_6539:
    assume {:verifier.code 0} true;
    $p145 := $load.ref($M.0, $p144);
    goto corral_source_split_6540;

  corral_source_split_6540:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p145, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_6541;

  corral_source_split_6541:
    assume {:verifier.code 0} true;
    $i147 := $load.i32($M.0, $p146);
    goto corral_source_split_6542;

  corral_source_split_6542:
    assume {:verifier.code 0} true;
    $i148 := $lshr.i32($i147, 30);
    goto corral_source_split_6543;

  corral_source_split_6543:
    assume {:verifier.code 0} true;
    $i149 := $eq.i32($i148, 1);
    goto corral_source_split_6544;

  corral_source_split_6544:
    assume {:verifier.code 0} true;
    assume {:branchcond $i149} true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i149 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb12:
    assume $i149 == 1;
    goto corral_source_split_6546;

  corral_source_split_6546:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_6547;

  corral_source_split_6547:
    assume {:verifier.code 0} true;
    $p151 := $load.ref($M.0, $p150);
    goto corral_source_split_6548;

  corral_source_split_6548:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p151, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_6549;

  corral_source_split_6549:
    assume {:verifier.code 0} true;
    $p153 := $load.ref($M.0, $p152);
    goto corral_source_split_6550;

  corral_source_split_6550:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p153, $mul.ref(0, 2040)), $mul.ref(28, 1));
    goto corral_source_split_6551;

  corral_source_split_6551:
    assume {:verifier.code 0} true;
    $i155 := $load.i32($M.0, $p154);
    goto corral_source_split_6552;

  corral_source_split_6552:
    assume {:verifier.code 0} true;
    $i156 := $eq.i32($i155, 1);
    goto corral_source_split_6553;

  corral_source_split_6553:
    assume {:verifier.code 0} true;
    assume {:branchcond $i156} true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i156 == 1);
    goto $bb14;

  $bb15:
    assume $i156 == 1;
    goto corral_source_split_6555;

  corral_source_split_6555:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_6556;

  corral_source_split_6556:
    assume {:verifier.code 0} true;
    $i158 := $load.i32($M.0, $p157);
    goto corral_source_split_6557;

  corral_source_split_6557:
    assume {:verifier.code 0} true;
    $i159 := $or.i32($i158, 131072);
    goto corral_source_split_6558;

  corral_source_split_6558:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_6559;

  corral_source_split_6559:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p160, $i159);
    goto corral_source_split_6560;

  corral_source_split_6560:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb9:
    assume $i113 == 1;
    goto corral_source_split_6504;

  corral_source_split_6504:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_6505;

  corral_source_split_6505:
    assume {:verifier.code 0} true;
    $i115 := $load.i32($M.0, $p114);
    goto corral_source_split_6506;

  corral_source_split_6506:
    assume {:verifier.code 0} true;
    $i116 := $or.i32($i115, 131072);
    goto corral_source_split_6507;

  corral_source_split_6507:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_6508;

  corral_source_split_6508:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p117, $i116);
    goto corral_source_split_6509;

  corral_source_split_6509:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb4:
    assume $i91 == 1;
    goto corral_source_split_6469;

  corral_source_split_6469:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_6470;

  corral_source_split_6470:
    assume {:verifier.code 0} true;
    $i93 := $load.i32($M.0, $p92);
    goto corral_source_split_6471;

  corral_source_split_6471:
    assume {:verifier.code 0} true;
    $i94 := $or.i32($i93, 12288);
    goto corral_source_split_6472;

  corral_source_split_6472:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_6473;

  corral_source_split_6473:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p95, $i94);
    goto corral_source_split_6474;

  corral_source_split_6474:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i81 == 1;
    goto corral_source_split_6446;

  corral_source_split_6446:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_6447;

  corral_source_split_6447:
    assume {:verifier.code 0} true;
    $i83 := $load.i32($M.0, $p82);
    goto corral_source_split_6448;

  corral_source_split_6448:
    assume {:verifier.code 0} true;
    $i84 := $or.i32($i83, 8192);
    goto corral_source_split_6449;

  corral_source_split_6449:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_6450;

  corral_source_split_6450:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p85, $i84);
    goto corral_source_split_6451;

  corral_source_split_6451:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const start_bus_transfer: ref;

axiom start_bus_transfer == $sub.ref(0, 389599);

procedure start_bus_transfer($p0: ref, $i1: i32, $i2: i32, $p3: ref, $p4: ref, $p5: ref, $p6: ref);
  free requires assertsPassed;
  modifies $M.36, $M.0, $M.1, $M.32, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.30, $M.38, $M.40, $M.23, $M.22, $M.25, $M.24, $M.27, $M.26, $M.29, $M.28, $CurrAddr, $M.2, $M.4, $M.6, $M.8, $M.3, $M.5, $M.7, $M.9, assertsPassed;



implementation start_bus_transfer($p0: ref, $i1: i32, $i2: i32, $p3: ref, $p4: ref, $p5: ref, $p6: ref)
{
  var $p7: ref;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i64;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $i24: i1;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i64;
  var $i32: i64;
  var $i33: i1;
  var $i34: i1;
  var $i35: i32;
  var $i36: i64;
  var $i38: i64;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $i43: i1;
  var $i44: i32;
  var $i45: i1;
  var $i46: i32;
  var $i47: i64;
  var $i48: i64;
  var $i49: i1;
  var $i50: i1;
  var $i51: i32;
  var $i52: i64;
  var $i54: i64;
  var $p56: ref;
  var $p57: ref;
  var $i58: i64;
  var $i59: i1;
  var $i60: i32;
  var $i61: i1;
  var $i62: i32;
  var $i63: i64;
  var $i64: i64;
  var $i65: i1;
  var $i66: i1;
  var $i67: i32;
  var $i68: i64;
  var $p70: ref;
  var $i71: i32;
  var $i72: i1;
  var $i73: i32;
  var $i74: i1;
  var $i75: i32;
  var $i76: i64;
  var $i77: i64;
  var $i78: i1;
  var $i79: i1;
  var $i80: i32;
  var $i81: i64;
  var $i83: i1;
  var $p84: ref;
  var $p85: ref;
  var $i86: i32;
  var $p87: ref;
  var $i88: i32;
  var $i89: i32;
  var $p90: ref;
  var $p91: ref;
  var $i92: i32;
  var $i93: i32;
  var $i94: i32;
  var $i95: i32;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $i99: i32;
  var $p100: ref;
  var $i101: i32;
  var $i102: i32;
  var $p103: ref;
  var $p104: ref;
  var $i105: i32;
  var $i106: i32;
  var $i107: i32;
  var $i108: i32;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $i112: i64;
  var $i113: i64;
  var $p115: ref;
  var $i116: i64;
  var $p118: ref;
  var $i119: i64;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $i124: i1;
  var $p125: ref;
  var $p126: ref;
  var $i127: i32;
  var $p128: ref;
  var $i129: i32;
  var $i130: i32;
  var $i131: i32;
  var $i132: i32;
  var $p133: ref;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $i137: i32;
  var $p138: ref;
  var $i139: i32;
  var $i140: i32;
  var $i141: i32;
  var $i142: i32;
  var $p143: ref;
  var $p144: ref;
  var vslice_dummy_var_56: i64;
  var vslice_dummy_var_57: i64;
  var vslice_dummy_var_58: i64;
  var vslice_dummy_var_59: i64;
  var vslice_dummy_var_60: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 864} {:cexpr "start_bus_transfer:arg:ptd_offset"} boogie_si_record_i32($i1);
    call {:si_unique_call 865} {:cexpr "start_bus_transfer:arg:slot"} boogie_si_record_i32($i2);
    goto corral_source_split_6657;

  corral_source_split_6657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 866} $p7 := hcd_to_priv($p0);
    goto corral_source_split_6658;

  corral_source_split_6658:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i2, 0);
    goto corral_source_split_6659;

  corral_source_split_6659:
    assume {:verifier.code 0} true;
    $i9 := 1;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i8 == 1);
    goto corral_source_split_6669;

  corral_source_split_6669:
    assume {:verifier.code 0} true;
    $i10 := $sgt.i32($i2, 31);
    goto corral_source_split_6670;

  corral_source_split_6670:
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_6661;

  corral_source_split_6661:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i9);
    call {:si_unique_call 867} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i11);
    goto corral_source_split_6662;

  corral_source_split_6662:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_6663;

  corral_source_split_6663:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i12);
    goto corral_source_split_6664;

  corral_source_split_6664:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_6665;

  corral_source_split_6665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 868} $i15 := ldv__builtin_expect($i14, 0);
    call {:si_unique_call 869} {:cexpr "tmp___0"} boogie_si_record_i64($i15);
    goto corral_source_split_6666;

  corral_source_split_6666:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_6667;

  corral_source_split_6667:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i11, 0);
    goto corral_source_split_6675;

  corral_source_split_6675:
    assume {:verifier.code 0} true;
    $i18 := $zext.i1.i32($i17);
    goto corral_source_split_6676;

  corral_source_split_6676:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i18);
    goto corral_source_split_6677;

  corral_source_split_6677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 871} vslice_dummy_var_56 := ldv__builtin_expect($i19, 0);
    goto corral_source_split_6678;

  corral_source_split_6678:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_6679;

  corral_source_split_6679:
    assume {:verifier.code 0} true;
    $i22 := $load.i64($M.0, $p21);
    goto corral_source_split_6680;

  corral_source_split_6680:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_6681;

  corral_source_split_6681:
    assume {:verifier.code 0} true;
    $i24 := 0;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_6687;

  corral_source_split_6687:
    assume {:verifier.code 0} true;
    $i28 := $zext.i1.i32($i24);
    call {:si_unique_call 872} {:cexpr "__ret_warn_on___0"} boogie_si_record_i32($i28);
    goto corral_source_split_6688;

  corral_source_split_6688:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_6689;

  corral_source_split_6689:
    assume {:verifier.code 0} true;
    $i30 := $zext.i1.i32($i29);
    goto corral_source_split_6690;

  corral_source_split_6690:
    assume {:verifier.code 0} true;
    $i31 := $sext.i32.i64($i30);
    goto corral_source_split_6691;

  corral_source_split_6691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 873} $i32 := ldv__builtin_expect($i31, 0);
    call {:si_unique_call 874} {:cexpr "tmp___1"} boogie_si_record_i64($i32);
    goto corral_source_split_6692;

  corral_source_split_6692:
    assume {:verifier.code 0} true;
    $i33 := $ne.i64($i32, 0);
    goto corral_source_split_6693;

  corral_source_split_6693:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i28, 0);
    goto corral_source_split_6698;

  corral_source_split_6698:
    assume {:verifier.code 0} true;
    $i35 := $zext.i1.i32($i34);
    goto corral_source_split_6699;

  corral_source_split_6699:
    assume {:verifier.code 0} true;
    $i36 := $sext.i32.i64($i35);
    goto corral_source_split_6700;

  corral_source_split_6700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 876} vslice_dummy_var_57 := ldv__builtin_expect($i36, 0);
    goto corral_source_split_6701;

  corral_source_split_6701:
    assume {:verifier.code 0} true;
    $i38 := $sext.i32.i64($i2);
    goto corral_source_split_6702;

  corral_source_split_6702:
    assume {:verifier.code 0} true;
    goto corral_source_split_6703;

  corral_source_split_6703:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p3, $mul.ref($i38, 24)), $mul.ref(8, 1));
    goto corral_source_split_6704;

  corral_source_split_6704:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_6705;

  corral_source_split_6705:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p41);
    goto corral_source_split_6706;

  corral_source_split_6706:
    assume {:verifier.code 0} true;
    $i43 := $ne.i64($i42, 0);
    goto corral_source_split_6707;

  corral_source_split_6707:
    assume {:verifier.code 0} true;
    $i44 := $zext.i1.i32($i43);
    call {:si_unique_call 877} {:cexpr "__ret_warn_on___1"} boogie_si_record_i32($i44);
    goto corral_source_split_6708;

  corral_source_split_6708:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 0);
    goto corral_source_split_6709;

  corral_source_split_6709:
    assume {:verifier.code 0} true;
    $i46 := $zext.i1.i32($i45);
    goto corral_source_split_6710;

  corral_source_split_6710:
    assume {:verifier.code 0} true;
    $i47 := $sext.i32.i64($i46);
    goto corral_source_split_6711;

  corral_source_split_6711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 878} $i48 := ldv__builtin_expect($i47, 0);
    call {:si_unique_call 879} {:cexpr "tmp___2"} boogie_si_record_i64($i48);
    goto corral_source_split_6712;

  corral_source_split_6712:
    assume {:verifier.code 0} true;
    $i49 := $ne.i64($i48, 0);
    goto corral_source_split_6713;

  corral_source_split_6713:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i44, 0);
    goto corral_source_split_6718;

  corral_source_split_6718:
    assume {:verifier.code 0} true;
    $i51 := $zext.i1.i32($i50);
    goto corral_source_split_6719;

  corral_source_split_6719:
    assume {:verifier.code 0} true;
    $i52 := $sext.i32.i64($i51);
    goto corral_source_split_6720;

  corral_source_split_6720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 881} vslice_dummy_var_58 := ldv__builtin_expect($i52, 0);
    goto corral_source_split_6721;

  corral_source_split_6721:
    assume {:verifier.code 0} true;
    $i54 := $sext.i32.i64($i2);
    goto corral_source_split_6722;

  corral_source_split_6722:
    assume {:verifier.code 0} true;
    goto corral_source_split_6723;

  corral_source_split_6723:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p3, $mul.ref($i54, 24)), $mul.ref(0, 1));
    goto corral_source_split_6724;

  corral_source_split_6724:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_6725;

  corral_source_split_6725:
    assume {:verifier.code 0} true;
    $i58 := $p2i.ref.i64($p57);
    goto corral_source_split_6726;

  corral_source_split_6726:
    assume {:verifier.code 0} true;
    $i59 := $ne.i64($i58, 0);
    goto corral_source_split_6727;

  corral_source_split_6727:
    assume {:verifier.code 0} true;
    $i60 := $zext.i1.i32($i59);
    call {:si_unique_call 882} {:cexpr "__ret_warn_on___2"} boogie_si_record_i32($i60);
    goto corral_source_split_6728;

  corral_source_split_6728:
    assume {:verifier.code 0} true;
    $i61 := $ne.i32($i60, 0);
    goto corral_source_split_6729;

  corral_source_split_6729:
    assume {:verifier.code 0} true;
    $i62 := $zext.i1.i32($i61);
    goto corral_source_split_6730;

  corral_source_split_6730:
    assume {:verifier.code 0} true;
    $i63 := $sext.i32.i64($i62);
    goto corral_source_split_6731;

  corral_source_split_6731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 883} $i64 := ldv__builtin_expect($i63, 0);
    call {:si_unique_call 884} {:cexpr "tmp___3"} boogie_si_record_i64($i64);
    goto corral_source_split_6732;

  corral_source_split_6732:
    assume {:verifier.code 0} true;
    $i65 := $ne.i64($i64, 0);
    goto corral_source_split_6733;

  corral_source_split_6733:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i66 := $ne.i32($i60, 0);
    goto corral_source_split_6738;

  corral_source_split_6738:
    assume {:verifier.code 0} true;
    $i67 := $zext.i1.i32($i66);
    goto corral_source_split_6739;

  corral_source_split_6739:
    assume {:verifier.code 0} true;
    $i68 := $sext.i32.i64($i67);
    goto corral_source_split_6740;

  corral_source_split_6740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 886} vslice_dummy_var_59 := ldv__builtin_expect($i68, 0);
    goto corral_source_split_6741;

  corral_source_split_6741:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_6742;

  corral_source_split_6742:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.0, $p70);
    goto corral_source_split_6743;

  corral_source_split_6743:
    assume {:verifier.code 0} true;
    $i72 := $ne.i32($i71, 1);
    goto corral_source_split_6744;

  corral_source_split_6744:
    assume {:verifier.code 0} true;
    $i73 := $zext.i1.i32($i72);
    call {:si_unique_call 887} {:cexpr "__ret_warn_on___3"} boogie_si_record_i32($i73);
    goto corral_source_split_6745;

  corral_source_split_6745:
    assume {:verifier.code 0} true;
    $i74 := $ne.i32($i73, 0);
    goto corral_source_split_6746;

  corral_source_split_6746:
    assume {:verifier.code 0} true;
    $i75 := $zext.i1.i32($i74);
    goto corral_source_split_6747;

  corral_source_split_6747:
    assume {:verifier.code 0} true;
    $i76 := $sext.i32.i64($i75);
    goto corral_source_split_6748;

  corral_source_split_6748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 888} $i77 := ldv__builtin_expect($i76, 0);
    call {:si_unique_call 889} {:cexpr "tmp___4"} boogie_si_record_i64($i77);
    goto corral_source_split_6749;

  corral_source_split_6749:
    assume {:verifier.code 0} true;
    $i78 := $ne.i64($i77, 0);
    goto corral_source_split_6750;

  corral_source_split_6750:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i79 := $ne.i32($i73, 0);
    goto corral_source_split_6755;

  corral_source_split_6755:
    assume {:verifier.code 0} true;
    $i80 := $zext.i1.i32($i79);
    goto corral_source_split_6756;

  corral_source_split_6756:
    assume {:verifier.code 0} true;
    $i81 := $sext.i32.i64($i80);
    goto corral_source_split_6757;

  corral_source_split_6757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 891} vslice_dummy_var_60 := ldv__builtin_expect($i81, 0);
    goto corral_source_split_6758;

  corral_source_split_6758:
    assume {:verifier.code 0} true;
    $i83 := $eq.i32($i1, 3072);
    goto corral_source_split_6759;

  corral_source_split_6759:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i83 == 1);
    goto corral_source_split_6778;

  corral_source_split_6778:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_6779;

  corral_source_split_6779:
    assume {:verifier.code 0} true;
    $p98 := $load.ref($M.0, $p97);
    goto corral_source_split_6780;

  corral_source_split_6780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 894} $i99 := reg_read32($p98, 320);
    goto SeqInstr_196, SeqInstr_197;

  SeqInstr_197:
    assume assertsPassed;
    goto SeqInstr_198;

  SeqInstr_198:
    call {:si_unique_call 895} {:cexpr "tmp___6"} boogie_si_record_i32($i99);
    goto corral_source_split_6781;

  corral_source_split_6781:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p7, $mul.ref(0, 2384)), $mul.ref(1632, 1));
    goto corral_source_split_6782;

  corral_source_split_6782:
    assume {:verifier.code 0} true;
    $i101 := $load.i32($M.36, $p100);
    goto corral_source_split_6783;

  corral_source_split_6783:
    assume {:verifier.code 0} true;
    $i102 := $or.i32($i101, $i99);
    goto corral_source_split_6784;

  corral_source_split_6784:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p7, $mul.ref(0, 2384)), $mul.ref(1632, 1));
    goto corral_source_split_6785;

  corral_source_split_6785:
    assume {:verifier.code 0} true;
    $M.36 := $store.i32($M.36, $p103, $i102);
    goto corral_source_split_6786;

  corral_source_split_6786:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p7, $mul.ref(0, 2384)), $mul.ref(1632, 1));
    goto corral_source_split_6787;

  corral_source_split_6787:
    assume {:verifier.code 0} true;
    $i105 := $load.i32($M.36, $p104);
    goto corral_source_split_6788;

  corral_source_split_6788:
    assume {:verifier.code 0} true;
    $i106 := $shl.i32(1, $i2);
    goto corral_source_split_6789;

  corral_source_split_6789:
    assume {:verifier.code 0} true;
    $i107 := $xor.i32($i106, $sub.i32(0, 1));
    goto corral_source_split_6790;

  corral_source_split_6790:
    assume {:verifier.code 0} true;
    $i108 := $and.i32($i105, $i107);
    goto corral_source_split_6791;

  corral_source_split_6791:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p7, $mul.ref(0, 2384)), $mul.ref(1632, 1));
    goto corral_source_split_6792;

  corral_source_split_6792:
    assume {:verifier.code 0} true;
    $M.36 := $store.i32($M.36, $p109, $i108);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p5, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_6794;

  corral_source_split_6794:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p110, $i2);
    goto corral_source_split_6795;

  corral_source_split_6795:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_6796;

  corral_source_split_6796:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p111, 2);
    goto corral_source_split_6797;

  corral_source_split_6797:
    assume {:verifier.code 0} true;
    $i112 := $load.i64($M.0, jiffies);
    goto corral_source_split_6798;

  corral_source_split_6798:
    assume {:verifier.code 0} true;
    $i113 := $sext.i32.i64($i2);
    goto corral_source_split_6799;

  corral_source_split_6799:
    assume {:verifier.code 0} true;
    goto corral_source_split_6800;

  corral_source_split_6800:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p3, $mul.ref($i113, 24)), $mul.ref(16, 1));
    goto corral_source_split_6801;

  corral_source_split_6801:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p115, $i112);
    goto corral_source_split_6802;

  corral_source_split_6802:
    assume {:verifier.code 0} true;
    $i116 := $sext.i32.i64($i2);
    goto corral_source_split_6803;

  corral_source_split_6803:
    assume {:verifier.code 0} true;
    goto corral_source_split_6804;

  corral_source_split_6804:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p3, $mul.ref($i116, 24)), $mul.ref(8, 1));
    goto corral_source_split_6805;

  corral_source_split_6805:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p118, $p4);
    goto corral_source_split_6806;

  corral_source_split_6806:
    assume {:verifier.code 0} true;
    $i119 := $sext.i32.i64($i2);
    goto corral_source_split_6807;

  corral_source_split_6807:
    assume {:verifier.code 0} true;
    goto corral_source_split_6808;

  corral_source_split_6808:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p3, $mul.ref($i119, 24)), $mul.ref(0, 1));
    goto corral_source_split_6809;

  corral_source_split_6809:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p121, $p5);
    goto corral_source_split_6810;

  corral_source_split_6810:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_6811;

  corral_source_split_6811:
    assume {:verifier.code 0} true;
    $p123 := $load.ref($M.0, $p122);
    goto corral_source_split_6812;

  corral_source_split_6812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 896} ptd_write($p123, $i1, $i2, $p6);
    goto corral_source_split_6813;

  corral_source_split_6813:
    assume {:verifier.code 0} true;
    $i124 := $eq.i32($i1, 3072);
    goto corral_source_split_6814;

  corral_source_split_6814:
    assume {:verifier.code 0} true;
    assume {:branchcond $i124} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i124 == 1);
    goto corral_source_split_6829;

  corral_source_split_6829:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_6830;

  corral_source_split_6830:
    assume {:verifier.code 0} true;
    $p136 := $load.ref($M.0, $p135);
    goto corral_source_split_6831;

  corral_source_split_6831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 901} $i137 := reg_read32($p136, 324);
    goto SeqInstr_202, SeqInstr_203;

  SeqInstr_203:
    assume assertsPassed;
    goto SeqInstr_204;

  SeqInstr_204:
    call {:si_unique_call 902} {:cexpr "tmp___8"} boogie_si_record_i32($i137);
    goto corral_source_split_6832;

  corral_source_split_6832:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p5, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_6833;

  corral_source_split_6833:
    assume {:verifier.code 0} true;
    $i139 := $load.i32($M.0, $p138);
    goto corral_source_split_6834;

  corral_source_split_6834:
    assume {:verifier.code 0} true;
    $i140 := $shl.i32(1, $i139);
    goto corral_source_split_6835;

  corral_source_split_6835:
    assume {:verifier.code 0} true;
    $i141 := $xor.i32($i140, $sub.i32(0, 1));
    goto corral_source_split_6836;

  corral_source_split_6836:
    assume {:verifier.code 0} true;
    $i142 := $and.i32($i141, $i137);
    call {:si_unique_call 903} {:cexpr "skip_map"} boogie_si_record_i32($i142);
    goto corral_source_split_6837;

  corral_source_split_6837:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_6838;

  corral_source_split_6838:
    assume {:verifier.code 0} true;
    $p144 := $load.ref($M.0, $p143);
    goto corral_source_split_6839;

  corral_source_split_6839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 904} reg_write32($p144, 324, $i142);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_202:
    assume !assertsPassed;
    return;

  $bb25:
    assume $i124 == 1;
    goto corral_source_split_6816;

  corral_source_split_6816:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_6817;

  corral_source_split_6817:
    assume {:verifier.code 0} true;
    $p126 := $load.ref($M.0, $p125);
    goto corral_source_split_6818;

  corral_source_split_6818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 897} $i127 := reg_read32($p126, 340);
    goto SeqInstr_199, SeqInstr_200;

  SeqInstr_200:
    assume assertsPassed;
    goto SeqInstr_201;

  SeqInstr_201:
    call {:si_unique_call 898} {:cexpr "tmp___7"} boogie_si_record_i32($i127);
    goto corral_source_split_6819;

  corral_source_split_6819:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p5, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_6820;

  corral_source_split_6820:
    assume {:verifier.code 0} true;
    $i129 := $load.i32($M.0, $p128);
    goto corral_source_split_6821;

  corral_source_split_6821:
    assume {:verifier.code 0} true;
    $i130 := $shl.i32(1, $i129);
    goto corral_source_split_6822;

  corral_source_split_6822:
    assume {:verifier.code 0} true;
    $i131 := $xor.i32($i130, $sub.i32(0, 1));
    goto corral_source_split_6823;

  corral_source_split_6823:
    assume {:verifier.code 0} true;
    $i132 := $and.i32($i131, $i127);
    call {:si_unique_call 899} {:cexpr "skip_map"} boogie_si_record_i32($i132);
    goto corral_source_split_6824;

  corral_source_split_6824:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_6825;

  corral_source_split_6825:
    assume {:verifier.code 0} true;
    $p134 := $load.ref($M.0, $p133);
    goto corral_source_split_6826;

  corral_source_split_6826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 900} reg_write32($p134, 340, $i132);
    goto corral_source_split_6827;

  corral_source_split_6827:
    assume {:verifier.code 0} true;
    goto $bb27;

  SeqInstr_199:
    assume !assertsPassed;
    return;

  SeqInstr_196:
    assume !assertsPassed;
    return;

  $bb22:
    assume $i83 == 1;
    goto corral_source_split_6761;

  corral_source_split_6761:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_6762;

  corral_source_split_6762:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.0, $p84);
    goto corral_source_split_6763;

  corral_source_split_6763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 892} $i86 := reg_read32($p85, 336);
    goto SeqInstr_193, SeqInstr_194;

  SeqInstr_194:
    assume assertsPassed;
    goto SeqInstr_195;

  SeqInstr_195:
    call {:si_unique_call 893} {:cexpr "tmp___5"} boogie_si_record_i32($i86);
    goto corral_source_split_6764;

  corral_source_split_6764:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p7, $mul.ref(0, 2384)), $mul.ref(856, 1));
    goto corral_source_split_6765;

  corral_source_split_6765:
    assume {:verifier.code 0} true;
    $i88 := $load.i32($M.36, $p87);
    goto corral_source_split_6766;

  corral_source_split_6766:
    assume {:verifier.code 0} true;
    $i89 := $or.i32($i88, $i86);
    goto corral_source_split_6767;

  corral_source_split_6767:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p7, $mul.ref(0, 2384)), $mul.ref(856, 1));
    goto corral_source_split_6768;

  corral_source_split_6768:
    assume {:verifier.code 0} true;
    $M.36 := $store.i32($M.36, $p90, $i89);
    goto corral_source_split_6769;

  corral_source_split_6769:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p7, $mul.ref(0, 2384)), $mul.ref(856, 1));
    goto corral_source_split_6770;

  corral_source_split_6770:
    assume {:verifier.code 0} true;
    $i92 := $load.i32($M.36, $p91);
    goto corral_source_split_6771;

  corral_source_split_6771:
    assume {:verifier.code 0} true;
    $i93 := $shl.i32(1, $i2);
    goto corral_source_split_6772;

  corral_source_split_6772:
    assume {:verifier.code 0} true;
    $i94 := $xor.i32($i93, $sub.i32(0, 1));
    goto corral_source_split_6773;

  corral_source_split_6773:
    assume {:verifier.code 0} true;
    $i95 := $and.i32($i92, $i94);
    goto corral_source_split_6774;

  corral_source_split_6774:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p7, $mul.ref(0, 2384)), $mul.ref(856, 1));
    goto corral_source_split_6775;

  corral_source_split_6775:
    assume {:verifier.code 0} true;
    $M.36 := $store.i32($M.36, $p96, $i95);
    goto corral_source_split_6776;

  corral_source_split_6776:
    assume {:verifier.code 0} true;
    goto $bb24;

  SeqInstr_193:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i78 == 1;
    goto corral_source_split_6752;

  corral_source_split_6752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} warn_slowpath_null(.str.29, 732);
    goto corral_source_split_6753;

  corral_source_split_6753:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb16:
    assume $i65 == 1;
    goto corral_source_split_6735;

  corral_source_split_6735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 885} warn_slowpath_null(.str.29, 731);
    goto corral_source_split_6736;

  corral_source_split_6736:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume $i49 == 1;
    goto corral_source_split_6715;

  corral_source_split_6715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 880} warn_slowpath_null(.str.29, 730);
    goto corral_source_split_6716;

  corral_source_split_6716:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume $i33 == 1;
    goto corral_source_split_6695;

  corral_source_split_6695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 875} warn_slowpath_null(.str.29, 729);
    goto corral_source_split_6696;

  corral_source_split_6696:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i23 == 1;
    goto corral_source_split_6683;

  corral_source_split_6683:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p4, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_6684;

  corral_source_split_6684:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_6685;

  corral_source_split_6685:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 0);
    assume {:verifier.code 0} true;
    $i24 := $i27;
    goto $bb9;

  $bb4:
    assume $i16 == 1;
    goto corral_source_split_6672;

  corral_source_split_6672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 870} warn_slowpath_null(.str.29, 728);
    goto corral_source_split_6673;

  corral_source_split_6673:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb2;
}



const reg_read32: ref;

axiom reg_read32 == $sub.ref(0, 390631);

procedure reg_read32($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.0, $M.32, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.30, $M.38, $M.36, $M.40, $M.23, $M.22, $M.25, $M.24, $M.27, $M.26, $M.29, $M.28, $CurrAddr, $M.2, $M.4, $M.6, $M.8, $M.3, $M.5, $M.7, $M.9, assertsPassed;



implementation reg_read32($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 905} {:cexpr "reg_read32:arg:reg"} boogie_si_record_i32($i1);
    goto corral_source_split_6841;

  corral_source_split_6841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 906} $i2 := isp1760_read32($p0, $i1);
    goto SeqInstr_205, SeqInstr_206;

  SeqInstr_206:
    assume assertsPassed;
    goto SeqInstr_207;

  SeqInstr_207:
    call {:si_unique_call 907} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_6842;

  corral_source_split_6842:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_205:
    assume !assertsPassed;
    return;
}



const ptd_write: ref;

axiom ptd_write == $sub.ref(0, 391663);

procedure ptd_write($p0: ref, $i1: i32, $i2: i32, $p3: ref);
  free requires assertsPassed;



implementation ptd_write($p0: ref, $i1: i32, $i2: i32, $p3: ref)
{
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 908} {:cexpr "ptd_write:arg:ptd_offset"} boogie_si_record_i32($i1);
    call {:si_unique_call 909} {:cexpr "ptd_write:arg:slot"} boogie_si_record_i32($i2);
    goto corral_source_split_6844;

  corral_source_split_6844:
    assume {:verifier.code 0} true;
    $i4 := $mul.i32($i2, 32);
    goto corral_source_split_6845;

  corral_source_split_6845:
    assume {:verifier.code 0} true;
    $i5 := $add.i32($i4, $i1);
    goto corral_source_split_6846;

  corral_source_split_6846:
    assume {:verifier.code 0} true;
    $i6 := $add.i32($i5, 4);
    goto corral_source_split_6847;

  corral_source_split_6847:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_6848;

  corral_source_split_6848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 910} mem_writes8($p0, $i6, $p7, 28);
    call {:si_unique_call 911} devirtbounce.7(0);
    goto corral_source_split_6849;

  corral_source_split_6849:
    assume {:verifier.code 0} true;
    $i8 := $mul.i32($i2, 32);
    goto corral_source_split_6850;

  corral_source_split_6850:
    assume {:verifier.code 0} true;
    $i9 := $add.i32($i8, $i1);
    goto corral_source_split_6851;

  corral_source_split_6851:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_6852;

  corral_source_split_6852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 912} mem_writes8($p0, $i9, $p10, 4);
    goto corral_source_split_6853;

  corral_source_split_6853:
    assume {:verifier.code 0} true;
    return;
}



const reg_write32: ref;

axiom reg_write32 == $sub.ref(0, 392695);

procedure reg_write32($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;



implementation reg_write32($p0: ref, $i1: i32, $i2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 913} {:cexpr "reg_write32:arg:reg"} boogie_si_record_i32($i1);
    call {:si_unique_call 914} {:cexpr "reg_write32:arg:val"} boogie_si_record_i32($i2);
    goto corral_source_split_6855;

  corral_source_split_6855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 915} isp1760_write32($p0, $i1, $i2);
    goto corral_source_split_6856;

  corral_source_split_6856:
    assume {:verifier.code 0} true;
    return;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 393727);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const usb_maxpacket: ref;

axiom usb_maxpacket == $sub.ref(0, 394759);

procedure usb_maxpacket($p0: ref, $i1: i32, $i2: i32) returns ($r: i16);
  free requires assertsPassed;



implementation usb_maxpacket($p0: ref, $i1: i32, $i2: i32) returns ($r: i16)
{
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $i14: i1;
  var $i15: i32;
  var $i16: i64;
  var $i18: i64;
  var $p20: ref;
  var $p21: ref;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i64;
  var $i29: i64;
  var $i30: i1;
  var $i31: i1;
  var $i32: i32;
  var $i33: i64;
  var $i35: i64;
  var $p37: ref;
  var $p38: ref;
  var $p22: ref;
  var $i39: i64;
  var $i40: i1;
  var $p42: ref;
  var $i43: i32;
  var $i44: i16;
  var $i41: i16;
  var vslice_dummy_var_61: i64;
  var vslice_dummy_var_62: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 916} {:cexpr "usb_maxpacket:arg:pipe"} boogie_si_record_i32($i1);
    call {:si_unique_call 917} {:cexpr "usb_maxpacket:arg:is_out"} boogie_si_record_i32($i2);
    goto corral_source_split_6858;

  corral_source_split_6858:
    assume {:verifier.code 0} true;
    $i3 := $ashr.i32($i1, 15);
    goto corral_source_split_6859;

  corral_source_split_6859:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 15);
    call {:si_unique_call 918} {:cexpr "epnum"} boogie_si_record_i32($i4);
    goto corral_source_split_6860;

  corral_source_split_6860:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i2, 0);
    goto corral_source_split_6861;

  corral_source_split_6861:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_6873;

  corral_source_split_6873:
    assume {:verifier.code 0} true;
    $i23 := $and.i32($i1, 128);
    goto corral_source_split_6874;

  corral_source_split_6874:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_6875;

  corral_source_split_6875:
    assume {:verifier.code 0} true;
    $i25 := $zext.i1.i32($i24);
    call {:si_unique_call 922} {:cexpr "__ret_warn_on___0"} boogie_si_record_i32($i25);
    goto corral_source_split_6876;

  corral_source_split_6876:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_6877;

  corral_source_split_6877:
    assume {:verifier.code 0} true;
    $i27 := $zext.i1.i32($i26);
    goto corral_source_split_6878;

  corral_source_split_6878:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64($i27);
    goto corral_source_split_6879;

  corral_source_split_6879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 923} $i29 := ldv__builtin_expect($i28, 0);
    call {:si_unique_call 924} {:cexpr "tmp___0"} boogie_si_record_i64($i29);
    goto corral_source_split_6880;

  corral_source_split_6880:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_6881;

  corral_source_split_6881:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i25, 0);
    goto corral_source_split_6901;

  corral_source_split_6901:
    assume {:verifier.code 0} true;
    $i32 := $zext.i1.i32($i31);
    goto corral_source_split_6902;

  corral_source_split_6902:
    assume {:verifier.code 0} true;
    $i33 := $sext.i32.i64($i32);
    goto corral_source_split_6903;

  corral_source_split_6903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 928} vslice_dummy_var_62 := ldv__builtin_expect($i33, 0);
    goto corral_source_split_6904;

  corral_source_split_6904:
    assume {:verifier.code 0} true;
    $i35 := $zext.i32.i64($i4);
    goto corral_source_split_6905;

  corral_source_split_6905:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(1616, 1)), $mul.ref($i35, 8));
    goto corral_source_split_6906;

  corral_source_split_6906:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    assume {:verifier.code 0} true;
    $p22 := $p38;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_6894;

  corral_source_split_6894:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($p22);
    goto corral_source_split_6895;

  corral_source_split_6895:
    assume {:verifier.code 0} true;
    $i40 := $eq.i64($i39, 0);
    goto corral_source_split_6896;

  corral_source_split_6896:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p22, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_6912;

  corral_source_split_6912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 929} $i43 := usb_endpoint_maxp($p42);
    call {:si_unique_call 930} {:cexpr "tmp___1"} boogie_si_record_i32($i43);
    goto corral_source_split_6913;

  corral_source_split_6913:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i32.i16($i43);
    goto corral_source_split_6914;

  corral_source_split_6914:
    assume {:verifier.code 0} true;
    $i41 := $i44;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_6910;

  corral_source_split_6910:
    assume {:verifier.code 0} true;
    $r := $i41;
    return;

  $bb10:
    assume $i40 == 1;
    goto corral_source_split_6908;

  corral_source_split_6908:
    assume {:verifier.code 0} true;
    $i41 := 0;
    goto $bb12;

  $bb7:
    assume $i30 == 1;
    goto corral_source_split_6898;

  corral_source_split_6898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 927} warn_slowpath_null(.str.38, 1849);
    goto corral_source_split_6899;

  corral_source_split_6899:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_6863;

  corral_source_split_6863:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i1, 128);
    goto corral_source_split_6864;

  corral_source_split_6864:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_6865;

  corral_source_split_6865:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    call {:si_unique_call 919} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i8);
    goto corral_source_split_6866;

  corral_source_split_6866:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_6867;

  corral_source_split_6867:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_6868;

  corral_source_split_6868:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_6869;

  corral_source_split_6869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 920} $i12 := ldv__builtin_expect($i11, 0);
    call {:si_unique_call 921} {:cexpr "tmp"} boogie_si_record_i64($i12);
    goto corral_source_split_6870;

  corral_source_split_6870:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_6871;

  corral_source_split_6871:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i8, 0);
    goto corral_source_split_6886;

  corral_source_split_6886:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i32($i14);
    goto corral_source_split_6887;

  corral_source_split_6887:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i15);
    goto corral_source_split_6888;

  corral_source_split_6888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 926} vslice_dummy_var_61 := ldv__builtin_expect($i16, 0);
    goto corral_source_split_6889;

  corral_source_split_6889:
    assume {:verifier.code 0} true;
    $i18 := $zext.i32.i64($i4);
    goto corral_source_split_6890;

  corral_source_split_6890:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(1744, 1)), $mul.ref($i18, 8));
    goto corral_source_split_6891;

  corral_source_split_6891:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_6892;

  corral_source_split_6892:
    assume {:verifier.code 0} true;
    $p22 := $p21;
    goto $bb6;

  $bb3:
    assume $i13 == 1;
    goto corral_source_split_6883;

  corral_source_split_6883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 925} warn_slowpath_null(.str.38, 1846);
    goto corral_source_split_6884;

  corral_source_split_6884:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const base_to_chip: ref;

axiom base_to_chip == $sub.ref(0, 395791);

procedure base_to_chip($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation base_to_chip($i0: i32) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 931} {:cexpr "base_to_chip:arg:base"} boogie_si_record_i32($i0);
    goto corral_source_split_6916;

  corral_source_split_6916:
    assume {:verifier.code 0} true;
    $i1 := $sub.i32($i0, 1024);
    goto corral_source_split_6917;

  corral_source_split_6917:
    assume {:verifier.code 0} true;
    $i2 := $lshr.i32($i1, 3);
    goto corral_source_split_6918;

  corral_source_split_6918:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const last_qtd_of_urb: ref;

axiom last_qtd_of_urb == $sub.ref(0, 396823);

procedure last_qtd_of_urb($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation last_qtd_of_urb($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $i19: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6920;

  corral_source_split_6920:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_6921;

  corral_source_split_6921:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_6922;

  corral_source_split_6922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 932} $i4 := list_is_last($p2, $p3);
    call {:si_unique_call 933} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_6923;

  corral_source_split_6923:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_6924;

  corral_source_split_6924:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_6930;

  corral_source_split_6930:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_6931;

  corral_source_split_6931:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_6932;

  corral_source_split_6932:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_6933;

  corral_source_split_6933:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_6934;

  corral_source_split_6934:
    assume {:verifier.code 0} true;
    goto corral_source_split_6935;

  corral_source_split_6935:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p12, $mul.ref($sub.ref(0, 24), 72)), $mul.ref(40, 1));
    goto corral_source_split_6936;

  corral_source_split_6936:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_6937;

  corral_source_split_6937:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_6938;

  corral_source_split_6938:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p8);
    goto corral_source_split_6939;

  corral_source_split_6939:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i16, $i17);
    goto corral_source_split_6940;

  corral_source_split_6940:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i32($i18);
    goto corral_source_split_6941;

  corral_source_split_6941:
    assume {:verifier.code 0} true;
    $i6 := $i19;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6928;

  corral_source_split_6928:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_6926;

  corral_source_split_6926:
    assume {:verifier.code 0} true;
    $i6 := 1;
    goto $bb3;
}



const list_is_last: ref;

axiom list_is_last == $sub.ref(0, 397855);

procedure list_is_last($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation list_is_last($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6943;

  corral_source_split_6943:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6944;

  corral_source_split_6944:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_6945;

  corral_source_split_6945:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_6946;

  corral_source_split_6946:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p1);
    goto corral_source_split_6947;

  corral_source_split_6947:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i4, $i5);
    goto corral_source_split_6948;

  corral_source_split_6948:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_6949;

  corral_source_split_6949:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const usb_endpoint_maxp: ref;

axiom usb_endpoint_maxp == $sub.ref(0, 398887);

procedure usb_endpoint_maxp($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_maxp($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i16;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6951;

  corral_source_split_6951:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 10)), $mul.ref(4, 1));
    goto corral_source_split_6952;

  corral_source_split_6952:
    assume {:verifier.code 0} true;
    $i2 := $load.i16($M.0, $p1);
    goto corral_source_split_6953;

  corral_source_split_6953:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i32($i2);
    goto corral_source_split_6954;

  corral_source_split_6954:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const transform_add_int: ref;

axiom transform_add_int == $sub.ref(0, 399919);

procedure transform_add_int($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation transform_add_int($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var $i26: i32;
  var $i20: i32;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $p39: ref;
  var $i33: i32;
  var $i34: i32;
  var $i40: i32;
  var $i41: i32;
  var $p42: ref;
  var $i43: i32;
  var $i44: i32;
  var $p45: ref;
  var $p46: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6956;

  corral_source_split_6956:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_6957;

  corral_source_split_6957:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_6958;

  corral_source_split_6958:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_6959;

  corral_source_split_6959:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_6960;

  corral_source_split_6960:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 2040)), $mul.ref(28, 1));
    goto corral_source_split_6961;

  corral_source_split_6961:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_6962;

  corral_source_split_6962:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 3);
    goto corral_source_split_6963;

  corral_source_split_6963:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    goto corral_source_split_6977;

  corral_source_split_6977:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_6978;

  corral_source_split_6978:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_6979;

  corral_source_split_6979:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 192)), $mul.ref(168, 1));
    goto corral_source_split_6980;

  corral_source_split_6980:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    call {:si_unique_call 935} {:cexpr "period"} boogie_si_record_i32($i38);
    goto corral_source_split_6981;

  corral_source_split_6981:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(20, 1));
    goto corral_source_split_6982;

  corral_source_split_6982:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p39, 255);
    assume {:verifier.code 0} true;
    $i33, $i34 := 15, $i38;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7006;

  corral_source_split_7006:
    assume {:verifier.code 0} true;
    $i40 := $lshr.i32($i34, 1);
    call {:si_unique_call 936} {:cexpr "period"} boogie_si_record_i32($i40);
    goto corral_source_split_7007;

  corral_source_split_7007:
    assume {:verifier.code 0} true;
    $i41 := $and.i32($i40, 248);
    call {:si_unique_call 937} {:cexpr "period"} boogie_si_record_i32($i41);
    goto corral_source_split_7008;

  corral_source_split_7008:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_7009;

  corral_source_split_7009:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    goto corral_source_split_7010;

  corral_source_split_7010:
    assume {:verifier.code 0} true;
    $i44 := $or.i32($i43, $i41);
    goto corral_source_split_7011;

  corral_source_split_7011:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_7012;

  corral_source_split_7012:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p45, $i44);
    goto corral_source_split_7013;

  corral_source_split_7013:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_7014;

  corral_source_split_7014:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p46, $i33);
    goto corral_source_split_7015;

  corral_source_split_7015:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_6965;

  corral_source_split_6965:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_6966;

  corral_source_split_6966:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_6967;

  corral_source_split_6967:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 192)), $mul.ref(168, 1));
    goto corral_source_split_6968;

  corral_source_split_6968:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_6969;

  corral_source_split_6969:
    assume {:verifier.code 0} true;
    $i14 := $ashr.i32($i13, 3);
    call {:si_unique_call 934} {:cexpr "period"} boogie_si_record_i32($i14);
    goto corral_source_split_6970;

  corral_source_split_6970:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_6971;

  corral_source_split_6971:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_6972;

  corral_source_split_6972:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 192)), $mul.ref(168, 1));
    goto corral_source_split_6973;

  corral_source_split_6973:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_6974;

  corral_source_split_6974:
    assume {:verifier.code 0} true;
    $i19 := $sgt.i32($i18, 4);
    goto corral_source_split_6975;

  corral_source_split_6975:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i19 == 1);
    goto corral_source_split_6986;

  corral_source_split_6986:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_6987;

  corral_source_split_6987:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_6988;

  corral_source_split_6988:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 192)), $mul.ref(168, 1));
    goto corral_source_split_6989;

  corral_source_split_6989:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_6990;

  corral_source_split_6990:
    assume {:verifier.code 0} true;
    $i25 := $sgt.i32($i24, 2);
    goto corral_source_split_6991;

  corral_source_split_6991:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i25 == 1);
    goto corral_source_split_6997;

  corral_source_split_6997:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_6998;

  corral_source_split_6998:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_6999;

  corral_source_split_6999:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 192)), $mul.ref(168, 1));
    goto corral_source_split_7000;

  corral_source_split_7000:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_7001;

  corral_source_split_7001:
    assume {:verifier.code 0} true;
    $i31 := $sgt.i32($i30, 1);
    goto corral_source_split_7002;

  corral_source_split_7002:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    $i32 := 255;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i26 := $i32;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i20 := $i26;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_6993;

  corral_source_split_6993:
    assume {:verifier.code 0} true;
    $i33, $i34 := $i20, $i14;
    goto $bb12;

  $bb9:
    assume $i31 == 1;
    goto corral_source_split_7004;

  corral_source_split_7004:
    assume {:verifier.code 0} true;
    $i32 := 85;
    goto $bb11;

  $bb6:
    assume $i25 == 1;
    goto corral_source_split_6995;

  corral_source_split_6995:
    assume {:verifier.code 0} true;
    $i26 := 34;
    goto $bb8;

  $bb3:
    assume $i19 == 1;
    goto corral_source_split_6984;

  corral_source_split_6984:
    assume {:verifier.code 0} true;
    $i20 := 1;
    goto $bb5;
}



const __writel: ref;

axiom __writel == $sub.ref(0, 400951);

procedure __writel($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation __writel($i0: i32, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 938} {:cexpr "__writel:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_7017;

  corral_source_split_7017:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    call {:si_unique_call 939} devirtbounce.5(0, $i0, $p2);
    goto corral_source_split_7018;

  corral_source_split_7018:
    assume {:verifier.code 0} true;
    return;
}



const usb_hcd_unlink_urb_from_ep: ref;

axiom usb_hcd_unlink_urb_from_ep == $sub.ref(0, 401983);

procedure usb_hcd_unlink_urb_from_ep($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation usb_hcd_unlink_urb_from_ep($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7020;

  corral_source_split_7020:
    assume {:verifier.code 0} true;
    return;
}



const usb_hcd_giveback_urb: ref;

axiom usb_hcd_giveback_urb == $sub.ref(0, 403015);

procedure usb_hcd_giveback_urb($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;



implementation usb_hcd_giveback_urb($p0: ref, $p1: ref, $i2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 940} {:cexpr "usb_hcd_giveback_urb:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_7022;

  corral_source_split_7022:
    assume {:verifier.code 0} true;
    return;
}



const mem_reads8: ref;

axiom mem_reads8 == $sub.ref(0, 404047);

procedure mem_reads8($p0: ref, $i1: i32, $p2: ref, $i3: i32);
  free requires assertsPassed;
  modifies $M.0, $M.38, $CurrAddr, $M.1, $M.32, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.30, $M.36, $M.40, $M.23, $M.22, $M.25, $M.24, $M.27, $M.26, $M.29, $M.28, $M.2, $M.4, $M.6, $M.8, $M.3, $M.5, $M.7, $M.9, assertsPassed;



implementation mem_reads8($p0: ref, $i1: i32, $p2: ref, $i3: i32)
{
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 941} {:cexpr "mem_reads8:arg:src_offset"} boogie_si_record_i32($i1);
    call {:si_unique_call 942} {:cexpr "mem_reads8:arg:bytes"} boogie_si_record_i32($i3);
    goto corral_source_split_7024;

  corral_source_split_7024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 943} reg_write32($p0, 828, $i1);
    goto corral_source_split_7025;

  corral_source_split_7025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 944} __const_udelay(450);
    goto corral_source_split_7026;

  corral_source_split_7026:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p2);
    goto corral_source_split_7027;

  corral_source_split_7027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 945} bank_reads8($p0, $i1, 0, $p4, $i3);
    goto SeqInstr_208, SeqInstr_209;

  SeqInstr_209:
    assume assertsPassed;
    goto SeqInstr_210;

  SeqInstr_210:
    goto corral_source_split_7028;

  corral_source_split_7028:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_208:
    assume !assertsPassed;
    return;
}



const is_short_bulk: ref;

axiom is_short_bulk == $sub.ref(0, 405079);

procedure is_short_bulk($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation is_short_bulk($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $i7: i1;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7030;

  corral_source_split_7030:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_7031;

  corral_source_split_7031:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_7032;

  corral_source_split_7032:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_7033;

  corral_source_split_7033:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_7034;

  corral_source_split_7034:
    assume {:verifier.code 0} true;
    $i5 := $lshr.i32($i4, 30);
    goto corral_source_split_7035;

  corral_source_split_7035:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 3);
    goto corral_source_split_7036;

  corral_source_split_7036:
    assume {:verifier.code 0} true;
    $i7 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7044;

  corral_source_split_7044:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i7);
    goto corral_source_split_7045;

  corral_source_split_7045:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_7038;

  corral_source_split_7038:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(56, 1));
    goto corral_source_split_7039;

  corral_source_split_7039:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.0, $p8);
    goto corral_source_split_7040;

  corral_source_split_7040:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_7041;

  corral_source_split_7041:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.0, $p10);
    goto corral_source_split_7042;

  corral_source_split_7042:
    assume {:verifier.code 0} true;
    $i12 := $ult.i64($i9, $i11);
    assume {:verifier.code 0} true;
    $i7 := $i12;
    goto $bb3;
}



const free_mem: ref;

axiom free_mem == $sub.ref(0, 406111);

procedure free_mem($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation free_mem($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i64;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $i26: i1;
  var $i27: i32;
  var $i28: i64;
  var $i30: i64;
  var $p33: ref;
  var $p34: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $i41: i32;
  var $i42: i64;
  var $i43: i64;
  var $i44: i1;
  var $i45: i1;
  var $i46: i32;
  var $i47: i64;
  var $p49: ref;
  var $p52: ref;
  var $i53: i32;
  var $p54: ref;
  var $i55: i32;
  var $i56: i1;
  var $p59: ref;
  var $i60: i32;
  var $p61: ref;
  var $i62: i32;
  var $i63: i1;
  var $p66: ref;
  var $i67: i32;
  var $p68: ref;
  var $i69: i32;
  var $i70: i1;
  var $p73: ref;
  var $i74: i32;
  var $p75: ref;
  var $i76: i32;
  var $i77: i1;
  var $p80: ref;
  var $i81: i32;
  var $p82: ref;
  var $i83: i32;
  var $i84: i1;
  var $p87: ref;
  var $i88: i32;
  var $p89: ref;
  var $i90: i32;
  var $i91: i1;
  var $p94: ref;
  var $i95: i32;
  var $p96: ref;
  var $i97: i32;
  var $i98: i1;
  var $p101: ref;
  var $i102: i32;
  var $p103: ref;
  var $i104: i32;
  var $i105: i1;
  var $p108: ref;
  var $i109: i32;
  var $p110: ref;
  var $i111: i32;
  var $i112: i1;
  var $p115: ref;
  var $i116: i32;
  var $p117: ref;
  var $i118: i32;
  var $i119: i1;
  var $p122: ref;
  var $i123: i32;
  var $p124: ref;
  var $i125: i32;
  var $i126: i1;
  var $p129: ref;
  var $i130: i32;
  var $p131: ref;
  var $i132: i32;
  var $i133: i1;
  var $p136: ref;
  var $i137: i32;
  var $p138: ref;
  var $i139: i32;
  var $i140: i1;
  var $p143: ref;
  var $i144: i32;
  var $p145: ref;
  var $i146: i32;
  var $i147: i1;
  var $p150: ref;
  var $i151: i32;
  var $p152: ref;
  var $i153: i32;
  var $i154: i1;
  var $p157: ref;
  var $i158: i32;
  var $p159: ref;
  var $i160: i32;
  var $i161: i1;
  var $p164: ref;
  var $i165: i32;
  var $p166: ref;
  var $i167: i32;
  var $i168: i1;
  var $p171: ref;
  var $i172: i32;
  var $p173: ref;
  var $i174: i32;
  var $i175: i1;
  var $p178: ref;
  var $i179: i32;
  var $p180: ref;
  var $i181: i32;
  var $i182: i1;
  var $p185: ref;
  var $i186: i32;
  var $p187: ref;
  var $i188: i32;
  var $i189: i1;
  var $p192: ref;
  var $i193: i32;
  var $p194: ref;
  var $i195: i32;
  var $i196: i1;
  var $p199: ref;
  var $i200: i32;
  var $p201: ref;
  var $i202: i32;
  var $i203: i1;
  var $p206: ref;
  var $i207: i32;
  var $p208: ref;
  var $i209: i32;
  var $i210: i1;
  var $p213: ref;
  var $i214: i32;
  var $p215: ref;
  var $i216: i32;
  var $i217: i1;
  var $p220: ref;
  var $i221: i32;
  var $p222: ref;
  var $i223: i32;
  var $i224: i1;
  var $p227: ref;
  var $i228: i32;
  var $p229: ref;
  var $i230: i32;
  var $i231: i1;
  var $p234: ref;
  var $i235: i32;
  var $p236: ref;
  var $i237: i32;
  var $i238: i1;
  var $p241: ref;
  var $i242: i32;
  var $p243: ref;
  var $i244: i32;
  var $i245: i1;
  var $p248: ref;
  var $i249: i32;
  var $p250: ref;
  var $i251: i32;
  var $i252: i1;
  var $p255: ref;
  var $i256: i32;
  var $p257: ref;
  var $i258: i32;
  var $i259: i1;
  var $p262: ref;
  var $i263: i32;
  var $p264: ref;
  var $i265: i32;
  var $i266: i1;
  var $p269: ref;
  var $i270: i32;
  var $p271: ref;
  var $i272: i32;
  var $i273: i1;
  var $p276: ref;
  var $i277: i32;
  var $p278: ref;
  var $i279: i32;
  var $i280: i1;
  var $p283: ref;
  var $i284: i32;
  var $p285: ref;
  var $i286: i32;
  var $i287: i1;
  var $p290: ref;
  var $i291: i32;
  var $p292: ref;
  var $i293: i32;
  var $i294: i1;
  var $p297: ref;
  var $i298: i32;
  var $p299: ref;
  var $i300: i32;
  var $i301: i1;
  var $p304: ref;
  var $i305: i32;
  var $p306: ref;
  var $i307: i32;
  var $i308: i1;
  var $p311: ref;
  var $i312: i32;
  var $p313: ref;
  var $i314: i32;
  var $i315: i1;
  var $p318: ref;
  var $i319: i32;
  var $p320: ref;
  var $i321: i32;
  var $i322: i1;
  var $p325: ref;
  var $i326: i32;
  var $p327: ref;
  var $i328: i32;
  var $i329: i1;
  var $p332: ref;
  var $i333: i32;
  var $p334: ref;
  var $i335: i32;
  var $i336: i1;
  var $p339: ref;
  var $i340: i32;
  var $p341: ref;
  var $i342: i32;
  var $i343: i1;
  var $p346: ref;
  var $i347: i32;
  var $p348: ref;
  var $i349: i32;
  var $i350: i1;
  var $p353: ref;
  var $i354: i32;
  var $p355: ref;
  var $i356: i32;
  var $i357: i1;
  var $p360: ref;
  var $i361: i32;
  var $p362: ref;
  var $i363: i32;
  var $i364: i1;
  var $p367: ref;
  var $i368: i32;
  var $p369: ref;
  var $i370: i32;
  var $i371: i1;
  var $p374: ref;
  var $i375: i32;
  var $p376: ref;
  var $i377: i32;
  var $i378: i1;
  var $p381: ref;
  var $i382: i32;
  var $p383: ref;
  var $i384: i32;
  var $i385: i1;
  var $p388: ref;
  var $i389: i32;
  var $p390: ref;
  var $i391: i32;
  var $i392: i1;
  var $p395: ref;
  var $i396: i32;
  var $p397: ref;
  var $i398: i32;
  var $i399: i1;
  var $p402: ref;
  var $i403: i32;
  var $p404: ref;
  var $i405: i32;
  var $i406: i1;
  var $p409: ref;
  var $i410: i32;
  var $p411: ref;
  var $i412: i32;
  var $i413: i1;
  var $p416: ref;
  var $i417: i32;
  var $p418: ref;
  var $i419: i32;
  var $i420: i1;
  var $p423: ref;
  var $i424: i32;
  var $p425: ref;
  var $i426: i32;
  var $i427: i1;
  var $p430: ref;
  var $i431: i32;
  var $p432: ref;
  var $i433: i32;
  var $i434: i1;
  var vslice_dummy_var_63: i64;
  var vslice_dummy_var_64: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7047;

  corral_source_split_7047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 946} $p2 := hcd_to_priv($p0);
    goto corral_source_split_7048;

  corral_source_split_7048:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_7049;

  corral_source_split_7049:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_7050;

  corral_source_split_7050:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_7051;

  corral_source_split_7051:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_7055;

  corral_source_split_7055:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_7056;

  corral_source_split_7056:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_7057;

  corral_source_split_7057:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_7058;

  corral_source_split_7058:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i9, $i11);
    goto corral_source_split_7059;

  corral_source_split_7059:
    assume {:verifier.code 0} true;
    $i13 := 0;
    assume true;
    goto $bb7, $bb9;

  $bb9:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(1, 12)), $mul.ref(0, 1));
    goto corral_source_split_7086;

  corral_source_split_7086:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.0, $p52);
    goto corral_source_split_7087;

  corral_source_split_7087:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_7088;

  corral_source_split_7088:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    goto corral_source_split_7089;

  corral_source_split_7089:
    assume {:verifier.code 0} true;
    $i56 := $eq.i32($i53, $i55);
    goto corral_source_split_7090;

  corral_source_split_7090:
    assume {:verifier.code 0} true;
    $i13 := 1;
    assume {:branchcond $i56} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(2, 12)), $mul.ref(0, 1));
    goto corral_source_split_7113;

  corral_source_split_7113:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.0, $p59);
    goto corral_source_split_7114;

  corral_source_split_7114:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_7115;

  corral_source_split_7115:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.0, $p61);
    goto corral_source_split_7116;

  corral_source_split_7116:
    assume {:verifier.code 0} true;
    $i63 := $eq.i32($i60, $i62);
    goto corral_source_split_7117;

  corral_source_split_7117:
    assume {:verifier.code 0} true;
    $i13 := 2;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(3, 12)), $mul.ref(0, 1));
    goto corral_source_split_7119;

  corral_source_split_7119:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.0, $p66);
    goto corral_source_split_7120;

  corral_source_split_7120:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_7121;

  corral_source_split_7121:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.0, $p68);
    goto corral_source_split_7122;

  corral_source_split_7122:
    assume {:verifier.code 0} true;
    $i70 := $eq.i32($i67, $i69);
    goto corral_source_split_7123;

  corral_source_split_7123:
    assume {:verifier.code 0} true;
    $i13 := 3;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(4, 12)), $mul.ref(0, 1));
    goto corral_source_split_7125;

  corral_source_split_7125:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.0, $p73);
    goto corral_source_split_7126;

  corral_source_split_7126:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_7127;

  corral_source_split_7127:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.0, $p75);
    goto corral_source_split_7128;

  corral_source_split_7128:
    assume {:verifier.code 0} true;
    $i77 := $eq.i32($i74, $i76);
    goto corral_source_split_7129;

  corral_source_split_7129:
    assume {:verifier.code 0} true;
    $i13 := 4;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(5, 12)), $mul.ref(0, 1));
    goto corral_source_split_7131;

  corral_source_split_7131:
    assume {:verifier.code 0} true;
    $i81 := $load.i32($M.0, $p80);
    goto corral_source_split_7132;

  corral_source_split_7132:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_7133;

  corral_source_split_7133:
    assume {:verifier.code 0} true;
    $i83 := $load.i32($M.0, $p82);
    goto corral_source_split_7134;

  corral_source_split_7134:
    assume {:verifier.code 0} true;
    $i84 := $eq.i32($i81, $i83);
    goto corral_source_split_7135;

  corral_source_split_7135:
    assume {:verifier.code 0} true;
    $i13 := 5;
    assume {:branchcond $i84} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(6, 12)), $mul.ref(0, 1));
    goto corral_source_split_7137;

  corral_source_split_7137:
    assume {:verifier.code 0} true;
    $i88 := $load.i32($M.0, $p87);
    goto corral_source_split_7138;

  corral_source_split_7138:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_7139;

  corral_source_split_7139:
    assume {:verifier.code 0} true;
    $i90 := $load.i32($M.0, $p89);
    goto corral_source_split_7140;

  corral_source_split_7140:
    assume {:verifier.code 0} true;
    $i91 := $eq.i32($i88, $i90);
    goto corral_source_split_7141;

  corral_source_split_7141:
    assume {:verifier.code 0} true;
    $i13 := 6;
    assume {:branchcond $i91} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(7, 12)), $mul.ref(0, 1));
    goto corral_source_split_7143;

  corral_source_split_7143:
    assume {:verifier.code 0} true;
    $i95 := $load.i32($M.0, $p94);
    goto corral_source_split_7144;

  corral_source_split_7144:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_7145;

  corral_source_split_7145:
    assume {:verifier.code 0} true;
    $i97 := $load.i32($M.0, $p96);
    goto corral_source_split_7146;

  corral_source_split_7146:
    assume {:verifier.code 0} true;
    $i98 := $eq.i32($i95, $i97);
    goto corral_source_split_7147;

  corral_source_split_7147:
    assume {:verifier.code 0} true;
    $i13 := 7;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(8, 12)), $mul.ref(0, 1));
    goto corral_source_split_7149;

  corral_source_split_7149:
    assume {:verifier.code 0} true;
    $i102 := $load.i32($M.0, $p101);
    goto corral_source_split_7150;

  corral_source_split_7150:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_7151;

  corral_source_split_7151:
    assume {:verifier.code 0} true;
    $i104 := $load.i32($M.0, $p103);
    goto corral_source_split_7152;

  corral_source_split_7152:
    assume {:verifier.code 0} true;
    $i105 := $eq.i32($i102, $i104);
    goto corral_source_split_7153;

  corral_source_split_7153:
    assume {:verifier.code 0} true;
    $i13 := 8;
    assume {:branchcond $i105} true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(9, 12)), $mul.ref(0, 1));
    goto corral_source_split_7155;

  corral_source_split_7155:
    assume {:verifier.code 0} true;
    $i109 := $load.i32($M.0, $p108);
    goto corral_source_split_7156;

  corral_source_split_7156:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_7157;

  corral_source_split_7157:
    assume {:verifier.code 0} true;
    $i111 := $load.i32($M.0, $p110);
    goto corral_source_split_7158;

  corral_source_split_7158:
    assume {:verifier.code 0} true;
    $i112 := $eq.i32($i109, $i111);
    goto corral_source_split_7159;

  corral_source_split_7159:
    assume {:verifier.code 0} true;
    $i13 := 9;
    assume {:branchcond $i112} true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i112 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(10, 12)), $mul.ref(0, 1));
    goto corral_source_split_7161;

  corral_source_split_7161:
    assume {:verifier.code 0} true;
    $i116 := $load.i32($M.0, $p115);
    goto corral_source_split_7162;

  corral_source_split_7162:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_7163;

  corral_source_split_7163:
    assume {:verifier.code 0} true;
    $i118 := $load.i32($M.0, $p117);
    goto corral_source_split_7164;

  corral_source_split_7164:
    assume {:verifier.code 0} true;
    $i119 := $eq.i32($i116, $i118);
    goto corral_source_split_7165;

  corral_source_split_7165:
    assume {:verifier.code 0} true;
    $i13 := 10;
    assume {:branchcond $i119} true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(11, 12)), $mul.ref(0, 1));
    goto corral_source_split_7167;

  corral_source_split_7167:
    assume {:verifier.code 0} true;
    $i123 := $load.i32($M.0, $p122);
    goto corral_source_split_7168;

  corral_source_split_7168:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_7169;

  corral_source_split_7169:
    assume {:verifier.code 0} true;
    $i125 := $load.i32($M.0, $p124);
    goto corral_source_split_7170;

  corral_source_split_7170:
    assume {:verifier.code 0} true;
    $i126 := $eq.i32($i123, $i125);
    goto corral_source_split_7171;

  corral_source_split_7171:
    assume {:verifier.code 0} true;
    $i13 := 11;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(12, 12)), $mul.ref(0, 1));
    goto corral_source_split_7173;

  corral_source_split_7173:
    assume {:verifier.code 0} true;
    $i130 := $load.i32($M.0, $p129);
    goto corral_source_split_7174;

  corral_source_split_7174:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_7175;

  corral_source_split_7175:
    assume {:verifier.code 0} true;
    $i132 := $load.i32($M.0, $p131);
    goto corral_source_split_7176;

  corral_source_split_7176:
    assume {:verifier.code 0} true;
    $i133 := $eq.i32($i130, $i132);
    goto corral_source_split_7177;

  corral_source_split_7177:
    assume {:verifier.code 0} true;
    $i13 := 12;
    assume {:branchcond $i133} true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i133 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(13, 12)), $mul.ref(0, 1));
    goto corral_source_split_7179;

  corral_source_split_7179:
    assume {:verifier.code 0} true;
    $i137 := $load.i32($M.0, $p136);
    goto corral_source_split_7180;

  corral_source_split_7180:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_7181;

  corral_source_split_7181:
    assume {:verifier.code 0} true;
    $i139 := $load.i32($M.0, $p138);
    goto corral_source_split_7182;

  corral_source_split_7182:
    assume {:verifier.code 0} true;
    $i140 := $eq.i32($i137, $i139);
    goto corral_source_split_7183;

  corral_source_split_7183:
    assume {:verifier.code 0} true;
    $i13 := 13;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i140 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(14, 12)), $mul.ref(0, 1));
    goto corral_source_split_7185;

  corral_source_split_7185:
    assume {:verifier.code 0} true;
    $i144 := $load.i32($M.0, $p143);
    goto corral_source_split_7186;

  corral_source_split_7186:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_7187;

  corral_source_split_7187:
    assume {:verifier.code 0} true;
    $i146 := $load.i32($M.0, $p145);
    goto corral_source_split_7188;

  corral_source_split_7188:
    assume {:verifier.code 0} true;
    $i147 := $eq.i32($i144, $i146);
    goto corral_source_split_7189;

  corral_source_split_7189:
    assume {:verifier.code 0} true;
    $i13 := 14;
    assume {:branchcond $i147} true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i147 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(15, 12)), $mul.ref(0, 1));
    goto corral_source_split_7191;

  corral_source_split_7191:
    assume {:verifier.code 0} true;
    $i151 := $load.i32($M.0, $p150);
    goto corral_source_split_7192;

  corral_source_split_7192:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_7193;

  corral_source_split_7193:
    assume {:verifier.code 0} true;
    $i153 := $load.i32($M.0, $p152);
    goto corral_source_split_7194;

  corral_source_split_7194:
    assume {:verifier.code 0} true;
    $i154 := $eq.i32($i151, $i153);
    goto corral_source_split_7195;

  corral_source_split_7195:
    assume {:verifier.code 0} true;
    $i13 := 15;
    assume {:branchcond $i154} true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i154 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(16, 12)), $mul.ref(0, 1));
    goto corral_source_split_7197;

  corral_source_split_7197:
    assume {:verifier.code 0} true;
    $i158 := $load.i32($M.0, $p157);
    goto corral_source_split_7198;

  corral_source_split_7198:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_7199;

  corral_source_split_7199:
    assume {:verifier.code 0} true;
    $i160 := $load.i32($M.0, $p159);
    goto corral_source_split_7200;

  corral_source_split_7200:
    assume {:verifier.code 0} true;
    $i161 := $eq.i32($i158, $i160);
    goto corral_source_split_7201;

  corral_source_split_7201:
    assume {:verifier.code 0} true;
    $i13 := 16;
    assume {:branchcond $i161} true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i161 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(17, 12)), $mul.ref(0, 1));
    goto corral_source_split_7203;

  corral_source_split_7203:
    assume {:verifier.code 0} true;
    $i165 := $load.i32($M.0, $p164);
    goto corral_source_split_7204;

  corral_source_split_7204:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_7205;

  corral_source_split_7205:
    assume {:verifier.code 0} true;
    $i167 := $load.i32($M.0, $p166);
    goto corral_source_split_7206;

  corral_source_split_7206:
    assume {:verifier.code 0} true;
    $i168 := $eq.i32($i165, $i167);
    goto corral_source_split_7207;

  corral_source_split_7207:
    assume {:verifier.code 0} true;
    $i13 := 17;
    assume true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i168 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(18, 12)), $mul.ref(0, 1));
    goto corral_source_split_7209;

  corral_source_split_7209:
    assume {:verifier.code 0} true;
    $i172 := $load.i32($M.0, $p171);
    goto corral_source_split_7210;

  corral_source_split_7210:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_7211;

  corral_source_split_7211:
    assume {:verifier.code 0} true;
    $i174 := $load.i32($M.0, $p173);
    goto corral_source_split_7212;

  corral_source_split_7212:
    assume {:verifier.code 0} true;
    $i175 := $eq.i32($i172, $i174);
    goto corral_source_split_7213;

  corral_source_split_7213:
    assume {:verifier.code 0} true;
    $i13 := 18;
    assume {:branchcond $i175} true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i175 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(19, 12)), $mul.ref(0, 1));
    goto corral_source_split_7215;

  corral_source_split_7215:
    assume {:verifier.code 0} true;
    $i179 := $load.i32($M.0, $p178);
    goto corral_source_split_7216;

  corral_source_split_7216:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_7217;

  corral_source_split_7217:
    assume {:verifier.code 0} true;
    $i181 := $load.i32($M.0, $p180);
    goto corral_source_split_7218;

  corral_source_split_7218:
    assume {:verifier.code 0} true;
    $i182 := $eq.i32($i179, $i181);
    goto corral_source_split_7219;

  corral_source_split_7219:
    assume {:verifier.code 0} true;
    $i13 := 19;
    assume {:branchcond $i182} true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i182 == 1);
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(20, 12)), $mul.ref(0, 1));
    goto corral_source_split_7221;

  corral_source_split_7221:
    assume {:verifier.code 0} true;
    $i186 := $load.i32($M.0, $p185);
    goto corral_source_split_7222;

  corral_source_split_7222:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_7223;

  corral_source_split_7223:
    assume {:verifier.code 0} true;
    $i188 := $load.i32($M.0, $p187);
    goto corral_source_split_7224;

  corral_source_split_7224:
    assume {:verifier.code 0} true;
    $i189 := $eq.i32($i186, $i188);
    goto corral_source_split_7225;

  corral_source_split_7225:
    assume {:verifier.code 0} true;
    $i13 := 20;
    assume {:branchcond $i189} true;
    goto $bb95, $bb96;

  $bb96:
    assume !($i189 == 1);
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(21, 12)), $mul.ref(0, 1));
    goto corral_source_split_7227;

  corral_source_split_7227:
    assume {:verifier.code 0} true;
    $i193 := $load.i32($M.0, $p192);
    goto corral_source_split_7228;

  corral_source_split_7228:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_7229;

  corral_source_split_7229:
    assume {:verifier.code 0} true;
    $i195 := $load.i32($M.0, $p194);
    goto corral_source_split_7230;

  corral_source_split_7230:
    assume {:verifier.code 0} true;
    $i196 := $eq.i32($i193, $i195);
    goto corral_source_split_7231;

  corral_source_split_7231:
    assume {:verifier.code 0} true;
    $i13 := 21;
    assume {:branchcond $i196} true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i196 == 1);
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(22, 12)), $mul.ref(0, 1));
    goto corral_source_split_7233;

  corral_source_split_7233:
    assume {:verifier.code 0} true;
    $i200 := $load.i32($M.0, $p199);
    goto corral_source_split_7234;

  corral_source_split_7234:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_7235;

  corral_source_split_7235:
    assume {:verifier.code 0} true;
    $i202 := $load.i32($M.0, $p201);
    goto corral_source_split_7236;

  corral_source_split_7236:
    assume {:verifier.code 0} true;
    $i203 := $eq.i32($i200, $i202);
    goto corral_source_split_7237;

  corral_source_split_7237:
    assume {:verifier.code 0} true;
    $i13 := 22;
    assume {:branchcond $i203} true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i203 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(23, 12)), $mul.ref(0, 1));
    goto corral_source_split_7239;

  corral_source_split_7239:
    assume {:verifier.code 0} true;
    $i207 := $load.i32($M.0, $p206);
    goto corral_source_split_7240;

  corral_source_split_7240:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_7241;

  corral_source_split_7241:
    assume {:verifier.code 0} true;
    $i209 := $load.i32($M.0, $p208);
    goto corral_source_split_7242;

  corral_source_split_7242:
    assume {:verifier.code 0} true;
    $i210 := $eq.i32($i207, $i209);
    goto corral_source_split_7243;

  corral_source_split_7243:
    assume {:verifier.code 0} true;
    $i13 := 23;
    assume {:branchcond $i210} true;
    goto $bb107, $bb108;

  $bb108:
    assume !($i210 == 1);
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(24, 12)), $mul.ref(0, 1));
    goto corral_source_split_7245;

  corral_source_split_7245:
    assume {:verifier.code 0} true;
    $i214 := $load.i32($M.0, $p213);
    goto corral_source_split_7246;

  corral_source_split_7246:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_7247;

  corral_source_split_7247:
    assume {:verifier.code 0} true;
    $i216 := $load.i32($M.0, $p215);
    goto corral_source_split_7248;

  corral_source_split_7248:
    assume {:verifier.code 0} true;
    $i217 := $eq.i32($i214, $i216);
    goto corral_source_split_7249;

  corral_source_split_7249:
    assume {:verifier.code 0} true;
    $i13 := 24;
    assume {:branchcond $i217} true;
    goto $bb111, $bb112;

  $bb112:
    assume !($i217 == 1);
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(25, 12)), $mul.ref(0, 1));
    goto corral_source_split_7251;

  corral_source_split_7251:
    assume {:verifier.code 0} true;
    $i221 := $load.i32($M.0, $p220);
    goto corral_source_split_7252;

  corral_source_split_7252:
    assume {:verifier.code 0} true;
    $p222 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_7253;

  corral_source_split_7253:
    assume {:verifier.code 0} true;
    $i223 := $load.i32($M.0, $p222);
    goto corral_source_split_7254;

  corral_source_split_7254:
    assume {:verifier.code 0} true;
    $i224 := $eq.i32($i221, $i223);
    goto corral_source_split_7255;

  corral_source_split_7255:
    assume {:verifier.code 0} true;
    $i13 := 25;
    assume {:branchcond $i224} true;
    goto $bb115, $bb116;

  $bb116:
    assume !($i224 == 1);
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    $p227 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(26, 12)), $mul.ref(0, 1));
    goto corral_source_split_7257;

  corral_source_split_7257:
    assume {:verifier.code 0} true;
    $i228 := $load.i32($M.0, $p227);
    goto corral_source_split_7258;

  corral_source_split_7258:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_7259;

  corral_source_split_7259:
    assume {:verifier.code 0} true;
    $i230 := $load.i32($M.0, $p229);
    goto corral_source_split_7260;

  corral_source_split_7260:
    assume {:verifier.code 0} true;
    $i231 := $eq.i32($i228, $i230);
    goto corral_source_split_7261;

  corral_source_split_7261:
    assume {:verifier.code 0} true;
    $i13 := 26;
    assume {:branchcond $i231} true;
    goto $bb119, $bb120;

  $bb120:
    assume !($i231 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(27, 12)), $mul.ref(0, 1));
    goto corral_source_split_7263;

  corral_source_split_7263:
    assume {:verifier.code 0} true;
    $i235 := $load.i32($M.0, $p234);
    goto corral_source_split_7264;

  corral_source_split_7264:
    assume {:verifier.code 0} true;
    $p236 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_7265;

  corral_source_split_7265:
    assume {:verifier.code 0} true;
    $i237 := $load.i32($M.0, $p236);
    goto corral_source_split_7266;

  corral_source_split_7266:
    assume {:verifier.code 0} true;
    $i238 := $eq.i32($i235, $i237);
    goto corral_source_split_7267;

  corral_source_split_7267:
    assume {:verifier.code 0} true;
    $i13 := 27;
    assume {:branchcond $i238} true;
    goto $bb123, $bb124;

  $bb124:
    assume !($i238 == 1);
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    $p241 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(28, 12)), $mul.ref(0, 1));
    goto corral_source_split_7269;

  corral_source_split_7269:
    assume {:verifier.code 0} true;
    $i242 := $load.i32($M.0, $p241);
    goto corral_source_split_7270;

  corral_source_split_7270:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_7271;

  corral_source_split_7271:
    assume {:verifier.code 0} true;
    $i244 := $load.i32($M.0, $p243);
    goto corral_source_split_7272;

  corral_source_split_7272:
    assume {:verifier.code 0} true;
    $i245 := $eq.i32($i242, $i244);
    goto corral_source_split_7273;

  corral_source_split_7273:
    assume {:verifier.code 0} true;
    $i13 := 28;
    assume {:branchcond $i245} true;
    goto $bb127, $bb128;

  $bb128:
    assume !($i245 == 1);
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    $p248 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(29, 12)), $mul.ref(0, 1));
    goto corral_source_split_7275;

  corral_source_split_7275:
    assume {:verifier.code 0} true;
    $i249 := $load.i32($M.0, $p248);
    goto corral_source_split_7276;

  corral_source_split_7276:
    assume {:verifier.code 0} true;
    $p250 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_7277;

  corral_source_split_7277:
    assume {:verifier.code 0} true;
    $i251 := $load.i32($M.0, $p250);
    goto corral_source_split_7278;

  corral_source_split_7278:
    assume {:verifier.code 0} true;
    $i252 := $eq.i32($i249, $i251);
    goto corral_source_split_7279;

  corral_source_split_7279:
    assume {:verifier.code 0} true;
    $i13 := 29;
    assume {:branchcond $i252} true;
    goto $bb131, $bb132;

  $bb132:
    assume !($i252 == 1);
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    $p255 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(30, 12)), $mul.ref(0, 1));
    goto corral_source_split_7281;

  corral_source_split_7281:
    assume {:verifier.code 0} true;
    $i256 := $load.i32($M.0, $p255);
    goto corral_source_split_7282;

  corral_source_split_7282:
    assume {:verifier.code 0} true;
    $p257 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_7283;

  corral_source_split_7283:
    assume {:verifier.code 0} true;
    $i258 := $load.i32($M.0, $p257);
    goto corral_source_split_7284;

  corral_source_split_7284:
    assume {:verifier.code 0} true;
    $i259 := $eq.i32($i256, $i258);
    goto corral_source_split_7285;

  corral_source_split_7285:
    assume {:verifier.code 0} true;
    $i13 := 30;
    assume {:branchcond $i259} true;
    goto $bb135, $bb136;

  $bb136:
    assume !($i259 == 1);
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    $p262 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(31, 12)), $mul.ref(0, 1));
    goto corral_source_split_7287;

  corral_source_split_7287:
    assume {:verifier.code 0} true;
    $i263 := $load.i32($M.0, $p262);
    goto corral_source_split_7288;

  corral_source_split_7288:
    assume {:verifier.code 0} true;
    $p264 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_7289;

  corral_source_split_7289:
    assume {:verifier.code 0} true;
    $i265 := $load.i32($M.0, $p264);
    goto corral_source_split_7290;

  corral_source_split_7290:
    assume {:verifier.code 0} true;
    $i266 := $eq.i32($i263, $i265);
    goto corral_source_split_7291;

  corral_source_split_7291:
    assume {:verifier.code 0} true;
    $i13 := 31;
    assume {:branchcond $i266} true;
    goto $bb139, $bb140;

  $bb140:
    assume !($i266 == 1);
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    $p269 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(32, 12)), $mul.ref(0, 1));
    goto corral_source_split_7293;

  corral_source_split_7293:
    assume {:verifier.code 0} true;
    $i270 := $load.i32($M.0, $p269);
    goto corral_source_split_7294;

  corral_source_split_7294:
    assume {:verifier.code 0} true;
    $p271 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_7295;

  corral_source_split_7295:
    assume {:verifier.code 0} true;
    $i272 := $load.i32($M.0, $p271);
    goto corral_source_split_7296;

  corral_source_split_7296:
    assume {:verifier.code 0} true;
    $i273 := $eq.i32($i270, $i272);
    goto corral_source_split_7297;

  corral_source_split_7297:
    assume {:verifier.code 0} true;
    $i13 := 32;
    assume {:branchcond $i273} true;
    goto $bb143, $bb144;

  $bb144:
    assume !($i273 == 1);
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    $p276 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(33, 12)), $mul.ref(0, 1));
    goto corral_source_split_7299;

  corral_source_split_7299:
    assume {:verifier.code 0} true;
    $i277 := $load.i32($M.0, $p276);
    goto corral_source_split_7300;

  corral_source_split_7300:
    assume {:verifier.code 0} true;
    $p278 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_7301;

  corral_source_split_7301:
    assume {:verifier.code 0} true;
    $i279 := $load.i32($M.0, $p278);
    goto corral_source_split_7302;

  corral_source_split_7302:
    assume {:verifier.code 0} true;
    $i280 := $eq.i32($i277, $i279);
    goto corral_source_split_7303;

  corral_source_split_7303:
    assume {:verifier.code 0} true;
    $i13 := 33;
    assume true;
    goto $bb147, $bb148;

  $bb148:
    assume !($i280 == 1);
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    $p283 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(34, 12)), $mul.ref(0, 1));
    goto corral_source_split_7305;

  corral_source_split_7305:
    assume {:verifier.code 0} true;
    $i284 := $load.i32($M.0, $p283);
    goto corral_source_split_7306;

  corral_source_split_7306:
    assume {:verifier.code 0} true;
    $p285 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_7307;

  corral_source_split_7307:
    assume {:verifier.code 0} true;
    $i286 := $load.i32($M.0, $p285);
    goto corral_source_split_7308;

  corral_source_split_7308:
    assume {:verifier.code 0} true;
    $i287 := $eq.i32($i284, $i286);
    goto corral_source_split_7309;

  corral_source_split_7309:
    assume {:verifier.code 0} true;
    $i13 := 34;
    assume {:branchcond $i287} true;
    goto $bb151, $bb152;

  $bb152:
    assume !($i287 == 1);
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    $p290 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(35, 12)), $mul.ref(0, 1));
    goto corral_source_split_7311;

  corral_source_split_7311:
    assume {:verifier.code 0} true;
    $i291 := $load.i32($M.0, $p290);
    goto corral_source_split_7312;

  corral_source_split_7312:
    assume {:verifier.code 0} true;
    $p292 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_7313;

  corral_source_split_7313:
    assume {:verifier.code 0} true;
    $i293 := $load.i32($M.0, $p292);
    goto corral_source_split_7314;

  corral_source_split_7314:
    assume {:verifier.code 0} true;
    $i294 := $eq.i32($i291, $i293);
    goto corral_source_split_7315;

  corral_source_split_7315:
    assume {:verifier.code 0} true;
    $i13 := 35;
    assume {:branchcond $i294} true;
    goto $bb155, $bb156;

  $bb156:
    assume !($i294 == 1);
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    $p297 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(36, 12)), $mul.ref(0, 1));
    goto corral_source_split_7317;

  corral_source_split_7317:
    assume {:verifier.code 0} true;
    $i298 := $load.i32($M.0, $p297);
    goto corral_source_split_7318;

  corral_source_split_7318:
    assume {:verifier.code 0} true;
    $p299 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_7319;

  corral_source_split_7319:
    assume {:verifier.code 0} true;
    $i300 := $load.i32($M.0, $p299);
    goto corral_source_split_7320;

  corral_source_split_7320:
    assume {:verifier.code 0} true;
    $i301 := $eq.i32($i298, $i300);
    goto corral_source_split_7321;

  corral_source_split_7321:
    assume {:verifier.code 0} true;
    $i13 := 36;
    assume {:branchcond $i301} true;
    goto $bb159, $bb160;

  $bb160:
    assume !($i301 == 1);
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb161:
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb162:
    assume {:verifier.code 0} true;
    $p304 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(37, 12)), $mul.ref(0, 1));
    goto corral_source_split_7323;

  corral_source_split_7323:
    assume {:verifier.code 0} true;
    $i305 := $load.i32($M.0, $p304);
    goto corral_source_split_7324;

  corral_source_split_7324:
    assume {:verifier.code 0} true;
    $p306 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_7325;

  corral_source_split_7325:
    assume {:verifier.code 0} true;
    $i307 := $load.i32($M.0, $p306);
    goto corral_source_split_7326;

  corral_source_split_7326:
    assume {:verifier.code 0} true;
    $i308 := $eq.i32($i305, $i307);
    goto corral_source_split_7327;

  corral_source_split_7327:
    assume {:verifier.code 0} true;
    $i13 := 37;
    assume {:branchcond $i308} true;
    goto $bb163, $bb164;

  $bb164:
    assume !($i308 == 1);
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    $p311 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(38, 12)), $mul.ref(0, 1));
    goto corral_source_split_7329;

  corral_source_split_7329:
    assume {:verifier.code 0} true;
    $i312 := $load.i32($M.0, $p311);
    goto corral_source_split_7330;

  corral_source_split_7330:
    assume {:verifier.code 0} true;
    $p313 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_7331;

  corral_source_split_7331:
    assume {:verifier.code 0} true;
    $i314 := $load.i32($M.0, $p313);
    goto corral_source_split_7332;

  corral_source_split_7332:
    assume {:verifier.code 0} true;
    $i315 := $eq.i32($i312, $i314);
    goto corral_source_split_7333;

  corral_source_split_7333:
    assume {:verifier.code 0} true;
    $i13 := 38;
    assume {:branchcond $i315} true;
    goto $bb167, $bb168;

  $bb168:
    assume !($i315 == 1);
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb170:
    assume {:verifier.code 0} true;
    $p318 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(39, 12)), $mul.ref(0, 1));
    goto corral_source_split_7335;

  corral_source_split_7335:
    assume {:verifier.code 0} true;
    $i319 := $load.i32($M.0, $p318);
    goto corral_source_split_7336;

  corral_source_split_7336:
    assume {:verifier.code 0} true;
    $p320 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_7337;

  corral_source_split_7337:
    assume {:verifier.code 0} true;
    $i321 := $load.i32($M.0, $p320);
    goto corral_source_split_7338;

  corral_source_split_7338:
    assume {:verifier.code 0} true;
    $i322 := $eq.i32($i319, $i321);
    goto corral_source_split_7339;

  corral_source_split_7339:
    assume {:verifier.code 0} true;
    $i13 := 39;
    assume {:branchcond $i322} true;
    goto $bb171, $bb172;

  $bb172:
    assume !($i322 == 1);
    assume {:verifier.code 0} true;
    goto $bb173;

  $bb173:
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    $p325 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(40, 12)), $mul.ref(0, 1));
    goto corral_source_split_7341;

  corral_source_split_7341:
    assume {:verifier.code 0} true;
    $i326 := $load.i32($M.0, $p325);
    goto corral_source_split_7342;

  corral_source_split_7342:
    assume {:verifier.code 0} true;
    $p327 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_7343;

  corral_source_split_7343:
    assume {:verifier.code 0} true;
    $i328 := $load.i32($M.0, $p327);
    goto corral_source_split_7344;

  corral_source_split_7344:
    assume {:verifier.code 0} true;
    $i329 := $eq.i32($i326, $i328);
    goto corral_source_split_7345;

  corral_source_split_7345:
    assume {:verifier.code 0} true;
    $i13 := 40;
    assume {:branchcond $i329} true;
    goto $bb175, $bb176;

  $bb176:
    assume !($i329 == 1);
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    $p332 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(41, 12)), $mul.ref(0, 1));
    goto corral_source_split_7347;

  corral_source_split_7347:
    assume {:verifier.code 0} true;
    $i333 := $load.i32($M.0, $p332);
    goto corral_source_split_7348;

  corral_source_split_7348:
    assume {:verifier.code 0} true;
    $p334 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_7349;

  corral_source_split_7349:
    assume {:verifier.code 0} true;
    $i335 := $load.i32($M.0, $p334);
    goto corral_source_split_7350;

  corral_source_split_7350:
    assume {:verifier.code 0} true;
    $i336 := $eq.i32($i333, $i335);
    goto corral_source_split_7351;

  corral_source_split_7351:
    assume {:verifier.code 0} true;
    $i13 := 41;
    assume {:branchcond $i336} true;
    goto $bb179, $bb180;

  $bb180:
    assume !($i336 == 1);
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb181:
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb182:
    assume {:verifier.code 0} true;
    $p339 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(42, 12)), $mul.ref(0, 1));
    goto corral_source_split_7353;

  corral_source_split_7353:
    assume {:verifier.code 0} true;
    $i340 := $load.i32($M.0, $p339);
    goto corral_source_split_7354;

  corral_source_split_7354:
    assume {:verifier.code 0} true;
    $p341 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_7355;

  corral_source_split_7355:
    assume {:verifier.code 0} true;
    $i342 := $load.i32($M.0, $p341);
    goto corral_source_split_7356;

  corral_source_split_7356:
    assume {:verifier.code 0} true;
    $i343 := $eq.i32($i340, $i342);
    goto corral_source_split_7357;

  corral_source_split_7357:
    assume {:verifier.code 0} true;
    $i13 := 42;
    assume {:branchcond $i343} true;
    goto $bb183, $bb184;

  $bb184:
    assume !($i343 == 1);
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    $p346 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(43, 12)), $mul.ref(0, 1));
    goto corral_source_split_7359;

  corral_source_split_7359:
    assume {:verifier.code 0} true;
    $i347 := $load.i32($M.0, $p346);
    goto corral_source_split_7360;

  corral_source_split_7360:
    assume {:verifier.code 0} true;
    $p348 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_7361;

  corral_source_split_7361:
    assume {:verifier.code 0} true;
    $i349 := $load.i32($M.0, $p348);
    goto corral_source_split_7362;

  corral_source_split_7362:
    assume {:verifier.code 0} true;
    $i350 := $eq.i32($i347, $i349);
    goto corral_source_split_7363;

  corral_source_split_7363:
    assume {:verifier.code 0} true;
    $i13 := 43;
    assume {:branchcond $i350} true;
    goto $bb187, $bb188;

  $bb188:
    assume !($i350 == 1);
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb189:
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb190:
    assume {:verifier.code 0} true;
    $p353 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(44, 12)), $mul.ref(0, 1));
    goto corral_source_split_7365;

  corral_source_split_7365:
    assume {:verifier.code 0} true;
    $i354 := $load.i32($M.0, $p353);
    goto corral_source_split_7366;

  corral_source_split_7366:
    assume {:verifier.code 0} true;
    $p355 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_7367;

  corral_source_split_7367:
    assume {:verifier.code 0} true;
    $i356 := $load.i32($M.0, $p355);
    goto corral_source_split_7368;

  corral_source_split_7368:
    assume {:verifier.code 0} true;
    $i357 := $eq.i32($i354, $i356);
    goto corral_source_split_7369;

  corral_source_split_7369:
    assume {:verifier.code 0} true;
    $i13 := 44;
    assume {:branchcond $i357} true;
    goto $bb191, $bb192;

  $bb192:
    assume !($i357 == 1);
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb193:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb194:
    assume {:verifier.code 0} true;
    $p360 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(45, 12)), $mul.ref(0, 1));
    goto corral_source_split_7371;

  corral_source_split_7371:
    assume {:verifier.code 0} true;
    $i361 := $load.i32($M.0, $p360);
    goto corral_source_split_7372;

  corral_source_split_7372:
    assume {:verifier.code 0} true;
    $p362 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_7373;

  corral_source_split_7373:
    assume {:verifier.code 0} true;
    $i363 := $load.i32($M.0, $p362);
    goto corral_source_split_7374;

  corral_source_split_7374:
    assume {:verifier.code 0} true;
    $i364 := $eq.i32($i361, $i363);
    goto corral_source_split_7375;

  corral_source_split_7375:
    assume {:verifier.code 0} true;
    $i13 := 45;
    assume {:branchcond $i364} true;
    goto $bb195, $bb196;

  $bb196:
    assume !($i364 == 1);
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb197:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    $p367 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(46, 12)), $mul.ref(0, 1));
    goto corral_source_split_7377;

  corral_source_split_7377:
    assume {:verifier.code 0} true;
    $i368 := $load.i32($M.0, $p367);
    goto corral_source_split_7378;

  corral_source_split_7378:
    assume {:verifier.code 0} true;
    $p369 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_7379;

  corral_source_split_7379:
    assume {:verifier.code 0} true;
    $i370 := $load.i32($M.0, $p369);
    goto corral_source_split_7380;

  corral_source_split_7380:
    assume {:verifier.code 0} true;
    $i371 := $eq.i32($i368, $i370);
    goto corral_source_split_7381;

  corral_source_split_7381:
    assume {:verifier.code 0} true;
    $i13 := 46;
    assume {:branchcond $i371} true;
    goto $bb199, $bb200;

  $bb200:
    assume !($i371 == 1);
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb201:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb202:
    assume {:verifier.code 0} true;
    $p374 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(47, 12)), $mul.ref(0, 1));
    goto corral_source_split_7383;

  corral_source_split_7383:
    assume {:verifier.code 0} true;
    $i375 := $load.i32($M.0, $p374);
    goto corral_source_split_7384;

  corral_source_split_7384:
    assume {:verifier.code 0} true;
    $p376 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_7385;

  corral_source_split_7385:
    assume {:verifier.code 0} true;
    $i377 := $load.i32($M.0, $p376);
    goto corral_source_split_7386;

  corral_source_split_7386:
    assume {:verifier.code 0} true;
    $i378 := $eq.i32($i375, $i377);
    goto corral_source_split_7387;

  corral_source_split_7387:
    assume {:verifier.code 0} true;
    $i13 := 47;
    assume {:branchcond $i378} true;
    goto $bb203, $bb204;

  $bb204:
    assume !($i378 == 1);
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb205:
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb206:
    assume {:verifier.code 0} true;
    $p381 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(48, 12)), $mul.ref(0, 1));
    goto corral_source_split_7389;

  corral_source_split_7389:
    assume {:verifier.code 0} true;
    $i382 := $load.i32($M.0, $p381);
    goto corral_source_split_7390;

  corral_source_split_7390:
    assume {:verifier.code 0} true;
    $p383 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_7391;

  corral_source_split_7391:
    assume {:verifier.code 0} true;
    $i384 := $load.i32($M.0, $p383);
    goto corral_source_split_7392;

  corral_source_split_7392:
    assume {:verifier.code 0} true;
    $i385 := $eq.i32($i382, $i384);
    goto corral_source_split_7393;

  corral_source_split_7393:
    assume {:verifier.code 0} true;
    $i13 := 48;
    assume {:branchcond $i385} true;
    goto $bb207, $bb208;

  $bb208:
    assume !($i385 == 1);
    assume {:verifier.code 0} true;
    goto $bb209;

  $bb209:
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb210:
    assume {:verifier.code 0} true;
    $p388 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(49, 12)), $mul.ref(0, 1));
    goto corral_source_split_7395;

  corral_source_split_7395:
    assume {:verifier.code 0} true;
    $i389 := $load.i32($M.0, $p388);
    goto corral_source_split_7396;

  corral_source_split_7396:
    assume {:verifier.code 0} true;
    $p390 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_7397;

  corral_source_split_7397:
    assume {:verifier.code 0} true;
    $i391 := $load.i32($M.0, $p390);
    goto corral_source_split_7398;

  corral_source_split_7398:
    assume {:verifier.code 0} true;
    $i392 := $eq.i32($i389, $i391);
    goto corral_source_split_7399;

  corral_source_split_7399:
    assume {:verifier.code 0} true;
    $i13 := 49;
    assume {:branchcond $i392} true;
    goto $bb211, $bb212;

  $bb212:
    assume !($i392 == 1);
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb213:
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb214:
    assume {:verifier.code 0} true;
    $p395 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(50, 12)), $mul.ref(0, 1));
    goto corral_source_split_7401;

  corral_source_split_7401:
    assume {:verifier.code 0} true;
    $i396 := $load.i32($M.0, $p395);
    goto corral_source_split_7402;

  corral_source_split_7402:
    assume {:verifier.code 0} true;
    $p397 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_7403;

  corral_source_split_7403:
    assume {:verifier.code 0} true;
    $i398 := $load.i32($M.0, $p397);
    goto corral_source_split_7404;

  corral_source_split_7404:
    assume {:verifier.code 0} true;
    $i399 := $eq.i32($i396, $i398);
    goto corral_source_split_7405;

  corral_source_split_7405:
    assume {:verifier.code 0} true;
    $i13 := 50;
    assume {:branchcond $i399} true;
    goto $bb215, $bb216;

  $bb216:
    assume !($i399 == 1);
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb217:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb218:
    assume {:verifier.code 0} true;
    $p402 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(51, 12)), $mul.ref(0, 1));
    goto corral_source_split_7407;

  corral_source_split_7407:
    assume {:verifier.code 0} true;
    $i403 := $load.i32($M.0, $p402);
    goto corral_source_split_7408;

  corral_source_split_7408:
    assume {:verifier.code 0} true;
    $p404 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_7409;

  corral_source_split_7409:
    assume {:verifier.code 0} true;
    $i405 := $load.i32($M.0, $p404);
    goto corral_source_split_7410;

  corral_source_split_7410:
    assume {:verifier.code 0} true;
    $i406 := $eq.i32($i403, $i405);
    goto corral_source_split_7411;

  corral_source_split_7411:
    assume {:verifier.code 0} true;
    $i13 := 51;
    assume {:branchcond $i406} true;
    goto $bb219, $bb220;

  $bb220:
    assume !($i406 == 1);
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb221:
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb222:
    assume {:verifier.code 0} true;
    $p409 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(52, 12)), $mul.ref(0, 1));
    goto corral_source_split_7413;

  corral_source_split_7413:
    assume {:verifier.code 0} true;
    $i410 := $load.i32($M.0, $p409);
    goto corral_source_split_7414;

  corral_source_split_7414:
    assume {:verifier.code 0} true;
    $p411 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_7415;

  corral_source_split_7415:
    assume {:verifier.code 0} true;
    $i412 := $load.i32($M.0, $p411);
    goto corral_source_split_7416;

  corral_source_split_7416:
    assume {:verifier.code 0} true;
    $i413 := $eq.i32($i410, $i412);
    goto corral_source_split_7417;

  corral_source_split_7417:
    assume {:verifier.code 0} true;
    $i13 := 52;
    assume {:branchcond $i413} true;
    goto $bb223, $bb224;

  $bb224:
    assume !($i413 == 1);
    assume {:verifier.code 0} true;
    goto $bb225;

  $bb225:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb226:
    assume {:verifier.code 0} true;
    $p416 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(53, 12)), $mul.ref(0, 1));
    goto corral_source_split_7419;

  corral_source_split_7419:
    assume {:verifier.code 0} true;
    $i417 := $load.i32($M.0, $p416);
    goto corral_source_split_7420;

  corral_source_split_7420:
    assume {:verifier.code 0} true;
    $p418 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_7421;

  corral_source_split_7421:
    assume {:verifier.code 0} true;
    $i419 := $load.i32($M.0, $p418);
    goto corral_source_split_7422;

  corral_source_split_7422:
    assume {:verifier.code 0} true;
    $i420 := $eq.i32($i417, $i419);
    goto corral_source_split_7423;

  corral_source_split_7423:
    assume {:verifier.code 0} true;
    $i13 := 53;
    assume {:branchcond $i420} true;
    goto $bb227, $bb228;

  $bb228:
    assume !($i420 == 1);
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb229:
    assume {:verifier.code 0} true;
    goto $bb230;

  $bb230:
    assume {:verifier.code 0} true;
    $p423 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(54, 12)), $mul.ref(0, 1));
    goto corral_source_split_7425;

  corral_source_split_7425:
    assume {:verifier.code 0} true;
    $i424 := $load.i32($M.0, $p423);
    goto corral_source_split_7426;

  corral_source_split_7426:
    assume {:verifier.code 0} true;
    $p425 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_7427;

  corral_source_split_7427:
    assume {:verifier.code 0} true;
    $i426 := $load.i32($M.0, $p425);
    goto corral_source_split_7428;

  corral_source_split_7428:
    assume {:verifier.code 0} true;
    $i427 := $eq.i32($i424, $i426);
    goto corral_source_split_7429;

  corral_source_split_7429:
    assume {:verifier.code 0} true;
    $i13 := 54;
    assume {:branchcond $i427} true;
    goto $bb231, $bb232;

  $bb232:
    assume !($i427 == 1);
    assume {:verifier.code 0} true;
    goto $bb233;

  $bb233:
    assume {:verifier.code 0} true;
    goto $bb234;

  $bb234:
    assume {:verifier.code 0} true;
    $p430 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref(55, 12)), $mul.ref(0, 1));
    goto corral_source_split_7431;

  corral_source_split_7431:
    assume {:verifier.code 0} true;
    $i431 := $load.i32($M.0, $p430);
    goto corral_source_split_7432;

  corral_source_split_7432:
    assume {:verifier.code 0} true;
    $p432 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_7433;

  corral_source_split_7433:
    assume {:verifier.code 0} true;
    $i433 := $load.i32($M.0, $p432);
    goto corral_source_split_7434;

  corral_source_split_7434:
    assume {:verifier.code 0} true;
    $i434 := $eq.i32($i431, $i433);
    goto corral_source_split_7435;

  corral_source_split_7435:
    assume {:verifier.code 0} true;
    $i13 := 55;
    assume {:branchcond $i434} true;
    goto $bb235, $bb236;

  $bb236:
    assume !($i434 == 1);
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb237:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_7092;

  corral_source_split_7092:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_7093;

  corral_source_split_7093:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_7094;

  corral_source_split_7094:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_7095;

  corral_source_split_7095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 952} dev_err.ref.ref.ref.i32($p37, .str.39, .str.40, $i39);
    goto corral_source_split_7096;

  corral_source_split_7096:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32(1, 0);
    goto corral_source_split_7097;

  corral_source_split_7097:
    assume {:verifier.code 0} true;
    $i41 := $zext.i1.i32($i40);
    goto corral_source_split_7098;

  corral_source_split_7098:
    assume {:verifier.code 0} true;
    $i42 := $sext.i32.i64($i41);
    goto corral_source_split_7099;

  corral_source_split_7099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 953} $i43 := ldv__builtin_expect($i42, 0);
    call {:si_unique_call 954} {:cexpr "tmp___1"} boogie_si_record_i64($i43);
    goto corral_source_split_7100;

  corral_source_split_7100:
    assume {:verifier.code 0} true;
    $i44 := $ne.i64($i43, 0);
    goto corral_source_split_7101;

  corral_source_split_7101:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32(1, 0);
    goto corral_source_split_7106;

  corral_source_split_7106:
    assume {:verifier.code 0} true;
    $i46 := $zext.i1.i32($i45);
    goto corral_source_split_7107;

  corral_source_split_7107:
    assume {:verifier.code 0} true;
    $i47 := $sext.i32.i64($i46);
    goto corral_source_split_7108;

  corral_source_split_7108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 956} vslice_dummy_var_64 := ldv__builtin_expect($i47, 0);
    goto corral_source_split_7109;

  corral_source_split_7109:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_7110;

  corral_source_split_7110:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p49, 0);
    goto corral_source_split_7111;

  corral_source_split_7111:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb16:
    assume $i44 == 1;
    goto corral_source_split_7103;

  corral_source_split_7103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 955} warn_slowpath_null(.str.29, 374);
    goto corral_source_split_7104;

  corral_source_split_7104:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb235:
    assume {:verifier.code 0} true;
    assume $i434 == 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_7061;

  corral_source_split_7061:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_7062;

  corral_source_split_7062:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i14, 12)), $mul.ref(8, 1));
    goto corral_source_split_7063;

  corral_source_split_7063:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_7064;

  corral_source_split_7064:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_7065;

  corral_source_split_7065:
    assume {:verifier.code 0} true;
    $i20 := $zext.i1.i32($i19);
    call {:si_unique_call 947} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i20);
    goto corral_source_split_7066;

  corral_source_split_7066:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_7067;

  corral_source_split_7067:
    assume {:verifier.code 0} true;
    $i22 := $zext.i1.i32($i21);
    goto corral_source_split_7068;

  corral_source_split_7068:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i22);
    goto corral_source_split_7069;

  corral_source_split_7069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 948} $i24 := ldv__builtin_expect($i23, 0);
    call {:si_unique_call 949} {:cexpr "tmp___0"} boogie_si_record_i64($i24);
    goto corral_source_split_7070;

  corral_source_split_7070:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_7071;

  corral_source_split_7071:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i20, 0);
    goto corral_source_split_7076;

  corral_source_split_7076:
    assume {:verifier.code 0} true;
    $i27 := $zext.i1.i32($i26);
    goto corral_source_split_7077;

  corral_source_split_7077:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64($i27);
    goto corral_source_split_7078;

  corral_source_split_7078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 951} vslice_dummy_var_63 := ldv__builtin_expect($i28, 0);
    goto corral_source_split_7079;

  corral_source_split_7079:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64($i13);
    goto corral_source_split_7080;

  corral_source_split_7080:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1636, 1)), $mul.ref($i30, 12)), $mul.ref(8, 1));
    goto corral_source_split_7081;

  corral_source_split_7081:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, 1);
    goto corral_source_split_7082;

  corral_source_split_7082:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_7083;

  corral_source_split_7083:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, 0);
    goto corral_source_split_7084;

  corral_source_split_7084:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i25 == 1;
    goto corral_source_split_7073;

  corral_source_split_7073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 950} warn_slowpath_null(.str.29, 365);
    goto corral_source_split_7074;

  corral_source_split_7074:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb231:
    assume {:verifier.code 0} true;
    assume $i427 == 1;
    goto $bb8;

  $bb227:
    assume {:verifier.code 0} true;
    assume $i420 == 1;
    goto $bb8;

  $bb223:
    assume {:verifier.code 0} true;
    assume $i413 == 1;
    goto $bb8;

  $bb219:
    assume {:verifier.code 0} true;
    assume $i406 == 1;
    goto $bb8;

  $bb215:
    assume {:verifier.code 0} true;
    assume $i399 == 1;
    goto $bb8;

  $bb211:
    assume {:verifier.code 0} true;
    assume $i392 == 1;
    goto $bb8;

  $bb207:
    assume {:verifier.code 0} true;
    assume $i385 == 1;
    goto $bb8;

  $bb203:
    assume {:verifier.code 0} true;
    assume $i378 == 1;
    goto $bb8;

  $bb199:
    assume {:verifier.code 0} true;
    assume $i371 == 1;
    goto $bb8;

  $bb195:
    assume {:verifier.code 0} true;
    assume $i364 == 1;
    goto $bb8;

  $bb191:
    assume {:verifier.code 0} true;
    assume $i357 == 1;
    goto $bb8;

  $bb187:
    assume {:verifier.code 0} true;
    assume $i350 == 1;
    goto $bb8;

  $bb183:
    assume {:verifier.code 0} true;
    assume $i343 == 1;
    goto $bb8;

  $bb179:
    assume {:verifier.code 0} true;
    assume $i336 == 1;
    goto $bb8;

  $bb175:
    assume {:verifier.code 0} true;
    assume $i329 == 1;
    goto $bb8;

  $bb171:
    assume {:verifier.code 0} true;
    assume $i322 == 1;
    goto $bb8;

  $bb167:
    assume {:verifier.code 0} true;
    assume $i315 == 1;
    goto $bb8;

  $bb163:
    assume {:verifier.code 0} true;
    assume $i308 == 1;
    goto $bb8;

  $bb159:
    assume {:verifier.code 0} true;
    assume $i301 == 1;
    goto $bb8;

  $bb155:
    assume {:verifier.code 0} true;
    assume $i294 == 1;
    goto $bb8;

  $bb151:
    assume {:verifier.code 0} true;
    assume $i287 == 1;
    goto $bb8;

  $bb147:
    assume {:verifier.code 0} true;
    assume $i280 == 1;
    goto $bb8;

  $bb143:
    assume {:verifier.code 0} true;
    assume $i273 == 1;
    goto $bb8;

  $bb139:
    assume {:verifier.code 0} true;
    assume $i266 == 1;
    goto $bb8;

  $bb135:
    assume {:verifier.code 0} true;
    assume $i259 == 1;
    goto $bb8;

  $bb131:
    assume {:verifier.code 0} true;
    assume $i252 == 1;
    goto $bb8;

  $bb127:
    assume {:verifier.code 0} true;
    assume $i245 == 1;
    goto $bb8;

  $bb123:
    assume {:verifier.code 0} true;
    assume $i238 == 1;
    goto $bb8;

  $bb119:
    assume {:verifier.code 0} true;
    assume $i231 == 1;
    goto $bb8;

  $bb115:
    assume {:verifier.code 0} true;
    assume $i224 == 1;
    goto $bb8;

  $bb111:
    assume {:verifier.code 0} true;
    assume $i217 == 1;
    goto $bb8;

  $bb107:
    assume {:verifier.code 0} true;
    assume $i210 == 1;
    goto $bb8;

  $bb103:
    assume {:verifier.code 0} true;
    assume $i203 == 1;
    goto $bb8;

  $bb99:
    assume {:verifier.code 0} true;
    assume $i196 == 1;
    goto $bb8;

  $bb95:
    assume {:verifier.code 0} true;
    assume $i189 == 1;
    goto $bb8;

  $bb91:
    assume {:verifier.code 0} true;
    assume $i182 == 1;
    goto $bb8;

  $bb87:
    assume {:verifier.code 0} true;
    assume $i175 == 1;
    goto $bb8;

  $bb83:
    assume {:verifier.code 0} true;
    assume $i168 == 1;
    goto $bb8;

  $bb79:
    assume {:verifier.code 0} true;
    assume $i161 == 1;
    goto $bb8;

  $bb75:
    assume {:verifier.code 0} true;
    assume $i154 == 1;
    goto $bb8;

  $bb71:
    assume {:verifier.code 0} true;
    assume $i147 == 1;
    goto $bb8;

  $bb67:
    assume {:verifier.code 0} true;
    assume $i140 == 1;
    goto $bb8;

  $bb63:
    assume {:verifier.code 0} true;
    assume $i133 == 1;
    goto $bb8;

  $bb59:
    assume {:verifier.code 0} true;
    assume $i126 == 1;
    goto $bb8;

  $bb55:
    assume {:verifier.code 0} true;
    assume $i119 == 1;
    goto $bb8;

  $bb51:
    assume {:verifier.code 0} true;
    assume $i112 == 1;
    goto $bb8;

  $bb47:
    assume {:verifier.code 0} true;
    assume $i105 == 1;
    goto $bb8;

  $bb43:
    assume {:verifier.code 0} true;
    assume $i98 == 1;
    goto $bb8;

  $bb39:
    assume {:verifier.code 0} true;
    assume $i91 == 1;
    goto $bb8;

  $bb35:
    assume {:verifier.code 0} true;
    assume $i84 == 1;
    goto $bb8;

  $bb31:
    assume {:verifier.code 0} true;
    assume $i77 == 1;
    goto $bb8;

  $bb27:
    assume {:verifier.code 0} true;
    assume $i70 == 1;
    goto $bb8;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i63 == 1;
    goto $bb8;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i56 == 1;
    goto $bb8;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb8;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_7053;

  corral_source_split_7053:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const kmem_cache_zalloc: ref;

axiom kmem_cache_zalloc == $sub.ref(0, 407143);

procedure kmem_cache_zalloc($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation kmem_cache_zalloc($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 957} {:cexpr "kmem_cache_zalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_7437;

  corral_source_split_7437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 958} ldv_check_alloc_flags($i1);
    goto SeqInstr_211, SeqInstr_212;

  SeqInstr_212:
    assume assertsPassed;
    goto SeqInstr_213;

  SeqInstr_213:
    goto corral_source_split_7438;

  corral_source_split_7438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 959} $p2 := ldv_undef_ptr();
    goto corral_source_split_7439;

  corral_source_split_7439:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  SeqInstr_211:
    assume !assertsPassed;
    return;
}



const qtd_free: ref;

axiom qtd_free == $sub.ref(0, 408175);

procedure qtd_free($p0: ref);
  free requires assertsPassed;



implementation qtd_free($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $i10: i1;
  var $i11: i32;
  var $i12: i64;
  var $p14: ref;
  var $p15: ref;
  var vslice_dummy_var_65: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7441;

  corral_source_split_7441:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_7442;

  corral_source_split_7442:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_7443;

  corral_source_split_7443:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_7444;

  corral_source_split_7444:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    call {:si_unique_call 960} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i4);
    goto corral_source_split_7445;

  corral_source_split_7445:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_7446;

  corral_source_split_7446:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_7447;

  corral_source_split_7447:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_7448;

  corral_source_split_7448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 961} $i8 := ldv__builtin_expect($i7, 0);
    call {:si_unique_call 962} {:cexpr "tmp"} boogie_si_record_i64($i8);
    goto corral_source_split_7449;

  corral_source_split_7449:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_7450;

  corral_source_split_7450:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i4, 0);
    goto corral_source_split_7455;

  corral_source_split_7455:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    goto corral_source_split_7456;

  corral_source_split_7456:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_7457;

  corral_source_split_7457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 964} vslice_dummy_var_65 := ldv__builtin_expect($i12, 0);
    goto corral_source_split_7458;

  corral_source_split_7458:
    assume {:verifier.code 0} true;
    $p14 := $M.37;
    goto corral_source_split_7459;

  corral_source_split_7459:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p0);
    goto corral_source_split_7460;

  corral_source_split_7460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 965} kmem_cache_free($p14, $p15);
    goto corral_source_split_7461;

  corral_source_split_7461:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_7452;

  corral_source_split_7452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 963} warn_slowpath_null(.str.29, 716);
    goto corral_source_split_7453;

  corral_source_split_7453:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const bank_reads8: ref;

axiom bank_reads8 == $sub.ref(0, 409207);

procedure bank_reads8($p0: ref, $i1: i32, $i2: i32, $p3: ref, $i4: i32);
  free requires assertsPassed;
  modifies $M.0, $M.38, $CurrAddr, $M.1, $M.32, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.30, $M.36, $M.40, $M.23, $M.22, $M.25, $M.24, $M.27, $M.26, $M.29, $M.28, $M.2, $M.4, $M.6, $M.8, $M.3, $M.5, $M.7, $M.9, assertsPassed;



implementation bank_reads8($p0: ref, $i1: i32, $i2: i32, $p3: ref, $i4: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i64;
  var $p9: ref;
  var $i10: i1;
  var $i11: i1;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;
  var $i23: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $i30: i1;
  var $p37: ref;
  var $i38: i32;
  var $i39: i32;
  var $p40: ref;
  var $p41: ref;
  var $i42: i1;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $i43: i32;
  var $p44: ref;
  var $p45: ref;
  var $i31: i32;
  var $p32: ref;
  var $p33: ref;
  var $i27: i32;
  var $p28: ref;
  var $p29: ref;
  var $i46: i1;
  var $i47: i1;
  var $p48: ref;
  var $i49: i32;
  var $p50: ref;
  var $i51: i32;
  var $i54: i1;
  var $i58: i8;
  var $p59: ref;
  var $p60: ref;
  var $i61: i32;
  var $i62: i1;
  var $p55: ref;
  var $p56: ref;
  var $i57: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 966} $p5 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 967} {:cexpr "bank_reads8:arg:src_offset"} boogie_si_record_i32($i1);
    call {:si_unique_call 968} {:cexpr "bank_reads8:arg:bank_addr"} boogie_si_record_i32($i2);
    call {:si_unique_call 969} {:cexpr "bank_reads8:arg:bytes"} boogie_si_record_i32($i4);
    goto corral_source_split_7463;

  corral_source_split_7463:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_7464;

  corral_source_split_7464:
    assume {:verifier.code 0} true;
    $i7 := $or.i32($i2, $i1);
    goto corral_source_split_7465;

  corral_source_split_7465:
    assume {:verifier.code 0} true;
    $i8 := $zext.i32.i64($i7);
    goto corral_source_split_7466;

  corral_source_split_7466:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p6, $mul.ref($i8, 4));
    goto corral_source_split_7467;

  corral_source_split_7467:
    assume {:verifier.code 0} true;
    $i10 := $ule.i32($i1, 4095);
    goto corral_source_split_7468;

  corral_source_split_7468:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    goto corral_source_split_7473;

  corral_source_split_7473:
    assume {:verifier.code 0} true;
    $i30 := $ugt.i32($i4, 3);
    goto corral_source_split_7474;

  corral_source_split_7474:
    assume {:verifier.code 0} true;
    $i31, $p32, $p33 := $i4, $p3, $p9;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i27, $p28, $p29 := $i31, $p32, $p33;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7490;

  corral_source_split_7490:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i27, 0);
    goto corral_source_split_7491;

  corral_source_split_7491:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i47 := $ule.i32($i1, 4095);
    goto corral_source_split_7509;

  corral_source_split_7509:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i47 == 1);
    goto corral_source_split_7516;

  corral_source_split_7516:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p29);
    goto corral_source_split_7517;

  corral_source_split_7517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 975} $i51 := __readl($p50);
    goto SeqInstr_223, SeqInstr_224;

  SeqInstr_224:
    assume assertsPassed;
    goto SeqInstr_225;

  SeqInstr_225:
    goto corral_source_split_7518;

  corral_source_split_7518:
    assume {:verifier.code 0} true;
    $M.38 := $store.i32($M.38, $p5, $i51);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_7520;

  corral_source_split_7520:
    assume {:verifier.code 0} true;
    goto corral_source_split_7521;

  corral_source_split_7521:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i27, 0);
    goto corral_source_split_7522;

  corral_source_split_7522:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i54 == 1);
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    return;

  $bb27:
    assume $i54 == 1;
    goto corral_source_split_7524;

  corral_source_split_7524:
    assume {:verifier.code 0} true;
    $p55, $p56, $i57 := $p28, $p5, $i27;
    goto $bb30;

  $bb30:
    call $i58, $p59, $p60, $i61, $i62, $p55, $p56, $i57 := bank_reads8_loop_$bb30($i58, $p59, $p60, $i61, $i62, $p55, $p56, $i57);
    goto $bb30_last;

  corral_source_split_7526:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i58 := $load.i8($M.38, $p56);
    goto corral_source_split_7528;

  corral_source_split_7528:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p55, $i58);
    goto corral_source_split_7529;

  corral_source_split_7529:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($p55, $mul.ref(1, 1));
    goto corral_source_split_7530;

  corral_source_split_7530:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($p56, $mul.ref(1, 1));
    goto corral_source_split_7531;

  corral_source_split_7531:
    assume {:verifier.code 0} true;
    $i61 := $sub.i32($i57, 1);
    call {:si_unique_call 976} {:cexpr "bytes"} boogie_si_record_i32($i61);
    goto corral_source_split_7532;

  corral_source_split_7532:
    assume {:verifier.code 0} true;
    $i62 := $ne.i32($i61, 0);
    goto corral_source_split_7533;

  corral_source_split_7533:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i62 == 1);
    goto corral_source_split_7535;

  corral_source_split_7535:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb32:
    assume $i62 == 1;
    assume {:verifier.code 0} true;
    $p55, $p56, $i57 := $p59, $p60, $i61;
    goto $bb32_dummy;

  SeqInstr_223:
    assume !assertsPassed;
    return;

  $bb24:
    assume $i47 == 1;
    goto corral_source_split_7511;

  corral_source_split_7511:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p29);
    goto corral_source_split_7512;

  corral_source_split_7512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 974} $i49 := __readl($p48);
    goto SeqInstr_220, SeqInstr_221;

  SeqInstr_221:
    assume assertsPassed;
    goto SeqInstr_222;

  SeqInstr_222:
    goto corral_source_split_7513;

  corral_source_split_7513:
    assume {:verifier.code 0} true;
    $M.38 := $store.i32($M.38, $p5, $i49);
    goto corral_source_split_7514;

  corral_source_split_7514:
    assume {:verifier.code 0} true;
    goto $bb26;

  SeqInstr_220:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i46 == 1;
    goto corral_source_split_7507;

  corral_source_split_7507:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb12:
    assume $i30 == 1;
    goto corral_source_split_7493;

  corral_source_split_7493:
    assume {:verifier.code 0} true;
    $p34, $p35, $i36 := $p9, $p3, $i4;
    goto $bb15;

  $bb15:
    call $p37, $i38, $i39, $p40, $p41, $i42, $p34, $p35, $i36, $i43, $p44, $p45 := bank_reads8_loop_$bb15($p37, $i38, $i39, $p40, $p41, $i42, $p34, $p35, $i36, $i43, $p44, $p45);
    goto $bb15_last;

  corral_source_split_7495:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p34);
    goto corral_source_split_7497;

  corral_source_split_7497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 972} $i38 := __readl($p37);
    goto SeqInstr_217, SeqInstr_218;

  SeqInstr_218:
    assume assertsPassed;
    goto SeqInstr_219;

  SeqInstr_219:
    goto corral_source_split_7498;

  corral_source_split_7498:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p35, $i38);
    goto corral_source_split_7499;

  corral_source_split_7499:
    assume {:verifier.code 0} true;
    $i39 := $sub.i32($i36, 4);
    call {:si_unique_call 973} {:cexpr "bytes"} boogie_si_record_i32($i39);
    goto corral_source_split_7500;

  corral_source_split_7500:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($p34, $mul.ref(1, 4));
    goto corral_source_split_7501;

  corral_source_split_7501:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($p35, $mul.ref(1, 4));
    goto corral_source_split_7502;

  corral_source_split_7502:
    assume {:verifier.code 0} true;
    $i42 := $ugt.i32($i39, 3);
    goto corral_source_split_7503;

  corral_source_split_7503:
    assume {:verifier.code 0} true;
    $i43, $p44, $p45 := $i39, $p41, $p40;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7505;

  corral_source_split_7505:
    assume {:verifier.code 0} true;
    $i31, $p32, $p33 := $i43, $p44, $p45;
    goto $bb14;

  $bb17:
    assume $i42 == 1;
    assume {:verifier.code 0} true;
    $p34, $p35, $i36 := $p40, $p41, $i39;
    goto $bb17_dummy;

  SeqInstr_217:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_7470;

  corral_source_split_7470:
    assume {:verifier.code 0} true;
    $i11 := $ugt.i32($i4, 3);
    goto corral_source_split_7471;

  corral_source_split_7471:
    assume {:verifier.code 0} true;
    $i12, $p13, $p14 := $i4, $p3, $p9;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i27, $p28, $p29 := $i12, $p13, $p14;
    goto $bb11;

  $bb3:
    assume $i11 == 1;
    goto corral_source_split_7476;

  corral_source_split_7476:
    assume {:verifier.code 0} true;
    $p15, $p16, $i17 := $p9, $p3, $i4;
    goto $bb6;

  $bb6:
    call $p18, $i19, $i20, $p21, $p22, $i23, $p15, $p16, $i17, $i24, $p25, $p26 := bank_reads8_loop_$bb6($p18, $i19, $i20, $p21, $p22, $i23, $p15, $p16, $i17, $i24, $p25, $p26);
    goto $bb6_last;

  corral_source_split_7478:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p15);
    goto corral_source_split_7480;

  corral_source_split_7480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 970} $i19 := __readl($p18);
    goto SeqInstr_214, SeqInstr_215;

  SeqInstr_215:
    assume assertsPassed;
    goto SeqInstr_216;

  SeqInstr_216:
    goto corral_source_split_7481;

  corral_source_split_7481:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, $i19);
    goto corral_source_split_7482;

  corral_source_split_7482:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32($i17, 4);
    call {:si_unique_call 971} {:cexpr "bytes"} boogie_si_record_i32($i20);
    goto corral_source_split_7483;

  corral_source_split_7483:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p15, $mul.ref(1, 4));
    goto corral_source_split_7484;

  corral_source_split_7484:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p16, $mul.ref(1, 4));
    goto corral_source_split_7485;

  corral_source_split_7485:
    assume {:verifier.code 0} true;
    $i23 := $ugt.i32($i20, 3);
    goto corral_source_split_7486;

  corral_source_split_7486:
    assume {:verifier.code 0} true;
    $i24, $p25, $p26 := $i20, $p22, $p21;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7488;

  corral_source_split_7488:
    assume {:verifier.code 0} true;
    $i12, $p13, $p14 := $i24, $p25, $p26;
    goto $bb5;

  $bb8:
    assume $i23 == 1;
    assume {:verifier.code 0} true;
    $p15, $p16, $i17 := $p21, $p22, $i20;
    goto $bb8_dummy;

  SeqInstr_214:
    assume !assertsPassed;
    return;

  $bb32_dummy:
    assume false;
    return;

  $bb30_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7526;

  $bb17_dummy:
    assume false;
    return;

  $bb15_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7495;

  $bb8_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7478;
}



const __readl: ref;

axiom __readl == $sub.ref(0, 410239);

procedure __readl($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.0, $M.32, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.30, $M.38, $M.36, $M.40, $M.23, $M.22, $M.25, $M.24, $M.27, $M.26, $M.29, $M.28, $CurrAddr, $M.2, $M.4, $M.6, $M.8, $M.3, $M.5, $M.7, $M.9, assertsPassed;



implementation __readl($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7537;

  corral_source_split_7537:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    call {:si_unique_call 977} $i2 := devirtbounce.6(0, $p1);
    goto SeqInstr_226, SeqInstr_227;

  SeqInstr_227:
    assume assertsPassed;
    goto SeqInstr_228;

  SeqInstr_228:
    call {:si_unique_call 978} {:cexpr "ret"} boogie_si_record_i32($i2);
    goto corral_source_split_7538;

  corral_source_split_7538:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_226:
    assume !assertsPassed;
    return;
}



const isp1760_hub_descriptor: ref;

axiom isp1760_hub_descriptor == $sub.ref(0, 411271);

procedure isp1760_hub_descriptor($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation isp1760_hub_descriptor($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i8;
  var $p9: ref;
  var $i10: i32;
  var $i11: i16;
  var $i12: i32;
  var $i13: i32;
  var $i14: i16;
  var $i15: i8;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $i19: i8;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $p31: ref;
  var $i32: i64;
  var $p33: ref;
  var $i34: i32;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $i38: i32;
  var $i39: i16;
  var $i41: i32;
  var $i42: i32;
  var $i43: i16;
  var $i40: i16;
  var $p44: ref;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7540;

  corral_source_split_7540:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(8, 1));
    goto corral_source_split_7541;

  corral_source_split_7541:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_7542;

  corral_source_split_7542:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 15);
    call {:si_unique_call 979} {:cexpr "ports"} boogie_si_record_i32($i4);
    goto corral_source_split_7543;

  corral_source_split_7543:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_7544;

  corral_source_split_7544:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p5, 41);
    goto corral_source_split_7545;

  corral_source_split_7545:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(6, 1));
    goto corral_source_split_7546;

  corral_source_split_7546:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p6, 10);
    goto corral_source_split_7547;

  corral_source_split_7547:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(7, 1));
    goto corral_source_split_7548;

  corral_source_split_7548:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p7, 0);
    goto corral_source_split_7549;

  corral_source_split_7549:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i8($i4);
    goto corral_source_split_7550;

  corral_source_split_7550:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_7551;

  corral_source_split_7551:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p9, $i8);
    goto corral_source_split_7552;

  corral_source_split_7552:
    assume {:verifier.code 0} true;
    $i10 := $sdiv.i32($i4, 8);
    goto corral_source_split_7553;

  corral_source_split_7553:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i32.i16($i10);
    goto corral_source_split_7554;

  corral_source_split_7554:
    assume {:verifier.code 0} true;
    $i12 := $zext.i16.i32($i11);
    goto corral_source_split_7555;

  corral_source_split_7555:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i12, 1);
    goto corral_source_split_7556;

  corral_source_split_7556:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i16($i13);
    call {:si_unique_call 980} {:cexpr "temp"} boogie_si_record_i16($i14);
    goto corral_source_split_7557;

  corral_source_split_7557:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i16.i8($i14);
    goto corral_source_split_7558;

  corral_source_split_7558:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_7559;

  corral_source_split_7559:
    assume {:verifier.code 0} true;
    $i17 := $mul.i32($i16, 2);
    goto corral_source_split_7560;

  corral_source_split_7560:
    assume {:verifier.code 0} true;
    $i18 := $add.i32($i17, 7);
    goto corral_source_split_7561;

  corral_source_split_7561:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i8($i18);
    goto corral_source_split_7562;

  corral_source_split_7562:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_7563;

  corral_source_split_7563:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p20, $i19);
    goto corral_source_split_7564;

  corral_source_split_7564:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_7565;

  corral_source_split_7565:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_7566;

  corral_source_split_7566:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_7567;

  corral_source_split_7567:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_7568;

  corral_source_split_7568:
    assume {:verifier.code 0} true;
    $i25 := $zext.i16.i64($i14);
    goto corral_source_split_7569;

  corral_source_split_7569:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_4 := $M.0;
    call {:si_unique_call 981} cmdloc_dummy_var_5 := $memset.i8(cmdloc_dummy_var_4, $p24, 0, $i25, $zext.i32.i64(2), 0 == 1);
    $M.0 := cmdloc_dummy_var_5;
    goto corral_source_split_7570;

  corral_source_split_7570:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_7571;

  corral_source_split_7571:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_7572;

  corral_source_split_7572:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_7573;

  corral_source_split_7573:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_7574;

  corral_source_split_7574:
    assume {:verifier.code 0} true;
    $i30 := $zext.i16.i64($i14);
    goto corral_source_split_7575;

  corral_source_split_7575:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($p29, $mul.ref($i30, 1));
    goto corral_source_split_7576;

  corral_source_split_7576:
    assume {:verifier.code 0} true;
    $i32 := $zext.i16.i64($i14);
    goto corral_source_split_7577;

  corral_source_split_7577:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_6 := $M.0;
    call {:si_unique_call 982} cmdloc_dummy_var_7 := $memset.i8(cmdloc_dummy_var_6, $p31, $sub.i8(0, 1), $i32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_7;
    goto corral_source_split_7578;

  corral_source_split_7578:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 2384)), $mul.ref(8, 1));
    goto corral_source_split_7579;

  corral_source_split_7579:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_7580;

  corral_source_split_7580:
    assume {:verifier.code 0} true;
    $i35 := $and.i32($i34, 16);
    goto corral_source_split_7581;

  corral_source_split_7581:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_7582;

  corral_source_split_7582:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i36 == 1);
    goto corral_source_split_7589;

  corral_source_split_7589:
    assume {:verifier.code 0} true;
    $i41 := $zext.i16.i32(8);
    goto corral_source_split_7590;

  corral_source_split_7590:
    assume {:verifier.code 0} true;
    $i42 := $or.i32($i41, 2);
    goto corral_source_split_7591;

  corral_source_split_7591:
    assume {:verifier.code 0} true;
    $i43 := $trunc.i32.i16($i42);
    call {:si_unique_call 984} {:cexpr "temp"} boogie_si_record_i16($i43);
    assume {:verifier.code 0} true;
    $i40 := $i43;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7593;

  corral_source_split_7593:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_7594;

  corral_source_split_7594:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p44, $i40);
    goto corral_source_split_7595;

  corral_source_split_7595:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i36 == 1;
    goto corral_source_split_7584;

  corral_source_split_7584:
    assume {:verifier.code 0} true;
    $i37 := $zext.i16.i32(8);
    goto corral_source_split_7585;

  corral_source_split_7585:
    assume {:verifier.code 0} true;
    $i38 := $or.i32($i37, 1);
    goto corral_source_split_7586;

  corral_source_split_7586:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i32.i16($i38);
    call {:si_unique_call 983} {:cexpr "temp"} boogie_si_record_i16($i39);
    goto corral_source_split_7587;

  corral_source_split_7587:
    assume {:verifier.code 0} true;
    $i40 := $i39;
    goto $bb3;
}



const ldv_mod_timer_76: ref;

axiom ldv_mod_timer_76 == $sub.ref(0, 412303);

procedure ldv_mod_timer_76($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.23, $M.0, $M.22, $M.25, $M.24, $M.27, $M.26, $M.29, $M.28;



implementation ldv_mod_timer_76($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 985} {:cexpr "ldv_mod_timer_76:arg:ldv_func_arg2"} boogie_si_record_i64($i1);
    goto corral_source_split_7597;

  corral_source_split_7597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 986} $i2 := mod_timer($p0, $i1);
    call {:si_unique_call 987} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_7598;

  corral_source_split_7598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 988} activate_pending_timer_3($p0, $i1, 1);
    goto corral_source_split_7599;

  corral_source_split_7599:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const handshake: ref;

axiom handshake == $sub.ref(0, 413335);

procedure handshake($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.0, $M.32, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.30, $M.38, $M.36, $M.40, $M.23, $M.22, $M.25, $M.24, $M.27, $M.26, $M.29, $M.28, $CurrAddr, $M.2, $M.4, $M.6, $M.8, $M.3, $M.5, $M.7, $M.9, assertsPassed;



implementation handshake($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $i9: i32;
  var $i10: i32;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $i15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 989} {:cexpr "handshake:arg:reg"} boogie_si_record_i32($i1);
    call {:si_unique_call 990} {:cexpr "handshake:arg:mask"} boogie_si_record_i32($i2);
    call {:si_unique_call 991} {:cexpr "handshake:arg:done"} boogie_si_record_i32($i3);
    call {:si_unique_call 992} {:cexpr "handshake:arg:usec"} boogie_si_record_i32($i4);
    goto corral_source_split_7601;

  corral_source_split_7601:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_7602;

  corral_source_split_7602:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_7603;

  corral_source_split_7603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 993} $i7 := reg_read32($p6, $i1);
    goto SeqInstr_229, SeqInstr_230;

  SeqInstr_230:
    assume assertsPassed;
    goto SeqInstr_231;

  SeqInstr_231:
    call {:si_unique_call 994} {:cexpr "result"} boogie_si_record_i32($i7);
    goto corral_source_split_7604;

  corral_source_split_7604:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, $sub.i32(0, 1));
    goto corral_source_split_7605;

  corral_source_split_7605:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i8 == 1);
    goto corral_source_split_7607;

  corral_source_split_7607:
    assume {:verifier.code 0} true;
    $i9, $i10 := $i7, $i4;
    goto $bb4;

  $bb4:
    call $i11, $p12, $i13, $i14, $i9, $i10, $i16, $i17, $i18, $i19 := handshake_loop_$bb4($i1, $i2, $i3, $p5, $i11, $p12, $i13, $i14, $i9, $i10, $i16, $i17, $i18, $i19);
    goto $bb4_last;

  $bb9:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i9, $i2);
    call {:si_unique_call 997} {:cexpr "result"} boogie_si_record_i32($i16);
    goto corral_source_split_7618;

  corral_source_split_7618:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, $i3);
    goto corral_source_split_7619;

  corral_source_split_7619:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 998} __const_udelay(4295);
    goto corral_source_split_7623;

  corral_source_split_7623:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32($i10, 1);
    call {:si_unique_call 999} {:cexpr "usec"} boogie_si_record_i32($i18);
    goto corral_source_split_7624;

  corral_source_split_7624:
    assume {:verifier.code 0} true;
    $i19 := $sgt.i32($i18, 0);
    goto corral_source_split_7625;

  corral_source_split_7625:
    assume {:verifier.code 0} true;
    $i11 := $i18;
    assume true;
    goto $bb5, $bb13;

  $bb13:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 110);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_7616;

  corral_source_split_7616:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb5:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_7609;

  corral_source_split_7609:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p5);
    goto corral_source_split_7610;

  corral_source_split_7610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 995} $i13 := reg_read32($p12, $i1);
    goto SeqInstr_232, SeqInstr_233;

  SeqInstr_233:
    assume assertsPassed;
    goto SeqInstr_234;

  SeqInstr_234:
    call {:si_unique_call 996} {:cexpr "result"} boogie_si_record_i32($i13);
    goto corral_source_split_7611;

  corral_source_split_7611:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, $sub.i32(0, 1));
    goto corral_source_split_7612;

  corral_source_split_7612:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i9, $i10 := $i13, $i11;
    goto $bb7_dummy;

  $bb6:
    assume $i14 == 1;
    goto corral_source_split_7614;

  corral_source_split_7614:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 19);
    goto $bb8;

  SeqInstr_232:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i17 == 1;
    goto corral_source_split_7621;

  corral_source_split_7621:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb8;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb2;

  SeqInstr_229:
    assume !assertsPassed;
    return;

  $bb7_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb9;
}



const check_reset_complete: ref;

axiom check_reset_complete == $sub.ref(0, 414367);

procedure check_reset_complete($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation check_reset_complete($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i16: i32;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1000} {:cexpr "check_reset_complete:arg:index"} boogie_si_record_i32($i1);
    call {:si_unique_call 1001} {:cexpr "check_reset_complete:arg:port_status"} boogie_si_record_i32($i2);
    goto corral_source_split_7627;

  corral_source_split_7627:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 1);
    goto corral_source_split_7628;

  corral_source_split_7628:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 0);
    goto corral_source_split_7629;

  corral_source_split_7629:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i2, 4);
    goto corral_source_split_7635;

  corral_source_split_7635:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_7636;

  corral_source_split_7636:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i7 == 1);
    goto corral_source_split_7649;

  corral_source_split_7649:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_7650;

  corral_source_split_7650:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_7651;

  corral_source_split_7651:
    assume {:verifier.code 0} true;
    $i20 := $add.i32($i1, 1);
    goto corral_source_split_7652;

  corral_source_split_7652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1006} _dev_info.ref.ref.i32($p19, .str.53, $i20);
    assume {:verifier.code 0} true;
    $i16 := $i2;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_7654;

  corral_source_split_7654:
    assume {:verifier.code 0} true;
    $i5 := $i16;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7633;

  corral_source_split_7633:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb5:
    assume $i7 == 1;
    goto corral_source_split_7638;

  corral_source_split_7638:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_7639;

  corral_source_split_7639:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_7640;

  corral_source_split_7640:
    assume {:verifier.code 0} true;
    $i11 := $add.i32($i1, 1);
    goto corral_source_split_7641;

  corral_source_split_7641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1002} _dev_info.ref.ref.i32($p10, .str.52, $i11);
    goto corral_source_split_7642;

  corral_source_split_7642:
    assume {:verifier.code 0} true;
    $i12 := $or.i32($i2, 8192);
    call {:si_unique_call 1003} {:cexpr "port_status"} boogie_si_record_i32($i12);
    goto corral_source_split_7643;

  corral_source_split_7643:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i12, $sub.i32(0, 3));
    call {:si_unique_call 1004} {:cexpr "port_status"} boogie_si_record_i32($i13);
    goto corral_source_split_7644;

  corral_source_split_7644:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_7645;

  corral_source_split_7645:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_7646;

  corral_source_split_7646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1005} reg_write32($p15, 100, $i13);
    goto corral_source_split_7647;

  corral_source_split_7647:
    assume {:verifier.code 0} true;
    $i16 := $i13;
    goto $bb7;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_7631;

  corral_source_split_7631:
    assume {:verifier.code 0} true;
    $i5 := $i2;
    goto $bb3;
}



const put_unaligned_le32: ref;

axiom put_unaligned_le32 == $sub.ref(0, 415399);

procedure put_unaligned_le32($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation put_unaligned_le32($i0: i32, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1007} {:cexpr "put_unaligned_le32:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_7656;

  corral_source_split_7656:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_7657;

  corral_source_split_7657:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i0);
    goto corral_source_split_7658;

  corral_source_split_7658:
    assume {:verifier.code 0} true;
    return;
}



const qh_free: ref;

axiom qh_free == $sub.ref(0, 416431);

procedure qh_free($p0: ref);
  free requires assertsPassed;



implementation qh_free($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $i10: i1;
  var $i11: i32;
  var $i12: i64;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $i23: i1;
  var $i24: i32;
  var $i25: i64;
  var $p27: ref;
  var $p28: ref;
  var vslice_dummy_var_66: i64;
  var vslice_dummy_var_67: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7660;

  corral_source_split_7660:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_7661;

  corral_source_split_7661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1008} $i2 := list_empty($p1);
    call {:si_unique_call 1009} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_7662;

  corral_source_split_7662:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_7663;

  corral_source_split_7663:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    call {:si_unique_call 1010} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i4);
    goto corral_source_split_7664;

  corral_source_split_7664:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_7665;

  corral_source_split_7665:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_7666;

  corral_source_split_7666:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_7667;

  corral_source_split_7667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1011} $i8 := ldv__builtin_expect($i7, 0);
    call {:si_unique_call 1012} {:cexpr "tmp___0"} boogie_si_record_i64($i8);
    goto corral_source_split_7668;

  corral_source_split_7668:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_7669;

  corral_source_split_7669:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i4, 0);
    goto corral_source_split_7674;

  corral_source_split_7674:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    goto corral_source_split_7675;

  corral_source_split_7675:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_7676;

  corral_source_split_7676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1014} vslice_dummy_var_66 := ldv__builtin_expect($i12, 0);
    goto corral_source_split_7677;

  corral_source_split_7677:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_7678;

  corral_source_split_7678:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_7679;

  corral_source_split_7679:
    assume {:verifier.code 0} true;
    $i16 := $sge.i32($i15, 0);
    goto corral_source_split_7680;

  corral_source_split_7680:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i32($i16);
    call {:si_unique_call 1015} {:cexpr "__ret_warn_on___0"} boogie_si_record_i32($i17);
    goto corral_source_split_7681;

  corral_source_split_7681:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_7682;

  corral_source_split_7682:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i32($i18);
    goto corral_source_split_7683;

  corral_source_split_7683:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_7684;

  corral_source_split_7684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1016} $i21 := ldv__builtin_expect($i20, 0);
    call {:si_unique_call 1017} {:cexpr "tmp___1"} boogie_si_record_i64($i21);
    goto corral_source_split_7685;

  corral_source_split_7685:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_7686;

  corral_source_split_7686:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i17, 0);
    goto corral_source_split_7691;

  corral_source_split_7691:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i32($i23);
    goto corral_source_split_7692;

  corral_source_split_7692:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i24);
    goto corral_source_split_7693;

  corral_source_split_7693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1019} vslice_dummy_var_67 := ldv__builtin_expect($i25, 0);
    goto corral_source_split_7694;

  corral_source_split_7694:
    assume {:verifier.code 0} true;
    $p27 := $M.39;
    goto corral_source_split_7695;

  corral_source_split_7695:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p0);
    goto corral_source_split_7696;

  corral_source_split_7696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1020} kmem_cache_free($p27, $p28);
    goto corral_source_split_7697;

  corral_source_split_7697:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i22 == 1;
    goto corral_source_split_7688;

  corral_source_split_7688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1018} warn_slowpath_null(.str.29, 431);
    goto corral_source_split_7689;

  corral_source_split_7689:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_7671;

  corral_source_split_7671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1013} warn_slowpath_null(.str.29, 430);
    goto corral_source_split_7672;

  corral_source_split_7672:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const usb_hcd_check_unlink_urb: ref;

axiom usb_hcd_check_unlink_urb == $sub.ref(0, 417463);

procedure usb_hcd_check_unlink_urb($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation usb_hcd_check_unlink_urb($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1021} {:cexpr "usb_hcd_check_unlink_urb:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_7699;

  corral_source_split_7699:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1022} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1023} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_7700;

  corral_source_split_7700:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const dequeue_urb_from_qtd: ref;

axiom dequeue_urb_from_qtd == $sub.ref(0, 418495);

procedure dequeue_urb_from_qtd($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.32, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.30, $M.38, $M.36, $M.40, $M.23, $M.22, $M.25, $M.24, $M.27, $M.26, $M.29, $M.28, $CurrAddr, $M.2, $M.4, $M.6, $M.8, $M.3, $M.5, $M.7, $M.9, assertsPassed;



implementation dequeue_urb_from_qtd($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $i18: i32;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $i41: i1;
  var $i11: i32;
  var $p12: ref;
  var $i42: i32;
  var $i10: i32;
  var $i19: i32;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $i47: i1;
  var $i48: i1;
  var $p49: ref;
  var $i50: i32;
  var $i51: i1;
  var $p52: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7702;

  corral_source_split_7702:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_7703;

  corral_source_split_7703:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_7704;

  corral_source_split_7704:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_7705;

  corral_source_split_7705:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_7706;

  corral_source_split_7706:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_7707;

  corral_source_split_7707:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_7708;

  corral_source_split_7708:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i6, $i8);
    goto corral_source_split_7709;

  corral_source_split_7709:
    assume {:verifier.code 0} true;
    $i10 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i19 := $i10;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_7723;

  corral_source_split_7723:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p4, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_7724;

  corral_source_split_7724:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_7725;

  corral_source_split_7725:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 2040)), $mul.ref(28, 1));
    goto corral_source_split_7726;

  corral_source_split_7726:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_7727;

  corral_source_split_7727:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i46, 3);
    goto corral_source_split_7728;

  corral_source_split_7728:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i47 == 1);
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    return;

  $bb25:
    assume $i47 == 1;
    goto corral_source_split_7767;

  corral_source_split_7767:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i19, 0);
    goto corral_source_split_7768;

  corral_source_split_7768:
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i48 == 1);
    goto $bb27;

  $bb28:
    assume $i48 == 1;
    goto corral_source_split_7770;

  corral_source_split_7770:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(44, 1));
    goto corral_source_split_7771;

  corral_source_split_7771:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p49, 1);
    goto corral_source_split_7772;

  corral_source_split_7772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1027} $i50 := usb_hub_clear_tt_buffer($p4);
    call {:si_unique_call 1028} {:cexpr "tmp___0"} boogie_si_record_i32($i50);
    goto corral_source_split_7773;

  corral_source_split_7773:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i50, 0);
    goto corral_source_split_7774;

  corral_source_split_7774:
    assume {:verifier.code 0} true;
    assume {:branchcond $i51} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb30:
    assume $i51 == 1;
    goto corral_source_split_7776;

  corral_source_split_7776:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(44, 1));
    goto corral_source_split_7777;

  corral_source_split_7777:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p52, 0);
    goto corral_source_split_7778;

  corral_source_split_7778:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_7711;

  corral_source_split_7711:
    assume {:verifier.code 0} true;
    $i11, $p12 := 0, $p2;
    goto $bb4;

  $bb4:
    call $p13, $p14, $i15, $i16, $i17, $i18, $p20, $i21, $i22, $i23, $i24, $i25, $p26, $i27, $i28, $i29, $p30, $i31, $i32, $p33, $p35, $p36, $p37, $p38, $p39, $i40, $i41, $i11, $p12, $i42 := dequeue_urb_from_qtd_loop_$bb4($p0, $p1, $p4, $i8, $p13, $p14, $i15, $i16, $i17, $i18, $p20, $i21, $i22, $i23, $i24, $i25, $p26, $i27, $i28, $i29, $p30, $i31, $i32, $p33, $p35, $p36, $p37, $p38, $p39, $i40, $i41, $i11, $p12, $i42);
    goto $bb4_last;

  corral_source_split_7713:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_7715;

  corral_source_split_7715:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_7716;

  corral_source_split_7716:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_7717;

  corral_source_split_7717:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p4);
    goto corral_source_split_7718;

  corral_source_split_7718:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i15, $i16);
    goto corral_source_split_7719;

  corral_source_split_7719:
    assume {:verifier.code 0} true;
    $i18 := $i11;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p12, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_7730;

  corral_source_split_7730:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_7731;

  corral_source_split_7731:
    assume {:verifier.code 0} true;
    $i22 := $ugt.i32($i21, 1);
    goto corral_source_split_7732;

  corral_source_split_7732:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i23 := $i11;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_7736;

  corral_source_split_7736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1024} $i24 := last_qtd_of_urb($p12, $p1);
    call {:si_unique_call 1025} {:cexpr "tmp"} boogie_si_record_i32($i24);
    goto corral_source_split_7737;

  corral_source_split_7737:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_7738;

  corral_source_split_7738:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i29 := $i23;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_7747;

  corral_source_split_7747:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p12, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_7748;

  corral_source_split_7748:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_7749;

  corral_source_split_7749:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i31, 2);
    goto corral_source_split_7750;

  corral_source_split_7750:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p12, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_7755;

  corral_source_split_7755:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, 4);
    goto corral_source_split_7756;

  corral_source_split_7756:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_7757;

  corral_source_split_7757:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_7758;

  corral_source_split_7758:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_7759;

  corral_source_split_7759:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($p37, $mul.ref($sub.ref(0, 24), 72));
    goto corral_source_split_7760;

  corral_source_split_7760:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p37, $mul.ref($sub.ref(0, 24), 72)), $mul.ref(24, 1));
    goto corral_source_split_7761;

  corral_source_split_7761:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p39);
    goto corral_source_split_7762;

  corral_source_split_7762:
    assume {:verifier.code 0} true;
    $i41 := $ne.i64($i40, $i8);
    goto corral_source_split_7763;

  corral_source_split_7763:
    assume {:verifier.code 0} true;
    $i42 := $i29;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_7765;

  corral_source_split_7765:
    assume {:verifier.code 0} true;
    $i10 := $i42;
    goto $bb3;

  $bb22:
    assume $i41 == 1;
    assume {:verifier.code 0} true;
    $i11, $p12 := $i29, $p38;
    goto $bb22_dummy;

  $bb19:
    assume $i32 == 1;
    goto corral_source_split_7752;

  corral_source_split_7752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1026} kill_transfer($p0, $p4, $p1);
    goto SeqInstr_235, SeqInstr_236;

  SeqInstr_236:
    assume assertsPassed;
    goto SeqInstr_237;

  SeqInstr_237:
    goto corral_source_split_7753;

  corral_source_split_7753:
    assume {:verifier.code 0} true;
    goto $bb21;

  SeqInstr_235:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i25 == 1;
    goto corral_source_split_7740;

  corral_source_split_7740:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p12, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_7741;

  corral_source_split_7741:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_7742;

  corral_source_split_7742:
    assume {:verifier.code 0} true;
    $i28 := $ugt.i32($i27, 2);
    goto corral_source_split_7743;

  corral_source_split_7743:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb15;

  $bb16:
    assume $i28 == 1;
    goto corral_source_split_7745;

  corral_source_split_7745:
    assume {:verifier.code 0} true;
    $i29 := 0;
    goto $bb18;

  $bb10:
    assume $i22 == 1;
    goto corral_source_split_7734;

  corral_source_split_7734:
    assume {:verifier.code 0} true;
    $i23 := 1;
    goto $bb12;

  $bb6:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_7721;

  corral_source_split_7721:
    assume {:verifier.code 0} true;
    $i19 := $i18;
    goto $bb8;

  $bb22_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7713;
}



const list_move: ref;

axiom list_move == $sub.ref(0, 419527);

procedure list_move($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_move($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7780;

  corral_source_split_7780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1029} __list_del_entry($p0);
    goto corral_source_split_7781;

  corral_source_split_7781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1030} list_add($p0, $p1);
    goto corral_source_split_7782;

  corral_source_split_7782:
    assume {:verifier.code 0} true;
    return;
}



const __list_del_entry: ref;

axiom __list_del_entry == $sub.ref(0, 420559);

procedure __list_del_entry($p0: ref);
  free requires assertsPassed;



implementation __list_del_entry($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7784;

  corral_source_split_7784:
    assume {:verifier.code 0} true;
    return;
}



const list_add: ref;

axiom list_add == $sub.ref(0, 421591);

procedure list_add($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7786;

  corral_source_split_7786:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_7787;

  corral_source_split_7787:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_7788;

  corral_source_split_7788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1031} __list_add($p0, $p1, $p3);
    goto corral_source_split_7789;

  corral_source_split_7789:
    assume {:verifier.code 0} true;
    return;
}



const kill_transfer: ref;

axiom kill_transfer == $sub.ref(0, 422623);

procedure kill_transfer($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.32, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.30, $M.38, $M.36, $M.40, $M.23, $M.22, $M.25, $M.24, $M.27, $M.26, $M.29, $M.28, $CurrAddr, $M.2, $M.4, $M.6, $M.8, $M.3, $M.5, $M.7, $M.9, assertsPassed;



implementation kill_transfer($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $i31: i32;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i64;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i64;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i32;
  var $p49: ref;
  var $i50: i32;
  var $i51: i32;
  var $i52: i32;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i32;
  var $i57: i64;
  var $p60: ref;
  var $p61: ref;
  var $i62: i32;
  var $i63: i64;
  var $p66: ref;
  var $p67: ref;
  var vslice_dummy_var_68: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7791;

  corral_source_split_7791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1032} $p3 := hcd_to_priv($p0);
    goto corral_source_split_7792;

  corral_source_split_7792:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_7793;

  corral_source_split_7793:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_7794;

  corral_source_split_7794:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, $sub.i32(0, 1));
    goto corral_source_split_7795;

  corral_source_split_7795:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    call {:si_unique_call 1033} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i7);
    goto corral_source_split_7796;

  corral_source_split_7796:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_7797;

  corral_source_split_7797:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_7798;

  corral_source_split_7798:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_7799;

  corral_source_split_7799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1034} $i11 := ldv__builtin_expect($i10, 0);
    call {:si_unique_call 1035} {:cexpr "tmp___0"} boogie_si_record_i64($i11);
    goto corral_source_split_7800;

  corral_source_split_7800:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_7801;

  corral_source_split_7801:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i7, 0);
    goto corral_source_split_7806;

  corral_source_split_7806:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i13);
    goto corral_source_split_7807;

  corral_source_split_7807:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_7808;

  corral_source_split_7808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1037} vslice_dummy_var_68 := ldv__builtin_expect($i15, 0);
    goto corral_source_split_7809;

  corral_source_split_7809:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_7810;

  corral_source_split_7810:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_7811;

  corral_source_split_7811:
    assume {:verifier.code 0} true;
    $i19 := $lshr.i32($i18, 30);
    goto corral_source_split_7812;

  corral_source_split_7812:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 2);
    goto corral_source_split_7813;

  corral_source_split_7813:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb6;

  $bb6:
    assume !($i20 == 1);
    goto corral_source_split_7836;

  corral_source_split_7836:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_7837;

  corral_source_split_7837:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_7838;

  corral_source_split_7838:
    assume {:verifier.code 0} true;
    $i23 := $lshr.i32($i22, 30);
    goto corral_source_split_7839;

  corral_source_split_7839:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 3);
    goto corral_source_split_7840;

  corral_source_split_7840:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i24 == 1);
    goto corral_source_split_7842;

  corral_source_split_7842:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_7843;

  corral_source_split_7843:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_7844;

  corral_source_split_7844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1042} $i48 := reg_read32($p47, 324);
    goto SeqInstr_241, SeqInstr_242;

  SeqInstr_242:
    assume assertsPassed;
    goto SeqInstr_243;

  SeqInstr_243:
    call {:si_unique_call 1043} {:cexpr "tmp___2"} boogie_si_record_i32($i48);
    goto corral_source_split_7845;

  corral_source_split_7845:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_7846;

  corral_source_split_7846:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    goto corral_source_split_7847;

  corral_source_split_7847:
    assume {:verifier.code 0} true;
    $i51 := $shl.i32(1, $i50);
    goto corral_source_split_7848;

  corral_source_split_7848:
    assume {:verifier.code 0} true;
    $i52 := $or.i32($i51, $i48);
    call {:si_unique_call 1044} {:cexpr "skip_map"} boogie_si_record_i32($i52);
    goto corral_source_split_7849;

  corral_source_split_7849:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_7850;

  corral_source_split_7850:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_7851;

  corral_source_split_7851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1045} reg_write32($p54, 324, $i52);
    goto corral_source_split_7852;

  corral_source_split_7852:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_7853;

  corral_source_split_7853:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.0, $p55);
    goto corral_source_split_7854;

  corral_source_split_7854:
    assume {:verifier.code 0} true;
    $i57 := $sext.i32.i64($i56);
    goto corral_source_split_7855;

  corral_source_split_7855:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 2384)), $mul.ref(864, 1)), $mul.ref($i57, 24)), $mul.ref(0, 1));
    goto corral_source_split_7856;

  corral_source_split_7856:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p60, $0.ref);
    goto corral_source_split_7857;

  corral_source_split_7857:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_7858;

  corral_source_split_7858:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.0, $p61);
    goto corral_source_split_7859;

  corral_source_split_7859:
    assume {:verifier.code 0} true;
    $i63 := $sext.i32.i64($i62);
    goto corral_source_split_7860;

  corral_source_split_7860:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 2384)), $mul.ref(864, 1)), $mul.ref($i63, 24)), $mul.ref(8, 1));
    goto corral_source_split_7861;

  corral_source_split_7861:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p66, $0.ref);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_7863;

  corral_source_split_7863:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p67, $sub.i32(0, 1));
    goto corral_source_split_7864;

  corral_source_split_7864:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_241:
    assume !assertsPassed;
    return;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_7815;

  corral_source_split_7815:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_7816;

  corral_source_split_7816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1038} $i27 := reg_read32($p26, 340);
    goto SeqInstr_238, SeqInstr_239;

  SeqInstr_239:
    assume assertsPassed;
    goto SeqInstr_240;

  SeqInstr_240:
    call {:si_unique_call 1039} {:cexpr "tmp___1"} boogie_si_record_i32($i27);
    goto corral_source_split_7817;

  corral_source_split_7817:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_7818;

  corral_source_split_7818:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_7819;

  corral_source_split_7819:
    assume {:verifier.code 0} true;
    $i30 := $shl.i32(1, $i29);
    goto corral_source_split_7820;

  corral_source_split_7820:
    assume {:verifier.code 0} true;
    $i31 := $or.i32($i30, $i27);
    call {:si_unique_call 1040} {:cexpr "skip_map"} boogie_si_record_i32($i31);
    goto corral_source_split_7821;

  corral_source_split_7821:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_7822;

  corral_source_split_7822:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_7823;

  corral_source_split_7823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1041} reg_write32($p33, 340, $i31);
    goto corral_source_split_7824;

  corral_source_split_7824:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_7825;

  corral_source_split_7825:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_7826;

  corral_source_split_7826:
    assume {:verifier.code 0} true;
    $i36 := $sext.i32.i64($i35);
    goto corral_source_split_7827;

  corral_source_split_7827:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 2384)), $mul.ref(88, 1)), $mul.ref($i36, 24)), $mul.ref(0, 1));
    goto corral_source_split_7828;

  corral_source_split_7828:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p39, $0.ref);
    goto corral_source_split_7829;

  corral_source_split_7829:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_7830;

  corral_source_split_7830:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_7831;

  corral_source_split_7831:
    assume {:verifier.code 0} true;
    $i42 := $sext.i32.i64($i41);
    goto corral_source_split_7832;

  corral_source_split_7832:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 2384)), $mul.ref(88, 1)), $mul.ref($i42, 24)), $mul.ref(8, 1));
    goto corral_source_split_7833;

  corral_source_split_7833:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p45, $0.ref);
    goto corral_source_split_7834;

  corral_source_split_7834:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_238:
    assume !assertsPassed;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb5;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_7803;

  corral_source_split_7803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1036} warn_slowpath_null(.str.29, 1585);
    goto corral_source_split_7804;

  corral_source_split_7804:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const usb_hub_clear_tt_buffer: ref;

axiom usb_hub_clear_tt_buffer == $sub.ref(0, 423655);

procedure usb_hub_clear_tt_buffer($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_hub_clear_tt_buffer($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7866;

  corral_source_split_7866:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1046} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1047} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_7867;

  corral_source_split_7867:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const packetize_urb: ref;

axiom packetize_urb == $sub.ref(0, 424687);

procedure packetize_urb($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;
  modifies $M.0, assertsPassed;



implementation packetize_urb($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $i23: i1;
  var $i24: i32;
  var $i25: i64;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $i31: i8;
  var $p32: ref;
  var $i33: i32;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $i37: i64;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $i45: i1;
  var $i46: i8;
  var $i47: i8;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $p52: ref;
  var $i53: i32;
  var $i54: i32;
  var $i55: i1;
  var $i56: i32;
  var $i57: i16;
  var $i58: i32;
  var $i59: i32;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i32;
  var $i64: i32;
  var $i65: i8;
  var $p66: ref;
  var $i67: i64;
  var $i68: i1;
  var $p69: ref;
  var $i70: i32;
  var $p71: ref;
  var $i72: i64;
  var $i73: i32;
  var $p74: ref;
  var $i75: i32;
  var $i76: i64;
  var $p77: ref;
  var $i78: i1;
  var $p79: ref;
  var $i80: i64;
  var $i81: i1;
  var $p82: ref;
  var $i83: i32;
  var $i84: i1;
  var $p85: ref;
  var $i86: i32;
  var $i87: i32;
  var $i88: i1;
  var $i89: i32;
  var $i90: i1;
  var $i91: i8;
  var $p94: ref;
  var $i95: i32;
  var $i96: i32;
  var $i97: i1;
  var $p98: ref;
  var $i99: i32;
  var $i100: i32;
  var $i101: i1;
  var $p102: ref;
  var $i103: i32;
  var $i104: i32;
  var $i105: i1;
  var $i106: i32;
  var $i92: i8;
  var $i93: i32;
  var $i107: i1;
  var $i108: i32;
  var $i109: i8;
  var $p110: ref;
  var $i111: i64;
  var $i112: i1;
  var $p114: ref;
  var vslice_dummy_var_69: i64;
  var vslice_dummy_var_70: i32;
  var vslice_dummy_var_71: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1048} {:cexpr "packetize_urb:arg:flags"} boogie_si_record_i32($i3);
    goto corral_source_split_7869;

  corral_source_split_7869:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_7870;

  corral_source_split_7870:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_7871;

  corral_source_split_7871:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_7872;

  corral_source_split_7872:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_7873;

  corral_source_split_7873:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_7902;

  corral_source_split_7902:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_7903;

  corral_source_split_7903:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i28, 128);
    goto corral_source_split_7904;

  corral_source_split_7904:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_7905;

  corral_source_split_7905:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    $i31 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_7909;

  corral_source_split_7909:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_7910;

  corral_source_split_7910:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_7911;

  corral_source_split_7911:
    assume {:verifier.code 0} true;
    $i34 := $lshr.i32($i33, 30);
    goto corral_source_split_7912;

  corral_source_split_7912:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 2);
    goto corral_source_split_7913;

  corral_source_split_7913:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    $i47 := $i31;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_7937;

  corral_source_split_7937:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_7938;

  corral_source_split_7938:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_7939;

  corral_source_split_7939:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_7940;

  corral_source_split_7940:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p50);
    goto corral_source_split_7941;

  corral_source_split_7941:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_7942;

  corral_source_split_7942:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.0, $p52);
    goto corral_source_split_7943;

  corral_source_split_7943:
    assume {:verifier.code 0} true;
    $i54 := $and.i32($i53, 128);
    goto corral_source_split_7944;

  corral_source_split_7944:
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i54, 0);
    goto corral_source_split_7945;

  corral_source_split_7945:
    assume {:verifier.code 0} true;
    $i56 := $zext.i1.i32($i55);
    goto corral_source_split_7946;

  corral_source_split_7946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1058} $i57 := usb_maxpacket($p49, $i51, $i56);
    call {:si_unique_call 1059} {:cexpr "tmp___0"} boogie_si_record_i16($i57);
    goto corral_source_split_7947;

  corral_source_split_7947:
    assume {:verifier.code 0} true;
    $i58 := $zext.i16.i32($i57);
    goto corral_source_split_7948;

  corral_source_split_7948:
    assume {:verifier.code 0} true;
    $i59 := $and.i32($i58, 2047);
    call {:si_unique_call 1060} {:cexpr "maxpacketsize"} boogie_si_record_i32($i59);
    goto corral_source_split_7949;

  corral_source_split_7949:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_7950;

  corral_source_split_7950:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_7951;

  corral_source_split_7951:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_7952;

  corral_source_split_7952:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.0, $p62);
    call {:si_unique_call 1061} {:cexpr "len"} boogie_si_record_i32($i63);
    goto corral_source_split_7953;

  corral_source_split_7953:
    assume {:verifier.code 0} true;
    $i64 := $zext.i8.i32($i47);
    goto corral_source_split_7954;

  corral_source_split_7954:
    assume {:verifier.code 0} true;
    $i65 := $trunc.i32.i8($i64);
    goto corral_source_split_7955;

  corral_source_split_7955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1062} $p66 := qtd_alloc($i3, $p1, $i65);
    goto SeqInstr_247, SeqInstr_248;

  SeqInstr_248:
    assume assertsPassed;
    goto SeqInstr_249;

  SeqInstr_249:
    goto corral_source_split_7956;

  corral_source_split_7956:
    assume {:verifier.code 0} true;
    $i67 := $p2i.ref.i64($p66);
    goto corral_source_split_7957;

  corral_source_split_7957:
    assume {:verifier.code 0} true;
    $i68 := $eq.i64($i67, 0);
    goto corral_source_split_7958;

  corral_source_split_7958:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb25;

  $bb25:
    assume !($i68 == 1);
    goto corral_source_split_7960;

  corral_source_split_7960:
    assume {:verifier.code 0} true;
    $p69, $i70, $p71 := $p66, $i63, $p61;
    goto $bb26;

  $bb26:
    call $p69, $i70, $p71, $i72, $i73, $p74, $i75, $i76, $p77, $i78, $p79, $i80, $i81 := packetize_urb_loop_$bb26($p1, $p2, $i3, $i65, $p69, $i70, $p71, $i72, $i73, $p74, $i75, $i76, $p77, $i78, $p79, $i80, $i81);
    goto $bb26_last;

  $bb28:
    assume {:verifier.code 0} true;
    $i72 := $sext.i32.i64($i70);
    goto corral_source_split_7964;

  corral_source_split_7964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1063} $i73 := qtd_fill($p69, $p71, $i72);
    call {:si_unique_call 1064} {:cexpr "this_qtd_len"} boogie_si_record_i32($i73);
    goto corral_source_split_7965;

  corral_source_split_7965:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p69, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_7966;

  corral_source_split_7966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1065} list_add_tail($p74, $p2);
    goto corral_source_split_7967;

  corral_source_split_7967:
    assume {:verifier.code 0} true;
    $i75 := $sub.i32($i70, $i73);
    call {:si_unique_call 1066} {:cexpr "len"} boogie_si_record_i32($i75);
    goto corral_source_split_7968;

  corral_source_split_7968:
    assume {:verifier.code 0} true;
    $i76 := $sext.i32.i64($i73);
    goto corral_source_split_7969;

  corral_source_split_7969:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($p71, $mul.ref($i76, 1));
    goto corral_source_split_7970;

  corral_source_split_7970:
    assume {:verifier.code 0} true;
    $i78 := $sle.i32($i75, 0);
    goto corral_source_split_7971;

  corral_source_split_7971:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1067} $p79 := qtd_alloc($i3, $p1, $i65);
    goto SeqInstr_250, SeqInstr_251;

  SeqInstr_251:
    assume assertsPassed;
    goto SeqInstr_252;

  SeqInstr_252:
    goto corral_source_split_7979;

  corral_source_split_7979:
    assume {:verifier.code 0} true;
    $i80 := $p2i.ref.i64($p79);
    goto corral_source_split_7980;

  corral_source_split_7980:
    assume {:verifier.code 0} true;
    $i81 := $eq.i64($i80, 0);
    goto corral_source_split_7981;

  corral_source_split_7981:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb33;

  $bb33:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    $p69, $i70, $p71 := $p79, $i75, $p77;
    goto $bb33_dummy;

  $bb27:
    assume $i81 == 1;
    goto corral_source_split_7962;

  corral_source_split_7962:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1055} qtd_list_free($p2);
    goto corral_source_split_7922;

  corral_source_split_7922:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_250:
    assume !assertsPassed;
    return;

  $bb29:
    assume $i78 == 1;
    goto corral_source_split_7973;

  corral_source_split_7973:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_7975;

  corral_source_split_7975:
    assume {:verifier.code 0} true;
    $i83 := $load.i32($M.0, $p82);
    goto corral_source_split_7976;

  corral_source_split_7976:
    assume {:verifier.code 0} true;
    $i84 := $ne.i32($i83, 0);
    goto corral_source_split_7977;

  corral_source_split_7977:
    assume {:verifier.code 0} true;
    assume {:branchcond $i84} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb34:
    assume $i84 == 1;
    goto corral_source_split_7983;

  corral_source_split_7983:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_7984;

  corral_source_split_7984:
    assume {:verifier.code 0} true;
    $i86 := $load.i32($M.0, $p85);
    goto corral_source_split_7985;

  corral_source_split_7985:
    assume {:verifier.code 0} true;
    $i87 := $lshr.i32($i86, 30);
    goto corral_source_split_7986;

  corral_source_split_7986:
    assume {:verifier.code 0} true;
    $i88 := $eq.i32($i87, 2);
    goto corral_source_split_7987;

  corral_source_split_7987:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i88 == 1);
    goto corral_source_split_7993;

  corral_source_split_7993:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_7994;

  corral_source_split_7994:
    assume {:verifier.code 0} true;
    $i95 := $load.i32($M.0, $p94);
    goto corral_source_split_7995;

  corral_source_split_7995:
    assume {:verifier.code 0} true;
    $i96 := $lshr.i32($i95, 30);
    goto corral_source_split_7996;

  corral_source_split_7996:
    assume {:verifier.code 0} true;
    $i97 := $eq.i32($i96, 3);
    goto corral_source_split_7997;

  corral_source_split_7997:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    assume !($i97 == 1);
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i106 := 0;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i92, $i93 := $i47, $i106;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8003;

  corral_source_split_8003:
    assume {:verifier.code 0} true;
    $i107 := $ne.i32($i93, 0);
    goto corral_source_split_8004;

  corral_source_split_8004:
    assume {:verifier.code 0} true;
    assume {:branchcond $i107} true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb50:
    assume $i107 == 1;
    goto corral_source_split_8020;

  corral_source_split_8020:
    assume {:verifier.code 0} true;
    $i108 := $zext.i8.i32($i92);
    goto corral_source_split_8021;

  corral_source_split_8021:
    assume {:verifier.code 0} true;
    $i109 := $trunc.i32.i8($i108);
    goto corral_source_split_8022;

  corral_source_split_8022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1068} $p110 := qtd_alloc($i3, $p1, $i109);
    goto SeqInstr_253, SeqInstr_254;

  SeqInstr_254:
    assume assertsPassed;
    goto SeqInstr_255;

  SeqInstr_255:
    goto corral_source_split_8023;

  corral_source_split_8023:
    assume {:verifier.code 0} true;
    $i111 := $p2i.ref.i64($p110);
    goto corral_source_split_8024;

  corral_source_split_8024:
    assume {:verifier.code 0} true;
    $i112 := $eq.i64($i111, 0);
    goto corral_source_split_8025;

  corral_source_split_8025:
    assume {:verifier.code 0} true;
    assume {:branchcond $i112} true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i112 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1069} vslice_dummy_var_71 := qtd_fill($p110, $0.ref, 0);
    goto corral_source_split_8029;

  corral_source_split_8029:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p110, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_8030;

  corral_source_split_8030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1070} list_add_tail($p114, $p2);
    goto corral_source_split_8031;

  corral_source_split_8031:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb52:
    assume $i112 == 1;
    goto corral_source_split_8027;

  corral_source_split_8027:
    assume {:verifier.code 0} true;
    goto $bb17;

  SeqInstr_253:
    assume !assertsPassed;
    return;

  $bb42:
    assume $i97 == 1;
    goto corral_source_split_8006;

  corral_source_split_8006:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_8007;

  corral_source_split_8007:
    assume {:verifier.code 0} true;
    $i99 := $load.i32($M.0, $p98);
    goto corral_source_split_8008;

  corral_source_split_8008:
    assume {:verifier.code 0} true;
    $i100 := $and.i32($i99, 64);
    goto corral_source_split_8009;

  corral_source_split_8009:
    assume {:verifier.code 0} true;
    $i101 := $ne.i32($i100, 0);
    goto corral_source_split_8010;

  corral_source_split_8010:
    assume {:verifier.code 0} true;
    assume {:branchcond $i101} true;
    goto $bb45, $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    assume !($i101 == 1);
    goto $bb44;

  $bb45:
    assume $i101 == 1;
    goto corral_source_split_8012;

  corral_source_split_8012:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_8013;

  corral_source_split_8013:
    assume {:verifier.code 0} true;
    $i103 := $load.i32($M.0, $p102);
    goto corral_source_split_8014;

  corral_source_split_8014:
    assume {:verifier.code 0} true;
    $i104 := $urem.i32($i103, $i59);
    goto corral_source_split_8015;

  corral_source_split_8015:
    assume {:verifier.code 0} true;
    $i105 := $eq.i32($i104, 0);
    goto corral_source_split_8016;

  corral_source_split_8016:
    assume {:verifier.code 0} true;
    assume {:branchcond $i105} true;
    goto $bb47, $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    assume !($i105 == 1);
    goto $bb44;

  $bb47:
    assume $i105 == 1;
    goto corral_source_split_8018;

  corral_source_split_8018:
    assume {:verifier.code 0} true;
    $i106 := 1;
    goto $bb49;

  $bb36:
    assume $i88 == 1;
    goto corral_source_split_7989;

  corral_source_split_7989:
    assume {:verifier.code 0} true;
    $i89 := $zext.i8.i32($i47);
    goto corral_source_split_7990;

  corral_source_split_7990:
    assume {:verifier.code 0} true;
    $i90 := $eq.i32($i89, 1);
    goto corral_source_split_7991;

  corral_source_split_7991:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    $i91 := 1;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto corral_source_split_8001;

  corral_source_split_8001:
    assume {:verifier.code 0} true;
    $i92, $i93 := $i91, 1;
    goto $bb41;

  $bb38:
    assume $i90 == 1;
    goto corral_source_split_7999;

  corral_source_split_7999:
    assume {:verifier.code 0} true;
    $i91 := 0;
    goto $bb40;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i68 == 1;
    goto $bb24;

  SeqInstr_247:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i35 == 1;
    goto corral_source_split_7915;

  corral_source_split_7915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1054} $p36 := qtd_alloc($i3, $p1, 2);
    goto SeqInstr_244, SeqInstr_245;

  SeqInstr_245:
    assume assertsPassed;
    goto SeqInstr_246;

  SeqInstr_246:
    goto corral_source_split_7916;

  corral_source_split_7916:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p36);
    goto corral_source_split_7917;

  corral_source_split_7917:
    assume {:verifier.code 0} true;
    $i38 := $eq.i64($i37, 0);
    goto corral_source_split_7918;

  corral_source_split_7918:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(144, 1));
    goto corral_source_split_7924;

  corral_source_split_7924:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_7925;

  corral_source_split_7925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1056} vslice_dummy_var_70 := qtd_fill($p36, $p40, 8);
    goto corral_source_split_7926;

  corral_source_split_7926:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p36, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_7927;

  corral_source_split_7927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1057} list_add_tail($p42, $p2);
    goto corral_source_split_7928;

  corral_source_split_7928:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_7929;

  corral_source_split_7929:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    goto corral_source_split_7930;

  corral_source_split_7930:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i44, 0);
    goto corral_source_split_7931;

  corral_source_split_7931:
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    $i46 := $i31;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_7935;

  corral_source_split_7935:
    assume {:verifier.code 0} true;
    $i47 := $i46;
    goto $bb22;

  $bb19:
    assume $i45 == 1;
    goto corral_source_split_7933;

  corral_source_split_7933:
    assume {:verifier.code 0} true;
    $i46 := 1;
    goto $bb21;

  $bb15:
    assume $i38 == 1;
    goto corral_source_split_7920;

  corral_source_split_7920:
    assume {:verifier.code 0} true;
    goto $bb17;

  SeqInstr_244:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i30 == 1;
    goto corral_source_split_7907;

  corral_source_split_7907:
    assume {:verifier.code 0} true;
    $i31 := 1;
    goto $bb12;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_7875;

  corral_source_split_7875:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_7876;

  corral_source_split_7876:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_7877;

  corral_source_split_7877:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_7878;

  corral_source_split_7878:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_7880;

  corral_source_split_7880:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_7881;

  corral_source_split_7881:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_7882;

  corral_source_split_7882:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(112, 1));
    goto corral_source_split_7883;

  corral_source_split_7883:
    assume {:verifier.code 0} true;
    $i15 := $load.i64($M.0, $p14);
    goto corral_source_split_7884;

  corral_source_split_7884:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_7885;

  corral_source_split_7885:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_7886;

  corral_source_split_7886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1049} dev_err.ref.ref.i64.i32($p13, .str.47, $i15, $i17);
    goto corral_source_split_7887;

  corral_source_split_7887:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32(1, 0);
    goto corral_source_split_7888;

  corral_source_split_7888:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i32($i18);
    goto corral_source_split_7889;

  corral_source_split_7889:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_7890;

  corral_source_split_7890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1050} $i21 := ldv__builtin_expect($i20, 0);
    call {:si_unique_call 1051} {:cexpr "tmp"} boogie_si_record_i64($i21);
    goto corral_source_split_7891;

  corral_source_split_7891:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_7892;

  corral_source_split_7892:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32(1, 0);
    goto corral_source_split_7897;

  corral_source_split_7897:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i32($i23);
    goto corral_source_split_7898;

  corral_source_split_7898:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i24);
    goto corral_source_split_7899;

  corral_source_split_7899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1053} vslice_dummy_var_69 := ldv__builtin_expect($i25, 0);
    goto corral_source_split_7900;

  corral_source_split_7900:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i22 == 1;
    goto corral_source_split_7894;

  corral_source_split_7894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1052} warn_slowpath_null(.str.29, 1409);
    goto corral_source_split_7895;

  corral_source_split_7895:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb33_dummy:
    assume false;
    return;

  $bb26_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb28;
}



const constant_test_bit: ref;

axiom constant_test_bit == $sub.ref(0, 425719);

procedure constant_test_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation constant_test_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $i5: i32;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1071} {:cexpr "constant_test_bit:arg:nr"} boogie_si_record_i64($i0);
    goto corral_source_split_8033;

  corral_source_split_8033:
    assume {:verifier.code 0} true;
    $i2 := $ashr.i64($i0, 6);
    goto corral_source_split_8034;

  corral_source_split_8034:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p1, $mul.ref($i2, 8));
    goto corral_source_split_8035;

  corral_source_split_8035:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    goto corral_source_split_8036;

  corral_source_split_8036:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i0);
    goto corral_source_split_8037;

  corral_source_split_8037:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 63);
    goto corral_source_split_8038;

  corral_source_split_8038:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i6);
    goto corral_source_split_8039;

  corral_source_split_8039:
    assume {:verifier.code 0} true;
    $i8 := $lshr.i64($i4, $i7);
    goto corral_source_split_8040;

  corral_source_split_8040:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i8);
    goto corral_source_split_8041;

  corral_source_split_8041:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 1);
    goto corral_source_split_8042;

  corral_source_split_8042:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const qtd_list_free: ref;

axiom qtd_list_free == $sub.ref(0, 426751);

procedure qtd_list_free($p0: ref);
  free requires assertsPassed;



implementation qtd_list_free($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $p16: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p14: ref;
  var $p15: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8044;

  corral_source_split_8044:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_8045;

  corral_source_split_8045:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_8046;

  corral_source_split_8046:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_8047;

  corral_source_split_8047:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref($sub.ref(0, 24), 72));
    goto corral_source_split_8048;

  corral_source_split_8048:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p3, $mul.ref($sub.ref(0, 24), 72)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_8049;

  corral_source_split_8049:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_8050;

  corral_source_split_8050:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_8051;

  corral_source_split_8051:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p8, $mul.ref($sub.ref(0, 24), 72));
    goto corral_source_split_8052;

  corral_source_split_8052:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 24), 72)), $mul.ref(24, 1));
    goto corral_source_split_8053;

  corral_source_split_8053:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_8054;

  corral_source_split_8054:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p0);
    goto corral_source_split_8055;

  corral_source_split_8055:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i11, $i12);
    goto corral_source_split_8056;

  corral_source_split_8056:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_8058;

  corral_source_split_8058:
    assume {:verifier.code 0} true;
    $p14, $p15 := $p9, $p4;
    goto $bb4;

  $bb4:
    call $p16, $p18, $p19, $p20, $p21, $p22, $i23, $i24, $p14, $p15 := qtd_list_free_loop_$bb4($i12, $p16, $p18, $p19, $p20, $p21, $p22, $i23, $i24, $p14, $p15);
    goto $bb4_last;

  corral_source_split_8060:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_8062;

  corral_source_split_8062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1072} list_del($p16);
    goto corral_source_split_8063;

  corral_source_split_8063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1073} qtd_free($p15);
    goto corral_source_split_8064;

  corral_source_split_8064:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p14, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_8065;

  corral_source_split_8065:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_8066;

  corral_source_split_8066:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_8067;

  corral_source_split_8067:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p20, $mul.ref($sub.ref(0, 24), 72));
    goto corral_source_split_8068;

  corral_source_split_8068:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p14, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_8069;

  corral_source_split_8069:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_8070;

  corral_source_split_8070:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, $i12);
    goto corral_source_split_8071;

  corral_source_split_8071:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i24 == 1);
    goto corral_source_split_8073;

  corral_source_split_8073:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i24 == 1;
    assume {:verifier.code 0} true;
    $p14, $p15 := $p21, $p14;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8060;
}



const usb_hcd_link_urb_to_ep: ref;

axiom usb_hcd_link_urb_to_ep == $sub.ref(0, 427783);

procedure usb_hcd_link_urb_to_ep($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_hcd_link_urb_to_ep($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8075;

  corral_source_split_8075:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1074} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1075} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_8076;

  corral_source_split_8076:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const qh_alloc: ref;

axiom qh_alloc == $sub.ref(0, 428815);

procedure qh_alloc($i0: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, assertsPassed;



implementation qh_alloc($i0: i32) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1076} {:cexpr "qh_alloc:arg:flags"} boogie_si_record_i32($i0);
    goto corral_source_split_8078;

  corral_source_split_8078:
    assume {:verifier.code 0} true;
    $p1 := $M.39;
    goto corral_source_split_8079;

  corral_source_split_8079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1077} $p2 := kmem_cache_zalloc($p1, $i0);
    goto SeqInstr_256, SeqInstr_257;

  SeqInstr_257:
    assume assertsPassed;
    goto SeqInstr_258;

  SeqInstr_258:
    goto corral_source_split_8080;

  corral_source_split_8080:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_8081;

  corral_source_split_8081:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_8082;

  corral_source_split_8082:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_8083;

  corral_source_split_8083:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_8089;

  corral_source_split_8089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1078} INIT_LIST_HEAD($p7);
    goto corral_source_split_8090;

  corral_source_split_8090:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_8091;

  corral_source_split_8091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1079} INIT_LIST_HEAD($p8);
    goto corral_source_split_8092;

  corral_source_split_8092:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_8093;

  corral_source_split_8093:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, $sub.i32(0, 1));
    goto corral_source_split_8094;

  corral_source_split_8094:
    assume {:verifier.code 0} true;
    $p6 := $p2;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8087;

  corral_source_split_8087:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_8085;

  corral_source_split_8085:
    assume {:verifier.code 0} true;
    $p6 := $0.ref;
    goto $bb3;

  SeqInstr_256:
    assume !assertsPassed;
    return;
}



const list_splice_tail: ref;

axiom list_splice_tail == $sub.ref(0, 429847);

procedure list_splice_tail($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation list_splice_tail($p0: ref, $p1: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8096;

  corral_source_split_8096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1080} $i2 := list_empty($p0);
    call {:si_unique_call 1081} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_8097;

  corral_source_split_8097:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_8098;

  corral_source_split_8098:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_8100;

  corral_source_split_8100:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_8101;

  corral_source_split_8101:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_8102;

  corral_source_split_8102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1082} __list_splice($p0, $p5, $p1);
    goto corral_source_split_8103;

  corral_source_split_8103:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const __list_splice: ref;

axiom __list_splice == $sub.ref(0, 430879);

procedure __list_splice($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation __list_splice($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8105;

  corral_source_split_8105:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_8106;

  corral_source_split_8106:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_8107;

  corral_source_split_8107:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_8108;

  corral_source_split_8108:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_8109;

  corral_source_split_8109:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_8110;

  corral_source_split_8110:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $p1);
    goto corral_source_split_8111;

  corral_source_split_8111:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_8112;

  corral_source_split_8112:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p8, $p4);
    goto corral_source_split_8113;

  corral_source_split_8113:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_8114;

  corral_source_split_8114:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p9, $p2);
    goto corral_source_split_8115;

  corral_source_split_8115:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_8116;

  corral_source_split_8116:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, $p6);
    goto corral_source_split_8117;

  corral_source_split_8117:
    assume {:verifier.code 0} true;
    return;
}



const qtd_alloc: ref;

axiom qtd_alloc == $sub.ref(0, 431911);

procedure qtd_alloc($i0: i32, $p1: ref, $i2: i8) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, assertsPassed;



implementation qtd_alloc($i0: i32, $p1: ref, $i2: i8) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1083} {:cexpr "qtd_alloc:arg:flags"} boogie_si_record_i32($i0);
    call {:si_unique_call 1084} {:cexpr "qtd_alloc:arg:packet_type"} boogie_si_record_i8($i2);
    goto corral_source_split_8119;

  corral_source_split_8119:
    assume {:verifier.code 0} true;
    $p3 := $M.37;
    goto corral_source_split_8120;

  corral_source_split_8120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1085} $p4 := kmem_cache_zalloc($p3, $i0);
    goto SeqInstr_259, SeqInstr_260;

  SeqInstr_260:
    assume assertsPassed;
    goto SeqInstr_261;

  SeqInstr_261:
    goto corral_source_split_8121;

  corral_source_split_8121:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_8122;

  corral_source_split_8122:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_8123;

  corral_source_split_8123:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_8124;

  corral_source_split_8124:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_8130;

  corral_source_split_8130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1086} INIT_LIST_HEAD($p9);
    goto corral_source_split_8131;

  corral_source_split_8131:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_8132;

  corral_source_split_8132:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, $p1);
    goto corral_source_split_8133;

  corral_source_split_8133:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p5, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_8134;

  corral_source_split_8134:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p11, $i2);
    goto corral_source_split_8135;

  corral_source_split_8135:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_8136;

  corral_source_split_8136:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, 0);
    goto corral_source_split_8137;

  corral_source_split_8137:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p5, $mul.ref(0, 72)), $mul.ref(56, 1));
    goto corral_source_split_8138;

  corral_source_split_8138:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p13, 0);
    goto corral_source_split_8139;

  corral_source_split_8139:
    assume {:verifier.code 0} true;
    $p8 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8128;

  corral_source_split_8128:
    assume {:verifier.code 0} true;
    $r := $p8;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_8126;

  corral_source_split_8126:
    assume {:verifier.code 0} true;
    $p8 := $0.ref;
    goto $bb3;

  SeqInstr_259:
    assume !assertsPassed;
    return;
}



const qtd_fill: ref;

axiom qtd_fill == $sub.ref(0, 432943);

procedure qtd_fill($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation qtd_fill($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i1;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1087} {:cexpr "qtd_fill:arg:len"} boogie_si_record_i64($i2);
    goto corral_source_split_8141;

  corral_source_split_8141:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_8142;

  corral_source_split_8142:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, $p1);
    goto corral_source_split_8143;

  corral_source_split_8143:
    assume {:verifier.code 0} true;
    $i4 := $ugt.i64($i2, 8192);
    goto corral_source_split_8144;

  corral_source_split_8144:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $i2;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8148;

  corral_source_split_8148:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_8149;

  corral_source_split_8149:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p6, $i5);
    goto corral_source_split_8150;

  corral_source_split_8150:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_8151;

  corral_source_split_8151:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.0, $p7);
    goto corral_source_split_8152;

  corral_source_split_8152:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i8);
    goto corral_source_split_8153;

  corral_source_split_8153:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_8146;

  corral_source_split_8146:
    assume {:verifier.code 0} true;
    $i5 := 8192;
    goto $bb3;
}



const ldv_del_timer_77: ref;

axiom ldv_del_timer_77 == $sub.ref(0, 433975);

procedure ldv_del_timer_77($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.22, $M.24, $M.26, $M.28;



implementation ldv_del_timer_77($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8155;

  corral_source_split_8155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1088} $i1 := del_timer($p0);
    call {:si_unique_call 1089} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_8156;

  corral_source_split_8156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1090} disable_suitable_timer_3($p0);
    goto corral_source_split_8157;

  corral_source_split_8157:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const spin_lock_irq: ref;

axiom spin_lock_irq == $sub.ref(0, 435007);

procedure spin_lock_irq($p0: ref);
  free requires assertsPassed;
  modifies $M.30;



implementation spin_lock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8159;

  corral_source_split_8159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1091} ldv_spin_lock();
    goto corral_source_split_8160;

  corral_source_split_8160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1092} ldv_spin_lock_irq_61($p0);
    goto corral_source_split_8161;

  corral_source_split_8161:
    assume {:verifier.code 0} true;
    return;
}



const ehci_reset: ref;

axiom ehci_reset == $sub.ref(0, 436039);

procedure ehci_reset($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.40, $M.1, $M.32, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.30, $M.38, $M.36, $M.23, $M.22, $M.25, $M.24, $M.27, $M.26, $M.29, $M.28, $CurrAddr, $M.2, $M.4, $M.6, $M.8, $M.3, $M.5, $M.7, $M.9, assertsPassed;



implementation ehci_reset($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8163;

  corral_source_split_8163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1093} $p1 := hcd_to_priv($p0);
    goto corral_source_split_8164;

  corral_source_split_8164:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_8165;

  corral_source_split_8165:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_8166;

  corral_source_split_8166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1094} $i4 := reg_read32($p3, 32);
    goto SeqInstr_262, SeqInstr_263;

  SeqInstr_263:
    assume assertsPassed;
    goto SeqInstr_264;

  SeqInstr_264:
    call {:si_unique_call 1095} {:cexpr "tmp___0"} boogie_si_record_i32($i4);
    goto corral_source_split_8167;

  corral_source_split_8167:
    assume {:verifier.code 0} true;
    $i5 := $or.i32($i4, 2);
    call {:si_unique_call 1096} {:cexpr "command"} boogie_si_record_i32($i5);
    goto corral_source_split_8168;

  corral_source_split_8168:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_8169;

  corral_source_split_8169:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_8170;

  corral_source_split_8170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1097} reg_write32($p7, 32, $i5);
    goto corral_source_split_8171;

  corral_source_split_8171:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(960, 1));
    goto corral_source_split_8172;

  corral_source_split_8172:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, 0);
    goto corral_source_split_8173;

  corral_source_split_8173:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.0, jiffies);
    goto corral_source_split_8174;

  corral_source_split_8174:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 2384)), $mul.ref(2376, 1));
    goto corral_source_split_8175;

  corral_source_split_8175:
    assume {:verifier.code 0} true;
    $M.40 := $store.i64($M.40, $p10, $i9);
    goto corral_source_split_8176;

  corral_source_split_8176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1098} $i11 := handshake($p0, 32, 2, 0, 250000);
    goto SeqInstr_265, SeqInstr_266;

  SeqInstr_266:
    assume assertsPassed;
    goto SeqInstr_267;

  SeqInstr_267:
    call {:si_unique_call 1099} {:cexpr "retval"} boogie_si_record_i32($i11);
    goto corral_source_split_8177;

  corral_source_split_8177:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  SeqInstr_265:
    assume !assertsPassed;
    return;

  SeqInstr_262:
    assume !assertsPassed;
    return;
}



const spin_unlock_irq: ref;

axiom spin_unlock_irq == $sub.ref(0, 437071);

procedure spin_unlock_irq($p0: ref);
  free requires assertsPassed;
  modifies $M.30;



implementation spin_unlock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8179;

  corral_source_split_8179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1100} ldv_spin_unlock();
    goto corral_source_split_8180;

  corral_source_split_8180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1101} ldv_spin_unlock_irq_64($p0);
    goto corral_source_split_8181;

  corral_source_split_8181:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock_irq_64: ref;

axiom ldv_spin_unlock_irq_64 == $sub.ref(0, 438103);

procedure ldv_spin_unlock_irq_64($p0: ref);
  free requires assertsPassed;



implementation ldv_spin_unlock_irq_64($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8183;

  corral_source_split_8183:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_8184;

  corral_source_split_8184:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_8185;

  corral_source_split_8185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1102} _raw_spin_unlock_irq($p2);
    goto corral_source_split_8186;

  corral_source_split_8186:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irq: ref;

axiom _raw_spin_unlock_irq == $sub.ref(0, 439135);

procedure _raw_spin_unlock_irq($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8188;

  corral_source_split_8188:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_lock_irq_61: ref;

axiom ldv_spin_lock_irq_61 == $sub.ref(0, 440167);

procedure ldv_spin_lock_irq_61($p0: ref);
  free requires assertsPassed;



implementation ldv_spin_lock_irq_61($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8190;

  corral_source_split_8190:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_8191;

  corral_source_split_8191:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_8192;

  corral_source_split_8192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1103} _raw_spin_lock_irq($p2);
    goto corral_source_split_8193;

  corral_source_split_8193:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock_irq: ref;

axiom _raw_spin_lock_irq == $sub.ref(0, 441199);

procedure _raw_spin_lock_irq($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8195;

  corral_source_split_8195:
    assume {:verifier.code 0} true;
    return;
}



const down_write: ref;

axiom down_write == $sub.ref(0, 442231);

procedure down_write($p0: ref);
  free requires assertsPassed;



implementation down_write($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8197;

  corral_source_split_8197:
    assume {:verifier.code 0} true;
    return;
}



const up_write: ref;

axiom up_write == $sub.ref(0, 443263);

procedure up_write($p0: ref);
  free requires assertsPassed;



implementation up_write($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8199;

  corral_source_split_8199:
    assume {:verifier.code 0} true;
    return;
}



const errata2_function: ref;

axiom errata2_function == $sub.ref(0, 444295);

procedure errata2_function($i0: i64);



const add_timer: ref;

axiom add_timer == $sub.ref(0, 445327);

procedure add_timer($p0: ref);
  free requires assertsPassed;



implementation add_timer($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8201;

  corral_source_split_8201:
    assume {:verifier.code 0} true;
    return;
}



const ptd_read: ref;

axiom ptd_read == $sub.ref(0, 446359);

procedure ptd_read($p0: ref, $i1: i32, $i2: i32, $p3: ref);
  free requires assertsPassed;
  modifies $M.0, $M.38, $CurrAddr, $M.1, $M.32, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.30, $M.36, $M.40, $M.23, $M.22, $M.25, $M.24, $M.27, $M.26, $M.29, $M.28, $M.2, $M.4, $M.6, $M.8, $M.3, $M.5, $M.7, $M.9, assertsPassed;



implementation ptd_read($p0: ref, $i1: i32, $i2: i32, $p3: ref)
{
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1104} {:cexpr "ptd_read:arg:ptd_offset"} boogie_si_record_i32($i1);
    call {:si_unique_call 1105} {:cexpr "ptd_read:arg:slot"} boogie_si_record_i32($i2);
    goto corral_source_split_8203;

  corral_source_split_8203:
    assume {:verifier.code 0} true;
    $i4 := $mul.i32($i2, 32);
    goto corral_source_split_8204;

  corral_source_split_8204:
    assume {:verifier.code 0} true;
    $i5 := $add.i32($i4, $i1);
    goto corral_source_split_8205;

  corral_source_split_8205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1106} reg_write32($p0, 828, $i5);
    goto corral_source_split_8206;

  corral_source_split_8206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1107} __const_udelay(450);
    goto corral_source_split_8207;

  corral_source_split_8207:
    assume {:verifier.code 0} true;
    $i6 := $mul.i32($i2, 32);
    goto corral_source_split_8208;

  corral_source_split_8208:
    assume {:verifier.code 0} true;
    $i7 := $add.i32($i6, $i1);
    goto corral_source_split_8209;

  corral_source_split_8209:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p3);
    goto corral_source_split_8210;

  corral_source_split_8210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1108} bank_reads8($p0, $i7, 0, $p8, 32);
    goto SeqInstr_268, SeqInstr_269;

  SeqInstr_269:
    assume assertsPassed;
    goto SeqInstr_270;

  SeqInstr_270:
    goto corral_source_split_8211;

  corral_source_split_8211:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_268:
    assume !assertsPassed;
    return;
}



const handle_done_ptds: ref;

axiom handle_done_ptds == $sub.ref(0, 447391);

procedure handle_done_ptds($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.38, $M.36, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $CurrAddr, $M.1, $M.32, $M.30, $M.40, $M.23, $M.22, $M.25, $M.24, $M.27, $M.26, $M.29, $M.28, assertsPassed, $M.2, $M.4, $M.6, $M.8, $M.3, $M.5, $M.7, $M.9;



implementation handle_done_ptds($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $i22: i1;
  var $i26: i32;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $i32: i32;
  var $i33: i64;
  var $i34: i64;
  var $i35: i32;
  var $p36: ref;
  var $i37: i32;
  var $i38: i32;
  var $i39: i32;
  var $i40: i32;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var $i49: i1;
  var $i50: i1;
  var $i51: i32;
  var $i52: i64;
  var $i53: i64;
  var $i54: i1;
  var $i55: i1;
  var $i56: i32;
  var $i57: i64;
  var $p59: ref;
  var $p60: ref;
  var $i61: i64;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $i67: i32;
  var $p72: ref;
  var $i73: i32;
  var $i74: i64;
  var $i75: i64;
  var $i76: i32;
  var $p77: ref;
  var $i78: i32;
  var $i79: i32;
  var $i80: i32;
  var $i81: i32;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $i85: i64;
  var $p87: ref;
  var $p88: ref;
  var $i89: i64;
  var $i90: i1;
  var $i91: i1;
  var $i92: i32;
  var $i93: i64;
  var $i94: i64;
  var $i95: i1;
  var $i96: i1;
  var $i97: i32;
  var $i98: i64;
  var $p100: ref;
  var $p101: ref;
  var $i102: i64;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $i108: i32;
  var $i68: i32;
  var $i69: i32;
  var $p70: ref;
  var $i71: i32;
  var $i109: i64;
  var $p111: ref;
  var $p112: ref;
  var $i113: i64;
  var $p115: ref;
  var $i116: i64;
  var $p118: ref;
  var $p119: ref;
  var $i120: i64;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $i125: i32;
  var $i126: i1;
  var $i127: i32;
  var $i128: i1;
  var $i129: i32;
  var $i130: i64;
  var $i131: i64;
  var $i132: i1;
  var $i133: i1;
  var $i134: i32;
  var $i135: i64;
  var $i137: i1;
  var $i138: i1;
  var $i139: i1;
  var $i140: i1;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $i144: i32;
  var $i145: i32;
  var $i146: i1;
  var $p147: ref;
  var $p148: ref;
  var $p149: ref;
  var $p150: ref;
  var $p151: ref;
  var $i152: i32;
  var $i153: i1;
  var $p154: ref;
  var $i155: i32;
  var $i156: i64;
  var $i157: i64;
  var $p158: ref;
  var $p159: ref;
  var $i160: i32;
  var $i161: i64;
  var $i162: i64;
  var $p163: ref;
  var $p164: ref;
  var $p165: ref;
  var $p166: ref;
  var $i167: i32;
  var $i168: i1;
  var $i170: i32;
  var $i171: i1;
  var $p174: ref;
  var $p175: ref;
  var $p176: ref;
  var $p177: ref;
  var $p172: ref;
  var $p169: ref;
  var $p178: ref;
  var $i179: i32;
  var $i180: i32;
  var $i181: i32;
  var $p182: ref;
  var $p183: ref;
  var $i184: i32;
  var $i185: i32;
  var $i186: i32;
  var $p187: ref;
  var $p189: ref;
  var $p190: ref;
  var $i191: i32;
  var $i192: i32;
  var $p193: ref;
  var $p194: ref;
  var $i195: i32;
  var $i196: i32;
  var $p197: ref;
  var $p198: ref;
  var $i199: i32;
  var $p200: ref;
  var $i201: i32;
  var $i202: i32;
  var $i203: i32;
  var $i204: i32;
  var $i205: i32;
  var $p206: ref;
  var $p207: ref;
  var $i208: i32;
  var $i209: i32;
  var $p210: ref;
  var $p211: ref;
  var $i212: i32;
  var $i213: i32;
  var $p214: ref;
  var $p215: ref;
  var $i216: i32;
  var $i217: i32;
  var $i218: i32;
  var $p219: ref;
  var $p220: ref;
  var $i221: i32;
  var $i222: i32;
  var $i223: i32;
  var $p224: ref;
  var $p225: ref;
  var $p226: ref;
  var $p227: ref;
  var $p228: ref;
  var $p229: ref;
  var $p230: ref;
  var $i231: i32;
  var $i232: i1;
  var $p233: ref;
  var $p234: ref;
  var $p235: ref;
  var $i236: i32;
  var $i237: i1;
  var $p238: ref;
  var $p239: ref;
  var $p240: ref;
  var $i241: i32;
  var $i242: i1;
  var $p243: ref;
  var $p244: ref;
  var $p245: ref;
  var $i246: i32;
  var $i247: i1;
  var $p248: ref;
  var $p249: ref;
  var $p250: ref;
  var $i251: i1;
  var $i252: i32;
  var $i253: i64;
  var $i254: i64;
  var $i255: i1;
  var $i256: i1;
  var $i257: i32;
  var $i258: i64;
  var $p188: ref;
  var $i260: i64;
  var $i261: i1;
  var $p262: ref;
  var $i263: i32;
  var $i264: i1;
  var $p265: ref;
  var $p266: ref;
  var $i267: i64;
  var $i268: i64;
  var $i269: i1;
  var $i270: i1;
  var $p272: ref;
  var $p273: ref;
  var $i274: i1;
  var $i275: i1;
  var $p276: ref;
  var $i277: i32;
  var $i278: i1;
  var $i279: i32;
  var $i280: i1;
  var $i281: i1;
  var vslice_dummy_var_72: i64;
  var vslice_dummy_var_73: i64;
  var vslice_dummy_var_74: i64;
  var vslice_dummy_var_75: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1109} $p1 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    goto corral_source_split_8213;

  corral_source_split_8213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1110} $p2 := hcd_to_priv($p0);
    goto corral_source_split_8214;

  corral_source_split_8214:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_8215;

  corral_source_split_8215:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_8216;

  corral_source_split_8216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1111} $i5 := reg_read32($p4, 324);
    goto SeqInstr_271, SeqInstr_272;

  SeqInstr_272:
    assume assertsPassed;
    goto SeqInstr_273;

  SeqInstr_273:
    call {:si_unique_call 1112} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    goto corral_source_split_8217;

  corral_source_split_8217:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1632, 1));
    goto corral_source_split_8218;

  corral_source_split_8218:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_8219;

  corral_source_split_8219:
    assume {:verifier.code 0} true;
    $i8 := $xor.i32($i5, $sub.i32(0, 1));
    goto corral_source_split_8220;

  corral_source_split_8220:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i7, $i8);
    goto corral_source_split_8221;

  corral_source_split_8221:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1632, 1));
    goto corral_source_split_8222;

  corral_source_split_8222:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i9);
    goto corral_source_split_8223;

  corral_source_split_8223:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_8224;

  corral_source_split_8224:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_8225;

  corral_source_split_8225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1113} $i13 := reg_read32($p12, 340);
    goto SeqInstr_274, SeqInstr_275;

  SeqInstr_275:
    assume assertsPassed;
    goto SeqInstr_276;

  SeqInstr_276:
    call {:si_unique_call 1114} {:cexpr "tmp___1"} boogie_si_record_i32($i13);
    goto corral_source_split_8226;

  corral_source_split_8226:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(856, 1));
    goto corral_source_split_8227;

  corral_source_split_8227:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_8228;

  corral_source_split_8228:
    assume {:verifier.code 0} true;
    $i16 := $xor.i32($i13, $sub.i32(0, 1));
    goto corral_source_split_8229;

  corral_source_split_8229:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i15, $i16);
    goto corral_source_split_8230;

  corral_source_split_8230:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(856, 1));
    goto corral_source_split_8231;

  corral_source_split_8231:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, $i17);
    goto corral_source_split_8232;

  corral_source_split_8232:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1632, 1));
    goto corral_source_split_8233;

  corral_source_split_8233:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_8234;

  corral_source_split_8234:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_8235;

  corral_source_split_8235:
    assume {:verifier.code 0} true;
    $i22 := 1;
    assume {:branchcond $i21} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i21 == 1);
    goto corral_source_split_8241;

  corral_source_split_8241:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(856, 1));
    goto corral_source_split_8242;

  corral_source_split_8242:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_8243;

  corral_source_split_8243:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_8244;

  corral_source_split_8244:
    assume {:verifier.code 0} true;
    $i22 := $i25;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_8237;

  corral_source_split_8237:
    assume {:verifier.code 0} true;
    $i26 := $zext.i1.i32($i22);
    call {:si_unique_call 1115} {:cexpr "modified"} boogie_si_record_i32($i26);
    goto corral_source_split_8238;

  corral_source_split_8238:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(856, 1));
    goto corral_source_split_8239;

  corral_source_split_8239:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p28, $i29, $i30, $p31, $i32, $i33, $i34, $i35, $p36, $i37, $i38, $i39, $i40, $p41, $p42, $p43, $i44, $p46, $p47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $p59, $p60, $i61, $p63, $p64, $p65, $p66, $i67, $p72, $i73, $i74, $i75, $i76, $p77, $i78, $i79, $i80, $i81, $p82, $p83, $p84, $i85, $p87, $p88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $p100, $p101, $i102, $p104, $p105, $p106, $p107, $i108, $i68, $i69, $p70, $i71, $i109, $p111, $p112, $i113, $p115, $i116, $p118, $p119, $i120, $p122, $p123, $p124, $i125, $i126, $i127, $i128, $i129, $i130, $i131, $i132, $i133, $i134, $i135, $i137, $i138, $i139, $i140, $p141, $p142, $p143, $i144, $i145, $i146, $p147, $p148, $p149, $p150, $p151, $i152, $i153, $p154, $i155, $i156, $i157, $p158, $p159, $i160, $i161, $i162, $p163, $p164, $p165, $p166, $i167, $i168, $i170, $i171, $p174, $p175, $p176, $p177, $p172, $p169, $p178, $i179, $i180, $i181, $p182, $p183, $i184, $i185, $i186, $p187, $p189, $p190, $i191, $i192, $p193, $p194, $i195, $i196, $p197, $p198, $i199, $p200, $i201, $i202, $i203, $i204, $i205, $p206, $p207, $i208, $i209, $p210, $p211, $i212, $i213, $p214, $p215, $i216, $i217, $i218, $p219, $p220, $i221, $i222, $i223, $p224, $p225, $p226, $p227, $p228, $p229, $p230, $i231, $i232, $p233, $p234, $p235, $i236, $i237, $p238, $p239, $p240, $i241, $i242, $p243, $p244, $p245, $i246, $i247, $p248, $p249, $p250, $i251, $i252, $i253, $i254, $i255, $i256, $i257, $i258, $p188, $i260, $i261, $p262, $i263, $i264, $p265, $p266, $i267, $i268, $i269, $i270, $p272, $p273, $i274, $i275, $p276, $i277, $i278, $i279, $i280, vslice_dummy_var_72, vslice_dummy_var_73, vslice_dummy_var_74, vslice_dummy_var_75 := handle_done_ptds_loop_$bb4($p0, $p1, $p2, $p27, $p28, $i29, $i30, $p31, $i32, $i33, $i34, $i35, $p36, $i37, $i38, $i39, $i40, $p41, $p42, $p43, $i44, $p46, $p47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $p59, $p60, $i61, $p63, $p64, $p65, $p66, $i67, $p72, $i73, $i74, $i75, $i76, $p77, $i78, $i79, $i80, $i81, $p82, $p83, $p84, $i85, $p87, $p88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $p100, $p101, $i102, $p104, $p105, $p106, $p107, $i108, $i68, $i69, $p70, $i71, $i109, $p111, $p112, $i113, $p115, $i116, $p118, $p119, $i120, $p122, $p123, $p124, $i125, $i126, $i127, $i128, $i129, $i130, $i131, $i132, $i133, $i134, $i135, $i137, $i138, $i139, $i140, $p141, $p142, $p143, $i144, $i145, $i146, $p147, $p148, $p149, $p150, $p151, $i152, $i153, $p154, $i155, $i156, $i157, $p158, $p159, $i160, $i161, $i162, $p163, $p164, $p165, $p166, $i167, $i168, $i170, $i171, $p174, $p175, $p176, $p177, $p172, $p169, $p178, $i179, $i180, $i181, $p182, $p183, $i184, $i185, $i186, $p187, $p189, $p190, $i191, $i192, $p193, $p194, $i195, $i196, $p197, $p198, $i199, $p200, $i201, $i202, $i203, $i204, $i205, $p206, $p207, $i208, $i209, $p210, $p211, $i212, $i213, $p214, $p215, $i216, $i217, $i218, $p219, $p220, $i221, $i222, $i223, $p224, $p225, $p226, $p227, $p228, $p229, $p230, $i231, $i232, $p233, $p234, $p235, $i236, $i237, $p238, $p239, $p240, $i241, $i242, $p243, $p244, $p245, $i246, $i247, $p248, $p249, $p250, $i251, $i252, $i253, $i254, $i255, $i256, $i257, $i258, $p188, $i260, $i261, $p262, $i263, $i264, $p265, $p266, $i267, $i268, $i269, $i270, $p272, $p273, $i274, $i275, $p276, $i277, $i278, $i279, $i280, vslice_dummy_var_72, vslice_dummy_var_73, vslice_dummy_var_74, vslice_dummy_var_75);
    goto $bb4_last;

  corral_source_split_8246:
    assume {:verifier.code 0} true;
    $i277 := $load.i32($M.0, $p276);
    goto corral_source_split_8247;

  corral_source_split_8247:
    assume {:verifier.code 0} true;
    $i278 := $ne.i32($i277, 0);
    goto corral_source_split_8248;

  corral_source_split_8248:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb83;

  $bb83:
    assume !($i278 == 1);
    goto corral_source_split_8589;

  corral_source_split_8589:
    assume {:verifier.code 0} true;
    $i279 := $load.i32($M.0, $p27);
    goto corral_source_split_8590;

  corral_source_split_8590:
    assume {:verifier.code 0} true;
    $i280 := $ne.i32($i279, 0);
    goto corral_source_split_8591;

  corral_source_split_8591:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i280 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $i281 := $ne.i32($i26, 0);
    goto corral_source_split_8593;

  corral_source_split_8593:
    assume {:verifier.code 0} true;
    assume {:branchcond $i281} true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i281 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    return;

  $bb87:
    assume $i281 == 1;
    goto corral_source_split_8595;

  corral_source_split_8595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1155} schedule_ptds($p0);
    goto SeqInstr_286, SeqInstr_287;

  SeqInstr_287:
    assume assertsPassed;
    goto SeqInstr_288;

  SeqInstr_288:
    goto corral_source_split_8596;

  corral_source_split_8596:
    assume {:verifier.code 0} true;
    goto $bb89;

  SeqInstr_286:
    assume !assertsPassed;
    return;

  $bb84:
    assume {:verifier.code 0} true;
    assume $i280 == 1;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1632, 1));
    goto corral_source_split_8250;

  corral_source_split_8250:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_8251;

  corral_source_split_8251:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_8252;

  corral_source_split_8252:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i30 == 1);
    goto corral_source_split_8276;

  corral_source_split_8276:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(856, 1));
    goto corral_source_split_8277;

  corral_source_split_8277:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.0, $p72);
    goto corral_source_split_8278;

  corral_source_split_8278:
    assume {:verifier.code 0} true;
    $i74 := $sext.i32.i64($i73);
    goto corral_source_split_8279;

  corral_source_split_8279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1119} $i75 := __ffs($i74);
    call {:si_unique_call 1120} {:cexpr "tmp___4"} boogie_si_record_i64($i75);
    goto corral_source_split_8280;

  corral_source_split_8280:
    assume {:verifier.code 0} true;
    $i76 := $trunc.i64.i32($i75);
    call {:si_unique_call 1121} {:cexpr "slot"} boogie_si_record_i32($i76);
    goto corral_source_split_8281;

  corral_source_split_8281:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(856, 1));
    goto corral_source_split_8282;

  corral_source_split_8282:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.0, $p77);
    goto corral_source_split_8283;

  corral_source_split_8283:
    assume {:verifier.code 0} true;
    $i79 := $shl.i32(1, $i76);
    goto corral_source_split_8284;

  corral_source_split_8284:
    assume {:verifier.code 0} true;
    $i80 := $xor.i32($i79, $sub.i32(0, 1));
    goto corral_source_split_8285;

  corral_source_split_8285:
    assume {:verifier.code 0} true;
    $i81 := $and.i32($i78, $i80);
    goto corral_source_split_8286;

  corral_source_split_8286:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(856, 1));
    goto corral_source_split_8287;

  corral_source_split_8287:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p82, $i81);
    goto corral_source_split_8288;

  corral_source_split_8288:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(88, 1));
    goto corral_source_split_8289;

  corral_source_split_8289:
    assume {:verifier.code 0} true;
    $p84 := $bitcast.ref.ref($p83);
    goto corral_source_split_8290;

  corral_source_split_8290:
    assume {:verifier.code 0} true;
    $i85 := $sext.i32.i64($i76);
    goto corral_source_split_8291;

  corral_source_split_8291:
    assume {:verifier.code 0} true;
    goto corral_source_split_8292;

  corral_source_split_8292:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p84, $mul.ref($i85, 24)), $mul.ref(0, 1));
    goto corral_source_split_8293;

  corral_source_split_8293:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.0, $p87);
    goto corral_source_split_8294;

  corral_source_split_8294:
    assume {:verifier.code 0} true;
    $i89 := $p2i.ref.i64($p88);
    goto corral_source_split_8295;

  corral_source_split_8295:
    assume {:verifier.code 0} true;
    $i90 := $eq.i64($i89, 0);
    goto corral_source_split_8296;

  corral_source_split_8296:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_8368;

  corral_source_split_8368:
    assume {:verifier.code 0} true;
    $p101 := $load.ref($M.0, $p100);
    goto corral_source_split_8369;

  corral_source_split_8369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1136} ptd_read($p101, 3072, $i76, $p1);
    goto SeqInstr_280, SeqInstr_281;

  SeqInstr_281:
    assume assertsPassed;
    goto SeqInstr_282;

  SeqInstr_282:
    goto corral_source_split_8370;

  corral_source_split_8370:
    assume {:verifier.code 0} true;
    $i102 := $sext.i32.i64($i76);
    goto corral_source_split_8371;

  corral_source_split_8371:
    assume {:verifier.code 0} true;
    goto corral_source_split_8372;

  corral_source_split_8372:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p84, $mul.ref($i102, 24)), $mul.ref(8, 1));
    goto corral_source_split_8373;

  corral_source_split_8373:
    assume {:verifier.code 0} true;
    $p105 := $load.ref($M.0, $p104);
    goto corral_source_split_8374;

  corral_source_split_8374:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p105, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_8375;

  corral_source_split_8375:
    assume {:verifier.code 0} true;
    $p107 := $load.ref($M.0, $p106);
    goto corral_source_split_8376;

  corral_source_split_8376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1137} $i108 := check_atl_transfer($p0, $p1, $p107);
    call {:si_unique_call 1138} {:cexpr "state"} boogie_si_record_i32($i108);
    assume {:verifier.code 0} true;
    $i68, $i69, $p70, $i71 := $i76, $i108, $p83, 3072;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8324;

  corral_source_split_8324:
    assume {:verifier.code 0} true;
    $i109 := $sext.i32.i64($i68);
    goto corral_source_split_8325;

  corral_source_split_8325:
    assume {:verifier.code 0} true;
    goto corral_source_split_8326;

  corral_source_split_8326:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p70, $mul.ref($i109, 24)), $mul.ref(8, 1));
    goto corral_source_split_8327;

  corral_source_split_8327:
    assume {:verifier.code 0} true;
    $p112 := $load.ref($M.0, $p111);
    goto corral_source_split_8328;

  corral_source_split_8328:
    assume {:verifier.code 0} true;
    $i113 := $sext.i32.i64($i68);
    goto corral_source_split_8329;

  corral_source_split_8329:
    assume {:verifier.code 0} true;
    goto corral_source_split_8330;

  corral_source_split_8330:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p70, $mul.ref($i113, 24)), $mul.ref(8, 1));
    goto corral_source_split_8331;

  corral_source_split_8331:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p115, $0.ref);
    goto corral_source_split_8332;

  corral_source_split_8332:
    assume {:verifier.code 0} true;
    $i116 := $sext.i32.i64($i68);
    goto corral_source_split_8333;

  corral_source_split_8333:
    assume {:verifier.code 0} true;
    goto corral_source_split_8334;

  corral_source_split_8334:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p70, $mul.ref($i116, 24)), $mul.ref(0, 1));
    goto corral_source_split_8335;

  corral_source_split_8335:
    assume {:verifier.code 0} true;
    $p119 := $load.ref($M.0, $p118);
    goto corral_source_split_8336;

  corral_source_split_8336:
    assume {:verifier.code 0} true;
    $i120 := $sext.i32.i64($i68);
    goto corral_source_split_8337;

  corral_source_split_8337:
    assume {:verifier.code 0} true;
    goto corral_source_split_8338;

  corral_source_split_8338:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p70, $mul.ref($i120, 24)), $mul.ref(0, 1));
    goto corral_source_split_8339;

  corral_source_split_8339:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p122, $0.ref);
    goto corral_source_split_8340;

  corral_source_split_8340:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p119, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_8341;

  corral_source_split_8341:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p123, $sub.i32(0, 1));
    goto corral_source_split_8342;

  corral_source_split_8342:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p112, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_8343;

  corral_source_split_8343:
    assume {:verifier.code 0} true;
    $i125 := $load.i32($M.0, $p124);
    goto corral_source_split_8344;

  corral_source_split_8344:
    assume {:verifier.code 0} true;
    $i126 := $ne.i32($i125, 2);
    goto corral_source_split_8345;

  corral_source_split_8345:
    assume {:verifier.code 0} true;
    $i127 := $zext.i1.i32($i126);
    call {:si_unique_call 1129} {:cexpr "__ret_warn_on___1"} boogie_si_record_i32($i127);
    goto corral_source_split_8346;

  corral_source_split_8346:
    assume {:verifier.code 0} true;
    $i128 := $ne.i32($i127, 0);
    goto corral_source_split_8347;

  corral_source_split_8347:
    assume {:verifier.code 0} true;
    $i129 := $zext.i1.i32($i128);
    goto corral_source_split_8348;

  corral_source_split_8348:
    assume {:verifier.code 0} true;
    $i130 := $sext.i32.i64($i129);
    goto corral_source_split_8349;

  corral_source_split_8349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1130} $i131 := ldv__builtin_expect($i130, 0);
    call {:si_unique_call 1131} {:cexpr "tmp___6"} boogie_si_record_i64($i131);
    goto corral_source_split_8350;

  corral_source_split_8350:
    assume {:verifier.code 0} true;
    $i132 := $ne.i64($i131, 0);
    goto corral_source_split_8351;

  corral_source_split_8351:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i132 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i133 := $ne.i32($i127, 0);
    goto corral_source_split_8381;

  corral_source_split_8381:
    assume {:verifier.code 0} true;
    $i134 := $zext.i1.i32($i133);
    goto corral_source_split_8382;

  corral_source_split_8382:
    assume {:verifier.code 0} true;
    $i135 := $sext.i32.i64($i134);
    goto corral_source_split_8383;

  corral_source_split_8383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1140} vslice_dummy_var_74 := ldv__builtin_expect($i135, 0);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i137 := $slt.i32($i69, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i137 == 1);
    assume {:verifier.code 0} true;
    $i138 := $slt.i32($i69, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i138 == 1);
    assume {:verifier.code 0} true;
    $i139 := $eq.i32($i69, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i139 == 1);
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $i251 := $ne.i32(1, 0);
    goto corral_source_split_8542;

  corral_source_split_8542:
    assume {:verifier.code 0} true;
    $i252 := $zext.i1.i32($i251);
    goto corral_source_split_8543;

  corral_source_split_8543:
    assume {:verifier.code 0} true;
    $i253 := $sext.i32.i64($i252);
    goto corral_source_split_8544;

  corral_source_split_8544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1147} $i254 := ldv__builtin_expect($i253, 0);
    call {:si_unique_call 1148} {:cexpr "tmp___10"} boogie_si_record_i64($i254);
    goto corral_source_split_8545;

  corral_source_split_8545:
    assume {:verifier.code 0} true;
    $i255 := $ne.i64($i254, 0);
    goto corral_source_split_8546;

  corral_source_split_8546:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i255 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $i256 := $ne.i32(1, 0);
    goto corral_source_split_8551;

  corral_source_split_8551:
    assume {:verifier.code 0} true;
    $i257 := $zext.i1.i32($i256);
    goto corral_source_split_8552;

  corral_source_split_8552:
    assume {:verifier.code 0} true;
    $i258 := $sext.i32.i64($i257);
    goto corral_source_split_8553;

  corral_source_split_8553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1150} vslice_dummy_var_75 := ldv__builtin_expect($i258, 0);
    goto corral_source_split_8554;

  corral_source_split_8554:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb13_dummy;

  $bb60:
    assume $i255 == 1;
    goto corral_source_split_8548;

  corral_source_split_8548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1149} warn_slowpath_null(.str.29, 1181);
    goto corral_source_split_8549;

  corral_source_split_8549:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb30:
    assume $i139 == 1;
    goto corral_source_split_8431;

  corral_source_split_8431:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($p112, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_8432;

  corral_source_split_8432:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p225, 4);
    goto corral_source_split_8433;

  corral_source_split_8433:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($p112, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_8434;

  corral_source_split_8434:
    assume {:verifier.code 0} true;
    $p227 := $load.ref($M.0, $p226);
    goto corral_source_split_8435;

  corral_source_split_8435:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($add.ref($p227, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_8436;

  corral_source_split_8436:
    assume {:verifier.code 0} true;
    $p229 := $load.ref($M.0, $p228);
    goto corral_source_split_8437;

  corral_source_split_8437:
    assume {:verifier.code 0} true;
    $p230 := $add.ref($add.ref($p229, $mul.ref(0, 2040)), $mul.ref(28, 1));
    goto corral_source_split_8438;

  corral_source_split_8438:
    assume {:verifier.code 0} true;
    $i231 := $load.i32($M.0, $p230);
    goto corral_source_split_8439;

  corral_source_split_8439:
    assume {:verifier.code 0} true;
    $i232 := $ne.i32($i231, 3);
    goto corral_source_split_8440;

  corral_source_split_8440:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    assume !($i232 == 1);
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($add.ref($p119, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_8537;

  corral_source_split_8537:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p249, 0);
    goto corral_source_split_8538;

  corral_source_split_8538:
    assume {:verifier.code 0} true;
    $p250 := $add.ref($add.ref($p119, $mul.ref(0, 48)), $mul.ref(36, 1));
    goto corral_source_split_8539;

  corral_source_split_8539:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p250, 0);
    goto corral_source_split_8540;

  corral_source_split_8540:
    assume {:verifier.code 0} true;
    $p188 := $0.ref;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto corral_source_split_8507;

  corral_source_split_8507:
    assume {:verifier.code 0} true;
    $i260 := $p2i.ref.i64($p188);
    goto corral_source_split_8508;

  corral_source_split_8508:
    assume {:verifier.code 0} true;
    $i261 := $ne.i64($i260, 0);
    goto corral_source_split_8509;

  corral_source_split_8509:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    assume !($i261 == 1);
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb63:
    assume $i261 == 1;
    goto corral_source_split_8556;

  corral_source_split_8556:
    assume {:verifier.code 0} true;
    $p262 := $add.ref($add.ref($p188, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_8557;

  corral_source_split_8557:
    assume {:verifier.code 0} true;
    $i263 := $load.i32($M.0, $p262);
    goto corral_source_split_8558;

  corral_source_split_8558:
    assume {:verifier.code 0} true;
    $i264 := $eq.i32($i263, 1);
    goto corral_source_split_8559;

  corral_source_split_8559:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    assume !($i264 == 1);
    goto $bb65;

  $bb66:
    assume $i264 == 1;
    goto corral_source_split_8561;

  corral_source_split_8561:
    assume {:verifier.code 0} true;
    $p265 := $add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(864, 1));
    goto corral_source_split_8562;

  corral_source_split_8562:
    assume {:verifier.code 0} true;
    $p266 := $bitcast.ref.ref($p265);
    goto corral_source_split_8563;

  corral_source_split_8563:
    assume {:verifier.code 0} true;
    $i267 := $p2i.ref.i64($p266);
    goto corral_source_split_8564;

  corral_source_split_8564:
    assume {:verifier.code 0} true;
    $i268 := $p2i.ref.i64($p70);
    goto corral_source_split_8565;

  corral_source_split_8565:
    assume {:verifier.code 0} true;
    $i269 := $eq.i64($i267, $i268);
    goto corral_source_split_8566;

  corral_source_split_8566:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i269 == 1);
    goto corral_source_split_8571;

  corral_source_split_8571:
    assume {:verifier.code 0} true;
    $i275 := $ne.i32($i69, 2);
    goto corral_source_split_8572;

  corral_source_split_8572:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i275 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1153} start_bus_transfer($p0, $i71, $i68, $p70, $p188, $p119, $p1);
    goto SeqInstr_283, SeqInstr_284;

  SeqInstr_284:
    assume assertsPassed;
    goto SeqInstr_285;

  SeqInstr_285:
    goto corral_source_split_8584;

  corral_source_split_8584:
    assume {:verifier.code 0} true;
    goto $bb80;

  SeqInstr_283:
    assume !assertsPassed;
    return;

  $bb77:
    assume $i275 == 1;
    goto corral_source_split_8586;

  corral_source_split_8586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1154} create_ptd_atl($p119, $p188, $p1);
    goto corral_source_split_8587;

  corral_source_split_8587:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb68:
    assume $i269 == 1;
    goto corral_source_split_8568;

  corral_source_split_8568:
    assume {:verifier.code 0} true;
    $i270 := $eq.i32($i69, 2);
    goto corral_source_split_8569;

  corral_source_split_8569:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i270 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $i274 := $ne.i32($i69, 2);
    goto corral_source_split_8579;

  corral_source_split_8579:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i274 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb73:
    assume $i274 == 1;
    goto corral_source_split_8581;

  corral_source_split_8581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1152} create_ptd_int($p119, $p188, $p1);
    goto corral_source_split_8582;

  corral_source_split_8582:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb70:
    assume $i270 == 1;
    goto corral_source_split_8574;

  corral_source_split_8574:
    assume {:verifier.code 0} true;
    $p272 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_8575;

  corral_source_split_8575:
    assume {:verifier.code 0} true;
    $p273 := $load.ref($M.0, $p272);
    goto corral_source_split_8576;

  corral_source_split_8576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1151} dev_err.ref.ref.ref($p273, .str.30, .str.31);
    goto corral_source_split_8577;

  corral_source_split_8577:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb48:
    assume $i232 == 1;
    goto corral_source_split_8511;

  corral_source_split_8511:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($add.ref($p112, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_8512;

  corral_source_split_8512:
    assume {:verifier.code 0} true;
    $p234 := $load.ref($M.0, $p233);
    goto corral_source_split_8513;

  corral_source_split_8513:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($add.ref($p234, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_8514;

  corral_source_split_8514:
    assume {:verifier.code 0} true;
    $i236 := $load.i32($M.0, $p235);
    goto corral_source_split_8515;

  corral_source_split_8515:
    assume {:verifier.code 0} true;
    $i237 := $ne.i32($i236, $sub.i32(0, 32));
    goto corral_source_split_8516;

  corral_source_split_8516:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    assume !($i237 == 1);
    goto $bb50;

  $bb51:
    assume $i237 == 1;
    goto corral_source_split_8518;

  corral_source_split_8518:
    assume {:verifier.code 0} true;
    $p238 := $add.ref($add.ref($p112, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_8519;

  corral_source_split_8519:
    assume {:verifier.code 0} true;
    $p239 := $load.ref($M.0, $p238);
    goto corral_source_split_8520;

  corral_source_split_8520:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($add.ref($p239, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_8521;

  corral_source_split_8521:
    assume {:verifier.code 0} true;
    $i241 := $load.i32($M.0, $p240);
    goto corral_source_split_8522;

  corral_source_split_8522:
    assume {:verifier.code 0} true;
    $i242 := $ne.i32($i241, $sub.i32(0, 121));
    goto corral_source_split_8523;

  corral_source_split_8523:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    assume !($i242 == 1);
    goto $bb50;

  $bb53:
    assume $i242 == 1;
    goto corral_source_split_8525;

  corral_source_split_8525:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($add.ref($p119, $mul.ref(0, 48)), $mul.ref(44, 1));
    goto corral_source_split_8526;

  corral_source_split_8526:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p243, 1);
    goto corral_source_split_8527;

  corral_source_split_8527:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($p112, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_8528;

  corral_source_split_8528:
    assume {:verifier.code 0} true;
    $p245 := $load.ref($M.0, $p244);
    goto corral_source_split_8529;

  corral_source_split_8529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1145} $i246 := usb_hub_clear_tt_buffer($p245);
    call {:si_unique_call 1146} {:cexpr "tmp___9"} boogie_si_record_i32($i246);
    goto corral_source_split_8530;

  corral_source_split_8530:
    assume {:verifier.code 0} true;
    $i247 := $ne.i32($i246, 0);
    goto corral_source_split_8531;

  corral_source_split_8531:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i247 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb55:
    assume $i247 == 1;
    goto corral_source_split_8533;

  corral_source_split_8533:
    assume {:verifier.code 0} true;
    $p248 := $add.ref($add.ref($p119, $mul.ref(0, 48)), $mul.ref(44, 1));
    goto corral_source_split_8534;

  corral_source_split_8534:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p248, 0);
    goto corral_source_split_8535;

  corral_source_split_8535:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb28:
    assume $i138 == 1;
    goto corral_source_split_8385;

  corral_source_split_8385:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($p112, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_8386;

  corral_source_split_8386:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p189, 1);
    goto corral_source_split_8387;

  corral_source_split_8387:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_8388;

  corral_source_split_8388:
    assume {:verifier.code 0} true;
    $i191 := $load.i32($M.0, $p190);
    goto corral_source_split_8389;

  corral_source_split_8389:
    assume {:verifier.code 0} true;
    $i192 := $or.i32($i191, 1);
    goto corral_source_split_8390;

  corral_source_split_8390:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_8391;

  corral_source_split_8391:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p193, $i192);
    goto corral_source_split_8392;

  corral_source_split_8392:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_8393;

  corral_source_split_8393:
    assume {:verifier.code 0} true;
    $i195 := $load.i32($M.0, $p194);
    goto corral_source_split_8394;

  corral_source_split_8394:
    assume {:verifier.code 0} true;
    $i196 := $and.i32($i195, $sub.i32(0, 7864321));
    goto corral_source_split_8395;

  corral_source_split_8395:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_8396;

  corral_source_split_8396:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p197, $i196);
    goto corral_source_split_8397;

  corral_source_split_8397:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_8398;

  corral_source_split_8398:
    assume {:verifier.code 0} true;
    $i199 := $load.i32($M.0, $p198);
    goto corral_source_split_8399;

  corral_source_split_8399:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_8400;

  corral_source_split_8400:
    assume {:verifier.code 0} true;
    $i201 := $load.i32($M.0, $p200);
    goto corral_source_split_8401;

  corral_source_split_8401:
    assume {:verifier.code 0} true;
    $i202 := $lshr.i32($i201, 25);
    goto corral_source_split_8402;

  corral_source_split_8402:
    assume {:verifier.code 0} true;
    $i203 := $and.i32($i202, 15);
    goto corral_source_split_8403;

  corral_source_split_8403:
    assume {:verifier.code 0} true;
    $i204 := $shl.i32($i203, 19);
    goto corral_source_split_8404;

  corral_source_split_8404:
    assume {:verifier.code 0} true;
    $i205 := $or.i32($i199, $i204);
    goto corral_source_split_8405;

  corral_source_split_8405:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_8406;

  corral_source_split_8406:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p206, $i205);
    goto corral_source_split_8407;

  corral_source_split_8407:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_8408;

  corral_source_split_8408:
    assume {:verifier.code 0} true;
    $i208 := $load.i32($M.0, $p207);
    goto corral_source_split_8409;

  corral_source_split_8409:
    assume {:verifier.code 0} true;
    $i209 := $and.i32($i208, $sub.i32(0, 25165825));
    goto corral_source_split_8410;

  corral_source_split_8410:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_8411;

  corral_source_split_8411:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p210, $i209);
    goto corral_source_split_8412;

  corral_source_split_8412:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_8413;

  corral_source_split_8413:
    assume {:verifier.code 0} true;
    $i212 := $load.i32($M.0, $p211);
    goto corral_source_split_8414;

  corral_source_split_8414:
    assume {:verifier.code 0} true;
    $i213 := $or.i32($i212, 16777216);
    goto corral_source_split_8415;

  corral_source_split_8415:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_8416;

  corral_source_split_8416:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p214, $i213);
    goto corral_source_split_8417;

  corral_source_split_8417:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_8418;

  corral_source_split_8418:
    assume {:verifier.code 0} true;
    $i216 := $load.i32($M.0, $p215);
    goto corral_source_split_8419;

  corral_source_split_8419:
    assume {:verifier.code 0} true;
    $i217 := $lshr.i32($i216, 25);
    goto corral_source_split_8420;

  corral_source_split_8420:
    assume {:verifier.code 0} true;
    $i218 := $and.i32($i217, 1);
    goto corral_source_split_8421;

  corral_source_split_8421:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($add.ref($p119, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_8422;

  corral_source_split_8422:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p219, $i218);
    goto corral_source_split_8423;

  corral_source_split_8423:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_8424;

  corral_source_split_8424:
    assume {:verifier.code 0} true;
    $i221 := $load.i32($M.0, $p220);
    goto corral_source_split_8425;

  corral_source_split_8425:
    assume {:verifier.code 0} true;
    $i222 := $lshr.i32($i221, 26);
    goto corral_source_split_8426;

  corral_source_split_8426:
    assume {:verifier.code 0} true;
    $i223 := $and.i32($i222, 1);
    goto corral_source_split_8427;

  corral_source_split_8427:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($p119, $mul.ref(0, 48)), $mul.ref(36, 1));
    goto corral_source_split_8428;

  corral_source_split_8428:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p224, $i223);
    goto corral_source_split_8429;

  corral_source_split_8429:
    assume {:verifier.code 0} true;
    $p188 := $p112;
    goto $bb47;

  $bb26:
    assume $i137 == 1;
    assume {:verifier.code 0} true;
    $i140 := $eq.i32($i69, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i140 == 1);
    goto $bb32;

  $bb33:
    assume $i140 == 1;
    goto corral_source_split_8442;

  corral_source_split_8442:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p112, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_8443;

  corral_source_split_8443:
    assume {:verifier.code 0} true;
    $p142 := $load.ref($M.0, $p141);
    goto corral_source_split_8444;

  corral_source_split_8444:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p142, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_8445;

  corral_source_split_8445:
    assume {:verifier.code 0} true;
    $i144 := $load.i32($M.0, $p143);
    goto corral_source_split_8446;

  corral_source_split_8446:
    assume {:verifier.code 0} true;
    $i145 := $lshr.i32($i144, 30);
    goto corral_source_split_8447;

  corral_source_split_8447:
    assume {:verifier.code 0} true;
    $i146 := $eq.i32($i145, 1);
    goto corral_source_split_8448;

  corral_source_split_8448:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i146 == 1);
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_8459;

  corral_source_split_8459:
    assume {:verifier.code 0} true;
    $i160 := $load.i32($M.0, $p159);
    goto corral_source_split_8460;

  corral_source_split_8460:
    assume {:verifier.code 0} true;
    $i161 := $zext.i32.i64($i160);
    goto corral_source_split_8461;

  corral_source_split_8461:
    assume {:verifier.code 0} true;
    $i162 := $and.i64($i161, 32767);
    goto corral_source_split_8462;

  corral_source_split_8462:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p112, $mul.ref(0, 72)), $mul.ref(56, 1));
    goto corral_source_split_8463;

  corral_source_split_8463:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p163, $i162);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p112, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_8473;

  corral_source_split_8473:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p164, 3);
    goto corral_source_split_8474;

  corral_source_split_8474:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p112, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_8475;

  corral_source_split_8475:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p119, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_8476;

  corral_source_split_8476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1141} $i167 := list_is_last($p165, $p166);
    call {:si_unique_call 1142} {:cexpr "tmp___7"} boogie_si_record_i32($i167);
    goto corral_source_split_8477;

  corral_source_split_8477:
    assume {:verifier.code 0} true;
    $i168 := $ne.i32($i167, 0);
    goto corral_source_split_8478;

  corral_source_split_8478:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i168 == 1);
    goto corral_source_split_8482;

  corral_source_split_8482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1143} $i170 := is_short_bulk($p112);
    call {:si_unique_call 1144} {:cexpr "tmp___8"} boogie_si_record_i32($i170);
    goto corral_source_split_8483;

  corral_source_split_8483:
    assume {:verifier.code 0} true;
    $i171 := $ne.i32($i170, 0);
    goto corral_source_split_8484;

  corral_source_split_8484:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i171 == 1);
    goto corral_source_split_8502;

  corral_source_split_8502:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($add.ref($p112, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_8503;

  corral_source_split_8503:
    assume {:verifier.code 0} true;
    $p175 := $load.ref($M.0, $p174);
    goto corral_source_split_8504;

  corral_source_split_8504:
    assume {:verifier.code 0} true;
    $p176 := $bitcast.ref.ref($p175);
    goto corral_source_split_8505;

  corral_source_split_8505:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($p176, $mul.ref($sub.ref(0, 24), 72));
    assume {:verifier.code 0} true;
    $p172 := $p177;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p169 := $p172;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto corral_source_split_8486;

  corral_source_split_8486:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_8487;

  corral_source_split_8487:
    assume {:verifier.code 0} true;
    $i179 := $load.i32($M.0, $p178);
    goto corral_source_split_8488;

  corral_source_split_8488:
    assume {:verifier.code 0} true;
    $i180 := $lshr.i32($i179, 25);
    goto corral_source_split_8489;

  corral_source_split_8489:
    assume {:verifier.code 0} true;
    $i181 := $and.i32($i180, 1);
    goto corral_source_split_8490;

  corral_source_split_8490:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p119, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_8491;

  corral_source_split_8491:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p182, $i181);
    goto corral_source_split_8492;

  corral_source_split_8492:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_8493;

  corral_source_split_8493:
    assume {:verifier.code 0} true;
    $i184 := $load.i32($M.0, $p183);
    goto corral_source_split_8494;

  corral_source_split_8494:
    assume {:verifier.code 0} true;
    $i185 := $lshr.i32($i184, 26);
    goto corral_source_split_8495;

  corral_source_split_8495:
    assume {:verifier.code 0} true;
    $i186 := $and.i32($i185, 1);
    goto corral_source_split_8496;

  corral_source_split_8496:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($p119, $mul.ref(0, 48)), $mul.ref(36, 1));
    goto corral_source_split_8497;

  corral_source_split_8497:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p187, $i186);
    goto corral_source_split_8498;

  corral_source_split_8498:
    assume {:verifier.code 0} true;
    $p188 := $p169;
    goto $bb47;

  $bb44:
    assume $i171 == 1;
    goto corral_source_split_8500;

  corral_source_split_8500:
    assume {:verifier.code 0} true;
    $p172 := $0.ref;
    goto $bb46;

  $bb41:
    assume $i168 == 1;
    goto corral_source_split_8480;

  corral_source_split_8480:
    assume {:verifier.code 0} true;
    $p169 := $0.ref;
    goto $bb43;

  $bb35:
    assume $i146 == 1;
    goto corral_source_split_8450;

  corral_source_split_8450:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p112, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_8451;

  corral_source_split_8451:
    assume {:verifier.code 0} true;
    $p148 := $load.ref($M.0, $p147);
    goto corral_source_split_8452;

  corral_source_split_8452:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p148, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_8453;

  corral_source_split_8453:
    assume {:verifier.code 0} true;
    $p150 := $load.ref($M.0, $p149);
    goto corral_source_split_8454;

  corral_source_split_8454:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p150, $mul.ref(0, 2040)), $mul.ref(28, 1));
    goto corral_source_split_8455;

  corral_source_split_8455:
    assume {:verifier.code 0} true;
    $i152 := $load.i32($M.0, $p151);
    goto corral_source_split_8456;

  corral_source_split_8456:
    assume {:verifier.code 0} true;
    $i153 := $ne.i32($i152, 3);
    goto corral_source_split_8457;

  corral_source_split_8457:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume !($i153 == 1);
    goto $bb37;

  $bb38:
    assume $i153 == 1;
    goto corral_source_split_8465;

  corral_source_split_8465:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_8466;

  corral_source_split_8466:
    assume {:verifier.code 0} true;
    $i155 := $load.i32($M.0, $p154);
    goto corral_source_split_8467;

  corral_source_split_8467:
    assume {:verifier.code 0} true;
    $i156 := $zext.i32.i64($i155);
    goto corral_source_split_8468;

  corral_source_split_8468:
    assume {:verifier.code 0} true;
    $i157 := $and.i64($i156, 2047);
    goto corral_source_split_8469;

  corral_source_split_8469:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p112, $mul.ref(0, 72)), $mul.ref(56, 1));
    goto corral_source_split_8470;

  corral_source_split_8470:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p158, $i157);
    goto corral_source_split_8471;

  corral_source_split_8471:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb22:
    assume $i132 == 1;
    goto corral_source_split_8378;

  corral_source_split_8378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1139} warn_slowpath_null(.str.29, 1128);
    goto corral_source_split_8379;

  corral_source_split_8379:
    assume {:verifier.code 0} true;
    goto $bb24;

  SeqInstr_280:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i90 == 1;
    goto corral_source_split_8353;

  corral_source_split_8353:
    assume {:verifier.code 0} true;
    $i91 := $ne.i32(1, 0);
    goto corral_source_split_8354;

  corral_source_split_8354:
    assume {:verifier.code 0} true;
    $i92 := $zext.i1.i32($i91);
    goto corral_source_split_8355;

  corral_source_split_8355:
    assume {:verifier.code 0} true;
    $i93 := $sext.i32.i64($i92);
    goto corral_source_split_8356;

  corral_source_split_8356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1132} $i94 := ldv__builtin_expect($i93, 0);
    call {:si_unique_call 1133} {:cexpr "tmp___5"} boogie_si_record_i64($i94);
    goto corral_source_split_8357;

  corral_source_split_8357:
    assume {:verifier.code 0} true;
    $i95 := $ne.i64($i94, 0);
    goto corral_source_split_8358;

  corral_source_split_8358:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i96 := $ne.i32(1, 0);
    goto corral_source_split_8363;

  corral_source_split_8363:
    assume {:verifier.code 0} true;
    $i97 := $zext.i1.i32($i96);
    goto corral_source_split_8364;

  corral_source_split_8364:
    assume {:verifier.code 0} true;
    $i98 := $sext.i32.i64($i97);
    goto corral_source_split_8365;

  corral_source_split_8365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1135} vslice_dummy_var_73 := ldv__builtin_expect($i98, 0);
    goto corral_source_split_8366;

  corral_source_split_8366:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb18:
    assume $i95 == 1;
    goto corral_source_split_8360;

  corral_source_split_8360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1134} warn_slowpath_null(.str.29, 1113);
    goto corral_source_split_8361;

  corral_source_split_8361:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb6:
    assume $i30 == 1;
    goto corral_source_split_8254;

  corral_source_split_8254:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1632, 1));
    goto corral_source_split_8255;

  corral_source_split_8255:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_8256;

  corral_source_split_8256:
    assume {:verifier.code 0} true;
    $i33 := $sext.i32.i64($i32);
    goto corral_source_split_8257;

  corral_source_split_8257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1116} $i34 := __ffs($i33);
    call {:si_unique_call 1117} {:cexpr "tmp___2"} boogie_si_record_i64($i34);
    goto corral_source_split_8258;

  corral_source_split_8258:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i64.i32($i34);
    call {:si_unique_call 1118} {:cexpr "slot"} boogie_si_record_i32($i35);
    goto corral_source_split_8259;

  corral_source_split_8259:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1632, 1));
    goto corral_source_split_8260;

  corral_source_split_8260:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_8261;

  corral_source_split_8261:
    assume {:verifier.code 0} true;
    $i38 := $shl.i32(1, $i35);
    goto corral_source_split_8262;

  corral_source_split_8262:
    assume {:verifier.code 0} true;
    $i39 := $xor.i32($i38, $sub.i32(0, 1));
    goto corral_source_split_8263;

  corral_source_split_8263:
    assume {:verifier.code 0} true;
    $i40 := $and.i32($i37, $i39);
    goto corral_source_split_8264;

  corral_source_split_8264:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1632, 1));
    goto corral_source_split_8265;

  corral_source_split_8265:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p41, $i40);
    goto corral_source_split_8266;

  corral_source_split_8266:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(864, 1));
    goto corral_source_split_8267;

  corral_source_split_8267:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_8268;

  corral_source_split_8268:
    assume {:verifier.code 0} true;
    $i44 := $sext.i32.i64($i35);
    goto corral_source_split_8269;

  corral_source_split_8269:
    assume {:verifier.code 0} true;
    goto corral_source_split_8270;

  corral_source_split_8270:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p43, $mul.ref($i44, 24)), $mul.ref(0, 1));
    goto corral_source_split_8271;

  corral_source_split_8271:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_8272;

  corral_source_split_8272:
    assume {:verifier.code 0} true;
    $i48 := $p2i.ref.i64($p47);
    goto corral_source_split_8273;

  corral_source_split_8273:
    assume {:verifier.code 0} true;
    $i49 := $eq.i64($i48, 0);
    goto corral_source_split_8274;

  corral_source_split_8274:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_8313;

  corral_source_split_8313:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_8314;

  corral_source_split_8314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1126} ptd_read($p60, 2048, $i35, $p1);
    goto SeqInstr_277, SeqInstr_278;

  SeqInstr_278:
    assume assertsPassed;
    goto SeqInstr_279;

  SeqInstr_279:
    goto corral_source_split_8315;

  corral_source_split_8315:
    assume {:verifier.code 0} true;
    $i61 := $sext.i32.i64($i35);
    goto corral_source_split_8316;

  corral_source_split_8316:
    assume {:verifier.code 0} true;
    goto corral_source_split_8317;

  corral_source_split_8317:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p43, $mul.ref($i61, 24)), $mul.ref(8, 1));
    goto corral_source_split_8318;

  corral_source_split_8318:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p63);
    goto corral_source_split_8319;

  corral_source_split_8319:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p64, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_8320;

  corral_source_split_8320:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_8321;

  corral_source_split_8321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1127} $i67 := check_int_transfer($p0, $p1, $p66);
    call {:si_unique_call 1128} {:cexpr "state"} boogie_si_record_i32($i67);
    goto corral_source_split_8322;

  corral_source_split_8322:
    assume {:verifier.code 0} true;
    $i68, $i69, $p70, $i71 := $i35, $i67, $p42, 2048;
    goto $bb15;

  SeqInstr_277:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i49 == 1;
    goto corral_source_split_8298;

  corral_source_split_8298:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32(1, 0);
    goto corral_source_split_8299;

  corral_source_split_8299:
    assume {:verifier.code 0} true;
    $i51 := $zext.i1.i32($i50);
    goto corral_source_split_8300;

  corral_source_split_8300:
    assume {:verifier.code 0} true;
    $i52 := $sext.i32.i64($i51);
    goto corral_source_split_8301;

  corral_source_split_8301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1122} $i53 := ldv__builtin_expect($i52, 0);
    call {:si_unique_call 1123} {:cexpr "tmp___3"} boogie_si_record_i64($i53);
    goto corral_source_split_8302;

  corral_source_split_8302:
    assume {:verifier.code 0} true;
    $i54 := $ne.i64($i53, 0);
    goto corral_source_split_8303;

  corral_source_split_8303:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32(1, 0);
    goto corral_source_split_8308;

  corral_source_split_8308:
    assume {:verifier.code 0} true;
    $i56 := $zext.i1.i32($i55);
    goto corral_source_split_8309;

  corral_source_split_8309:
    assume {:verifier.code 0} true;
    $i57 := $sext.i32.i64($i56);
    goto corral_source_split_8310;

  corral_source_split_8310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1125} vslice_dummy_var_72 := ldv__builtin_expect($i57, 0);
    goto corral_source_split_8311;

  corral_source_split_8311:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i54 == 1;
    goto corral_source_split_8305;

  corral_source_split_8305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1124} warn_slowpath_null(.str.29, 1098);
    goto corral_source_split_8306;

  corral_source_split_8306:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb81:
    assume {:verifier.code 0} true;
    assume $i278 == 1;
    goto $bb82;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb2;

  SeqInstr_274:
    assume !assertsPassed;
    return;

  SeqInstr_271:
    assume !assertsPassed;
    return;

  $bb13_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    $p276 := $add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(1632, 1));
    goto corral_source_split_8246;
}



const __ffs: ref;

axiom __ffs == $sub.ref(0, 448423);

procedure __ffs($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation __ffs($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1156} {:cexpr "__ffs:arg:word"} boogie_si_record_i64($i0);
    call {:si_unique_call 1157} $i1 := devirtbounce.8(0, $i0);
    call {:si_unique_call 1158} {:cexpr "word"} boogie_si_record_i64($i1);
    goto corral_source_split_8598;

  corral_source_split_8598:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const check_int_transfer: ref;

axiom check_int_transfer == $sub.ref(0, 449455);

procedure check_int_transfer($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $CurrAddr;



implementation check_int_transfer($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i24;
  var $i27: i24;
  var $i28: i24;
  var $p29: ref;
  var $p30: ref;
  var $i31: i8;
  var $i32: i64;
  var $i33: i64;
  var $i34: i64;
  var $i35: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i24;
  var $i47: i24;
  var $i48: i24;
  var $p49: ref;
  var $p50: ref;
  var $i51: i8;
  var $i52: i64;
  var $i53: i64;
  var $i54: i64;
  var $i55: i1;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $i66: i24;
  var $i67: i24;
  var $i68: i24;
  var $p69: ref;
  var $p70: ref;
  var $i71: i8;
  var $i72: i64;
  var $i73: i64;
  var $i74: i64;
  var $i75: i1;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $i80: i32;
  var $i81: i32;
  var $i82: i32;
  var $i83: i1;
  var $i84: i1;
  var $i85: i1;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $i92: i24;
  var $i93: i24;
  var $i94: i24;
  var $p95: ref;
  var $p96: ref;
  var $i97: i8;
  var $i98: i64;
  var $i99: i64;
  var $i100: i64;
  var $i101: i1;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $i106: i1;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $i113: i24;
  var $i114: i24;
  var $i115: i24;
  var $p116: ref;
  var $p117: ref;
  var $i118: i8;
  var $i119: i64;
  var $i120: i64;
  var $i121: i64;
  var $i122: i1;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $i127: i1;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $i134: i24;
  var $i135: i24;
  var $i136: i24;
  var $p137: ref;
  var $p138: ref;
  var $i139: i8;
  var $i140: i64;
  var $i141: i64;
  var $i142: i64;
  var $i143: i1;
  var $p145: ref;
  var $p146: ref;
  var $p147: ref;
  var $i148: i32;
  var $i149: i32;
  var $i150: i1;
  var $i151: i1;
  var $i152: i1;
  var $p153: ref;
  var $p154: ref;
  var $p155: ref;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $i159: i24;
  var $i160: i24;
  var $i161: i24;
  var $p162: ref;
  var $p163: ref;
  var $i164: i8;
  var $i165: i64;
  var $i166: i64;
  var $i167: i64;
  var $i168: i1;
  var $p170: ref;
  var $p171: ref;
  var $p172: ref;
  var $i173: i1;
  var $p174: ref;
  var $p175: ref;
  var $p176: ref;
  var $p177: ref;
  var $p178: ref;
  var $p179: ref;
  var $i180: i24;
  var $i181: i24;
  var $i182: i24;
  var $p183: ref;
  var $p184: ref;
  var $i185: i8;
  var $i186: i64;
  var $i187: i64;
  var $i188: i64;
  var $i189: i1;
  var $p191: ref;
  var $p192: ref;
  var $p193: ref;
  var $i194: i1;
  var $p195: ref;
  var $p196: ref;
  var $p197: ref;
  var $p198: ref;
  var $p199: ref;
  var $p200: ref;
  var $i201: i24;
  var $i202: i24;
  var $i203: i24;
  var $p204: ref;
  var $p205: ref;
  var $i206: i8;
  var $i207: i64;
  var $i208: i64;
  var $i209: i64;
  var $i210: i1;
  var $p212: ref;
  var $p213: ref;
  var $p214: ref;
  var $i215: i32;
  var $i216: i32;
  var $i217: i1;
  var $i218: i1;
  var $i219: i1;
  var $p220: ref;
  var $p221: ref;
  var $p222: ref;
  var $p223: ref;
  var $p224: ref;
  var $p225: ref;
  var $i226: i24;
  var $i227: i24;
  var $i228: i24;
  var $p229: ref;
  var $p230: ref;
  var $i231: i8;
  var $i232: i64;
  var $i233: i64;
  var $i234: i64;
  var $i235: i1;
  var $p237: ref;
  var $p238: ref;
  var $p239: ref;
  var $i240: i1;
  var $p241: ref;
  var $p242: ref;
  var $p243: ref;
  var $p244: ref;
  var $p245: ref;
  var $p246: ref;
  var $i247: i24;
  var $i248: i24;
  var $i249: i24;
  var $p250: ref;
  var $p251: ref;
  var $i252: i8;
  var $i253: i64;
  var $i254: i64;
  var $i255: i64;
  var $i256: i1;
  var $p258: ref;
  var $p259: ref;
  var $p260: ref;
  var $i261: i1;
  var $p262: ref;
  var $p263: ref;
  var $p264: ref;
  var $p265: ref;
  var $p266: ref;
  var $p267: ref;
  var $i268: i24;
  var $i269: i24;
  var $i270: i24;
  var $p271: ref;
  var $p272: ref;
  var $i273: i8;
  var $i274: i64;
  var $i275: i64;
  var $i276: i64;
  var $i277: i1;
  var $p279: ref;
  var $p280: ref;
  var $p281: ref;
  var $i282: i32;
  var $i283: i32;
  var $i284: i1;
  var $i285: i1;
  var $i286: i1;
  var $p287: ref;
  var $p288: ref;
  var $p289: ref;
  var $p290: ref;
  var $p291: ref;
  var $p292: ref;
  var $i293: i24;
  var $i294: i24;
  var $i295: i24;
  var $p296: ref;
  var $p297: ref;
  var $i298: i8;
  var $i299: i64;
  var $i300: i64;
  var $i301: i64;
  var $i302: i1;
  var $p304: ref;
  var $p305: ref;
  var $p306: ref;
  var $i307: i1;
  var $p308: ref;
  var $p309: ref;
  var $p310: ref;
  var $p311: ref;
  var $p312: ref;
  var $p313: ref;
  var $i314: i24;
  var $i315: i24;
  var $i316: i24;
  var $p317: ref;
  var $p318: ref;
  var $i319: i8;
  var $i320: i64;
  var $i321: i64;
  var $i322: i64;
  var $i323: i1;
  var $p325: ref;
  var $p326: ref;
  var $p327: ref;
  var $i328: i1;
  var $p329: ref;
  var $p330: ref;
  var $p331: ref;
  var $p332: ref;
  var $p333: ref;
  var $p334: ref;
  var $i335: i24;
  var $i336: i24;
  var $i337: i24;
  var $p338: ref;
  var $p339: ref;
  var $i340: i8;
  var $i341: i64;
  var $i342: i64;
  var $i343: i64;
  var $i344: i1;
  var $p346: ref;
  var $p347: ref;
  var $p348: ref;
  var $i349: i32;
  var $i350: i32;
  var $i351: i1;
  var $i352: i1;
  var $i353: i1;
  var $p354: ref;
  var $p355: ref;
  var $p356: ref;
  var $p357: ref;
  var $p358: ref;
  var $p359: ref;
  var $i360: i24;
  var $i361: i24;
  var $i362: i24;
  var $p363: ref;
  var $p364: ref;
  var $i365: i8;
  var $i366: i64;
  var $i367: i64;
  var $i368: i64;
  var $i369: i1;
  var $p371: ref;
  var $p372: ref;
  var $p373: ref;
  var $i374: i1;
  var $p375: ref;
  var $p376: ref;
  var $p377: ref;
  var $p378: ref;
  var $p379: ref;
  var $p380: ref;
  var $i381: i24;
  var $i382: i24;
  var $i383: i24;
  var $p384: ref;
  var $p385: ref;
  var $i386: i8;
  var $i387: i64;
  var $i388: i64;
  var $i389: i64;
  var $i390: i1;
  var $p392: ref;
  var $p393: ref;
  var $p394: ref;
  var $i395: i1;
  var $p396: ref;
  var $p397: ref;
  var $p398: ref;
  var $p399: ref;
  var $p400: ref;
  var $p401: ref;
  var $i402: i24;
  var $i403: i24;
  var $i404: i24;
  var $p405: ref;
  var $p406: ref;
  var $i407: i8;
  var $i408: i64;
  var $i409: i64;
  var $i410: i64;
  var $i411: i1;
  var $p413: ref;
  var $p414: ref;
  var $p415: ref;
  var $i416: i32;
  var $i417: i32;
  var $i418: i1;
  var $i419: i1;
  var $i420: i1;
  var $p421: ref;
  var $p422: ref;
  var $p423: ref;
  var $p424: ref;
  var $p425: ref;
  var $p426: ref;
  var $i427: i24;
  var $i428: i24;
  var $i429: i24;
  var $p430: ref;
  var $p431: ref;
  var $i432: i8;
  var $i433: i64;
  var $i434: i64;
  var $i435: i64;
  var $i436: i1;
  var $p438: ref;
  var $p439: ref;
  var $p440: ref;
  var $i441: i1;
  var $p442: ref;
  var $p443: ref;
  var $p444: ref;
  var $p445: ref;
  var $p446: ref;
  var $p447: ref;
  var $i448: i24;
  var $i449: i24;
  var $i450: i24;
  var $p451: ref;
  var $p452: ref;
  var $i453: i8;
  var $i454: i64;
  var $i455: i64;
  var $i456: i64;
  var $i457: i1;
  var $p459: ref;
  var $p460: ref;
  var $p461: ref;
  var $i462: i1;
  var $p463: ref;
  var $p464: ref;
  var $p465: ref;
  var $p466: ref;
  var $p467: ref;
  var $p468: ref;
  var $i469: i24;
  var $i470: i24;
  var $i471: i24;
  var $p472: ref;
  var $p473: ref;
  var $i474: i8;
  var $i475: i64;
  var $i476: i64;
  var $i477: i64;
  var $i478: i1;
  var $p480: ref;
  var $p481: ref;
  var $p482: ref;
  var $i483: i32;
  var $i484: i32;
  var $i485: i1;
  var $i486: i1;
  var $i487: i1;
  var $p488: ref;
  var $p489: ref;
  var $p490: ref;
  var $p491: ref;
  var $p492: ref;
  var $p493: ref;
  var $i494: i24;
  var $i495: i24;
  var $i496: i24;
  var $p497: ref;
  var $p498: ref;
  var $i499: i8;
  var $i500: i64;
  var $i501: i64;
  var $i502: i64;
  var $i503: i1;
  var $p505: ref;
  var $p506: ref;
  var $p507: ref;
  var $i508: i1;
  var $p509: ref;
  var $p510: ref;
  var $p511: ref;
  var $p512: ref;
  var $p513: ref;
  var $p514: ref;
  var $i515: i24;
  var $i516: i24;
  var $i517: i24;
  var $p518: ref;
  var $p519: ref;
  var $i520: i8;
  var $i521: i64;
  var $i522: i64;
  var $i523: i64;
  var $i524: i1;
  var $p526: ref;
  var $p527: ref;
  var $p528: ref;
  var $i529: i1;
  var $p530: ref;
  var $p531: ref;
  var $p532: ref;
  var $p533: ref;
  var $p534: ref;
  var $p535: ref;
  var $i536: i24;
  var $i537: i24;
  var $i538: i24;
  var $p539: ref;
  var $p540: ref;
  var $i541: i8;
  var $i542: i64;
  var $i543: i64;
  var $i544: i64;
  var $i545: i1;
  var $p547: ref;
  var $p548: ref;
  var $p549: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1159} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1160} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1161} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_8600;

  corral_source_split_8600:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_8601;

  corral_source_split_8601:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    call {:si_unique_call 1162} {:cexpr "dw4"} boogie_si_record_i32($i7);
    goto corral_source_split_8602;

  corral_source_split_8602:
    assume {:verifier.code 0} true;
    $i8 := $lshr.i32($i7, 8);
    call {:si_unique_call 1163} {:cexpr "dw4"} boogie_si_record_i32($i8);
    goto corral_source_split_8603;

  corral_source_split_8603:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_8604;

  corral_source_split_8604:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_8605;

  corral_source_split_8605:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 1073741824);
    goto corral_source_split_8606;

  corral_source_split_8606:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_8607;

  corral_source_split_8607:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i81 := 1;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_8711;

  corral_source_split_8711:
    assume {:verifier.code 0} true;
    $r := $i81;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_8609;

  corral_source_split_8609:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_8610;

  corral_source_split_8610:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, $sub.i32(0, 71));
    goto corral_source_split_8611;

  corral_source_split_8611:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i8, 7);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i14, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i14, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i14, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i80 := $lshr.i32($i8, 3);
    call {:si_unique_call 1171} {:cexpr "dw4"} boogie_si_record_i32($i80);
    goto corral_source_split_8693;

  corral_source_split_8693:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i82 := $and.i32($i80, 7);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i83 := $slt.i32($i82, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    $i84 := $slt.i32($i82, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i84} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    $i85 := $eq.i32($i82, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i85} true;
    goto $bb37, $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume !($i85 == 1);
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i148 := $lshr.i32($i80, 3);
    goto corral_source_split_8745;

  corral_source_split_8745:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $i149 := $and.i32($i148, 7);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $i150 := $slt.i32($i149, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i150} true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i150 == 1);
    assume {:verifier.code 0} true;
    $i151 := $slt.i32($i149, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i151} true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i151 == 1);
    assume {:verifier.code 0} true;
    $i152 := $eq.i32($i149, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i152} true;
    goto $bb61, $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    assume !($i152 == 1);
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $i215 := $lshr.i32($i148, 3);
    goto corral_source_split_8843;

  corral_source_split_8843:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $i216 := $and.i32($i215, 7);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $i217 := $slt.i32($i216, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i217} true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i217 == 1);
    assume {:verifier.code 0} true;
    $i218 := $slt.i32($i216, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i218} true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i218 == 1);
    assume {:verifier.code 0} true;
    $i219 := $eq.i32($i216, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i219} true;
    goto $bb85, $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    assume !($i219 == 1);
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    $i282 := $lshr.i32($i215, 3);
    goto corral_source_split_8941;

  corral_source_split_8941:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    $i283 := $and.i32($i282, 7);
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    $i284 := $slt.i32($i283, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i284} true;
    goto $bb105, $bb106;

  $bb106:
    assume !($i284 == 1);
    assume {:verifier.code 0} true;
    $i285 := $slt.i32($i283, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i285} true;
    goto $bb107, $bb108;

  $bb108:
    assume !($i285 == 1);
    assume {:verifier.code 0} true;
    $i286 := $eq.i32($i283, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i286} true;
    goto $bb109, $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    assume !($i286 == 1);
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    $i349 := $lshr.i32($i282, 3);
    goto corral_source_split_9039;

  corral_source_split_9039:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    $i350 := $and.i32($i349, 7);
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    $i351 := $slt.i32($i350, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i351} true;
    goto $bb129, $bb130;

  $bb130:
    assume !($i351 == 1);
    assume {:verifier.code 0} true;
    $i352 := $slt.i32($i350, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i352} true;
    goto $bb131, $bb132;

  $bb132:
    assume !($i352 == 1);
    assume {:verifier.code 0} true;
    $i353 := $eq.i32($i350, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i353} true;
    goto $bb133, $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    assume !($i353 == 1);
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    $i416 := $lshr.i32($i349, 3);
    goto corral_source_split_9137;

  corral_source_split_9137:
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    $i417 := $and.i32($i416, 7);
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    $i418 := $slt.i32($i417, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i418} true;
    goto $bb153, $bb154;

  $bb154:
    assume !($i418 == 1);
    assume {:verifier.code 0} true;
    $i419 := $slt.i32($i417, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i419} true;
    goto $bb155, $bb156;

  $bb156:
    assume !($i419 == 1);
    assume {:verifier.code 0} true;
    $i420 := $eq.i32($i417, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i420} true;
    goto $bb157, $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    assume !($i420 == 1);
    goto $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    $i483 := $lshr.i32($i416, 3);
    goto corral_source_split_9235;

  corral_source_split_9235:
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    $i484 := $and.i32($i483, 7);
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb176:
    assume {:verifier.code 0} true;
    $i485 := $slt.i32($i484, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i485} true;
    goto $bb177, $bb178;

  $bb178:
    assume !($i485 == 1);
    assume {:verifier.code 0} true;
    $i486 := $slt.i32($i484, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i486} true;
    goto $bb179, $bb180;

  $bb180:
    assume !($i486 == 1);
    assume {:verifier.code 0} true;
    $i487 := $eq.i32($i484, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i487} true;
    goto $bb181, $bb182;

  $bb182:
    assume {:verifier.code 0} true;
    assume !($i487 == 1);
    goto $bb183;

  $bb183:
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb195:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i81 := 3;
    goto $bb30;

  $bb181:
    assume $i487 == 1;
    goto corral_source_split_9301;

  corral_source_split_9301:
    assume {:verifier.code 0} true;
    $p488 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9302;

  corral_source_split_9302:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p488, .str.26);
    goto corral_source_split_9303;

  corral_source_split_9303:
    assume {:verifier.code 0} true;
    $p489 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_9304;

  corral_source_split_9304:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p489, .str.32);
    goto corral_source_split_9305;

  corral_source_split_9305:
    assume {:verifier.code 0} true;
    $p490 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_9306;

  corral_source_split_9306:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p490, .str.29);
    goto corral_source_split_9307;

  corral_source_split_9307:
    assume {:verifier.code 0} true;
    $p491 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9308;

  corral_source_split_9308:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p491, .str.33);
    goto corral_source_split_9309;

  corral_source_split_9309:
    assume {:verifier.code 0} true;
    $p492 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_9310;

  corral_source_split_9310:
    assume {:verifier.code 0} true;
    $p493 := $bitcast.ref.ref($p492);
    goto corral_source_split_9311;

  corral_source_split_9311:
    assume {:verifier.code 0} true;
    $i494 := $load.i24($M.16, $p493);
    goto corral_source_split_9312;

  corral_source_split_9312:
    assume {:verifier.code 0} true;
    $i495 := $and.i24($i494, $sub.i24(0, 262144));
    goto corral_source_split_9313;

  corral_source_split_9313:
    assume {:verifier.code 0} true;
    $i496 := $or.i24($i495, 1001);
    goto corral_source_split_9314;

  corral_source_split_9314:
    assume {:verifier.code 0} true;
    $M.16 := $store.i24($M.16, $p493, $i496);
    goto corral_source_split_9315;

  corral_source_split_9315:
    assume {:verifier.code 0} true;
    $p497 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9316;

  corral_source_split_9316:
    assume {:verifier.code 0} true;
    $M.17 := $store.i8($M.17, $p497, 0);
    goto corral_source_split_9317;

  corral_source_split_9317:
    assume {:verifier.code 0} true;
    $p498 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9318;

  corral_source_split_9318:
    assume {:verifier.code 0} true;
    $i499 := $load.i8($M.17, $p498);
    goto corral_source_split_9319;

  corral_source_split_9319:
    assume {:verifier.code 0} true;
    $i500 := $zext.i8.i64($i499);
    goto corral_source_split_9320;

  corral_source_split_9320:
    assume {:verifier.code 0} true;
    $i501 := $and.i64($i500, 1);
    goto corral_source_split_9321;

  corral_source_split_9321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1210} $i502 := ldv__builtin_expect($i501, 0);
    goto corral_source_split_9322;

  corral_source_split_9322:
    assume {:verifier.code 0} true;
    $i503 := $ne.i64($i502, 0);
    goto corral_source_split_9323;

  corral_source_split_9323:
    assume {:verifier.code 0} true;
    assume {:branchcond $i503} true;
    goto $bb184, $bb185;

  $bb185:
    assume !($i503 == 1);
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    $p507 := $add.ref($add.ref($p2, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_9330;

  corral_source_split_9330:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p507, $sub.i32(0, 70));
    goto corral_source_split_9331;

  corral_source_split_9331:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb184:
    assume $i503 == 1;
    goto corral_source_split_9325;

  corral_source_split_9325:
    assume {:verifier.code 0} true;
    $p505 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_9326;

  corral_source_split_9326:
    assume {:verifier.code 0} true;
    $p506 := $load.ref($M.0, $p505);
    goto corral_source_split_9327;

  corral_source_split_9327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1211} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p3, $p506, .str.33, .str.32, 7);
    goto corral_source_split_9328;

  corral_source_split_9328:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb179:
    assume $i486 == 1;
    assume {:verifier.code 0} true;
    $i508 := $eq.i32($i484, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i508} true;
    goto $bb188, $bb189;

  $bb189:
    assume {:verifier.code 0} true;
    assume !($i508 == 1);
    goto $bb183;

  $bb188:
    assume $i508 == 1;
    goto corral_source_split_9333;

  corral_source_split_9333:
    assume {:verifier.code 0} true;
    $p509 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9334;

  corral_source_split_9334:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p509, .str.26);
    goto corral_source_split_9335;

  corral_source_split_9335:
    assume {:verifier.code 0} true;
    $p510 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_9336;

  corral_source_split_9336:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p510, .str.32);
    goto corral_source_split_9337;

  corral_source_split_9337:
    assume {:verifier.code 0} true;
    $p511 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_9338;

  corral_source_split_9338:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p511, .str.29);
    goto corral_source_split_9339;

  corral_source_split_9339:
    assume {:verifier.code 0} true;
    $p512 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9340;

  corral_source_split_9340:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p512, .str.35);
    goto corral_source_split_9341;

  corral_source_split_9341:
    assume {:verifier.code 0} true;
    $p513 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_9342;

  corral_source_split_9342:
    assume {:verifier.code 0} true;
    $p514 := $bitcast.ref.ref($p513);
    goto corral_source_split_9343;

  corral_source_split_9343:
    assume {:verifier.code 0} true;
    $i515 := $load.i24($M.16, $p514);
    goto corral_source_split_9344;

  corral_source_split_9344:
    assume {:verifier.code 0} true;
    $i516 := $and.i24($i515, $sub.i24(0, 262144));
    goto corral_source_split_9345;

  corral_source_split_9345:
    assume {:verifier.code 0} true;
    $i517 := $or.i24($i516, 1014);
    goto corral_source_split_9346;

  corral_source_split_9346:
    assume {:verifier.code 0} true;
    $M.16 := $store.i24($M.16, $p514, $i517);
    goto corral_source_split_9347;

  corral_source_split_9347:
    assume {:verifier.code 0} true;
    $p518 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9348;

  corral_source_split_9348:
    assume {:verifier.code 0} true;
    $M.17 := $store.i8($M.17, $p518, 0);
    goto corral_source_split_9349;

  corral_source_split_9349:
    assume {:verifier.code 0} true;
    $p519 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9350;

  corral_source_split_9350:
    assume {:verifier.code 0} true;
    $i520 := $load.i8($M.17, $p519);
    goto corral_source_split_9351;

  corral_source_split_9351:
    assume {:verifier.code 0} true;
    $i521 := $zext.i8.i64($i520);
    goto corral_source_split_9352;

  corral_source_split_9352:
    assume {:verifier.code 0} true;
    $i522 := $and.i64($i521, 1);
    goto corral_source_split_9353;

  corral_source_split_9353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1212} $i523 := ldv__builtin_expect($i522, 0);
    goto corral_source_split_9354;

  corral_source_split_9354:
    assume {:verifier.code 0} true;
    $i524 := $ne.i64($i523, 0);
    goto corral_source_split_9355;

  corral_source_split_9355:
    assume {:verifier.code 0} true;
    assume {:branchcond $i524} true;
    goto $bb190, $bb191;

  $bb191:
    assume !($i524 == 1);
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb192:
    assume {:verifier.code 0} true;
    $p528 := $add.ref($add.ref($p2, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_9362;

  corral_source_split_9362:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p528, $sub.i32(0, 75));
    goto corral_source_split_9363;

  corral_source_split_9363:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb190:
    assume $i524 == 1;
    goto corral_source_split_9357;

  corral_source_split_9357:
    assume {:verifier.code 0} true;
    $p526 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_9358;

  corral_source_split_9358:
    assume {:verifier.code 0} true;
    $p527 := $load.ref($M.0, $p526);
    goto corral_source_split_9359;

  corral_source_split_9359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1213} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p5, $p527, .str.35, .str.32, 7);
    goto corral_source_split_9360;

  corral_source_split_9360:
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb177:
    assume $i485 == 1;
    assume {:verifier.code 0} true;
    $i529 := $eq.i32($i484, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i529} true;
    goto $bb193, $bb194;

  $bb194:
    assume {:verifier.code 0} true;
    assume !($i529 == 1);
    goto $bb183;

  $bb193:
    assume $i529 == 1;
    goto corral_source_split_9365;

  corral_source_split_9365:
    assume {:verifier.code 0} true;
    $p530 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9366;

  corral_source_split_9366:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p530, .str.26);
    goto corral_source_split_9367;

  corral_source_split_9367:
    assume {:verifier.code 0} true;
    $p531 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_9368;

  corral_source_split_9368:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p531, .str.32);
    goto corral_source_split_9369;

  corral_source_split_9369:
    assume {:verifier.code 0} true;
    $p532 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_9370;

  corral_source_split_9370:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p532, .str.29);
    goto corral_source_split_9371;

  corral_source_split_9371:
    assume {:verifier.code 0} true;
    $p533 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9372;

  corral_source_split_9372:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p533, .str.34);
    goto corral_source_split_9373;

  corral_source_split_9373:
    assume {:verifier.code 0} true;
    $p534 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_9374;

  corral_source_split_9374:
    assume {:verifier.code 0} true;
    $p535 := $bitcast.ref.ref($p534);
    goto corral_source_split_9375;

  corral_source_split_9375:
    assume {:verifier.code 0} true;
    $i536 := $load.i24($M.16, $p535);
    goto corral_source_split_9376;

  corral_source_split_9376:
    assume {:verifier.code 0} true;
    $i537 := $and.i24($i536, $sub.i24(0, 262144));
    goto corral_source_split_9377;

  corral_source_split_9377:
    assume {:verifier.code 0} true;
    $i538 := $or.i24($i537, 1007);
    goto corral_source_split_9378;

  corral_source_split_9378:
    assume {:verifier.code 0} true;
    $M.16 := $store.i24($M.16, $p535, $i538);
    goto corral_source_split_9379;

  corral_source_split_9379:
    assume {:verifier.code 0} true;
    $p539 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9380;

  corral_source_split_9380:
    assume {:verifier.code 0} true;
    $M.17 := $store.i8($M.17, $p539, 0);
    goto corral_source_split_9381;

  corral_source_split_9381:
    assume {:verifier.code 0} true;
    $p540 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9382;

  corral_source_split_9382:
    assume {:verifier.code 0} true;
    $i541 := $load.i8($M.17, $p540);
    goto corral_source_split_9383;

  corral_source_split_9383:
    assume {:verifier.code 0} true;
    $i542 := $zext.i8.i64($i541);
    goto corral_source_split_9384;

  corral_source_split_9384:
    assume {:verifier.code 0} true;
    $i543 := $and.i64($i542, 1);
    goto corral_source_split_9385;

  corral_source_split_9385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1214} $i544 := ldv__builtin_expect($i543, 0);
    goto corral_source_split_9386;

  corral_source_split_9386:
    assume {:verifier.code 0} true;
    $i545 := $ne.i64($i544, 0);
    goto corral_source_split_9387;

  corral_source_split_9387:
    assume {:verifier.code 0} true;
    assume {:branchcond $i545} true;
    goto $bb196, $bb197;

  $bb197:
    assume !($i545 == 1);
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    $p549 := $add.ref($add.ref($p2, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_9394;

  corral_source_split_9394:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p549, $sub.i32(0, 71));
    goto corral_source_split_9395;

  corral_source_split_9395:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb196:
    assume $i545 == 1;
    goto corral_source_split_9389;

  corral_source_split_9389:
    assume {:verifier.code 0} true;
    $p547 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_9390;

  corral_source_split_9390:
    assume {:verifier.code 0} true;
    $p548 := $load.ref($M.0, $p547);
    goto corral_source_split_9391;

  corral_source_split_9391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1215} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p4, $p548, .str.34, .str.32, 7);
    goto corral_source_split_9392;

  corral_source_split_9392:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb157:
    assume $i420 == 1;
    goto corral_source_split_9203;

  corral_source_split_9203:
    assume {:verifier.code 0} true;
    $p421 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9204;

  corral_source_split_9204:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p421, .str.26);
    goto corral_source_split_9205;

  corral_source_split_9205:
    assume {:verifier.code 0} true;
    $p422 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_9206;

  corral_source_split_9206:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p422, .str.32);
    goto corral_source_split_9207;

  corral_source_split_9207:
    assume {:verifier.code 0} true;
    $p423 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_9208;

  corral_source_split_9208:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p423, .str.29);
    goto corral_source_split_9209;

  corral_source_split_9209:
    assume {:verifier.code 0} true;
    $p424 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9210;

  corral_source_split_9210:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p424, .str.33);
    goto corral_source_split_9211;

  corral_source_split_9211:
    assume {:verifier.code 0} true;
    $p425 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_9212;

  corral_source_split_9212:
    assume {:verifier.code 0} true;
    $p426 := $bitcast.ref.ref($p425);
    goto corral_source_split_9213;

  corral_source_split_9213:
    assume {:verifier.code 0} true;
    $i427 := $load.i24($M.16, $p426);
    goto corral_source_split_9214;

  corral_source_split_9214:
    assume {:verifier.code 0} true;
    $i428 := $and.i24($i427, $sub.i24(0, 262144));
    goto corral_source_split_9215;

  corral_source_split_9215:
    assume {:verifier.code 0} true;
    $i429 := $or.i24($i428, 1001);
    goto corral_source_split_9216;

  corral_source_split_9216:
    assume {:verifier.code 0} true;
    $M.16 := $store.i24($M.16, $p426, $i429);
    goto corral_source_split_9217;

  corral_source_split_9217:
    assume {:verifier.code 0} true;
    $p430 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9218;

  corral_source_split_9218:
    assume {:verifier.code 0} true;
    $M.17 := $store.i8($M.17, $p430, 0);
    goto corral_source_split_9219;

  corral_source_split_9219:
    assume {:verifier.code 0} true;
    $p431 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9220;

  corral_source_split_9220:
    assume {:verifier.code 0} true;
    $i432 := $load.i8($M.17, $p431);
    goto corral_source_split_9221;

  corral_source_split_9221:
    assume {:verifier.code 0} true;
    $i433 := $zext.i8.i64($i432);
    goto corral_source_split_9222;

  corral_source_split_9222:
    assume {:verifier.code 0} true;
    $i434 := $and.i64($i433, 1);
    goto corral_source_split_9223;

  corral_source_split_9223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1204} $i435 := ldv__builtin_expect($i434, 0);
    goto corral_source_split_9224;

  corral_source_split_9224:
    assume {:verifier.code 0} true;
    $i436 := $ne.i64($i435, 0);
    goto corral_source_split_9225;

  corral_source_split_9225:
    assume {:verifier.code 0} true;
    assume {:branchcond $i436} true;
    goto $bb160, $bb161;

  $bb161:
    assume !($i436 == 1);
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb162:
    assume {:verifier.code 0} true;
    $p440 := $add.ref($add.ref($p2, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_9232;

  corral_source_split_9232:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p440, $sub.i32(0, 70));
    goto corral_source_split_9233;

  corral_source_split_9233:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb160:
    assume $i436 == 1;
    goto corral_source_split_9227;

  corral_source_split_9227:
    assume {:verifier.code 0} true;
    $p438 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_9228;

  corral_source_split_9228:
    assume {:verifier.code 0} true;
    $p439 := $load.ref($M.0, $p438);
    goto corral_source_split_9229;

  corral_source_split_9229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1205} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p3, $p439, .str.33, .str.32, 6);
    goto corral_source_split_9230;

  corral_source_split_9230:
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb155:
    assume $i419 == 1;
    assume {:verifier.code 0} true;
    $i441 := $eq.i32($i417, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i441} true;
    goto $bb164, $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    assume !($i441 == 1);
    goto $bb159;

  $bb164:
    assume $i441 == 1;
    goto corral_source_split_9237;

  corral_source_split_9237:
    assume {:verifier.code 0} true;
    $p442 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9238;

  corral_source_split_9238:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p442, .str.26);
    goto corral_source_split_9239;

  corral_source_split_9239:
    assume {:verifier.code 0} true;
    $p443 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_9240;

  corral_source_split_9240:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p443, .str.32);
    goto corral_source_split_9241;

  corral_source_split_9241:
    assume {:verifier.code 0} true;
    $p444 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_9242;

  corral_source_split_9242:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p444, .str.29);
    goto corral_source_split_9243;

  corral_source_split_9243:
    assume {:verifier.code 0} true;
    $p445 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9244;

  corral_source_split_9244:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p445, .str.35);
    goto corral_source_split_9245;

  corral_source_split_9245:
    assume {:verifier.code 0} true;
    $p446 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_9246;

  corral_source_split_9246:
    assume {:verifier.code 0} true;
    $p447 := $bitcast.ref.ref($p446);
    goto corral_source_split_9247;

  corral_source_split_9247:
    assume {:verifier.code 0} true;
    $i448 := $load.i24($M.16, $p447);
    goto corral_source_split_9248;

  corral_source_split_9248:
    assume {:verifier.code 0} true;
    $i449 := $and.i24($i448, $sub.i24(0, 262144));
    goto corral_source_split_9249;

  corral_source_split_9249:
    assume {:verifier.code 0} true;
    $i450 := $or.i24($i449, 1014);
    goto corral_source_split_9250;

  corral_source_split_9250:
    assume {:verifier.code 0} true;
    $M.16 := $store.i24($M.16, $p447, $i450);
    goto corral_source_split_9251;

  corral_source_split_9251:
    assume {:verifier.code 0} true;
    $p451 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9252;

  corral_source_split_9252:
    assume {:verifier.code 0} true;
    $M.17 := $store.i8($M.17, $p451, 0);
    goto corral_source_split_9253;

  corral_source_split_9253:
    assume {:verifier.code 0} true;
    $p452 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9254;

  corral_source_split_9254:
    assume {:verifier.code 0} true;
    $i453 := $load.i8($M.17, $p452);
    goto corral_source_split_9255;

  corral_source_split_9255:
    assume {:verifier.code 0} true;
    $i454 := $zext.i8.i64($i453);
    goto corral_source_split_9256;

  corral_source_split_9256:
    assume {:verifier.code 0} true;
    $i455 := $and.i64($i454, 1);
    goto corral_source_split_9257;

  corral_source_split_9257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1206} $i456 := ldv__builtin_expect($i455, 0);
    goto corral_source_split_9258;

  corral_source_split_9258:
    assume {:verifier.code 0} true;
    $i457 := $ne.i64($i456, 0);
    goto corral_source_split_9259;

  corral_source_split_9259:
    assume {:verifier.code 0} true;
    assume {:branchcond $i457} true;
    goto $bb166, $bb167;

  $bb167:
    assume !($i457 == 1);
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    $p461 := $add.ref($add.ref($p2, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_9266;

  corral_source_split_9266:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p461, $sub.i32(0, 75));
    goto corral_source_split_9267;

  corral_source_split_9267:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb166:
    assume $i457 == 1;
    goto corral_source_split_9261;

  corral_source_split_9261:
    assume {:verifier.code 0} true;
    $p459 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_9262;

  corral_source_split_9262:
    assume {:verifier.code 0} true;
    $p460 := $load.ref($M.0, $p459);
    goto corral_source_split_9263;

  corral_source_split_9263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1207} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p5, $p460, .str.35, .str.32, 6);
    goto corral_source_split_9264;

  corral_source_split_9264:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb153:
    assume $i418 == 1;
    assume {:verifier.code 0} true;
    $i462 := $eq.i32($i417, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i462} true;
    goto $bb169, $bb170;

  $bb170:
    assume {:verifier.code 0} true;
    assume !($i462 == 1);
    goto $bb159;

  $bb169:
    assume $i462 == 1;
    goto corral_source_split_9269;

  corral_source_split_9269:
    assume {:verifier.code 0} true;
    $p463 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9270;

  corral_source_split_9270:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p463, .str.26);
    goto corral_source_split_9271;

  corral_source_split_9271:
    assume {:verifier.code 0} true;
    $p464 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_9272;

  corral_source_split_9272:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p464, .str.32);
    goto corral_source_split_9273;

  corral_source_split_9273:
    assume {:verifier.code 0} true;
    $p465 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_9274;

  corral_source_split_9274:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p465, .str.29);
    goto corral_source_split_9275;

  corral_source_split_9275:
    assume {:verifier.code 0} true;
    $p466 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9276;

  corral_source_split_9276:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p466, .str.34);
    goto corral_source_split_9277;

  corral_source_split_9277:
    assume {:verifier.code 0} true;
    $p467 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_9278;

  corral_source_split_9278:
    assume {:verifier.code 0} true;
    $p468 := $bitcast.ref.ref($p467);
    goto corral_source_split_9279;

  corral_source_split_9279:
    assume {:verifier.code 0} true;
    $i469 := $load.i24($M.16, $p468);
    goto corral_source_split_9280;

  corral_source_split_9280:
    assume {:verifier.code 0} true;
    $i470 := $and.i24($i469, $sub.i24(0, 262144));
    goto corral_source_split_9281;

  corral_source_split_9281:
    assume {:verifier.code 0} true;
    $i471 := $or.i24($i470, 1007);
    goto corral_source_split_9282;

  corral_source_split_9282:
    assume {:verifier.code 0} true;
    $M.16 := $store.i24($M.16, $p468, $i471);
    goto corral_source_split_9283;

  corral_source_split_9283:
    assume {:verifier.code 0} true;
    $p472 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9284;

  corral_source_split_9284:
    assume {:verifier.code 0} true;
    $M.17 := $store.i8($M.17, $p472, 0);
    goto corral_source_split_9285;

  corral_source_split_9285:
    assume {:verifier.code 0} true;
    $p473 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9286;

  corral_source_split_9286:
    assume {:verifier.code 0} true;
    $i474 := $load.i8($M.17, $p473);
    goto corral_source_split_9287;

  corral_source_split_9287:
    assume {:verifier.code 0} true;
    $i475 := $zext.i8.i64($i474);
    goto corral_source_split_9288;

  corral_source_split_9288:
    assume {:verifier.code 0} true;
    $i476 := $and.i64($i475, 1);
    goto corral_source_split_9289;

  corral_source_split_9289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1208} $i477 := ldv__builtin_expect($i476, 0);
    goto corral_source_split_9290;

  corral_source_split_9290:
    assume {:verifier.code 0} true;
    $i478 := $ne.i64($i477, 0);
    goto corral_source_split_9291;

  corral_source_split_9291:
    assume {:verifier.code 0} true;
    assume {:branchcond $i478} true;
    goto $bb172, $bb173;

  $bb173:
    assume !($i478 == 1);
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    $p482 := $add.ref($add.ref($p2, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_9298;

  corral_source_split_9298:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p482, $sub.i32(0, 71));
    goto corral_source_split_9299;

  corral_source_split_9299:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb172:
    assume $i478 == 1;
    goto corral_source_split_9293;

  corral_source_split_9293:
    assume {:verifier.code 0} true;
    $p480 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_9294;

  corral_source_split_9294:
    assume {:verifier.code 0} true;
    $p481 := $load.ref($M.0, $p480);
    goto corral_source_split_9295;

  corral_source_split_9295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1209} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p4, $p481, .str.34, .str.32, 6);
    goto corral_source_split_9296;

  corral_source_split_9296:
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb133:
    assume $i353 == 1;
    goto corral_source_split_9105;

  corral_source_split_9105:
    assume {:verifier.code 0} true;
    $p354 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9106;

  corral_source_split_9106:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p354, .str.26);
    goto corral_source_split_9107;

  corral_source_split_9107:
    assume {:verifier.code 0} true;
    $p355 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_9108;

  corral_source_split_9108:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p355, .str.32);
    goto corral_source_split_9109;

  corral_source_split_9109:
    assume {:verifier.code 0} true;
    $p356 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_9110;

  corral_source_split_9110:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p356, .str.29);
    goto corral_source_split_9111;

  corral_source_split_9111:
    assume {:verifier.code 0} true;
    $p357 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9112;

  corral_source_split_9112:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p357, .str.33);
    goto corral_source_split_9113;

  corral_source_split_9113:
    assume {:verifier.code 0} true;
    $p358 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_9114;

  corral_source_split_9114:
    assume {:verifier.code 0} true;
    $p359 := $bitcast.ref.ref($p358);
    goto corral_source_split_9115;

  corral_source_split_9115:
    assume {:verifier.code 0} true;
    $i360 := $load.i24($M.16, $p359);
    goto corral_source_split_9116;

  corral_source_split_9116:
    assume {:verifier.code 0} true;
    $i361 := $and.i24($i360, $sub.i24(0, 262144));
    goto corral_source_split_9117;

  corral_source_split_9117:
    assume {:verifier.code 0} true;
    $i362 := $or.i24($i361, 1001);
    goto corral_source_split_9118;

  corral_source_split_9118:
    assume {:verifier.code 0} true;
    $M.16 := $store.i24($M.16, $p359, $i362);
    goto corral_source_split_9119;

  corral_source_split_9119:
    assume {:verifier.code 0} true;
    $p363 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9120;

  corral_source_split_9120:
    assume {:verifier.code 0} true;
    $M.17 := $store.i8($M.17, $p363, 0);
    goto corral_source_split_9121;

  corral_source_split_9121:
    assume {:verifier.code 0} true;
    $p364 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9122;

  corral_source_split_9122:
    assume {:verifier.code 0} true;
    $i365 := $load.i8($M.17, $p364);
    goto corral_source_split_9123;

  corral_source_split_9123:
    assume {:verifier.code 0} true;
    $i366 := $zext.i8.i64($i365);
    goto corral_source_split_9124;

  corral_source_split_9124:
    assume {:verifier.code 0} true;
    $i367 := $and.i64($i366, 1);
    goto corral_source_split_9125;

  corral_source_split_9125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1198} $i368 := ldv__builtin_expect($i367, 0);
    goto corral_source_split_9126;

  corral_source_split_9126:
    assume {:verifier.code 0} true;
    $i369 := $ne.i64($i368, 0);
    goto corral_source_split_9127;

  corral_source_split_9127:
    assume {:verifier.code 0} true;
    assume {:branchcond $i369} true;
    goto $bb136, $bb137;

  $bb137:
    assume !($i369 == 1);
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    $p373 := $add.ref($add.ref($p2, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_9134;

  corral_source_split_9134:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p373, $sub.i32(0, 70));
    goto corral_source_split_9135;

  corral_source_split_9135:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb136:
    assume $i369 == 1;
    goto corral_source_split_9129;

  corral_source_split_9129:
    assume {:verifier.code 0} true;
    $p371 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_9130;

  corral_source_split_9130:
    assume {:verifier.code 0} true;
    $p372 := $load.ref($M.0, $p371);
    goto corral_source_split_9131;

  corral_source_split_9131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1199} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p3, $p372, .str.33, .str.32, 5);
    goto corral_source_split_9132;

  corral_source_split_9132:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb131:
    assume $i352 == 1;
    assume {:verifier.code 0} true;
    $i374 := $eq.i32($i350, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i374} true;
    goto $bb140, $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    assume !($i374 == 1);
    goto $bb135;

  $bb140:
    assume $i374 == 1;
    goto corral_source_split_9139;

  corral_source_split_9139:
    assume {:verifier.code 0} true;
    $p375 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9140;

  corral_source_split_9140:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p375, .str.26);
    goto corral_source_split_9141;

  corral_source_split_9141:
    assume {:verifier.code 0} true;
    $p376 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_9142;

  corral_source_split_9142:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p376, .str.32);
    goto corral_source_split_9143;

  corral_source_split_9143:
    assume {:verifier.code 0} true;
    $p377 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_9144;

  corral_source_split_9144:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p377, .str.29);
    goto corral_source_split_9145;

  corral_source_split_9145:
    assume {:verifier.code 0} true;
    $p378 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9146;

  corral_source_split_9146:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p378, .str.35);
    goto corral_source_split_9147;

  corral_source_split_9147:
    assume {:verifier.code 0} true;
    $p379 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_9148;

  corral_source_split_9148:
    assume {:verifier.code 0} true;
    $p380 := $bitcast.ref.ref($p379);
    goto corral_source_split_9149;

  corral_source_split_9149:
    assume {:verifier.code 0} true;
    $i381 := $load.i24($M.16, $p380);
    goto corral_source_split_9150;

  corral_source_split_9150:
    assume {:verifier.code 0} true;
    $i382 := $and.i24($i381, $sub.i24(0, 262144));
    goto corral_source_split_9151;

  corral_source_split_9151:
    assume {:verifier.code 0} true;
    $i383 := $or.i24($i382, 1014);
    goto corral_source_split_9152;

  corral_source_split_9152:
    assume {:verifier.code 0} true;
    $M.16 := $store.i24($M.16, $p380, $i383);
    goto corral_source_split_9153;

  corral_source_split_9153:
    assume {:verifier.code 0} true;
    $p384 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9154;

  corral_source_split_9154:
    assume {:verifier.code 0} true;
    $M.17 := $store.i8($M.17, $p384, 0);
    goto corral_source_split_9155;

  corral_source_split_9155:
    assume {:verifier.code 0} true;
    $p385 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9156;

  corral_source_split_9156:
    assume {:verifier.code 0} true;
    $i386 := $load.i8($M.17, $p385);
    goto corral_source_split_9157;

  corral_source_split_9157:
    assume {:verifier.code 0} true;
    $i387 := $zext.i8.i64($i386);
    goto corral_source_split_9158;

  corral_source_split_9158:
    assume {:verifier.code 0} true;
    $i388 := $and.i64($i387, 1);
    goto corral_source_split_9159;

  corral_source_split_9159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1200} $i389 := ldv__builtin_expect($i388, 0);
    goto corral_source_split_9160;

  corral_source_split_9160:
    assume {:verifier.code 0} true;
    $i390 := $ne.i64($i389, 0);
    goto corral_source_split_9161;

  corral_source_split_9161:
    assume {:verifier.code 0} true;
    assume {:branchcond $i390} true;
    goto $bb142, $bb143;

  $bb143:
    assume !($i390 == 1);
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    $p394 := $add.ref($add.ref($p2, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_9168;

  corral_source_split_9168:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p394, $sub.i32(0, 75));
    goto corral_source_split_9169;

  corral_source_split_9169:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb142:
    assume $i390 == 1;
    goto corral_source_split_9163;

  corral_source_split_9163:
    assume {:verifier.code 0} true;
    $p392 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_9164;

  corral_source_split_9164:
    assume {:verifier.code 0} true;
    $p393 := $load.ref($M.0, $p392);
    goto corral_source_split_9165;

  corral_source_split_9165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1201} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p5, $p393, .str.35, .str.32, 5);
    goto corral_source_split_9166;

  corral_source_split_9166:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb129:
    assume $i351 == 1;
    assume {:verifier.code 0} true;
    $i395 := $eq.i32($i350, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i395} true;
    goto $bb145, $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    assume !($i395 == 1);
    goto $bb135;

  $bb145:
    assume $i395 == 1;
    goto corral_source_split_9171;

  corral_source_split_9171:
    assume {:verifier.code 0} true;
    $p396 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9172;

  corral_source_split_9172:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p396, .str.26);
    goto corral_source_split_9173;

  corral_source_split_9173:
    assume {:verifier.code 0} true;
    $p397 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_9174;

  corral_source_split_9174:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p397, .str.32);
    goto corral_source_split_9175;

  corral_source_split_9175:
    assume {:verifier.code 0} true;
    $p398 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_9176;

  corral_source_split_9176:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p398, .str.29);
    goto corral_source_split_9177;

  corral_source_split_9177:
    assume {:verifier.code 0} true;
    $p399 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9178;

  corral_source_split_9178:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p399, .str.34);
    goto corral_source_split_9179;

  corral_source_split_9179:
    assume {:verifier.code 0} true;
    $p400 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_9180;

  corral_source_split_9180:
    assume {:verifier.code 0} true;
    $p401 := $bitcast.ref.ref($p400);
    goto corral_source_split_9181;

  corral_source_split_9181:
    assume {:verifier.code 0} true;
    $i402 := $load.i24($M.16, $p401);
    goto corral_source_split_9182;

  corral_source_split_9182:
    assume {:verifier.code 0} true;
    $i403 := $and.i24($i402, $sub.i24(0, 262144));
    goto corral_source_split_9183;

  corral_source_split_9183:
    assume {:verifier.code 0} true;
    $i404 := $or.i24($i403, 1007);
    goto corral_source_split_9184;

  corral_source_split_9184:
    assume {:verifier.code 0} true;
    $M.16 := $store.i24($M.16, $p401, $i404);
    goto corral_source_split_9185;

  corral_source_split_9185:
    assume {:verifier.code 0} true;
    $p405 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9186;

  corral_source_split_9186:
    assume {:verifier.code 0} true;
    $M.17 := $store.i8($M.17, $p405, 0);
    goto corral_source_split_9187;

  corral_source_split_9187:
    assume {:verifier.code 0} true;
    $p406 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9188;

  corral_source_split_9188:
    assume {:verifier.code 0} true;
    $i407 := $load.i8($M.17, $p406);
    goto corral_source_split_9189;

  corral_source_split_9189:
    assume {:verifier.code 0} true;
    $i408 := $zext.i8.i64($i407);
    goto corral_source_split_9190;

  corral_source_split_9190:
    assume {:verifier.code 0} true;
    $i409 := $and.i64($i408, 1);
    goto corral_source_split_9191;

  corral_source_split_9191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1202} $i410 := ldv__builtin_expect($i409, 0);
    goto corral_source_split_9192;

  corral_source_split_9192:
    assume {:verifier.code 0} true;
    $i411 := $ne.i64($i410, 0);
    goto corral_source_split_9193;

  corral_source_split_9193:
    assume {:verifier.code 0} true;
    assume {:branchcond $i411} true;
    goto $bb148, $bb149;

  $bb149:
    assume !($i411 == 1);
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    $p415 := $add.ref($add.ref($p2, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_9200;

  corral_source_split_9200:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p415, $sub.i32(0, 71));
    goto corral_source_split_9201;

  corral_source_split_9201:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb148:
    assume $i411 == 1;
    goto corral_source_split_9195;

  corral_source_split_9195:
    assume {:verifier.code 0} true;
    $p413 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_9196;

  corral_source_split_9196:
    assume {:verifier.code 0} true;
    $p414 := $load.ref($M.0, $p413);
    goto corral_source_split_9197;

  corral_source_split_9197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1203} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p4, $p414, .str.34, .str.32, 5);
    goto corral_source_split_9198;

  corral_source_split_9198:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb109:
    assume $i286 == 1;
    goto corral_source_split_9007;

  corral_source_split_9007:
    assume {:verifier.code 0} true;
    $p287 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9008;

  corral_source_split_9008:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p287, .str.26);
    goto corral_source_split_9009;

  corral_source_split_9009:
    assume {:verifier.code 0} true;
    $p288 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_9010;

  corral_source_split_9010:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p288, .str.32);
    goto corral_source_split_9011;

  corral_source_split_9011:
    assume {:verifier.code 0} true;
    $p289 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_9012;

  corral_source_split_9012:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p289, .str.29);
    goto corral_source_split_9013;

  corral_source_split_9013:
    assume {:verifier.code 0} true;
    $p290 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9014;

  corral_source_split_9014:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p290, .str.33);
    goto corral_source_split_9015;

  corral_source_split_9015:
    assume {:verifier.code 0} true;
    $p291 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_9016;

  corral_source_split_9016:
    assume {:verifier.code 0} true;
    $p292 := $bitcast.ref.ref($p291);
    goto corral_source_split_9017;

  corral_source_split_9017:
    assume {:verifier.code 0} true;
    $i293 := $load.i24($M.16, $p292);
    goto corral_source_split_9018;

  corral_source_split_9018:
    assume {:verifier.code 0} true;
    $i294 := $and.i24($i293, $sub.i24(0, 262144));
    goto corral_source_split_9019;

  corral_source_split_9019:
    assume {:verifier.code 0} true;
    $i295 := $or.i24($i294, 1001);
    goto corral_source_split_9020;

  corral_source_split_9020:
    assume {:verifier.code 0} true;
    $M.16 := $store.i24($M.16, $p292, $i295);
    goto corral_source_split_9021;

  corral_source_split_9021:
    assume {:verifier.code 0} true;
    $p296 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9022;

  corral_source_split_9022:
    assume {:verifier.code 0} true;
    $M.17 := $store.i8($M.17, $p296, 0);
    goto corral_source_split_9023;

  corral_source_split_9023:
    assume {:verifier.code 0} true;
    $p297 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9024;

  corral_source_split_9024:
    assume {:verifier.code 0} true;
    $i298 := $load.i8($M.17, $p297);
    goto corral_source_split_9025;

  corral_source_split_9025:
    assume {:verifier.code 0} true;
    $i299 := $zext.i8.i64($i298);
    goto corral_source_split_9026;

  corral_source_split_9026:
    assume {:verifier.code 0} true;
    $i300 := $and.i64($i299, 1);
    goto corral_source_split_9027;

  corral_source_split_9027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1192} $i301 := ldv__builtin_expect($i300, 0);
    goto corral_source_split_9028;

  corral_source_split_9028:
    assume {:verifier.code 0} true;
    $i302 := $ne.i64($i301, 0);
    goto corral_source_split_9029;

  corral_source_split_9029:
    assume {:verifier.code 0} true;
    assume {:branchcond $i302} true;
    goto $bb112, $bb113;

  $bb113:
    assume !($i302 == 1);
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    $p306 := $add.ref($add.ref($p2, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_9036;

  corral_source_split_9036:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p306, $sub.i32(0, 70));
    goto corral_source_split_9037;

  corral_source_split_9037:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb112:
    assume $i302 == 1;
    goto corral_source_split_9031;

  corral_source_split_9031:
    assume {:verifier.code 0} true;
    $p304 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_9032;

  corral_source_split_9032:
    assume {:verifier.code 0} true;
    $p305 := $load.ref($M.0, $p304);
    goto corral_source_split_9033;

  corral_source_split_9033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1193} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p3, $p305, .str.33, .str.32, 4);
    goto corral_source_split_9034;

  corral_source_split_9034:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb107:
    assume $i285 == 1;
    assume {:verifier.code 0} true;
    $i307 := $eq.i32($i283, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i307} true;
    goto $bb116, $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    assume !($i307 == 1);
    goto $bb111;

  $bb116:
    assume $i307 == 1;
    goto corral_source_split_9041;

  corral_source_split_9041:
    assume {:verifier.code 0} true;
    $p308 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9042;

  corral_source_split_9042:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p308, .str.26);
    goto corral_source_split_9043;

  corral_source_split_9043:
    assume {:verifier.code 0} true;
    $p309 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_9044;

  corral_source_split_9044:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p309, .str.32);
    goto corral_source_split_9045;

  corral_source_split_9045:
    assume {:verifier.code 0} true;
    $p310 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_9046;

  corral_source_split_9046:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p310, .str.29);
    goto corral_source_split_9047;

  corral_source_split_9047:
    assume {:verifier.code 0} true;
    $p311 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9048;

  corral_source_split_9048:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p311, .str.35);
    goto corral_source_split_9049;

  corral_source_split_9049:
    assume {:verifier.code 0} true;
    $p312 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_9050;

  corral_source_split_9050:
    assume {:verifier.code 0} true;
    $p313 := $bitcast.ref.ref($p312);
    goto corral_source_split_9051;

  corral_source_split_9051:
    assume {:verifier.code 0} true;
    $i314 := $load.i24($M.16, $p313);
    goto corral_source_split_9052;

  corral_source_split_9052:
    assume {:verifier.code 0} true;
    $i315 := $and.i24($i314, $sub.i24(0, 262144));
    goto corral_source_split_9053;

  corral_source_split_9053:
    assume {:verifier.code 0} true;
    $i316 := $or.i24($i315, 1014);
    goto corral_source_split_9054;

  corral_source_split_9054:
    assume {:verifier.code 0} true;
    $M.16 := $store.i24($M.16, $p313, $i316);
    goto corral_source_split_9055;

  corral_source_split_9055:
    assume {:verifier.code 0} true;
    $p317 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9056;

  corral_source_split_9056:
    assume {:verifier.code 0} true;
    $M.17 := $store.i8($M.17, $p317, 0);
    goto corral_source_split_9057;

  corral_source_split_9057:
    assume {:verifier.code 0} true;
    $p318 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9058;

  corral_source_split_9058:
    assume {:verifier.code 0} true;
    $i319 := $load.i8($M.17, $p318);
    goto corral_source_split_9059;

  corral_source_split_9059:
    assume {:verifier.code 0} true;
    $i320 := $zext.i8.i64($i319);
    goto corral_source_split_9060;

  corral_source_split_9060:
    assume {:verifier.code 0} true;
    $i321 := $and.i64($i320, 1);
    goto corral_source_split_9061;

  corral_source_split_9061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1194} $i322 := ldv__builtin_expect($i321, 0);
    goto corral_source_split_9062;

  corral_source_split_9062:
    assume {:verifier.code 0} true;
    $i323 := $ne.i64($i322, 0);
    goto corral_source_split_9063;

  corral_source_split_9063:
    assume {:verifier.code 0} true;
    assume {:branchcond $i323} true;
    goto $bb118, $bb119;

  $bb119:
    assume !($i323 == 1);
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    $p327 := $add.ref($add.ref($p2, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_9070;

  corral_source_split_9070:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p327, $sub.i32(0, 75));
    goto corral_source_split_9071;

  corral_source_split_9071:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb118:
    assume $i323 == 1;
    goto corral_source_split_9065;

  corral_source_split_9065:
    assume {:verifier.code 0} true;
    $p325 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_9066;

  corral_source_split_9066:
    assume {:verifier.code 0} true;
    $p326 := $load.ref($M.0, $p325);
    goto corral_source_split_9067;

  corral_source_split_9067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1195} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p5, $p326, .str.35, .str.32, 4);
    goto corral_source_split_9068;

  corral_source_split_9068:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb105:
    assume $i284 == 1;
    assume {:verifier.code 0} true;
    $i328 := $eq.i32($i283, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i328} true;
    goto $bb121, $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    assume !($i328 == 1);
    goto $bb111;

  $bb121:
    assume $i328 == 1;
    goto corral_source_split_9073;

  corral_source_split_9073:
    assume {:verifier.code 0} true;
    $p329 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9074;

  corral_source_split_9074:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p329, .str.26);
    goto corral_source_split_9075;

  corral_source_split_9075:
    assume {:verifier.code 0} true;
    $p330 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_9076;

  corral_source_split_9076:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p330, .str.32);
    goto corral_source_split_9077;

  corral_source_split_9077:
    assume {:verifier.code 0} true;
    $p331 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_9078;

  corral_source_split_9078:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p331, .str.29);
    goto corral_source_split_9079;

  corral_source_split_9079:
    assume {:verifier.code 0} true;
    $p332 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9080;

  corral_source_split_9080:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p332, .str.34);
    goto corral_source_split_9081;

  corral_source_split_9081:
    assume {:verifier.code 0} true;
    $p333 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_9082;

  corral_source_split_9082:
    assume {:verifier.code 0} true;
    $p334 := $bitcast.ref.ref($p333);
    goto corral_source_split_9083;

  corral_source_split_9083:
    assume {:verifier.code 0} true;
    $i335 := $load.i24($M.16, $p334);
    goto corral_source_split_9084;

  corral_source_split_9084:
    assume {:verifier.code 0} true;
    $i336 := $and.i24($i335, $sub.i24(0, 262144));
    goto corral_source_split_9085;

  corral_source_split_9085:
    assume {:verifier.code 0} true;
    $i337 := $or.i24($i336, 1007);
    goto corral_source_split_9086;

  corral_source_split_9086:
    assume {:verifier.code 0} true;
    $M.16 := $store.i24($M.16, $p334, $i337);
    goto corral_source_split_9087;

  corral_source_split_9087:
    assume {:verifier.code 0} true;
    $p338 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9088;

  corral_source_split_9088:
    assume {:verifier.code 0} true;
    $M.17 := $store.i8($M.17, $p338, 0);
    goto corral_source_split_9089;

  corral_source_split_9089:
    assume {:verifier.code 0} true;
    $p339 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9090;

  corral_source_split_9090:
    assume {:verifier.code 0} true;
    $i340 := $load.i8($M.17, $p339);
    goto corral_source_split_9091;

  corral_source_split_9091:
    assume {:verifier.code 0} true;
    $i341 := $zext.i8.i64($i340);
    goto corral_source_split_9092;

  corral_source_split_9092:
    assume {:verifier.code 0} true;
    $i342 := $and.i64($i341, 1);
    goto corral_source_split_9093;

  corral_source_split_9093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1196} $i343 := ldv__builtin_expect($i342, 0);
    goto corral_source_split_9094;

  corral_source_split_9094:
    assume {:verifier.code 0} true;
    $i344 := $ne.i64($i343, 0);
    goto corral_source_split_9095;

  corral_source_split_9095:
    assume {:verifier.code 0} true;
    assume {:branchcond $i344} true;
    goto $bb124, $bb125;

  $bb125:
    assume !($i344 == 1);
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    $p348 := $add.ref($add.ref($p2, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_9102;

  corral_source_split_9102:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p348, $sub.i32(0, 71));
    goto corral_source_split_9103;

  corral_source_split_9103:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb124:
    assume $i344 == 1;
    goto corral_source_split_9097;

  corral_source_split_9097:
    assume {:verifier.code 0} true;
    $p346 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_9098;

  corral_source_split_9098:
    assume {:verifier.code 0} true;
    $p347 := $load.ref($M.0, $p346);
    goto corral_source_split_9099;

  corral_source_split_9099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1197} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p4, $p347, .str.34, .str.32, 4);
    goto corral_source_split_9100;

  corral_source_split_9100:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb85:
    assume $i219 == 1;
    goto corral_source_split_8909;

  corral_source_split_8909:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8910;

  corral_source_split_8910:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p220, .str.26);
    goto corral_source_split_8911;

  corral_source_split_8911:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8912;

  corral_source_split_8912:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p221, .str.32);
    goto corral_source_split_8913;

  corral_source_split_8913:
    assume {:verifier.code 0} true;
    $p222 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8914;

  corral_source_split_8914:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p222, .str.29);
    goto corral_source_split_8915;

  corral_source_split_8915:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8916;

  corral_source_split_8916:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p223, .str.33);
    goto corral_source_split_8917;

  corral_source_split_8917:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8918;

  corral_source_split_8918:
    assume {:verifier.code 0} true;
    $p225 := $bitcast.ref.ref($p224);
    goto corral_source_split_8919;

  corral_source_split_8919:
    assume {:verifier.code 0} true;
    $i226 := $load.i24($M.16, $p225);
    goto corral_source_split_8920;

  corral_source_split_8920:
    assume {:verifier.code 0} true;
    $i227 := $and.i24($i226, $sub.i24(0, 262144));
    goto corral_source_split_8921;

  corral_source_split_8921:
    assume {:verifier.code 0} true;
    $i228 := $or.i24($i227, 1001);
    goto corral_source_split_8922;

  corral_source_split_8922:
    assume {:verifier.code 0} true;
    $M.16 := $store.i24($M.16, $p225, $i228);
    goto corral_source_split_8923;

  corral_source_split_8923:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8924;

  corral_source_split_8924:
    assume {:verifier.code 0} true;
    $M.17 := $store.i8($M.17, $p229, 0);
    goto corral_source_split_8925;

  corral_source_split_8925:
    assume {:verifier.code 0} true;
    $p230 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8926;

  corral_source_split_8926:
    assume {:verifier.code 0} true;
    $i231 := $load.i8($M.17, $p230);
    goto corral_source_split_8927;

  corral_source_split_8927:
    assume {:verifier.code 0} true;
    $i232 := $zext.i8.i64($i231);
    goto corral_source_split_8928;

  corral_source_split_8928:
    assume {:verifier.code 0} true;
    $i233 := $and.i64($i232, 1);
    goto corral_source_split_8929;

  corral_source_split_8929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1186} $i234 := ldv__builtin_expect($i233, 0);
    goto corral_source_split_8930;

  corral_source_split_8930:
    assume {:verifier.code 0} true;
    $i235 := $ne.i64($i234, 0);
    goto corral_source_split_8931;

  corral_source_split_8931:
    assume {:verifier.code 0} true;
    assume {:branchcond $i235} true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i235 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    $p239 := $add.ref($add.ref($p2, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_8938;

  corral_source_split_8938:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p239, $sub.i32(0, 70));
    goto corral_source_split_8939;

  corral_source_split_8939:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb88:
    assume $i235 == 1;
    goto corral_source_split_8933;

  corral_source_split_8933:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_8934;

  corral_source_split_8934:
    assume {:verifier.code 0} true;
    $p238 := $load.ref($M.0, $p237);
    goto corral_source_split_8935;

  corral_source_split_8935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1187} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p3, $p238, .str.33, .str.32, 3);
    goto corral_source_split_8936;

  corral_source_split_8936:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb83:
    assume $i218 == 1;
    assume {:verifier.code 0} true;
    $i240 := $eq.i32($i216, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i240} true;
    goto $bb92, $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    assume !($i240 == 1);
    goto $bb87;

  $bb92:
    assume $i240 == 1;
    goto corral_source_split_8943;

  corral_source_split_8943:
    assume {:verifier.code 0} true;
    $p241 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8944;

  corral_source_split_8944:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p241, .str.26);
    goto corral_source_split_8945;

  corral_source_split_8945:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8946;

  corral_source_split_8946:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p242, .str.32);
    goto corral_source_split_8947;

  corral_source_split_8947:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8948;

  corral_source_split_8948:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p243, .str.29);
    goto corral_source_split_8949;

  corral_source_split_8949:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8950;

  corral_source_split_8950:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p244, .str.35);
    goto corral_source_split_8951;

  corral_source_split_8951:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8952;

  corral_source_split_8952:
    assume {:verifier.code 0} true;
    $p246 := $bitcast.ref.ref($p245);
    goto corral_source_split_8953;

  corral_source_split_8953:
    assume {:verifier.code 0} true;
    $i247 := $load.i24($M.16, $p246);
    goto corral_source_split_8954;

  corral_source_split_8954:
    assume {:verifier.code 0} true;
    $i248 := $and.i24($i247, $sub.i24(0, 262144));
    goto corral_source_split_8955;

  corral_source_split_8955:
    assume {:verifier.code 0} true;
    $i249 := $or.i24($i248, 1014);
    goto corral_source_split_8956;

  corral_source_split_8956:
    assume {:verifier.code 0} true;
    $M.16 := $store.i24($M.16, $p246, $i249);
    goto corral_source_split_8957;

  corral_source_split_8957:
    assume {:verifier.code 0} true;
    $p250 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8958;

  corral_source_split_8958:
    assume {:verifier.code 0} true;
    $M.17 := $store.i8($M.17, $p250, 0);
    goto corral_source_split_8959;

  corral_source_split_8959:
    assume {:verifier.code 0} true;
    $p251 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8960;

  corral_source_split_8960:
    assume {:verifier.code 0} true;
    $i252 := $load.i8($M.17, $p251);
    goto corral_source_split_8961;

  corral_source_split_8961:
    assume {:verifier.code 0} true;
    $i253 := $zext.i8.i64($i252);
    goto corral_source_split_8962;

  corral_source_split_8962:
    assume {:verifier.code 0} true;
    $i254 := $and.i64($i253, 1);
    goto corral_source_split_8963;

  corral_source_split_8963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1188} $i255 := ldv__builtin_expect($i254, 0);
    goto corral_source_split_8964;

  corral_source_split_8964:
    assume {:verifier.code 0} true;
    $i256 := $ne.i64($i255, 0);
    goto corral_source_split_8965;

  corral_source_split_8965:
    assume {:verifier.code 0} true;
    assume {:branchcond $i256} true;
    goto $bb94, $bb95;

  $bb95:
    assume !($i256 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    $p260 := $add.ref($add.ref($p2, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_8972;

  corral_source_split_8972:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p260, $sub.i32(0, 75));
    goto corral_source_split_8973;

  corral_source_split_8973:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb94:
    assume $i256 == 1;
    goto corral_source_split_8967;

  corral_source_split_8967:
    assume {:verifier.code 0} true;
    $p258 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_8968;

  corral_source_split_8968:
    assume {:verifier.code 0} true;
    $p259 := $load.ref($M.0, $p258);
    goto corral_source_split_8969;

  corral_source_split_8969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1189} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p5, $p259, .str.35, .str.32, 3);
    goto corral_source_split_8970;

  corral_source_split_8970:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb81:
    assume $i217 == 1;
    assume {:verifier.code 0} true;
    $i261 := $eq.i32($i216, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    assume !($i261 == 1);
    goto $bb87;

  $bb97:
    assume $i261 == 1;
    goto corral_source_split_8975;

  corral_source_split_8975:
    assume {:verifier.code 0} true;
    $p262 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8976;

  corral_source_split_8976:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p262, .str.26);
    goto corral_source_split_8977;

  corral_source_split_8977:
    assume {:verifier.code 0} true;
    $p263 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8978;

  corral_source_split_8978:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p263, .str.32);
    goto corral_source_split_8979;

  corral_source_split_8979:
    assume {:verifier.code 0} true;
    $p264 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8980;

  corral_source_split_8980:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p264, .str.29);
    goto corral_source_split_8981;

  corral_source_split_8981:
    assume {:verifier.code 0} true;
    $p265 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8982;

  corral_source_split_8982:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p265, .str.34);
    goto corral_source_split_8983;

  corral_source_split_8983:
    assume {:verifier.code 0} true;
    $p266 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8984;

  corral_source_split_8984:
    assume {:verifier.code 0} true;
    $p267 := $bitcast.ref.ref($p266);
    goto corral_source_split_8985;

  corral_source_split_8985:
    assume {:verifier.code 0} true;
    $i268 := $load.i24($M.16, $p267);
    goto corral_source_split_8986;

  corral_source_split_8986:
    assume {:verifier.code 0} true;
    $i269 := $and.i24($i268, $sub.i24(0, 262144));
    goto corral_source_split_8987;

  corral_source_split_8987:
    assume {:verifier.code 0} true;
    $i270 := $or.i24($i269, 1007);
    goto corral_source_split_8988;

  corral_source_split_8988:
    assume {:verifier.code 0} true;
    $M.16 := $store.i24($M.16, $p267, $i270);
    goto corral_source_split_8989;

  corral_source_split_8989:
    assume {:verifier.code 0} true;
    $p271 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8990;

  corral_source_split_8990:
    assume {:verifier.code 0} true;
    $M.17 := $store.i8($M.17, $p271, 0);
    goto corral_source_split_8991;

  corral_source_split_8991:
    assume {:verifier.code 0} true;
    $p272 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8992;

  corral_source_split_8992:
    assume {:verifier.code 0} true;
    $i273 := $load.i8($M.17, $p272);
    goto corral_source_split_8993;

  corral_source_split_8993:
    assume {:verifier.code 0} true;
    $i274 := $zext.i8.i64($i273);
    goto corral_source_split_8994;

  corral_source_split_8994:
    assume {:verifier.code 0} true;
    $i275 := $and.i64($i274, 1);
    goto corral_source_split_8995;

  corral_source_split_8995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1190} $i276 := ldv__builtin_expect($i275, 0);
    goto corral_source_split_8996;

  corral_source_split_8996:
    assume {:verifier.code 0} true;
    $i277 := $ne.i64($i276, 0);
    goto corral_source_split_8997;

  corral_source_split_8997:
    assume {:verifier.code 0} true;
    assume {:branchcond $i277} true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i277 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    $p281 := $add.ref($add.ref($p2, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_9004;

  corral_source_split_9004:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p281, $sub.i32(0, 71));
    goto corral_source_split_9005;

  corral_source_split_9005:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb100:
    assume $i277 == 1;
    goto corral_source_split_8999;

  corral_source_split_8999:
    assume {:verifier.code 0} true;
    $p279 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_9000;

  corral_source_split_9000:
    assume {:verifier.code 0} true;
    $p280 := $load.ref($M.0, $p279);
    goto corral_source_split_9001;

  corral_source_split_9001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1191} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p4, $p280, .str.34, .str.32, 3);
    goto corral_source_split_9002;

  corral_source_split_9002:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb61:
    assume $i152 == 1;
    goto corral_source_split_8811;

  corral_source_split_8811:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8812;

  corral_source_split_8812:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p153, .str.26);
    goto corral_source_split_8813;

  corral_source_split_8813:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8814;

  corral_source_split_8814:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p154, .str.32);
    goto corral_source_split_8815;

  corral_source_split_8815:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8816;

  corral_source_split_8816:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p155, .str.29);
    goto corral_source_split_8817;

  corral_source_split_8817:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8818;

  corral_source_split_8818:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p156, .str.33);
    goto corral_source_split_8819;

  corral_source_split_8819:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8820;

  corral_source_split_8820:
    assume {:verifier.code 0} true;
    $p158 := $bitcast.ref.ref($p157);
    goto corral_source_split_8821;

  corral_source_split_8821:
    assume {:verifier.code 0} true;
    $i159 := $load.i24($M.16, $p158);
    goto corral_source_split_8822;

  corral_source_split_8822:
    assume {:verifier.code 0} true;
    $i160 := $and.i24($i159, $sub.i24(0, 262144));
    goto corral_source_split_8823;

  corral_source_split_8823:
    assume {:verifier.code 0} true;
    $i161 := $or.i24($i160, 1001);
    goto corral_source_split_8824;

  corral_source_split_8824:
    assume {:verifier.code 0} true;
    $M.16 := $store.i24($M.16, $p158, $i161);
    goto corral_source_split_8825;

  corral_source_split_8825:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8826;

  corral_source_split_8826:
    assume {:verifier.code 0} true;
    $M.17 := $store.i8($M.17, $p162, 0);
    goto corral_source_split_8827;

  corral_source_split_8827:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8828;

  corral_source_split_8828:
    assume {:verifier.code 0} true;
    $i164 := $load.i8($M.17, $p163);
    goto corral_source_split_8829;

  corral_source_split_8829:
    assume {:verifier.code 0} true;
    $i165 := $zext.i8.i64($i164);
    goto corral_source_split_8830;

  corral_source_split_8830:
    assume {:verifier.code 0} true;
    $i166 := $and.i64($i165, 1);
    goto corral_source_split_8831;

  corral_source_split_8831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1180} $i167 := ldv__builtin_expect($i166, 0);
    goto corral_source_split_8832;

  corral_source_split_8832:
    assume {:verifier.code 0} true;
    $i168 := $ne.i64($i167, 0);
    goto corral_source_split_8833;

  corral_source_split_8833:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i168 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p2, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_8840;

  corral_source_split_8840:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p172, $sub.i32(0, 70));
    goto corral_source_split_8841;

  corral_source_split_8841:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb64:
    assume $i168 == 1;
    goto corral_source_split_8835;

  corral_source_split_8835:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_8836;

  corral_source_split_8836:
    assume {:verifier.code 0} true;
    $p171 := $load.ref($M.0, $p170);
    goto corral_source_split_8837;

  corral_source_split_8837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1181} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p3, $p171, .str.33, .str.32, 2);
    goto corral_source_split_8838;

  corral_source_split_8838:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb59:
    assume $i151 == 1;
    assume {:verifier.code 0} true;
    $i173 := $eq.i32($i149, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i173} true;
    goto $bb68, $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    assume !($i173 == 1);
    goto $bb63;

  $bb68:
    assume $i173 == 1;
    goto corral_source_split_8845;

  corral_source_split_8845:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8846;

  corral_source_split_8846:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p174, .str.26);
    goto corral_source_split_8847;

  corral_source_split_8847:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8848;

  corral_source_split_8848:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p175, .str.32);
    goto corral_source_split_8849;

  corral_source_split_8849:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8850;

  corral_source_split_8850:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p176, .str.29);
    goto corral_source_split_8851;

  corral_source_split_8851:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8852;

  corral_source_split_8852:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p177, .str.35);
    goto corral_source_split_8853;

  corral_source_split_8853:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8854;

  corral_source_split_8854:
    assume {:verifier.code 0} true;
    $p179 := $bitcast.ref.ref($p178);
    goto corral_source_split_8855;

  corral_source_split_8855:
    assume {:verifier.code 0} true;
    $i180 := $load.i24($M.16, $p179);
    goto corral_source_split_8856;

  corral_source_split_8856:
    assume {:verifier.code 0} true;
    $i181 := $and.i24($i180, $sub.i24(0, 262144));
    goto corral_source_split_8857;

  corral_source_split_8857:
    assume {:verifier.code 0} true;
    $i182 := $or.i24($i181, 1014);
    goto corral_source_split_8858;

  corral_source_split_8858:
    assume {:verifier.code 0} true;
    $M.16 := $store.i24($M.16, $p179, $i182);
    goto corral_source_split_8859;

  corral_source_split_8859:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8860;

  corral_source_split_8860:
    assume {:verifier.code 0} true;
    $M.17 := $store.i8($M.17, $p183, 0);
    goto corral_source_split_8861;

  corral_source_split_8861:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8862;

  corral_source_split_8862:
    assume {:verifier.code 0} true;
    $i185 := $load.i8($M.17, $p184);
    goto corral_source_split_8863;

  corral_source_split_8863:
    assume {:verifier.code 0} true;
    $i186 := $zext.i8.i64($i185);
    goto corral_source_split_8864;

  corral_source_split_8864:
    assume {:verifier.code 0} true;
    $i187 := $and.i64($i186, 1);
    goto corral_source_split_8865;

  corral_source_split_8865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1182} $i188 := ldv__builtin_expect($i187, 0);
    goto corral_source_split_8866;

  corral_source_split_8866:
    assume {:verifier.code 0} true;
    $i189 := $ne.i64($i188, 0);
    goto corral_source_split_8867;

  corral_source_split_8867:
    assume {:verifier.code 0} true;
    assume {:branchcond $i189} true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i189 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($p2, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_8874;

  corral_source_split_8874:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p193, $sub.i32(0, 75));
    goto corral_source_split_8875;

  corral_source_split_8875:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb70:
    assume $i189 == 1;
    goto corral_source_split_8869;

  corral_source_split_8869:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_8870;

  corral_source_split_8870:
    assume {:verifier.code 0} true;
    $p192 := $load.ref($M.0, $p191);
    goto corral_source_split_8871;

  corral_source_split_8871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1183} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p5, $p192, .str.35, .str.32, 2);
    goto corral_source_split_8872;

  corral_source_split_8872:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb57:
    assume $i150 == 1;
    assume {:verifier.code 0} true;
    $i194 := $eq.i32($i149, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i194} true;
    goto $bb73, $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    assume !($i194 == 1);
    goto $bb63;

  $bb73:
    assume $i194 == 1;
    goto corral_source_split_8877;

  corral_source_split_8877:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8878;

  corral_source_split_8878:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p195, .str.26);
    goto corral_source_split_8879;

  corral_source_split_8879:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8880;

  corral_source_split_8880:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p196, .str.32);
    goto corral_source_split_8881;

  corral_source_split_8881:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8882;

  corral_source_split_8882:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p197, .str.29);
    goto corral_source_split_8883;

  corral_source_split_8883:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8884;

  corral_source_split_8884:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p198, .str.34);
    goto corral_source_split_8885;

  corral_source_split_8885:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8886;

  corral_source_split_8886:
    assume {:verifier.code 0} true;
    $p200 := $bitcast.ref.ref($p199);
    goto corral_source_split_8887;

  corral_source_split_8887:
    assume {:verifier.code 0} true;
    $i201 := $load.i24($M.16, $p200);
    goto corral_source_split_8888;

  corral_source_split_8888:
    assume {:verifier.code 0} true;
    $i202 := $and.i24($i201, $sub.i24(0, 262144));
    goto corral_source_split_8889;

  corral_source_split_8889:
    assume {:verifier.code 0} true;
    $i203 := $or.i24($i202, 1007);
    goto corral_source_split_8890;

  corral_source_split_8890:
    assume {:verifier.code 0} true;
    $M.16 := $store.i24($M.16, $p200, $i203);
    goto corral_source_split_8891;

  corral_source_split_8891:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8892;

  corral_source_split_8892:
    assume {:verifier.code 0} true;
    $M.17 := $store.i8($M.17, $p204, 0);
    goto corral_source_split_8893;

  corral_source_split_8893:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8894;

  corral_source_split_8894:
    assume {:verifier.code 0} true;
    $i206 := $load.i8($M.17, $p205);
    goto corral_source_split_8895;

  corral_source_split_8895:
    assume {:verifier.code 0} true;
    $i207 := $zext.i8.i64($i206);
    goto corral_source_split_8896;

  corral_source_split_8896:
    assume {:verifier.code 0} true;
    $i208 := $and.i64($i207, 1);
    goto corral_source_split_8897;

  corral_source_split_8897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1184} $i209 := ldv__builtin_expect($i208, 0);
    goto corral_source_split_8898;

  corral_source_split_8898:
    assume {:verifier.code 0} true;
    $i210 := $ne.i64($i209, 0);
    goto corral_source_split_8899;

  corral_source_split_8899:
    assume {:verifier.code 0} true;
    assume {:branchcond $i210} true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i210 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($p2, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_8906;

  corral_source_split_8906:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p214, $sub.i32(0, 71));
    goto corral_source_split_8907;

  corral_source_split_8907:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb76:
    assume $i210 == 1;
    goto corral_source_split_8901;

  corral_source_split_8901:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_8902;

  corral_source_split_8902:
    assume {:verifier.code 0} true;
    $p213 := $load.ref($M.0, $p212);
    goto corral_source_split_8903;

  corral_source_split_8903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1185} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p4, $p213, .str.34, .str.32, 2);
    goto corral_source_split_8904;

  corral_source_split_8904:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb37:
    assume $i85 == 1;
    goto corral_source_split_8713;

  corral_source_split_8713:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8714;

  corral_source_split_8714:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p86, .str.26);
    goto corral_source_split_8715;

  corral_source_split_8715:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8716;

  corral_source_split_8716:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p87, .str.32);
    goto corral_source_split_8717;

  corral_source_split_8717:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8718;

  corral_source_split_8718:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p88, .str.29);
    goto corral_source_split_8719;

  corral_source_split_8719:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8720;

  corral_source_split_8720:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p89, .str.33);
    goto corral_source_split_8721;

  corral_source_split_8721:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8722;

  corral_source_split_8722:
    assume {:verifier.code 0} true;
    $p91 := $bitcast.ref.ref($p90);
    goto corral_source_split_8723;

  corral_source_split_8723:
    assume {:verifier.code 0} true;
    $i92 := $load.i24($M.16, $p91);
    goto corral_source_split_8724;

  corral_source_split_8724:
    assume {:verifier.code 0} true;
    $i93 := $and.i24($i92, $sub.i24(0, 262144));
    goto corral_source_split_8725;

  corral_source_split_8725:
    assume {:verifier.code 0} true;
    $i94 := $or.i24($i93, 1001);
    goto corral_source_split_8726;

  corral_source_split_8726:
    assume {:verifier.code 0} true;
    $M.16 := $store.i24($M.16, $p91, $i94);
    goto corral_source_split_8727;

  corral_source_split_8727:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8728;

  corral_source_split_8728:
    assume {:verifier.code 0} true;
    $M.17 := $store.i8($M.17, $p95, 0);
    goto corral_source_split_8729;

  corral_source_split_8729:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8730;

  corral_source_split_8730:
    assume {:verifier.code 0} true;
    $i97 := $load.i8($M.17, $p96);
    goto corral_source_split_8731;

  corral_source_split_8731:
    assume {:verifier.code 0} true;
    $i98 := $zext.i8.i64($i97);
    goto corral_source_split_8732;

  corral_source_split_8732:
    assume {:verifier.code 0} true;
    $i99 := $and.i64($i98, 1);
    goto corral_source_split_8733;

  corral_source_split_8733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1174} $i100 := ldv__builtin_expect($i99, 0);
    goto corral_source_split_8734;

  corral_source_split_8734:
    assume {:verifier.code 0} true;
    $i101 := $ne.i64($i100, 0);
    goto corral_source_split_8735;

  corral_source_split_8735:
    assume {:verifier.code 0} true;
    assume {:branchcond $i101} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p2, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_8742;

  corral_source_split_8742:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p105, $sub.i32(0, 70));
    goto corral_source_split_8743;

  corral_source_split_8743:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb40:
    assume $i101 == 1;
    goto corral_source_split_8737;

  corral_source_split_8737:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_8738;

  corral_source_split_8738:
    assume {:verifier.code 0} true;
    $p104 := $load.ref($M.0, $p103);
    goto corral_source_split_8739;

  corral_source_split_8739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1175} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p3, $p104, .str.33, .str.32, 1);
    goto corral_source_split_8740;

  corral_source_split_8740:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb35:
    assume $i84 == 1;
    assume {:verifier.code 0} true;
    $i106 := $eq.i32($i82, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i106} true;
    goto $bb44, $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    assume !($i106 == 1);
    goto $bb39;

  $bb44:
    assume $i106 == 1;
    goto corral_source_split_8747;

  corral_source_split_8747:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8748;

  corral_source_split_8748:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p107, .str.26);
    goto corral_source_split_8749;

  corral_source_split_8749:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8750;

  corral_source_split_8750:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p108, .str.32);
    goto corral_source_split_8751;

  corral_source_split_8751:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8752;

  corral_source_split_8752:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p109, .str.29);
    goto corral_source_split_8753;

  corral_source_split_8753:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8754;

  corral_source_split_8754:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p110, .str.35);
    goto corral_source_split_8755;

  corral_source_split_8755:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8756;

  corral_source_split_8756:
    assume {:verifier.code 0} true;
    $p112 := $bitcast.ref.ref($p111);
    goto corral_source_split_8757;

  corral_source_split_8757:
    assume {:verifier.code 0} true;
    $i113 := $load.i24($M.16, $p112);
    goto corral_source_split_8758;

  corral_source_split_8758:
    assume {:verifier.code 0} true;
    $i114 := $and.i24($i113, $sub.i24(0, 262144));
    goto corral_source_split_8759;

  corral_source_split_8759:
    assume {:verifier.code 0} true;
    $i115 := $or.i24($i114, 1014);
    goto corral_source_split_8760;

  corral_source_split_8760:
    assume {:verifier.code 0} true;
    $M.16 := $store.i24($M.16, $p112, $i115);
    goto corral_source_split_8761;

  corral_source_split_8761:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8762;

  corral_source_split_8762:
    assume {:verifier.code 0} true;
    $M.17 := $store.i8($M.17, $p116, 0);
    goto corral_source_split_8763;

  corral_source_split_8763:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8764;

  corral_source_split_8764:
    assume {:verifier.code 0} true;
    $i118 := $load.i8($M.17, $p117);
    goto corral_source_split_8765;

  corral_source_split_8765:
    assume {:verifier.code 0} true;
    $i119 := $zext.i8.i64($i118);
    goto corral_source_split_8766;

  corral_source_split_8766:
    assume {:verifier.code 0} true;
    $i120 := $and.i64($i119, 1);
    goto corral_source_split_8767;

  corral_source_split_8767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1176} $i121 := ldv__builtin_expect($i120, 0);
    goto corral_source_split_8768;

  corral_source_split_8768:
    assume {:verifier.code 0} true;
    $i122 := $ne.i64($i121, 0);
    goto corral_source_split_8769;

  corral_source_split_8769:
    assume {:verifier.code 0} true;
    assume {:branchcond $i122} true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p2, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_8776;

  corral_source_split_8776:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p126, $sub.i32(0, 75));
    goto corral_source_split_8777;

  corral_source_split_8777:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb46:
    assume $i122 == 1;
    goto corral_source_split_8771;

  corral_source_split_8771:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_8772;

  corral_source_split_8772:
    assume {:verifier.code 0} true;
    $p125 := $load.ref($M.0, $p124);
    goto corral_source_split_8773;

  corral_source_split_8773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1177} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p5, $p125, .str.35, .str.32, 1);
    goto corral_source_split_8774;

  corral_source_split_8774:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb33:
    assume $i83 == 1;
    assume {:verifier.code 0} true;
    $i127 := $eq.i32($i82, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i127} true;
    goto $bb49, $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    assume !($i127 == 1);
    goto $bb39;

  $bb49:
    assume $i127 == 1;
    goto corral_source_split_8779;

  corral_source_split_8779:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8780;

  corral_source_split_8780:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p128, .str.26);
    goto corral_source_split_8781;

  corral_source_split_8781:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8782;

  corral_source_split_8782:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p129, .str.32);
    goto corral_source_split_8783;

  corral_source_split_8783:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8784;

  corral_source_split_8784:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p130, .str.29);
    goto corral_source_split_8785;

  corral_source_split_8785:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8786;

  corral_source_split_8786:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p131, .str.34);
    goto corral_source_split_8787;

  corral_source_split_8787:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8788;

  corral_source_split_8788:
    assume {:verifier.code 0} true;
    $p133 := $bitcast.ref.ref($p132);
    goto corral_source_split_8789;

  corral_source_split_8789:
    assume {:verifier.code 0} true;
    $i134 := $load.i24($M.16, $p133);
    goto corral_source_split_8790;

  corral_source_split_8790:
    assume {:verifier.code 0} true;
    $i135 := $and.i24($i134, $sub.i24(0, 262144));
    goto corral_source_split_8791;

  corral_source_split_8791:
    assume {:verifier.code 0} true;
    $i136 := $or.i24($i135, 1007);
    goto corral_source_split_8792;

  corral_source_split_8792:
    assume {:verifier.code 0} true;
    $M.16 := $store.i24($M.16, $p133, $i136);
    goto corral_source_split_8793;

  corral_source_split_8793:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8794;

  corral_source_split_8794:
    assume {:verifier.code 0} true;
    $M.17 := $store.i8($M.17, $p137, 0);
    goto corral_source_split_8795;

  corral_source_split_8795:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8796;

  corral_source_split_8796:
    assume {:verifier.code 0} true;
    $i139 := $load.i8($M.17, $p138);
    goto corral_source_split_8797;

  corral_source_split_8797:
    assume {:verifier.code 0} true;
    $i140 := $zext.i8.i64($i139);
    goto corral_source_split_8798;

  corral_source_split_8798:
    assume {:verifier.code 0} true;
    $i141 := $and.i64($i140, 1);
    goto corral_source_split_8799;

  corral_source_split_8799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1178} $i142 := ldv__builtin_expect($i141, 0);
    goto corral_source_split_8800;

  corral_source_split_8800:
    assume {:verifier.code 0} true;
    $i143 := $ne.i64($i142, 0);
    goto corral_source_split_8801;

  corral_source_split_8801:
    assume {:verifier.code 0} true;
    assume {:branchcond $i143} true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i143 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p2, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_8808;

  corral_source_split_8808:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p147, $sub.i32(0, 71));
    goto corral_source_split_8809;

  corral_source_split_8809:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb52:
    assume $i143 == 1;
    goto corral_source_split_8803;

  corral_source_split_8803:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_8804;

  corral_source_split_8804:
    assume {:verifier.code 0} true;
    $p146 := $load.ref($M.0, $p145);
    goto corral_source_split_8805;

  corral_source_split_8805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1179} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p4, $p146, .str.34, .str.32, 1);
    goto corral_source_split_8806;

  corral_source_split_8806:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb10:
    assume $i17 == 1;
    goto corral_source_split_8613;

  corral_source_split_8613:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8614;

  corral_source_split_8614:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p20, .str.26);
    goto corral_source_split_8615;

  corral_source_split_8615:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8616;

  corral_source_split_8616:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p21, .str.32);
    goto corral_source_split_8617;

  corral_source_split_8617:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8618;

  corral_source_split_8618:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p22, .str.29);
    goto corral_source_split_8619;

  corral_source_split_8619:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8620;

  corral_source_split_8620:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p23, .str.33);
    goto corral_source_split_8621;

  corral_source_split_8621:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8622;

  corral_source_split_8622:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_8623;

  corral_source_split_8623:
    assume {:verifier.code 0} true;
    $i26 := $load.i24($M.16, $p25);
    goto corral_source_split_8624;

  corral_source_split_8624:
    assume {:verifier.code 0} true;
    $i27 := $and.i24($i26, $sub.i24(0, 262144));
    goto corral_source_split_8625;

  corral_source_split_8625:
    assume {:verifier.code 0} true;
    $i28 := $or.i24($i27, 1001);
    goto corral_source_split_8626;

  corral_source_split_8626:
    assume {:verifier.code 0} true;
    $M.16 := $store.i24($M.16, $p25, $i28);
    goto corral_source_split_8627;

  corral_source_split_8627:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8628;

  corral_source_split_8628:
    assume {:verifier.code 0} true;
    $M.17 := $store.i8($M.17, $p29, 0);
    goto corral_source_split_8629;

  corral_source_split_8629:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8630;

  corral_source_split_8630:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.17, $p30);
    goto corral_source_split_8631;

  corral_source_split_8631:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i64($i31);
    goto corral_source_split_8632;

  corral_source_split_8632:
    assume {:verifier.code 0} true;
    $i33 := $and.i64($i32, 1);
    goto corral_source_split_8633;

  corral_source_split_8633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1164} $i34 := ldv__builtin_expect($i33, 0);
    call {:si_unique_call 1165} {:cexpr "tmp"} boogie_si_record_i64($i34);
    goto corral_source_split_8634;

  corral_source_split_8634:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, 0);
    goto corral_source_split_8635;

  corral_source_split_8635:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p2, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_8690;

  corral_source_split_8690:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p39, $sub.i32(0, 70));
    goto corral_source_split_8691;

  corral_source_split_8691:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb17:
    assume $i35 == 1;
    goto corral_source_split_8685;

  corral_source_split_8685:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_8686;

  corral_source_split_8686:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_8687;

  corral_source_split_8687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1170} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p3, $p38, .str.33, .str.32, 0);
    goto corral_source_split_8688;

  corral_source_split_8688:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb8:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i14, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb12;

  $bb13:
    assume $i18 == 1;
    goto corral_source_split_8637;

  corral_source_split_8637:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8638;

  corral_source_split_8638:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p60, .str.26);
    goto corral_source_split_8639;

  corral_source_split_8639:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8640;

  corral_source_split_8640:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p61, .str.32);
    goto corral_source_split_8641;

  corral_source_split_8641:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8642;

  corral_source_split_8642:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p62, .str.29);
    goto corral_source_split_8643;

  corral_source_split_8643:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8644;

  corral_source_split_8644:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p63, .str.35);
    goto corral_source_split_8645;

  corral_source_split_8645:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8646;

  corral_source_split_8646:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p64);
    goto corral_source_split_8647;

  corral_source_split_8647:
    assume {:verifier.code 0} true;
    $i66 := $load.i24($M.16, $p65);
    goto corral_source_split_8648;

  corral_source_split_8648:
    assume {:verifier.code 0} true;
    $i67 := $and.i24($i66, $sub.i24(0, 262144));
    goto corral_source_split_8649;

  corral_source_split_8649:
    assume {:verifier.code 0} true;
    $i68 := $or.i24($i67, 1014);
    goto corral_source_split_8650;

  corral_source_split_8650:
    assume {:verifier.code 0} true;
    $M.16 := $store.i24($M.16, $p65, $i68);
    goto corral_source_split_8651;

  corral_source_split_8651:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8652;

  corral_source_split_8652:
    assume {:verifier.code 0} true;
    $M.17 := $store.i8($M.17, $p69, 0);
    goto corral_source_split_8653;

  corral_source_split_8653:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8654;

  corral_source_split_8654:
    assume {:verifier.code 0} true;
    $i71 := $load.i8($M.17, $p70);
    goto corral_source_split_8655;

  corral_source_split_8655:
    assume {:verifier.code 0} true;
    $i72 := $zext.i8.i64($i71);
    goto corral_source_split_8656;

  corral_source_split_8656:
    assume {:verifier.code 0} true;
    $i73 := $and.i64($i72, 1);
    goto corral_source_split_8657;

  corral_source_split_8657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1166} $i74 := ldv__builtin_expect($i73, 0);
    call {:si_unique_call 1167} {:cexpr "tmp___1"} boogie_si_record_i64($i74);
    goto corral_source_split_8658;

  corral_source_split_8658:
    assume {:verifier.code 0} true;
    $i75 := $ne.i64($i74, 0);
    goto corral_source_split_8659;

  corral_source_split_8659:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p2, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_8708;

  corral_source_split_8708:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p79, $sub.i32(0, 75));
    goto corral_source_split_8709;

  corral_source_split_8709:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb24:
    assume $i75 == 1;
    goto corral_source_split_8703;

  corral_source_split_8703:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_8704;

  corral_source_split_8704:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.0, $p77);
    goto corral_source_split_8705;

  corral_source_split_8705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1173} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p5, $p78, .str.35, .str.32, 0);
    goto corral_source_split_8706;

  corral_source_split_8706:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb6:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i14, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb12;

  $bb15:
    assume $i19 == 1;
    goto corral_source_split_8661;

  corral_source_split_8661:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8662;

  corral_source_split_8662:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p40, .str.26);
    goto corral_source_split_8663;

  corral_source_split_8663:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8664;

  corral_source_split_8664:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p41, .str.32);
    goto corral_source_split_8665;

  corral_source_split_8665:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8666;

  corral_source_split_8666:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p42, .str.29);
    goto corral_source_split_8667;

  corral_source_split_8667:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8668;

  corral_source_split_8668:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p43, .str.34);
    goto corral_source_split_8669;

  corral_source_split_8669:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8670;

  corral_source_split_8670:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_8671;

  corral_source_split_8671:
    assume {:verifier.code 0} true;
    $i46 := $load.i24($M.16, $p45);
    goto corral_source_split_8672;

  corral_source_split_8672:
    assume {:verifier.code 0} true;
    $i47 := $and.i24($i46, $sub.i24(0, 262144));
    goto corral_source_split_8673;

  corral_source_split_8673:
    assume {:verifier.code 0} true;
    $i48 := $or.i24($i47, 1007);
    goto corral_source_split_8674;

  corral_source_split_8674:
    assume {:verifier.code 0} true;
    $M.16 := $store.i24($M.16, $p45, $i48);
    goto corral_source_split_8675;

  corral_source_split_8675:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8676;

  corral_source_split_8676:
    assume {:verifier.code 0} true;
    $M.17 := $store.i8($M.17, $p49, 0);
    goto corral_source_split_8677;

  corral_source_split_8677:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8678;

  corral_source_split_8678:
    assume {:verifier.code 0} true;
    $i51 := $load.i8($M.17, $p50);
    goto corral_source_split_8679;

  corral_source_split_8679:
    assume {:verifier.code 0} true;
    $i52 := $zext.i8.i64($i51);
    goto corral_source_split_8680;

  corral_source_split_8680:
    assume {:verifier.code 0} true;
    $i53 := $and.i64($i52, 1);
    goto corral_source_split_8681;

  corral_source_split_8681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1168} $i54 := ldv__builtin_expect($i53, 0);
    call {:si_unique_call 1169} {:cexpr "tmp___0"} boogie_si_record_i64($i54);
    goto corral_source_split_8682;

  corral_source_split_8682:
    assume {:verifier.code 0} true;
    $i55 := $ne.i64($i54, 0);
    goto corral_source_split_8683;

  corral_source_split_8683:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p2, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_8700;

  corral_source_split_8700:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p59, $sub.i32(0, 71));
    goto corral_source_split_8701;

  corral_source_split_8701:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb21:
    assume $i55 == 1;
    goto corral_source_split_8695;

  corral_source_split_8695:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_8696;

  corral_source_split_8696:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_8697;

  corral_source_split_8697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1172} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p4, $p58, .str.34, .str.32, 0);
    goto corral_source_split_8698;

  corral_source_split_8698:
    assume {:verifier.code 0} true;
    goto $bb23;
}



const check_atl_transfer: ref;

axiom check_atl_transfer == $sub.ref(0, 450487);

procedure check_atl_transfer($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $CurrAddr;



implementation check_atl_transfer($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $i12: i1;
  var $i13: i32;
  var $i14: i64;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i32;
  var $i41: i1;
  var $p42: ref;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i24;
  var $i52: i24;
  var $i53: i24;
  var $p54: ref;
  var $p55: ref;
  var $i56: i8;
  var $i57: i64;
  var $i58: i64;
  var $i59: i64;
  var $i60: i1;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i32;
  var $i66: i32;
  var $i67: i32;
  var $i68: i1;
  var $p69: ref;
  var $i70: i32;
  var $i71: i1;
  var $i37: i32;
  var vslice_dummy_var_76: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1216} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_9397;

  corral_source_split_9397:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p1);
    goto corral_source_split_9398;

  corral_source_split_9398:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_9399;

  corral_source_split_9399:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    call {:si_unique_call 1217} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i6);
    goto corral_source_split_9400;

  corral_source_split_9400:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_9401;

  corral_source_split_9401:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_9402;

  corral_source_split_9402:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_9403;

  corral_source_split_9403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1218} $i10 := ldv__builtin_expect($i9, 0);
    call {:si_unique_call 1219} {:cexpr "tmp"} boogie_si_record_i64($i10);
    goto corral_source_split_9404;

  corral_source_split_9404:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_9405;

  corral_source_split_9405:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i6, 0);
    goto corral_source_split_9410;

  corral_source_split_9410:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i12);
    goto corral_source_split_9411;

  corral_source_split_9411:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_9412;

  corral_source_split_9412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1221} vslice_dummy_var_76 := ldv__builtin_expect($i14, 0);
    goto corral_source_split_9413;

  corral_source_split_9413:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_9414;

  corral_source_split_9414:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_9415;

  corral_source_split_9415:
    assume {:verifier.code 0} true;
    $i18 := $and.i32($i17, 1073741824);
    goto corral_source_split_9416;

  corral_source_split_9416:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_9417;

  corral_source_split_9417:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_9455;

  corral_source_split_9455:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_9456;

  corral_source_split_9456:
    assume {:verifier.code 0} true;
    $i40 := $and.i32($i39, 268435456);
    goto corral_source_split_9457;

  corral_source_split_9457:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_9458;

  corral_source_split_9458:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_9494;

  corral_source_split_9494:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.0, $p64);
    goto corral_source_split_9495;

  corral_source_split_9495:
    assume {:verifier.code 0} true;
    $i66 := $lshr.i32($i65, 19);
    goto corral_source_split_9496;

  corral_source_split_9496:
    assume {:verifier.code 0} true;
    $i67 := $and.i32($i66, 15);
    goto corral_source_split_9497;

  corral_source_split_9497:
    assume {:verifier.code 0} true;
    $i68 := $eq.i32($i67, 0);
    goto corral_source_split_9498;

  corral_source_split_9498:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i68 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i37 := 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_9453;

  corral_source_split_9453:
    assume {:verifier.code 0} true;
    $r := $i37;
    return;

  $bb26:
    assume $i68 == 1;
    goto corral_source_split_9500;

  corral_source_split_9500:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_9501;

  corral_source_split_9501:
    assume {:verifier.code 0} true;
    $i70 := $load.i32($M.0, $p69);
    goto corral_source_split_9502;

  corral_source_split_9502:
    assume {:verifier.code 0} true;
    $i71 := $slt.i32($i70, 0);
    goto corral_source_split_9503;

  corral_source_split_9503:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i71 == 1);
    goto $bb28;

  $bb29:
    assume $i71 == 1;
    goto corral_source_split_9505;

  corral_source_split_9505:
    assume {:verifier.code 0} true;
    $i37 := 2;
    goto $bb15;

  $bb17:
    assume $i41 == 1;
    goto corral_source_split_9460;

  corral_source_split_9460:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_9461;

  corral_source_split_9461:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    goto corral_source_split_9462;

  corral_source_split_9462:
    assume {:verifier.code 0} true;
    $i44 := $slt.i32($i43, 0);
    goto corral_source_split_9463;

  corral_source_split_9463:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb19;

  $bb20:
    assume $i44 == 1;
    goto corral_source_split_9465;

  corral_source_split_9465:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9466;

  corral_source_split_9466:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p45, .str.26);
    goto corral_source_split_9467;

  corral_source_split_9467:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_9468;

  corral_source_split_9468:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p46, .str.36);
    goto corral_source_split_9469;

  corral_source_split_9469:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_9470;

  corral_source_split_9470:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p47, .str.29);
    goto corral_source_split_9471;

  corral_source_split_9471:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9472;

  corral_source_split_9472:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p48, .str.37);
    goto corral_source_split_9473;

  corral_source_split_9473:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_9474;

  corral_source_split_9474:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_9475;

  corral_source_split_9475:
    assume {:verifier.code 0} true;
    $i51 := $load.i24($M.16, $p50);
    goto corral_source_split_9476;

  corral_source_split_9476:
    assume {:verifier.code 0} true;
    $i52 := $and.i24($i51, $sub.i24(0, 262144));
    goto corral_source_split_9477;

  corral_source_split_9477:
    assume {:verifier.code 0} true;
    $i53 := $or.i24($i52, 1053);
    goto corral_source_split_9478;

  corral_source_split_9478:
    assume {:verifier.code 0} true;
    $M.16 := $store.i24($M.16, $p50, $i53);
    goto corral_source_split_9479;

  corral_source_split_9479:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9480;

  corral_source_split_9480:
    assume {:verifier.code 0} true;
    $M.17 := $store.i8($M.17, $p54, 0);
    goto corral_source_split_9481;

  corral_source_split_9481:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9482;

  corral_source_split_9482:
    assume {:verifier.code 0} true;
    $i56 := $load.i8($M.17, $p55);
    goto corral_source_split_9483;

  corral_source_split_9483:
    assume {:verifier.code 0} true;
    $i57 := $zext.i8.i64($i56);
    goto corral_source_split_9484;

  corral_source_split_9484:
    assume {:verifier.code 0} true;
    $i58 := $and.i64($i57, 1);
    goto corral_source_split_9485;

  corral_source_split_9485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1222} $i59 := ldv__builtin_expect($i58, 0);
    call {:si_unique_call 1223} {:cexpr "tmp___0"} boogie_si_record_i64($i59);
    goto corral_source_split_9486;

  corral_source_split_9486:
    assume {:verifier.code 0} true;
    $i60 := $ne.i64($i59, 0);
    goto corral_source_split_9487;

  corral_source_split_9487:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i37 := 2;
    goto $bb15;

  $bb22:
    assume $i60 == 1;
    goto corral_source_split_9489;

  corral_source_split_9489:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_9490;

  corral_source_split_9490:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_9491;

  corral_source_split_9491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1224} __dynamic_dev_dbg.ref.ref.ref($p3, $p63, .str.37);
    goto corral_source_split_9492;

  corral_source_split_9492:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb4:
    assume $i19 == 1;
    goto corral_source_split_9419;

  corral_source_split_9419:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_9420;

  corral_source_split_9420:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_9421;

  corral_source_split_9421:
    assume {:verifier.code 0} true;
    $i22 := $and.i32($i21, 536870912);
    goto corral_source_split_9422;

  corral_source_split_9422:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_9423;

  corral_source_split_9423:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i23 == 1);
    goto corral_source_split_9429;

  corral_source_split_9429:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_9430;

  corral_source_split_9430:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_9431;

  corral_source_split_9431:
    assume {:verifier.code 0} true;
    $i27 := $lshr.i32($i26, 23);
    goto corral_source_split_9432;

  corral_source_split_9432:
    assume {:verifier.code 0} true;
    $i28 := $and.i32($i27, 3);
    goto corral_source_split_9433;

  corral_source_split_9433:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_9434;

  corral_source_split_9434:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i29 == 1);
    goto corral_source_split_9440;

  corral_source_split_9440:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_9441;

  corral_source_split_9441:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_9442;

  corral_source_split_9442:
    assume {:verifier.code 0} true;
    $i33 := $and.i32($i32, 268435456);
    goto corral_source_split_9443;

  corral_source_split_9443:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_9444;

  corral_source_split_9444:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i34 == 1);
    goto corral_source_split_9450;

  corral_source_split_9450:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p2, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_9451;

  corral_source_split_9451:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, $sub.i32(0, 71));
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i37 := 3;
    goto $bb15;

  $bb12:
    assume $i34 == 1;
    goto corral_source_split_9446;

  corral_source_split_9446:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p2, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_9447;

  corral_source_split_9447:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p35, $sub.i32(0, 71));
    goto corral_source_split_9448;

  corral_source_split_9448:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb9:
    assume $i29 == 1;
    goto corral_source_split_9436;

  corral_source_split_9436:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_9437;

  corral_source_split_9437:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, $sub.i32(0, 32));
    goto corral_source_split_9438;

  corral_source_split_9438:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb6:
    assume $i23 == 1;
    goto corral_source_split_9425;

  corral_source_split_9425:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_9426;

  corral_source_split_9426:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, $sub.i32(0, 75));
    goto corral_source_split_9427;

  corral_source_split_9427:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_9407;

  corral_source_split_9407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1220} warn_slowpath_null(.str.29, 1030);
    goto corral_source_split_9408;

  corral_source_split_9408:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const priv_init: ref;

axiom priv_init == $sub.ref(0, 451519);

procedure priv_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.1, $M.32, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.30, $M.38, $M.36, $M.40, $M.23, $M.22, $M.25, $M.24, $M.27, $M.26, $M.29, $M.28, $M.2, $M.4, $M.6, $M.8, $M.3, $M.5, $M.7, $M.9, assertsPassed;



implementation priv_init($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var vslice_dummy_var_77: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1225} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_9507;

  corral_source_split_9507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1226} $p2 := hcd_to_priv($p0);
    goto corral_source_split_9508;

  corral_source_split_9508:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(16, 1));
    goto corral_source_split_9509;

  corral_source_split_9509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1227} vslice_dummy_var_77 := spinlock_check($p3);
    goto corral_source_split_9510;

  corral_source_split_9510:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_9511;

  corral_source_split_9511:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_9512;

  corral_source_split_9512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1228} __raw_spin_lock_init($p7, .str.43, $p1);
    goto corral_source_split_9513;

  corral_source_split_9513:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(2312, 1));
    goto corral_source_split_9515;

  corral_source_split_9515:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_9516;

  corral_source_split_9516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1229} INIT_LIST_HEAD($p9);
    goto corral_source_split_9517;

  corral_source_split_9517:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(2312, 1));
    goto corral_source_split_9519;

  corral_source_split_9519:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_9520;

  corral_source_split_9520:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p22, $mul.ref(1, 16));
    goto corral_source_split_9521;

  corral_source_split_9521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1230} INIT_LIST_HEAD($p23);
    goto corral_source_split_9522;

  corral_source_split_9522:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(2312, 1));
    goto corral_source_split_9542;

  corral_source_split_9542:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_9543;

  corral_source_split_9543:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($p25, $mul.ref(2, 16));
    goto corral_source_split_9544;

  corral_source_split_9544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1233} INIT_LIST_HEAD($p26);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(2360, 1));
    goto corral_source_split_9524;

  corral_source_split_9524:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, 1024);
    goto corral_source_split_9525;

  corral_source_split_9525:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_9526;

  corral_source_split_9526:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_9527;

  corral_source_split_9527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1231} $i13 := reg_read32($p12, 8);
    goto SeqInstr_289, SeqInstr_290;

  SeqInstr_290:
    assume assertsPassed;
    goto SeqInstr_291;

  SeqInstr_291:
    call {:si_unique_call 1232} {:cexpr "hcc_params"} boogie_si_record_i32($i13);
    goto corral_source_split_9528;

  corral_source_split_9528:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, 128);
    goto corral_source_split_9529;

  corral_source_split_9529:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_9530;

  corral_source_split_9530:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    goto corral_source_split_9536;

  corral_source_split_9536:
    assume {:verifier.code 0} true;
    $i17 := $lshr.i32($i13, 4);
    goto corral_source_split_9537;

  corral_source_split_9537:
    assume {:verifier.code 0} true;
    $i18 := $and.i32($i17, 7);
    goto corral_source_split_9538;

  corral_source_split_9538:
    assume {:verifier.code 0} true;
    $i19 := $add.i32($i18, 2);
    goto corral_source_split_9539;

  corral_source_split_9539:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(2364, 1));
    goto corral_source_split_9540;

  corral_source_split_9540:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p20, $i19);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_9532;

  corral_source_split_9532:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 2384)), $mul.ref(2364, 1));
    goto corral_source_split_9533;

  corral_source_split_9533:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, 8);
    goto corral_source_split_9534;

  corral_source_split_9534:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_289:
    assume !assertsPassed;
    return;
}



const isp1760_udc_get_frame: ref;

axiom isp1760_udc_get_frame == $sub.ref(0, 452551);

procedure isp1760_udc_get_frame($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.0, $M.32, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.30, $M.38, $M.36, $M.40, $M.23, $M.22, $M.25, $M.24, $M.27, $M.26, $M.29, $M.28, $CurrAddr, $M.2, $M.4, $M.6, $M.8, $M.3, $M.5, $M.7, $M.9, assertsPassed;



implementation isp1760_udc_get_frame($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9546;

  corral_source_split_9546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1234} $p1 := gadget_to_udc($p0);
    goto corral_source_split_9547;

  corral_source_split_9547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1235} $i2 := isp1760_udc_read($p1, 628);
    goto SeqInstr_292, SeqInstr_293;

  SeqInstr_293:
    assume assertsPassed;
    goto SeqInstr_294;

  SeqInstr_294:
    call {:si_unique_call 1236} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_9548;

  corral_source_split_9548:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 2047);
    goto corral_source_split_9549;

  corral_source_split_9549:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  SeqInstr_292:
    assume !assertsPassed;
    return;
}



const isp1760_udc_wakeup: ref;

axiom isp1760_udc_wakeup == $sub.ref(0, 453583);

procedure isp1760_udc_wakeup($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $CurrAddr;



implementation isp1760_udc_wakeup($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i24;
  var $i10: i24;
  var $i11: i24;
  var $p12: ref;
  var $p13: ref;
  var $i14: i8;
  var $i15: i64;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1237} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_9551;

  corral_source_split_9551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1238} $p2 := gadget_to_udc($p0);
    goto corral_source_split_9552;

  corral_source_split_9552:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9553;

  corral_source_split_9553:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p3, .str.26);
    goto corral_source_split_9554;

  corral_source_split_9554:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_9555;

  corral_source_split_9555:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p4, .str.111);
    goto corral_source_split_9556;

  corral_source_split_9556:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_9557;

  corral_source_split_9557:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p5, .str.55);
    goto corral_source_split_9558;

  corral_source_split_9558:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9559;

  corral_source_split_9559:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p6, .str.110);
    goto corral_source_split_9560;

  corral_source_split_9560:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_9561;

  corral_source_split_9561:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_9562;

  corral_source_split_9562:
    assume {:verifier.code 0} true;
    $i9 := $load.i24($M.16, $p8);
    goto corral_source_split_9563;

  corral_source_split_9563:
    assume {:verifier.code 0} true;
    $i10 := $and.i24($i9, $sub.i24(0, 262144));
    goto corral_source_split_9564;

  corral_source_split_9564:
    assume {:verifier.code 0} true;
    $i11 := $or.i24($i10, 1165);
    goto corral_source_split_9565;

  corral_source_split_9565:
    assume {:verifier.code 0} true;
    $M.16 := $store.i24($M.16, $p8, $i11);
    goto corral_source_split_9566;

  corral_source_split_9566:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9567;

  corral_source_split_9567:
    assume {:verifier.code 0} true;
    $M.17 := $store.i8($M.17, $p12, 0);
    goto corral_source_split_9568;

  corral_source_split_9568:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9569;

  corral_source_split_9569:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.17, $p13);
    goto corral_source_split_9570;

  corral_source_split_9570:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i64($i14);
    goto corral_source_split_9571;

  corral_source_split_9571:
    assume {:verifier.code 0} true;
    $i16 := $and.i64($i15, 1);
    goto corral_source_split_9572;

  corral_source_split_9572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1239} $i17 := ldv__builtin_expect($i16, 0);
    call {:si_unique_call 1240} {:cexpr "tmp___0"} boogie_si_record_i64($i17);
    goto corral_source_split_9573;

  corral_source_split_9573:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_9574;

  corral_source_split_9574:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $sub.i32(0, 524);
    return;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_9576;

  corral_source_split_9576:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 3640)), $mul.ref(0, 1));
    goto corral_source_split_9577;

  corral_source_split_9577:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_9578;

  corral_source_split_9578:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 6056)), $mul.ref(0, 1));
    goto corral_source_split_9579;

  corral_source_split_9579:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_9580;

  corral_source_split_9580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1241} __dynamic_dev_dbg.ref.ref.ref.ref($p1, $p22, .str.110, .str.111);
    goto corral_source_split_9581;

  corral_source_split_9581:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const isp1760_udc_set_selfpowered: ref;

axiom isp1760_udc_set_selfpowered == $sub.ref(0, 454615);

procedure isp1760_udc_set_selfpowered($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation isp1760_udc_set_selfpowered($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i1;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1242} {:cexpr "isp1760_udc_set_selfpowered:arg:is_selfpowered"} boogie_si_record_i32($i1);
    goto corral_source_split_9583;

  corral_source_split_9583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1243} $p2 := gadget_to_udc($p0);
    goto corral_source_split_9584;

  corral_source_split_9584:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i1, 0);
    goto corral_source_split_9585;

  corral_source_split_9585:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_9594;

  corral_source_split_9594:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 3640)), $mul.ref(3636, 1));
    goto corral_source_split_9595;

  corral_source_split_9595:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_9596;

  corral_source_split_9596:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, $sub.i32(0, 2));
    goto corral_source_split_9597;

  corral_source_split_9597:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 3640)), $mul.ref(3636, 1));
    goto corral_source_split_9598;

  corral_source_split_9598:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, $i10);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_9587;

  corral_source_split_9587:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 3640)), $mul.ref(3636, 1));
    goto corral_source_split_9588;

  corral_source_split_9588:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_9589;

  corral_source_split_9589:
    assume {:verifier.code 0} true;
    $i6 := $or.i32($i5, 1);
    goto corral_source_split_9590;

  corral_source_split_9590:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 3640)), $mul.ref(3636, 1));
    goto corral_source_split_9591;

  corral_source_split_9591:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, $i6);
    goto corral_source_split_9592;

  corral_source_split_9592:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const isp1760_udc_pullup: ref;

axiom isp1760_udc_pullup == $sub.ref(0, 455647);

procedure isp1760_udc_pullup($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation isp1760_udc_pullup($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i1;
  var $i6: i1;
  var $p7: ref;
  var $i8: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1244} {:cexpr "isp1760_udc_pullup:arg:is_on"} boogie_si_record_i32($i1);
    goto corral_source_split_9600;

  corral_source_split_9600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1245} $p2 := gadget_to_udc($p0);
    goto corral_source_split_9601;

  corral_source_split_9601:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 3640)), $mul.ref(0, 1));
    goto corral_source_split_9602;

  corral_source_split_9602:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_9603;

  corral_source_split_9603:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i1, 0);
    goto corral_source_split_9604;

  corral_source_split_9604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1246} isp1760_set_pullup($p4, $i5);
    goto corral_source_split_9605;

  corral_source_split_9605:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i1, 0);
    goto corral_source_split_9606;

  corral_source_split_9606:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 3640)), $mul.ref(3632, 1));
    goto corral_source_split_9607;

  corral_source_split_9607:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i8($i6);
    goto corral_source_split_9608;

  corral_source_split_9608:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p7, $i8);
    goto corral_source_split_9609;

  corral_source_split_9609:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const isp1760_udc_start: ref;

axiom isp1760_udc_start == $sub.ref(0, 456679);

procedure isp1760_udc_start($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.30, $M.0, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $CurrAddr;



implementation isp1760_udc_start($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i24;
  var $i31: i24;
  var $i32: i24;
  var $p33: ref;
  var $p34: ref;
  var $i35: i8;
  var $i36: i64;
  var $i37: i64;
  var $i38: i64;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i24;
  var $i56: i24;
  var $i57: i24;
  var $p58: ref;
  var $p59: ref;
  var $i60: i8;
  var $i61: i64;
  var $i62: i64;
  var $i63: i64;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1247} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1248} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_9611;

  corral_source_split_9611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1249} $p4 := gadget_to_udc($p0);
    goto corral_source_split_9612;

  corral_source_split_9612:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(8, 1));
    goto corral_source_split_9613;

  corral_source_split_9613:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_9614;

  corral_source_split_9614:
    assume {:verifier.code 0} true;
    $i7 := $ule.i32($i6, 1);
    goto corral_source_split_9615;

  corral_source_split_9615:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1251} ldv_spin_lock();
    goto corral_source_split_9626;

  corral_source_split_9626:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 3640)), $mul.ref(32, 1));
    goto corral_source_split_9627;

  corral_source_split_9627:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_9628;

  corral_source_split_9628:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_9629;

  corral_source_split_9629:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_9630;

  corral_source_split_9630:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p4, $mul.ref(0, 3640)), $mul.ref(32, 1));
    goto corral_source_split_9641;

  corral_source_split_9641:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p22, $p1);
    goto corral_source_split_9642;

  corral_source_split_9642:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p4, $mul.ref(0, 3640)), $mul.ref(1624, 1));
    goto corral_source_split_9643;

  corral_source_split_9643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1254} spin_unlock_irqrestore($p23, $u0);
    goto corral_source_split_9644;

  corral_source_split_9644:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9645;

  corral_source_split_9645:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p24, .str.26);
    goto corral_source_split_9646;

  corral_source_split_9646:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_9647;

  corral_source_split_9647:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p25, .str.106);
    goto corral_source_split_9648;

  corral_source_split_9648:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_9649;

  corral_source_split_9649:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p26, .str.55);
    goto corral_source_split_9650;

  corral_source_split_9650:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9651;

  corral_source_split_9651:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p27, .str.107);
    goto corral_source_split_9652;

  corral_source_split_9652:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_9653;

  corral_source_split_9653:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_9654;

  corral_source_split_9654:
    assume {:verifier.code 0} true;
    $i30 := $load.i24($M.16, $p29);
    goto corral_source_split_9655;

  corral_source_split_9655:
    assume {:verifier.code 0} true;
    $i31 := $and.i24($i30, $sub.i24(0, 262144));
    goto corral_source_split_9656;

  corral_source_split_9656:
    assume {:verifier.code 0} true;
    $i32 := $or.i24($i31, 1217);
    goto corral_source_split_9657;

  corral_source_split_9657:
    assume {:verifier.code 0} true;
    $M.16 := $store.i24($M.16, $p29, $i32);
    goto corral_source_split_9658;

  corral_source_split_9658:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9659;

  corral_source_split_9659:
    assume {:verifier.code 0} true;
    $M.17 := $store.i8($M.17, $p33, 0);
    goto corral_source_split_9660;

  corral_source_split_9660:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9661;

  corral_source_split_9661:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.17, $p34);
    goto corral_source_split_9662;

  corral_source_split_9662:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i64($i35);
    goto corral_source_split_9663;

  corral_source_split_9663:
    assume {:verifier.code 0} true;
    $i37 := $and.i64($i36, 1);
    goto corral_source_split_9664;

  corral_source_split_9664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1255} $i38 := ldv__builtin_expect($i37, 0);
    call {:si_unique_call 1256} {:cexpr "tmp___0"} boogie_si_record_i64($i38);
    goto corral_source_split_9665;

  corral_source_split_9665:
    assume {:verifier.code 0} true;
    $i39 := $ne.i64($i38, 0);
    goto corral_source_split_9666;

  corral_source_split_9666:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p4, $mul.ref(0, 3640)), $mul.ref(3636, 1));
    goto corral_source_split_9677;

  corral_source_split_9677:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p46, 0);
    goto corral_source_split_9678;

  corral_source_split_9678:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p4, $mul.ref(0, 3640)), $mul.ref(3632, 1));
    goto corral_source_split_9679;

  corral_source_split_9679:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p47, 1);
    goto corral_source_split_9680;

  corral_source_split_9680:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p4, $mul.ref(0, 3640)), $mul.ref(40, 1));
    goto corral_source_split_9681;

  corral_source_split_9681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1258} usb_gadget_set_state($p48, 1);
    goto corral_source_split_9682;

  corral_source_split_9682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1259} isp1760_udc_write($p4, 524, 8);
    goto corral_source_split_9683;

  corral_source_split_9683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1260} isp1760_udc_init_hw($p4);
    goto corral_source_split_9684;

  corral_source_split_9684:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9685;

  corral_source_split_9685:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p49, .str.26);
    goto corral_source_split_9686;

  corral_source_split_9686:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_9687;

  corral_source_split_9687:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p50, .str.106);
    goto corral_source_split_9688;

  corral_source_split_9688:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_9689;

  corral_source_split_9689:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p51, .str.55);
    goto corral_source_split_9690;

  corral_source_split_9690:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9691;

  corral_source_split_9691:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p52, .str.108);
    goto corral_source_split_9692;

  corral_source_split_9692:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_9693;

  corral_source_split_9693:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p53);
    goto corral_source_split_9694;

  corral_source_split_9694:
    assume {:verifier.code 0} true;
    $i55 := $load.i24($M.16, $p54);
    goto corral_source_split_9695;

  corral_source_split_9695:
    assume {:verifier.code 0} true;
    $i56 := $and.i24($i55, $sub.i24(0, 262144));
    goto corral_source_split_9696;

  corral_source_split_9696:
    assume {:verifier.code 0} true;
    $i57 := $or.i24($i56, 1230);
    goto corral_source_split_9697;

  corral_source_split_9697:
    assume {:verifier.code 0} true;
    $M.16 := $store.i24($M.16, $p54, $i57);
    goto corral_source_split_9698;

  corral_source_split_9698:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9699;

  corral_source_split_9699:
    assume {:verifier.code 0} true;
    $M.17 := $store.i8($M.17, $p58, 0);
    goto corral_source_split_9700;

  corral_source_split_9700:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9701;

  corral_source_split_9701:
    assume {:verifier.code 0} true;
    $i60 := $load.i8($M.17, $p59);
    goto corral_source_split_9702;

  corral_source_split_9702:
    assume {:verifier.code 0} true;
    $i61 := $zext.i8.i64($i60);
    goto corral_source_split_9703;

  corral_source_split_9703:
    assume {:verifier.code 0} true;
    $i62 := $and.i64($i61, 1);
    goto corral_source_split_9704;

  corral_source_split_9704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1261} $i63 := ldv__builtin_expect($i62, 0);
    call {:si_unique_call 1262} {:cexpr "tmp___1"} boogie_si_record_i64($i63);
    goto corral_source_split_9705;

  corral_source_split_9705:
    assume {:verifier.code 0} true;
    $i64 := $ne.i64($i63, 0);
    goto corral_source_split_9706;

  corral_source_split_9706:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9624;

  corral_source_split_9624:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb11:
    assume $i64 == 1;
    goto corral_source_split_9708;

  corral_source_split_9708:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p4, $mul.ref(0, 3640)), $mul.ref(0, 1));
    goto corral_source_split_9709;

  corral_source_split_9709:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_9710;

  corral_source_split_9710:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p66, $mul.ref(0, 6056)), $mul.ref(0, 1));
    goto corral_source_split_9711;

  corral_source_split_9711:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p67);
    goto corral_source_split_9712;

  corral_source_split_9712:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(0, 1));
    goto corral_source_split_9713;

  corral_source_split_9713:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.0, $p69);
    goto corral_source_split_9714;

  corral_source_split_9714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1263} __dynamic_dev_dbg.ref.ref.ref.ref($p3, $p68, .str.108, $p70);
    goto corral_source_split_9715;

  corral_source_split_9715:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i39 == 1;
    goto corral_source_split_9668;

  corral_source_split_9668:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p4, $mul.ref(0, 3640)), $mul.ref(0, 1));
    goto corral_source_split_9669;

  corral_source_split_9669:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_9670;

  corral_source_split_9670:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 6056)), $mul.ref(0, 1));
    goto corral_source_split_9671;

  corral_source_split_9671:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_9672;

  corral_source_split_9672:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(0, 1));
    goto corral_source_split_9673;

  corral_source_split_9673:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_9674;

  corral_source_split_9674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1257} __dynamic_dev_dbg.ref.ref.ref.ref($p2, $p43, .str.107, $p45);
    goto corral_source_split_9675;

  corral_source_split_9675:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_9632;

  corral_source_split_9632:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p4, $mul.ref(0, 3640)), $mul.ref(0, 1));
    goto corral_source_split_9633;

  corral_source_split_9633:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_9634;

  corral_source_split_9634:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 6056)), $mul.ref(0, 1));
    goto corral_source_split_9635;

  corral_source_split_9635:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_9636;

  corral_source_split_9636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1252} dev_err.ref.ref($p20, .str.105);
    goto corral_source_split_9637;

  corral_source_split_9637:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p4, $mul.ref(0, 3640)), $mul.ref(1624, 1));
    goto corral_source_split_9638;

  corral_source_split_9638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1253} spin_unlock_irqrestore($p21, $u0);
    goto corral_source_split_9639;

  corral_source_split_9639:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 16);
    goto $bb3;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_9617;

  corral_source_split_9617:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 3640)), $mul.ref(0, 1));
    goto corral_source_split_9618;

  corral_source_split_9618:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_9619;

  corral_source_split_9619:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 6056)), $mul.ref(0, 1));
    goto corral_source_split_9620;

  corral_source_split_9620:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_9621;

  corral_source_split_9621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1250} dev_err.ref.ref($p11, .str.104);
    goto corral_source_split_9622;

  corral_source_split_9622:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 22);
    goto $bb3;
}



const isp1760_udc_stop: ref;

axiom isp1760_udc_stop == $sub.ref(0, 457711);

procedure isp1760_udc_stop($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.30, $M.0, $M.22, $M.24, $M.26, $M.28, $CurrAddr;



implementation isp1760_udc_stop($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i24;
  var $i10: i24;
  var $i11: i24;
  var $p12: ref;
  var $p13: ref;
  var $i14: i8;
  var $i15: i64;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p25: ref;
  var $p26: ref;
  var vslice_dummy_var_78: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1264} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_9717;

  corral_source_split_9717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1265} $p2 := gadget_to_udc($p0);
    goto corral_source_split_9718;

  corral_source_split_9718:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9719;

  corral_source_split_9719:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p3, .str.26);
    goto corral_source_split_9720;

  corral_source_split_9720:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_9721;

  corral_source_split_9721:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p4, .str.109);
    goto corral_source_split_9722;

  corral_source_split_9722:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_9723;

  corral_source_split_9723:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p5, .str.55);
    goto corral_source_split_9724;

  corral_source_split_9724:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9725;

  corral_source_split_9725:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p6, .str.110);
    goto corral_source_split_9726;

  corral_source_split_9726:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_9727;

  corral_source_split_9727:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_9728;

  corral_source_split_9728:
    assume {:verifier.code 0} true;
    $i9 := $load.i24($M.16, $p8);
    goto corral_source_split_9729;

  corral_source_split_9729:
    assume {:verifier.code 0} true;
    $i10 := $and.i24($i9, $sub.i24(0, 262144));
    goto corral_source_split_9730;

  corral_source_split_9730:
    assume {:verifier.code 0} true;
    $i11 := $or.i24($i10, 1240);
    goto corral_source_split_9731;

  corral_source_split_9731:
    assume {:verifier.code 0} true;
    $M.16 := $store.i24($M.16, $p8, $i11);
    goto corral_source_split_9732;

  corral_source_split_9732:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9733;

  corral_source_split_9733:
    assume {:verifier.code 0} true;
    $M.17 := $store.i8($M.17, $p12, 0);
    goto corral_source_split_9734;

  corral_source_split_9734:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9735;

  corral_source_split_9735:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.17, $p13);
    goto corral_source_split_9736;

  corral_source_split_9736:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i64($i14);
    goto corral_source_split_9737;

  corral_source_split_9737:
    assume {:verifier.code 0} true;
    $i16 := $and.i64($i15, 1);
    goto corral_source_split_9738;

  corral_source_split_9738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1266} $i17 := ldv__builtin_expect($i16, 0);
    call {:si_unique_call 1267} {:cexpr "tmp___0"} boogie_si_record_i64($i17);
    goto corral_source_split_9739;

  corral_source_split_9739:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_9740;

  corral_source_split_9740:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 3640)), $mul.ref(1696, 1));
    goto corral_source_split_9749;

  corral_source_split_9749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1269} vslice_dummy_var_78 := ldv_del_timer_sync_104($p23);
    goto corral_source_split_9750;

  corral_source_split_9750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1270} isp1760_udc_write($p2, 524, 0);
    goto corral_source_split_9751;

  corral_source_split_9751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1271} ldv_spin_lock();
    goto corral_source_split_9752;

  corral_source_split_9752:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 3640)), $mul.ref(32, 1));
    goto corral_source_split_9753;

  corral_source_split_9753:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p25, $0.ref);
    goto corral_source_split_9754;

  corral_source_split_9754:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 3640)), $mul.ref(1624, 1));
    goto corral_source_split_9755;

  corral_source_split_9755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1272} spin_unlock_irqrestore($p26, $u0);
    goto corral_source_split_9756;

  corral_source_split_9756:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_9742;

  corral_source_split_9742:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 3640)), $mul.ref(0, 1));
    goto corral_source_split_9743;

  corral_source_split_9743:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_9744;

  corral_source_split_9744:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 6056)), $mul.ref(0, 1));
    goto corral_source_split_9745;

  corral_source_split_9745:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_9746;

  corral_source_split_9746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1268} __dynamic_dev_dbg.ref.ref.ref.ref($p1, $p22, .str.110, .str.109);
    goto corral_source_split_9747;

  corral_source_split_9747:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const gadget_to_udc: ref;

axiom gadget_to_udc == $sub.ref(0, 458743);

procedure gadget_to_udc($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation gadget_to_udc($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9758;

  corral_source_split_9758:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_9759;

  corral_source_split_9759:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 40), 3640));
    goto corral_source_split_9760;

  corral_source_split_9760:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_del_timer_sync_104: ref;

axiom ldv_del_timer_sync_104 == $sub.ref(0, 459775);

procedure ldv_del_timer_sync_104($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.22, $M.24, $M.26, $M.28;



implementation ldv_del_timer_sync_104($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9762;

  corral_source_split_9762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1273} $i1 := del_timer_sync($p0);
    call {:si_unique_call 1274} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_9763;

  corral_source_split_9763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1275} disable_suitable_timer_3($p0);
    goto corral_source_split_9764;

  corral_source_split_9764:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const del_timer_sync: ref;

axiom del_timer_sync == $sub.ref(0, 460807);

procedure del_timer_sync($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation del_timer_sync($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9766;

  corral_source_split_9766:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1276} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1277} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_9767;

  corral_source_split_9767:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const isp1760_ep_enable: ref;

axiom isp1760_ep_enable == $sub.ref(0, 461839);

procedure isp1760_ep_enable($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.30, $M.0, $CurrAddr;



implementation isp1760_ep_enable($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i24;
  var $i15: i24;
  var $i16: i24;
  var $p17: ref;
  var $p18: ref;
  var $i19: i8;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i8;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i8;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $i39: i8;
  var $i40: i32;
  var $p41: ref;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $i45: i16;
  var $i46: i32;
  var $p47: ref;
  var $i48: i16;
  var $i49: i32;
  var $i50: i1;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i24;
  var $i58: i24;
  var $i59: i24;
  var $p60: ref;
  var $p61: ref;
  var $i62: i8;
  var $i63: i64;
  var $i64: i64;
  var $i65: i64;
  var $i66: i1;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $i72: i8;
  var $i73: i32;
  var $p74: ref;
  var $i75: i8;
  var $i76: i32;
  var $p77: ref;
  var $i78: i32;
  var $p79: ref;
  var $i80: i16;
  var $i81: i32;
  var $p82: ref;
  var $i83: i16;
  var $i84: i32;
  var $i86: i32;
  var $i87: i1;
  var $i88: i1;
  var $i89: i1;
  var $i90: i1;
  var $i91: i1;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $i99: i24;
  var $i100: i24;
  var $i101: i24;
  var $p102: ref;
  var $p103: ref;
  var $i104: i8;
  var $i105: i64;
  var $i106: i64;
  var $i107: i64;
  var $i108: i1;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $i92: i32;
  var $p113: ref;
  var $p114: ref;
  var $i115: i16;
  var $i116: i32;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $i122: i32;
  var $p123: ref;
  var $i124: i32;
  var $i125: i32;
  var $p126: ref;
  var $i85: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1278} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1279} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1280} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_9769;

  corral_source_split_9769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1281} $p5 := ep_to_udc_ep($p0);
    goto corral_source_split_9770;

  corral_source_split_9770:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 120)), $mul.ref(0, 1));
    goto corral_source_split_9771;

  corral_source_split_9771:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_9772;

  corral_source_split_9772:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9773;

  corral_source_split_9773:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p8, .str.26);
    goto corral_source_split_9774;

  corral_source_split_9774:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_9775;

  corral_source_split_9775:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p9, .str.127);
    goto corral_source_split_9776;

  corral_source_split_9776:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_9777;

  corral_source_split_9777:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p10, .str.55);
    goto corral_source_split_9778;

  corral_source_split_9778:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9779;

  corral_source_split_9779:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p11, .str.110);
    goto corral_source_split_9780;

  corral_source_split_9780:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_9781;

  corral_source_split_9781:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_9782;

  corral_source_split_9782:
    assume {:verifier.code 0} true;
    $i14 := $load.i24($M.16, $p13);
    goto corral_source_split_9783;

  corral_source_split_9783:
    assume {:verifier.code 0} true;
    $i15 := $and.i24($i14, $sub.i24(0, 262144));
    goto corral_source_split_9784;

  corral_source_split_9784:
    assume {:verifier.code 0} true;
    $i16 := $or.i24($i15, 718);
    goto corral_source_split_9785;

  corral_source_split_9785:
    assume {:verifier.code 0} true;
    $M.16 := $store.i24($M.16, $p13, $i16);
    goto corral_source_split_9786;

  corral_source_split_9786:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9787;

  corral_source_split_9787:
    assume {:verifier.code 0} true;
    $M.17 := $store.i8($M.17, $p17, 0);
    goto corral_source_split_9788;

  corral_source_split_9788:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9789;

  corral_source_split_9789:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.17, $p18);
    goto corral_source_split_9790;

  corral_source_split_9790:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i64($i19);
    goto corral_source_split_9791;

  corral_source_split_9791:
    assume {:verifier.code 0} true;
    $i21 := $and.i64($i20, 1);
    goto corral_source_split_9792;

  corral_source_split_9792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1282} $i22 := ldv__builtin_expect($i21, 0);
    call {:si_unique_call 1283} {:cexpr "tmp___0"} boogie_si_record_i64($i22);
    goto corral_source_split_9793;

  corral_source_split_9793:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_9794;

  corral_source_split_9794:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 10)), $mul.ref(1, 1));
    goto corral_source_split_9805;

  corral_source_split_9805:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.0, $p30);
    goto corral_source_split_9806;

  corral_source_split_9806:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i31);
    goto corral_source_split_9807;

  corral_source_split_9807:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 5);
    goto corral_source_split_9808;

  corral_source_split_9808:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb4, $bb6;

  $bb6:
    assume !($i33 == 1);
    goto corral_source_split_9833;

  corral_source_split_9833:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_9834;

  corral_source_split_9834:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.0, $p34);
    goto corral_source_split_9835;

  corral_source_split_9835:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i35);
    goto corral_source_split_9836;

  corral_source_split_9836:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i36, 0);
    goto corral_source_split_9837;

  corral_source_split_9837:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i37 == 1);
    goto corral_source_split_9839;

  corral_source_split_9839:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p1, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_9840;

  corral_source_split_9840:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.0, $p38);
    goto corral_source_split_9841;

  corral_source_split_9841:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i39);
    goto corral_source_split_9842;

  corral_source_split_9842:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p5, $mul.ref(0, 120)), $mul.ref(88, 1));
    goto corral_source_split_9843;

  corral_source_split_9843:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_9844;

  corral_source_split_9844:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i40, $i42);
    goto corral_source_split_9845;

  corral_source_split_9845:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i43 == 1);
    goto corral_source_split_9847;

  corral_source_split_9847:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p1, $mul.ref(0, 10)), $mul.ref(4, 1));
    goto corral_source_split_9848;

  corral_source_split_9848:
    assume {:verifier.code 0} true;
    $i45 := $load.i16($M.0, $p44);
    goto corral_source_split_9849;

  corral_source_split_9849:
    assume {:verifier.code 0} true;
    $i46 := $zext.i16.i32($i45);
    goto corral_source_split_9850;

  corral_source_split_9850:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_9851;

  corral_source_split_9851:
    assume {:verifier.code 0} true;
    $i48 := $load.i16($M.0, $p47);
    goto corral_source_split_9852;

  corral_source_split_9852:
    assume {:verifier.code 0} true;
    $i49 := $zext.i16.i32($i48);
    goto corral_source_split_9853;

  corral_source_split_9853:
    assume {:verifier.code 0} true;
    $i50 := $sgt.i32($i46, $i49);
    goto corral_source_split_9854;

  corral_source_split_9854:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1288} $i86 := usb_endpoint_type($p1);
    call {:si_unique_call 1289} {:cexpr "tmp___2"} boogie_si_record_i32($i86);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i87 := $slt.i32($i86, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i87} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    $i88 := $slt.i32($i86, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    $i89 := $eq.i32($i86, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i89 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9914;

  corral_source_split_9914:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p93, .str.26);
    goto corral_source_split_9915;

  corral_source_split_9915:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_9916;

  corral_source_split_9916:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p94, .str.127);
    goto corral_source_split_9917;

  corral_source_split_9917:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_9918;

  corral_source_split_9918:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p95, .str.55);
    goto corral_source_split_9919;

  corral_source_split_9919:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9920;

  corral_source_split_9920:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p96, .str.129);
    goto corral_source_split_9921;

  corral_source_split_9921:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_9922;

  corral_source_split_9922:
    assume {:verifier.code 0} true;
    $p98 := $bitcast.ref.ref($p97);
    goto corral_source_split_9923;

  corral_source_split_9923:
    assume {:verifier.code 0} true;
    $i99 := $load.i24($M.16, $p98);
    goto corral_source_split_9924;

  corral_source_split_9924:
    assume {:verifier.code 0} true;
    $i100 := $and.i24($i99, $sub.i24(0, 262144));
    goto corral_source_split_9925;

  corral_source_split_9925:
    assume {:verifier.code 0} true;
    $i101 := $or.i24($i100, 749);
    goto corral_source_split_9926;

  corral_source_split_9926:
    assume {:verifier.code 0} true;
    $M.16 := $store.i24($M.16, $p98, $i101);
    goto corral_source_split_9927;

  corral_source_split_9927:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9928;

  corral_source_split_9928:
    assume {:verifier.code 0} true;
    $M.17 := $store.i8($M.17, $p102, 0);
    goto corral_source_split_9929;

  corral_source_split_9929:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9930;

  corral_source_split_9930:
    assume {:verifier.code 0} true;
    $i104 := $load.i8($M.17, $p103);
    goto corral_source_split_9931;

  corral_source_split_9931:
    assume {:verifier.code 0} true;
    $i105 := $zext.i8.i64($i104);
    goto corral_source_split_9932;

  corral_source_split_9932:
    assume {:verifier.code 0} true;
    $i106 := $and.i64($i105, 1);
    goto corral_source_split_9933;

  corral_source_split_9933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1296} $i107 := ldv__builtin_expect($i106, 0);
    call {:si_unique_call 1297} {:cexpr "tmp___3"} boogie_si_record_i64($i107);
    goto corral_source_split_9934;

  corral_source_split_9934:
    assume {:verifier.code 0} true;
    $i108 := $ne.i64($i107, 0);
    goto corral_source_split_9935;

  corral_source_split_9935:
    assume {:verifier.code 0} true;
    assume {:branchcond $i108} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i85 := $sub.i32(0, 22);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_9877;

  corral_source_split_9877:
    assume {:verifier.code 0} true;
    $r := $i85;
    return;

  $bb32:
    assume $i108 == 1;
    goto corral_source_split_9937;

  corral_source_split_9937:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p7, $mul.ref(0, 3640)), $mul.ref(0, 1));
    goto corral_source_split_9938;

  corral_source_split_9938:
    assume {:verifier.code 0} true;
    $p110 := $load.ref($M.0, $p109);
    goto corral_source_split_9939;

  corral_source_split_9939:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p110, $mul.ref(0, 6056)), $mul.ref(0, 1));
    goto corral_source_split_9940;

  corral_source_split_9940:
    assume {:verifier.code 0} true;
    $p112 := $load.ref($M.0, $p111);
    goto corral_source_split_9941;

  corral_source_split_9941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1298} __dynamic_dev_dbg.ref.ref.ref.ref($p4, $p112, .str.129, .str.127);
    goto corral_source_split_9942;

  corral_source_split_9942:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb23:
    assume $i89 == 1;
    goto corral_source_split_9881;

  corral_source_split_9881:
    assume {:verifier.code 0} true;
    $i92 := 3;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_9887;

  corral_source_split_9887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1290} ldv_spin_lock();
    goto corral_source_split_9888;

  corral_source_split_9888:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p5, $mul.ref(0, 120)), $mul.ref(104, 1));
    goto corral_source_split_9889;

  corral_source_split_9889:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p113, $p1);
    goto corral_source_split_9890;

  corral_source_split_9890:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p1, $mul.ref(0, 10)), $mul.ref(4, 1));
    goto corral_source_split_9891;

  corral_source_split_9891:
    assume {:verifier.code 0} true;
    $i115 := $load.i16($M.0, $p114);
    goto corral_source_split_9892;

  corral_source_split_9892:
    assume {:verifier.code 0} true;
    $i116 := $zext.i16.i32($i115);
    goto corral_source_split_9893;

  corral_source_split_9893:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p5, $mul.ref(0, 120)), $mul.ref(92, 1));
    goto corral_source_split_9894;

  corral_source_split_9894:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p117, $i116);
    goto corral_source_split_9895;

  corral_source_split_9895:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p5, $mul.ref(0, 120)), $mul.ref(112, 1));
    goto corral_source_split_9896;

  corral_source_split_9896:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p118, 0);
    goto corral_source_split_9897;

  corral_source_split_9897:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p5, $mul.ref(0, 120)), $mul.ref(113, 1));
    goto corral_source_split_9898;

  corral_source_split_9898:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p119, 0);
    goto corral_source_split_9899;

  corral_source_split_9899:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p5, $mul.ref(0, 120)), $mul.ref(114, 1));
    goto corral_source_split_9900;

  corral_source_split_9900:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p120, 0);
    goto corral_source_split_9901;

  corral_source_split_9901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1291} isp1760_udc_select_ep($p5);
    goto corral_source_split_9902;

  corral_source_split_9902:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p5, $mul.ref(0, 120)), $mul.ref(92, 1));
    goto corral_source_split_9903;

  corral_source_split_9903:
    assume {:verifier.code 0} true;
    $i122 := $load.i32($M.0, $p121);
    goto corral_source_split_9904;

  corral_source_split_9904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1292} isp1760_udc_write($p7, 516, $i122);
    goto corral_source_split_9905;

  corral_source_split_9905:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p5, $mul.ref(0, 120)), $mul.ref(92, 1));
    goto corral_source_split_9906;

  corral_source_split_9906:
    assume {:verifier.code 0} true;
    $i124 := $load.i32($M.0, $p123);
    goto corral_source_split_9907;

  corral_source_split_9907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1293} isp1760_udc_write($p7, 540, $i124);
    goto corral_source_split_9908;

  corral_source_split_9908:
    assume {:verifier.code 0} true;
    $i125 := $or.i32($i92, 8);
    goto corral_source_split_9909;

  corral_source_split_9909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1294} isp1760_udc_write($p7, 520, $i125);
    goto corral_source_split_9910;

  corral_source_split_9910:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p7, $mul.ref(0, 3640)), $mul.ref(1624, 1));
    goto corral_source_split_9911;

  corral_source_split_9911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1295} spin_unlock_irqrestore($p126, $u0);
    goto corral_source_split_9912;

  corral_source_split_9912:
    assume {:verifier.code 0} true;
    $i85 := 0;
    goto $bb16;

  $bb21:
    assume $i88 == 1;
    goto corral_source_split_9879;

  corral_source_split_9879:
    assume {:verifier.code 0} true;
    $i92 := 2;
    goto $bb30;

  $bb19:
    assume $i87 == 1;
    assume {:verifier.code 0} true;
    $i90 := $slt.i32($i86, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i90 == 1);
    goto corral_source_split_9883;

  corral_source_split_9883:
    assume {:verifier.code 0} true;
    $i92 := 1;
    goto $bb30;

  $bb26:
    assume $i90 == 1;
    assume {:verifier.code 0} true;
    $i91 := $eq.i32($i86, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i91} true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i91 == 1);
    goto $bb25;

  $bb28:
    assume $i91 == 1;
    goto corral_source_split_9885;

  corral_source_split_9885:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i50 == 1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9810;

  corral_source_split_9810:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p51, .str.26);
    goto corral_source_split_9811;

  corral_source_split_9811:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_9812;

  corral_source_split_9812:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p52, .str.127);
    goto corral_source_split_9813;

  corral_source_split_9813:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_9814;

  corral_source_split_9814:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p53, .str.55);
    goto corral_source_split_9815;

  corral_source_split_9815:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9816;

  corral_source_split_9816:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p54, .str.128);
    goto corral_source_split_9817;

  corral_source_split_9817:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_9818;

  corral_source_split_9818:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p55);
    goto corral_source_split_9819;

  corral_source_split_9819:
    assume {:verifier.code 0} true;
    $i57 := $load.i24($M.16, $p56);
    goto corral_source_split_9820;

  corral_source_split_9820:
    assume {:verifier.code 0} true;
    $i58 := $and.i24($i57, $sub.i24(0, 262144));
    goto corral_source_split_9821;

  corral_source_split_9821:
    assume {:verifier.code 0} true;
    $i59 := $or.i24($i58, 732);
    goto corral_source_split_9822;

  corral_source_split_9822:
    assume {:verifier.code 0} true;
    $M.16 := $store.i24($M.16, $p56, $i59);
    goto corral_source_split_9823;

  corral_source_split_9823:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9824;

  corral_source_split_9824:
    assume {:verifier.code 0} true;
    $M.17 := $store.i8($M.17, $p60, 0);
    goto corral_source_split_9825;

  corral_source_split_9825:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9826;

  corral_source_split_9826:
    assume {:verifier.code 0} true;
    $i62 := $load.i8($M.17, $p61);
    goto corral_source_split_9827;

  corral_source_split_9827:
    assume {:verifier.code 0} true;
    $i63 := $zext.i8.i64($i62);
    goto corral_source_split_9828;

  corral_source_split_9828:
    assume {:verifier.code 0} true;
    $i64 := $and.i64($i63, 1);
    goto corral_source_split_9829;

  corral_source_split_9829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1285} $i65 := ldv__builtin_expect($i64, 0);
    call {:si_unique_call 1286} {:cexpr "tmp___1"} boogie_si_record_i64($i65);
    goto corral_source_split_9830;

  corral_source_split_9830:
    assume {:verifier.code 0} true;
    $i66 := $ne.i64($i65, 0);
    goto corral_source_split_9831;

  corral_source_split_9831:
    assume {:verifier.code 0} true;
    assume {:branchcond $i66} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i85 := $sub.i32(0, 22);
    goto $bb16;

  $bb13:
    assume $i66 == 1;
    goto corral_source_split_9856;

  corral_source_split_9856:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p7, $mul.ref(0, 3640)), $mul.ref(0, 1));
    goto corral_source_split_9857;

  corral_source_split_9857:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p67);
    goto corral_source_split_9858;

  corral_source_split_9858:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p68, $mul.ref(0, 6056)), $mul.ref(0, 1));
    goto corral_source_split_9859;

  corral_source_split_9859:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.0, $p69);
    goto corral_source_split_9860;

  corral_source_split_9860:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p1, $mul.ref(0, 10)), $mul.ref(1, 1));
    goto corral_source_split_9861;

  corral_source_split_9861:
    assume {:verifier.code 0} true;
    $i72 := $load.i8($M.0, $p71);
    goto corral_source_split_9862;

  corral_source_split_9862:
    assume {:verifier.code 0} true;
    $i73 := $zext.i8.i32($i72);
    goto corral_source_split_9863;

  corral_source_split_9863:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p1, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_9864;

  corral_source_split_9864:
    assume {:verifier.code 0} true;
    $i75 := $load.i8($M.0, $p74);
    goto corral_source_split_9865;

  corral_source_split_9865:
    assume {:verifier.code 0} true;
    $i76 := $zext.i8.i32($i75);
    goto corral_source_split_9866;

  corral_source_split_9866:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p5, $mul.ref(0, 120)), $mul.ref(88, 1));
    goto corral_source_split_9867;

  corral_source_split_9867:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.0, $p77);
    goto corral_source_split_9868;

  corral_source_split_9868:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p1, $mul.ref(0, 10)), $mul.ref(4, 1));
    goto corral_source_split_9869;

  corral_source_split_9869:
    assume {:verifier.code 0} true;
    $i80 := $load.i16($M.0, $p79);
    goto corral_source_split_9870;

  corral_source_split_9870:
    assume {:verifier.code 0} true;
    $i81 := $zext.i16.i32($i80);
    goto corral_source_split_9871;

  corral_source_split_9871:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_9872;

  corral_source_split_9872:
    assume {:verifier.code 0} true;
    $i83 := $load.i16($M.0, $p82);
    goto corral_source_split_9873;

  corral_source_split_9873:
    assume {:verifier.code 0} true;
    $i84 := $zext.i16.i32($i83);
    goto corral_source_split_9874;

  corral_source_split_9874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1287} __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32.i32.i32.i32($p3, $p70, .str.128, .str.127, $i73, $i76, $i78, $i81, $i84);
    goto corral_source_split_9875;

  corral_source_split_9875:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb9:
    assume {:verifier.code 0} true;
    assume $i43 == 1;
    goto $bb5;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i37 == 1;
    goto $bb5;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i33 == 1;
    goto $bb5;

  $bb1:
    assume $i23 == 1;
    goto corral_source_split_9796;

  corral_source_split_9796:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p5, $mul.ref(0, 120)), $mul.ref(0, 1));
    goto corral_source_split_9797;

  corral_source_split_9797:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_9798;

  corral_source_split_9798:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 3640)), $mul.ref(0, 1));
    goto corral_source_split_9799;

  corral_source_split_9799:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_9800;

  corral_source_split_9800:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 6056)), $mul.ref(0, 1));
    goto corral_source_split_9801;

  corral_source_split_9801:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_9802;

  corral_source_split_9802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1284} __dynamic_dev_dbg.ref.ref.ref.ref($p2, $p29, .str.110, .str.127);
    goto corral_source_split_9803;

  corral_source_split_9803:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const isp1760_ep_disable: ref;

axiom isp1760_ep_disable == $sub.ref(0, 462871);

procedure isp1760_ep_disable($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.30, $CurrAddr, $M.36, $M.38, assertsPassed, $M.1, $M.32, $M.40, $M.23, $M.22, $M.25, $M.24, $M.27, $M.26, $M.29, $M.28, $M.2, $M.4, $M.6, $M.8, $M.3, $M.5, $M.7, $M.9;



implementation isp1760_ep_disable($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i24;
  var $i16: i24;
  var $i17: i24;
  var $p18: ref;
  var $p19: ref;
  var $i20: i8;
  var $i21: i64;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i24;
  var $i40: i24;
  var $i41: i24;
  var $p42: ref;
  var $p43: ref;
  var $i44: i8;
  var $i45: i64;
  var $i46: i64;
  var $i47: i64;
  var $i48: i1;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i64;
  var $i70: i64;
  var $i71: i1;
  var $p74: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $i81: i64;
  var $i82: i1;
  var $p72: ref;
  var $p73: ref;
  var $i54: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1299} $p1 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1300} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1301} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_9944;

  corral_source_split_9944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1302} $p4 := ep_to_udc_ep($p0);
    goto corral_source_split_9945;

  corral_source_split_9945:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 120)), $mul.ref(0, 1));
    goto corral_source_split_9946;

  corral_source_split_9946:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_9947;

  corral_source_split_9947:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_9948;

  corral_source_split_9948:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $p1);
    goto corral_source_split_9949;

  corral_source_split_9949:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_9950;

  corral_source_split_9950:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p8, $p1);
    goto corral_source_split_9951;

  corral_source_split_9951:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9952;

  corral_source_split_9952:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p9, .str.26);
    goto corral_source_split_9953;

  corral_source_split_9953:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_9954;

  corral_source_split_9954:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p10, .str.112);
    goto corral_source_split_9955;

  corral_source_split_9955:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_9956;

  corral_source_split_9956:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p11, .str.55);
    goto corral_source_split_9957;

  corral_source_split_9957:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9958;

  corral_source_split_9958:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p12, .str.110);
    goto corral_source_split_9959;

  corral_source_split_9959:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_9960;

  corral_source_split_9960:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_9961;

  corral_source_split_9961:
    assume {:verifier.code 0} true;
    $i15 := $load.i24($M.16, $p14);
    goto corral_source_split_9962;

  corral_source_split_9962:
    assume {:verifier.code 0} true;
    $i16 := $and.i24($i15, $sub.i24(0, 262144));
    goto corral_source_split_9963;

  corral_source_split_9963:
    assume {:verifier.code 0} true;
    $i17 := $or.i24($i16, 779);
    goto corral_source_split_9964;

  corral_source_split_9964:
    assume {:verifier.code 0} true;
    $M.16 := $store.i24($M.16, $p14, $i17);
    goto corral_source_split_9965;

  corral_source_split_9965:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9966;

  corral_source_split_9966:
    assume {:verifier.code 0} true;
    $M.17 := $store.i8($M.17, $p18, 0);
    goto corral_source_split_9967;

  corral_source_split_9967:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9968;

  corral_source_split_9968:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.17, $p19);
    goto corral_source_split_9969;

  corral_source_split_9969:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i64($i20);
    goto corral_source_split_9970;

  corral_source_split_9970:
    assume {:verifier.code 0} true;
    $i22 := $and.i64($i21, 1);
    goto corral_source_split_9971;

  corral_source_split_9971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1303} $i23 := ldv__builtin_expect($i22, 0);
    call {:si_unique_call 1304} {:cexpr "tmp___0"} boogie_si_record_i64($i23);
    goto corral_source_split_9972;

  corral_source_split_9972:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_9973;

  corral_source_split_9973:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1306} ldv_spin_lock();
    goto corral_source_split_9982;

  corral_source_split_9982:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p4, $mul.ref(0, 120)), $mul.ref(104, 1));
    goto corral_source_split_9983;

  corral_source_split_9983:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_9984;

  corral_source_split_9984:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_9985;

  corral_source_split_9985:
    assume {:verifier.code 0} true;
    $i32 := $eq.i64($i31, 0);
    goto corral_source_split_9986;

  corral_source_split_9986:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p4, $mul.ref(0, 120)), $mul.ref(104, 1));
    goto corral_source_split_10024;

  corral_source_split_10024:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p55, $0.ref);
    goto corral_source_split_10025;

  corral_source_split_10025:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p4, $mul.ref(0, 120)), $mul.ref(92, 1));
    goto corral_source_split_10026;

  corral_source_split_10026:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p56, 0);
    goto corral_source_split_10027;

  corral_source_split_10027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1311} isp1760_udc_select_ep($p4);
    goto corral_source_split_10028;

  corral_source_split_10028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1312} isp1760_udc_write($p6, 520, 0);
    goto corral_source_split_10029;

  corral_source_split_10029:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p4, $mul.ref(0, 120)), $mul.ref(72, 1));
    goto corral_source_split_10030;

  corral_source_split_10030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1313} list_splice_init($p57, $p1);
    goto corral_source_split_10031;

  corral_source_split_10031:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p6, $mul.ref(0, 3640)), $mul.ref(1624, 1));
    goto corral_source_split_10032;

  corral_source_split_10032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1314} spin_unlock_irqrestore($p58, $u0);
    goto corral_source_split_10033;

  corral_source_split_10033:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_10034;

  corral_source_split_10034:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_10035;

  corral_source_split_10035:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p60);
    goto corral_source_split_10036;

  corral_source_split_10036:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($p61, $mul.ref($sub.ref(0, 88), 120));
    goto corral_source_split_10037;

  corral_source_split_10037:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($add.ref($p61, $mul.ref($sub.ref(0, 88), 120)), $mul.ref(88, 1)), $mul.ref(0, 1));
    goto corral_source_split_10038;

  corral_source_split_10038:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.0, $p64);
    goto corral_source_split_10039;

  corral_source_split_10039:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p65);
    goto corral_source_split_10040;

  corral_source_split_10040:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($p66, $mul.ref($sub.ref(0, 88), 120));
    goto corral_source_split_10041;

  corral_source_split_10041:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p61, $mul.ref($sub.ref(0, 88), 120)), $mul.ref(88, 1));
    goto corral_source_split_10042;

  corral_source_split_10042:
    assume {:verifier.code 0} true;
    $i69 := $p2i.ref.i64($p68);
    goto corral_source_split_10043;

  corral_source_split_10043:
    assume {:verifier.code 0} true;
    $i70 := $p2i.ref.i64($p1);
    goto corral_source_split_10044;

  corral_source_split_10044:
    assume {:verifier.code 0} true;
    $i71 := $ne.i64($i69, $i70);
    goto corral_source_split_10045;

  corral_source_split_10045:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i71 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i54 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_10022;

  corral_source_split_10022:
    assume {:verifier.code 0} true;
    $r := $i54;
    return;

  $bb11:
    assume $i71 == 1;
    goto corral_source_split_10047;

  corral_source_split_10047:
    assume {:verifier.code 0} true;
    $p72, $p73 := $p67, $p62;
    goto $bb14;

  $bb14:
    call $p74, $p76, $p77, $p78, $p79, $p80, $i81, $i82, $p72, $p73 := isp1760_ep_disable_loop_$bb14($p4, $i70, $p74, $p76, $p77, $p78, $p79, $p80, $i81, $i82, $p72, $p73);
    goto $bb14_last;

  corral_source_split_10049:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p73, $mul.ref(0, 120)), $mul.ref(88, 1));
    goto corral_source_split_10051;

  corral_source_split_10051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1315} list_del($p74);
    goto corral_source_split_10052;

  corral_source_split_10052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1316} isp1760_udc_request_complete($p4, $p73, $sub.i32(0, 108));
    goto SeqInstr_295, SeqInstr_296;

  SeqInstr_296:
    assume assertsPassed;
    goto SeqInstr_297;

  SeqInstr_297:
    goto corral_source_split_10053;

  corral_source_split_10053:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref($p72, $mul.ref(0, 120)), $mul.ref(88, 1)), $mul.ref(0, 1));
    goto corral_source_split_10054;

  corral_source_split_10054:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.0, $p76);
    goto corral_source_split_10055;

  corral_source_split_10055:
    assume {:verifier.code 0} true;
    $p78 := $bitcast.ref.ref($p77);
    goto corral_source_split_10056;

  corral_source_split_10056:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($p78, $mul.ref($sub.ref(0, 88), 120));
    goto corral_source_split_10057;

  corral_source_split_10057:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p72, $mul.ref(0, 120)), $mul.ref(88, 1));
    goto corral_source_split_10058;

  corral_source_split_10058:
    assume {:verifier.code 0} true;
    $i81 := $p2i.ref.i64($p80);
    goto corral_source_split_10059;

  corral_source_split_10059:
    assume {:verifier.code 0} true;
    $i82 := $ne.i64($i81, $i70);
    goto corral_source_split_10060;

  corral_source_split_10060:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i82 == 1);
    goto corral_source_split_10062;

  corral_source_split_10062:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb16:
    assume $i82 == 1;
    assume {:verifier.code 0} true;
    $p72, $p73 := $p79, $p72;
    goto $bb16_dummy;

  SeqInstr_295:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i32 == 1;
    goto corral_source_split_9988;

  corral_source_split_9988:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9989;

  corral_source_split_9989:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p33, .str.26);
    goto corral_source_split_9990;

  corral_source_split_9990:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_9991;

  corral_source_split_9991:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p34, .str.112);
    goto corral_source_split_9992;

  corral_source_split_9992:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_9993;

  corral_source_split_9993:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p35, .str.55);
    goto corral_source_split_9994;

  corral_source_split_9994:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9995;

  corral_source_split_9995:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p36, .str.113);
    goto corral_source_split_9996;

  corral_source_split_9996:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_9997;

  corral_source_split_9997:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_9998;

  corral_source_split_9998:
    assume {:verifier.code 0} true;
    $i39 := $load.i24($M.16, $p38);
    goto corral_source_split_9999;

  corral_source_split_9999:
    assume {:verifier.code 0} true;
    $i40 := $and.i24($i39, $sub.i24(0, 262144));
    goto corral_source_split_10000;

  corral_source_split_10000:
    assume {:verifier.code 0} true;
    $i41 := $or.i24($i40, 784);
    goto corral_source_split_10001;

  corral_source_split_10001:
    assume {:verifier.code 0} true;
    $M.16 := $store.i24($M.16, $p38, $i41);
    goto corral_source_split_10002;

  corral_source_split_10002:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_10003;

  corral_source_split_10003:
    assume {:verifier.code 0} true;
    $M.17 := $store.i8($M.17, $p42, 0);
    goto corral_source_split_10004;

  corral_source_split_10004:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_10005;

  corral_source_split_10005:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.17, $p43);
    goto corral_source_split_10006;

  corral_source_split_10006:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i64($i44);
    goto corral_source_split_10007;

  corral_source_split_10007:
    assume {:verifier.code 0} true;
    $i46 := $and.i64($i45, 1);
    goto corral_source_split_10008;

  corral_source_split_10008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1307} $i47 := ldv__builtin_expect($i46, 0);
    call {:si_unique_call 1308} {:cexpr "tmp___1"} boogie_si_record_i64($i47);
    goto corral_source_split_10009;

  corral_source_split_10009:
    assume {:verifier.code 0} true;
    $i48 := $ne.i64($i47, 0);
    goto corral_source_split_10010;

  corral_source_split_10010:
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p6, $mul.ref(0, 3640)), $mul.ref(1624, 1));
    goto corral_source_split_10019;

  corral_source_split_10019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1310} spin_unlock_irqrestore($p53, $u0);
    goto corral_source_split_10020;

  corral_source_split_10020:
    assume {:verifier.code 0} true;
    $i54 := $sub.i32(0, 22);
    goto $bb9;

  $bb6:
    assume $i48 == 1;
    goto corral_source_split_10012;

  corral_source_split_10012:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p6, $mul.ref(0, 3640)), $mul.ref(0, 1));
    goto corral_source_split_10013;

  corral_source_split_10013:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_10014;

  corral_source_split_10014:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p50, $mul.ref(0, 6056)), $mul.ref(0, 1));
    goto corral_source_split_10015;

  corral_source_split_10015:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.42, $p51);
    goto corral_source_split_10016;

  corral_source_split_10016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1309} __dynamic_dev_dbg.ref.ref.ref.ref($p3, $p52, .str.113, .str.112);
    goto corral_source_split_10017;

  corral_source_split_10017:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb1:
    assume $i24 == 1;
    goto corral_source_split_9975;

  corral_source_split_9975:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p6, $mul.ref(0, 3640)), $mul.ref(0, 1));
    goto corral_source_split_9976;

  corral_source_split_9976:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_9977;

  corral_source_split_9977:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 6056)), $mul.ref(0, 1));
    goto corral_source_split_9978;

  corral_source_split_9978:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.42, $p27);
    goto corral_source_split_9979;

  corral_source_split_9979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1305} __dynamic_dev_dbg.ref.ref.ref.ref($p2, $p28, .str.110, .str.112);
    goto corral_source_split_9980;

  corral_source_split_9980:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb16_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_10049;
}



const isp1760_ep_alloc_request: ref;

axiom isp1760_ep_alloc_request == $sub.ref(0, 463903);

procedure isp1760_ep_alloc_request($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation isp1760_ep_alloc_request($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1317} {:cexpr "isp1760_ep_alloc_request:arg:gfp_flags"} boogie_si_record_i32($i1);
    goto corral_source_split_10064;

  corral_source_split_10064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1318} $p2 := kmalloc(120, $i1);
    goto SeqInstr_298, SeqInstr_299;

  SeqInstr_299:
    assume assertsPassed;
    goto SeqInstr_300;

  SeqInstr_300:
    goto corral_source_split_10065;

  corral_source_split_10065:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_10066;

  corral_source_split_10066:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_10067;

  corral_source_split_10067:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_10068;

  corral_source_split_10068:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_10074;

  corral_source_split_10074:
    assume {:verifier.code 0} true;
    $p6 := $p2;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10072;

  corral_source_split_10072:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_10070;

  corral_source_split_10070:
    assume {:verifier.code 0} true;
    $p6 := $0.ref;
    goto $bb3;

  SeqInstr_298:
    assume !assertsPassed;
    return;
}



const isp1760_ep_free_request: ref;

axiom isp1760_ep_free_request == $sub.ref(0, 464935);

procedure isp1760_ep_free_request($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation isp1760_ep_free_request($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10076;

  corral_source_split_10076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1319} $p2 := req_to_udc_req($p1);
    goto corral_source_split_10077;

  corral_source_split_10077:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_10078;

  corral_source_split_10078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1320} kfree($p3);
    goto corral_source_split_10079;

  corral_source_split_10079:
    assume {:verifier.code 0} true;
    return;
}



const isp1760_ep_queue: ref;

axiom isp1760_ep_queue == $sub.ref(0, 465967);

procedure isp1760_ep_queue($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.30, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $CurrAddr, $M.1, $M.32, $M.38, $M.36, $M.40, $M.23, $M.22, $M.25, $M.24, $M.27, $M.26, $M.29, $M.28, $M.2, $M.4, $M.6, $M.8, assertsPassed, $M.3, $M.5, $M.7, $M.9;



implementation isp1760_ep_queue($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i24;
  var $i21: i24;
  var $i22: i24;
  var $p23: ref;
  var $p24: ref;
  var $i25: i8;
  var $i26: i64;
  var $i27: i64;
  var $i28: i64;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $p36: ref;
  var $p37: ref;
  var $i38: i8;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $i47: i1;
  var $p48: ref;
  var $i49: i32;
  var $p50: ref;
  var $i51: i16;
  var $i52: i32;
  var $i53: i1;
  var $p54: ref;
  var $i55: i32;
  var $i56: i1;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i24;
  var $i64: i24;
  var $i65: i24;
  var $p66: ref;
  var $p67: ref;
  var $i68: i8;
  var $i69: i64;
  var $i70: i64;
  var $i71: i64;
  var $i72: i1;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: i32;
  var $p81: ref;
  var $i82: i32;
  var $i83: i1;
  var $i84: i1;
  var $i85: i1;
  var $i86: i1;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $i93: i24;
  var $i94: i24;
  var $i95: i24;
  var $p96: ref;
  var $p97: ref;
  var $i98: i8;
  var $i99: i64;
  var $i100: i64;
  var $i101: i64;
  var $i102: i1;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $i119: i24;
  var $i120: i24;
  var $i121: i24;
  var $p122: ref;
  var $p123: ref;
  var $i124: i8;
  var $i125: i64;
  var $i126: i64;
  var $i127: i64;
  var $i128: i1;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $i109: i8;
  var $i110: i32;
  var $p135: ref;
  var $p136: ref;
  var $i137: i64;
  var $i138: i1;
  var $p139: ref;
  var $i140: i32;
  var $i141: i1;
  var $i142: i8;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $i146: i32;
  var $i147: i32;
  var $i148: i1;
  var $p149: ref;
  var $i150: i8;
  var $i151: i1;
  var $i152: i1;
  var $p154: ref;
  var $i155: i32;
  var $i156: i32;
  var $i157: i1;
  var $p158: ref;
  var $i159: i8;
  var $i160: i1;
  var $i161: i1;
  var $i162: i8;
  var $i163: i8;
  var $i153: i8;
  var $p166: ref;
  var $p167: ref;
  var $p168: ref;
  var $p169: ref;
  var $p170: ref;
  var $p171: ref;
  var $i172: i24;
  var $i173: i24;
  var $i174: i24;
  var $p175: ref;
  var $p176: ref;
  var $i177: i8;
  var $i178: i64;
  var $i179: i64;
  var $i180: i64;
  var $i181: i1;
  var $p182: ref;
  var $p183: ref;
  var $p184: ref;
  var $p185: ref;
  var $p186: ref;
  var $i187: i32;
  var $i164: i8;
  var $i165: i32;
  var $i133: i8;
  var $i134: i32;
  var $i79: i8;
  var $i80: i32;
  var $i188: i1;
  var $p189: ref;
  var $p190: ref;
  var $i191: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1321} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1322} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1323} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1324} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1325} $p7 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 1326} {:cexpr "isp1760_ep_queue:arg:gfp_flags"} boogie_si_record_i32($i2);
    goto corral_source_split_10081;

  corral_source_split_10081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1327} $p8 := req_to_udc_req($p1);
    goto corral_source_split_10082;

  corral_source_split_10082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1328} $p9 := ep_to_udc_ep($p0);
    goto corral_source_split_10083;

  corral_source_split_10083:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 120)), $mul.ref(0, 1));
    goto corral_source_split_10084;

  corral_source_split_10084:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_10085;

  corral_source_split_10085:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(80, 1));
    goto corral_source_split_10086;

  corral_source_split_10086:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, $sub.i32(0, 115));
    goto corral_source_split_10087;

  corral_source_split_10087:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(84, 1));
    goto corral_source_split_10088;

  corral_source_split_10088:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, 0);
    goto corral_source_split_10089;

  corral_source_split_10089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1329} ldv_spin_lock();
    goto corral_source_split_10090;

  corral_source_split_10090:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_10091;

  corral_source_split_10091:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p14, .str.26);
    goto corral_source_split_10092;

  corral_source_split_10092:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_10093;

  corral_source_split_10093:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p15, .str.114);
    goto corral_source_split_10094;

  corral_source_split_10094:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_10095;

  corral_source_split_10095:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p16, .str.55);
    goto corral_source_split_10096;

  corral_source_split_10096:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_10097;

  corral_source_split_10097:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p17, .str.115);
    goto corral_source_split_10098;

  corral_source_split_10098:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_10099;

  corral_source_split_10099:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_10100;

  corral_source_split_10100:
    assume {:verifier.code 0} true;
    $i20 := $load.i24($M.16, $p19);
    goto corral_source_split_10101;

  corral_source_split_10101:
    assume {:verifier.code 0} true;
    $i21 := $and.i24($i20, $sub.i24(0, 262144));
    goto corral_source_split_10102;

  corral_source_split_10102:
    assume {:verifier.code 0} true;
    $i22 := $or.i24($i21, 845);
    goto corral_source_split_10103;

  corral_source_split_10103:
    assume {:verifier.code 0} true;
    $M.16 := $store.i24($M.16, $p19, $i22);
    goto corral_source_split_10104;

  corral_source_split_10104:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_10105;

  corral_source_split_10105:
    assume {:verifier.code 0} true;
    $M.17 := $store.i8($M.17, $p23, 0);
    goto corral_source_split_10106;

  corral_source_split_10106:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_10107;

  corral_source_split_10107:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.17, $p24);
    goto corral_source_split_10108;

  corral_source_split_10108:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i64($i25);
    goto corral_source_split_10109;

  corral_source_split_10109:
    assume {:verifier.code 0} true;
    $i27 := $and.i64($i26, 1);
    goto corral_source_split_10110;

  corral_source_split_10110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1330} $i28 := ldv__builtin_expect($i27, 0);
    call {:si_unique_call 1331} {:cexpr "tmp___1"} boogie_si_record_i64($i28);
    goto corral_source_split_10111;

  corral_source_split_10111:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64($i28, 0);
    goto corral_source_split_10112;

  corral_source_split_10112:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p8, $mul.ref(0, 120)), $mul.ref(104, 1));
    goto corral_source_split_10131;

  corral_source_split_10131:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p44, $p9);
    goto corral_source_split_10132;

  corral_source_split_10132:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p9, $mul.ref(0, 120)), $mul.ref(88, 1));
    goto corral_source_split_10133;

  corral_source_split_10133:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_10134;

  corral_source_split_10134:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i46, 0);
    goto corral_source_split_10135;

  corral_source_split_10135:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i47 == 1);
    goto corral_source_split_10145;

  corral_source_split_10145:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p9, $mul.ref(0, 120)), $mul.ref(104, 1));
    goto corral_source_split_10146;

  corral_source_split_10146:
    assume {:verifier.code 0} true;
    $p136 := $load.ref($M.0, $p135);
    goto corral_source_split_10147;

  corral_source_split_10147:
    assume {:verifier.code 0} true;
    $i137 := $p2i.ref.i64($p136);
    goto corral_source_split_10148;

  corral_source_split_10148:
    assume {:verifier.code 0} true;
    $i138 := $ne.i64($i137, 0);
    goto corral_source_split_10149;

  corral_source_split_10149:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i138 == 1);
    goto corral_source_split_10286;

  corral_source_split_10286:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_10287;

  corral_source_split_10287:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p166, .str.26);
    goto corral_source_split_10288;

  corral_source_split_10288:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_10289;

  corral_source_split_10289:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p167, .str.114);
    goto corral_source_split_10290;

  corral_source_split_10290:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_10291;

  corral_source_split_10291:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p168, .str.55);
    goto corral_source_split_10292;

  corral_source_split_10292:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_10293;

  corral_source_split_10293:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p169, .str.120);
    goto corral_source_split_10294;

  corral_source_split_10294:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_10295;

  corral_source_split_10295:
    assume {:verifier.code 0} true;
    $p171 := $bitcast.ref.ref($p170);
    goto corral_source_split_10296;

  corral_source_split_10296:
    assume {:verifier.code 0} true;
    $i172 := $load.i24($M.16, $p171);
    goto corral_source_split_10297;

  corral_source_split_10297:
    assume {:verifier.code 0} true;
    $i173 := $and.i24($i172, $sub.i24(0, 262144));
    goto corral_source_split_10298;

  corral_source_split_10298:
    assume {:verifier.code 0} true;
    $i174 := $or.i24($i173, 895);
    goto corral_source_split_10299;

  corral_source_split_10299:
    assume {:verifier.code 0} true;
    $M.16 := $store.i24($M.16, $p171, $i174);
    goto corral_source_split_10300;

  corral_source_split_10300:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_10301;

  corral_source_split_10301:
    assume {:verifier.code 0} true;
    $M.17 := $store.i8($M.17, $p175, 0);
    goto corral_source_split_10302;

  corral_source_split_10302:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_10303;

  corral_source_split_10303:
    assume {:verifier.code 0} true;
    $i177 := $load.i8($M.17, $p176);
    goto corral_source_split_10304;

  corral_source_split_10304:
    assume {:verifier.code 0} true;
    $i178 := $zext.i8.i64($i177);
    goto corral_source_split_10305;

  corral_source_split_10305:
    assume {:verifier.code 0} true;
    $i179 := $and.i64($i178, 1);
    goto corral_source_split_10306;

  corral_source_split_10306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1351} $i180 := ldv__builtin_expect($i179, 0);
    call {:si_unique_call 1352} {:cexpr "tmp___6"} boogie_si_record_i64($i180);
    goto corral_source_split_10307;

  corral_source_split_10307:
    assume {:verifier.code 0} true;
    $i181 := $ne.i64($i180, 0);
    goto corral_source_split_10308;

  corral_source_split_10308:
    assume {:verifier.code 0} true;
    assume {:branchcond $i181} true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i181 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $i164, $i165 := 0, $sub.i32(0, 108);
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i133, $i134 := $i164, $i165;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_10271;

  corral_source_split_10271:
    assume {:verifier.code 0} true;
    $i79, $i80 := $i133, $i134;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_10189;

  corral_source_split_10189:
    assume {:verifier.code 0} true;
    $i188 := $slt.i32($i80, 0);
    goto corral_source_split_10190;

  corral_source_split_10190:
    assume {:verifier.code 0} true;
    assume {:branchcond $i188} true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i188 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($p11, $mul.ref(0, 3640)), $mul.ref(1624, 1));
    goto corral_source_split_10350;

  corral_source_split_10350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1357} spin_unlock_irqrestore($p190, $u0);
    goto corral_source_split_10351;

  corral_source_split_10351:
    assume {:verifier.code 0} true;
    $i191 := $trunc.i8.i1($i79);
    goto corral_source_split_10352;

  corral_source_split_10352:
    assume {:verifier.code 0} true;
    assume {:branchcond $i191} true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i191 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $r := $i80;
    return;

  $bb58:
    assume $i191 == 1;
    goto corral_source_split_10354;

  corral_source_split_10354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1358} isp1760_udc_request_complete($p9, $p8, 0);
    goto SeqInstr_304, SeqInstr_305;

  SeqInstr_305:
    assume assertsPassed;
    goto SeqInstr_306;

  SeqInstr_306:
    goto corral_source_split_10355;

  corral_source_split_10355:
    assume {:verifier.code 0} true;
    goto $bb60;

  SeqInstr_304:
    assume !assertsPassed;
    return;

  $bb55:
    assume $i188 == 1;
    goto corral_source_split_10346;

  corral_source_split_10346:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($p8, $mul.ref(0, 120)), $mul.ref(104, 1));
    goto corral_source_split_10347;

  corral_source_split_10347:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p189, $0.ref);
    goto corral_source_split_10348;

  corral_source_split_10348:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb52:
    assume $i181 == 1;
    goto corral_source_split_10337;

  corral_source_split_10337:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p11, $mul.ref(0, 3640)), $mul.ref(0, 1));
    goto corral_source_split_10338;

  corral_source_split_10338:
    assume {:verifier.code 0} true;
    $p183 := $load.ref($M.0, $p182);
    goto corral_source_split_10339;

  corral_source_split_10339:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($p183, $mul.ref(0, 6056)), $mul.ref(0, 1));
    goto corral_source_split_10340;

  corral_source_split_10340:
    assume {:verifier.code 0} true;
    $p185 := $load.ref($M.0, $p184);
    goto corral_source_split_10341;

  corral_source_split_10341:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($p9, $mul.ref(0, 120)), $mul.ref(88, 1));
    goto corral_source_split_10342;

  corral_source_split_10342:
    assume {:verifier.code 0} true;
    $i187 := $load.i32($M.0, $p186);
    goto corral_source_split_10343;

  corral_source_split_10343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1356} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p7, $p185, .str.120, .str.114, $i187);
    goto corral_source_split_10344;

  corral_source_split_10344:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb35:
    assume $i138 == 1;
    goto corral_source_split_10273;

  corral_source_split_10273:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p9, $mul.ref(0, 120)), $mul.ref(72, 1));
    goto corral_source_split_10274;

  corral_source_split_10274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1347} $i140 := list_empty($p139);
    call {:si_unique_call 1348} {:cexpr "tmp___5"} boogie_si_record_i32($i140);
    goto corral_source_split_10275;

  corral_source_split_10275:
    assume {:verifier.code 0} true;
    $i141 := $ne.i32($i140, 0);
    goto corral_source_split_10276;

  corral_source_split_10276:
    assume {:verifier.code 0} true;
    $i142 := $zext.i1.i8($i141);
    call {:si_unique_call 1349} {:cexpr "empty"} boogie_si_record_i8($i142);
    goto corral_source_split_10277;

  corral_source_split_10277:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p8, $mul.ref(0, 120)), $mul.ref(88, 1));
    goto corral_source_split_10278;

  corral_source_split_10278:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p9, $mul.ref(0, 120)), $mul.ref(72, 1));
    goto corral_source_split_10279;

  corral_source_split_10279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1350} list_add_tail($p143, $p144);
    goto corral_source_split_10280;

  corral_source_split_10280:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p9, $mul.ref(0, 120)), $mul.ref(88, 1));
    goto corral_source_split_10281;

  corral_source_split_10281:
    assume {:verifier.code 0} true;
    $i146 := $load.i32($M.0, $p145);
    goto corral_source_split_10282;

  corral_source_split_10282:
    assume {:verifier.code 0} true;
    $i147 := $and.i32($i146, 128);
    goto corral_source_split_10283;

  corral_source_split_10283:
    assume {:verifier.code 0} true;
    $i148 := $ne.i32($i147, 0);
    goto corral_source_split_10284;

  corral_source_split_10284:
    assume {:verifier.code 0} true;
    assume {:branchcond $i148} true;
    goto $bb37, $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume !($i148 == 1);
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p9, $mul.ref(0, 120)), $mul.ref(88, 1));
    goto corral_source_split_10315;

  corral_source_split_10315:
    assume {:verifier.code 0} true;
    $i155 := $load.i32($M.0, $p154);
    goto corral_source_split_10316;

  corral_source_split_10316:
    assume {:verifier.code 0} true;
    $i156 := $and.i32($i155, 128);
    goto corral_source_split_10317;

  corral_source_split_10317:
    assume {:verifier.code 0} true;
    $i157 := $eq.i32($i156, 0);
    goto corral_source_split_10318;

  corral_source_split_10318:
    assume {:verifier.code 0} true;
    assume {:branchcond $i157} true;
    goto $bb45, $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    assume !($i157 == 1);
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i163 := 0;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i153 := $i163;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto corral_source_split_10326;

  corral_source_split_10326:
    assume {:verifier.code 0} true;
    $i164, $i165 := $i153, 0;
    goto $bb51;

  $bb45:
    assume $i157 == 1;
    goto corral_source_split_10328;

  corral_source_split_10328:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p9, $mul.ref(0, 120)), $mul.ref(112, 1));
    goto corral_source_split_10329;

  corral_source_split_10329:
    assume {:verifier.code 0} true;
    $i159 := $load.i8($M.0, $p158);
    goto corral_source_split_10330;

  corral_source_split_10330:
    assume {:verifier.code 0} true;
    $i160 := $trunc.i8.i1($i159);
    goto corral_source_split_10331;

  corral_source_split_10331:
    assume {:verifier.code 0} true;
    assume {:branchcond $i160} true;
    goto $bb48, $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    assume !($i160 == 1);
    goto $bb47;

  $bb48:
    assume $i160 == 1;
    goto corral_source_split_10333;

  corral_source_split_10333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1354} $i161 := isp1760_udc_receive($p9, $p8);
    goto SeqInstr_301, SeqInstr_302;

  SeqInstr_302:
    assume assertsPassed;
    goto SeqInstr_303;

  SeqInstr_303:
    goto corral_source_split_10334;

  corral_source_split_10334:
    assume {:verifier.code 0} true;
    $i162 := $zext.i1.i8($i161);
    call {:si_unique_call 1355} {:cexpr "complete___0"} boogie_si_record_i8($i162);
    goto corral_source_split_10335;

  corral_source_split_10335:
    assume {:verifier.code 0} true;
    $i163 := $i162;
    goto $bb50;

  SeqInstr_301:
    assume !assertsPassed;
    return;

  $bb37:
    assume $i148 == 1;
    goto corral_source_split_10310;

  corral_source_split_10310:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p9, $mul.ref(0, 120)), $mul.ref(113, 1));
    goto corral_source_split_10311;

  corral_source_split_10311:
    assume {:verifier.code 0} true;
    $i150 := $load.i8($M.0, $p149);
    goto corral_source_split_10312;

  corral_source_split_10312:
    assume {:verifier.code 0} true;
    $i151 := $trunc.i8.i1($i150);
    goto corral_source_split_10313;

  corral_source_split_10313:
    assume {:verifier.code 0} true;
    assume {:branchcond $i151} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i151 == 1);
    goto corral_source_split_10320;

  corral_source_split_10320:
    assume {:verifier.code 0} true;
    $i152 := $trunc.i8.i1($i142);
    goto corral_source_split_10321;

  corral_source_split_10321:
    assume {:verifier.code 0} true;
    assume {:branchcond $i152} true;
    goto $bb42, $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    assume !($i152 == 1);
    goto $bb39;

  $bb42:
    assume $i152 == 1;
    goto corral_source_split_10323;

  corral_source_split_10323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1353} isp1760_udc_transmit($p9, $p8);
    goto corral_source_split_10324;

  corral_source_split_10324:
    assume {:verifier.code 0} true;
    $i153 := 0;
    goto $bb44;

  $bb40:
    assume {:verifier.code 0} true;
    assume $i151 == 1;
    goto $bb39;

  $bb4:
    assume $i47 == 1;
    goto corral_source_split_10137;

  corral_source_split_10137:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_10138;

  corral_source_split_10138:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $p48);
    goto corral_source_split_10139;

  corral_source_split_10139:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p11, $mul.ref(0, 3640)), $mul.ref(3630, 1));
    goto corral_source_split_10140;

  corral_source_split_10140:
    assume {:verifier.code 0} true;
    $i51 := $load.i16($M.0, $p50);
    goto corral_source_split_10141;

  corral_source_split_10141:
    assume {:verifier.code 0} true;
    $i52 := $zext.i16.i32($i51);
    goto corral_source_split_10142;

  corral_source_split_10142:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i49, $i52);
    goto corral_source_split_10143;

  corral_source_split_10143:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i53 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p11, $mul.ref(0, 3640)), $mul.ref(3624, 1));
    goto corral_source_split_10192;

  corral_source_split_10192:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.0, $p81);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i83 := $slt.i32($i82, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    $i84 := $slt.i32($i82, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i84} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    $i85 := $eq.i32($i82, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i85} true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i85 == 1);
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_10241;

  corral_source_split_10241:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p113, .str.26);
    goto corral_source_split_10242;

  corral_source_split_10242:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_10243;

  corral_source_split_10243:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p114, .str.114);
    goto corral_source_split_10244;

  corral_source_split_10244:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_10245;

  corral_source_split_10245:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p115, .str.55);
    goto corral_source_split_10246;

  corral_source_split_10246:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_10247;

  corral_source_split_10247:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p116, .str.119);
    goto corral_source_split_10248;

  corral_source_split_10248:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_10249;

  corral_source_split_10249:
    assume {:verifier.code 0} true;
    $p118 := $bitcast.ref.ref($p117);
    goto corral_source_split_10250;

  corral_source_split_10250:
    assume {:verifier.code 0} true;
    $i119 := $load.i24($M.16, $p118);
    goto corral_source_split_10251;

  corral_source_split_10251:
    assume {:verifier.code 0} true;
    $i120 := $and.i24($i119, $sub.i24(0, 262144));
    goto corral_source_split_10252;

  corral_source_split_10252:
    assume {:verifier.code 0} true;
    $i121 := $or.i24($i120, 880);
    goto corral_source_split_10253;

  corral_source_split_10253:
    assume {:verifier.code 0} true;
    $M.16 := $store.i24($M.16, $p118, $i121);
    goto corral_source_split_10254;

  corral_source_split_10254:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_10255;

  corral_source_split_10255:
    assume {:verifier.code 0} true;
    $M.17 := $store.i8($M.17, $p122, 0);
    goto corral_source_split_10256;

  corral_source_split_10256:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_10257;

  corral_source_split_10257:
    assume {:verifier.code 0} true;
    $i124 := $load.i8($M.17, $p123);
    goto corral_source_split_10258;

  corral_source_split_10258:
    assume {:verifier.code 0} true;
    $i125 := $zext.i8.i64($i124);
    goto corral_source_split_10259;

  corral_source_split_10259:
    assume {:verifier.code 0} true;
    $i126 := $and.i64($i125, 1);
    goto corral_source_split_10260;

  corral_source_split_10260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1344} $i127 := ldv__builtin_expect($i126, 0);
    call {:si_unique_call 1345} {:cexpr "tmp___4"} boogie_si_record_i64($i127);
    goto corral_source_split_10261;

  corral_source_split_10261:
    assume {:verifier.code 0} true;
    $i128 := $ne.i64($i127, 0);
    goto corral_source_split_10262;

  corral_source_split_10262:
    assume {:verifier.code 0} true;
    assume {:branchcond $i128} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i109, $i110 := 0, $sub.i32(0, 22);
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_10239;

  corral_source_split_10239:
    assume {:verifier.code 0} true;
    $i133, $i134 := $i109, $i110;
    goto $bb34;

  $bb31:
    assume $i128 == 1;
    goto corral_source_split_10264;

  corral_source_split_10264:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p11, $mul.ref(0, 3640)), $mul.ref(0, 1));
    goto corral_source_split_10265;

  corral_source_split_10265:
    assume {:verifier.code 0} true;
    $p130 := $load.ref($M.0, $p129);
    goto corral_source_split_10266;

  corral_source_split_10266:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p130, $mul.ref(0, 6056)), $mul.ref(0, 1));
    goto corral_source_split_10267;

  corral_source_split_10267:
    assume {:verifier.code 0} true;
    $p132 := $load.ref($M.0, $p131);
    goto corral_source_split_10268;

  corral_source_split_10268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1346} __dynamic_dev_dbg.ref.ref.ref.ref($p6, $p132, .str.119, .str.114);
    goto corral_source_split_10269;

  corral_source_split_10269:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb21:
    assume $i85 == 1;
    goto corral_source_split_10201;

  corral_source_split_10201:
    assume {:verifier.code 0} true;
    $i109, $i110 := 1, 0;
    goto $bb29;

  $bb19:
    assume $i84 == 1;
    goto corral_source_split_10194;

  corral_source_split_10194:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p8, $mul.ref(0, 120)), $mul.ref(88, 1));
    goto corral_source_split_10195;

  corral_source_split_10195:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p9, $mul.ref(0, 120)), $mul.ref(72, 1));
    goto corral_source_split_10196;

  corral_source_split_10196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1336} list_add_tail($p111, $p112);
    goto corral_source_split_10197;

  corral_source_split_10197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1337} __isp1760_udc_select_ep($p9, 0);
    goto corral_source_split_10198;

  corral_source_split_10198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1338} isp1760_udc_write($p11, 552, 4);
    goto corral_source_split_10199;

  corral_source_split_10199:
    assume {:verifier.code 0} true;
    $i109, $i110 := 0, 0;
    goto $bb29;

  $bb17:
    assume $i83 == 1;
    assume {:verifier.code 0} true;
    $i86 := $eq.i32($i82, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i86 == 1);
    goto $bb23;

  $bb24:
    assume $i86 == 1;
    goto corral_source_split_10203;

  corral_source_split_10203:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_10204;

  corral_source_split_10204:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p87, .str.26);
    goto corral_source_split_10205;

  corral_source_split_10205:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_10206;

  corral_source_split_10206:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p88, .str.114);
    goto corral_source_split_10207;

  corral_source_split_10207:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_10208;

  corral_source_split_10208:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p89, .str.55);
    goto corral_source_split_10209;

  corral_source_split_10209:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_10210;

  corral_source_split_10210:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p90, .str.118);
    goto corral_source_split_10211;

  corral_source_split_10211:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_10212;

  corral_source_split_10212:
    assume {:verifier.code 0} true;
    $p92 := $bitcast.ref.ref($p91);
    goto corral_source_split_10213;

  corral_source_split_10213:
    assume {:verifier.code 0} true;
    $i93 := $load.i24($M.16, $p92);
    goto corral_source_split_10214;

  corral_source_split_10214:
    assume {:verifier.code 0} true;
    $i94 := $and.i24($i93, $sub.i24(0, 262144));
    goto corral_source_split_10215;

  corral_source_split_10215:
    assume {:verifier.code 0} true;
    $i95 := $or.i24($i94, 862);
    goto corral_source_split_10216;

  corral_source_split_10216:
    assume {:verifier.code 0} true;
    $M.16 := $store.i24($M.16, $p92, $i95);
    goto corral_source_split_10217;

  corral_source_split_10217:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_10218;

  corral_source_split_10218:
    assume {:verifier.code 0} true;
    $M.17 := $store.i8($M.17, $p96, 0);
    goto corral_source_split_10219;

  corral_source_split_10219:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_10220;

  corral_source_split_10220:
    assume {:verifier.code 0} true;
    $i98 := $load.i8($M.17, $p97);
    goto corral_source_split_10221;

  corral_source_split_10221:
    assume {:verifier.code 0} true;
    $i99 := $zext.i8.i64($i98);
    goto corral_source_split_10222;

  corral_source_split_10222:
    assume {:verifier.code 0} true;
    $i100 := $and.i64($i99, 1);
    goto corral_source_split_10223;

  corral_source_split_10223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1339} $i101 := ldv__builtin_expect($i100, 0);
    call {:si_unique_call 1340} {:cexpr "tmp___3"} boogie_si_record_i64($i101);
    goto corral_source_split_10224;

  corral_source_split_10224:
    assume {:verifier.code 0} true;
    $i102 := $ne.i64($i101, 0);
    goto corral_source_split_10225;

  corral_source_split_10225:
    assume {:verifier.code 0} true;
    assume {:branchcond $i102} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p8, $mul.ref(0, 120)), $mul.ref(88, 1));
    goto corral_source_split_10234;

  corral_source_split_10234:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p9, $mul.ref(0, 120)), $mul.ref(72, 1));
    goto corral_source_split_10235;

  corral_source_split_10235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1342} list_add_tail($p107, $p108);
    goto corral_source_split_10236;

  corral_source_split_10236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1343} isp1760_udc_transmit($p9, $p8);
    goto corral_source_split_10237;

  corral_source_split_10237:
    assume {:verifier.code 0} true;
    $i109, $i110 := 0, 0;
    goto $bb29;

  $bb26:
    assume $i102 == 1;
    goto corral_source_split_10227;

  corral_source_split_10227:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p11, $mul.ref(0, 3640)), $mul.ref(0, 1));
    goto corral_source_split_10228;

  corral_source_split_10228:
    assume {:verifier.code 0} true;
    $p104 := $load.ref($M.0, $p103);
    goto corral_source_split_10229;

  corral_source_split_10229:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p104, $mul.ref(0, 6056)), $mul.ref(0, 1));
    goto corral_source_split_10230;

  corral_source_split_10230:
    assume {:verifier.code 0} true;
    $p106 := $load.ref($M.0, $p105);
    goto corral_source_split_10231;

  corral_source_split_10231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1341} __dynamic_dev_dbg.ref.ref.ref.ref.ref($p5, $p106, .str.118, .str.114, $p8);
    goto corral_source_split_10232;

  corral_source_split_10232:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb6:
    assume $i53 == 1;
    goto corral_source_split_10151;

  corral_source_split_10151:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p11, $mul.ref(0, 3640)), $mul.ref(3624, 1));
    goto corral_source_split_10152;

  corral_source_split_10152:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    goto corral_source_split_10153;

  corral_source_split_10153:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 1);
    goto corral_source_split_10154;

  corral_source_split_10154:
    assume {:verifier.code 0} true;
    assume {:branchcond $i56} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i56 == 1);
    goto $bb8;

  $bb9:
    assume $i56 == 1;
    goto corral_source_split_10156;

  corral_source_split_10156:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_10157;

  corral_source_split_10157:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p57, .str.26);
    goto corral_source_split_10158;

  corral_source_split_10158:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_10159;

  corral_source_split_10159:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p58, .str.114);
    goto corral_source_split_10160;

  corral_source_split_10160:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_10161;

  corral_source_split_10161:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p59, .str.55);
    goto corral_source_split_10162;

  corral_source_split_10162:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_10163;

  corral_source_split_10163:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p60, .str.117);
    goto corral_source_split_10164;

  corral_source_split_10164:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_10165;

  corral_source_split_10165:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p61);
    goto corral_source_split_10166;

  corral_source_split_10166:
    assume {:verifier.code 0} true;
    $i63 := $load.i24($M.16, $p62);
    goto corral_source_split_10167;

  corral_source_split_10167:
    assume {:verifier.code 0} true;
    $i64 := $and.i24($i63, $sub.i24(0, 262144));
    goto corral_source_split_10168;

  corral_source_split_10168:
    assume {:verifier.code 0} true;
    $i65 := $or.i24($i64, 854);
    goto corral_source_split_10169;

  corral_source_split_10169:
    assume {:verifier.code 0} true;
    $M.16 := $store.i24($M.16, $p62, $i65);
    goto corral_source_split_10170;

  corral_source_split_10170:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_10171;

  corral_source_split_10171:
    assume {:verifier.code 0} true;
    $M.17 := $store.i8($M.17, $p66, 0);
    goto corral_source_split_10172;

  corral_source_split_10172:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_10173;

  corral_source_split_10173:
    assume {:verifier.code 0} true;
    $i68 := $load.i8($M.17, $p67);
    goto corral_source_split_10174;

  corral_source_split_10174:
    assume {:verifier.code 0} true;
    $i69 := $zext.i8.i64($i68);
    goto corral_source_split_10175;

  corral_source_split_10175:
    assume {:verifier.code 0} true;
    $i70 := $and.i64($i69, 1);
    goto corral_source_split_10176;

  corral_source_split_10176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1333} $i71 := ldv__builtin_expect($i70, 0);
    call {:si_unique_call 1334} {:cexpr "tmp___2"} boogie_si_record_i64($i71);
    goto corral_source_split_10177;

  corral_source_split_10177:
    assume {:verifier.code 0} true;
    $i72 := $ne.i64($i71, 0);
    goto corral_source_split_10178;

  corral_source_split_10178:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i79, $i80 := 0, $sub.i32(0, 22);
    goto $bb14;

  $bb11:
    assume $i72 == 1;
    goto corral_source_split_10180;

  corral_source_split_10180:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p11, $mul.ref(0, 3640)), $mul.ref(0, 1));
    goto corral_source_split_10181;

  corral_source_split_10181:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.0, $p73);
    goto corral_source_split_10182;

  corral_source_split_10182:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p74, $mul.ref(0, 6056)), $mul.ref(0, 1));
    goto corral_source_split_10183;

  corral_source_split_10183:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.0, $p75);
    goto corral_source_split_10184;

  corral_source_split_10184:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_10185;

  corral_source_split_10185:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.0, $p77);
    goto corral_source_split_10186;

  corral_source_split_10186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1335} __dynamic_dev_dbg.ref.ref.ref.ref.i32.ref($p4, $p76, .str.117, .str.114, $i78, $p8);
    goto corral_source_split_10187;

  corral_source_split_10187:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb1:
    assume $i29 == 1;
    goto corral_source_split_10114;

  corral_source_split_10114:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p11, $mul.ref(0, 3640)), $mul.ref(0, 1));
    goto corral_source_split_10115;

  corral_source_split_10115:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_10116;

  corral_source_split_10116:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 6056)), $mul.ref(0, 1));
    goto corral_source_split_10117;

  corral_source_split_10117:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_10118;

  corral_source_split_10118:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_10119;

  corral_source_split_10119:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_10120;

  corral_source_split_10120:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p1);
    goto corral_source_split_10121;

  corral_source_split_10121:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($p36, $mul.ref(42, 1));
    goto corral_source_split_10122;

  corral_source_split_10122:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.0, $p37);
    goto corral_source_split_10123;

  corral_source_split_10123:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i38);
    goto corral_source_split_10124;

  corral_source_split_10124:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_10125;

  corral_source_split_10125:
    assume {:verifier.code 0} true;
    $p41 := (if $i40 == 1 then .str.116 else .str.103);
    goto corral_source_split_10126;

  corral_source_split_10126:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p9, $mul.ref(0, 120)), $mul.ref(88, 1));
    goto corral_source_split_10127;

  corral_source_split_10127:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    goto corral_source_split_10128;

  corral_source_split_10128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1332} __dynamic_dev_dbg.ref.ref.ref.ref.ref.i32.ref.ref.i32($p3, $p33, .str.115, .str.114, $p1, $i35, $p41, $p9, $i43);
    goto corral_source_split_10129;

  corral_source_split_10129:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const isp1760_ep_dequeue: ref;

axiom isp1760_ep_dequeue == $sub.ref(0, 466999);

procedure isp1760_ep_dequeue($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.30, $M.0, $CurrAddr, $M.36, $M.38, assertsPassed, $M.1, $M.32, $M.40, $M.23, $M.22, $M.25, $M.24, $M.27, $M.26, $M.29, $M.28, $M.2, $M.4, $M.6, $M.8, $M.3, $M.5, $M.7, $M.9;



implementation isp1760_ep_dequeue($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i24;
  var $i14: i24;
  var $i15: i24;
  var $p16: ref;
  var $p17: ref;
  var $i18: i8;
  var $i19: i64;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $i34: i64;
  var $i35: i1;
  var $p37: ref;
  var $p36: ref;
  var $p38: ref;
  var $i39: i64;
  var $i40: i1;
  var $i41: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1359} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_10357;

  corral_source_split_10357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1360} $p3 := req_to_udc_req($p1);
    goto corral_source_split_10358;

  corral_source_split_10358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1361} $p4 := ep_to_udc_ep($p0);
    goto corral_source_split_10359;

  corral_source_split_10359:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 120)), $mul.ref(0, 1));
    goto corral_source_split_10360;

  corral_source_split_10360:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_10361;

  corral_source_split_10361:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_10362;

  corral_source_split_10362:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p7, .str.26);
    goto corral_source_split_10363;

  corral_source_split_10363:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_10364;

  corral_source_split_10364:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p8, .str.121);
    goto corral_source_split_10365;

  corral_source_split_10365:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_10366;

  corral_source_split_10366:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p9, .str.55);
    goto corral_source_split_10367;

  corral_source_split_10367:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_10368;

  corral_source_split_10368:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p10, .str.88);
    goto corral_source_split_10369;

  corral_source_split_10369:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_10370;

  corral_source_split_10370:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_10371;

  corral_source_split_10371:
    assume {:verifier.code 0} true;
    $i13 := $load.i24($M.16, $p12);
    goto corral_source_split_10372;

  corral_source_split_10372:
    assume {:verifier.code 0} true;
    $i14 := $and.i24($i13, $sub.i24(0, 262144));
    goto corral_source_split_10373;

  corral_source_split_10373:
    assume {:verifier.code 0} true;
    $i15 := $or.i24($i14, 918);
    goto corral_source_split_10374;

  corral_source_split_10374:
    assume {:verifier.code 0} true;
    $M.16 := $store.i24($M.16, $p12, $i15);
    goto corral_source_split_10375;

  corral_source_split_10375:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_10376;

  corral_source_split_10376:
    assume {:verifier.code 0} true;
    $M.17 := $store.i8($M.17, $p16, 0);
    goto corral_source_split_10377;

  corral_source_split_10377:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_10378;

  corral_source_split_10378:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.17, $p17);
    goto corral_source_split_10379;

  corral_source_split_10379:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i64($i18);
    goto corral_source_split_10380;

  corral_source_split_10380:
    assume {:verifier.code 0} true;
    $i20 := $and.i64($i19, 1);
    goto corral_source_split_10381;

  corral_source_split_10381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1362} $i21 := ldv__builtin_expect($i20, 0);
    call {:si_unique_call 1363} {:cexpr "tmp___1"} boogie_si_record_i64($i21);
    goto corral_source_split_10382;

  corral_source_split_10382:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_10383;

  corral_source_split_10383:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1365} ldv_spin_lock();
    goto corral_source_split_10396;

  corral_source_split_10396:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p3, $mul.ref(0, 120)), $mul.ref(104, 1));
    goto corral_source_split_10397;

  corral_source_split_10397:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_10398;

  corral_source_split_10398:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p32);
    goto corral_source_split_10399;

  corral_source_split_10399:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p4);
    goto corral_source_split_10400;

  corral_source_split_10400:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i33, $i34);
    goto corral_source_split_10401;

  corral_source_split_10401:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i35 == 1);
    goto corral_source_split_10405;

  corral_source_split_10405:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p3, $mul.ref(0, 120)), $mul.ref(88, 1));
    goto corral_source_split_10406;

  corral_source_split_10406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1366} list_del($p37);
    assume {:verifier.code 0} true;
    $p36 := $p3;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_10408;

  corral_source_split_10408:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p6, $mul.ref(0, 3640)), $mul.ref(1624, 1));
    goto corral_source_split_10409;

  corral_source_split_10409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1367} spin_unlock_irqrestore($p38, $u0);
    goto corral_source_split_10410;

  corral_source_split_10410:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($p36);
    goto corral_source_split_10411;

  corral_source_split_10411:
    assume {:verifier.code 0} true;
    $i40 := $eq.i64($i39, 0);
    goto corral_source_split_10412;

  corral_source_split_10412:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1368} isp1760_udc_request_complete($p4, $p36, $sub.i32(0, 104));
    goto SeqInstr_307, SeqInstr_308;

  SeqInstr_308:
    assume assertsPassed;
    goto SeqInstr_309;

  SeqInstr_309:
    goto corral_source_split_10418;

  corral_source_split_10418:
    assume {:verifier.code 0} true;
    $i41 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_10416;

  corral_source_split_10416:
    assume {:verifier.code 0} true;
    $r := $i41;
    return;

  SeqInstr_307:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i40 == 1;
    goto corral_source_split_10414;

  corral_source_split_10414:
    assume {:verifier.code 0} true;
    $i41 := $sub.i32(0, 22);
    goto $bb9;

  $bb4:
    assume $i35 == 1;
    goto corral_source_split_10403;

  corral_source_split_10403:
    assume {:verifier.code 0} true;
    $p36 := $0.ref;
    goto $bb6;

  $bb1:
    assume $i22 == 1;
    goto corral_source_split_10385;

  corral_source_split_10385:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p4, $mul.ref(0, 120)), $mul.ref(0, 1));
    goto corral_source_split_10386;

  corral_source_split_10386:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_10387;

  corral_source_split_10387:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 3640)), $mul.ref(0, 1));
    goto corral_source_split_10388;

  corral_source_split_10388:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_10389;

  corral_source_split_10389:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 6056)), $mul.ref(0, 1));
    goto corral_source_split_10390;

  corral_source_split_10390:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_10391;

  corral_source_split_10391:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p4, $mul.ref(0, 120)), $mul.ref(88, 1));
    goto corral_source_split_10392;

  corral_source_split_10392:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_10393;

  corral_source_split_10393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1364} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p2, $p28, .str.88, .str.121, $i30);
    goto corral_source_split_10394;

  corral_source_split_10394:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const isp1760_ep_set_halt: ref;

axiom isp1760_ep_set_halt == $sub.ref(0, 468031);

procedure isp1760_ep_set_halt($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.30, $M.0, $CurrAddr, $M.1, $M.32, $M.38, $M.36, $M.40, $M.23, $M.22, $M.25, $M.24, $M.27, $M.26, $M.29, $M.28, $M.2, $M.4, $M.6, $M.8, $M.3, $M.5, $M.7, $M.9, assertsPassed;



implementation isp1760_ep_set_halt($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i24;
  var $i11: i24;
  var $i12: i24;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1369} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 1370} {:cexpr "isp1760_ep_set_halt:arg:value"} boogie_si_record_i32($i1);
    goto corral_source_split_10420;

  corral_source_split_10420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1371} $p3 := ep_to_udc_ep($p0);
    goto corral_source_split_10421;

  corral_source_split_10421:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_10422;

  corral_source_split_10422:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p4, .str.26);
    goto corral_source_split_10423;

  corral_source_split_10423:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_10424;

  corral_source_split_10424:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p5, .str.126);
    goto corral_source_split_10425;

  corral_source_split_10425:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_10426;

  corral_source_split_10426:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p6, .str.55);
    goto corral_source_split_10427;

  corral_source_split_10427:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_10428;

  corral_source_split_10428:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p7, .str.92);
    goto corral_source_split_10429;

  corral_source_split_10429:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_10430;

  corral_source_split_10430:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_10431;

  corral_source_split_10431:
    assume {:verifier.code 0} true;
    $i10 := $load.i24($M.16, $p9);
    goto corral_source_split_10432;

  corral_source_split_10432:
    assume {:verifier.code 0} true;
    $i11 := $and.i24($i10, $sub.i24(0, 262144));
    goto corral_source_split_10433;

  corral_source_split_10433:
    assume {:verifier.code 0} true;
    $i12 := $or.i24($i11, 998);
    goto corral_source_split_10434;

  corral_source_split_10434:
    assume {:verifier.code 0} true;
    $M.16 := $store.i24($M.16, $p9, $i12);
    goto corral_source_split_10435;

  corral_source_split_10435:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_10436;

  corral_source_split_10436:
    assume {:verifier.code 0} true;
    $M.17 := $store.i8($M.17, $p13, 0);
    goto corral_source_split_10437;

  corral_source_split_10437:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_10438;

  corral_source_split_10438:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.17, $p14);
    goto corral_source_split_10439;

  corral_source_split_10439:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i64($i15);
    goto corral_source_split_10440;

  corral_source_split_10440:
    assume {:verifier.code 0} true;
    $i17 := $and.i64($i16, 1);
    goto corral_source_split_10441;

  corral_source_split_10441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1372} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 1373} {:cexpr "tmp___0"} boogie_si_record_i64($i18);
    goto corral_source_split_10442;

  corral_source_split_10442:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_10443;

  corral_source_split_10443:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1375} ldv_spin_lock();
    goto corral_source_split_10458;

  corral_source_split_10458:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i1, 0);
    goto corral_source_split_10459;

  corral_source_split_10459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1376} $i31 := __isp1760_ep_set_halt($p3, $i30, 0);
    goto SeqInstr_310, SeqInstr_311;

  SeqInstr_311:
    assume assertsPassed;
    goto SeqInstr_312;

  SeqInstr_312:
    call {:si_unique_call 1377} {:cexpr "ret"} boogie_si_record_i32($i31);
    goto corral_source_split_10460;

  corral_source_split_10460:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p3, $mul.ref(0, 120)), $mul.ref(0, 1));
    goto corral_source_split_10461;

  corral_source_split_10461:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_10462;

  corral_source_split_10462:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 3640)), $mul.ref(1624, 1));
    goto corral_source_split_10463;

  corral_source_split_10463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1378} spin_unlock_irqrestore($p34, $u0);
    goto corral_source_split_10464;

  corral_source_split_10464:
    assume {:verifier.code 0} true;
    $r := $i31;
    return;

  SeqInstr_310:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_10445;

  corral_source_split_10445:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 120)), $mul.ref(0, 1));
    goto corral_source_split_10446;

  corral_source_split_10446:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_10447;

  corral_source_split_10447:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 3640)), $mul.ref(0, 1));
    goto corral_source_split_10448;

  corral_source_split_10448:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_10449;

  corral_source_split_10449:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 6056)), $mul.ref(0, 1));
    goto corral_source_split_10450;

  corral_source_split_10450:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_10451;

  corral_source_split_10451:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i1, 0);
    goto corral_source_split_10452;

  corral_source_split_10452:
    assume {:verifier.code 0} true;
    $p27 := (if $i26 == 1 then .str.93 else .str.94);
    goto corral_source_split_10453;

  corral_source_split_10453:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p3, $mul.ref(0, 120)), $mul.ref(88, 1));
    goto corral_source_split_10454;

  corral_source_split_10454:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_10455;

  corral_source_split_10455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1374} __dynamic_dev_dbg.ref.ref.ref.ref.ref.i32($p2, $p25, .str.92, .str.126, $p27, $i29);
    goto corral_source_split_10456;

  corral_source_split_10456:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const isp1760_ep_set_wedge: ref;

axiom isp1760_ep_set_wedge == $sub.ref(0, 469063);

procedure isp1760_ep_set_wedge($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.30, $M.0, $CurrAddr, $M.1, $M.32, $M.38, $M.36, $M.40, $M.23, $M.22, $M.25, $M.24, $M.27, $M.26, $M.29, $M.28, $M.2, $M.4, $M.6, $M.8, $M.3, $M.5, $M.7, $M.9, assertsPassed;



implementation isp1760_ep_set_wedge($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i24;
  var $i10: i24;
  var $i11: i24;
  var $p12: ref;
  var $p13: ref;
  var $i14: i8;
  var $i15: i64;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1379} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_10466;

  corral_source_split_10466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1380} $p2 := ep_to_udc_ep($p0);
    goto corral_source_split_10467;

  corral_source_split_10467:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_10468;

  corral_source_split_10468:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p3, .str.26);
    goto corral_source_split_10469;

  corral_source_split_10469:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_10470;

  corral_source_split_10470:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p4, .str.122);
    goto corral_source_split_10471;

  corral_source_split_10471:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_10472;

  corral_source_split_10472:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p5, .str.55);
    goto corral_source_split_10473;

  corral_source_split_10473:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_10474;

  corral_source_split_10474:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p6, .str.123);
    goto corral_source_split_10475;

  corral_source_split_10475:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_10476;

  corral_source_split_10476:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_10477;

  corral_source_split_10477:
    assume {:verifier.code 0} true;
    $i9 := $load.i24($M.16, $p8);
    goto corral_source_split_10478;

  corral_source_split_10478:
    assume {:verifier.code 0} true;
    $i10 := $and.i24($i9, $sub.i24(0, 262144));
    goto corral_source_split_10479;

  corral_source_split_10479:
    assume {:verifier.code 0} true;
    $i11 := $or.i24($i10, 1014);
    goto corral_source_split_10480;

  corral_source_split_10480:
    assume {:verifier.code 0} true;
    $M.16 := $store.i24($M.16, $p8, $i11);
    goto corral_source_split_10481;

  corral_source_split_10481:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_10482;

  corral_source_split_10482:
    assume {:verifier.code 0} true;
    $M.17 := $store.i8($M.17, $p12, 0);
    goto corral_source_split_10483;

  corral_source_split_10483:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_10484;

  corral_source_split_10484:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.17, $p13);
    goto corral_source_split_10485;

  corral_source_split_10485:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i64($i14);
    goto corral_source_split_10486;

  corral_source_split_10486:
    assume {:verifier.code 0} true;
    $i16 := $and.i64($i15, 1);
    goto corral_source_split_10487;

  corral_source_split_10487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1381} $i17 := ldv__builtin_expect($i16, 0);
    call {:si_unique_call 1382} {:cexpr "tmp___0"} boogie_si_record_i64($i17);
    goto corral_source_split_10488;

  corral_source_split_10488:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_10489;

  corral_source_split_10489:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1384} ldv_spin_lock();
    goto corral_source_split_10502;

  corral_source_split_10502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1385} $i27 := __isp1760_ep_set_halt($p2, 1, 1);
    goto SeqInstr_313, SeqInstr_314;

  SeqInstr_314:
    assume assertsPassed;
    goto SeqInstr_315;

  SeqInstr_315:
    call {:si_unique_call 1386} {:cexpr "ret"} boogie_si_record_i32($i27);
    goto corral_source_split_10503;

  corral_source_split_10503:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 120)), $mul.ref(0, 1));
    goto corral_source_split_10504;

  corral_source_split_10504:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_10505;

  corral_source_split_10505:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 3640)), $mul.ref(1624, 1));
    goto corral_source_split_10506;

  corral_source_split_10506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1387} spin_unlock_irqrestore($p30, $u0);
    goto corral_source_split_10507;

  corral_source_split_10507:
    assume {:verifier.code 0} true;
    $r := $i27;
    return;

  SeqInstr_313:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_10491;

  corral_source_split_10491:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 120)), $mul.ref(0, 1));
    goto corral_source_split_10492;

  corral_source_split_10492:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_10493;

  corral_source_split_10493:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 3640)), $mul.ref(0, 1));
    goto corral_source_split_10494;

  corral_source_split_10494:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_10495;

  corral_source_split_10495:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 6056)), $mul.ref(0, 1));
    goto corral_source_split_10496;

  corral_source_split_10496:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.43, $p23);
    goto corral_source_split_10497;

  corral_source_split_10497:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 120)), $mul.ref(88, 1));
    goto corral_source_split_10498;

  corral_source_split_10498:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_10499;

  corral_source_split_10499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1383} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p1, $p24, .str.123, .str.122, $i26);
    goto corral_source_split_10500;

  corral_source_split_10500:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const isp1760_ep_fifo_flush: ref;

axiom isp1760_ep_fifo_flush == $sub.ref(0, 470095);

procedure isp1760_ep_fifo_flush($p0: ref);
  free requires assertsPassed;
  modifies $M.30;



implementation isp1760_ep_fifo_flush($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10509;

  corral_source_split_10509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1388} $p1 := ep_to_udc_ep($p0);
    goto corral_source_split_10510;

  corral_source_split_10510:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 120)), $mul.ref(0, 1));
    goto corral_source_split_10511;

  corral_source_split_10511:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_10512;

  corral_source_split_10512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1389} ldv_spin_lock();
    goto corral_source_split_10513;

  corral_source_split_10513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1390} isp1760_udc_select_ep($p1);
    goto corral_source_split_10514;

  corral_source_split_10514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1391} isp1760_udc_write($p3, 552, 16);
    goto corral_source_split_10515;

  corral_source_split_10515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1392} isp1760_udc_write($p3, 552, 16);
    goto corral_source_split_10516;

  corral_source_split_10516:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 3640)), $mul.ref(1624, 1));
    goto corral_source_split_10517;

  corral_source_split_10517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1393} spin_unlock_irqrestore($p4, $u0);
    goto corral_source_split_10518;

  corral_source_split_10518:
    assume {:verifier.code 0} true;
    return;
}



const ep_to_udc_ep: ref;

axiom ep_to_udc_ep == $sub.ref(0, 471127);

procedure ep_to_udc_ep($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation ep_to_udc_ep($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10520;

  corral_source_split_10520:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_10521;

  corral_source_split_10521:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 8), 120));
    goto corral_source_split_10522;

  corral_source_split_10522:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __isp1760_ep_set_halt: ref;

axiom __isp1760_ep_set_halt == $sub.ref(0, 472159);

procedure __isp1760_ep_set_halt($p0: ref, $i1: i1, $i2: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.0, $CurrAddr, $M.1, $M.32, $M.30, $M.38, $M.36, $M.40, $M.23, $M.22, $M.25, $M.24, $M.27, $M.26, $M.29, $M.28, $M.2, $M.4, $M.6, $M.8, $M.3, $M.5, $M.7, $M.9, assertsPassed;



implementation __isp1760_ep_set_halt($p0: ref, $i1: i1, $i2: i1) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var $i6: i8;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $i16: i1;
  var $i17: i1;
  var $i15: i1;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i64;
  var $i22: i64;
  var $i23: i1;
  var $i24: i1;
  var $i25: i32;
  var $i26: i64;
  var $i27: i64;
  var $i28: i1;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i24;
  var $i44: i24;
  var $i45: i24;
  var $p46: ref;
  var $p47: ref;
  var $i48: i8;
  var $i49: i64;
  var $i50: i64;
  var $i51: i64;
  var $i52: i1;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $i58: i32;
  var $p59: ref;
  var $i60: i32;
  var $i61: i32;
  var $i62: i1;
  var $p63: ref;
  var $i64: i32;
  var $i65: i1;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $i72: i24;
  var $i73: i24;
  var $i74: i24;
  var $p75: ref;
  var $p76: ref;
  var $i77: i8;
  var $i78: i64;
  var $i79: i64;
  var $i80: i64;
  var $i81: i1;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $i87: i32;
  var $i88: i1;
  var $i89: i32;
  var $i90: i1;
  var $p91: ref;
  var $i92: i32;
  var $i93: i1;
  var $p94: ref;
  var $i95: i1;
  var $p96: ref;
  var $i97: i1;
  var $p98: ref;
  var $i29: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1394} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1395} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i8($i1);
    call {:si_unique_call 1396} {:cexpr "__isp1760_ep_set_halt:arg:stall"} boogie_si_record_i1($i1);
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i2);
    call {:si_unique_call 1397} {:cexpr "__isp1760_ep_set_halt:arg:wedge"} boogie_si_record_i1($i2);
    goto corral_source_split_10524;

  corral_source_split_10524:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 120)), $mul.ref(0, 1));
    goto corral_source_split_10525;

  corral_source_split_10525:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_10526;

  corral_source_split_10526:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 120)), $mul.ref(88, 1));
    goto corral_source_split_10527;

  corral_source_split_10527:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_10528;

  corral_source_split_10528:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_10529;

  corral_source_split_10529:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 120)), $mul.ref(88, 1));
    goto corral_source_split_10563;

  corral_source_split_10563:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_10564;

  corral_source_split_10564:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_10565;

  corral_source_split_10565:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 120)), $mul.ref(88, 1));
    goto corral_source_split_10606;

  corral_source_split_10606:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.0, $p59);
    goto corral_source_split_10607;

  corral_source_split_10607:
    assume {:verifier.code 0} true;
    $i61 := $and.i32($i60, 128);
    goto corral_source_split_10608;

  corral_source_split_10608:
    assume {:verifier.code 0} true;
    $i62 := $ne.i32($i61, 0);
    goto corral_source_split_10609;

  corral_source_split_10609:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i88 := $trunc.i8.i1($i5);
    goto corral_source_split_10649;

  corral_source_split_10649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1412} $i89 := __isp1760_udc_set_halt($p0, $i88);
    goto SeqInstr_316, SeqInstr_317;

  SeqInstr_317:
    assume assertsPassed;
    goto SeqInstr_318;

  SeqInstr_318:
    call {:si_unique_call 1413} {:cexpr "ret"} boogie_si_record_i32($i89);
    goto corral_source_split_10650;

  corral_source_split_10650:
    assume {:verifier.code 0} true;
    $i90 := $slt.i32($i89, 0);
    goto corral_source_split_10651;

  corral_source_split_10651:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p0, $mul.ref(0, 120)), $mul.ref(88, 1));
    goto corral_source_split_10655;

  corral_source_split_10655:
    assume {:verifier.code 0} true;
    $i92 := $load.i32($M.0, $p91);
    goto corral_source_split_10656;

  corral_source_split_10656:
    assume {:verifier.code 0} true;
    $i93 := $eq.i32($i92, 0);
    goto corral_source_split_10657;

  corral_source_split_10657:
    assume {:verifier.code 0} true;
    assume {:branchcond $i93} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i95 := $trunc.i8.i1($i6);
    goto corral_source_split_10663;

  corral_source_split_10663:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i95 == 1);
    goto corral_source_split_10669;

  corral_source_split_10669:
    assume {:verifier.code 0} true;
    $i97 := $trunc.i8.i1($i5);
    goto corral_source_split_10670;

  corral_source_split_10670:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i97 == 1);
    goto corral_source_split_10672;

  corral_source_split_10672:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p0, $mul.ref(0, 120)), $mul.ref(114, 1));
    goto corral_source_split_10673;

  corral_source_split_10673:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p98, 0);
    goto corral_source_split_10674;

  corral_source_split_10674:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i29 := 0;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_10561;

  corral_source_split_10561:
    assume {:verifier.code 0} true;
    $r := $i29;
    return;

  $bb43:
    assume $i97 == 1;
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb40:
    assume $i95 == 1;
    goto corral_source_split_10665;

  corral_source_split_10665:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p0, $mul.ref(0, 120)), $mul.ref(114, 1));
    goto corral_source_split_10666;

  corral_source_split_10666:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p96, 1);
    goto corral_source_split_10667;

  corral_source_split_10667:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb37:
    assume $i93 == 1;
    goto corral_source_split_10659;

  corral_source_split_10659:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p8, $mul.ref(0, 3640)), $mul.ref(3624, 1));
    goto corral_source_split_10660;

  corral_source_split_10660:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p94, 0);
    goto corral_source_split_10661;

  corral_source_split_10661:
    assume {:verifier.code 0} true;
    $i29 := 0;
    goto $bb13;

  $bb34:
    assume $i90 == 1;
    goto corral_source_split_10653;

  corral_source_split_10653:
    assume {:verifier.code 0} true;
    $i29 := $i89;
    goto $bb13;

  SeqInstr_316:
    assume !assertsPassed;
    return;

  $bb25:
    assume $i62 == 1;
    goto corral_source_split_10611;

  corral_source_split_10611:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 120)), $mul.ref(72, 1));
    goto corral_source_split_10612;

  corral_source_split_10612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1407} $i64 := list_empty($p63);
    call {:si_unique_call 1408} {:cexpr "tmp___3"} boogie_si_record_i32($i64);
    goto corral_source_split_10613;

  corral_source_split_10613:
    assume {:verifier.code 0} true;
    $i65 := $eq.i32($i64, 0);
    goto corral_source_split_10614;

  corral_source_split_10614:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb27:
    assume $i65 == 1;
    goto corral_source_split_10616;

  corral_source_split_10616:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_10617;

  corral_source_split_10617:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p66, .str.26);
    goto corral_source_split_10618;

  corral_source_split_10618:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_10619;

  corral_source_split_10619:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p67, .str.124);
    goto corral_source_split_10620;

  corral_source_split_10620:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_10621;

  corral_source_split_10621:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p68, .str.55);
    goto corral_source_split_10622;

  corral_source_split_10622:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_10623;

  corral_source_split_10623:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p69, .str.125);
    goto corral_source_split_10624;

  corral_source_split_10624:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_10625;

  corral_source_split_10625:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p70);
    goto corral_source_split_10626;

  corral_source_split_10626:
    assume {:verifier.code 0} true;
    $i72 := $load.i24($M.16, $p71);
    goto corral_source_split_10627;

  corral_source_split_10627:
    assume {:verifier.code 0} true;
    $i73 := $and.i24($i72, $sub.i24(0, 262144));
    goto corral_source_split_10628;

  corral_source_split_10628:
    assume {:verifier.code 0} true;
    $i74 := $or.i24($i73, 965);
    goto corral_source_split_10629;

  corral_source_split_10629:
    assume {:verifier.code 0} true;
    $M.16 := $store.i24($M.16, $p71, $i74);
    goto corral_source_split_10630;

  corral_source_split_10630:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_10631;

  corral_source_split_10631:
    assume {:verifier.code 0} true;
    $M.17 := $store.i8($M.17, $p75, 0);
    goto corral_source_split_10632;

  corral_source_split_10632:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_10633;

  corral_source_split_10633:
    assume {:verifier.code 0} true;
    $i77 := $load.i8($M.17, $p76);
    goto corral_source_split_10634;

  corral_source_split_10634:
    assume {:verifier.code 0} true;
    $i78 := $zext.i8.i64($i77);
    goto corral_source_split_10635;

  corral_source_split_10635:
    assume {:verifier.code 0} true;
    $i79 := $and.i64($i78, 1);
    goto corral_source_split_10636;

  corral_source_split_10636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1409} $i80 := ldv__builtin_expect($i79, 0);
    call {:si_unique_call 1410} {:cexpr "tmp___2"} boogie_si_record_i64($i80);
    goto corral_source_split_10637;

  corral_source_split_10637:
    assume {:verifier.code 0} true;
    $i81 := $ne.i64($i80, 0);
    goto corral_source_split_10638;

  corral_source_split_10638:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(0, 11);
    goto $bb13;

  $bb29:
    assume $i81 == 1;
    goto corral_source_split_10640;

  corral_source_split_10640:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p8, $mul.ref(0, 3640)), $mul.ref(0, 1));
    goto corral_source_split_10641;

  corral_source_split_10641:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.0, $p82);
    goto corral_source_split_10642;

  corral_source_split_10642:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p83, $mul.ref(0, 6056)), $mul.ref(0, 1));
    goto corral_source_split_10643;

  corral_source_split_10643:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.0, $p84);
    goto corral_source_split_10644;

  corral_source_split_10644:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p0, $mul.ref(0, 120)), $mul.ref(88, 1));
    goto corral_source_split_10645;

  corral_source_split_10645:
    assume {:verifier.code 0} true;
    $i87 := $load.i32($M.0, $p86);
    goto corral_source_split_10646;

  corral_source_split_10646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1411} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p4, $p85, .str.125, .str.124, $i87);
    goto corral_source_split_10647;

  corral_source_split_10647:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb16:
    assume $i32 == 1;
    goto corral_source_split_10567;

  corral_source_split_10567:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 120)), $mul.ref(104, 1));
    goto corral_source_split_10568;

  corral_source_split_10568:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_10569;

  corral_source_split_10569:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    goto corral_source_split_10570;

  corral_source_split_10570:
    assume {:verifier.code 0} true;
    $i36 := $eq.i64($i35, 0);
    goto corral_source_split_10571;

  corral_source_split_10571:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb18;

  $bb19:
    assume $i36 == 1;
    goto corral_source_split_10573;

  corral_source_split_10573:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_10574;

  corral_source_split_10574:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p37, .str.26);
    goto corral_source_split_10575;

  corral_source_split_10575:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_10576;

  corral_source_split_10576:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p38, .str.124);
    goto corral_source_split_10577;

  corral_source_split_10577:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_10578;

  corral_source_split_10578:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p39, .str.55);
    goto corral_source_split_10579;

  corral_source_split_10579:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_10580;

  corral_source_split_10580:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p40, .str.78);
    goto corral_source_split_10581;

  corral_source_split_10581:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_10582;

  corral_source_split_10582:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_10583;

  corral_source_split_10583:
    assume {:verifier.code 0} true;
    $i43 := $load.i24($M.16, $p42);
    goto corral_source_split_10584;

  corral_source_split_10584:
    assume {:verifier.code 0} true;
    $i44 := $and.i24($i43, $sub.i24(0, 262144));
    goto corral_source_split_10585;

  corral_source_split_10585:
    assume {:verifier.code 0} true;
    $i45 := $or.i24($i44, 956);
    goto corral_source_split_10586;

  corral_source_split_10586:
    assume {:verifier.code 0} true;
    $M.16 := $store.i24($M.16, $p42, $i45);
    goto corral_source_split_10587;

  corral_source_split_10587:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_10588;

  corral_source_split_10588:
    assume {:verifier.code 0} true;
    $M.17 := $store.i8($M.17, $p46, 0);
    goto corral_source_split_10589;

  corral_source_split_10589:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_10590;

  corral_source_split_10590:
    assume {:verifier.code 0} true;
    $i48 := $load.i8($M.17, $p47);
    goto corral_source_split_10591;

  corral_source_split_10591:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i64($i48);
    goto corral_source_split_10592;

  corral_source_split_10592:
    assume {:verifier.code 0} true;
    $i50 := $and.i64($i49, 1);
    goto corral_source_split_10593;

  corral_source_split_10593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1404} $i51 := ldv__builtin_expect($i50, 0);
    call {:si_unique_call 1405} {:cexpr "tmp___1"} boogie_si_record_i64($i51);
    goto corral_source_split_10594;

  corral_source_split_10594:
    assume {:verifier.code 0} true;
    $i52 := $ne.i64($i51, 0);
    goto corral_source_split_10595;

  corral_source_split_10595:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(0, 22);
    goto $bb13;

  $bb21:
    assume $i52 == 1;
    goto corral_source_split_10597;

  corral_source_split_10597:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p8, $mul.ref(0, 3640)), $mul.ref(0, 1));
    goto corral_source_split_10598;

  corral_source_split_10598:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_10599;

  corral_source_split_10599:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p54, $mul.ref(0, 6056)), $mul.ref(0, 1));
    goto corral_source_split_10600;

  corral_source_split_10600:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    goto corral_source_split_10601;

  corral_source_split_10601:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 120)), $mul.ref(88, 1));
    goto corral_source_split_10602;

  corral_source_split_10602:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.0, $p57);
    goto corral_source_split_10603;

  corral_source_split_10603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1406} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p3, $p56, .str.78, .str.124, $i58);
    goto corral_source_split_10604;

  corral_source_split_10604:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_10531;

  corral_source_split_10531:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p8, $mul.ref(0, 3640)), $mul.ref(3624, 1));
    goto corral_source_split_10532;

  corral_source_split_10532:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_10533;

  corral_source_split_10533:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 0);
    goto corral_source_split_10534;

  corral_source_split_10534:
    assume {:verifier.code 0} true;
    $i15 := 1;
    assume true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i14 == 1);
    goto corral_source_split_10544;

  corral_source_split_10544:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i8.i1($i5);
    goto corral_source_split_10545;

  corral_source_split_10545:
    assume {:verifier.code 0} true;
    $i15 := 1;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_10536;

  corral_source_split_10536:
    assume {:verifier.code 0} true;
    $i18 := $zext.i1.i32($i15);
    call {:si_unique_call 1398} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i18);
    goto corral_source_split_10537;

  corral_source_split_10537:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_10538;

  corral_source_split_10538:
    assume {:verifier.code 0} true;
    $i20 := $zext.i1.i32($i19);
    goto corral_source_split_10539;

  corral_source_split_10539:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i20);
    goto corral_source_split_10540;

  corral_source_split_10540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1399} $i22 := ldv__builtin_expect($i21, 0);
    call {:si_unique_call 1400} {:cexpr "tmp"} boogie_si_record_i64($i22);
    goto corral_source_split_10541;

  corral_source_split_10541:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_10542;

  corral_source_split_10542:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i18, 0);
    goto corral_source_split_10553;

  corral_source_split_10553:
    assume {:verifier.code 0} true;
    $i25 := $zext.i1.i32($i24);
    goto corral_source_split_10554;

  corral_source_split_10554:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i25);
    goto corral_source_split_10555;

  corral_source_split_10555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1402} $i27 := ldv__builtin_expect($i26, 0);
    call {:si_unique_call 1403} {:cexpr "tmp___0"} boogie_si_record_i64($i27);
    goto corral_source_split_10556;

  corral_source_split_10556:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_10557;

  corral_source_split_10557:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb11:
    assume $i28 == 1;
    goto corral_source_split_10559;

  corral_source_split_10559:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(0, 22);
    goto $bb13;

  $bb8:
    assume $i23 == 1;
    goto corral_source_split_10550;

  corral_source_split_10550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1401} warn_slowpath_null(.str.55, 949);
    goto corral_source_split_10551;

  corral_source_split_10551:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb6:
    assume $i16 == 1;
    goto corral_source_split_10547;

  corral_source_split_10547:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i8.i1($i6);
    goto corral_source_split_10548;

  corral_source_split_10548:
    assume {:verifier.code 0} true;
    $i15 := $i17;
    goto $bb4;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb4;
}



const req_to_udc_req: ref;

axiom req_to_udc_req == $sub.ref(0, 473191);

procedure req_to_udc_req($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation req_to_udc_req($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10676;

  corral_source_split_10676:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_10677;

  corral_source_split_10677:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const list_splice_init: ref;

axiom list_splice_init == $sub.ref(0, 474223);

procedure list_splice_init($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation list_splice_init($p0: ref, $p1: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10679;

  corral_source_split_10679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1414} $i2 := list_empty($p0);
    call {:si_unique_call 1415} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_10680;

  corral_source_split_10680:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_10681;

  corral_source_split_10681:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_10683;

  corral_source_split_10683:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_10684;

  corral_source_split_10684:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_10685;

  corral_source_split_10685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1416} __list_splice($p0, $p1, $p5);
    goto corral_source_split_10686;

  corral_source_split_10686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1417} INIT_LIST_HEAD($p0);
    goto corral_source_split_10687;

  corral_source_split_10687:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const usb_endpoint_type: ref;

axiom usb_endpoint_type == $sub.ref(0, 475255);

procedure usb_endpoint_type($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_type($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10689;

  corral_source_split_10689:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 10)), $mul.ref(3, 1));
    goto corral_source_split_10690;

  corral_source_split_10690:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_10691;

  corral_source_split_10691:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_10692;

  corral_source_split_10692:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 3);
    goto corral_source_split_10693;

  corral_source_split_10693:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ldv_init_zalloc: ref;

axiom ldv_init_zalloc == $sub.ref(0, 476287);

procedure ldv_init_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_init_zalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1418} {:cexpr "ldv_init_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_10695;

  corral_source_split_10695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1419} $p1 := calloc(1, $i0);
    goto corral_source_split_10696;

  corral_source_split_10696:
    assume {:verifier.code 1} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_10697;

  corral_source_split_10697:
    assume {:verifier.code 1} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_10698;

  corral_source_split_10698:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_10699;

  corral_source_split_10699:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1420} __VERIFIER_assume($i4);
    goto corral_source_split_10700;

  corral_source_split_10700:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const ldv_memset: ref;

axiom ldv_memset == $sub.ref(0, 477319);

procedure ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.44;



implementation ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref)
{
  var $i3: i8;
  var cmdloc_dummy_var_8: [ref]i8;
  var cmdloc_dummy_var_9: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1421} {:cexpr "ldv_memset:arg:c"} boogie_si_record_i32($i1);
    call {:si_unique_call 1422} {:cexpr "ldv_memset:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_10702;

  corral_source_split_10702:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i8($i1);
    goto corral_source_split_10703;

  corral_source_split_10703:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_8 := $M.44;
    call {:si_unique_call 1423} cmdloc_dummy_var_9 := $memset.i8(cmdloc_dummy_var_8, $p0, $i3, $i2, $zext.i32.i64(1), 0 == 1);
    $M.44 := cmdloc_dummy_var_9;
    goto corral_source_split_10704;

  corral_source_split_10704:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv_platform_driver_init_7: ref;

axiom ldv_platform_driver_init_7 == $sub.ref(0, 478351);

procedure ldv_platform_driver_init_7();
  free requires assertsPassed;
  modifies $M.45, $M.0, $CurrAddr;



implementation ldv_platform_driver_init_7()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10706;

  corral_source_split_10706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1424} $p0 := ldv_init_zalloc(1472);
    goto corral_source_split_10707;

  corral_source_split_10707:
    assume {:verifier.code 0} true;
    goto corral_source_split_10708;

  corral_source_split_10708:
    assume {:verifier.code 0} true;
    $M.45 := $p0;
    goto corral_source_split_10709;

  corral_source_split_10709:
    assume {:verifier.code 0} true;
    return;
}



const ldv_pci_driver_8: ref;

axiom ldv_pci_driver_8 == $sub.ref(0, 479383);

procedure ldv_pci_driver_8();
  free requires assertsPassed;
  modifies $M.46, $M.0, $CurrAddr;



implementation ldv_pci_driver_8()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10711;

  corral_source_split_10711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1425} $p0 := ldv_init_zalloc(2976);
    goto corral_source_split_10712;

  corral_source_split_10712:
    assume {:verifier.code 0} true;
    goto corral_source_split_10713;

  corral_source_split_10713:
    assume {:verifier.code 0} true;
    $M.46 := $p0;
    goto corral_source_split_10714;

  corral_source_split_10714:
    assume {:verifier.code 0} true;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 480415);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.47, $M.49, $M.51, $M.53, $M.54, $M.55, $M.56, $M.1, $M.57, $M.58, $M.59, $M.0, $M.60, $M.61, $M.8, $M.2, $M.6, $M.4, $M.45, $M.46, $M.68, $M.66, $M.69, $M.67, $M.22, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.3, $M.5, $M.7, $M.9, $M.71, $M.72, $M.70, $M.30, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.131, $M.132, $M.35, $M.39, $M.37, $M.156, $M.157, $CurrAddr, $M.44, $M.32, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.40, $M.38, $M.36, assertsPassed;



implementation main() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $i34: i32;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $i38: i32;
  var $i39: i32;
  var $i40: i1;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $i44: i32;
  var $i45: i32;
  var $i46: i1;
  var $i47: i32;
  var $i48: i32;
  var $i49: i32;
  var $i50: i1;
  var $i51: i32;
  var $i52: i1;
  var $i53: i1;
  var $i54: i1;
  var $i55: i1;
  var $i56: i32;
  var $i57: i1;
  var $p58: ref;
  var $i59: i32;
  var $i60: i32;
  var $i61: i1;
  var $i62: i32;
  var $i63: i32;
  var $i64: i32;
  var $i65: i1;
  var $p66: ref;
  var $i67: i32;
  var $i68: i1;
  var $p69: ref;
  var $i70: i32;
  var $i71: i1;
  var $i72: i32;
  var $i73: i1;
  var $i74: i32;
  var $i75: i1;
  var $i76: i1;
  var $i77: i1;
  var $i78: i32;
  var $i79: i1;
  var $i80: i32;
  var $i81: i1;
  var $i82: i32;
  var $i83: i1;
  var $i84: i32;
  var $i85: i32;
  var $i86: i1;
  var $i87: i32;
  var $i88: i1;
  var $i89: i32;
  var $i90: i1;

  $bb0:
    call {:si_unique_call 1426} $initialize();
    goto corral_source_split_10716;

  corral_source_split_10716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1427} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    goto corral_source_split_10717;

  corral_source_split_10717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1428} $p0 := ldv_init_zalloc(32);
    goto corral_source_split_10718;

  corral_source_split_10718:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_10719;

  corral_source_split_10719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1429} ldv_initialize();
    goto corral_source_split_10720;

  corral_source_split_10720:
    assume {:verifier.code 0} true;
    $M.47 := 0;
    call {:si_unique_call 1430} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    goto corral_source_split_10721;

  corral_source_split_10721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1431} timer_init_3();
    goto corral_source_split_10722;

  corral_source_split_10722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1432} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_10723;

  corral_source_split_10723:
    assume {:verifier.code 0} true;
    $M.49 := 0;
    call {:si_unique_call 1433} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    goto corral_source_split_10724;

  corral_source_split_10724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1434} timer_init_2();
    goto corral_source_split_10725;

  corral_source_split_10725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1435} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_10726;

  corral_source_split_10726:
    assume {:verifier.code 0} true;
    $M.51 := 0;
    call {:si_unique_call 1436} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(0);
    goto corral_source_split_10727;

  corral_source_split_10727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1437} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_10728;

  corral_source_split_10728:
    assume {:verifier.code 0} true;
    $M.53 := 0;
    call {:si_unique_call 1438} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    goto corral_source_split_10729;

  corral_source_split_10729:
    assume {:verifier.code 0} true;
    $M.54 := 0;
    call {:si_unique_call 1439} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_10730;

  corral_source_split_10730:
    assume {:verifier.code 0} true;
    $M.55 := 1;
    call {:si_unique_call 1440} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_10731;

  corral_source_split_10731:
    assume {:verifier.code 0} true;
    $M.56 := 0;
    call {:si_unique_call 1441} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    goto corral_source_split_10732;

  corral_source_split_10732:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $p23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $p33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $p43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $p58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $p66, $i67, $i68, $p69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90 := main_loop_$bb1($p1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $p23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $p33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $p43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $p58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $p66, $i67, $i68, $p69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i2, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i2, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i2, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i2, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i2, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1496} ldv_stop();
    goto corral_source_split_10920;

  corral_source_split_10920:
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb27_dummy;

  $bb11:
    assume $i7 == 1;
    goto corral_source_split_10742;

  corral_source_split_10742:
    assume {:verifier.code 0} true;
    $i89 := $M.56;
    goto corral_source_split_10743;

  corral_source_split_10743:
    assume {:verifier.code 0} true;
    $i90 := $ne.i32($i89, 0);
    goto corral_source_split_10744;

  corral_source_split_10744:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb127, $bb128;

  $bb128:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb127:
    assume $i90 == 1;
    goto corral_source_split_10917;

  corral_source_split_10917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1495} ldv_main_exported_5();
    goto SeqInstr_331, SeqInstr_332;

  SeqInstr_332:
    assume assertsPassed;
    goto SeqInstr_333;

  SeqInstr_333:
    goto corral_source_split_10918;

  corral_source_split_10918:
    assume {:verifier.code 0} true;
    goto $bb129;

  SeqInstr_331:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i6 == 1;
    goto corral_source_split_10738;

  corral_source_split_10738:
    assume {:verifier.code 0} true;
    $i72 := $M.55;
    goto corral_source_split_10739;

  corral_source_split_10739:
    assume {:verifier.code 0} true;
    $i73 := $ne.i32($i72, 0);
    goto corral_source_split_10740;

  corral_source_split_10740:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb97:
    assume $i73 == 1;
    goto corral_source_split_10874;

  corral_source_split_10874:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1478} $i74 := __VERIFIER_nondet_int();
    call {:si_unique_call 1479} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i74);
    call {:si_unique_call 1480} {:cexpr "tmp___3"} boogie_si_record_i32($i74);
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    $i75 := $slt.i32($i74, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    $i76 := $eq.i32($i74, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb102, $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    assume !($i76 == 1);
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1494} ldv_stop();
    goto corral_source_split_10915;

  corral_source_split_10915:
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb102:
    assume $i76 == 1;
    goto corral_source_split_10876;

  corral_source_split_10876:
    assume {:verifier.code 0} true;
    $i82 := $M.55;
    goto corral_source_split_10877;

  corral_source_split_10877:
    assume {:verifier.code 0} true;
    $i83 := $eq.i32($i82, 1);
    goto corral_source_split_10878;

  corral_source_split_10878:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb115, $bb116;

  $bb116:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb115:
    assume $i83 == 1;
    goto corral_source_split_10894;

  corral_source_split_10894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1484} $i84 := isp1760_init();
    goto corral_source_split_10895;

  corral_source_split_10895:
    assume {:verifier.code 0} true;
    $M.61 := $i84;
    call {:si_unique_call 1485} {:cexpr "ldv_retval_4"} boogie_si_record_i32($i84);
    goto corral_source_split_10896;

  corral_source_split_10896:
    assume {:verifier.code 0} true;
    $i85 := $M.61;
    goto corral_source_split_10897;

  corral_source_split_10897:
    assume {:verifier.code 0} true;
    $i86 := $eq.i32($i85, 0);
    goto corral_source_split_10898;

  corral_source_split_10898:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb117, $bb118;

  $bb118:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    $i87 := $M.61;
    goto corral_source_split_10909;

  corral_source_split_10909:
    assume {:verifier.code 0} true;
    $i88 := $ne.i32($i87, 0);
    goto corral_source_split_10910;

  corral_source_split_10910:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb120, $bb121;

  $bb121:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb120:
    assume $i88 == 1;
    goto corral_source_split_10912;

  corral_source_split_10912:
    assume {:verifier.code 0} true;
    $M.55 := 2;
    call {:si_unique_call 1493} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_10913;

  corral_source_split_10913:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1483} ldv_check_final_state();
    goto corral_source_split_10892;

  corral_source_split_10892:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb117:
    assume $i86 == 1;
    goto corral_source_split_10900;

  corral_source_split_10900:
    assume {:verifier.code 0} true;
    $M.55 := 3;
    call {:si_unique_call 1486} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_10901;

  corral_source_split_10901:
    assume {:verifier.code 0} true;
    $M.56 := 1;
    call {:si_unique_call 1487} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_10902;

  corral_source_split_10902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1488} ldv_initialize_usb_ep_ops_5();
    goto corral_source_split_10903;

  corral_source_split_10903:
    assume {:verifier.code 0} true;
    $M.53 := 1;
    call {:si_unique_call 1489} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_10904;

  corral_source_split_10904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1490} ldv_initialize_usb_gadget_ops_4();
    goto corral_source_split_10905;

  corral_source_split_10905:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 1491} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_10906;

  corral_source_split_10906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1492} ldv_initialize_hc_driver_6();
    goto corral_source_split_10907;

  corral_source_split_10907:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb100:
    assume $i75 == 1;
    assume {:verifier.code 0} true;
    $i77 := $eq.i32($i74, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105, $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    assume !($i77 == 1);
    goto $bb104;

  $bb105:
    assume $i77 == 1;
    goto corral_source_split_10880;

  corral_source_split_10880:
    assume {:verifier.code 0} true;
    $i78 := $M.55;
    goto corral_source_split_10881;

  corral_source_split_10881:
    assume {:verifier.code 0} true;
    $i79 := $eq.i32($i78, 3);
    goto corral_source_split_10882;

  corral_source_split_10882:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    assume !($i79 == 1);
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb107:
    assume $i79 == 1;
    goto corral_source_split_10884;

  corral_source_split_10884:
    assume {:verifier.code 0} true;
    $i80 := $M.54;
    goto corral_source_split_10885;

  corral_source_split_10885:
    assume {:verifier.code 0} true;
    $i81 := $eq.i32($i80, 0);
    goto corral_source_split_10886;

  corral_source_split_10886:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    assume !($i81 == 1);
    goto $bb109;

  $bb110:
    assume $i81 == 1;
    goto corral_source_split_10888;

  corral_source_split_10888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1481} isp1760_exit();
    goto corral_source_split_10889;

  corral_source_split_10889:
    assume {:verifier.code 0} true;
    $M.55 := 2;
    call {:si_unique_call 1482} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_10890;

  corral_source_split_10890:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb7:
    assume $i5 == 1;
    goto corral_source_split_10734;

  corral_source_split_10734:
    assume {:verifier.code 0} true;
    $i70 := $M.53;
    goto corral_source_split_10735;

  corral_source_split_10735:
    assume {:verifier.code 0} true;
    $i71 := $ne.i32($i70, 0);
    goto corral_source_split_10736;

  corral_source_split_10736:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  $bb95:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb94:
    assume $i71 == 1;
    goto corral_source_split_10871;

  corral_source_split_10871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1477} ldv_main_exported_4();
    goto SeqInstr_328, SeqInstr_329;

  SeqInstr_329:
    assume assertsPassed;
    goto SeqInstr_330;

  SeqInstr_330:
    goto corral_source_split_10872;

  corral_source_split_10872:
    assume {:verifier.code 0} true;
    goto $bb96;

  SeqInstr_328:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i2, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i8 == 1);
    goto corral_source_split_10750;

  corral_source_split_10750:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb14:
    assume $i8 == 1;
    goto corral_source_split_10746;

  corral_source_split_10746:
    assume {:verifier.code 0} true;
    $i49 := $M.51;
    goto corral_source_split_10747;

  corral_source_split_10747:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i49, 0);
    goto corral_source_split_10748;

  corral_source_split_10748:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb66:
    assume $i50 == 1;
    goto corral_source_split_10832;

  corral_source_split_10832:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1465} $i51 := __VERIFIER_nondet_int();
    call {:si_unique_call 1466} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i51);
    call {:si_unique_call 1467} {:cexpr "tmp___2"} boogie_si_record_i32($i51);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $i52 := $slt.i32($i51, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    $i53 := $slt.i32($i51, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i51, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    assume !($i54 == 1);
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1476} ldv_stop();
    goto corral_source_split_10869;

  corral_source_split_10869:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb73:
    assume $i54 == 1;
    goto corral_source_split_10838;

  corral_source_split_10838:
    assume {:verifier.code 0} true;
    $i67 := $M.51;
    goto corral_source_split_10839;

  corral_source_split_10839:
    assume {:verifier.code 0} true;
    $i68 := $eq.i32($i67, 2);
    goto corral_source_split_10840;

  corral_source_split_10840:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb88:
    assume $i68 == 1;
    goto corral_source_split_10864;

  corral_source_split_10864:
    assume {:verifier.code 0} true;
    $p69 := $M.46;
    goto corral_source_split_10865;

  corral_source_split_10865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1474} isp1761_pci_remove($p69);
    goto corral_source_split_10866;

  corral_source_split_10866:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1475} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_10867;

  corral_source_split_10867:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb71:
    assume $i53 == 1;
    goto corral_source_split_10834;

  corral_source_split_10834:
    assume {:verifier.code 0} true;
    $i64 := $M.51;
    goto corral_source_split_10835;

  corral_source_split_10835:
    assume {:verifier.code 0} true;
    $i65 := $eq.i32($i64, 2);
    goto corral_source_split_10836;

  corral_source_split_10836:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb85:
    assume $i65 == 1;
    goto corral_source_split_10859;

  corral_source_split_10859:
    assume {:verifier.code 0} true;
    $p66 := $M.46;
    goto corral_source_split_10860;

  corral_source_split_10860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1472} isp1761_pci_shutdown($p66);
    goto corral_source_split_10861;

  corral_source_split_10861:
    assume {:verifier.code 0} true;
    $M.51 := 2;
    call {:si_unique_call 1473} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_10862;

  corral_source_split_10862:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb69:
    assume $i52 == 1;
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i51, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    assume !($i55 == 1);
    goto $bb75;

  $bb76:
    assume $i55 == 1;
    goto corral_source_split_10842;

  corral_source_split_10842:
    assume {:verifier.code 0} true;
    $i56 := $M.51;
    goto corral_source_split_10843;

  corral_source_split_10843:
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i56, 1);
    goto corral_source_split_10844;

  corral_source_split_10844:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb78:
    assume $i57 == 1;
    goto corral_source_split_10846;

  corral_source_split_10846:
    assume {:verifier.code 0} true;
    $p58 := $M.46;
    goto corral_source_split_10847;

  corral_source_split_10847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1468} $i59 := isp1761_pci_probe($p58, $p1);
    goto SeqInstr_325, SeqInstr_326;

  SeqInstr_326:
    assume assertsPassed;
    goto SeqInstr_327;

  SeqInstr_327:
    goto corral_source_split_10848;

  corral_source_split_10848:
    assume {:verifier.code 0} true;
    $M.60 := $i59;
    call {:si_unique_call 1469} {:cexpr "ldv_retval_3"} boogie_si_record_i32($i59);
    goto corral_source_split_10849;

  corral_source_split_10849:
    assume {:verifier.code 0} true;
    $i60 := $M.60;
    goto corral_source_split_10850;

  corral_source_split_10850:
    assume {:verifier.code 0} true;
    $i61 := $eq.i32($i60, 0);
    goto corral_source_split_10851;

  corral_source_split_10851:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb80:
    assume $i61 == 1;
    goto corral_source_split_10853;

  corral_source_split_10853:
    assume {:verifier.code 0} true;
    $M.51 := 2;
    call {:si_unique_call 1470} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_10854;

  corral_source_split_10854:
    assume {:verifier.code 0} true;
    $i62 := $M.54;
    goto corral_source_split_10855;

  corral_source_split_10855:
    assume {:verifier.code 0} true;
    $i63 := $add.i32($i62, 1);
    goto corral_source_split_10856;

  corral_source_split_10856:
    assume {:verifier.code 0} true;
    $M.54 := $i63;
    call {:si_unique_call 1471} {:cexpr "ref_cnt"} boogie_si_record_i32($i63);
    goto corral_source_split_10857;

  corral_source_split_10857:
    assume {:verifier.code 0} true;
    goto $bb82;

  SeqInstr_325:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i2, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i2, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i10 == 1);
    goto corral_source_split_10756;

  corral_source_split_10756:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb18:
    assume $i10 == 1;
    goto corral_source_split_10752;

  corral_source_split_10752:
    assume {:verifier.code 0} true;
    $i15 := $M.49;
    goto corral_source_split_10753;

  corral_source_split_10753:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_10754;

  corral_source_split_10754:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb28:
    assume $i16 == 1;
    goto corral_source_split_10767;

  corral_source_split_10767:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1446} $i17 := __VERIFIER_nondet_int();
    call {:si_unique_call 1447} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i17);
    call {:si_unique_call 1448} {:cexpr "tmp___1"} boogie_si_record_i32($i17);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i17, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i17, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1464} ldv_stop();
    goto corral_source_split_10830;

  corral_source_split_10830:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb33:
    assume $i19 == 1;
    goto corral_source_split_10769;

  corral_source_split_10769:
    assume {:verifier.code 0} true;
    $i29 := $M.49;
    goto corral_source_split_10770;

  corral_source_split_10770:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 1);
    goto corral_source_split_10771;

  corral_source_split_10771:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $i39 := $M.49;
    goto corral_source_split_10809;

  corral_source_split_10809:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i39, 2);
    goto corral_source_split_10810;

  corral_source_split_10810:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb54:
    assume $i40 == 1;
    goto corral_source_split_10812;

  corral_source_split_10812:
    assume {:verifier.code 0} true;
    $i41 := $M.58;
    goto corral_source_split_10813;

  corral_source_split_10813:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i41, 1);
    goto corral_source_split_10814;

  corral_source_split_10814:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb56;

  $bb57:
    assume $i42 == 1;
    goto corral_source_split_10816;

  corral_source_split_10816:
    assume {:verifier.code 0} true;
    $p43 := $M.45;
    goto corral_source_split_10817;

  corral_source_split_10817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1459} $i44 := isp1760_plat_remove($p43);
    goto corral_source_split_10818;

  corral_source_split_10818:
    assume {:verifier.code 0} true;
    $M.59 := $i44;
    call {:si_unique_call 1460} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i44);
    goto corral_source_split_10819;

  corral_source_split_10819:
    assume {:verifier.code 0} true;
    $i45 := $M.59;
    goto corral_source_split_10820;

  corral_source_split_10820:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i45, 0);
    goto corral_source_split_10821;

  corral_source_split_10821:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb59:
    assume $i46 == 1;
    goto corral_source_split_10823;

  corral_source_split_10823:
    assume {:verifier.code 0} true;
    $M.49 := 1;
    call {:si_unique_call 1461} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_10824;

  corral_source_split_10824:
    assume {:verifier.code 0} true;
    $i47 := $M.54;
    goto corral_source_split_10825;

  corral_source_split_10825:
    assume {:verifier.code 0} true;
    $i48 := $sub.i32($i47, 1);
    goto corral_source_split_10826;

  corral_source_split_10826:
    assume {:verifier.code 0} true;
    $M.54 := $i48;
    call {:si_unique_call 1462} {:cexpr "ref_cnt"} boogie_si_record_i32($i48);
    goto corral_source_split_10827;

  corral_source_split_10827:
    assume {:verifier.code 0} true;
    $M.58 := 0;
    call {:si_unique_call 1463} {:cexpr "probed_7"} boogie_si_record_i32(0);
    goto corral_source_split_10828;

  corral_source_split_10828:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb45:
    assume $i30 == 1;
    goto corral_source_split_10791;

  corral_source_split_10791:
    assume {:verifier.code 0} true;
    $i31 := $M.58;
    goto corral_source_split_10792;

  corral_source_split_10792:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i31, 1);
    goto corral_source_split_10793;

  corral_source_split_10793:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb47;

  $bb48:
    assume $i32 == 1;
    goto corral_source_split_10795;

  corral_source_split_10795:
    assume {:verifier.code 0} true;
    $p33 := $M.45;
    goto corral_source_split_10796;

  corral_source_split_10796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1454} $i34 := isp1760_plat_remove($p33);
    goto corral_source_split_10797;

  corral_source_split_10797:
    assume {:verifier.code 0} true;
    $M.59 := $i34;
    call {:si_unique_call 1455} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i34);
    goto corral_source_split_10798;

  corral_source_split_10798:
    assume {:verifier.code 0} true;
    $i35 := $M.59;
    goto corral_source_split_10799;

  corral_source_split_10799:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i35, 0);
    goto corral_source_split_10800;

  corral_source_split_10800:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb50:
    assume $i36 == 1;
    goto corral_source_split_10802;

  corral_source_split_10802:
    assume {:verifier.code 0} true;
    $M.49 := 1;
    call {:si_unique_call 1456} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_10803;

  corral_source_split_10803:
    assume {:verifier.code 0} true;
    $i37 := $M.54;
    goto corral_source_split_10804;

  corral_source_split_10804:
    assume {:verifier.code 0} true;
    $i38 := $sub.i32($i37, 1);
    goto corral_source_split_10805;

  corral_source_split_10805:
    assume {:verifier.code 0} true;
    $M.54 := $i38;
    call {:si_unique_call 1457} {:cexpr "ref_cnt"} boogie_si_record_i32($i38);
    goto corral_source_split_10806;

  corral_source_split_10806:
    assume {:verifier.code 0} true;
    $M.58 := 0;
    call {:si_unique_call 1458} {:cexpr "probed_7"} boogie_si_record_i32(0);
    goto corral_source_split_10807;

  corral_source_split_10807:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb31:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i17, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb35;

  $bb36:
    assume $i20 == 1;
    goto corral_source_split_10773;

  corral_source_split_10773:
    assume {:verifier.code 0} true;
    $i21 := $M.49;
    goto corral_source_split_10774;

  corral_source_split_10774:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 1);
    goto corral_source_split_10775;

  corral_source_split_10775:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb38:
    assume $i22 == 1;
    goto corral_source_split_10777;

  corral_source_split_10777:
    assume {:verifier.code 0} true;
    $p23 := $M.45;
    goto corral_source_split_10778;

  corral_source_split_10778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1449} $i24 := isp1760_plat_probe($p23);
    goto SeqInstr_322, SeqInstr_323;

  SeqInstr_323:
    assume assertsPassed;
    goto SeqInstr_324;

  SeqInstr_324:
    goto corral_source_split_10779;

  corral_source_split_10779:
    assume {:verifier.code 0} true;
    $M.57 := $i24;
    call {:si_unique_call 1450} {:cexpr "ldv_retval_2"} boogie_si_record_i32($i24);
    goto corral_source_split_10780;

  corral_source_split_10780:
    assume {:verifier.code 0} true;
    $i25 := $M.57;
    goto corral_source_split_10781;

  corral_source_split_10781:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 0);
    goto corral_source_split_10782;

  corral_source_split_10782:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb40:
    assume $i26 == 1;
    goto corral_source_split_10784;

  corral_source_split_10784:
    assume {:verifier.code 0} true;
    $M.49 := 2;
    call {:si_unique_call 1451} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_10785;

  corral_source_split_10785:
    assume {:verifier.code 0} true;
    $i27 := $M.54;
    goto corral_source_split_10786;

  corral_source_split_10786:
    assume {:verifier.code 0} true;
    $i28 := $add.i32($i27, 1);
    goto corral_source_split_10787;

  corral_source_split_10787:
    assume {:verifier.code 0} true;
    $M.54 := $i28;
    call {:si_unique_call 1452} {:cexpr "ref_cnt"} boogie_si_record_i32($i28);
    goto corral_source_split_10788;

  corral_source_split_10788:
    assume {:verifier.code 0} true;
    $M.58 := 1;
    call {:si_unique_call 1453} {:cexpr "probed_7"} boogie_si_record_i32(1);
    goto corral_source_split_10789;

  corral_source_split_10789:
    assume {:verifier.code 0} true;
    goto $bb42;

  SeqInstr_322:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i2, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i11 == 1);
    goto corral_source_split_10758;

  corral_source_split_10758:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb20:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i2, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb13;

  $bb22:
    assume $i12 == 1;
    goto corral_source_split_10760;

  corral_source_split_10760:
    assume {:verifier.code 0} true;
    $i13 := $M.47;
    goto corral_source_split_10761;

  corral_source_split_10761:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_10762;

  corral_source_split_10762:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb24:
    assume $i14 == 1;
    goto corral_source_split_10764;

  corral_source_split_10764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1445} ldv_main_exported_6();
    goto SeqInstr_319, SeqInstr_320;

  SeqInstr_320:
    assume assertsPassed;
    goto SeqInstr_321;

  SeqInstr_321:
    goto corral_source_split_10765;

  corral_source_split_10765:
    assume {:verifier.code 0} true;
    goto $bb26;

  SeqInstr_319:
    assume !assertsPassed;
    return;

  $bb27_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1442} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1443} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 1444} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 481447);

procedure ldv_initialize();
  free requires assertsPassed;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10922;

  corral_source_split_10922:
    assume {:verifier.code 0} true;
    return;
}



const timer_init_3: ref;

axiom timer_init_3 == $sub.ref(0, 482479);

procedure timer_init_3();
  free requires assertsPassed;
  modifies $M.22, $M.24, $M.26, $M.28;



implementation timer_init_3()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10924;

  corral_source_split_10924:
    assume {:verifier.code 0} true;
    $M.22 := 0;
    call {:si_unique_call 1497} {:cexpr "ldv_timer_3_0"} boogie_si_record_i32(0);
    goto corral_source_split_10925;

  corral_source_split_10925:
    assume {:verifier.code 0} true;
    $M.24 := 0;
    call {:si_unique_call 1498} {:cexpr "ldv_timer_3_1"} boogie_si_record_i32(0);
    goto corral_source_split_10926;

  corral_source_split_10926:
    assume {:verifier.code 0} true;
    $M.26 := 0;
    call {:si_unique_call 1499} {:cexpr "ldv_timer_3_2"} boogie_si_record_i32(0);
    goto corral_source_split_10927;

  corral_source_split_10927:
    assume {:verifier.code 0} true;
    $M.28 := 0;
    call {:si_unique_call 1500} {:cexpr "ldv_timer_3_3"} boogie_si_record_i32(0);
    goto corral_source_split_10928;

  corral_source_split_10928:
    assume {:verifier.code 0} true;
    return;
}



const timer_init_2: ref;

axiom timer_init_2 == $sub.ref(0, 483511);

procedure timer_init_2();
  free requires assertsPassed;



implementation timer_init_2()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10930;

  corral_source_split_10930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1501} {:cexpr "ldv_timer_2_0"} boogie_si_record_i32(0);
    goto corral_source_split_10931;

  corral_source_split_10931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1502} {:cexpr "ldv_timer_2_1"} boogie_si_record_i32(0);
    goto corral_source_split_10932;

  corral_source_split_10932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1503} {:cexpr "ldv_timer_2_2"} boogie_si_record_i32(0);
    goto corral_source_split_10933;

  corral_source_split_10933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1504} {:cexpr "ldv_timer_2_3"} boogie_si_record_i32(0);
    goto corral_source_split_10934;

  corral_source_split_10934:
    assume {:verifier.code 0} true;
    return;
}



const ldv_main_exported_6: ref;

axiom ldv_main_exported_6 == $sub.ref(0, 484543);

procedure ldv_main_exported_6();
  free requires assertsPassed;
  modifies $M.44, $M.0, $M.67, $M.47, $M.54, $M.30, $M.32, $M.23, $M.22, $M.25, $M.24, $M.27, $M.26, $M.29, $M.28, $M.40, $M.38, $M.36, $CurrAddr, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.1, assertsPassed, $M.2, $M.4, $M.6, $M.8, $M.3, $M.5, $M.7, $M.9;



implementation ldv_main_exported_6()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $p12: ref;
  var $p14: ref;
  var $p16: ref;
  var $p18: ref;
  var $i20: i32;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $i37: i32;
  var $i38: i32;
  var $i39: i1;
  var $i40: i32;
  var $i41: i32;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $i54: i32;
  var $i55: i1;
  var $p56: ref;
  var $p57: ref;
  var $i58: i32;
  var $i60: i32;
  var $i61: i1;
  var $p62: ref;
  var $p63: ref;
  var $i64: i32;
  var $i65: i1;
  var $p66: ref;
  var $p67: ref;
  var $i68: i32;
  var $i69: i1;
  var $p70: ref;
  var $p71: ref;
  var $i72: i32;
  var $i73: i1;
  var $p74: ref;
  var $i75: i32;
  var $i76: i1;
  var $p77: ref;
  var $i79: i32;
  var $i80: i1;
  var $p81: ref;
  var $i83: i32;
  var $i84: i1;
  var $p85: ref;
  var $i87: i32;
  var $i88: i1;
  var $p89: ref;
  var $p90: ref;
  var $i91: i32;
  var $i92: i1;
  var $p93: ref;
  var $p94: ref;
  var $i95: i32;
  var $i96: i1;
  var $p97: ref;
  var $p98: ref;
  var $i99: i32;
  var $i100: i1;
  var $p101: ref;
  var $i103: i32;
  var $i104: i1;
  var $p105: ref;
  var $i107: i32;
  var $i108: i1;
  var $p109: ref;
  var $i111: i32;
  var $i112: i1;
  var $p113: ref;
  var $i115: i32;
  var $i116: i1;
  var $p117: ref;
  var $i119: i32;
  var $i120: i1;
  var $p121: ref;
  var $i123: i32;
  var $i124: i1;
  var $p125: ref;
  var $i126: i32;
  var $i127: i32;
  var $i128: i32;
  var $i129: i1;
  var $p130: ref;
  var $i131: i32;
  var $i132: i32;
  var $i133: i32;
  var $i134: i1;
  var $p135: ref;
  var $p136: ref;
  var $i137: i32;
  var $i139: i32;
  var $i140: i1;
  var $p141: ref;
  var $p142: ref;
  var $i143: i32;
  var $i145: i32;
  var $i146: i1;
  var $p147: ref;
  var $p148: ref;
  var $i149: i32;
  var $i151: i32;
  var $i152: i1;
  var $p153: ref;
  var $i154: i16;
  var $i155: i32;
  var $i156: i16;
  var $i157: i16;
  var $i158: i32;
  var $i159: i16;
  var $i160: i16;
  var $i161: i32;
  var $i162: i16;
  var $i163: i16;
  var $i164: i32;
  var $i165: i16;
  var $i167: i32;
  var $i168: i1;
  var $p169: ref;
  var $i170: i16;
  var $i171: i32;
  var $i172: i16;
  var $i173: i16;
  var $i174: i32;
  var $i175: i16;
  var $i176: i16;
  var $i177: i32;
  var $i178: i16;
  var $i179: i16;
  var $i180: i32;
  var $i181: i16;
  var $i183: i32;
  var $i184: i1;
  var $p185: ref;
  var $i186: i16;
  var $i187: i32;
  var $i188: i16;
  var $i189: i16;
  var $i190: i32;
  var $i191: i16;
  var $i192: i16;
  var $i193: i32;
  var $i194: i16;
  var $i195: i16;
  var $i196: i32;
  var $i197: i16;
  var $i199: i32;
  var $i200: i1;
  var $p201: ref;
  var $i203: i32;
  var $i204: i1;
  var $p205: ref;
  var $i207: i32;
  var $i208: i1;
  var $p209: ref;
  var vslice_dummy_var_79: ref;
  var vslice_dummy_var_80: ref;
  var vslice_dummy_var_81: ref;
  var vslice_dummy_var_82: ref;
  var vslice_dummy_var_83: ref;
  var vslice_dummy_var_84: ref;
  var vslice_dummy_var_85: i32;
  var vslice_dummy_var_86: i32;
  var vslice_dummy_var_87: i32;
  var vslice_dummy_var_88: i32;
  var vslice_dummy_var_89: i32;
  var vslice_dummy_var_90: i32;
  var vslice_dummy_var_91: i32;
  var vslice_dummy_var_92: i32;
  var vslice_dummy_var_93: i32;
  var vslice_dummy_var_94: i32;
  var vslice_dummy_var_95: i32;
  var vslice_dummy_var_96: i32;
  var vslice_dummy_var_97: i32;
  var vslice_dummy_var_98: i32;
  var vslice_dummy_var_99: i32;
  var vslice_dummy_var_100: i32;
  var vslice_dummy_var_101: i32;
  var vslice_dummy_var_102: i32;
  var vslice_dummy_var_103: i32;
  var vslice_dummy_var_104: i32;
  var vslice_dummy_var_105: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1505} $p0 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1506} $p1 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1507} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1508} $p3 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1509} $p4 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1510} $p5 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_10936;

  corral_source_split_10936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1511} $p6 := ldv_init_zalloc(1);
    goto corral_source_split_10937;

  corral_source_split_10937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1512} $p7 := ldv_init_zalloc(1);
    goto corral_source_split_10938;

  corral_source_split_10938:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p0);
    goto corral_source_split_10939;

  corral_source_split_10939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1513} vslice_dummy_var_79 := ldv_memset($p8, 0, 2);
    goto corral_source_split_10940;

  corral_source_split_10940:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p1);
    goto corral_source_split_10941;

  corral_source_split_10941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1514} vslice_dummy_var_80 := ldv_memset($p10, 0, 2);
    goto corral_source_split_10942;

  corral_source_split_10942:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p2);
    goto corral_source_split_10943;

  corral_source_split_10943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1515} vslice_dummy_var_81 := ldv_memset($p12, 0, 4);
    goto corral_source_split_10944;

  corral_source_split_10944:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p3);
    goto corral_source_split_10945;

  corral_source_split_10945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1516} vslice_dummy_var_82 := ldv_memset($p14, 0, 2);
    goto corral_source_split_10946;

  corral_source_split_10946:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p4);
    goto corral_source_split_10947;

  corral_source_split_10947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1517} vslice_dummy_var_83 := ldv_memset($p16, 0, 2);
    goto corral_source_split_10948;

  corral_source_split_10948:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p5);
    goto corral_source_split_10949;

  corral_source_split_10949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1518} vslice_dummy_var_84 := ldv_memset($p18, 0, 4);
    goto corral_source_split_10950;

  corral_source_split_10950:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1519} $i20 := __VERIFIER_nondet_int();
    call {:si_unique_call 1520} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i20);
    call {:si_unique_call 1521} {:cexpr "tmp___1"} boogie_si_record_i32($i20);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i20, 6);
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i20, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i20, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i20, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i20, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1588} ldv_stop();
    goto corral_source_split_11280;

  corral_source_split_11280:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i25 == 1;
    goto corral_source_split_10960;

  corral_source_split_10960:
    assume {:verifier.code 0} true;
    $i199 := $M.47;
    goto corral_source_split_10961;

  corral_source_split_10961:
    assume {:verifier.code 0} true;
    $i200 := $eq.i32($i199, 1);
    goto corral_source_split_10962;

  corral_source_split_10962:
    assume {:verifier.code 0} true;
    assume {:branchcond $i200} true;
    goto $bb117, $bb118;

  $bb118:
    assume !($i200 == 1);
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    $i203 := $M.47;
    goto corral_source_split_11264;

  corral_source_split_11264:
    assume {:verifier.code 0} true;
    $i204 := $eq.i32($i203, 3);
    goto corral_source_split_11265;

  corral_source_split_11265:
    assume {:verifier.code 0} true;
    assume {:branchcond $i204} true;
    goto $bb120, $bb121;

  $bb121:
    assume !($i204 == 1);
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    $i207 := $M.47;
    goto corral_source_split_11272;

  corral_source_split_11272:
    assume {:verifier.code 0} true;
    $i208 := $eq.i32($i207, 2);
    goto corral_source_split_11273;

  corral_source_split_11273:
    assume {:verifier.code 0} true;
    assume {:branchcond $i208} true;
    goto $bb123, $bb124;

  $bb124:
    assume !($i208 == 1);
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb123:
    assume $i208 == 1;
    goto corral_source_split_11275;

  corral_source_split_11275:
    assume {:verifier.code 0} true;
    $p209 := $M.66;
    goto corral_source_split_11276;

  corral_source_split_11276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1586} vslice_dummy_var_105 := isp1760_get_frame($p209);
    goto SeqInstr_424, SeqInstr_425;

  SeqInstr_425:
    assume assertsPassed;
    goto SeqInstr_426;

  SeqInstr_426:
    goto corral_source_split_11277;

  corral_source_split_11277:
    assume {:verifier.code 0} true;
    $M.47 := 2;
    call {:si_unique_call 1587} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_11278;

  corral_source_split_11278:
    assume {:verifier.code 0} true;
    goto $bb125;

  SeqInstr_424:
    assume !assertsPassed;
    return;

  $bb120:
    assume $i204 == 1;
    goto corral_source_split_11267;

  corral_source_split_11267:
    assume {:verifier.code 0} true;
    $p205 := $M.66;
    goto corral_source_split_11268;

  corral_source_split_11268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1584} vslice_dummy_var_104 := isp1760_get_frame($p205);
    goto SeqInstr_421, SeqInstr_422;

  SeqInstr_422:
    assume assertsPassed;
    goto SeqInstr_423;

  SeqInstr_423:
    goto corral_source_split_11269;

  corral_source_split_11269:
    assume {:verifier.code 0} true;
    $M.47 := 3;
    call {:si_unique_call 1585} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_11270;

  corral_source_split_11270:
    assume {:verifier.code 0} true;
    goto $bb122;

  SeqInstr_421:
    assume !assertsPassed;
    return;

  $bb117:
    assume $i200 == 1;
    goto corral_source_split_11259;

  corral_source_split_11259:
    assume {:verifier.code 0} true;
    $p201 := $M.66;
    goto corral_source_split_11260;

  corral_source_split_11260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1582} vslice_dummy_var_103 := isp1760_get_frame($p201);
    goto SeqInstr_418, SeqInstr_419;

  SeqInstr_419:
    assume assertsPassed;
    goto SeqInstr_420;

  SeqInstr_420:
    goto corral_source_split_11261;

  corral_source_split_11261:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 1583} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_11262;

  corral_source_split_11262:
    assume {:verifier.code 0} true;
    goto $bb119;

  SeqInstr_418:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i24 == 1;
    goto corral_source_split_10956;

  corral_source_split_10956:
    assume {:verifier.code 0} true;
    $i151 := $M.47;
    goto corral_source_split_10957;

  corral_source_split_10957:
    assume {:verifier.code 0} true;
    $i152 := $eq.i32($i151, 1);
    goto corral_source_split_10958;

  corral_source_split_10958:
    assume {:verifier.code 0} true;
    assume {:branchcond $i152} true;
    goto $bb108, $bb109;

  $bb109:
    assume !($i152 == 1);
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    $i167 := $M.47;
    goto corral_source_split_11219;

  corral_source_split_11219:
    assume {:verifier.code 0} true;
    $i168 := $eq.i32($i167, 3);
    goto corral_source_split_11220;

  corral_source_split_11220:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb111, $bb112;

  $bb112:
    assume !($i168 == 1);
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    $i183 := $M.47;
    goto corral_source_split_11239;

  corral_source_split_11239:
    assume {:verifier.code 0} true;
    $i184 := $eq.i32($i183, 2);
    goto corral_source_split_11240;

  corral_source_split_11240:
    assume {:verifier.code 0} true;
    assume {:branchcond $i184} true;
    goto $bb114, $bb115;

  $bb115:
    assume !($i184 == 1);
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb114:
    assume $i184 == 1;
    goto corral_source_split_11242;

  corral_source_split_11242:
    assume {:verifier.code 0} true;
    $p185 := $M.66;
    goto corral_source_split_11243;

  corral_source_split_11243:
    assume {:verifier.code 0} true;
    $i186 := $load.i16($M.44, $p4);
    goto corral_source_split_11244;

  corral_source_split_11244:
    assume {:verifier.code 0} true;
    $i187 := $zext.i16.i32($i186);
    goto corral_source_split_11245;

  corral_source_split_11245:
    assume {:verifier.code 0} true;
    $i188 := $trunc.i32.i16($i187);
    goto corral_source_split_11246;

  corral_source_split_11246:
    assume {:verifier.code 0} true;
    $i189 := $load.i16($M.44, $p0);
    goto corral_source_split_11247;

  corral_source_split_11247:
    assume {:verifier.code 0} true;
    $i190 := $zext.i16.i32($i189);
    goto corral_source_split_11248;

  corral_source_split_11248:
    assume {:verifier.code 0} true;
    $i191 := $trunc.i32.i16($i190);
    goto corral_source_split_11249;

  corral_source_split_11249:
    assume {:verifier.code 0} true;
    $i192 := $load.i16($M.44, $p1);
    goto corral_source_split_11250;

  corral_source_split_11250:
    assume {:verifier.code 0} true;
    $i193 := $zext.i16.i32($i192);
    goto corral_source_split_11251;

  corral_source_split_11251:
    assume {:verifier.code 0} true;
    $i194 := $trunc.i32.i16($i193);
    goto corral_source_split_11252;

  corral_source_split_11252:
    assume {:verifier.code 0} true;
    $i195 := $load.i16($M.44, $p3);
    goto corral_source_split_11253;

  corral_source_split_11253:
    assume {:verifier.code 0} true;
    $i196 := $zext.i16.i32($i195);
    goto corral_source_split_11254;

  corral_source_split_11254:
    assume {:verifier.code 0} true;
    $i197 := $trunc.i32.i16($i196);
    goto corral_source_split_11255;

  corral_source_split_11255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1580} vslice_dummy_var_102 := isp1760_hub_control($p185, $i188, $i191, $i194, $p6, $i197);
    goto SeqInstr_415, SeqInstr_416;

  SeqInstr_416:
    assume assertsPassed;
    goto SeqInstr_417;

  SeqInstr_417:
    goto corral_source_split_11256;

  corral_source_split_11256:
    assume {:verifier.code 0} true;
    $M.47 := 2;
    call {:si_unique_call 1581} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_11257;

  corral_source_split_11257:
    assume {:verifier.code 0} true;
    goto $bb116;

  SeqInstr_415:
    assume !assertsPassed;
    return;

  $bb111:
    assume $i168 == 1;
    goto corral_source_split_11222;

  corral_source_split_11222:
    assume {:verifier.code 0} true;
    $p169 := $M.66;
    goto corral_source_split_11223;

  corral_source_split_11223:
    assume {:verifier.code 0} true;
    $i170 := $load.i16($M.44, $p4);
    goto corral_source_split_11224;

  corral_source_split_11224:
    assume {:verifier.code 0} true;
    $i171 := $zext.i16.i32($i170);
    goto corral_source_split_11225;

  corral_source_split_11225:
    assume {:verifier.code 0} true;
    $i172 := $trunc.i32.i16($i171);
    goto corral_source_split_11226;

  corral_source_split_11226:
    assume {:verifier.code 0} true;
    $i173 := $load.i16($M.44, $p0);
    goto corral_source_split_11227;

  corral_source_split_11227:
    assume {:verifier.code 0} true;
    $i174 := $zext.i16.i32($i173);
    goto corral_source_split_11228;

  corral_source_split_11228:
    assume {:verifier.code 0} true;
    $i175 := $trunc.i32.i16($i174);
    goto corral_source_split_11229;

  corral_source_split_11229:
    assume {:verifier.code 0} true;
    $i176 := $load.i16($M.44, $p1);
    goto corral_source_split_11230;

  corral_source_split_11230:
    assume {:verifier.code 0} true;
    $i177 := $zext.i16.i32($i176);
    goto corral_source_split_11231;

  corral_source_split_11231:
    assume {:verifier.code 0} true;
    $i178 := $trunc.i32.i16($i177);
    goto corral_source_split_11232;

  corral_source_split_11232:
    assume {:verifier.code 0} true;
    $i179 := $load.i16($M.44, $p3);
    goto corral_source_split_11233;

  corral_source_split_11233:
    assume {:verifier.code 0} true;
    $i180 := $zext.i16.i32($i179);
    goto corral_source_split_11234;

  corral_source_split_11234:
    assume {:verifier.code 0} true;
    $i181 := $trunc.i32.i16($i180);
    goto corral_source_split_11235;

  corral_source_split_11235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1578} vslice_dummy_var_101 := isp1760_hub_control($p169, $i172, $i175, $i178, $p6, $i181);
    goto SeqInstr_412, SeqInstr_413;

  SeqInstr_413:
    assume assertsPassed;
    goto SeqInstr_414;

  SeqInstr_414:
    goto corral_source_split_11236;

  corral_source_split_11236:
    assume {:verifier.code 0} true;
    $M.47 := 3;
    call {:si_unique_call 1579} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_11237;

  corral_source_split_11237:
    assume {:verifier.code 0} true;
    goto $bb113;

  SeqInstr_412:
    assume !assertsPassed;
    return;

  $bb108:
    assume $i152 == 1;
    goto corral_source_split_11202;

  corral_source_split_11202:
    assume {:verifier.code 0} true;
    $p153 := $M.66;
    goto corral_source_split_11203;

  corral_source_split_11203:
    assume {:verifier.code 0} true;
    $i154 := $load.i16($M.44, $p4);
    goto corral_source_split_11204;

  corral_source_split_11204:
    assume {:verifier.code 0} true;
    $i155 := $zext.i16.i32($i154);
    goto corral_source_split_11205;

  corral_source_split_11205:
    assume {:verifier.code 0} true;
    $i156 := $trunc.i32.i16($i155);
    goto corral_source_split_11206;

  corral_source_split_11206:
    assume {:verifier.code 0} true;
    $i157 := $load.i16($M.44, $p0);
    goto corral_source_split_11207;

  corral_source_split_11207:
    assume {:verifier.code 0} true;
    $i158 := $zext.i16.i32($i157);
    goto corral_source_split_11208;

  corral_source_split_11208:
    assume {:verifier.code 0} true;
    $i159 := $trunc.i32.i16($i158);
    goto corral_source_split_11209;

  corral_source_split_11209:
    assume {:verifier.code 0} true;
    $i160 := $load.i16($M.44, $p1);
    goto corral_source_split_11210;

  corral_source_split_11210:
    assume {:verifier.code 0} true;
    $i161 := $zext.i16.i32($i160);
    goto corral_source_split_11211;

  corral_source_split_11211:
    assume {:verifier.code 0} true;
    $i162 := $trunc.i32.i16($i161);
    goto corral_source_split_11212;

  corral_source_split_11212:
    assume {:verifier.code 0} true;
    $i163 := $load.i16($M.44, $p3);
    goto corral_source_split_11213;

  corral_source_split_11213:
    assume {:verifier.code 0} true;
    $i164 := $zext.i16.i32($i163);
    goto corral_source_split_11214;

  corral_source_split_11214:
    assume {:verifier.code 0} true;
    $i165 := $trunc.i32.i16($i164);
    goto corral_source_split_11215;

  corral_source_split_11215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1576} vslice_dummy_var_100 := isp1760_hub_control($p153, $i156, $i159, $i162, $p6, $i165);
    goto SeqInstr_409, SeqInstr_410;

  SeqInstr_410:
    assume assertsPassed;
    goto SeqInstr_411;

  SeqInstr_411:
    goto corral_source_split_11216;

  corral_source_split_11216:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 1577} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_11217;

  corral_source_split_11217:
    assume {:verifier.code 0} true;
    goto $bb110;

  SeqInstr_409:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i23 == 1;
    goto corral_source_split_10952;

  corral_source_split_10952:
    assume {:verifier.code 0} true;
    $i133 := $M.47;
    goto corral_source_split_10953;

  corral_source_split_10953:
    assume {:verifier.code 0} true;
    $i134 := $eq.i32($i133, 1);
    goto corral_source_split_10954;

  corral_source_split_10954:
    assume {:verifier.code 0} true;
    assume {:branchcond $i134} true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i134 == 1);
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    $i139 := $M.47;
    goto corral_source_split_11182;

  corral_source_split_11182:
    assume {:verifier.code 0} true;
    $i140 := $eq.i32($i139, 3);
    goto corral_source_split_11183;

  corral_source_split_11183:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb102, $bb103;

  $bb103:
    assume !($i140 == 1);
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    $i145 := $M.47;
    goto corral_source_split_11192;

  corral_source_split_11192:
    assume {:verifier.code 0} true;
    $i146 := $eq.i32($i145, 2);
    goto corral_source_split_11193;

  corral_source_split_11193:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105, $bb106;

  $bb106:
    assume !($i146 == 1);
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb105:
    assume $i146 == 1;
    goto corral_source_split_11195;

  corral_source_split_11195:
    assume {:verifier.code 0} true;
    $p147 := $M.66;
    goto corral_source_split_11196;

  corral_source_split_11196:
    assume {:verifier.code 0} true;
    $p148 := $M.68;
    goto corral_source_split_11197;

  corral_source_split_11197:
    assume {:verifier.code 0} true;
    $i149 := $load.i32($M.44, $p2);
    goto corral_source_split_11198;

  corral_source_split_11198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1574} vslice_dummy_var_99 := isp1760_urb_enqueue($p147, $p148, $i149);
    goto SeqInstr_406, SeqInstr_407;

  SeqInstr_407:
    assume assertsPassed;
    goto SeqInstr_408;

  SeqInstr_408:
    goto corral_source_split_11199;

  corral_source_split_11199:
    assume {:verifier.code 0} true;
    $M.47 := 2;
    call {:si_unique_call 1575} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_11200;

  corral_source_split_11200:
    assume {:verifier.code 0} true;
    goto $bb107;

  SeqInstr_406:
    assume !assertsPassed;
    return;

  $bb102:
    assume $i140 == 1;
    goto corral_source_split_11185;

  corral_source_split_11185:
    assume {:verifier.code 0} true;
    $p141 := $M.66;
    goto corral_source_split_11186;

  corral_source_split_11186:
    assume {:verifier.code 0} true;
    $p142 := $M.68;
    goto corral_source_split_11187;

  corral_source_split_11187:
    assume {:verifier.code 0} true;
    $i143 := $load.i32($M.44, $p2);
    goto corral_source_split_11188;

  corral_source_split_11188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1572} vslice_dummy_var_98 := isp1760_urb_enqueue($p141, $p142, $i143);
    goto SeqInstr_403, SeqInstr_404;

  SeqInstr_404:
    assume assertsPassed;
    goto SeqInstr_405;

  SeqInstr_405:
    goto corral_source_split_11189;

  corral_source_split_11189:
    assume {:verifier.code 0} true;
    $M.47 := 3;
    call {:si_unique_call 1573} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_11190;

  corral_source_split_11190:
    assume {:verifier.code 0} true;
    goto $bb104;

  SeqInstr_403:
    assume !assertsPassed;
    return;

  $bb99:
    assume $i134 == 1;
    goto corral_source_split_11175;

  corral_source_split_11175:
    assume {:verifier.code 0} true;
    $p135 := $M.66;
    goto corral_source_split_11176;

  corral_source_split_11176:
    assume {:verifier.code 0} true;
    $p136 := $M.68;
    goto corral_source_split_11177;

  corral_source_split_11177:
    assume {:verifier.code 0} true;
    $i137 := $load.i32($M.44, $p2);
    goto corral_source_split_11178;

  corral_source_split_11178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1570} vslice_dummy_var_97 := isp1760_urb_enqueue($p135, $p136, $i137);
    goto SeqInstr_400, SeqInstr_401;

  SeqInstr_401:
    assume assertsPassed;
    goto SeqInstr_402;

  SeqInstr_402:
    goto corral_source_split_11179;

  corral_source_split_11179:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 1571} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_11180;

  corral_source_split_11180:
    assume {:verifier.code 0} true;
    goto $bb101;

  SeqInstr_400:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    $i26 := $slt.i32($i20, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    $i27 := $slt.i32($i20, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i27 == 1);
    goto corral_source_split_10972;

  corral_source_split_10972:
    assume {:verifier.code 0} true;
    $i123 := $M.47;
    goto corral_source_split_10973;

  corral_source_split_10973:
    assume {:verifier.code 0} true;
    $i124 := $eq.i32($i123, 3);
    goto corral_source_split_10974;

  corral_source_split_10974:
    assume {:verifier.code 0} true;
    assume {:branchcond $i124} true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i124 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    $i128 := $M.47;
    goto corral_source_split_11164;

  corral_source_split_11164:
    assume {:verifier.code 0} true;
    $i129 := $eq.i32($i128, 2);
    goto corral_source_split_11165;

  corral_source_split_11165:
    assume {:verifier.code 0} true;
    assume {:branchcond $i129} true;
    goto $bb96, $bb97;

  $bb97:
    assume !($i129 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb96:
    assume $i129 == 1;
    goto corral_source_split_11167;

  corral_source_split_11167:
    assume {:verifier.code 0} true;
    $p130 := $M.66;
    goto corral_source_split_11168;

  corral_source_split_11168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1567} isp1760_stop($p130);
    goto SeqInstr_397, SeqInstr_398;

  SeqInstr_398:
    assume assertsPassed;
    goto SeqInstr_399;

  SeqInstr_399:
    goto corral_source_split_11169;

  corral_source_split_11169:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 1568} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_11170;

  corral_source_split_11170:
    assume {:verifier.code 0} true;
    $i131 := $M.54;
    goto corral_source_split_11171;

  corral_source_split_11171:
    assume {:verifier.code 0} true;
    $i132 := $sub.i32($i131, 1);
    goto corral_source_split_11172;

  corral_source_split_11172:
    assume {:verifier.code 0} true;
    $M.54 := $i132;
    call {:si_unique_call 1569} {:cexpr "ref_cnt"} boogie_si_record_i32($i132);
    goto corral_source_split_11173;

  corral_source_split_11173:
    assume {:verifier.code 0} true;
    goto $bb98;

  SeqInstr_397:
    assume !assertsPassed;
    return;

  $bb93:
    assume $i124 == 1;
    goto corral_source_split_11156;

  corral_source_split_11156:
    assume {:verifier.code 0} true;
    $p125 := $M.66;
    goto corral_source_split_11157;

  corral_source_split_11157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1564} isp1760_stop($p125);
    goto SeqInstr_394, SeqInstr_395;

  SeqInstr_395:
    assume assertsPassed;
    goto SeqInstr_396;

  SeqInstr_396:
    goto corral_source_split_11158;

  corral_source_split_11158:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 1565} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_11159;

  corral_source_split_11159:
    assume {:verifier.code 0} true;
    $i126 := $M.54;
    goto corral_source_split_11160;

  corral_source_split_11160:
    assume {:verifier.code 0} true;
    $i127 := $sub.i32($i126, 1);
    goto corral_source_split_11161;

  corral_source_split_11161:
    assume {:verifier.code 0} true;
    $M.54 := $i127;
    call {:si_unique_call 1566} {:cexpr "ref_cnt"} boogie_si_record_i32($i127);
    goto corral_source_split_11162;

  corral_source_split_11162:
    assume {:verifier.code 0} true;
    goto $bb95;

  SeqInstr_394:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i27 == 1;
    goto corral_source_split_10968;

  corral_source_split_10968:
    assume {:verifier.code 0} true;
    $i111 := $M.47;
    goto corral_source_split_10969;

  corral_source_split_10969:
    assume {:verifier.code 0} true;
    $i112 := $eq.i32($i111, 1);
    goto corral_source_split_10970;

  corral_source_split_10970:
    assume {:verifier.code 0} true;
    assume {:branchcond $i112} true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i112 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $i115 := $M.47;
    goto corral_source_split_11140;

  corral_source_split_11140:
    assume {:verifier.code 0} true;
    $i116 := $eq.i32($i115, 3);
    goto corral_source_split_11141;

  corral_source_split_11141:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i116 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    $i119 := $M.47;
    goto corral_source_split_11148;

  corral_source_split_11148:
    assume {:verifier.code 0} true;
    $i120 := $eq.i32($i119, 2);
    goto corral_source_split_11149;

  corral_source_split_11149:
    assume {:verifier.code 0} true;
    assume {:branchcond $i120} true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb90:
    assume $i120 == 1;
    goto corral_source_split_11151;

  corral_source_split_11151:
    assume {:verifier.code 0} true;
    $p121 := $M.66;
    goto corral_source_split_11152;

  corral_source_split_11152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1562} vslice_dummy_var_96 := isp1760_hub_status_data($p121, $p7);
    goto SeqInstr_391, SeqInstr_392;

  SeqInstr_392:
    assume assertsPassed;
    goto SeqInstr_393;

  SeqInstr_393:
    goto corral_source_split_11153;

  corral_source_split_11153:
    assume {:verifier.code 0} true;
    $M.47 := 2;
    call {:si_unique_call 1563} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_11154;

  corral_source_split_11154:
    assume {:verifier.code 0} true;
    goto $bb92;

  SeqInstr_391:
    assume !assertsPassed;
    return;

  $bb87:
    assume $i116 == 1;
    goto corral_source_split_11143;

  corral_source_split_11143:
    assume {:verifier.code 0} true;
    $p117 := $M.66;
    goto corral_source_split_11144;

  corral_source_split_11144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1560} vslice_dummy_var_95 := isp1760_hub_status_data($p117, $p7);
    goto SeqInstr_388, SeqInstr_389;

  SeqInstr_389:
    assume assertsPassed;
    goto SeqInstr_390;

  SeqInstr_390:
    goto corral_source_split_11145;

  corral_source_split_11145:
    assume {:verifier.code 0} true;
    $M.47 := 3;
    call {:si_unique_call 1561} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_11146;

  corral_source_split_11146:
    assume {:verifier.code 0} true;
    goto $bb89;

  SeqInstr_388:
    assume !assertsPassed;
    return;

  $bb84:
    assume $i112 == 1;
    goto corral_source_split_11135;

  corral_source_split_11135:
    assume {:verifier.code 0} true;
    $p113 := $M.66;
    goto corral_source_split_11136;

  corral_source_split_11136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1558} vslice_dummy_var_94 := isp1760_hub_status_data($p113, $p7);
    goto SeqInstr_385, SeqInstr_386;

  SeqInstr_386:
    assume assertsPassed;
    goto SeqInstr_387;

  SeqInstr_387:
    goto corral_source_split_11137;

  corral_source_split_11137:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 1559} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_11138;

  corral_source_split_11138:
    assume {:verifier.code 0} true;
    goto $bb86;

  SeqInstr_385:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i26 == 1;
    goto corral_source_split_10964;

  corral_source_split_10964:
    assume {:verifier.code 0} true;
    $i99 := $M.47;
    goto corral_source_split_10965;

  corral_source_split_10965:
    assume {:verifier.code 0} true;
    $i100 := $eq.i32($i99, 1);
    goto corral_source_split_10966;

  corral_source_split_10966:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $i103 := $M.47;
    goto corral_source_split_11119;

  corral_source_split_11119:
    assume {:verifier.code 0} true;
    $i104 := $eq.i32($i103, 3);
    goto corral_source_split_11120;

  corral_source_split_11120:
    assume {:verifier.code 0} true;
    assume {:branchcond $i104} true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $i107 := $M.47;
    goto corral_source_split_11127;

  corral_source_split_11127:
    assume {:verifier.code 0} true;
    $i108 := $eq.i32($i107, 2);
    goto corral_source_split_11128;

  corral_source_split_11128:
    assume {:verifier.code 0} true;
    assume {:branchcond $i108} true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb81:
    assume $i108 == 1;
    goto corral_source_split_11130;

  corral_source_split_11130:
    assume {:verifier.code 0} true;
    $p109 := $M.66;
    goto corral_source_split_11131;

  corral_source_split_11131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1556} vslice_dummy_var_93 := isp1760_irq($p109);
    goto SeqInstr_382, SeqInstr_383;

  SeqInstr_383:
    assume assertsPassed;
    goto SeqInstr_384;

  SeqInstr_384:
    goto corral_source_split_11132;

  corral_source_split_11132:
    assume {:verifier.code 0} true;
    $M.47 := 2;
    call {:si_unique_call 1557} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_11133;

  corral_source_split_11133:
    assume {:verifier.code 0} true;
    goto $bb83;

  SeqInstr_382:
    assume !assertsPassed;
    return;

  $bb78:
    assume $i104 == 1;
    goto corral_source_split_11122;

  corral_source_split_11122:
    assume {:verifier.code 0} true;
    $p105 := $M.66;
    goto corral_source_split_11123;

  corral_source_split_11123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1554} vslice_dummy_var_92 := isp1760_irq($p105);
    goto SeqInstr_379, SeqInstr_380;

  SeqInstr_380:
    assume assertsPassed;
    goto SeqInstr_381;

  SeqInstr_381:
    goto corral_source_split_11124;

  corral_source_split_11124:
    assume {:verifier.code 0} true;
    $M.47 := 3;
    call {:si_unique_call 1555} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_11125;

  corral_source_split_11125:
    assume {:verifier.code 0} true;
    goto $bb80;

  SeqInstr_379:
    assume !assertsPassed;
    return;

  $bb75:
    assume $i100 == 1;
    goto corral_source_split_11114;

  corral_source_split_11114:
    assume {:verifier.code 0} true;
    $p101 := $M.66;
    goto corral_source_split_11115;

  corral_source_split_11115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1552} vslice_dummy_var_91 := isp1760_irq($p101);
    goto SeqInstr_376, SeqInstr_377;

  SeqInstr_377:
    assume assertsPassed;
    goto SeqInstr_378;

  SeqInstr_378:
    goto corral_source_split_11116;

  corral_source_split_11116:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 1553} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_11117;

  corral_source_split_11117:
    assume {:verifier.code 0} true;
    goto $bb77;

  SeqInstr_376:
    assume !assertsPassed;
    return;

  $bb2:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    $i28 := $slt.i32($i20, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i20, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    $i30 := $slt.i32($i20, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i30 == 1);
    goto corral_source_split_10984;

  corral_source_split_10984:
    assume {:verifier.code 0} true;
    $i87 := $M.47;
    goto corral_source_split_10985;

  corral_source_split_10985:
    assume {:verifier.code 0} true;
    $i88 := $eq.i32($i87, 1);
    goto corral_source_split_10986;

  corral_source_split_10986:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $i91 := $M.47;
    goto corral_source_split_11096;

  corral_source_split_11096:
    assume {:verifier.code 0} true;
    $i92 := $eq.i32($i91, 3);
    goto corral_source_split_11097;

  corral_source_split_11097:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $i95 := $M.47;
    goto corral_source_split_11105;

  corral_source_split_11105:
    assume {:verifier.code 0} true;
    $i96 := $eq.i32($i95, 2);
    goto corral_source_split_11106;

  corral_source_split_11106:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb72:
    assume $i96 == 1;
    goto corral_source_split_11108;

  corral_source_split_11108:
    assume {:verifier.code 0} true;
    $p97 := $M.66;
    goto corral_source_split_11109;

  corral_source_split_11109:
    assume {:verifier.code 0} true;
    $p98 := $M.69;
    goto corral_source_split_11110;

  corral_source_split_11110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1550} isp1760_clear_tt_buffer_complete($p97, $p98);
    goto SeqInstr_373, SeqInstr_374;

  SeqInstr_374:
    assume assertsPassed;
    goto SeqInstr_375;

  SeqInstr_375:
    goto corral_source_split_11111;

  corral_source_split_11111:
    assume {:verifier.code 0} true;
    $M.47 := 2;
    call {:si_unique_call 1551} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_11112;

  corral_source_split_11112:
    assume {:verifier.code 0} true;
    goto $bb74;

  SeqInstr_373:
    assume !assertsPassed;
    return;

  $bb69:
    assume $i92 == 1;
    goto corral_source_split_11099;

  corral_source_split_11099:
    assume {:verifier.code 0} true;
    $p93 := $M.66;
    goto corral_source_split_11100;

  corral_source_split_11100:
    assume {:verifier.code 0} true;
    $p94 := $M.69;
    goto corral_source_split_11101;

  corral_source_split_11101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1548} isp1760_clear_tt_buffer_complete($p93, $p94);
    goto SeqInstr_370, SeqInstr_371;

  SeqInstr_371:
    assume assertsPassed;
    goto SeqInstr_372;

  SeqInstr_372:
    goto corral_source_split_11102;

  corral_source_split_11102:
    assume {:verifier.code 0} true;
    $M.47 := 3;
    call {:si_unique_call 1549} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_11103;

  corral_source_split_11103:
    assume {:verifier.code 0} true;
    goto $bb71;

  SeqInstr_370:
    assume !assertsPassed;
    return;

  $bb66:
    assume $i88 == 1;
    goto corral_source_split_11090;

  corral_source_split_11090:
    assume {:verifier.code 0} true;
    $p89 := $M.66;
    goto corral_source_split_11091;

  corral_source_split_11091:
    assume {:verifier.code 0} true;
    $p90 := $M.69;
    goto corral_source_split_11092;

  corral_source_split_11092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1546} isp1760_clear_tt_buffer_complete($p89, $p90);
    goto SeqInstr_367, SeqInstr_368;

  SeqInstr_368:
    assume assertsPassed;
    goto SeqInstr_369;

  SeqInstr_369:
    goto corral_source_split_11093;

  corral_source_split_11093:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 1547} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_11094;

  corral_source_split_11094:
    assume {:verifier.code 0} true;
    goto $bb68;

  SeqInstr_367:
    assume !assertsPassed;
    return;

  $bb21:
    assume $i30 == 1;
    goto corral_source_split_10980;

  corral_source_split_10980:
    assume {:verifier.code 0} true;
    $i75 := $M.47;
    goto corral_source_split_10981;

  corral_source_split_10981:
    assume {:verifier.code 0} true;
    $i76 := $eq.i32($i75, 1);
    goto corral_source_split_10982;

  corral_source_split_10982:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $i79 := $M.47;
    goto corral_source_split_11074;

  corral_source_split_11074:
    assume {:verifier.code 0} true;
    $i80 := $eq.i32($i79, 3);
    goto corral_source_split_11075;

  corral_source_split_11075:
    assume {:verifier.code 0} true;
    assume {:branchcond $i80} true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $i83 := $M.47;
    goto corral_source_split_11082;

  corral_source_split_11082:
    assume {:verifier.code 0} true;
    $i84 := $eq.i32($i83, 2);
    goto corral_source_split_11083;

  corral_source_split_11083:
    assume {:verifier.code 0} true;
    assume {:branchcond $i84} true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb63:
    assume $i84 == 1;
    goto corral_source_split_11085;

  corral_source_split_11085:
    assume {:verifier.code 0} true;
    $p85 := $M.66;
    goto corral_source_split_11086;

  corral_source_split_11086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1544} vslice_dummy_var_90 := isp1760_hc_setup($p85);
    goto SeqInstr_364, SeqInstr_365;

  SeqInstr_365:
    assume assertsPassed;
    goto SeqInstr_366;

  SeqInstr_366:
    goto corral_source_split_11087;

  corral_source_split_11087:
    assume {:verifier.code 0} true;
    $M.47 := 2;
    call {:si_unique_call 1545} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_11088;

  corral_source_split_11088:
    assume {:verifier.code 0} true;
    goto $bb65;

  SeqInstr_364:
    assume !assertsPassed;
    return;

  $bb60:
    assume $i80 == 1;
    goto corral_source_split_11077;

  corral_source_split_11077:
    assume {:verifier.code 0} true;
    $p81 := $M.66;
    goto corral_source_split_11078;

  corral_source_split_11078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1542} vslice_dummy_var_89 := isp1760_hc_setup($p81);
    goto SeqInstr_361, SeqInstr_362;

  SeqInstr_362:
    assume assertsPassed;
    goto SeqInstr_363;

  SeqInstr_363:
    goto corral_source_split_11079;

  corral_source_split_11079:
    assume {:verifier.code 0} true;
    $M.47 := 3;
    call {:si_unique_call 1543} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_11080;

  corral_source_split_11080:
    assume {:verifier.code 0} true;
    goto $bb62;

  SeqInstr_361:
    assume !assertsPassed;
    return;

  $bb57:
    assume $i76 == 1;
    goto corral_source_split_11069;

  corral_source_split_11069:
    assume {:verifier.code 0} true;
    $p77 := $M.66;
    goto corral_source_split_11070;

  corral_source_split_11070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1540} vslice_dummy_var_88 := isp1760_hc_setup($p77);
    goto SeqInstr_358, SeqInstr_359;

  SeqInstr_359:
    assume assertsPassed;
    goto SeqInstr_360;

  SeqInstr_360:
    goto corral_source_split_11071;

  corral_source_split_11071:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 1541} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_11072;

  corral_source_split_11072:
    assume {:verifier.code 0} true;
    goto $bb59;

  SeqInstr_358:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i29 == 1;
    goto corral_source_split_10976;

  corral_source_split_10976:
    assume {:verifier.code 0} true;
    $i72 := $M.47;
    goto corral_source_split_10977;

  corral_source_split_10977:
    assume {:verifier.code 0} true;
    $i73 := $eq.i32($i72, 2);
    goto corral_source_split_10978;

  corral_source_split_10978:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb54:
    assume $i73 == 1;
    goto corral_source_split_11064;

  corral_source_split_11064:
    assume {:verifier.code 0} true;
    $p74 := $M.66;
    goto corral_source_split_11065;

  corral_source_split_11065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1538} isp1760_shutdown($p74);
    goto SeqInstr_355, SeqInstr_356;

  SeqInstr_356:
    assume assertsPassed;
    goto SeqInstr_357;

  SeqInstr_357:
    goto corral_source_split_11066;

  corral_source_split_11066:
    assume {:verifier.code 0} true;
    $M.47 := 3;
    call {:si_unique_call 1539} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_11067;

  corral_source_split_11067:
    assume {:verifier.code 0} true;
    goto $bb56;

  SeqInstr_355:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    $i31 := $slt.i32($i20, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    $i32 := $slt.i32($i20, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i32 == 1);
    goto corral_source_split_10992;

  corral_source_split_10992:
    assume {:verifier.code 0} true;
    $i60 := $M.47;
    goto corral_source_split_10993;

  corral_source_split_10993:
    assume {:verifier.code 0} true;
    $i61 := $eq.i32($i60, 1);
    goto corral_source_split_10994;

  corral_source_split_10994:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i64 := $M.47;
    goto corral_source_split_11046;

  corral_source_split_11046:
    assume {:verifier.code 0} true;
    $i65 := $eq.i32($i64, 3);
    goto corral_source_split_11047;

  corral_source_split_11047:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i68 := $M.47;
    goto corral_source_split_11055;

  corral_source_split_11055:
    assume {:verifier.code 0} true;
    $i69 := $eq.i32($i68, 2);
    goto corral_source_split_11056;

  corral_source_split_11056:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb51:
    assume $i69 == 1;
    goto corral_source_split_11058;

  corral_source_split_11058:
    assume {:verifier.code 0} true;
    $p70 := $M.66;
    goto corral_source_split_11059;

  corral_source_split_11059:
    assume {:verifier.code 0} true;
    $p71 := $M.69;
    goto corral_source_split_11060;

  corral_source_split_11060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1536} isp1760_endpoint_disable($p70, $p71);
    goto SeqInstr_352, SeqInstr_353;

  SeqInstr_353:
    assume assertsPassed;
    goto SeqInstr_354;

  SeqInstr_354:
    goto corral_source_split_11061;

  corral_source_split_11061:
    assume {:verifier.code 0} true;
    $M.47 := 2;
    call {:si_unique_call 1537} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_11062;

  corral_source_split_11062:
    assume {:verifier.code 0} true;
    goto $bb53;

  SeqInstr_352:
    assume !assertsPassed;
    return;

  $bb48:
    assume $i65 == 1;
    goto corral_source_split_11049;

  corral_source_split_11049:
    assume {:verifier.code 0} true;
    $p66 := $M.66;
    goto corral_source_split_11050;

  corral_source_split_11050:
    assume {:verifier.code 0} true;
    $p67 := $M.69;
    goto corral_source_split_11051;

  corral_source_split_11051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1534} isp1760_endpoint_disable($p66, $p67);
    goto SeqInstr_349, SeqInstr_350;

  SeqInstr_350:
    assume assertsPassed;
    goto SeqInstr_351;

  SeqInstr_351:
    goto corral_source_split_11052;

  corral_source_split_11052:
    assume {:verifier.code 0} true;
    $M.47 := 3;
    call {:si_unique_call 1535} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_11053;

  corral_source_split_11053:
    assume {:verifier.code 0} true;
    goto $bb50;

  SeqInstr_349:
    assume !assertsPassed;
    return;

  $bb45:
    assume $i61 == 1;
    goto corral_source_split_11040;

  corral_source_split_11040:
    assume {:verifier.code 0} true;
    $p62 := $M.66;
    goto corral_source_split_11041;

  corral_source_split_11041:
    assume {:verifier.code 0} true;
    $p63 := $M.69;
    goto corral_source_split_11042;

  corral_source_split_11042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1532} isp1760_endpoint_disable($p62, $p63);
    goto SeqInstr_346, SeqInstr_347;

  SeqInstr_347:
    assume assertsPassed;
    goto SeqInstr_348;

  SeqInstr_348:
    goto corral_source_split_11043;

  corral_source_split_11043:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 1533} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_11044;

  corral_source_split_11044:
    assume {:verifier.code 0} true;
    goto $bb47;

  SeqInstr_346:
    assume !assertsPassed;
    return;

  $bb25:
    assume $i32 == 1;
    goto corral_source_split_10988;

  corral_source_split_10988:
    assume {:verifier.code 0} true;
    $i42 := $M.47;
    goto corral_source_split_10989;

  corral_source_split_10989:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i42, 1);
    goto corral_source_split_10990;

  corral_source_split_10990:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i48 := $M.47;
    goto corral_source_split_11020;

  corral_source_split_11020:
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i48, 3);
    goto corral_source_split_11021;

  corral_source_split_11021:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i54 := $M.47;
    goto corral_source_split_11030;

  corral_source_split_11030:
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i54, 2);
    goto corral_source_split_11031;

  corral_source_split_11031:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb42:
    assume $i55 == 1;
    goto corral_source_split_11033;

  corral_source_split_11033:
    assume {:verifier.code 0} true;
    $p56 := $M.66;
    goto corral_source_split_11034;

  corral_source_split_11034:
    assume {:verifier.code 0} true;
    $p57 := $M.68;
    goto corral_source_split_11035;

  corral_source_split_11035:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.44, $p5);
    goto corral_source_split_11036;

  corral_source_split_11036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1530} vslice_dummy_var_87 := isp1760_urb_dequeue($p56, $p57, $i58);
    goto SeqInstr_343, SeqInstr_344;

  SeqInstr_344:
    assume assertsPassed;
    goto SeqInstr_345;

  SeqInstr_345:
    goto corral_source_split_11037;

  corral_source_split_11037:
    assume {:verifier.code 0} true;
    $M.47 := 2;
    call {:si_unique_call 1531} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_11038;

  corral_source_split_11038:
    assume {:verifier.code 0} true;
    goto $bb44;

  SeqInstr_343:
    assume !assertsPassed;
    return;

  $bb39:
    assume $i49 == 1;
    goto corral_source_split_11023;

  corral_source_split_11023:
    assume {:verifier.code 0} true;
    $p50 := $M.66;
    goto corral_source_split_11024;

  corral_source_split_11024:
    assume {:verifier.code 0} true;
    $p51 := $M.68;
    goto corral_source_split_11025;

  corral_source_split_11025:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.44, $p5);
    goto corral_source_split_11026;

  corral_source_split_11026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1528} vslice_dummy_var_86 := isp1760_urb_dequeue($p50, $p51, $i52);
    goto SeqInstr_340, SeqInstr_341;

  SeqInstr_341:
    assume assertsPassed;
    goto SeqInstr_342;

  SeqInstr_342:
    goto corral_source_split_11027;

  corral_source_split_11027:
    assume {:verifier.code 0} true;
    $M.47 := 3;
    call {:si_unique_call 1529} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_11028;

  corral_source_split_11028:
    assume {:verifier.code 0} true;
    goto $bb41;

  SeqInstr_340:
    assume !assertsPassed;
    return;

  $bb36:
    assume $i43 == 1;
    goto corral_source_split_11013;

  corral_source_split_11013:
    assume {:verifier.code 0} true;
    $p44 := $M.66;
    goto corral_source_split_11014;

  corral_source_split_11014:
    assume {:verifier.code 0} true;
    $p45 := $M.68;
    goto corral_source_split_11015;

  corral_source_split_11015:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.44, $p5);
    goto corral_source_split_11016;

  corral_source_split_11016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1526} vslice_dummy_var_85 := isp1760_urb_dequeue($p44, $p45, $i46);
    goto SeqInstr_337, SeqInstr_338;

  SeqInstr_338:
    assume assertsPassed;
    goto SeqInstr_339;

  SeqInstr_339:
    goto corral_source_split_11017;

  corral_source_split_11017:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 1527} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_11018;

  corral_source_split_11018:
    assume {:verifier.code 0} true;
    goto $bb38;

  SeqInstr_337:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i31 == 1;
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i20, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb12;

  $bb27:
    assume $i33 == 1;
    goto corral_source_split_10996;

  corral_source_split_10996:
    assume {:verifier.code 0} true;
    $i34 := $M.47;
    goto corral_source_split_10997;

  corral_source_split_10997:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 1);
    goto corral_source_split_10998;

  corral_source_split_10998:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb29:
    assume $i35 == 1;
    goto corral_source_split_11000;

  corral_source_split_11000:
    assume {:verifier.code 0} true;
    $p36 := $M.66;
    goto corral_source_split_11001;

  corral_source_split_11001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1522} $i37 := isp1760_run($p36);
    goto SeqInstr_334, SeqInstr_335;

  SeqInstr_335:
    assume assertsPassed;
    goto SeqInstr_336;

  SeqInstr_336:
    goto corral_source_split_11002;

  corral_source_split_11002:
    assume {:verifier.code 0} true;
    $M.67 := $i37;
    call {:si_unique_call 1523} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i37);
    goto corral_source_split_11003;

  corral_source_split_11003:
    assume {:verifier.code 0} true;
    $i38 := $M.67;
    goto corral_source_split_11004;

  corral_source_split_11004:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 0);
    goto corral_source_split_11005;

  corral_source_split_11005:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb31:
    assume $i39 == 1;
    goto corral_source_split_11007;

  corral_source_split_11007:
    assume {:verifier.code 0} true;
    $M.47 := 2;
    call {:si_unique_call 1524} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_11008;

  corral_source_split_11008:
    assume {:verifier.code 0} true;
    $i40 := $M.54;
    goto corral_source_split_11009;

  corral_source_split_11009:
    assume {:verifier.code 0} true;
    $i41 := $add.i32($i40, 1);
    goto corral_source_split_11010;

  corral_source_split_11010:
    assume {:verifier.code 0} true;
    $M.54 := $i41;
    call {:si_unique_call 1525} {:cexpr "ref_cnt"} boogie_si_record_i32($i41);
    goto corral_source_split_11011;

  corral_source_split_11011:
    assume {:verifier.code 0} true;
    goto $bb33;

  SeqInstr_334:
    assume !assertsPassed;
    return;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 485575);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11282;

  corral_source_split_11282:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const ldv_main_exported_4: ref;

axiom ldv_main_exported_4 == $sub.ref(0, 486607);

procedure ldv_main_exported_4();
  free requires assertsPassed;
  modifies $M.44, $M.0, $M.53, $M.30, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.22, $M.24, $M.26, $M.28, $CurrAddr, $M.1, $M.32, $M.38, $M.36, $M.40, $M.23, $M.25, $M.27, $M.29, $M.2, $M.4, $M.6, $M.8, $M.3, $M.5, $M.7, $M.9, assertsPassed;



implementation ldv_main_exported_4()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i32;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i24: i32;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var vslice_dummy_var_106: ref;
  var vslice_dummy_var_107: ref;
  var vslice_dummy_var_108: i32;
  var vslice_dummy_var_109: i32;
  var vslice_dummy_var_110: i32;
  var vslice_dummy_var_111: i32;
  var vslice_dummy_var_112: i32;
  var vslice_dummy_var_113: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1589} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1590} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_11284;

  corral_source_split_11284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1591} $p2 := ldv_init_zalloc(192);
    goto corral_source_split_11285;

  corral_source_split_11285:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_11286;

  corral_source_split_11286:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_11287;

  corral_source_split_11287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1592} vslice_dummy_var_106 := ldv_memset($p4, 0, 4);
    goto corral_source_split_11288;

  corral_source_split_11288:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p1);
    goto corral_source_split_11289;

  corral_source_split_11289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1593} vslice_dummy_var_107 := ldv_memset($p6, 0, 4);
    goto corral_source_split_11290;

  corral_source_split_11290:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1594} $i8 := __VERIFIER_nondet_int();
    call {:si_unique_call 1595} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i8);
    call {:si_unique_call 1596} {:cexpr "tmp___0"} boogie_si_record_i32($i8);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i8, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i8, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i8, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i8, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1609} ldv_stop();
    goto corral_source_split_11348;

  corral_source_split_11348:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i12 == 1;
    goto corral_source_split_11300;

  corral_source_split_11300:
    assume {:verifier.code 0} true;
    $i38 := $M.53;
    goto corral_source_split_11301;

  corral_source_split_11301:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 1);
    goto corral_source_split_11302;

  corral_source_split_11302:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb33:
    assume $i39 == 1;
    goto corral_source_split_11343;

  corral_source_split_11343:
    assume {:verifier.code 0} true;
    $p40 := $M.70;
    goto corral_source_split_11344;

  corral_source_split_11344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1607} vslice_dummy_var_113 := isp1760_udc_wakeup($p40);
    goto corral_source_split_11345;

  corral_source_split_11345:
    assume {:verifier.code 0} true;
    $M.53 := 1;
    call {:si_unique_call 1608} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_11346;

  corral_source_split_11346:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb6:
    assume $i11 == 1;
    goto corral_source_split_11296;

  corral_source_split_11296:
    assume {:verifier.code 0} true;
    $i34 := $M.53;
    goto corral_source_split_11297;

  corral_source_split_11297:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 1);
    goto corral_source_split_11298;

  corral_source_split_11298:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb30:
    assume $i35 == 1;
    goto corral_source_split_11338;

  corral_source_split_11338:
    assume {:verifier.code 0} true;
    $p36 := $M.70;
    goto corral_source_split_11339;

  corral_source_split_11339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1605} vslice_dummy_var_112 := isp1760_udc_stop($p36);
    goto corral_source_split_11340;

  corral_source_split_11340:
    assume {:verifier.code 0} true;
    $M.53 := 1;
    call {:si_unique_call 1606} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_11341;

  corral_source_split_11341:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_11292;

  corral_source_split_11292:
    assume {:verifier.code 0} true;
    $i30 := $M.53;
    goto corral_source_split_11293;

  corral_source_split_11293:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, 1);
    goto corral_source_split_11294;

  corral_source_split_11294:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb27:
    assume $i31 == 1;
    goto corral_source_split_11333;

  corral_source_split_11333:
    assume {:verifier.code 0} true;
    $p32 := $M.70;
    goto corral_source_split_11334;

  corral_source_split_11334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1603} vslice_dummy_var_111 := isp1760_udc_get_frame($p32);
    goto SeqInstr_427, SeqInstr_428;

  SeqInstr_428:
    assume assertsPassed;
    goto SeqInstr_429;

  SeqInstr_429:
    goto corral_source_split_11335;

  corral_source_split_11335:
    assume {:verifier.code 0} true;
    $M.53 := 1;
    call {:si_unique_call 1604} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_11336;

  corral_source_split_11336:
    assume {:verifier.code 0} true;
    goto $bb29;

  SeqInstr_427:
    assume !assertsPassed;
    return;

  $bb2:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i8, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i8, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i14 == 1);
    goto corral_source_split_11308;

  corral_source_split_11308:
    assume {:verifier.code 0} true;
    $i26 := $M.53;
    goto corral_source_split_11309;

  corral_source_split_11309:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 1);
    goto corral_source_split_11310;

  corral_source_split_11310:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb24:
    assume $i27 == 1;
    goto corral_source_split_11328;

  corral_source_split_11328:
    assume {:verifier.code 0} true;
    $p28 := $M.70;
    goto corral_source_split_11329;

  corral_source_split_11329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1601} vslice_dummy_var_110 := isp1760_udc_start($p28, $p3);
    goto corral_source_split_11330;

  corral_source_split_11330:
    assume {:verifier.code 0} true;
    $M.53 := 1;
    call {:si_unique_call 1602} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_11331;

  corral_source_split_11331:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb13:
    assume $i14 == 1;
    goto corral_source_split_11304;

  corral_source_split_11304:
    assume {:verifier.code 0} true;
    $i21 := $M.53;
    goto corral_source_split_11305;

  corral_source_split_11305:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 1);
    goto corral_source_split_11306;

  corral_source_split_11306:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb21:
    assume $i22 == 1;
    goto corral_source_split_11322;

  corral_source_split_11322:
    assume {:verifier.code 0} true;
    $p23 := $M.70;
    goto corral_source_split_11323;

  corral_source_split_11323:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.44, $p0);
    goto corral_source_split_11324;

  corral_source_split_11324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1599} vslice_dummy_var_109 := isp1760_udc_pullup($p23, $i24);
    goto corral_source_split_11325;

  corral_source_split_11325:
    assume {:verifier.code 0} true;
    $M.53 := 1;
    call {:si_unique_call 1600} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_11326;

  corral_source_split_11326:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb11:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i8, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb10;

  $bb15:
    assume $i15 == 1;
    goto corral_source_split_11312;

  corral_source_split_11312:
    assume {:verifier.code 0} true;
    $i16 := $M.53;
    goto corral_source_split_11313;

  corral_source_split_11313:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 1);
    goto corral_source_split_11314;

  corral_source_split_11314:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb17:
    assume $i17 == 1;
    goto corral_source_split_11316;

  corral_source_split_11316:
    assume {:verifier.code 0} true;
    $p18 := $M.70;
    goto corral_source_split_11317;

  corral_source_split_11317:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.44, $p1);
    goto corral_source_split_11318;

  corral_source_split_11318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1597} vslice_dummy_var_108 := isp1760_udc_set_selfpowered($p18, $i19);
    goto corral_source_split_11319;

  corral_source_split_11319:
    assume {:verifier.code 0} true;
    $M.53 := 1;
    call {:si_unique_call 1598} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_11320;

  corral_source_split_11320:
    assume {:verifier.code 0} true;
    goto $bb19;
}



const isp1760_exit: ref;

axiom isp1760_exit == $sub.ref(0, 487639);

procedure isp1760_exit();
  free requires assertsPassed;
  modifies $M.49, $M.51;



implementation isp1760_exit()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11350;

  corral_source_split_11350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1610} ldv_platform_driver_unregister_48(isp1760_plat_driver);
    goto corral_source_split_11351;

  corral_source_split_11351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1611} ldv_pci_unregister_driver_49(isp1761_pci_driver);
    goto corral_source_split_11352;

  corral_source_split_11352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1612} isp1760_deinit_kmem_cache();
    goto corral_source_split_11353;

  corral_source_split_11353:
    assume {:verifier.code 0} true;
    return;
}



const isp1760_init: ref;

axiom isp1760_init == $sub.ref(0, 488671);

procedure isp1760_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.35, $M.37, $M.39, $M.49, $M.45, $M.51, $M.46, $M.0, $CurrAddr;



implementation isp1760_init() returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var vslice_dummy_var_114: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11355;

  corral_source_split_11355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1613} vslice_dummy_var_114 := isp1760_init_kmem_once();
    goto corral_source_split_11356;

  corral_source_split_11356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1614} $i1 := ldv___platform_driver_register_46(isp1760_plat_driver, __this_module);
    call {:si_unique_call 1615} {:cexpr "ret"} boogie_si_record_i32($i1);
    goto corral_source_split_11357;

  corral_source_split_11357:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 0);
    goto corral_source_split_11358;

  corral_source_split_11358:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $sub.i32(0, 19);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_11362;

  corral_source_split_11362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1616} $i4 := ldv___pci_register_driver_47(isp1761_pci_driver, __this_module, .str.26);
    call {:si_unique_call 1617} {:cexpr "ret"} boogie_si_record_i32($i4);
    goto corral_source_split_11363;

  corral_source_split_11363:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_11364;

  corral_source_split_11364:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $i3;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_11368;

  corral_source_split_11368:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_11369;

  corral_source_split_11369:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb7:
    assume $i7 == 1;
    goto corral_source_split_11371;

  corral_source_split_11371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1618} isp1760_deinit_kmem_cache();
    goto corral_source_split_11372;

  corral_source_split_11372:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_11366;

  corral_source_split_11366:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb6;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_11360;

  corral_source_split_11360:
    assume {:verifier.code 0} true;
    $i3 := 0;
    goto $bb3;
}



const ldv_initialize_usb_ep_ops_5: ref;

axiom ldv_initialize_usb_ep_ops_5 == $sub.ref(0, 489703);

procedure ldv_initialize_usb_ep_ops_5();
  free requires assertsPassed;
  modifies $M.71, $M.72, $M.0, $CurrAddr;



implementation ldv_initialize_usb_ep_ops_5()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11374;

  corral_source_split_11374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1619} $p0 := ldv_init_zalloc(64);
    goto corral_source_split_11375;

  corral_source_split_11375:
    assume {:verifier.code 0} true;
    goto corral_source_split_11376;

  corral_source_split_11376:
    assume {:verifier.code 0} true;
    $M.71 := $p0;
    goto corral_source_split_11377;

  corral_source_split_11377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1620} $p2 := ldv_init_zalloc(88);
    goto corral_source_split_11378;

  corral_source_split_11378:
    assume {:verifier.code 0} true;
    goto corral_source_split_11379;

  corral_source_split_11379:
    assume {:verifier.code 0} true;
    $M.72 := $p2;
    goto corral_source_split_11380;

  corral_source_split_11380:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_usb_gadget_ops_4: ref;

axiom ldv_initialize_usb_gadget_ops_4 == $sub.ref(0, 490735);

procedure ldv_initialize_usb_gadget_ops_4();
  free requires assertsPassed;
  modifies $M.70, $M.0, $CurrAddr;



implementation ldv_initialize_usb_gadget_ops_4()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11382;

  corral_source_split_11382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1621} $p0 := ldv_init_zalloc(1576);
    goto corral_source_split_11383;

  corral_source_split_11383:
    assume {:verifier.code 0} true;
    goto corral_source_split_11384;

  corral_source_split_11384:
    assume {:verifier.code 0} true;
    $M.70 := $p0;
    goto corral_source_split_11385;

  corral_source_split_11385:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_hc_driver_6: ref;

axiom ldv_initialize_hc_driver_6 == $sub.ref(0, 491767);

procedure ldv_initialize_hc_driver_6();
  free requires assertsPassed;
  modifies $M.68, $M.66, $M.69, $M.0, $CurrAddr;



implementation ldv_initialize_hc_driver_6()
{
  var $p0: ref;
  var $p2: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11387;

  corral_source_split_11387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1622} $p0 := ldv_init_zalloc(192);
    goto corral_source_split_11388;

  corral_source_split_11388:
    assume {:verifier.code 0} true;
    goto corral_source_split_11389;

  corral_source_split_11389:
    assume {:verifier.code 0} true;
    $M.68 := $p0;
    goto corral_source_split_11390;

  corral_source_split_11390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1623} $p2 := ldv_init_zalloc(968);
    goto corral_source_split_11391;

  corral_source_split_11391:
    assume {:verifier.code 0} true;
    goto corral_source_split_11392;

  corral_source_split_11392:
    assume {:verifier.code 0} true;
    $M.66 := $p2;
    goto corral_source_split_11393;

  corral_source_split_11393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1624} $p4 := ldv_init_zalloc(72);
    goto corral_source_split_11394;

  corral_source_split_11394:
    assume {:verifier.code 0} true;
    goto corral_source_split_11395;

  corral_source_split_11395:
    assume {:verifier.code 0} true;
    $M.69 := $p4;
    goto corral_source_split_11396;

  corral_source_split_11396:
    assume {:verifier.code 0} true;
    return;
}



const ldv_main_exported_5: ref;

axiom ldv_main_exported_5 == $sub.ref(0, 492799);

procedure ldv_main_exported_5();
  free requires assertsPassed;
  modifies $M.44, $M.0, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.30, $M.56, $CurrAddr, $M.1, $M.32, assertsPassed, $M.36, $M.38, $M.40, $M.23, $M.22, $M.25, $M.24, $M.27, $M.26, $M.29, $M.28, $M.2, $M.4, $M.6, $M.8, $M.3, $M.5, $M.7, $M.9;



implementation ldv_main_exported_5()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p9: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i32;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $i46: i32;
  var $i47: i1;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $i51: i1;
  var $p52: ref;
  var $i53: i32;
  var $i55: i32;
  var $i56: i1;
  var $p57: ref;
  var $i58: i32;
  var $i59: i1;
  var $p60: ref;
  var vslice_dummy_var_115: ref;
  var vslice_dummy_var_116: ref;
  var vslice_dummy_var_117: ref;
  var vslice_dummy_var_118: i32;
  var vslice_dummy_var_119: i32;
  var vslice_dummy_var_120: ref;
  var vslice_dummy_var_121: i32;
  var vslice_dummy_var_122: i32;
  var vslice_dummy_var_123: i32;
  var vslice_dummy_var_124: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1625} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1626} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1627} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_11398;

  corral_source_split_11398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1628} $p3 := ldv_init_zalloc(9);
    goto corral_source_split_11399;

  corral_source_split_11399:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_11400;

  corral_source_split_11400:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_11401;

  corral_source_split_11401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1629} vslice_dummy_var_115 := ldv_memset($p5, 0, 4);
    goto corral_source_split_11402;

  corral_source_split_11402:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p1);
    goto corral_source_split_11403;

  corral_source_split_11403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1630} vslice_dummy_var_116 := ldv_memset($p7, 0, 4);
    goto corral_source_split_11404;

  corral_source_split_11404:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p2);
    goto corral_source_split_11405;

  corral_source_split_11405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1631} vslice_dummy_var_117 := ldv_memset($p9, 0, 4);
    goto corral_source_split_11406;

  corral_source_split_11406:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1632} $i11 := __VERIFIER_nondet_int();
    call {:si_unique_call 1633} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i11);
    call {:si_unique_call 1634} {:cexpr "tmp___0"} boogie_si_record_i32($i11);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i11, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i11, 6);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i11, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i11, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i11, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1653} ldv_stop();
    goto corral_source_split_11495;

  corral_source_split_11495:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i16 == 1;
    goto corral_source_split_11416;

  corral_source_split_11416:
    assume {:verifier.code 0} true;
    $i58 := $M.56;
    goto corral_source_split_11417;

  corral_source_split_11417:
    assume {:verifier.code 0} true;
    $i59 := $eq.i32($i58, 1);
    goto corral_source_split_11418;

  corral_source_split_11418:
    assume {:verifier.code 0} true;
    assume {:branchcond $i59} true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb48:
    assume $i59 == 1;
    goto corral_source_split_11490;

  corral_source_split_11490:
    assume {:verifier.code 0} true;
    $p60 := $M.71;
    goto corral_source_split_11491;

  corral_source_split_11491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1651} vslice_dummy_var_124 := isp1760_ep_enable($p60, $p4);
    goto corral_source_split_11492;

  corral_source_split_11492:
    assume {:verifier.code 0} true;
    $M.56 := 1;
    call {:si_unique_call 1652} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_11493;

  corral_source_split_11493:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_11412;

  corral_source_split_11412:
    assume {:verifier.code 0} true;
    $i55 := $M.56;
    goto corral_source_split_11413;

  corral_source_split_11413:
    assume {:verifier.code 0} true;
    $i56 := $eq.i32($i55, 1);
    goto corral_source_split_11414;

  corral_source_split_11414:
    assume {:verifier.code 0} true;
    assume {:branchcond $i56} true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb45:
    assume $i56 == 1;
    goto corral_source_split_11485;

  corral_source_split_11485:
    assume {:verifier.code 0} true;
    $p57 := $M.71;
    goto corral_source_split_11486;

  corral_source_split_11486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1649} isp1760_ep_fifo_flush($p57);
    goto corral_source_split_11487;

  corral_source_split_11487:
    assume {:verifier.code 0} true;
    $M.56 := 1;
    call {:si_unique_call 1650} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_11488;

  corral_source_split_11488:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb6:
    assume $i14 == 1;
    goto corral_source_split_11408;

  corral_source_split_11408:
    assume {:verifier.code 0} true;
    $i50 := $M.56;
    goto corral_source_split_11409;

  corral_source_split_11409:
    assume {:verifier.code 0} true;
    $i51 := $eq.i32($i50, 1);
    goto corral_source_split_11410;

  corral_source_split_11410:
    assume {:verifier.code 0} true;
    assume {:branchcond $i51} true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb42:
    assume $i51 == 1;
    goto corral_source_split_11479;

  corral_source_split_11479:
    assume {:verifier.code 0} true;
    $p52 := $M.71;
    goto corral_source_split_11480;

  corral_source_split_11480:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.44, $p1);
    goto corral_source_split_11481;

  corral_source_split_11481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1647} vslice_dummy_var_123 := isp1760_ep_set_halt($p52, $i53);
    goto SeqInstr_445, SeqInstr_446;

  SeqInstr_446:
    assume assertsPassed;
    goto SeqInstr_447;

  SeqInstr_447:
    goto corral_source_split_11482;

  corral_source_split_11482:
    assume {:verifier.code 0} true;
    $M.56 := 1;
    call {:si_unique_call 1648} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_11483;

  corral_source_split_11483:
    assume {:verifier.code 0} true;
    goto $bb44;

  SeqInstr_445:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i11, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i17 == 1);
    goto corral_source_split_11424;

  corral_source_split_11424:
    assume {:verifier.code 0} true;
    $i46 := $M.56;
    goto corral_source_split_11425;

  corral_source_split_11425:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i46, 1);
    goto corral_source_split_11426;

  corral_source_split_11426:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb39:
    assume $i47 == 1;
    goto corral_source_split_11473;

  corral_source_split_11473:
    assume {:verifier.code 0} true;
    $p48 := $M.71;
    goto corral_source_split_11474;

  corral_source_split_11474:
    assume {:verifier.code 0} true;
    $p49 := $M.72;
    goto corral_source_split_11475;

  corral_source_split_11475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1645} isp1760_ep_free_request($p48, $p49);
    goto corral_source_split_11476;

  corral_source_split_11476:
    assume {:verifier.code 0} true;
    $M.56 := 1;
    call {:si_unique_call 1646} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_11477;

  corral_source_split_11477:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb13:
    assume $i17 == 1;
    goto corral_source_split_11420;

  corral_source_split_11420:
    assume {:verifier.code 0} true;
    $i42 := $M.56;
    goto corral_source_split_11421;

  corral_source_split_11421:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i42, 1);
    goto corral_source_split_11422;

  corral_source_split_11422:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb36:
    assume $i43 == 1;
    goto corral_source_split_11468;

  corral_source_split_11468:
    assume {:verifier.code 0} true;
    $p44 := $M.71;
    goto corral_source_split_11469;

  corral_source_split_11469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1643} vslice_dummy_var_122 := isp1760_ep_set_wedge($p44);
    goto SeqInstr_442, SeqInstr_443;

  SeqInstr_443:
    assume assertsPassed;
    goto SeqInstr_444;

  SeqInstr_444:
    goto corral_source_split_11470;

  corral_source_split_11470:
    assume {:verifier.code 0} true;
    $M.56 := 1;
    call {:si_unique_call 1644} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_11471;

  corral_source_split_11471:
    assume {:verifier.code 0} true;
    goto $bb38;

  SeqInstr_442:
    assume !assertsPassed;
    return;

  $bb2:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i11, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i11, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i19 == 1);
    goto corral_source_split_11432;

  corral_source_split_11432:
    assume {:verifier.code 0} true;
    $i37 := $M.56;
    goto corral_source_split_11433;

  corral_source_split_11433:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 1);
    goto corral_source_split_11434;

  corral_source_split_11434:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb33:
    assume $i38 == 1;
    goto corral_source_split_11462;

  corral_source_split_11462:
    assume {:verifier.code 0} true;
    $p39 := $M.71;
    goto corral_source_split_11463;

  corral_source_split_11463:
    assume {:verifier.code 0} true;
    $p40 := $M.72;
    goto corral_source_split_11464;

  corral_source_split_11464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1641} vslice_dummy_var_121 := isp1760_ep_dequeue($p39, $p40);
    goto SeqInstr_439, SeqInstr_440;

  SeqInstr_440:
    assume assertsPassed;
    goto SeqInstr_441;

  SeqInstr_441:
    goto corral_source_split_11465;

  corral_source_split_11465:
    assume {:verifier.code 0} true;
    $M.56 := 1;
    call {:si_unique_call 1642} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_11466;

  corral_source_split_11466:
    assume {:verifier.code 0} true;
    goto $bb35;

  SeqInstr_439:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i19 == 1;
    goto corral_source_split_11428;

  corral_source_split_11428:
    assume {:verifier.code 0} true;
    $i32 := $M.56;
    goto corral_source_split_11429;

  corral_source_split_11429:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 1);
    goto corral_source_split_11430;

  corral_source_split_11430:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb30:
    assume $i33 == 1;
    goto corral_source_split_11456;

  corral_source_split_11456:
    assume {:verifier.code 0} true;
    $p34 := $M.71;
    goto corral_source_split_11457;

  corral_source_split_11457:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.44, $p2);
    goto corral_source_split_11458;

  corral_source_split_11458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1639} vslice_dummy_var_120 := isp1760_ep_alloc_request($p34, $i35);
    goto SeqInstr_436, SeqInstr_437;

  SeqInstr_437:
    assume assertsPassed;
    goto SeqInstr_438;

  SeqInstr_438:
    goto corral_source_split_11459;

  corral_source_split_11459:
    assume {:verifier.code 0} true;
    $M.56 := 1;
    call {:si_unique_call 1640} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_11460;

  corral_source_split_11460:
    assume {:verifier.code 0} true;
    goto $bb32;

  SeqInstr_436:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i11, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i20 == 1);
    goto corral_source_split_11436;

  corral_source_split_11436:
    assume {:verifier.code 0} true;
    $i26 := $M.56;
    goto corral_source_split_11437;

  corral_source_split_11437:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 1);
    goto corral_source_split_11438;

  corral_source_split_11438:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb27:
    assume $i27 == 1;
    goto corral_source_split_11449;

  corral_source_split_11449:
    assume {:verifier.code 0} true;
    $p28 := $M.71;
    goto corral_source_split_11450;

  corral_source_split_11450:
    assume {:verifier.code 0} true;
    $p29 := $M.72;
    goto corral_source_split_11451;

  corral_source_split_11451:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.44, $p0);
    goto corral_source_split_11452;

  corral_source_split_11452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1637} vslice_dummy_var_119 := isp1760_ep_queue($p28, $p29, $i30);
    goto SeqInstr_433, SeqInstr_434;

  SeqInstr_434:
    assume assertsPassed;
    goto SeqInstr_435;

  SeqInstr_435:
    goto corral_source_split_11453;

  corral_source_split_11453:
    assume {:verifier.code 0} true;
    $M.56 := 1;
    call {:si_unique_call 1638} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_11454;

  corral_source_split_11454:
    assume {:verifier.code 0} true;
    goto $bb29;

  SeqInstr_433:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i11, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb12;

  $bb21:
    assume $i21 == 1;
    goto corral_source_split_11440;

  corral_source_split_11440:
    assume {:verifier.code 0} true;
    $i22 := $M.56;
    goto corral_source_split_11441;

  corral_source_split_11441:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 1);
    goto corral_source_split_11442;

  corral_source_split_11442:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb23:
    assume $i23 == 1;
    goto corral_source_split_11444;

  corral_source_split_11444:
    assume {:verifier.code 0} true;
    $p24 := $M.71;
    goto corral_source_split_11445;

  corral_source_split_11445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1635} vslice_dummy_var_118 := isp1760_ep_disable($p24);
    goto SeqInstr_430, SeqInstr_431;

  SeqInstr_431:
    assume assertsPassed;
    goto SeqInstr_432;

  SeqInstr_432:
    goto corral_source_split_11446;

  corral_source_split_11446:
    assume {:verifier.code 0} true;
    $M.56 := 1;
    call {:si_unique_call 1636} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_11447;

  corral_source_split_11447:
    assume {:verifier.code 0} true;
    goto $bb25;

  SeqInstr_430:
    assume !assertsPassed;
    return;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 493831);

procedure ldv_check_final_state();
  free requires assertsPassed;



implementation ldv_check_final_state()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11497;

  corral_source_split_11497:
    assume {:verifier.code 0} true;
    return;
}



const isp1760_init_kmem_once: ref;

axiom isp1760_init_kmem_once == $sub.ref(0, 494863);

procedure isp1760_init_kmem_once() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.35, $M.37, $M.39;



implementation isp1760_init_kmem_once() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11499;

  corral_source_split_11499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1654} $p0 := kmem_cache_create(.str, 24, 0, 1179648, $0.ref);
    goto corral_source_split_11500;

  corral_source_split_11500:
    assume {:verifier.code 0} true;
    $M.35 := $p0;
    goto corral_source_split_11501;

  corral_source_split_11501:
    assume {:verifier.code 0} true;
    $p1 := $M.35;
    goto corral_source_split_11502;

  corral_source_split_11502:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_11503;

  corral_source_split_11503:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_11504;

  corral_source_split_11504:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1655} $p5 := kmem_cache_create(.str.1, 72, 0, 1179648, $0.ref);
    goto corral_source_split_11510;

  corral_source_split_11510:
    assume {:verifier.code 0} true;
    $M.37 := $p5;
    goto corral_source_split_11511;

  corral_source_split_11511:
    assume {:verifier.code 0} true;
    $p6 := $M.37;
    goto corral_source_split_11512;

  corral_source_split_11512:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_11513;

  corral_source_split_11513:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_11514;

  corral_source_split_11514:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1656} $p9 := kmem_cache_create(.str.2, 48, 0, 1179648, $0.ref);
    goto corral_source_split_11518;

  corral_source_split_11518:
    assume {:verifier.code 0} true;
    $M.39 := $p9;
    goto corral_source_split_11519;

  corral_source_split_11519:
    assume {:verifier.code 0} true;
    $p10 := $M.39;
    goto corral_source_split_11520;

  corral_source_split_11520:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_11521;

  corral_source_split_11521:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_11522;

  corral_source_split_11522:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_11508;

  corral_source_split_11508:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb8:
    assume $i12 == 1;
    goto corral_source_split_11524;

  corral_source_split_11524:
    assume {:verifier.code 0} true;
    $p13 := $M.37;
    goto corral_source_split_11525;

  corral_source_split_11525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1657} kmem_cache_destroy($p13);
    goto corral_source_split_11526;

  corral_source_split_11526:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 12);
    goto $bb3;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_11516;

  corral_source_split_11516:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 12);
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_11506;

  corral_source_split_11506:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 12);
    goto $bb3;
}



const ldv___platform_driver_register_46: ref;

axiom ldv___platform_driver_register_46 == $sub.ref(0, 495895);

procedure ldv___platform_driver_register_46($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.49, $M.45, $M.0, $CurrAddr;



implementation ldv___platform_driver_register_46($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11528;

  corral_source_split_11528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1658} $i2 := __platform_driver_register($p0, $p1);
    call {:si_unique_call 1659} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_11529;

  corral_source_split_11529:
    assume {:verifier.code 0} true;
    $M.49 := 1;
    call {:si_unique_call 1660} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_11530;

  corral_source_split_11530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1661} ldv_platform_driver_init_7();
    goto corral_source_split_11531;

  corral_source_split_11531:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv___pci_register_driver_47: ref;

axiom ldv___pci_register_driver_47 == $sub.ref(0, 496927);

procedure ldv___pci_register_driver_47($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.51, $M.46, $M.0, $CurrAddr;



implementation ldv___pci_register_driver_47($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11533;

  corral_source_split_11533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1662} $i3 := __pci_register_driver($p0, $p1, $p2);
    call {:si_unique_call 1663} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_11534;

  corral_source_split_11534:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1664} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_11535;

  corral_source_split_11535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1665} ldv_pci_driver_8();
    goto corral_source_split_11536;

  corral_source_split_11536:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const isp1760_deinit_kmem_cache: ref;

axiom isp1760_deinit_kmem_cache == $sub.ref(0, 497959);

procedure isp1760_deinit_kmem_cache();
  free requires assertsPassed;



implementation isp1760_deinit_kmem_cache()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11538;

  corral_source_split_11538:
    assume {:verifier.code 0} true;
    $p0 := $M.37;
    goto corral_source_split_11539;

  corral_source_split_11539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1666} kmem_cache_destroy($p0);
    goto corral_source_split_11540;

  corral_source_split_11540:
    assume {:verifier.code 0} true;
    $p1 := $M.39;
    goto corral_source_split_11541;

  corral_source_split_11541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1667} kmem_cache_destroy($p1);
    goto corral_source_split_11542;

  corral_source_split_11542:
    assume {:verifier.code 0} true;
    $p2 := $M.35;
    goto corral_source_split_11543;

  corral_source_split_11543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1668} kmem_cache_destroy($p2);
    goto corral_source_split_11544;

  corral_source_split_11544:
    assume {:verifier.code 0} true;
    return;
}



const kmem_cache_destroy: ref;

axiom kmem_cache_destroy == $sub.ref(0, 498991);

procedure kmem_cache_destroy($p0: ref);
  free requires assertsPassed;



implementation kmem_cache_destroy($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11546;

  corral_source_split_11546:
    assume {:verifier.code 0} true;
    return;
}



const __pci_register_driver: ref;

axiom __pci_register_driver == $sub.ref(0, 500023);

procedure __pci_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __pci_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11548;

  corral_source_split_11548:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1669} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1670} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_11549;

  corral_source_split_11549:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __platform_driver_register: ref;

axiom __platform_driver_register == $sub.ref(0, 501055);

procedure __platform_driver_register($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __platform_driver_register($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11551;

  corral_source_split_11551:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1671} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1672} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_11552;

  corral_source_split_11552:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const kmem_cache_create: ref;

axiom kmem_cache_create == $sub.ref(0, 502087);

procedure kmem_cache_create($p0: ref, $i1: i64, $i2: i64, $i3: i64, $p4: ref) returns ($r: ref);
  free requires assertsPassed;



implementation kmem_cache_create($p0: ref, $i1: i64, $i2: i64, $i3: i64, $p4: ref) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1673} {:cexpr "kmem_cache_create:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 1674} {:cexpr "kmem_cache_create:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 1675} {:cexpr "kmem_cache_create:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_11554;

  corral_source_split_11554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1676} $p5 := external_alloc();
    goto corral_source_split_11555;

  corral_source_split_11555:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_11556;

  corral_source_split_11556:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const ldv_platform_driver_unregister_48: ref;

axiom ldv_platform_driver_unregister_48 == $sub.ref(0, 503119);

procedure ldv_platform_driver_unregister_48($p0: ref);
  free requires assertsPassed;
  modifies $M.49;



implementation ldv_platform_driver_unregister_48($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11558;

  corral_source_split_11558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1677} platform_driver_unregister($p0);
    goto corral_source_split_11559;

  corral_source_split_11559:
    assume {:verifier.code 0} true;
    $M.49 := 0;
    call {:si_unique_call 1678} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    goto corral_source_split_11560;

  corral_source_split_11560:
    assume {:verifier.code 0} true;
    return;
}



const ldv_pci_unregister_driver_49: ref;

axiom ldv_pci_unregister_driver_49 == $sub.ref(0, 504151);

procedure ldv_pci_unregister_driver_49($p0: ref);
  free requires assertsPassed;
  modifies $M.51;



implementation ldv_pci_unregister_driver_49($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11562;

  corral_source_split_11562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1679} pci_unregister_driver($p0);
    goto corral_source_split_11563;

  corral_source_split_11563:
    assume {:verifier.code 0} true;
    $M.51 := 0;
    call {:si_unique_call 1680} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(0);
    goto corral_source_split_11564;

  corral_source_split_11564:
    assume {:verifier.code 0} true;
    return;
}



const pci_unregister_driver: ref;

axiom pci_unregister_driver == $sub.ref(0, 505183);

procedure pci_unregister_driver($p0: ref);
  free requires assertsPassed;



implementation pci_unregister_driver($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11566;

  corral_source_split_11566:
    assume {:verifier.code 0} true;
    return;
}



const platform_driver_unregister: ref;

axiom platform_driver_unregister == $sub.ref(0, 506215);

procedure platform_driver_unregister($p0: ref);
  free requires assertsPassed;



implementation platform_driver_unregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11568;

  corral_source_split_11568:
    assume {:verifier.code 0} true;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 507247);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1681} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_11570;

  corral_source_split_11570:
    assume {:verifier.code 1} true;
    goto corral_source_split_11571;

  corral_source_split_11571:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_11572;

  corral_source_split_11572:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 508279);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 509311);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 510343);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11574;

  corral_source_split_11574:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_448, SeqInstr_449;

  SeqInstr_449:
    assume assertsPassed;
    goto SeqInstr_450;

  SeqInstr_450:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_11575;

  corral_source_split_11575:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_448:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 511375);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 512407);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 513439);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 514471);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 515503);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 516535);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 517567);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 518599);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 519631);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 520663);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11577;

  corral_source_split_11577:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1682} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 1683} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1684} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_11578;

  corral_source_split_11578:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_11579;

  corral_source_split_11579:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_11583;

  corral_source_split_11583:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_11584;

  corral_source_split_11584:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1685} __VERIFIER_assume($i4);
    goto corral_source_split_11585;

  corral_source_split_11585:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_11581;

  corral_source_split_11581:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 521695);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 522727);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 523759);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 524791);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 525823);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 526855);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 527887);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 528919);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 529951);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11587;

  corral_source_split_11587:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1686} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1687} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1688} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_11588;

  corral_source_split_11588:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1689} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1690} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 1691} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_11589;

  corral_source_split_11589:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1692} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1693} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 1694} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_11590;

  corral_source_split_11590:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_11591;

  corral_source_split_11591:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_11596;

  corral_source_split_11596:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_11597;

  corral_source_split_11597:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1695} __VERIFIER_assume($i7);
    goto corral_source_split_11598;

  corral_source_split_11598:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_11599;

  corral_source_split_11599:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_11605;

  corral_source_split_11605:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_11606;

  corral_source_split_11606:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1696} __VERIFIER_assume($i11);
    goto corral_source_split_11607;

  corral_source_split_11607:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_11603;

  corral_source_split_11603:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_11593;

  corral_source_split_11593:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_11594;

  corral_source_split_11594:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_11601;

  corral_source_split_11601:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 530983);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 532015);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 533047);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 534079);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 535111);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 536143);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 537175);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 538207);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 539239);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11609;

  corral_source_split_11609:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1697} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 1698} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1699} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_11610;

  corral_source_split_11610:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 540271);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11612;

  corral_source_split_11612:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1700} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 1701} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_11613;

  corral_source_split_11613:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 541303);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 542335);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1702} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1703} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 543367);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 544399);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11615;

  corral_source_split_11615:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_11616;

  corral_source_split_11616:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 545431);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_10: [ref]i8;
  var cmdloc_dummy_var_11: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1704} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 1705} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_11618;

  corral_source_split_11618:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1706} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1707} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_11619;

  corral_source_split_11619:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_11620;

  corral_source_split_11620:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_11624;

  corral_source_split_11624:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_11625;

  corral_source_split_11625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1708} $p6 := malloc($i5);
    goto corral_source_split_11626;

  corral_source_split_11626:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_11627;

  corral_source_split_11627:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_10 := $M.0;
    call {:si_unique_call 1709} cmdloc_dummy_var_11 := $memset.i8(cmdloc_dummy_var_10, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_11;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_11629;

  corral_source_split_11629:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_11622;

  corral_source_split_11622:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 546463);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 547495);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.58, $M.8, $M.2, $M.6, $M.4, $M.45, $M.46, $M.54, $M.47, $M.49, $M.51, $M.53, $M.55, $M.56, $M.57, $M.59, $M.60, $M.61, $M.68, $M.66, $M.69, $M.67, $M.22, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.3, $M.5, $M.7, $M.9, $M.71, $M.72, $M.70, $M.30, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.0, $M.131, $M.132, $M.35, $M.39, $M.37, $M.156, $M.157;



implementation __SMACK_static_init()
{

  $bb0:
    $M.58 := 0;
    call {:si_unique_call 1710} {:cexpr "probed_7"} boogie_si_record_i32(0);
    $M.8 := 0;
    call {:si_unique_call 1711} {:cexpr "ldv_irq_1_3"} boogie_si_record_i32(0);
    $M.2 := 0;
    call {:si_unique_call 1712} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32(0);
    $M.6 := 0;
    call {:si_unique_call 1713} {:cexpr "ldv_irq_1_2"} boogie_si_record_i32(0);
    call {:si_unique_call 1714} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    $M.4 := 0;
    call {:si_unique_call 1715} {:cexpr "ldv_irq_1_1"} boogie_si_record_i32(0);
    $M.45 := $0.ref;
    $M.46 := $0.ref;
    $M.54 := 0;
    call {:si_unique_call 1716} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.47 := 0;
    call {:si_unique_call 1717} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    call {:si_unique_call 1718} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    $M.49 := 0;
    call {:si_unique_call 1719} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    call {:si_unique_call 1720} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    $M.51 := 0;
    call {:si_unique_call 1721} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(0);
    call {:si_unique_call 1722} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.53 := 0;
    call {:si_unique_call 1723} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    $M.55 := 0;
    call {:si_unique_call 1724} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.56 := 0;
    call {:si_unique_call 1725} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    $M.57 := 0;
    call {:si_unique_call 1726} {:cexpr "ldv_retval_2"} boogie_si_record_i32(0);
    $M.59 := 0;
    call {:si_unique_call 1727} {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
    $M.60 := 0;
    call {:si_unique_call 1728} {:cexpr "ldv_retval_3"} boogie_si_record_i32(0);
    $M.61 := 0;
    call {:si_unique_call 1729} {:cexpr "ldv_retval_4"} boogie_si_record_i32(0);
    call {:si_unique_call 1730} {:cexpr "ldv_timer_2_0"} boogie_si_record_i32(0);
    call {:si_unique_call 1731} {:cexpr "ldv_timer_2_1"} boogie_si_record_i32(0);
    call {:si_unique_call 1732} {:cexpr "ldv_timer_2_2"} boogie_si_record_i32(0);
    call {:si_unique_call 1733} {:cexpr "ldv_timer_2_3"} boogie_si_record_i32(0);
    $M.68 := $0.ref;
    $M.66 := $0.ref;
    $M.69 := $0.ref;
    $M.67 := 0;
    call {:si_unique_call 1734} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.22 := 0;
    call {:si_unique_call 1735} {:cexpr "ldv_timer_3_0"} boogie_si_record_i32(0);
    $M.23 := $0.ref;
    $M.24 := 0;
    call {:si_unique_call 1736} {:cexpr "ldv_timer_3_1"} boogie_si_record_i32(0);
    $M.25 := $0.ref;
    $M.26 := 0;
    call {:si_unique_call 1737} {:cexpr "ldv_timer_3_2"} boogie_si_record_i32(0);
    $M.27 := $0.ref;
    $M.28 := 0;
    call {:si_unique_call 1738} {:cexpr "ldv_timer_3_3"} boogie_si_record_i32(0);
    $M.29 := $0.ref;
    $M.3 := 0;
    call {:si_unique_call 1739} {:cexpr "ldv_irq_line_1_0"} boogie_si_record_i32(0);
    $M.5 := 0;
    call {:si_unique_call 1740} {:cexpr "ldv_irq_line_1_1"} boogie_si_record_i32(0);
    $M.7 := 0;
    call {:si_unique_call 1741} {:cexpr "ldv_irq_line_1_2"} boogie_si_record_i32(0);
    $M.9 := 0;
    call {:si_unique_call 1742} {:cexpr "ldv_irq_line_1_3"} boogie_si_record_i32(0);
    $M.71 := $0.ref;
    $M.72 := $0.ref;
    $M.70 := $0.ref;
    $M.30 := 0;
    call {:si_unique_call 1743} {:cexpr "ldv_spin"} boogie_si_record_i32(0);
    call {:si_unique_call 1744} {:cexpr "pci_counter"} boogie_si_record_i32(0);
    $M.79 := $store.i32($M.79, __mod_pci__isp1760_plx_device_table, 0);
    $M.80 := $store.i32($M.80, $add.ref($add.ref($add.ref(__mod_pci__isp1760_plx_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(4, 1)), 0);
    $M.81 := $store.i32($M.81, $add.ref($add.ref($add.ref(__mod_pci__isp1760_plx_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(8, 1)), 0);
    $M.82 := $store.i32($M.82, $add.ref($add.ref($add.ref(__mod_pci__isp1760_plx_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(12, 1)), 0);
    $M.83 := $store.i32($M.83, $add.ref($add.ref($add.ref(__mod_pci__isp1760_plx_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.84 := $store.i32($M.84, $add.ref($add.ref($add.ref(__mod_pci__isp1760_plx_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(20, 1)), 0);
    $M.85 := $store.i64($M.85, $add.ref($add.ref($add.ref(__mod_pci__isp1760_plx_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.79 := $store.i32($M.79, $add.ref($add.ref($add.ref(__mod_pci__isp1760_plx_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), 0);
    $M.80 := $store.i32($M.80, $add.ref($add.ref($add.ref(__mod_pci__isp1760_plx_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(4, 1)), 0);
    $M.81 := $store.i32($M.81, $add.ref($add.ref($add.ref(__mod_pci__isp1760_plx_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(8, 1)), 0);
    $M.82 := $store.i32($M.82, $add.ref($add.ref($add.ref(__mod_pci__isp1760_plx_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(12, 1)), 0);
    $M.83 := $store.i32($M.83, $add.ref($add.ref($add.ref(__mod_pci__isp1760_plx_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.84 := $store.i32($M.84, $add.ref($add.ref($add.ref(__mod_pci__isp1760_plx_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(20, 1)), 0);
    $M.85 := $store.i64($M.85, $add.ref($add.ref($add.ref(__mod_pci__isp1760_plx_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.86 := $store.i8($M.86, __mod_of__isp1760_of_match_device_table, 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(0, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(1, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(2, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(3, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(4, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(5, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(6, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(9, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(10, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(11, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(12, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(13, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(14, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(15, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(16, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(17, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(18, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(19, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(20, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(21, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(22, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(23, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(24, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(25, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(26, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(27, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(28, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(29, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(30, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(31, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(0, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(1, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(2, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(3, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(4, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(5, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(6, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(9, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(10, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(11, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(12, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(13, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(14, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(15, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(16, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(17, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(18, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(19, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(20, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(21, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(22, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(23, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(24, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(25, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(26, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(27, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(28, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(29, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(30, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(31, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(32, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(33, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(34, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(35, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(36, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(37, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(38, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(39, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(40, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(41, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(42, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(43, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(44, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(45, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(46, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(47, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(48, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(49, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(50, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(51, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(52, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(53, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(54, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(55, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(56, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(57, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(58, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(59, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(60, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(61, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(62, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(63, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(64, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(65, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(66, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(67, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(68, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(69, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(70, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(71, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(72, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(73, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(74, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(75, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(76, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(77, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(78, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(79, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(80, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(81, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(82, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(83, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(84, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(85, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(86, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(87, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(88, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(89, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(90, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(91, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(92, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(93, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(94, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(95, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(96, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(97, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(98, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(99, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(100, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(101, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(102, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(103, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(104, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(105, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(106, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(107, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(108, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(109, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(110, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(111, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(112, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(113, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(114, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(115, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(116, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(117, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(118, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(119, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(120, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(121, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(122, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(123, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(124, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(125, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(126, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(127, 1)), 0);
    $M.86 := $store.ref($M.86, $add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(192, 1)), $0.ref);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(0, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(1, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(2, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(3, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(4, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(5, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(6, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(9, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(10, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(11, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(12, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(13, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(14, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(15, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(16, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(17, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(18, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(19, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(20, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(21, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(22, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(23, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(24, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(25, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(26, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(27, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(28, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(29, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(30, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(31, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(0, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(1, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(2, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(3, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(4, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(5, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(6, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(9, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(10, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(11, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(12, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(13, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(14, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(15, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(16, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(17, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(18, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(19, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(20, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(21, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(22, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(23, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(24, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(25, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(26, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(27, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(28, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(29, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(30, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(31, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(32, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(33, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(34, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(35, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(36, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(37, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(38, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(39, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(40, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(41, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(42, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(43, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(44, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(45, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(46, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(47, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(48, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(49, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(50, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(51, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(52, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(53, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(54, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(55, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(56, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(57, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(58, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(59, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(60, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(61, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(62, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(63, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(64, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(65, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(66, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(67, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(68, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(69, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(70, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(71, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(72, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(73, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(74, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(75, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(76, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(77, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(78, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(79, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(80, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(81, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(82, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(83, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(84, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(85, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(86, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(87, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(88, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(89, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(90, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(91, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(92, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(93, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(94, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(95, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(96, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(97, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(98, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(99, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(100, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(101, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(102, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(103, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(104, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(105, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(106, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(107, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(108, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(109, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(110, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(111, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(112, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(113, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(114, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(115, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(116, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(117, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(118, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(119, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(120, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(121, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(122, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(123, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(124, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(125, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(126, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(127, 1)), 0);
    $M.86 := $store.ref($M.86, $add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(192, 1)), $0.ref);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(32, 1)), $mul.ref(0, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(32, 1)), $mul.ref(1, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(32, 1)), $mul.ref(2, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(32, 1)), $mul.ref(3, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(32, 1)), $mul.ref(4, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(32, 1)), $mul.ref(5, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(32, 1)), $mul.ref(6, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(32, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(32, 1)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(32, 1)), $mul.ref(9, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(32, 1)), $mul.ref(10, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(32, 1)), $mul.ref(11, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(32, 1)), $mul.ref(12, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(32, 1)), $mul.ref(13, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(32, 1)), $mul.ref(14, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(32, 1)), $mul.ref(15, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(32, 1)), $mul.ref(16, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(32, 1)), $mul.ref(17, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(32, 1)), $mul.ref(18, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(32, 1)), $mul.ref(19, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(32, 1)), $mul.ref(20, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(32, 1)), $mul.ref(21, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(32, 1)), $mul.ref(22, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(32, 1)), $mul.ref(23, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(32, 1)), $mul.ref(24, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(32, 1)), $mul.ref(25, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(32, 1)), $mul.ref(26, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(32, 1)), $mul.ref(27, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(32, 1)), $mul.ref(28, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(32, 1)), $mul.ref(29, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(32, 1)), $mul.ref(30, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(32, 1)), $mul.ref(31, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(0, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(1, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(2, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(3, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(4, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(5, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(6, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(7, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(8, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(9, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(10, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(11, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(12, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(13, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(14, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(15, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(16, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(17, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(18, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(19, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(20, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(21, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(22, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(23, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(24, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(25, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(26, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(27, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(28, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(29, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(30, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(31, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(32, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(33, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(34, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(35, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(36, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(37, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(38, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(39, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(40, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(41, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(42, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(43, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(44, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(45, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(46, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(47, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(48, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(49, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(50, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(51, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(52, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(53, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(54, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(55, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(56, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(57, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(58, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(59, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(60, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(61, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(62, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(63, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(64, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(65, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(66, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(67, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(68, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(69, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(70, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(71, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(72, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(73, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(74, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(75, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(76, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(77, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(78, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(79, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(80, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(81, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(82, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(83, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(84, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(85, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(86, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(87, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(88, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(89, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(90, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(91, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(92, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(93, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(94, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(95, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(96, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(97, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(98, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(99, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(100, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(101, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(102, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(103, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(104, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(105, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(106, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(107, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(108, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(109, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(110, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(111, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(112, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(113, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(114, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(115, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(116, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(117, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(118, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(119, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(120, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(121, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(122, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(123, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(124, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(125, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(126, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(127, 1)), 0);
    $M.86 := $store.ref($M.86, $add.ref($add.ref($add.ref(__mod_of__isp1760_of_match_device_table, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(192, 1)), $0.ref);
    $M.0 := $store.ref($M.0, isp1760_ep_ops, isp1760_ep_enable);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(isp1760_ep_ops, $mul.ref(0, 80)), $mul.ref(8, 1)), isp1760_ep_disable);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(isp1760_ep_ops, $mul.ref(0, 80)), $mul.ref(16, 1)), isp1760_ep_alloc_request);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(isp1760_ep_ops, $mul.ref(0, 80)), $mul.ref(24, 1)), isp1760_ep_free_request);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(isp1760_ep_ops, $mul.ref(0, 80)), $mul.ref(32, 1)), isp1760_ep_queue);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(isp1760_ep_ops, $mul.ref(0, 80)), $mul.ref(40, 1)), isp1760_ep_dequeue);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(isp1760_ep_ops, $mul.ref(0, 80)), $mul.ref(48, 1)), isp1760_ep_set_halt);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(isp1760_ep_ops, $mul.ref(0, 80)), $mul.ref(56, 1)), isp1760_ep_set_wedge);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(isp1760_ep_ops, $mul.ref(0, 80)), $mul.ref(64, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(isp1760_ep_ops, $mul.ref(0, 80)), $mul.ref(72, 1)), isp1760_ep_fifo_flush);
    $M.0 := $store.ref($M.0, isp1760_udc_ops, isp1760_udc_get_frame);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(isp1760_udc_ops, $mul.ref(0, 80)), $mul.ref(8, 1)), isp1760_udc_wakeup);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(isp1760_udc_ops, $mul.ref(0, 80)), $mul.ref(16, 1)), isp1760_udc_set_selfpowered);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(isp1760_udc_ops, $mul.ref(0, 80)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(isp1760_udc_ops, $mul.ref(0, 80)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(isp1760_udc_ops, $mul.ref(0, 80)), $mul.ref(40, 1)), isp1760_udc_pullup);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(isp1760_udc_ops, $mul.ref(0, 80)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(isp1760_udc_ops, $mul.ref(0, 80)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(isp1760_udc_ops, $mul.ref(0, 80)), $mul.ref(64, 1)), isp1760_udc_start);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(isp1760_udc_ops, $mul.ref(0, 80)), $mul.ref(72, 1)), isp1760_udc_stop);
    $M.0 := $store.ref($M.0, errata2_timer, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(errata2_timer, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(errata2_timer, $mul.ref(0, 128)), $mul.ref(16, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(errata2_timer, $mul.ref(0, 128)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(errata2_timer, $mul.ref(0, 128)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(errata2_timer, $mul.ref(0, 128)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(errata2_timer, $mul.ref(0, 128)), $mul.ref(44, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(errata2_timer, $mul.ref(0, 128)), $mul.ref(48, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(errata2_timer, $mul.ref(0, 128)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(errata2_timer, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(errata2_timer, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(errata2_timer, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(errata2_timer, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(errata2_timer, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(errata2_timer, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(errata2_timer, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(errata2_timer, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(errata2_timer, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(errata2_timer, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(errata2_timer, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(errata2_timer, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(errata2_timer, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(errata2_timer, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(errata2_timer, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(errata2_timer, $mul.ref(0, 128)), $mul.ref(64, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(errata2_timer, $mul.ref(0, 128)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(errata2_timer, $mul.ref(0, 128)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(errata2_timer, $mul.ref(0, 128)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(errata2_timer, $mul.ref(0, 128)), $mul.ref(80, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(errata2_timer, $mul.ref(0, 128)), $mul.ref(80, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(errata2_timer, $mul.ref(0, 128)), $mul.ref(80, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, isp1760_plx, 4277);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(isp1760_plx, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(4, 1)), 21510);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(isp1760_plx, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(8, 1)), 4277);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(isp1760_plx, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(12, 1)), 36948);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(isp1760_plx, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(16, 1)), 425984);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(isp1760_plx, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(20, 1)), $sub.i32(0, 1));
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(isp1760_plx, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(isp1760_plx, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(isp1760_plx, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(isp1760_plx, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(isp1760_plx, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(isp1760_plx, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(isp1760_plx, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(isp1760_plx, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.131 := $store.ref($M.131, isp1761_pci_driver, $0.ref);
    $M.131 := $store.ref($M.131, $add.ref($add.ref($add.ref(isp1761_pci_driver, $mul.ref(0, 312)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.131 := $store.ref($M.131, $add.ref($add.ref(isp1761_pci_driver, $mul.ref(0, 312)), $mul.ref(16, 1)), .str.26);
    $M.131 := $store.ref($M.131, $add.ref($add.ref(isp1761_pci_driver, $mul.ref(0, 312)), $mul.ref(24, 1)), isp1760_plx);
    $M.131 := $store.ref($M.131, $add.ref($add.ref(isp1761_pci_driver, $mul.ref(0, 312)), $mul.ref(32, 1)), isp1761_pci_probe);
    $M.131 := $store.ref($M.131, $add.ref($add.ref(isp1761_pci_driver, $mul.ref(0, 312)), $mul.ref(40, 1)), isp1761_pci_remove);
    $M.131 := $store.ref($M.131, $add.ref($add.ref(isp1761_pci_driver, $mul.ref(0, 312)), $mul.ref(48, 1)), $0.ref);
    $M.131 := $store.ref($M.131, $add.ref($add.ref(isp1761_pci_driver, $mul.ref(0, 312)), $mul.ref(56, 1)), $0.ref);
    $M.131 := $store.ref($M.131, $add.ref($add.ref(isp1761_pci_driver, $mul.ref(0, 312)), $mul.ref(64, 1)), $0.ref);
    $M.131 := $store.ref($M.131, $add.ref($add.ref(isp1761_pci_driver, $mul.ref(0, 312)), $mul.ref(72, 1)), $0.ref);
    $M.131 := $store.ref($M.131, $add.ref($add.ref(isp1761_pci_driver, $mul.ref(0, 312)), $mul.ref(80, 1)), isp1761_pci_shutdown);
    $M.131 := $store.ref($M.131, $add.ref($add.ref(isp1761_pci_driver, $mul.ref(0, 312)), $mul.ref(88, 1)), $0.ref);
    $M.131 := $store.ref($M.131, $add.ref($add.ref(isp1761_pci_driver, $mul.ref(0, 312)), $mul.ref(96, 1)), $0.ref);
    $M.131 := $store.ref($M.131, $add.ref($add.ref($add.ref(isp1761_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(0, 1)), $0.ref);
    $M.131 := $store.ref($M.131, $add.ref($add.ref($add.ref(isp1761_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(8, 1)), $0.ref);
    $M.131 := $store.ref($M.131, $add.ref($add.ref($add.ref(isp1761_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(16, 1)), $0.ref);
    $M.131 := $store.ref($M.131, $add.ref($add.ref($add.ref(isp1761_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(24, 1)), $0.ref);
    $M.131 := $store.i8($M.131, $add.ref($add.ref($add.ref(isp1761_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(32, 1)), 0);
    $M.131 := $store.i32($M.131, $add.ref($add.ref($add.ref(isp1761_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(36, 1)), 0);
    $M.131 := $store.ref($M.131, $add.ref($add.ref($add.ref(isp1761_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(40, 1)), $0.ref);
    $M.131 := $store.ref($M.131, $add.ref($add.ref($add.ref(isp1761_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(48, 1)), $0.ref);
    $M.131 := $store.ref($M.131, $add.ref($add.ref($add.ref(isp1761_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(56, 1)), $0.ref);
    $M.131 := $store.ref($M.131, $add.ref($add.ref($add.ref(isp1761_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(64, 1)), $0.ref);
    $M.131 := $store.ref($M.131, $add.ref($add.ref($add.ref(isp1761_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(72, 1)), $0.ref);
    $M.131 := $store.ref($M.131, $add.ref($add.ref($add.ref(isp1761_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(80, 1)), $0.ref);
    $M.131 := $store.ref($M.131, $add.ref($add.ref($add.ref(isp1761_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(88, 1)), $0.ref);
    $M.131 := $store.ref($M.131, $add.ref($add.ref($add.ref(isp1761_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(96, 1)), $0.ref);
    $M.131 := $store.ref($M.131, $add.ref($add.ref($add.ref(isp1761_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(104, 1)), $0.ref);
    $M.131 := $store.ref($M.131, $add.ref($add.ref($add.ref(isp1761_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(112, 1)), $0.ref);
    $M.131 := $store.i32($M.131, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(isp1761_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.131 := $store.i32($M.131, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(isp1761_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.131 := $store.i32($M.131, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(isp1761_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.131 := $store.ref($M.131, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(isp1761_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.131 := $store.ref($M.131, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(isp1761_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.131 := $store.ref($M.131, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(isp1761_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.131 := $store.ref($M.131, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(isp1761_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.131 := $store.ref($M.131, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(isp1761_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.131 := $store.i32($M.131, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(isp1761_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.131 := $store.i64($M.131, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(isp1761_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.131 := $store.ref($M.131, $add.ref($add.ref($add.ref($add.ref(isp1761_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.131 := $store.ref($M.131, $add.ref($add.ref($add.ref($add.ref(isp1761_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.132 := $store.i8($M.132, isp1760_of_match, 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(0, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(1, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(2, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(3, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(4, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(5, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(6, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(7, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(8, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(9, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(10, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(11, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(12, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(13, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(14, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(15, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(16, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(17, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(18, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(19, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(20, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(21, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(22, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(23, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(24, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(25, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(26, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(27, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(28, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(29, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(30, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(31, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(0, 1)), 110);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(1, 1)), 120);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(2, 1)), 112);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(3, 1)), 44);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(4, 1)), 117);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(5, 1)), 115);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(6, 1)), 98);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(7, 1)), 45);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(8, 1)), 105);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(9, 1)), 115);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(10, 1)), 112);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(11, 1)), 49);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(12, 1)), 55);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(13, 1)), 54);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(14, 1)), 48);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(15, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(16, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(17, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(18, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(19, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(20, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(21, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(22, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(23, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(24, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(25, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(26, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(27, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(28, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(29, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(30, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(31, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(32, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(33, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(34, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(35, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(36, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(37, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(38, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(39, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(40, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(41, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(42, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(43, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(44, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(45, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(46, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(47, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(48, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(49, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(50, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(51, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(52, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(53, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(54, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(55, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(56, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(57, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(58, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(59, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(60, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(61, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(62, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(63, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(64, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(65, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(66, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(67, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(68, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(69, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(70, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(71, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(72, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(73, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(74, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(75, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(76, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(77, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(78, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(79, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(80, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(81, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(82, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(83, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(84, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(85, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(86, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(87, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(88, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(89, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(90, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(91, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(92, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(93, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(94, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(95, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(96, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(97, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(98, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(99, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(100, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(101, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(102, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(103, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(104, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(105, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(106, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(107, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(108, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(109, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(110, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(111, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(112, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(113, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(114, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(115, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(116, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(117, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(118, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(119, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(120, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(121, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(122, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(123, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(124, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(125, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(126, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(127, 1)), 0);
    $M.132 := $store.ref($M.132, $add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(0, 200)), $mul.ref(192, 1)), $0.ref);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(0, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(1, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(2, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(3, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(4, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(5, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(6, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(7, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(8, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(9, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(10, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(11, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(12, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(13, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(14, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(15, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(16, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(17, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(18, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(19, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(20, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(21, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(22, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(23, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(24, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(25, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(26, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(27, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(28, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(29, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(30, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(31, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(0, 1)), 110);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(1, 1)), 120);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(2, 1)), 112);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(3, 1)), 44);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(4, 1)), 117);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(5, 1)), 115);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(6, 1)), 98);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(7, 1)), 45);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(8, 1)), 105);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(9, 1)), 115);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(10, 1)), 112);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(11, 1)), 49);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(12, 1)), 55);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(13, 1)), 54);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(14, 1)), 49);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(15, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(16, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(17, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(18, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(19, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(20, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(21, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(22, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(23, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(24, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(25, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(26, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(27, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(28, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(29, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(30, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(31, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(32, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(33, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(34, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(35, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(36, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(37, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(38, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(39, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(40, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(41, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(42, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(43, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(44, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(45, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(46, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(47, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(48, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(49, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(50, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(51, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(52, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(53, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(54, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(55, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(56, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(57, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(58, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(59, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(60, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(61, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(62, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(63, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(64, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(65, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(66, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(67, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(68, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(69, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(70, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(71, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(72, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(73, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(74, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(75, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(76, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(77, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(78, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(79, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(80, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(81, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(82, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(83, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(84, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(85, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(86, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(87, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(88, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(89, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(90, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(91, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(92, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(93, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(94, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(95, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(96, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(97, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(98, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(99, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(100, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(101, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(102, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(103, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(104, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(105, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(106, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(107, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(108, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(109, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(110, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(111, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(112, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(113, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(114, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(115, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(116, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(117, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(118, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(119, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(120, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(121, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(122, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(123, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(124, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(125, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(126, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(127, 1)), 0);
    $M.132 := $store.ref($M.132, $add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(1, 200)), $mul.ref(192, 1)), $0.ref);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(32, 1)), $mul.ref(0, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(32, 1)), $mul.ref(1, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(32, 1)), $mul.ref(2, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(32, 1)), $mul.ref(3, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(32, 1)), $mul.ref(4, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(32, 1)), $mul.ref(5, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(32, 1)), $mul.ref(6, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(32, 1)), $mul.ref(7, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(32, 1)), $mul.ref(8, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(32, 1)), $mul.ref(9, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(32, 1)), $mul.ref(10, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(32, 1)), $mul.ref(11, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(32, 1)), $mul.ref(12, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(32, 1)), $mul.ref(13, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(32, 1)), $mul.ref(14, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(32, 1)), $mul.ref(15, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(32, 1)), $mul.ref(16, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(32, 1)), $mul.ref(17, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(32, 1)), $mul.ref(18, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(32, 1)), $mul.ref(19, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(32, 1)), $mul.ref(20, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(32, 1)), $mul.ref(21, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(32, 1)), $mul.ref(22, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(32, 1)), $mul.ref(23, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(32, 1)), $mul.ref(24, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(32, 1)), $mul.ref(25, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(32, 1)), $mul.ref(26, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(32, 1)), $mul.ref(27, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(32, 1)), $mul.ref(28, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(32, 1)), $mul.ref(29, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(32, 1)), $mul.ref(30, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(32, 1)), $mul.ref(31, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(0, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(1, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(2, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(3, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(4, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(5, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(6, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(7, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(8, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(9, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(10, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(11, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(12, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(13, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(14, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(15, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(16, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(17, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(18, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(19, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(20, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(21, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(22, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(23, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(24, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(25, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(26, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(27, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(28, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(29, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(30, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(31, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(32, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(33, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(34, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(35, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(36, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(37, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(38, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(39, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(40, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(41, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(42, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(43, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(44, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(45, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(46, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(47, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(48, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(49, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(50, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(51, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(52, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(53, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(54, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(55, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(56, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(57, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(58, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(59, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(60, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(61, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(62, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(63, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(64, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(65, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(66, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(67, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(68, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(69, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(70, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(71, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(72, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(73, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(74, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(75, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(76, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(77, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(78, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(79, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(80, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(81, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(82, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(83, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(84, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(85, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(86, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(87, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(88, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(89, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(90, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(91, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(92, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(93, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(94, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(95, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(96, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(97, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(98, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(99, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(100, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(101, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(102, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(103, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(104, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(105, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(106, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(107, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(108, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(109, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(110, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(111, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(112, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(113, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(114, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(115, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(116, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(117, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(118, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(119, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(120, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(121, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(122, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(123, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(124, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(125, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(126, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(127, 1)), 0);
    $M.132 := $store.ref($M.132, $add.ref($add.ref($add.ref(isp1760_of_match, $mul.ref(0, 600)), $mul.ref(2, 200)), $mul.ref(192, 1)), $0.ref);
    $M.35 := $0.ref;
    $M.39 := $0.ref;
    $M.37 := $0.ref;
    $M.156 := $store.i8($M.156, .str.4, 37);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(.str.4, $mul.ref(0, 9)), $mul.ref(1, 1)), 115);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(.str.4, $mul.ref(0, 9)), $mul.ref(2, 1)), 32);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(.str.4, $mul.ref(0, 9)), $mul.ref(3, 1)), 40);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(.str.4, $mul.ref(0, 9)), $mul.ref(4, 1)), 117);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(.str.4, $mul.ref(0, 9)), $mul.ref(5, 1)), 100);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(.str.4, $mul.ref(0, 9)), $mul.ref(6, 1)), 99);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(.str.4, $mul.ref(0, 9)), $mul.ref(7, 1)), 41);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(.str.4, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, .str.5, 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 12)), $mul.ref(1, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 12)), $mul.ref(2, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 12)), $mul.ref(3, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 12)), $mul.ref(4, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 12)), $mul.ref(5, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 12)), $mul.ref(6, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 12)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 12)), $mul.ref(8, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 12)), $mul.ref(9, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 12)), $mul.ref(10, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.5, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, .str.101, 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 3)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 3)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, .str.102, 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 4)), $mul.ref(1, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 4)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.102, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, .str.103, 0);
    $M.157 := $store.i8($M.157, .str.100, 101);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(.str.100, $mul.ref(0, 7)), $mul.ref(1, 1)), 112);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(.str.100, $mul.ref(0, 7)), $mul.ref(2, 1)), 37);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(.str.100, $mul.ref(0, 7)), $mul.ref(3, 1)), 117);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(.str.100, $mul.ref(0, 7)), $mul.ref(4, 1)), 37);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(.str.100, $mul.ref(0, 7)), $mul.ref(5, 1)), 115);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(.str.100, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, .str.59, 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 16)), $mul.ref(1, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 16)), $mul.ref(2, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 16)), $mul.ref(3, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 16)), $mul.ref(4, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 16)), $mul.ref(5, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 16)), $mul.ref(6, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 16)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 16)), $mul.ref(8, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 16)), $mul.ref(9, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 16)), $mul.ref(10, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 16)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 16)), $mul.ref(12, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 16)), $mul.ref(13, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 16)), $mul.ref(14, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, .str.54, 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 23)), $mul.ref(1, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 23)), $mul.ref(2, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 23)), $mul.ref(3, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 23)), $mul.ref(4, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 23)), $mul.ref(5, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 23)), $mul.ref(6, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 23)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 23)), $mul.ref(8, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 23)), $mul.ref(9, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 23)), $mul.ref(10, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 23)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 23)), $mul.ref(12, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 23)), $mul.ref(13, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 23)), $mul.ref(14, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 23)), $mul.ref(15, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 23)), $mul.ref(16, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 23)), $mul.ref(17, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 23)), $mul.ref(18, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 23)), $mul.ref(19, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 23)), $mul.ref(20, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 23)), $mul.ref(21, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, .str.84, 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 18)), $mul.ref(1, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 18)), $mul.ref(2, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 18)), $mul.ref(3, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 18)), $mul.ref(4, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 18)), $mul.ref(5, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 18)), $mul.ref(6, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 18)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 18)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 18)), $mul.ref(9, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 18)), $mul.ref(10, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 18)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 18)), $mul.ref(12, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 18)), $mul.ref(13, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 18)), $mul.ref(14, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 18)), $mul.ref(15, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 18)), $mul.ref(16, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, .str.96, 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 24)), $mul.ref(1, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 24)), $mul.ref(2, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 24)), $mul.ref(3, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 24)), $mul.ref(4, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 24)), $mul.ref(5, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 24)), $mul.ref(6, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 24)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 24)), $mul.ref(8, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 24)), $mul.ref(9, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 24)), $mul.ref(10, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 24)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 24)), $mul.ref(12, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 24)), $mul.ref(13, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 24)), $mul.ref(14, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 24)), $mul.ref(15, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 24)), $mul.ref(16, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 24)), $mul.ref(17, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 24)), $mul.ref(18, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 24)), $mul.ref(19, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 24)), $mul.ref(20, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 24)), $mul.ref(21, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 24)), $mul.ref(22, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.96, $mul.ref(0, 24)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, .str.91, 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 23)), $mul.ref(1, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 23)), $mul.ref(2, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 23)), $mul.ref(3, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 23)), $mul.ref(4, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 23)), $mul.ref(5, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 23)), $mul.ref(6, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 23)), $mul.ref(7, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 23)), $mul.ref(8, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 23)), $mul.ref(9, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 23)), $mul.ref(10, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 23)), $mul.ref(11, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 23)), $mul.ref(12, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 23)), $mul.ref(13, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 23)), $mul.ref(14, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 23)), $mul.ref(15, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 23)), $mul.ref(16, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 23)), $mul.ref(17, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 23)), $mul.ref(18, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 23)), $mul.ref(19, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 23)), $mul.ref(20, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 23)), $mul.ref(21, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, .str.93, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 4)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 4)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, .str.94, 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 6)), $mul.ref(1, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 6)), $mul.ref(2, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 6)), $mul.ref(3, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 6)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, .str.72, 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 21)), $mul.ref(1, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 21)), $mul.ref(2, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 21)), $mul.ref(3, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 21)), $mul.ref(4, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 21)), $mul.ref(5, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 21)), $mul.ref(6, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 21)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 21)), $mul.ref(8, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 21)), $mul.ref(9, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 21)), $mul.ref(10, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 21)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 21)), $mul.ref(12, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 21)), $mul.ref(13, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 21)), $mul.ref(14, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 21)), $mul.ref(15, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 21)), $mul.ref(16, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 21)), $mul.ref(17, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 21)), $mul.ref(18, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 21)), $mul.ref(19, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, .str.89, 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 23)), $mul.ref(1, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 23)), $mul.ref(2, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 23)), $mul.ref(3, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 23)), $mul.ref(4, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 23)), $mul.ref(5, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 23)), $mul.ref(6, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 23)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 23)), $mul.ref(8, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 23)), $mul.ref(9, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 23)), $mul.ref(10, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 23)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 23)), $mul.ref(12, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 23)), $mul.ref(13, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 23)), $mul.ref(14, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 23)), $mul.ref(15, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 23)), $mul.ref(16, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 23)), $mul.ref(17, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 23)), $mul.ref(18, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 23)), $mul.ref(19, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 23)), $mul.ref(20, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 23)), $mul.ref(21, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, .str.87, 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 28)), $mul.ref(1, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 28)), $mul.ref(2, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 28)), $mul.ref(3, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 28)), $mul.ref(4, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 28)), $mul.ref(5, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 28)), $mul.ref(6, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 28)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 28)), $mul.ref(8, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 28)), $mul.ref(9, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 28)), $mul.ref(10, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 28)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 28)), $mul.ref(12, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 28)), $mul.ref(13, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 28)), $mul.ref(14, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 28)), $mul.ref(15, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 28)), $mul.ref(16, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 28)), $mul.ref(17, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 28)), $mul.ref(18, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 28)), $mul.ref(19, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 28)), $mul.ref(20, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 28)), $mul.ref(21, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 28)), $mul.ref(22, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 28)), $mul.ref(23, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 28)), $mul.ref(24, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 28)), $mul.ref(25, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 28)), $mul.ref(26, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 28)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, .str.76, 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 20)), $mul.ref(1, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 20)), $mul.ref(2, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 20)), $mul.ref(3, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 20)), $mul.ref(4, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 20)), $mul.ref(5, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 20)), $mul.ref(6, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 20)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 20)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 20)), $mul.ref(9, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 20)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 20)), $mul.ref(11, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 20)), $mul.ref(12, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 20)), $mul.ref(13, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 20)), $mul.ref(14, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 20)), $mul.ref(15, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 20)), $mul.ref(16, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 20)), $mul.ref(17, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 20)), $mul.ref(18, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, .str.74, 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 29)), $mul.ref(1, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 29)), $mul.ref(2, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 29)), $mul.ref(3, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 29)), $mul.ref(4, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 29)), $mul.ref(5, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 29)), $mul.ref(6, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 29)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 29)), $mul.ref(8, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 29)), $mul.ref(9, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 29)), $mul.ref(10, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 29)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 29)), $mul.ref(12, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 29)), $mul.ref(13, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 29)), $mul.ref(14, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 29)), $mul.ref(15, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 29)), $mul.ref(16, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 29)), $mul.ref(17, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 29)), $mul.ref(18, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 29)), $mul.ref(19, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 29)), $mul.ref(20, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 29)), $mul.ref(21, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 29)), $mul.ref(22, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 29)), $mul.ref(23, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 29)), $mul.ref(24, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 29)), $mul.ref(25, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 29)), $mul.ref(26, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 29)), $mul.ref(27, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 29)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, .str.80, 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 20)), $mul.ref(1, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 20)), $mul.ref(2, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 20)), $mul.ref(3, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 20)), $mul.ref(4, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 20)), $mul.ref(5, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 20)), $mul.ref(6, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 20)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 20)), $mul.ref(8, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 20)), $mul.ref(9, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 20)), $mul.ref(10, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 20)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 20)), $mul.ref(12, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 20)), $mul.ref(13, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 20)), $mul.ref(14, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 20)), $mul.ref(15, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 20)), $mul.ref(16, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 20)), $mul.ref(17, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 20)), $mul.ref(18, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.80, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, .str.68, 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 23)), $mul.ref(1, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 23)), $mul.ref(2, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 23)), $mul.ref(3, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 23)), $mul.ref(4, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 23)), $mul.ref(5, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 23)), $mul.ref(6, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 23)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 23)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 23)), $mul.ref(9, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 23)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 23)), $mul.ref(11, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 23)), $mul.ref(12, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 23)), $mul.ref(13, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 23)), $mul.ref(14, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 23)), $mul.ref(15, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 23)), $mul.ref(16, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 23)), $mul.ref(17, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 23)), $mul.ref(18, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 23)), $mul.ref(19, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 23)), $mul.ref(20, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 23)), $mul.ref(21, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, .str.36, 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 19)), $mul.ref(1, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 19)), $mul.ref(2, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 19)), $mul.ref(3, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 19)), $mul.ref(4, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 19)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 19)), $mul.ref(6, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 19)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 19)), $mul.ref(8, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 19)), $mul.ref(9, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 19)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 19)), $mul.ref(11, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 19)), $mul.ref(12, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 19)), $mul.ref(13, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 19)), $mul.ref(14, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 19)), $mul.ref(15, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 19)), $mul.ref(16, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 19)), $mul.ref(17, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, .str.32, 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 19)), $mul.ref(1, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 19)), $mul.ref(2, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 19)), $mul.ref(3, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 19)), $mul.ref(4, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 19)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 19)), $mul.ref(6, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 19)), $mul.ref(7, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 19)), $mul.ref(8, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 19)), $mul.ref(9, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 19)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 19)), $mul.ref(11, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 19)), $mul.ref(12, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 19)), $mul.ref(13, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 19)), $mul.ref(14, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 19)), $mul.ref(15, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 19)), $mul.ref(16, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 19)), $mul.ref(17, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, .str.109, 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 17)), $mul.ref(1, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 17)), $mul.ref(2, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 17)), $mul.ref(3, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 17)), $mul.ref(4, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 17)), $mul.ref(5, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 17)), $mul.ref(6, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 17)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 17)), $mul.ref(8, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 17)), $mul.ref(9, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 17)), $mul.ref(10, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 17)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 17)), $mul.ref(12, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 17)), $mul.ref(13, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 17)), $mul.ref(14, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 17)), $mul.ref(15, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, .str.106, 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.106, $mul.ref(0, 18)), $mul.ref(1, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.106, $mul.ref(0, 18)), $mul.ref(2, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.106, $mul.ref(0, 18)), $mul.ref(3, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.106, $mul.ref(0, 18)), $mul.ref(4, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.106, $mul.ref(0, 18)), $mul.ref(5, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.106, $mul.ref(0, 18)), $mul.ref(6, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.106, $mul.ref(0, 18)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.106, $mul.ref(0, 18)), $mul.ref(8, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.106, $mul.ref(0, 18)), $mul.ref(9, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.106, $mul.ref(0, 18)), $mul.ref(10, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.106, $mul.ref(0, 18)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.106, $mul.ref(0, 18)), $mul.ref(12, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.106, $mul.ref(0, 18)), $mul.ref(13, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.106, $mul.ref(0, 18)), $mul.ref(14, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.106, $mul.ref(0, 18)), $mul.ref(15, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.106, $mul.ref(0, 18)), $mul.ref(16, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.106, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, .str.111, 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 19)), $mul.ref(1, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 19)), $mul.ref(2, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 19)), $mul.ref(3, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 19)), $mul.ref(4, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 19)), $mul.ref(5, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 19)), $mul.ref(6, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 19)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 19)), $mul.ref(8, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 19)), $mul.ref(9, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 19)), $mul.ref(10, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 19)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 19)), $mul.ref(12, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 19)), $mul.ref(13, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 19)), $mul.ref(14, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 19)), $mul.ref(15, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 19)), $mul.ref(16, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 19)), $mul.ref(17, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, .str.122, 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.122, $mul.ref(0, 21)), $mul.ref(1, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.122, $mul.ref(0, 21)), $mul.ref(2, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.122, $mul.ref(0, 21)), $mul.ref(3, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.122, $mul.ref(0, 21)), $mul.ref(4, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.122, $mul.ref(0, 21)), $mul.ref(5, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.122, $mul.ref(0, 21)), $mul.ref(6, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.122, $mul.ref(0, 21)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.122, $mul.ref(0, 21)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.122, $mul.ref(0, 21)), $mul.ref(9, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.122, $mul.ref(0, 21)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.122, $mul.ref(0, 21)), $mul.ref(11, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.122, $mul.ref(0, 21)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.122, $mul.ref(0, 21)), $mul.ref(13, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.122, $mul.ref(0, 21)), $mul.ref(14, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.122, $mul.ref(0, 21)), $mul.ref(15, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.122, $mul.ref(0, 21)), $mul.ref(16, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.122, $mul.ref(0, 21)), $mul.ref(17, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.122, $mul.ref(0, 21)), $mul.ref(18, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.122, $mul.ref(0, 21)), $mul.ref(19, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.122, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, .str.124, 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.124, $mul.ref(0, 22)), $mul.ref(1, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.124, $mul.ref(0, 22)), $mul.ref(2, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.124, $mul.ref(0, 22)), $mul.ref(3, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.124, $mul.ref(0, 22)), $mul.ref(4, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.124, $mul.ref(0, 22)), $mul.ref(5, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.124, $mul.ref(0, 22)), $mul.ref(6, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.124, $mul.ref(0, 22)), $mul.ref(7, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.124, $mul.ref(0, 22)), $mul.ref(8, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.124, $mul.ref(0, 22)), $mul.ref(9, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.124, $mul.ref(0, 22)), $mul.ref(10, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.124, $mul.ref(0, 22)), $mul.ref(11, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.124, $mul.ref(0, 22)), $mul.ref(12, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.124, $mul.ref(0, 22)), $mul.ref(13, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.124, $mul.ref(0, 22)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.124, $mul.ref(0, 22)), $mul.ref(15, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.124, $mul.ref(0, 22)), $mul.ref(16, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.124, $mul.ref(0, 22)), $mul.ref(17, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.124, $mul.ref(0, 22)), $mul.ref(18, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.124, $mul.ref(0, 22)), $mul.ref(19, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.124, $mul.ref(0, 22)), $mul.ref(20, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.124, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, .str.126, 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.126, $mul.ref(0, 20)), $mul.ref(1, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.126, $mul.ref(0, 20)), $mul.ref(2, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.126, $mul.ref(0, 20)), $mul.ref(3, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.126, $mul.ref(0, 20)), $mul.ref(4, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.126, $mul.ref(0, 20)), $mul.ref(5, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.126, $mul.ref(0, 20)), $mul.ref(6, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.126, $mul.ref(0, 20)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.126, $mul.ref(0, 20)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.126, $mul.ref(0, 20)), $mul.ref(9, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.126, $mul.ref(0, 20)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.126, $mul.ref(0, 20)), $mul.ref(11, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.126, $mul.ref(0, 20)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.126, $mul.ref(0, 20)), $mul.ref(13, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.126, $mul.ref(0, 20)), $mul.ref(14, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.126, $mul.ref(0, 20)), $mul.ref(15, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.126, $mul.ref(0, 20)), $mul.ref(16, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.126, $mul.ref(0, 20)), $mul.ref(17, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.126, $mul.ref(0, 20)), $mul.ref(18, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.126, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, .str.121, 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.121, $mul.ref(0, 19)), $mul.ref(1, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.121, $mul.ref(0, 19)), $mul.ref(2, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.121, $mul.ref(0, 19)), $mul.ref(3, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.121, $mul.ref(0, 19)), $mul.ref(4, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.121, $mul.ref(0, 19)), $mul.ref(5, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.121, $mul.ref(0, 19)), $mul.ref(6, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.121, $mul.ref(0, 19)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.121, $mul.ref(0, 19)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.121, $mul.ref(0, 19)), $mul.ref(9, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.121, $mul.ref(0, 19)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.121, $mul.ref(0, 19)), $mul.ref(11, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.121, $mul.ref(0, 19)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.121, $mul.ref(0, 19)), $mul.ref(13, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.121, $mul.ref(0, 19)), $mul.ref(14, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.121, $mul.ref(0, 19)), $mul.ref(15, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.121, $mul.ref(0, 19)), $mul.ref(16, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.121, $mul.ref(0, 19)), $mul.ref(17, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.121, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, .str.114, 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 17)), $mul.ref(1, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 17)), $mul.ref(2, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 17)), $mul.ref(3, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 17)), $mul.ref(4, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 17)), $mul.ref(5, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 17)), $mul.ref(6, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 17)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 17)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 17)), $mul.ref(9, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 17)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 17)), $mul.ref(11, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 17)), $mul.ref(12, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 17)), $mul.ref(13, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 17)), $mul.ref(14, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 17)), $mul.ref(15, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.114, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, .str.116, 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 7)), $mul.ref(1, 1)), 40);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 7)), $mul.ref(2, 1)), 122);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 7)), $mul.ref(3, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 7)), $mul.ref(4, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 7)), $mul.ref(5, 1)), 41);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, .str.112, 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 19)), $mul.ref(1, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 19)), $mul.ref(2, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 19)), $mul.ref(3, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 19)), $mul.ref(4, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 19)), $mul.ref(5, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 19)), $mul.ref(6, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 19)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 19)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 19)), $mul.ref(9, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 19)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 19)), $mul.ref(11, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 19)), $mul.ref(12, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 19)), $mul.ref(13, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 19)), $mul.ref(14, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 19)), $mul.ref(15, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 19)), $mul.ref(16, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 19)), $mul.ref(17, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, .str.127, 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 18)), $mul.ref(1, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 18)), $mul.ref(2, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 18)), $mul.ref(3, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 18)), $mul.ref(4, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 18)), $mul.ref(5, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 18)), $mul.ref(6, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 18)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 18)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 18)), $mul.ref(9, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 18)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 18)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 18)), $mul.ref(12, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 18)), $mul.ref(13, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 18)), $mul.ref(14, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 18)), $mul.ref(15, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 18)), $mul.ref(16, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.127, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    call {:si_unique_call 1745} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 548527);

procedure devirtbounce(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32);



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 549559);

procedure devirtbounce.1(funcPtr: ref, arg: ref);



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 550591);

procedure devirtbounce.2(funcPtr: ref, arg: i16, arg1: ref);
  free requires assertsPassed;



implementation devirtbounce.2(funcPtr: ref, arg: i16, arg1: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 551623);

procedure devirtbounce.3(funcPtr: ref, arg: ref, arg1: ref);
  free requires assertsPassed;
  modifies $M.30, $M.0, $CurrAddr, $M.36, $M.38, assertsPassed, $M.1, $M.32, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.40, $M.23, $M.22, $M.25, $M.24, $M.27, $M.26, $M.29, $M.28, $M.2, $M.4, $M.6, $M.8, $M.3, $M.5, $M.7, $M.9;



implementation devirtbounce.3(funcPtr: ref, arg: ref, arg1: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i7 := $eq.ref(isp1760_ep_free_request, $p0);
    assume true;
    goto $bb4, $bb7;

  $bb7:
    assume !($i7 == 1);
    $i6 := $eq.ref(isp1760_clear_tt_buffer_complete, $p0);
    assume true;
    goto $bb3, $bb6;

  $bb6:
    assume !($i6 == 1);
    $i5 := $eq.ref(isp1760_endpoint_disable, $p0);
    assume true;
    goto $bb2, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume false;
    return;

  $bb2:
    assume $i5 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1746} isp1760_endpoint_disable($p1, $p2);
    goto SeqInstr_451, SeqInstr_452;

  SeqInstr_452:
    assume assertsPassed;
    goto SeqInstr_453;

  SeqInstr_453:
    return;

  SeqInstr_451:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i6 == 1;
    $p3 := $bitcast.ref.ref(arg);
    $p4 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1747} isp1760_clear_tt_buffer_complete($p3, $p4);
    goto SeqInstr_454, SeqInstr_455;

  SeqInstr_455:
    assume assertsPassed;
    goto SeqInstr_456;

  SeqInstr_456:
    return;

  SeqInstr_454:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i7 == 1;
    call {:si_unique_call 1748} isp1760_ep_free_request(arg, arg1);
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 552655);

procedure devirtbounce.4(funcPtr: ref, arg: ref) returns ($r: i16);
  free requires assertsPassed;



implementation devirtbounce.4(funcPtr: ref, arg: ref) returns ($r: i16)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 553687);

procedure devirtbounce.5(funcPtr: ref, arg: i32, arg1: ref);
  free requires assertsPassed;



implementation devirtbounce.5(funcPtr: ref, arg: i32, arg1: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 554719);

procedure devirtbounce.6(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.0, $M.32, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.30, $M.38, $M.36, $M.40, $M.23, $M.22, $M.25, $M.24, $M.27, $M.26, $M.29, $M.28, $CurrAddr, $M.2, $M.4, $M.6, $M.8, $M.3, $M.5, $M.7, $M.9, assertsPassed;



implementation devirtbounce.6(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i33 := $eq.ref(isp1760_ep_set_wedge, $p0);
    assume {:branchcond $i33} true;
    goto $bb12, $bb23;

  $bb23:
    assume !($i33 == 1);
    $i32 := $eq.ref(isp1760_ep_disable, $p0);
    assume true;
    goto $bb11, $bb22;

  $bb22:
    assume !($i32 == 1);
    $i31 := $eq.ref(isp1760_udc_stop, $p0);
    assume true;
    goto $bb10, $bb21;

  $bb21:
    assume !($i31 == 1);
    $i30 := $eq.ref(isp1760_udc_wakeup, $p0);
    assume true;
    goto $bb9, $bb20;

  $bb20:
    assume !($i30 == 1);
    $i29 := $eq.ref(isp1760_udc_get_frame, $p0);
    assume true;
    goto $bb8, $bb19;

  $bb19:
    assume !($i29 == 1);
    $i28 := $eq.ref(isp1760_get_frame, $p0);
    assume true;
    goto $bb7, $bb18;

  $bb18:
    assume !($i28 == 1);
    $i27 := $eq.ref(isp1760_run, $p0);
    assume true;
    goto $bb6, $bb17;

  $bb17:
    assume !($i27 == 1);
    $i26 := $eq.ref(isp1760_hc_setup, $p0);
    assume true;
    goto $bb5, $bb16;

  $bb16:
    assume !($i26 == 1);
    $i25 := $eq.ref(isp1760_irq, $p0);
    assume true;
    goto $bb4, $bb15;

  $bb15:
    assume !($i25 == 1);
    $i24 := $eq.ref(isp1760_plat_remove, $p0);
    assume true;
    goto $bb3, $bb14;

  $bb14:
    assume !($i24 == 1);
    $i23 := $eq.ref(isp1760_plat_probe, $p0);
    assume true;
    goto $bb2, $bb13;

  $bb13:
    assume !($i23 == 1);
    assume false;
    return;

  $bb2:
    assume $i23 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1749} $i2 := isp1760_plat_probe($p1);
    goto SeqInstr_457, SeqInstr_458;

  SeqInstr_458:
    assume assertsPassed;
    goto SeqInstr_459;

  SeqInstr_459:
    $r := $i2;
    return;

  SeqInstr_457:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i24 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1750} $i4 := isp1760_plat_remove($p3);
    $r := $i4;
    return;

  $bb4:
    assume $i25 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1751} $i6 := isp1760_irq($p5);
    goto SeqInstr_460, SeqInstr_461;

  SeqInstr_461:
    assume assertsPassed;
    goto SeqInstr_462;

  SeqInstr_462:
    $r := $i6;
    return;

  SeqInstr_460:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i26 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1752} $i8 := isp1760_hc_setup($p7);
    goto SeqInstr_463, SeqInstr_464;

  SeqInstr_464:
    assume assertsPassed;
    goto SeqInstr_465;

  SeqInstr_465:
    $r := $i8;
    return;

  SeqInstr_463:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i27 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1753} $i10 := isp1760_run($p9);
    goto SeqInstr_466, SeqInstr_467;

  SeqInstr_467:
    assume assertsPassed;
    goto SeqInstr_468;

  SeqInstr_468:
    $r := $i10;
    return;

  SeqInstr_466:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i28 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1754} $i12 := isp1760_get_frame($p11);
    goto SeqInstr_469, SeqInstr_470;

  SeqInstr_470:
    assume assertsPassed;
    goto SeqInstr_471;

  SeqInstr_471:
    $r := $i12;
    return;

  SeqInstr_469:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i29 == 1;
    $p13 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1755} $i14 := isp1760_udc_get_frame($p13);
    goto SeqInstr_472, SeqInstr_473;

  SeqInstr_473:
    assume assertsPassed;
    goto SeqInstr_474;

  SeqInstr_474:
    $r := $i14;
    return;

  SeqInstr_472:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i30 == 1;
    $p15 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1756} $i16 := isp1760_udc_wakeup($p15);
    $r := $i16;
    return;

  $bb10:
    assume $i31 == 1;
    $p17 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1757} $i18 := isp1760_udc_stop($p17);
    $r := $i18;
    return;

  $bb11:
    assume $i32 == 1;
    $p19 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1758} $i20 := isp1760_ep_disable($p19);
    goto SeqInstr_475, SeqInstr_476;

  SeqInstr_476:
    assume assertsPassed;
    goto SeqInstr_477;

  SeqInstr_477:
    $r := $i20;
    return;

  SeqInstr_475:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i33 == 1;
    $p21 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1759} $i22 := isp1760_ep_set_wedge($p21);
    goto SeqInstr_478, SeqInstr_479;

  SeqInstr_479:
    assume assertsPassed;
    goto SeqInstr_480;

  SeqInstr_480:
    $r := $i22;
    return;

  SeqInstr_478:
    assume !assertsPassed;
    return;
}



const devirtbounce.7: ref;

axiom devirtbounce.7 == $sub.ref(0, 555751);

procedure devirtbounce.7(funcPtr: ref);
  free requires assertsPassed;



implementation devirtbounce.7(funcPtr: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.8: ref;

axiom devirtbounce.8 == $sub.ref(0, 556783);

procedure devirtbounce.8(funcPtr: ref, arg: i64) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.8(funcPtr: ref, arg: i64) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



const $u0: i64;

const $u1: ref;

const $u2: i1;

procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.58, $M.8, $M.2, $M.6, $M.4, $M.45, $M.46, $M.54, $M.47, $M.49, $M.51, $M.53, $M.55, $M.56, $M.57, $M.59, $M.60, $M.61, $M.68, $M.66, $M.69, $M.67, $M.22, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.3, $M.5, $M.7, $M.9, $M.71, $M.72, $M.70, $M.30, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.0, $M.131, $M.132, $M.35, $M.39, $M.37, $M.156, $M.157, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 1760} __SMACK_static_init();
    call {:si_unique_call 1761} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.47, $M.49, $M.51, $M.53, $M.54, $M.55, $M.56, $M.1, $M.57, $M.58, $M.59, $M.0, $M.60, $M.61, $M.8, $M.2, $M.6, $M.4, $M.45, $M.46, $M.68, $M.66, $M.69, $M.67, $M.22, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.3, $M.5, $M.7, $M.9, $M.71, $M.72, $M.70, $M.30, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.131, $M.132, $M.35, $M.39, $M.37, $M.156, $M.157, $CurrAddr, $M.44, $M.32, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.40, $M.38, $M.36;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation isp1760_udc_transmit_loop_$bb13(in_$p4: ref, in_$i66: i32, in_$i67: i32, in_$p68: ref, in_$i69: i1, in_$i64: i32, in_$p65: ref, in_$p70: ref, in_$i71: i32) returns (out_$i66: i32, out_$i67: i32, out_$p68: ref, out_$i69: i1, out_$i64: i32, out_$p65: ref, out_$p70: ref, out_$i71: i32)
{

  entry:
    out_$i66, out_$i67, out_$p68, out_$i69, out_$i64, out_$p65, out_$p70, out_$i71 := in_$i66, in_$i67, in_$p68, in_$i69, in_$i64, in_$p65, in_$p70, in_$i71;
    goto $bb13, exit;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1930;

  $bb15:
    assume out_$i69 == 1;
    assume {:verifier.code 0} true;
    out_$i64, out_$p65 := out_$i67, out_$p68;
    goto $bb15_dummy;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    out_$p70, out_$i71 := out_$p68, out_$i67;
    assume true;
    goto $bb15;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    out_$i69 := $sgt.i32(out_$i67, 2);
    goto corral_source_split_1936;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref(out_$p65, $mul.ref(1, 4));
    goto corral_source_split_1935;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    out_$i67 := $add.i32(out_$i64, $sub.i32(0, 4));
    call {:si_unique_call 351} {:cexpr "i"} boogie_si_record_i32(out_$i67);
    goto corral_source_split_1934;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 350} isp1760_udc_write(in_$p4, 544, out_$i66);
    goto corral_source_split_1933;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i66 := $load.i32($M.0, out_$p65);
    goto corral_source_split_1932;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb15_dummy:
    call {:si_unique_call 1} out_$i66, out_$i67, out_$p68, out_$i69, out_$i64, out_$p65, out_$p70, out_$i71 := isp1760_udc_transmit_loop_$bb13(in_$p4, out_$i66, out_$i67, out_$p68, out_$i69, out_$i64, out_$p65, out_$p70, out_$i71);
    return;

  exit:
    return;
}



procedure isp1760_udc_transmit_loop_$bb13(in_$p4: ref, in_$i66: i32, in_$i67: i32, in_$p68: ref, in_$i69: i1, in_$i64: i32, in_$p65: ref, in_$p70: ref, in_$i71: i32) returns (out_$i66: i32, out_$i67: i32, out_$p68: ref, out_$i69: i1, out_$i64: i32, out_$p65: ref, out_$p70: ref, out_$i71: i32);



implementation isp1760_udc_receive_loop_$bb14(in_$p5: ref, in_$i59: i32, in_$i60: i32, in_$p61: ref, in_$i62: i1, in_$i57: i32, in_$p58: ref, in_$p63: ref, in_$i64: i32) returns (out_$i59: i32, out_$i60: i32, out_$p61: ref, out_$i62: i1, out_$i57: i32, out_$p58: ref, out_$p63: ref, out_$i64: i32)
{

  entry:
    out_$i59, out_$i60, out_$p61, out_$i62, out_$i57, out_$p58, out_$p63, out_$i64 := in_$i59, in_$i60, in_$p61, in_$i62, in_$i57, in_$p58, in_$p63, in_$i64;
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2056;

  $bb16:
    assume out_$i62 == 1;
    assume {:verifier.code 0} true;
    out_$i57, out_$p58 := out_$i60, out_$p61;
    goto $bb16_dummy;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    out_$p63, out_$i64 := out_$p61, out_$i60;
    assume true;
    goto $bb16;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    out_$i62 := $sgt.i32(out_$i60, 2);
    goto corral_source_split_2062;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref(out_$p58, $mul.ref(1, 4));
    goto corral_source_split_2061;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    out_$i60 := $add.i32(out_$i57, $sub.i32(0, 4));
    call {:si_unique_call 377} {:cexpr "i"} boogie_si_record_i32(out_$i60);
    goto corral_source_split_2060;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p58, out_$i59);
    goto corral_source_split_2059;

  SeqInstr_33:
    goto corral_source_split_2058;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} out_$i59 := isp1760_udc_read(in_$p5, 544);
    goto SeqInstr_32;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb16_dummy:
    call {:si_unique_call 1} out_$i59, out_$i60, out_$p61, out_$i62, out_$i57, out_$p58, out_$p63, out_$i64 := isp1760_udc_receive_loop_$bb14(in_$p5, out_$i59, out_$i60, out_$p61, out_$i62, out_$i57, out_$p58, out_$p63, out_$i64);
    return;

  exit:
    return;
}



procedure isp1760_udc_receive_loop_$bb14(in_$p5: ref, in_$i59: i32, in_$i60: i32, in_$p61: ref, in_$i62: i1, in_$i57: i32, in_$p58: ref, in_$p63: ref, in_$i64: i32) returns (out_$i59: i32, out_$i60: i32, out_$p61: ref, out_$i62: i1, out_$i57: i32, out_$p58: ref, out_$p63: ref, out_$i64: i32);
  modifies $M.0, $M.1, $M.32, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.30, $M.38, $M.36, $M.40, $M.23, $M.22, $M.25, $M.24, $M.27, $M.26, $M.29, $M.28, $CurrAddr, $M.2, $M.4, $M.6, $M.8, $M.3, $M.5, $M.7, $M.9, assertsPassed;



implementation isp1761_pci_init_loop_$bb26(in_$p39: ref, in_$p61: ref, in_$p62: ref, in_$i63: i32, in_$i64: i32, in_$i65: i32, in_$i66: i1, in_$i67: i1, in_$i68: i1, in_$i60: i32, in_$i69: i32) returns (out_$p61: ref, out_$p62: ref, out_$i63: i32, out_$i64: i32, out_$i65: i32, out_$i66: i1, out_$i67: i1, out_$i68: i1, out_$i60: i32, out_$i69: i32)
{

  entry:
    out_$p61, out_$p62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i60, out_$i69 := in_$p61, in_$p62, in_$i63, in_$i64, in_$i65, in_$i66, in_$i67, in_$i68, in_$i60, in_$i69;
    goto $bb26, exit;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_3347;

  $bb28:
    assume out_$i68 == 1;
    assume {:verifier.code 0} true;
    out_$i60 := out_$i65;
    goto $bb28_dummy;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    out_$i69 := out_$i64;
    assume true;
    goto $bb28;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    out_$i68 := $and.i1(out_$i66, out_$i67);
    goto corral_source_split_3358;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    out_$i67 := $ne.i32(out_$i65, 0);
    goto corral_source_split_3357;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    out_$i66 := $ne.i32(out_$i64, 64206);
    goto corral_source_split_3356;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    out_$i65 := $sub.i32(out_$i60, 1);
    call {:si_unique_call 498} {:cexpr "retry_count"} boogie_si_record_i32(out_$i65);
    goto corral_source_split_3355;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    out_$i64 := $and.i32(out_$i63, 65535);
    call {:si_unique_call 497} {:cexpr "reg_data"} boogie_si_record_i32(out_$i64);
    goto corral_source_split_3354;

  SeqInstr_57:
    call {:si_unique_call 496} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i63);
    goto corral_source_split_3353;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 495} out_$i63 := readl(out_$p62);
    goto SeqInstr_56;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref(in_$p39, $mul.ref(776, 1));
    goto corral_source_split_3352;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} __const_udelay(429500);
    goto corral_source_split_3351;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 493} writel(64206, out_$p61);
    goto corral_source_split_3350;

  $bb27:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref(in_$p39, $mul.ref(776, 1));
    goto corral_source_split_3349;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb28_dummy:
    call {:si_unique_call 1} out_$p61, out_$p62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i60, out_$i69 := isp1761_pci_init_loop_$bb26(in_$p39, out_$p61, out_$p62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i60, out_$i69);
    return;

  exit:
    return;
}



procedure isp1761_pci_init_loop_$bb26(in_$p39: ref, in_$p61: ref, in_$p62: ref, in_$i63: i32, in_$i64: i32, in_$i65: i32, in_$i66: i1, in_$i67: i1, in_$i68: i1, in_$i60: i32, in_$i69: i32) returns (out_$p61: ref, out_$p62: ref, out_$i63: i32, out_$i64: i32, out_$i65: i32, out_$i66: i1, out_$i67: i1, out_$i68: i1, out_$i60: i32, out_$i69: i32);
  modifies $M.1, $M.0, $M.32, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.30, $M.38, $M.36, $M.40, $M.23, $M.22, $M.25, $M.24, $M.27, $M.26, $M.29, $M.28, $CurrAddr, $M.2, $M.4, $M.6, $M.8, $M.3, $M.5, $M.7, $M.9, assertsPassed;



implementation isp1760_urb_enqueue_loop_$bb37(in_$p51: ref, in_$i59: i64, in_$i62: i64, in_$i63: i64, in_$i64: i1, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$i71: i64, in_$i72: i1, in_$p61: ref) returns (out_$i62: i64, out_$i63: i64, out_$i64: i1, out_$p67: ref, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$i71: i64, out_$i72: i1, out_$p61: ref)
{

  entry:
    out_$i62, out_$i63, out_$i64, out_$p67, out_$p68, out_$p69, out_$p70, out_$i71, out_$i72, out_$p61 := in_$i62, in_$i63, in_$i64, in_$p67, in_$p68, in_$p69, in_$p70, in_$i71, in_$i72, in_$p61;
    goto $bb37, exit;

  $bb37:
    assume {:verifier.code 0} true;
    goto corral_source_split_3852;

  $bb43:
    assume out_$i72 == 1;
    assume {:verifier.code 0} true;
    out_$p61 := out_$p68;
    goto $bb43_dummy;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    out_$i72 := $ne.i64(out_$i71, in_$i59);
    goto corral_source_split_3868;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    out_$i71 := $p2i.ref.i64(out_$p70);
    goto corral_source_split_3867;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref(out_$p69, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_3866;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    out_$p69 := $bitcast.ref.ref(out_$p68);
    goto corral_source_split_3865;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    out_$p68 := $load.ref($M.0, out_$p67);
    goto corral_source_split_3864;

  $bb42:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref($add.ref(out_$p61, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3863;

  $bb40:
    assume !(out_$i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    out_$i64 := $eq.i64(out_$i62, out_$i63);
    goto corral_source_split_3856;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    out_$i63 := $p2i.ref.i64(in_$p51);
    goto corral_source_split_3855;

  $bb38:
    assume {:verifier.code 0} true;
    out_$i62 := $p2i.ref.i64(out_$p61);
    goto corral_source_split_3854;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb43_dummy:
    call {:si_unique_call 1} out_$i62, out_$i63, out_$i64, out_$p67, out_$p68, out_$p69, out_$p70, out_$i71, out_$i72, out_$p61 := isp1760_urb_enqueue_loop_$bb37(in_$p51, in_$i59, out_$i62, out_$i63, out_$i64, out_$p67, out_$p68, out_$p69, out_$p70, out_$i71, out_$i72, out_$p61);
    return;

  exit:
    return;
}



procedure isp1760_urb_enqueue_loop_$bb37(in_$p51: ref, in_$i59: i64, in_$i62: i64, in_$i63: i64, in_$i64: i1, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$i71: i64, in_$i72: i1, in_$p61: ref) returns (out_$i62: i64, out_$i63: i64, out_$i64: i1, out_$p67: ref, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$i71: i64, out_$i72: i1, out_$p61: ref);



implementation isp1760_urb_dequeue_loop_$bb11(in_$p1: ref, in_$i22: i64, in_$p25: ref, in_$p26: ref, in_$i27: i64, in_$i28: i64, in_$i29: i1, in_$p30: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i64, in_$i40: i1, in_$p24: ref) returns (out_$p25: ref, out_$p26: ref, out_$i27: i64, out_$i28: i64, out_$i29: i1, out_$p30: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i64, out_$i40: i1, out_$p24: ref)
{

  entry:
    out_$p25, out_$p26, out_$i27, out_$i28, out_$i29, out_$p30, out_$p34, out_$p35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$p24 := in_$p25, in_$p26, in_$i27, in_$i28, in_$i29, in_$p30, in_$p34, in_$p35, in_$p36, in_$p37, in_$p38, in_$i39, in_$i40, in_$p24;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_3926;

  $bb17:
    assume out_$i40 == 1;
    assume {:verifier.code 0} true;
    out_$p24 := out_$p37;
    goto $bb17_dummy;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    out_$i40 := $ne.i64(out_$i39, in_$i22);
    goto corral_source_split_3950;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    out_$i39 := $p2i.ref.i64(out_$p38);
    goto corral_source_split_3949;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(out_$p36, $mul.ref($sub.ref(0, 24), 72)), $mul.ref(24, 1));
    goto corral_source_split_3948;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref(out_$p36, $mul.ref($sub.ref(0, 24), 72));
    goto corral_source_split_3947;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    out_$p36 := $bitcast.ref.ref(out_$p35);
    goto corral_source_split_3946;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    out_$p35 := $load.ref($M.0, out_$p34);
    goto corral_source_split_3945;

  $bb16:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref($add.ref(out_$p24, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_3944;

  $bb14:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    out_$p30 := out_$p24;
    assume true;
    goto $bb14;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    out_$i29 := $eq.i64(out_$i27, out_$i28);
    goto corral_source_split_3932;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    out_$i28 := $p2i.ref.i64(in_$p1);
    goto corral_source_split_3931;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    out_$i27 := $p2i.ref.i64(out_$p26);
    goto corral_source_split_3930;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    out_$p26 := $load.ref($M.0, out_$p25);
    goto corral_source_split_3929;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(out_$p24, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_3928;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb17_dummy:
    call {:si_unique_call 1} out_$p25, out_$p26, out_$i27, out_$i28, out_$i29, out_$p30, out_$p34, out_$p35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$p24 := isp1760_urb_dequeue_loop_$bb11(in_$p1, in_$i22, out_$p25, out_$p26, out_$i27, out_$i28, out_$i29, out_$p30, out_$p34, out_$p35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$p24);
    return;

  exit:
    return;
}



procedure isp1760_urb_dequeue_loop_$bb11(in_$p1: ref, in_$i22: i64, in_$p25: ref, in_$p26: ref, in_$i27: i64, in_$i28: i64, in_$i29: i1, in_$p30: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i64, in_$i40: i1, in_$p24: ref) returns (out_$p25: ref, out_$p26: ref, out_$i27: i64, out_$i28: i64, out_$i29: i1, out_$p30: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i64, out_$i40: i1, out_$p24: ref);



implementation isp1760_endpoint_disable_loop_$bb13(in_$p5: ref, in_$i35: i64, in_$i38: i64, in_$i39: i64, in_$i40: i1, in_$p41: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$i49: i64, in_$i50: i1, in_$p37: ref) returns (out_$i38: i64, out_$i39: i64, out_$i40: i1, out_$p41: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$i49: i64, out_$i50: i1, out_$p37: ref)
{

  entry:
    out_$i38, out_$i39, out_$i40, out_$p41, out_$p45, out_$p46, out_$p47, out_$p48, out_$i49, out_$i50, out_$p37 := in_$i38, in_$i39, in_$i40, in_$p41, in_$p45, in_$p46, in_$p47, in_$p48, in_$i49, in_$i50, in_$p37;
    goto $bb13, exit;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_4006;

  $bb19:
    assume out_$i50 == 1;
    assume {:verifier.code 0} true;
    out_$p37 := out_$p46;
    goto $bb19_dummy;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    out_$i50 := $ne.i64(out_$i49, in_$i35);
    goto corral_source_split_4025;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    out_$i49 := $p2i.ref.i64(out_$p48);
    goto corral_source_split_4024;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(out_$p47, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_4023;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    out_$p47 := $bitcast.ref.ref(out_$p46);
    goto corral_source_split_4022;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    out_$p46 := $load.ref($M.0, out_$p45);
    goto corral_source_split_4021;

  $bb18:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref($add.ref(out_$p37, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4020;

  $bb16:
    assume !(out_$i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    out_$p41 := out_$p37;
    assume true;
    goto $bb16;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    out_$i40 := $eq.i64(out_$i38, out_$i39);
    goto corral_source_split_4010;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    out_$i39 := $p2i.ref.i64(in_$p5);
    goto corral_source_split_4009;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i38 := $p2i.ref.i64(out_$p37);
    goto corral_source_split_4008;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb19_dummy:
    call {:si_unique_call 1} out_$i38, out_$i39, out_$i40, out_$p41, out_$p45, out_$p46, out_$p47, out_$p48, out_$i49, out_$i50, out_$p37 := isp1760_endpoint_disable_loop_$bb13(in_$p5, in_$i35, out_$i38, out_$i39, out_$i40, out_$p41, out_$p45, out_$p46, out_$p47, out_$p48, out_$i49, out_$i50, out_$p37);
    return;

  exit:
    return;
}



procedure isp1760_endpoint_disable_loop_$bb13(in_$p5: ref, in_$i35: i64, in_$i38: i64, in_$i39: i64, in_$i40: i1, in_$p41: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$i49: i64, in_$i50: i1, in_$p37: ref) returns (out_$i38: i64, out_$i39: i64, out_$i40: i1, out_$p41: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$i49: i64, out_$i50: i1, out_$p37: ref);



implementation isp1760_endpoint_disable_loop_$bb8(in_$p2: ref, in_$p5: ref, in_$p22: ref, in_$p23: ref, in_$i24: i64, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$i30: i64, in_$p31: ref, in_$p32: ref, in_$i33: i64, in_$p34: ref, in_$i35: i64, in_$i36: i1, in_$i38: i64, in_$i39: i64, in_$i40: i1, in_$p41: ref, in_$p42: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$i49: i64, in_$i50: i1, in_$p37: ref, in_$i43: i32, in_$i51: i32, in_$i52: i1, in_$i21: i32) returns (out_$p22: ref, out_$p23: ref, out_$i24: i64, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$i30: i64, out_$p31: ref, out_$p32: ref, out_$i33: i64, out_$p34: ref, out_$i35: i64, out_$i36: i1, out_$i38: i64, out_$i39: i64, out_$i40: i1, out_$p41: ref, out_$p42: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$i49: i64, out_$i50: i1, out_$p37: ref, out_$i43: i32, out_$i51: i32, out_$i52: i1, out_$i21: i32)
{

  entry:
    out_$p22, out_$p23, out_$i24, out_$p26, out_$p27, out_$p28, out_$p29, out_$i30, out_$p31, out_$p32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i38, out_$i39, out_$i40, out_$p41, out_$p42, out_$p45, out_$p46, out_$p47, out_$p48, out_$i49, out_$i50, out_$p37, out_$i43, out_$i51, out_$i52, out_$i21 := in_$p22, in_$p23, in_$i24, in_$p26, in_$p27, in_$p28, in_$p29, in_$i30, in_$p31, in_$p32, in_$i33, in_$p34, in_$i35, in_$i36, in_$i38, in_$i39, in_$i40, in_$p41, in_$p42, in_$p45, in_$p46, in_$p47, in_$p48, in_$i49, in_$i50, in_$p37, in_$i43, in_$i51, in_$i52, in_$i21;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_3986;

  $bb22:
    assume out_$i52 == 1;
    assume {:verifier.code 0} true;
    out_$i21 := out_$i51;
    goto $bb22_dummy;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    out_$i52 := $sle.i32(out_$i51, 2);
    goto corral_source_split_4018;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    out_$i51 := $add.i32(out_$i43, 1);
    call {:si_unique_call 705} {:cexpr "i"} boogie_si_record_i32(out_$i51);
    goto corral_source_split_4017;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_4016;

  $bb21:
    assume {:verifier.code 0} true;
    out_$i43 := out_$i21;
    goto $bb17;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    out_$i43 := 3;
    goto $bb17;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 704} list_del(out_$p42);
    goto corral_source_split_4014;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(out_$p41, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_4013;

  $bb15:
    assume out_$i40 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4012;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    out_$p41 := out_$p37;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    out_$i40 := $eq.i64(out_$i38, out_$i39);
    goto corral_source_split_4010;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    out_$i39 := $p2i.ref.i64(in_$p5);
    goto corral_source_split_4009;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i38 := $p2i.ref.i64(out_$p37);
    goto corral_source_split_4008;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb13:
    call out_$i38, out_$i39, out_$i40, out_$p41, out_$p45, out_$p46, out_$p47, out_$p48, out_$i49, out_$i50, out_$p37 := isp1760_endpoint_disable_loop_$bb13(in_$p5, out_$i35, out_$i38, out_$i39, out_$i40, out_$p41, out_$p45, out_$p46, out_$p47, out_$p48, out_$i49, out_$i50, out_$p37);
    goto $bb13_last;

  $bb13_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4006;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    out_$p37 := out_$p27;
    goto $bb13;

  $bb19:
    assume out_$i50 == 1;
    assume {:verifier.code 0} true;
    out_$p37 := out_$p46;
    assume false;
    return;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    out_$i50 := $ne.i64(out_$i49, out_$i35);
    goto corral_source_split_4025;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    out_$i49 := $p2i.ref.i64(out_$p48);
    goto corral_source_split_4024;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(out_$p47, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_4023;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    out_$p47 := $bitcast.ref.ref(out_$p46);
    goto corral_source_split_4022;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    out_$p46 := $load.ref($M.0, out_$p45);
    goto corral_source_split_4021;

  $bb18:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref($add.ref(out_$p37, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4020;

  $bb16:
    assume !(out_$i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb10:
    assume out_$i36 == 1;
    goto corral_source_split_4004;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    out_$i36 := $ne.i64(out_$i30, out_$i35);
    goto corral_source_split_4002;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    out_$i35 := $p2i.ref.i64(out_$p34);
    goto corral_source_split_4001;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref(out_$p32, $mul.ref(out_$i33, 16));
    goto corral_source_split_4000;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    out_$i33 := $sext.i32.i64(out_$i21);
    goto corral_source_split_3999;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    out_$p32 := $bitcast.ref.ref(out_$p31);
    goto corral_source_split_3998;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(in_$p2, $mul.ref(0, 2384)), $mul.ref(2312, 1));
    goto corral_source_split_3997;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    out_$i30 := $p2i.ref.i64(out_$p29);
    goto corral_source_split_3996;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(out_$p28, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_3995;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    out_$p28 := $bitcast.ref.ref(out_$p27);
    goto corral_source_split_3994;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    out_$p27 := $load.ref($M.0, out_$p26);
    goto corral_source_split_3993;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(out_$p23, $mul.ref(out_$i24, 16)), $mul.ref(0, 1));
    goto corral_source_split_3992;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    goto corral_source_split_3991;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    out_$i24 := $sext.i32.i64(out_$i21);
    goto corral_source_split_3990;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    out_$p23 := $bitcast.ref.ref(out_$p22);
    goto corral_source_split_3989;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(in_$p2, $mul.ref(0, 2384)), $mul.ref(2312, 1));
    goto corral_source_split_3988;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb11:
    assume {:verifier.code 0} true;
    assume !(out_$i36 == 1);
    goto $bb12;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb20:
    assume !(out_$i50 == 1);
    goto corral_source_split_4027;

  $bb22_dummy:
    call {:si_unique_call 1} out_$p22, out_$p23, out_$i24, out_$p26, out_$p27, out_$p28, out_$p29, out_$i30, out_$p31, out_$p32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i38, out_$i39, out_$i40, out_$p41, out_$p42, out_$p45, out_$p46, out_$p47, out_$p48, out_$i49, out_$i50, out_$p37, out_$i43, out_$i51, out_$i52, out_$i21 := isp1760_endpoint_disable_loop_$bb8(in_$p2, in_$p5, out_$p22, out_$p23, out_$i24, out_$p26, out_$p27, out_$p28, out_$p29, out_$i30, out_$p31, out_$p32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i38, out_$i39, out_$i40, out_$p41, out_$p42, out_$p45, out_$p46, out_$p47, out_$p48, out_$i49, out_$i50, out_$p37, out_$i43, out_$i51, out_$i52, out_$i21);
    return;

  exit:
    return;
}



procedure isp1760_endpoint_disable_loop_$bb8(in_$p2: ref, in_$p5: ref, in_$p22: ref, in_$p23: ref, in_$i24: i64, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$i30: i64, in_$p31: ref, in_$p32: ref, in_$i33: i64, in_$p34: ref, in_$i35: i64, in_$i36: i1, in_$i38: i64, in_$i39: i64, in_$i40: i1, in_$p41: ref, in_$p42: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$i49: i64, in_$i50: i1, in_$p37: ref, in_$i43: i32, in_$i51: i32, in_$i52: i1, in_$i21: i32) returns (out_$p22: ref, out_$p23: ref, out_$i24: i64, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$i30: i64, out_$p31: ref, out_$p32: ref, out_$i33: i64, out_$p34: ref, out_$i35: i64, out_$i36: i1, out_$i38: i64, out_$i39: i64, out_$i40: i1, out_$p41: ref, out_$p42: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$i49: i64, out_$i50: i1, out_$p37: ref, out_$i43: i32, out_$i51: i32, out_$i52: i1, out_$i21: i32);



implementation schedule_ptds_loop_$bb37(in_$p0: ref, in_$i85: i64, in_$p90: ref, in_$p91: ref, in_$p93: ref, in_$i94: i64, in_$i95: i1, in_$p87: ref, in_$p88: ref) returns (out_$p90: ref, out_$p91: ref, out_$p93: ref, out_$i94: i64, out_$i95: i1, out_$p87: ref, out_$p88: ref)
{

  entry:
    out_$p90, out_$p91, out_$p93, out_$i94, out_$i95, out_$p87, out_$p88 := in_$p90, in_$p91, in_$p93, in_$i94, in_$i95, in_$p87, in_$p88;
    goto $bb37, exit;

  $bb37:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4573;

  $bb39:
    assume out_$i95 == 1;
    assume {:verifier.code 0} true;
    out_$p87, out_$p88 := out_$p88, out_$p91;
    goto $bb39_dummy;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    out_$i95 := $ne.i64(out_$i94, in_$i85);
    goto corral_source_split_4581;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    out_$i94 := $p2i.ref.i64(out_$p93);
    goto corral_source_split_4580;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    out_$p93 := $add.ref($add.ref(out_$p88, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_4579;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    goto corral_source_split_4578;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    out_$p91 := $load.ref($M.0, out_$p90);
    goto corral_source_split_4577;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    out_$p90 := $add.ref($add.ref($add.ref(out_$p88, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4576;

  SeqInstr_183:
    goto corral_source_split_4575;

  SeqInstr_182:
    assume assertsPassed;
    goto SeqInstr_183;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 798} enqueue_qtds(in_$p0, out_$p87);
    goto SeqInstr_182;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb39_dummy:
    call {:si_unique_call 1} out_$p90, out_$p91, out_$p93, out_$i94, out_$i95, out_$p87, out_$p88 := schedule_ptds_loop_$bb37(in_$p0, in_$i85, out_$p90, out_$p91, out_$p93, out_$i94, out_$i95, out_$p87, out_$p88);
    return;

  exit:
    return;
}



procedure schedule_ptds_loop_$bb37(in_$p0: ref, in_$i85: i64, in_$p90: ref, in_$p91: ref, in_$p93: ref, in_$i94: i64, in_$i95: i1, in_$p87: ref, in_$p88: ref) returns (out_$p90: ref, out_$p91: ref, out_$p93: ref, out_$i94: i64, out_$i95: i1, out_$p87: ref, out_$p88: ref);
  modifies $M.0, $M.36, $CurrAddr, $M.1, $M.32, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.30, $M.38, $M.40, $M.23, $M.22, $M.25, $M.24, $M.27, $M.26, $M.29, $M.28, $M.2, $M.4, $M.6, $M.8, $M.3, $M.5, $M.7, $M.9, assertsPassed;



implementation {:SIextraRecBound 3} schedule_ptds_loop_$bb32(in_$p0: ref, in_$p15: ref, in_$p72: ref, in_$p73: ref, in_$i74: i64, in_$p75: ref, in_$p76: ref, in_$p77: ref, in_$p78: ref, in_$p80: ref, in_$p81: ref, in_$p83: ref, in_$i84: i64, in_$i85: i64, in_$i86: i1, in_$p90: ref, in_$p91: ref, in_$p93: ref, in_$i94: i64, in_$i95: i1, in_$p87: ref, in_$p88: ref, in_$i96: i32, in_$i97: i1, in_$i71: i32) returns (out_$p72: ref, out_$p73: ref, out_$i74: i64, out_$p75: ref, out_$p76: ref, out_$p77: ref, out_$p78: ref, out_$p80: ref, out_$p81: ref, out_$p83: ref, out_$i84: i64, out_$i85: i64, out_$i86: i1, out_$p90: ref, out_$p91: ref, out_$p93: ref, out_$i94: i64, out_$i95: i1, out_$p87: ref, out_$p88: ref, out_$i96: i32, out_$i97: i1, out_$i71: i32)
{

  entry:
    out_$p72, out_$p73, out_$i74, out_$p75, out_$p76, out_$p77, out_$p78, out_$p80, out_$p81, out_$p83, out_$i84, out_$i85, out_$i86, out_$p90, out_$p91, out_$p93, out_$i94, out_$i95, out_$p87, out_$p88, out_$i96, out_$i97, out_$i71 := in_$p72, in_$p73, in_$i74, in_$p75, in_$p76, in_$p77, in_$p78, in_$p80, in_$p81, in_$p83, in_$i84, in_$i85, in_$i86, in_$p90, in_$p91, in_$p93, in_$i94, in_$i95, in_$p87, in_$p88, in_$i96, in_$i97, in_$i71;
    goto $bb32, exit;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_4554;

  $bb42:
    assume out_$i97 == 1;
    assume {:verifier.code 0} true;
    out_$i71 := out_$i96;
    goto $bb42_dummy;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    out_$i97 := $sle.i32(out_$i96, 2);
    goto corral_source_split_4586;

  $bb41:
    assume {:verifier.code 0} true;
    out_$i96 := $add.i32(out_$i71, 1);
    call {:si_unique_call 799} {:cexpr "i"} boogie_si_record_i32(out_$i96);
    goto corral_source_split_4585;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb35:
    assume {:verifier.code 0} true;
    assume !(out_$i86 == 1);
    goto $bb36;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb40:
    assume !(out_$i95 == 1);
    goto corral_source_split_4583;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    out_$i95 := $ne.i64(out_$i94, out_$i85);
    goto corral_source_split_4581;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    out_$i94 := $p2i.ref.i64(out_$p93);
    goto corral_source_split_4580;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    out_$p93 := $add.ref($add.ref(out_$p88, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_4579;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    goto corral_source_split_4578;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    out_$p91 := $load.ref($M.0, out_$p90);
    goto corral_source_split_4577;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    out_$p90 := $add.ref($add.ref($add.ref(out_$p88, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4576;

  SeqInstr_183:
    goto corral_source_split_4575;

  SeqInstr_182:
    assume assertsPassed;
    goto SeqInstr_183;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 798} enqueue_qtds(in_$p0, out_$p87);
    goto SeqInstr_182;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb37:
    call out_$p90, out_$p91, out_$p93, out_$i94, out_$i95, out_$p87, out_$p88 := schedule_ptds_loop_$bb37(in_$p0, out_$i85, out_$p90, out_$p91, out_$p93, out_$i94, out_$i95, out_$p87, out_$p88);
    goto $bb37_last;

  $bb37_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4573;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    out_$p87, out_$p88 := out_$p77, out_$p81;
    goto $bb37;

  $bb39:
    assume out_$i95 == 1;
    assume {:verifier.code 0} true;
    out_$p87, out_$p88 := out_$p88, out_$p91;
    assume false;
    return;

  $bb34:
    assume out_$i86 == 1;
    goto corral_source_split_4571;

  corral_source_split_4569:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    out_$i86 := $ne.i64(out_$i84, out_$i85);
    goto corral_source_split_4569;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    out_$i85 := $p2i.ref.i64(out_$p75);
    goto corral_source_split_4568;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    out_$i84 := $p2i.ref.i64(out_$p83);
    goto corral_source_split_4567;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    out_$p83 := $add.ref($add.ref(out_$p78, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_4566;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    goto corral_source_split_4565;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    out_$p81 := $load.ref($M.0, out_$p80);
    goto corral_source_split_4564;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref($add.ref($add.ref(out_$p78, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4563;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    out_$p78 := $bitcast.ref.ref(out_$p77);
    goto corral_source_split_4562;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    out_$p77 := $load.ref($M.34, out_$p76);
    goto corral_source_split_4561;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref(out_$p73, $mul.ref(out_$i74, 16)), $mul.ref(0, 1));
    goto corral_source_split_4560;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref(out_$p73, $mul.ref(out_$i74, 16));
    goto corral_source_split_4559;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    out_$i74 := $sext.i32.i64(out_$i71);
    goto corral_source_split_4558;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    out_$p73 := $bitcast.ref.ref(out_$p72);
    goto corral_source_split_4557;

  $bb33:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref(in_$p15, $mul.ref(0, 2384)), $mul.ref(2312, 1));
    goto corral_source_split_4556;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb42_dummy:
    call {:si_unique_call 1} out_$p72, out_$p73, out_$i74, out_$p75, out_$p76, out_$p77, out_$p78, out_$p80, out_$p81, out_$p83, out_$i84, out_$i85, out_$i86, out_$p90, out_$p91, out_$p93, out_$i94, out_$i95, out_$p87, out_$p88, out_$i96, out_$i97, out_$i71 := schedule_ptds_loop_$bb32(in_$p0, in_$p15, out_$p72, out_$p73, out_$i74, out_$p75, out_$p76, out_$p77, out_$p78, out_$p80, out_$p81, out_$p83, out_$i84, out_$i85, out_$i86, out_$p90, out_$p91, out_$p93, out_$i94, out_$i95, out_$p87, out_$p88, out_$i96, out_$i97, out_$i71);
    return;

  exit:
    return;
}



procedure schedule_ptds_loop_$bb32(in_$p0: ref, in_$p15: ref, in_$p72: ref, in_$p73: ref, in_$i74: i64, in_$p75: ref, in_$p76: ref, in_$p77: ref, in_$p78: ref, in_$p80: ref, in_$p81: ref, in_$p83: ref, in_$i84: i64, in_$i85: i64, in_$i86: i1, in_$p90: ref, in_$p91: ref, in_$p93: ref, in_$i94: i64, in_$i95: i1, in_$p87: ref, in_$p88: ref, in_$i96: i32, in_$i97: i1, in_$i71: i32) returns (out_$p72: ref, out_$p73: ref, out_$i74: i64, out_$p75: ref, out_$p76: ref, out_$p77: ref, out_$p78: ref, out_$p80: ref, out_$p81: ref, out_$p83: ref, out_$i84: i64, out_$i85: i64, out_$i86: i1, out_$p90: ref, out_$p91: ref, out_$p93: ref, out_$i94: i64, out_$i95: i1, out_$p87: ref, out_$p88: ref, out_$i96: i32, out_$i97: i1, out_$i71: i32);
  modifies $M.0, $M.36, $CurrAddr, $M.1, $M.32, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.30, $M.38, $M.40, $M.23, $M.22, $M.25, $M.24, $M.27, $M.26, $M.29, $M.28, $M.2, $M.4, $M.6, $M.8, $M.3, $M.5, $M.7, $M.9, assertsPassed;



implementation schedule_ptds_loop_$bb27(in_$p0: ref, in_$i56: i64, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$p65: ref, in_$p66: ref, in_$p68: ref, in_$i69: i64, in_$i70: i1, in_$p58: ref, in_$p59: ref) returns (out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$p65: ref, out_$p66: ref, out_$p68: ref, out_$i69: i64, out_$i70: i1, out_$p58: ref, out_$p59: ref)
{

  entry:
    out_$p60, out_$p61, out_$p62, out_$p63, out_$p65, out_$p66, out_$p68, out_$i69, out_$i70, out_$p58, out_$p59 := in_$p60, in_$p61, in_$p62, in_$p63, in_$p65, in_$p66, in_$p68, in_$i69, in_$i70, in_$p58, in_$p59;
    goto $bb27, exit;

  $bb27:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4537;

  $bb29:
    assume out_$i70 == 1;
    assume {:verifier.code 0} true;
    out_$p58, out_$p59 := out_$p66, out_$p58;
    goto $bb29_dummy;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    out_$i70 := $ne.i64(out_$i69, in_$i56);
    goto corral_source_split_4550;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    out_$i69 := $p2i.ref.i64(out_$p68);
    goto corral_source_split_4549;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref(out_$p58, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_4548;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    goto corral_source_split_4547;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    out_$p66 := $load.ref($M.0, out_$p65);
    goto corral_source_split_4546;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref($add.ref(out_$p58, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4545;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 797} kmem_cache_free(out_$p62, out_$p63);
    goto corral_source_split_4544;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    out_$p63 := $bitcast.ref.ref(out_$p59);
    goto corral_source_split_4543;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    out_$p62 := $M.35;
    goto corral_source_split_4542;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 796} isp1760_urb_done(in_$p0, out_$p61);
    goto corral_source_split_4541;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    out_$p61 := $load.ref($M.0, out_$p60);
    goto corral_source_split_4540;

  $bb28:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(out_$p59, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_4539;

  corral_source_split_4537:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb29_dummy:
    call {:si_unique_call 1} out_$p60, out_$p61, out_$p62, out_$p63, out_$p65, out_$p66, out_$p68, out_$i69, out_$i70, out_$p58, out_$p59 := schedule_ptds_loop_$bb27(in_$p0, in_$i56, out_$p60, out_$p61, out_$p62, out_$p63, out_$p65, out_$p66, out_$p68, out_$i69, out_$i70, out_$p58, out_$p59);
    return;

  exit:
    return;
}



procedure schedule_ptds_loop_$bb27(in_$p0: ref, in_$i56: i64, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$p65: ref, in_$p66: ref, in_$p68: ref, in_$i69: i64, in_$i70: i1, in_$p58: ref, in_$p59: ref) returns (out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$p65: ref, out_$p66: ref, out_$p68: ref, out_$i69: i64, out_$i70: i1, out_$p58: ref, out_$p59: ref);
  modifies $M.0, $M.30;



implementation schedule_ptds_loop_$bb13(in_$p0: ref, in_$p1: ref, in_$i30: i64, in_$p34: ref, in_$i35: i32, in_$i36: i1, in_$p37: ref, in_$p39: ref, in_$p40: ref, in_$p42: ref, in_$i43: i64, in_$i44: i1, in_$p32: ref, in_$p33: ref) returns (out_$p34: ref, out_$i35: i32, out_$i36: i1, out_$p37: ref, out_$p39: ref, out_$p40: ref, out_$p42: ref, out_$i43: i64, out_$i44: i1, out_$p32: ref, out_$p33: ref)
{

  entry:
    out_$p34, out_$i35, out_$i36, out_$p37, out_$p39, out_$p40, out_$p42, out_$i43, out_$i44, out_$p32, out_$p33 := in_$p34, in_$i35, in_$i36, in_$p37, in_$p39, in_$p40, in_$p42, in_$i43, in_$i44, in_$p32, in_$p33;
    goto $bb13, exit;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4501;

  $bb18:
    assume out_$i44 == 1;
    assume {:verifier.code 0} true;
    out_$p32, out_$p33 := out_$p33, out_$p40;
    goto $bb18_dummy;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    out_$i44 := $ne.i64(out_$i43, in_$i30);
    goto corral_source_split_4517;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    out_$i43 := $p2i.ref.i64(out_$p42);
    goto corral_source_split_4516;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(out_$p33, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_4515;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    goto corral_source_split_4514;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    out_$p40 := $load.ref($M.0, out_$p39);
    goto corral_source_split_4513;

  $bb17:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref($add.ref(out_$p33, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4512;

  $bb16:
    assume !(out_$i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 794} list_del(out_$p37);
    goto corral_source_split_4510;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(out_$p32, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_4509;

  $bb15:
    assume out_$i36 == 1;
    goto corral_source_split_4508;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    out_$i36 := $ne.i32(out_$i35, 0);
    goto corral_source_split_4506;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 792} out_$i35 := list_empty(out_$p34);
    call {:si_unique_call 793} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i35);
    goto corral_source_split_4505;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(out_$p32, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_4504;

  SeqInstr_180:
    goto corral_source_split_4503;

  SeqInstr_179:
    assume assertsPassed;
    goto SeqInstr_180;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 791} collect_qtds(in_$p0, out_$p32, in_$p1);
    goto SeqInstr_179;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb18_dummy:
    call {:si_unique_call 1} out_$p34, out_$i35, out_$i36, out_$p37, out_$p39, out_$p40, out_$p42, out_$i43, out_$i44, out_$p32, out_$p33 := schedule_ptds_loop_$bb13(in_$p0, in_$p1, in_$i30, out_$p34, out_$i35, out_$i36, out_$p37, out_$p39, out_$p40, out_$p42, out_$i43, out_$i44, out_$p32, out_$p33);
    return;

  exit:
    return;
}



procedure schedule_ptds_loop_$bb13(in_$p0: ref, in_$p1: ref, in_$i30: i64, in_$p34: ref, in_$i35: i32, in_$i36: i1, in_$p37: ref, in_$p39: ref, in_$p40: ref, in_$p42: ref, in_$i43: i64, in_$i44: i1, in_$p32: ref, in_$p33: ref) returns (out_$p34: ref, out_$i35: i32, out_$i36: i1, out_$p37: ref, out_$p39: ref, out_$p40: ref, out_$p42: ref, out_$i43: i64, out_$i44: i1, out_$p32: ref, out_$p33: ref);
  modifies $M.0, $M.38, assertsPassed, $CurrAddr, $M.1, $M.32, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.30, $M.36, $M.40, $M.23, $M.22, $M.25, $M.24, $M.27, $M.26, $M.29, $M.28, $M.2, $M.4, $M.6, $M.8, $M.3, $M.5, $M.7, $M.9;



implementation {:SIextraRecBound 3} schedule_ptds_loop_$bb8(in_$p0: ref, in_$p1: ref, in_$p15: ref, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p25: ref, in_$p26: ref, in_$p28: ref, in_$i29: i64, in_$i30: i64, in_$i31: i1, in_$p34: ref, in_$i35: i32, in_$i36: i1, in_$p37: ref, in_$p39: ref, in_$p40: ref, in_$p42: ref, in_$i43: i64, in_$i44: i1, in_$p32: ref, in_$p33: ref, in_$i45: i32, in_$i46: i1, in_$i16: i32) returns (out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p25: ref, out_$p26: ref, out_$p28: ref, out_$i29: i64, out_$i30: i64, out_$i31: i1, out_$p34: ref, out_$i35: i32, out_$i36: i1, out_$p37: ref, out_$p39: ref, out_$p40: ref, out_$p42: ref, out_$i43: i64, out_$i44: i1, out_$p32: ref, out_$p33: ref, out_$i45: i32, out_$i46: i1, out_$i16: i32)
{

  entry:
    out_$p17, out_$p18, out_$i19, out_$p20, out_$p21, out_$p22, out_$p23, out_$p25, out_$p26, out_$p28, out_$i29, out_$i30, out_$i31, out_$p34, out_$i35, out_$i36, out_$p37, out_$p39, out_$p40, out_$p42, out_$i43, out_$i44, out_$p32, out_$p33, out_$i45, out_$i46, out_$i16 := in_$p17, in_$p18, in_$i19, in_$p20, in_$p21, in_$p22, in_$p23, in_$p25, in_$p26, in_$p28, in_$i29, in_$i30, in_$i31, in_$p34, in_$i35, in_$i36, in_$p37, in_$p39, in_$p40, in_$p42, in_$i43, in_$i44, in_$p32, in_$p33, in_$i45, in_$i46, in_$i16;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_4482;

  $bb21:
    assume out_$i46 == 1;
    assume {:verifier.code 0} true;
    out_$i16 := out_$i45;
    goto $bb21_dummy;

  corral_source_split_4522:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    out_$i46 := $sle.i32(out_$i45, 2);
    goto corral_source_split_4522;

  $bb20:
    assume {:verifier.code 0} true;
    out_$i45 := $add.i32(out_$i16, 1);
    call {:si_unique_call 795} {:cexpr "i"} boogie_si_record_i32(out_$i45);
    goto corral_source_split_4521;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb11:
    assume {:verifier.code 0} true;
    assume !(out_$i31 == 1);
    goto $bb12;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb19:
    assume !(out_$i44 == 1);
    goto corral_source_split_4519;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    out_$i44 := $ne.i64(out_$i43, out_$i30);
    goto corral_source_split_4517;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    out_$i43 := $p2i.ref.i64(out_$p42);
    goto corral_source_split_4516;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(out_$p33, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_4515;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    goto corral_source_split_4514;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    out_$p40 := $load.ref($M.0, out_$p39);
    goto corral_source_split_4513;

  $bb17:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref($add.ref(out_$p33, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4512;

  $bb16:
    assume !(out_$i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 794} list_del(out_$p37);
    goto corral_source_split_4510;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(out_$p32, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_4509;

  $bb15:
    assume out_$i36 == 1;
    goto corral_source_split_4508;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    out_$i36 := $ne.i32(out_$i35, 0);
    goto corral_source_split_4506;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 792} out_$i35 := list_empty(out_$p34);
    call {:si_unique_call 793} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i35);
    goto corral_source_split_4505;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(out_$p32, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_4504;

  SeqInstr_180:
    goto corral_source_split_4503;

  SeqInstr_179:
    assume assertsPassed;
    goto SeqInstr_180;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 791} collect_qtds(in_$p0, out_$p32, in_$p1);
    goto SeqInstr_179;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb13:
    call out_$p34, out_$i35, out_$i36, out_$p37, out_$p39, out_$p40, out_$p42, out_$i43, out_$i44, out_$p32, out_$p33 := schedule_ptds_loop_$bb13(in_$p0, in_$p1, out_$i30, out_$p34, out_$i35, out_$i36, out_$p37, out_$p39, out_$p40, out_$p42, out_$i43, out_$i44, out_$p32, out_$p33);
    goto $bb13_last;

  $bb13_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4501;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    out_$p32, out_$p33 := out_$p22, out_$p26;
    goto $bb13;

  $bb18:
    assume out_$i44 == 1;
    assume {:verifier.code 0} true;
    out_$p32, out_$p33 := out_$p33, out_$p40;
    assume false;
    return;

  $bb10:
    assume out_$i31 == 1;
    goto corral_source_split_4499;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    out_$i31 := $ne.i64(out_$i29, out_$i30);
    goto corral_source_split_4497;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    out_$i30 := $p2i.ref.i64(out_$p20);
    goto corral_source_split_4496;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    out_$i29 := $p2i.ref.i64(out_$p28);
    goto corral_source_split_4495;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(out_$p23, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_4494;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    goto corral_source_split_4493;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    out_$p26 := $load.ref($M.0, out_$p25);
    goto corral_source_split_4492;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref($add.ref(out_$p23, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4491;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    out_$p23 := $bitcast.ref.ref(out_$p22);
    goto corral_source_split_4490;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    out_$p22 := $load.ref($M.34, out_$p21);
    goto corral_source_split_4489;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(out_$p18, $mul.ref(out_$i19, 16)), $mul.ref(0, 1));
    goto corral_source_split_4488;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref(out_$p18, $mul.ref(out_$i19, 16));
    goto corral_source_split_4487;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    out_$i19 := $sext.i32.i64(out_$i16);
    goto corral_source_split_4486;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    out_$p18 := $bitcast.ref.ref(out_$p17);
    goto corral_source_split_4485;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(in_$p15, $mul.ref(0, 2384)), $mul.ref(2312, 1));
    goto corral_source_split_4484;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb21_dummy:
    call {:si_unique_call 1} out_$p17, out_$p18, out_$i19, out_$p20, out_$p21, out_$p22, out_$p23, out_$p25, out_$p26, out_$p28, out_$i29, out_$i30, out_$i31, out_$p34, out_$i35, out_$i36, out_$p37, out_$p39, out_$p40, out_$p42, out_$i43, out_$i44, out_$p32, out_$p33, out_$i45, out_$i46, out_$i16 := schedule_ptds_loop_$bb8(in_$p0, in_$p1, in_$p15, out_$p17, out_$p18, out_$i19, out_$p20, out_$p21, out_$p22, out_$p23, out_$p25, out_$p26, out_$p28, out_$i29, out_$i30, out_$i31, out_$p34, out_$i35, out_$i36, out_$p37, out_$p39, out_$p40, out_$p42, out_$i43, out_$i44, out_$p32, out_$p33, out_$i45, out_$i46, out_$i16);
    return;

  exit:
    return;
}



procedure schedule_ptds_loop_$bb8(in_$p0: ref, in_$p1: ref, in_$p15: ref, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p25: ref, in_$p26: ref, in_$p28: ref, in_$i29: i64, in_$i30: i64, in_$i31: i1, in_$p34: ref, in_$i35: i32, in_$i36: i1, in_$p37: ref, in_$p39: ref, in_$p40: ref, in_$p42: ref, in_$i43: i64, in_$i44: i1, in_$p32: ref, in_$p33: ref, in_$i45: i32, in_$i46: i1, in_$i16: i32) returns (out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p25: ref, out_$p26: ref, out_$p28: ref, out_$i29: i64, out_$i30: i64, out_$i31: i1, out_$p34: ref, out_$i35: i32, out_$i36: i1, out_$p37: ref, out_$p39: ref, out_$p40: ref, out_$p42: ref, out_$i43: i64, out_$i44: i1, out_$p32: ref, out_$p33: ref, out_$i45: i32, out_$i46: i1, out_$i16: i32);
  modifies $M.0, $M.38, assertsPassed, $CurrAddr, $M.1, $M.32, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.30, $M.36, $M.40, $M.23, $M.22, $M.25, $M.24, $M.27, $M.26, $M.29, $M.28, $M.2, $M.4, $M.6, $M.8, $M.3, $M.5, $M.7, $M.9;



implementation collect_qtds_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i16: i64, in_$p20: ref, in_$i21: i32, in_$i22: i1, in_$i23: i32, in_$i24: i1, in_$p25: ref, in_$i26: i32, in_$i27: i1, in_$p28: ref, in_$p29: ref, in_$i30: i32, in_$i31: i1, in_$p32: ref, in_$i33: i64, in_$i34: i1, in_$p35: ref, in_$i36: i8, in_$i37: i32, in_$i38: i1, in_$i39: i1, in_$i40: i1, in_$i41: i1, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$i45: i32, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$i49: i64, in_$i50: i32, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$i54: i32, in_$p55: ref, in_$i56: i64, in_$i57: i32, in_$i58: i32, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$i62: i32, in_$i63: i1, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$i67: i32, in_$i68: i32, in_$i69: i1, in_$p70: ref, in_$p71: ref, in_$p72: ref, in_$i73: i1, in_$p74: ref, in_$p75: ref, in_$i76: i32, in_$i77: i1, in_$i78: i1, in_$p79: ref, in_$i80: i32, in_$i81: i1, in_$p82: ref, in_$p83: ref, in_$p84: ref, in_$i85: i32, in_$i86: i1, in_$p87: ref, in_$p88: ref, in_$p89: ref, in_$p90: ref, in_$p91: ref, in_$p92: ref, in_$i93: i64, in_$i94: i1, in_$i95: i32, in_$i96: i64, in_$i97: i64, in_$i98: i1, in_$p99: ref, in_$p100: ref, in_$p101: ref, in_$p102: ref, in_$p103: ref, in_$p105: ref, in_$p106: ref, in_$p107: ref, in_$p108: ref, in_$p109: ref, in_$i110: i64, in_$i111: i1, in_$p18: ref, in_$p19: ref) returns (out_$p20: ref, out_$i21: i32, out_$i22: i1, out_$i23: i32, out_$i24: i1, out_$p25: ref, out_$i26: i32, out_$i27: i1, out_$p28: ref, out_$p29: ref, out_$i30: i32, out_$i31: i1, out_$p32: ref, out_$i33: i64, out_$i34: i1, out_$p35: ref, out_$i36: i8, out_$i37: i32, out_$i38: i1, out_$i39: i1, out_$i40: i1, out_$i41: i1, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$i45: i32, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$i49: i64, out_$i50: i32, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$i54: i32, out_$p55: ref, out_$i56: i64, out_$i57: i32, out_$i58: i32, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$i62: i32, out_$i63: i1, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$i67: i32, out_$i68: i32, out_$i69: i1, out_$p70: ref, out_$p71: ref, out_$p72: ref, out_$i73: i1, out_$p74: ref, out_$p75: ref, out_$i76: i32, out_$i77: i1, out_$i78: i1, out_$p79: ref, out_$i80: i32, out_$i81: i1, out_$p82: ref, out_$p83: ref, out_$p84: ref, out_$i85: i32, out_$i86: i1, out_$p87: ref, out_$p88: ref, out_$p89: ref, out_$p90: ref, out_$p91: ref, out_$p92: ref, out_$i93: i64, out_$i94: i1, out_$i95: i32, out_$i96: i64, out_$i97: i64, out_$i98: i1, out_$p99: ref, out_$p100: ref, out_$p101: ref, out_$p102: ref, out_$p103: ref, out_$p105: ref, out_$p106: ref, out_$p107: ref, out_$p108: ref, out_$p109: ref, out_$i110: i64, out_$i111: i1, out_$p18: ref, out_$p19: ref)
{

  entry:
    out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$p25, out_$i26, out_$i27, out_$p28, out_$p29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$p42, out_$p43, out_$p44, out_$i45, out_$p46, out_$p47, out_$p48, out_$i49, out_$i50, out_$p51, out_$p52, out_$p53, out_$i54, out_$p55, out_$i56, out_$i57, out_$i58, out_$p59, out_$p60, out_$p61, out_$i62, out_$i63, out_$p64, out_$p65, out_$p66, out_$i67, out_$i68, out_$i69, out_$p70, out_$p71, out_$p72, out_$i73, out_$p74, out_$p75, out_$i76, out_$i77, out_$i78, out_$p79, out_$i80, out_$i81, out_$p82, out_$p83, out_$p84, out_$i85, out_$i86, out_$p87, out_$p88, out_$p89, out_$p90, out_$p91, out_$p92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$p99, out_$p100, out_$p101, out_$p102, out_$p103, out_$p105, out_$p106, out_$p107, out_$p108, out_$p109, out_$i110, out_$i111, out_$p18, out_$p19 := in_$p20, in_$i21, in_$i22, in_$i23, in_$i24, in_$p25, in_$i26, in_$i27, in_$p28, in_$p29, in_$i30, in_$i31, in_$p32, in_$i33, in_$i34, in_$p35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$p42, in_$p43, in_$p44, in_$i45, in_$p46, in_$p47, in_$p48, in_$i49, in_$i50, in_$p51, in_$p52, in_$p53, in_$i54, in_$p55, in_$i56, in_$i57, in_$i58, in_$p59, in_$p60, in_$p61, in_$i62, in_$i63, in_$p64, in_$p65, in_$p66, in_$i67, in_$i68, in_$i69, in_$p70, in_$p71, in_$p72, in_$i73, in_$p74, in_$p75, in_$i76, in_$i77, in_$i78, in_$p79, in_$i80, in_$i81, in_$p82, in_$p83, in_$p84, in_$i85, in_$i86, in_$p87, in_$p88, in_$p89, in_$p90, in_$p91, in_$p92, in_$i93, in_$i94, in_$i95, in_$i96, in_$i97, in_$i98, in_$p99, in_$p100, in_$p101, in_$p102, in_$p103, in_$p105, in_$p106, in_$p107, in_$p108, in_$p109, in_$i110, in_$i111, in_$p18, in_$p19;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4605;

  $bb60:
    assume out_$i111 == 1;
    assume {:verifier.code 0} true;
    out_$p18, out_$p19 := out_$p108, out_$p18;
    goto $bb60_dummy;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    out_$i111 := $ne.i64(out_$i110, in_$i16);
    goto corral_source_split_4741;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    out_$i110 := $p2i.ref.i64(out_$p109);
    goto corral_source_split_4740;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    out_$p109 := $add.ref($add.ref(out_$p18, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_4739;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    out_$p108 := $add.ref(out_$p107, $mul.ref($sub.ref(0, 24), 72));
    goto corral_source_split_4738;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    out_$p107 := $bitcast.ref.ref(out_$p106);
    goto corral_source_split_4737;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    out_$p106 := $load.ref($M.0, out_$p105);
    goto corral_source_split_4736;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    out_$p105 := $add.ref($add.ref($add.ref(out_$p18, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_4735;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 811} qtd_free(out_$p19);
    goto corral_source_split_4734;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} list_del(out_$p103);
    goto corral_source_split_4733;

  $bb59:
    assume {:verifier.code 0} true;
    out_$p103 := $add.ref($add.ref(out_$p19, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_4732;

  $bb49:
    assume !(out_$i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    goto $bb59;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 809} list_add_tail(out_$p102, in_$p2);
    goto corral_source_split_4730;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    out_$p102 := $add.ref($add.ref(out_$p92, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_4729;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p101, out_$p100);
    goto corral_source_split_4728;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    out_$p101 := $add.ref($add.ref(out_$p92, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_4727;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    out_$p100 := $load.ref($M.0, out_$p99);
    goto corral_source_split_4726;

  $bb58:
    assume {:verifier.code 0} true;
    out_$p99 := $add.ref($add.ref(out_$p19, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_4725;

  $bb57:
    assume !(out_$i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    out_$i98 := $ne.i64(out_$i97, 0);
    goto corral_source_split_4721;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 807} out_$i97 := ldv__builtin_expect(out_$i96, 0);
    call {:si_unique_call 808} {:cexpr "tmp___1"} boogie_si_record_i64(out_$i97);
    goto corral_source_split_4720;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    out_$i96 := $sext.i32.i64(out_$i95);
    goto corral_source_split_4719;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    out_$i95 := $zext.i1.i32(out_$i94);
    goto corral_source_split_4718;

  corral_source_split_4716:
    assume {:verifier.code 0} true;
    out_$i94 := $eq.i64(out_$i93, 0);
    goto corral_source_split_4717;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    out_$i93 := $p2i.ref.i64(out_$p92);
    goto corral_source_split_4716;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    out_$p92 := $bitcast.ref.ref(out_$p91);
    goto corral_source_split_4715;

  SeqInstr_189:
    goto corral_source_split_4714;

  SeqInstr_188:
    assume assertsPassed;
    goto SeqInstr_189;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 806} out_$p91 := kmem_cache_zalloc(out_$p90, 32);
    goto SeqInstr_188;

  $bb55:
    assume {:verifier.code 0} true;
    out_$p90 := $M.35;
    goto corral_source_split_4713;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb55;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    goto $bb55;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p89, $sub.i32(0, 32));
    goto corral_source_split_4711;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    out_$p89 := $add.ref($add.ref(out_$p88, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_4710;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    out_$p88 := $load.ref($M.0, out_$p87);
    goto corral_source_split_4709;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref($add.ref(out_$p19, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_4708;

  $bb53:
    assume out_$i86 == 1;
    goto corral_source_split_4707;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    out_$i86 := $eq.i32(out_$i85, $sub.i32(0, 115));
    goto corral_source_split_4705;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    out_$i85 := $load.i32($M.0, out_$p84);
    goto corral_source_split_4704;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref($add.ref(out_$p83, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_4703;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    out_$p83 := $load.ref($M.0, out_$p82);
    goto corral_source_split_4702;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    out_$p82 := $add.ref($add.ref(out_$p19, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_4701;

  $bb50:
    assume out_$i81 == 1;
    goto corral_source_split_4700;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    out_$i81 := $eq.i32(out_$i80, 4);
    goto corral_source_split_4698;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    out_$i80 := $load.i32($M.0, out_$p79);
    goto corral_source_split_4697;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref(out_$p19, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_4696;

  $bb48:
    assume out_$i78 == 1;
    goto corral_source_split_4695;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb47:
    assume {:verifier.code 0} true;
    out_$i78 := $ne.i32(out_$i23, 0);
    goto corral_source_split_4693;

  $bb46:
    assume !(out_$i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    goto $bb47;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 805} free_mem(in_$p0, out_$p19);
    goto corral_source_split_4691;

  $bb45:
    assume out_$i77 == 1;
    goto corral_source_split_4690;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    out_$i77 := $ne.i32(out_$i76, 0);
    goto corral_source_split_4688;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    out_$i76 := $load.i32($M.0, out_$p75);
    goto corral_source_split_4687;

  $bb44:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref(out_$p19, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_4686;

  $bb17:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb36:
    assume !(out_$i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb41:
    assume !(out_$i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    goto $bb42;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p74, 4);
    goto corral_source_split_4684;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref(out_$p18, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_4683;

  $bb40:
    assume out_$i73 == 1;
    goto corral_source_split_4682;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb39:
    assume {:verifier.code 0} true;
    out_$i73 := $eq.i32(out_$i23, 0);
    goto corral_source_split_4680;

  $bb38:
    assume !(out_$i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    goto $bb39;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p72, $sub.i32(0, 121));
    goto corral_source_split_4678;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref(out_$p71, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_4677;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    out_$p71 := $load.ref($M.0, out_$p70);
    goto corral_source_split_4676;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref(out_$p19, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_4675;

  $bb37:
    assume out_$i69 == 1;
    goto corral_source_split_4674;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    out_$i69 := $ne.i32(out_$i68, 0);
    goto corral_source_split_4672;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    out_$i68 := $and.i32(out_$i67, 1);
    goto corral_source_split_4671;

  corral_source_split_4669:
    assume {:verifier.code 0} true;
    out_$i67 := $load.i32($M.0, out_$p66);
    goto corral_source_split_4670;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref(out_$p65, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_4669;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    out_$p65 := $load.ref($M.0, out_$p64);
    goto corral_source_split_4668;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(out_$p19, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_4667;

  $bb35:
    assume out_$i63 == 1;
    goto corral_source_split_4666;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    out_$i63 := $ne.i32(out_$i62, 0);
    goto corral_source_split_4664;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 803} out_$i62 := is_short_bulk(out_$p19);
    call {:si_unique_call 804} {:cexpr "tmp"} boogie_si_record_i32(out_$i62);
    goto corral_source_split_4663;

  $bb19:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb25:
    assume {:verifier.code 0} true;
    assume out_$i40 == 1;
    goto $bb26;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p61, out_$i58);
    goto corral_source_split_4661;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(out_$p60, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_4660;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    out_$p60 := $load.ref($M.0, out_$p59);
    goto corral_source_split_4659;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref(out_$p19, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_4658;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    out_$i58 := $add.i32(out_$i54, out_$i57);
    goto corral_source_split_4657;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    out_$i57 := $trunc.i64.i32(out_$i56);
    goto corral_source_split_4656;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    out_$i56 := $load.i64($M.0, out_$p55);
    goto corral_source_split_4655;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref(out_$p19, $mul.ref(0, 72)), $mul.ref(56, 1));
    goto corral_source_split_4654;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    out_$i54 := $load.i32($M.0, out_$p53);
    goto corral_source_split_4653;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(out_$p52, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_4652;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    out_$p52 := $load.ref($M.0, out_$p51);
    goto corral_source_split_4651;

  $bb30:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(out_$p19, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_4650;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb29:
    assume {:verifier.code 0} true;
    assume out_$i41 == 1;
    goto $bb30;

  $bb21:
    assume out_$i38 == 1;
    assume {:verifier.code 0} true;
    out_$i41 := $eq.i32(out_$i37, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb31;

  $bb20:
    assume {:verifier.code 0} true;
    out_$i38 := $slt.i32(out_$i37, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    out_$i37 := $zext.i8.i32(out_$i36);
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    out_$i36 := $load.i8($M.0, out_$p35);
    goto corral_source_split_4636;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(out_$p19, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_4635;

  $bb18:
    assume out_$i34 == 1;
    goto corral_source_split_4634;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    out_$i34 := $ne.i64(out_$i33, 0);
    goto corral_source_split_4632;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    out_$i33 := $load.i64($M.0, out_$p32);
    goto corral_source_split_4631;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(out_$p19, $mul.ref(0, 72)), $mul.ref(56, 1));
    goto corral_source_split_4630;

  $bb16:
    assume out_$i31 == 1;
    goto corral_source_split_4629;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    out_$i31 := $eq.i32(out_$i30, 3);
    goto corral_source_split_4627;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    out_$i30 := $load.i32($M.0, out_$p29);
    goto corral_source_split_4626;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(out_$p19, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_4625;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p28, 4);
    goto corral_source_split_4623;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(out_$p18, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_4622;

  $bb13:
    assume out_$i27 == 1;
    goto corral_source_split_4621;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    out_$i27 := $eq.i32(out_$i26, 4);
    goto corral_source_split_4619;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i32($M.0, out_$p25);
    goto corral_source_split_4618;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(out_$p19, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_4617;

  $bb10:
    assume out_$i24 == 1;
    goto corral_source_split_4616;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    out_$i24 := $eq.i32(out_$i23, 0);
    goto corral_source_split_4614;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} out_$i23 := last_qtd_of_urb(out_$p19, in_$p1);
    call {:si_unique_call 801} {:cexpr "last_qtd"} boogie_si_record_i32(out_$i23);
    goto corral_source_split_4613;

  $bb7:
    assume !(out_$i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    out_$i22 := $ule.i32(out_$i21, 2);
    goto corral_source_split_4609;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    out_$i21 := $load.i32($M.0, out_$p20);
    goto corral_source_split_4608;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(out_$p19, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_4607;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb11:
    assume {:verifier.code 0} true;
    assume !(out_$i24 == 1);
    goto $bb12;

  $bb14:
    assume {:verifier.code 0} true;
    assume !(out_$i27 == 1);
    goto $bb12;

  SeqInstr_186:
    goto corral_source_split_4648;

  SeqInstr_185:
    assume assertsPassed;
    goto SeqInstr_186;

  corral_source_split_4647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} mem_reads8(out_$p43, out_$i45, out_$p47, out_$i50);
    goto SeqInstr_185;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    out_$i50 := $trunc.i64.i32(out_$i49);
    goto corral_source_split_4647;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    out_$i49 := $load.i64($M.0, out_$p48);
    goto corral_source_split_4646;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(out_$p19, $mul.ref(0, 72)), $mul.ref(56, 1));
    goto corral_source_split_4645;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    out_$p47 := $load.ref($M.0, out_$p46);
    goto corral_source_split_4644;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(out_$p19, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_4643;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    out_$i45 := $load.i32($M.0, out_$p44);
    goto corral_source_split_4642;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(out_$p19, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_4641;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    out_$p43 := $load.ref($M.0, out_$p42);
    goto corral_source_split_4640;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(in_$p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_4639;

  $bb23:
    assume out_$i39 == 1;
    goto corral_source_split_4638;

  $bb22:
    assume !(out_$i38 == 1);
    assume {:verifier.code 0} true;
    out_$i39 := $slt.i32(out_$i37, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !(out_$i39 == 1);
    assume {:verifier.code 0} true;
    out_$i40 := $eq.i32(out_$i37, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb27;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb27:
    assume {:verifier.code 0} true;
    assume !(out_$i40 == 1);
    goto $bb28;

  $bb31:
    assume {:verifier.code 0} true;
    assume !(out_$i41 == 1);
    goto $bb28;

  $bb51:
    assume {:verifier.code 0} true;
    assume !(out_$i81 == 1);
    goto $bb52;

  $bb54:
    assume {:verifier.code 0} true;
    assume !(out_$i86 == 1);
    goto $bb52;

  $bb60_dummy:
    call {:si_unique_call 1} out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$p25, out_$i26, out_$i27, out_$p28, out_$p29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$p42, out_$p43, out_$p44, out_$i45, out_$p46, out_$p47, out_$p48, out_$i49, out_$i50, out_$p51, out_$p52, out_$p53, out_$i54, out_$p55, out_$i56, out_$i57, out_$i58, out_$p59, out_$p60, out_$p61, out_$i62, out_$i63, out_$p64, out_$p65, out_$p66, out_$i67, out_$i68, out_$i69, out_$p70, out_$p71, out_$p72, out_$i73, out_$p74, out_$p75, out_$i76, out_$i77, out_$i78, out_$p79, out_$i80, out_$i81, out_$p82, out_$p83, out_$p84, out_$i85, out_$i86, out_$p87, out_$p88, out_$p89, out_$p90, out_$p91, out_$p92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$p99, out_$p100, out_$p101, out_$p102, out_$p103, out_$p105, out_$p106, out_$p107, out_$p108, out_$p109, out_$i110, out_$i111, out_$p18, out_$p19 := collect_qtds_loop_$bb4(in_$p0, in_$p1, in_$p2, in_$i16, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$p25, out_$i26, out_$i27, out_$p28, out_$p29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$p42, out_$p43, out_$p44, out_$i45, out_$p46, out_$p47, out_$p48, out_$i49, out_$i50, out_$p51, out_$p52, out_$p53, out_$i54, out_$p55, out_$i56, out_$i57, out_$i58, out_$p59, out_$p60, out_$p61, out_$i62, out_$i63, out_$p64, out_$p65, out_$p66, out_$i67, out_$i68, out_$i69, out_$p70, out_$p71, out_$p72, out_$i73, out_$p74, out_$p75, out_$i76, out_$i77, out_$i78, out_$p79, out_$i80, out_$i81, out_$p82, out_$p83, out_$p84, out_$i85, out_$i86, out_$p87, out_$p88, out_$p89, out_$p90, out_$p91, out_$p92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$p99, out_$p100, out_$p101, out_$p102, out_$p103, out_$p105, out_$p106, out_$p107, out_$p108, out_$p109, out_$i110, out_$i111, out_$p18, out_$p19);
    return;

  exit:
    return;
}



procedure collect_qtds_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i16: i64, in_$p20: ref, in_$i21: i32, in_$i22: i1, in_$i23: i32, in_$i24: i1, in_$p25: ref, in_$i26: i32, in_$i27: i1, in_$p28: ref, in_$p29: ref, in_$i30: i32, in_$i31: i1, in_$p32: ref, in_$i33: i64, in_$i34: i1, in_$p35: ref, in_$i36: i8, in_$i37: i32, in_$i38: i1, in_$i39: i1, in_$i40: i1, in_$i41: i1, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$i45: i32, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$i49: i64, in_$i50: i32, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$i54: i32, in_$p55: ref, in_$i56: i64, in_$i57: i32, in_$i58: i32, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$i62: i32, in_$i63: i1, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$i67: i32, in_$i68: i32, in_$i69: i1, in_$p70: ref, in_$p71: ref, in_$p72: ref, in_$i73: i1, in_$p74: ref, in_$p75: ref, in_$i76: i32, in_$i77: i1, in_$i78: i1, in_$p79: ref, in_$i80: i32, in_$i81: i1, in_$p82: ref, in_$p83: ref, in_$p84: ref, in_$i85: i32, in_$i86: i1, in_$p87: ref, in_$p88: ref, in_$p89: ref, in_$p90: ref, in_$p91: ref, in_$p92: ref, in_$i93: i64, in_$i94: i1, in_$i95: i32, in_$i96: i64, in_$i97: i64, in_$i98: i1, in_$p99: ref, in_$p100: ref, in_$p101: ref, in_$p102: ref, in_$p103: ref, in_$p105: ref, in_$p106: ref, in_$p107: ref, in_$p108: ref, in_$p109: ref, in_$i110: i64, in_$i111: i1, in_$p18: ref, in_$p19: ref) returns (out_$p20: ref, out_$i21: i32, out_$i22: i1, out_$i23: i32, out_$i24: i1, out_$p25: ref, out_$i26: i32, out_$i27: i1, out_$p28: ref, out_$p29: ref, out_$i30: i32, out_$i31: i1, out_$p32: ref, out_$i33: i64, out_$i34: i1, out_$p35: ref, out_$i36: i8, out_$i37: i32, out_$i38: i1, out_$i39: i1, out_$i40: i1, out_$i41: i1, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$i45: i32, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$i49: i64, out_$i50: i32, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$i54: i32, out_$p55: ref, out_$i56: i64, out_$i57: i32, out_$i58: i32, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$i62: i32, out_$i63: i1, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$i67: i32, out_$i68: i32, out_$i69: i1, out_$p70: ref, out_$p71: ref, out_$p72: ref, out_$i73: i1, out_$p74: ref, out_$p75: ref, out_$i76: i32, out_$i77: i1, out_$i78: i1, out_$p79: ref, out_$i80: i32, out_$i81: i1, out_$p82: ref, out_$p83: ref, out_$p84: ref, out_$i85: i32, out_$i86: i1, out_$p87: ref, out_$p88: ref, out_$p89: ref, out_$p90: ref, out_$p91: ref, out_$p92: ref, out_$i93: i64, out_$i94: i1, out_$i95: i32, out_$i96: i64, out_$i97: i64, out_$i98: i1, out_$p99: ref, out_$p100: ref, out_$p101: ref, out_$p102: ref, out_$p103: ref, out_$p105: ref, out_$p106: ref, out_$p107: ref, out_$p108: ref, out_$p109: ref, out_$i110: i64, out_$i111: i1, out_$p18: ref, out_$p19: ref);
  modifies $M.0, assertsPassed, $M.38, $CurrAddr, $M.1, $M.32, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.30, $M.36, $M.40, $M.23, $M.22, $M.25, $M.24, $M.27, $M.26, $M.29, $M.28, $M.2, $M.4, $M.6, $M.8, $M.3, $M.5, $M.7, $M.9;



implementation isp1760_urb_done_loop_$bb15(in_$p20: ref, in_$p22: ref, in_$p30: ref, in_$p31: ref, in_$i32: i32, in_$i33: i64, in_$p34: ref, in_$i35: i64, in_$i36: i64, in_$i37: i1, in_$p29: ref) returns (out_$p30: ref, out_$p31: ref, out_$i32: i32, out_$i33: i64, out_$p34: ref, out_$i35: i64, out_$i36: i64, out_$i37: i1, out_$p29: ref)
{

  entry:
    out_$p30, out_$p31, out_$i32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$p29 := in_$p30, in_$p31, in_$i32, in_$i33, in_$p34, in_$i35, in_$i36, in_$i37, in_$p29;
    goto $bb15, exit;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_4786;

  $bb17:
    assume out_$i37 == 1;
    assume {:verifier.code 0} true;
    out_$p29 := out_$p30;
    goto $bb17_dummy;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    out_$i37 := $ugt.i64(out_$i35, out_$i36);
    goto corral_source_split_4795;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    out_$i36 := $p2i.ref.i64(out_$p30);
    goto corral_source_split_4794;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    out_$i35 := $p2i.ref.i64(out_$p34);
    goto corral_source_split_4793;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref(out_$p31, $mul.ref(out_$i33, 1));
    goto corral_source_split_4792;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    out_$i33 := $zext.i32.i64(out_$i32);
    goto corral_source_split_4791;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    out_$i32 := $load.i32($M.0, in_$p22);
    goto corral_source_split_4790;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    out_$p31 := $load.ref($M.0, in_$p20);
    goto corral_source_split_4789;

  $bb16:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref(out_$p29, $mul.ref(4096, 1));
    goto corral_source_split_4788;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb17_dummy:
    call {:si_unique_call 1} out_$p30, out_$p31, out_$i32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$p29 := isp1760_urb_done_loop_$bb15(in_$p20, in_$p22, out_$p30, out_$p31, out_$i32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$p29);
    return;

  exit:
    return;
}



procedure isp1760_urb_done_loop_$bb15(in_$p20: ref, in_$p22: ref, in_$p30: ref, in_$p31: ref, in_$i32: i32, in_$i33: i64, in_$p34: ref, in_$i35: i64, in_$i36: i64, in_$i37: i1, in_$p29: ref) returns (out_$p30: ref, out_$p31: ref, out_$i32: i32, out_$i33: i64, out_$p34: ref, out_$i35: i64, out_$i36: i64, out_$i37: i1, out_$p29: ref);



implementation enqueue_qtds_loop_$bb32(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p36: ref, in_$i37: i32, in_$i53: i32, in_$i63: i64, in_$p68: ref, in_$i69: i32, in_$i70: i1, in_$p71: ref, in_$i72: i32, in_$i73: i1, in_$i74: i32, in_$i75: i1, in_$i76: i32, in_$i77: i64, in_$i78: i64, in_$i79: i1, in_$i80: i1, in_$i81: i32, in_$i82: i64, in_$p84: ref, in_$i85: i64, in_$i86: i1, in_$p87: ref, in_$i88: i32, in_$i89: i1, in_$p90: ref, in_$i91: i64, in_$i92: i1, in_$p93: ref, in_$i94: i8, in_$i95: i32, in_$i96: i1, in_$p97: ref, in_$i98: i8, in_$i99: i32, in_$i100: i1, in_$p101: ref, in_$p102: ref, in_$p103: ref, in_$i104: i32, in_$p105: ref, in_$p106: ref, in_$p107: ref, in_$p108: ref, in_$i109: i64, in_$i110: i32, in_$p111: ref, in_$p112: ref, in_$p113: ref, in_$i114: i32, in_$i115: i1, in_$i116: i1, in_$i117: i1, in_$p118: ref, in_$p119: ref, in_$p120: ref, in_$i121: i32, in_$i122: i32, in_$i123: i1, in_$i124: i32, in_$i125: i32, in_$i126: i1, in_$i127: i32, in_$i128: i32, in_$p130: ref, in_$p131: ref, in_$p132: ref, in_$p133: ref, in_$p134: ref, in_$i135: i64, in_$i136: i1, in_$p65: ref, in_$i66: i32, in_$i67: i32, in_vslice_dummy_var_54: i64) returns (out_$p68: ref, out_$i69: i32, out_$i70: i1, out_$p71: ref, out_$i72: i32, out_$i73: i1, out_$i74: i32, out_$i75: i1, out_$i76: i32, out_$i77: i64, out_$i78: i64, out_$i79: i1, out_$i80: i1, out_$i81: i32, out_$i82: i64, out_$p84: ref, out_$i85: i64, out_$i86: i1, out_$p87: ref, out_$i88: i32, out_$i89: i1, out_$p90: ref, out_$i91: i64, out_$i92: i1, out_$p93: ref, out_$i94: i8, out_$i95: i32, out_$i96: i1, out_$p97: ref, out_$i98: i8, out_$i99: i32, out_$i100: i1, out_$p101: ref, out_$p102: ref, out_$p103: ref, out_$i104: i32, out_$p105: ref, out_$p106: ref, out_$p107: ref, out_$p108: ref, out_$i109: i64, out_$i110: i32, out_$p111: ref, out_$p112: ref, out_$p113: ref, out_$i114: i32, out_$i115: i1, out_$i116: i1, out_$i117: i1, out_$p118: ref, out_$p119: ref, out_$p120: ref, out_$i121: i32, out_$i122: i32, out_$i123: i1, out_$i124: i32, out_$i125: i32, out_$i126: i1, out_$i127: i32, out_$i128: i32, out_$p130: ref, out_$p131: ref, out_$p132: ref, out_$p133: ref, out_$p134: ref, out_$i135: i64, out_$i136: i1, out_$p65: ref, out_$i66: i32, out_$i67: i32, out_vslice_dummy_var_54: i64)
{

  entry:
    out_$p68, out_$i69, out_$i70, out_$p71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$p84, out_$i85, out_$i86, out_$p87, out_$i88, out_$i89, out_$p90, out_$i91, out_$i92, out_$p93, out_$i94, out_$i95, out_$i96, out_$p97, out_$i98, out_$i99, out_$i100, out_$p101, out_$p102, out_$p103, out_$i104, out_$p105, out_$p106, out_$p107, out_$p108, out_$i109, out_$i110, out_$p111, out_$p112, out_$p113, out_$i114, out_$i115, out_$i116, out_$i117, out_$p118, out_$p119, out_$p120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$p130, out_$p131, out_$p132, out_$p133, out_$p134, out_$i135, out_$i136, out_$p65, out_$i66, out_$i67, out_vslice_dummy_var_54 := in_$p68, in_$i69, in_$i70, in_$p71, in_$i72, in_$i73, in_$i74, in_$i75, in_$i76, in_$i77, in_$i78, in_$i79, in_$i80, in_$i81, in_$i82, in_$p84, in_$i85, in_$i86, in_$p87, in_$i88, in_$i89, in_$p90, in_$i91, in_$i92, in_$p93, in_$i94, in_$i95, in_$i96, in_$p97, in_$i98, in_$i99, in_$i100, in_$p101, in_$p102, in_$p103, in_$i104, in_$p105, in_$p106, in_$p107, in_$p108, in_$i109, in_$i110, in_$p111, in_$p112, in_$p113, in_$i114, in_$i115, in_$i116, in_$i117, in_$p118, in_$p119, in_$p120, in_$i121, in_$i122, in_$i123, in_$i124, in_$i125, in_$i126, in_$i127, in_$i128, in_$p130, in_$p131, in_$p132, in_$p133, in_$p134, in_$i135, in_$i136, in_$p65, in_$i66, in_$i67, in_vslice_dummy_var_54;
    goto $bb32, exit;

  $bb32:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4893;

  $bb71:
    assume out_$i136 == 1;
    assume {:verifier.code 0} true;
    out_$p65, out_$i66, out_$i67 := out_$p133, out_$i128, out_$i127;
    goto $bb71_dummy;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    out_$i136 := $ne.i64(out_$i135, in_$i63);
    goto corral_source_split_4999;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    out_$i135 := $p2i.ref.i64(out_$p134);
    goto corral_source_split_4998;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    out_$p134 := $add.ref($add.ref(out_$p132, $mul.ref($sub.ref(0, 24), 72)), $mul.ref(24, 1));
    goto corral_source_split_4997;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    out_$p133 := $add.ref(out_$p132, $mul.ref($sub.ref(0, 24), 72));
    goto corral_source_split_4996;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    out_$p132 := $bitcast.ref.ref(out_$p131);
    goto corral_source_split_4995;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    out_$p131 := $load.ref($M.0, out_$p130);
    goto corral_source_split_4994;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    out_$p130 := $add.ref($add.ref($add.ref(out_$p112, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_4993;

  $bb70:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4992;

  $bb57:
    assume !(out_$i115 == 1);
    assume {:verifier.code 0} true;
    out_$i127, out_$i128 := out_$i67, out_$i66;
    goto $bb70;

  $bb69:
    assume {:verifier.code 0} true;
    out_$i127, out_$i128 := out_$i124, out_$i125;
    goto $bb70;

  $bb68:
    assume !(out_$i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    out_$i126 := $sgt.i32(out_$i125, 1);
    goto corral_source_split_4988;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    out_$i125 := $add.i32(out_$i66, 1);
    call {:si_unique_call 837} {:cexpr "n"} boogie_si_record_i32(out_$i125);
    goto corral_source_split_4987;

  $bb66:
    assume {:verifier.code 0} true;
    goto corral_source_split_4986;

  $bb60:
    assume {:verifier.code 0} true;
    out_$i124 := out_$i67;
    goto $bb66;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    out_$i124 := in_$i53;
    goto $bb66;

  SeqInstr_192:
    goto corral_source_split_4984;

  SeqInstr_191:
    assume assertsPassed;
    goto SeqInstr_192;

  $bb65:
    assume {:verifier.code 0} true;
    call {:si_unique_call 836} start_bus_transfer(in_$p0, in_$i37, in_$i53, in_$p36, out_$p112, in_$p1, in_$p2);
    goto SeqInstr_191;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} create_ptd_atl(in_$p1, out_$p112, in_$p2);
    assume {:verifier.code 0} true;
    goto $bb65;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    goto $bb65;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 834} create_ptd_int(in_$p1, out_$p112, in_$p2);
    goto corral_source_split_4980;

  $bb63:
    assume out_$i123 == 1;
    goto corral_source_split_4979;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    out_$i123 := $eq.i32(out_$i122, 1);
    goto corral_source_split_4977;

  corral_source_split_4975:
    assume {:verifier.code 0} true;
    out_$i122 := $lshr.i32(out_$i121, 30);
    goto corral_source_split_4976;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    out_$i121 := $load.i32($M.0, out_$p120);
    goto corral_source_split_4975;

  corral_source_split_4973:
    assume {:verifier.code 0} true;
    out_$p120 := $add.ref($add.ref(out_$p119, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_4974;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    out_$p119 := $load.ref($M.0, out_$p118);
    goto corral_source_split_4973;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    out_$p118 := $add.ref($add.ref(out_$p112, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_4972;

  $bb61:
    assume out_$i117 == 1;
    goto corral_source_split_4971;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    out_$i117 := $sge.i32(in_$i53, 0);
    goto corral_source_split_4969;

  $bb58:
    assume out_$i116 == 1;
    goto corral_source_split_4968;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    out_$i116 := $sgt.i32(out_$i67, 31);
    goto corral_source_split_4966;

  $bb56:
    assume out_$i115 == 1;
    goto corral_source_split_4965;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    out_$i115 := $eq.i32(out_$i114, 1);
    goto corral_source_split_4963;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    out_$i114 := $load.i32($M.0, out_$p113);
    goto corral_source_split_4962;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    out_$p113 := $add.ref($add.ref(out_$p65, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_4961;

  $bb55:
    assume {:verifier.code 0} true;
    goto corral_source_split_4960;

  $bb35:
    assume !(out_$i70 == 1);
    assume {:verifier.code 0} true;
    out_$p112 := out_$p65;
    goto $bb55;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    out_$p112 := out_$p65;
    goto $bb55;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p111, 1);
    goto corral_source_split_4958;

  $bb54:
    assume {:verifier.code 0} true;
    out_$p111 := $add.ref($add.ref(out_$p65, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_4957;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb54;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    goto $bb54;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} mem_writes8(out_$p102, out_$i104, out_$p107, out_$i110);
    goto corral_source_split_4949;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    out_$i110 := $trunc.i64.i32(out_$i109);
    goto corral_source_split_4948;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    out_$i109 := $load.i64($M.0, out_$p108);
    goto corral_source_split_4947;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    out_$p108 := $add.ref($add.ref(out_$p65, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_4946;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    out_$p107 := $bitcast.ref.ref(out_$p106);
    goto corral_source_split_4945;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    out_$p106 := $load.ref($M.0, out_$p105);
    goto corral_source_split_4944;

  corral_source_split_4942:
    assume {:verifier.code 0} true;
    out_$p105 := $add.ref($add.ref(out_$p65, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_4943;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    out_$i104 := $load.i32($M.0, out_$p103);
    goto corral_source_split_4942;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    out_$p103 := $add.ref($add.ref(out_$p65, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_4941;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    out_$p102 := $load.ref($M.0, out_$p101);
    goto corral_source_split_4940;

  $bb50:
    assume {:verifier.code 0} true;
    out_$p101 := $add.ref($add.ref(in_$p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_4939;

  $bb52:
    assume {:verifier.code 0} true;
    assume out_$i100 == 1;
    goto $bb50;

  $bb49:
    assume {:verifier.code 0} true;
    assume out_$i96 == 1;
    goto $bb50;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb51;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    out_$i96 := $eq.i32(out_$i95, 2);
    goto corral_source_split_4937;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    out_$i95 := $zext.i8.i32(out_$i94);
    goto corral_source_split_4936;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    out_$i94 := $load.i8($M.0, out_$p93);
    goto corral_source_split_4935;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    out_$p93 := $add.ref($add.ref(out_$p65, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_4934;

  $bb46:
    assume out_$i92 == 1;
    goto corral_source_split_4933;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    out_$i92 := $ne.i64(out_$i91, 0);
    goto corral_source_split_4931;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    out_$i91 := $load.i64($M.0, out_$p90);
    goto corral_source_split_4930;

  $bb45:
    assume {:verifier.code 0} true;
    out_$p90 := $add.ref($add.ref(out_$p65, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_4929;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb40:
    assume {:verifier.code 0} true;
    assume !(out_$i86 == 1);
    goto $bb41;

  $bb43:
    assume {:verifier.code 0} true;
    assume !(out_$i89 == 1);
    goto $bb41;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    out_$i89 := $eq.i32(out_$i88, 0);
    goto corral_source_split_4925;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    out_$i88 := $load.i32($M.0, out_$p87);
    goto corral_source_split_4924;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref($add.ref(out_$p65, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_4923;

  $bb39:
    assume out_$i86 == 1;
    goto corral_source_split_4922;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    out_$i86 := $ne.i64(out_$i85, 0);
    goto corral_source_split_4920;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    out_$i85 := $load.i64($M.0, out_$p84);
    goto corral_source_split_4919;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref($add.ref(out_$p65, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_4918;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 832} alloc_mem(in_$p0, out_$p65);
    goto corral_source_split_4917;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 831} out_vslice_dummy_var_54 := ldv__builtin_expect(out_$i82, 0);
    goto corral_source_split_4916;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    out_$i82 := $sext.i32.i64(out_$i81);
    goto corral_source_split_4915;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    out_$i81 := $zext.i1.i32(out_$i80);
    goto corral_source_split_4914;

  $bb38:
    assume {:verifier.code 0} true;
    out_$i80 := $ne.i32(out_$i74, 0);
    goto corral_source_split_4913;

  $bb37:
    assume !(out_$i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    goto $bb38;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 830} warn_slowpath_null(.str.29, 871);
    goto corral_source_split_4911;

  $bb36:
    assume out_$i79 == 1;
    goto corral_source_split_4910;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    out_$i79 := $ne.i64(out_$i78, 0);
    goto corral_source_split_4908;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 828} out_$i78 := ldv__builtin_expect(out_$i77, 0);
    call {:si_unique_call 829} {:cexpr "tmp___3"} boogie_si_record_i64(out_$i78);
    goto corral_source_split_4907;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    out_$i77 := $sext.i32.i64(out_$i76);
    goto corral_source_split_4906;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    out_$i76 := $zext.i1.i32(out_$i75);
    goto corral_source_split_4905;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    out_$i75 := $ne.i32(out_$i74, 0);
    goto corral_source_split_4904;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    out_$i74 := $zext.i1.i32(out_$i73);
    call {:si_unique_call 827} {:cexpr "__ret_warn_on___0"} boogie_si_record_i32(out_$i74);
    goto corral_source_split_4903;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    out_$i73 := $ne.i32(out_$i72, 0);
    goto corral_source_split_4902;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    out_$i72 := $load.i32($M.0, out_$p71);
    goto corral_source_split_4901;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref(out_$p65, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_4900;

  $bb34:
    assume out_$i70 == 1;
    goto corral_source_split_4899;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    out_$i70 := $eq.i32(out_$i69, 0);
    goto corral_source_split_4897;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    out_$i69 := $load.i32($M.0, out_$p68);
    goto corral_source_split_4896;

  $bb33:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref(out_$p65, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_4895;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    goto $bb33;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    out_$i100 := $eq.i32(out_$i99, 0);
    goto corral_source_split_4955;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    out_$i99 := $zext.i8.i32(out_$i98);
    goto corral_source_split_4954;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    out_$i98 := $load.i8($M.0, out_$p97);
    goto corral_source_split_4953;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    out_$p97 := $add.ref($add.ref(out_$p65, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_4952;

  $bb51:
    assume !(out_$i96 == 1);
    goto corral_source_split_4951;

  $bb47:
    assume {:verifier.code 0} true;
    assume !(out_$i92 == 1);
    goto $bb48;

  $bb53:
    assume {:verifier.code 0} true;
    assume !(out_$i100 == 1);
    goto $bb48;

  $bb64:
    assume !(out_$i123 == 1);
    goto corral_source_split_4982;

  $bb59:
    assume {:verifier.code 0} true;
    assume !(out_$i116 == 1);
    goto $bb60;

  $bb62:
    assume {:verifier.code 0} true;
    assume !(out_$i117 == 1);
    goto $bb60;

  $bb71_dummy:
    call {:si_unique_call 1} out_$p68, out_$i69, out_$i70, out_$p71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$p84, out_$i85, out_$i86, out_$p87, out_$i88, out_$i89, out_$p90, out_$i91, out_$i92, out_$p93, out_$i94, out_$i95, out_$i96, out_$p97, out_$i98, out_$i99, out_$i100, out_$p101, out_$p102, out_$p103, out_$i104, out_$p105, out_$p106, out_$p107, out_$p108, out_$i109, out_$i110, out_$p111, out_$p112, out_$p113, out_$i114, out_$i115, out_$i116, out_$i117, out_$p118, out_$p119, out_$p120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$p130, out_$p131, out_$p132, out_$p133, out_$p134, out_$i135, out_$i136, out_$p65, out_$i66, out_$i67, out_vslice_dummy_var_54 := enqueue_qtds_loop_$bb32(in_$p0, in_$p1, in_$p2, in_$p36, in_$i37, in_$i53, in_$i63, out_$p68, out_$i69, out_$i70, out_$p71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$p84, out_$i85, out_$i86, out_$p87, out_$i88, out_$i89, out_$p90, out_$i91, out_$i92, out_$p93, out_$i94, out_$i95, out_$i96, out_$p97, out_$i98, out_$i99, out_$i100, out_$p101, out_$p102, out_$p103, out_$i104, out_$p105, out_$p106, out_$p107, out_$p108, out_$i109, out_$i110, out_$p111, out_$p112, out_$p113, out_$i114, out_$i115, out_$i116, out_$i117, out_$p118, out_$p119, out_$p120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$p130, out_$p131, out_$p132, out_$p133, out_$p134, out_$i135, out_$i136, out_$p65, out_$i66, out_$i67, out_vslice_dummy_var_54);
    return;

  exit:
    return;
}



procedure enqueue_qtds_loop_$bb32(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p36: ref, in_$i37: i32, in_$i53: i32, in_$i63: i64, in_$p68: ref, in_$i69: i32, in_$i70: i1, in_$p71: ref, in_$i72: i32, in_$i73: i1, in_$i74: i32, in_$i75: i1, in_$i76: i32, in_$i77: i64, in_$i78: i64, in_$i79: i1, in_$i80: i1, in_$i81: i32, in_$i82: i64, in_$p84: ref, in_$i85: i64, in_$i86: i1, in_$p87: ref, in_$i88: i32, in_$i89: i1, in_$p90: ref, in_$i91: i64, in_$i92: i1, in_$p93: ref, in_$i94: i8, in_$i95: i32, in_$i96: i1, in_$p97: ref, in_$i98: i8, in_$i99: i32, in_$i100: i1, in_$p101: ref, in_$p102: ref, in_$p103: ref, in_$i104: i32, in_$p105: ref, in_$p106: ref, in_$p107: ref, in_$p108: ref, in_$i109: i64, in_$i110: i32, in_$p111: ref, in_$p112: ref, in_$p113: ref, in_$i114: i32, in_$i115: i1, in_$i116: i1, in_$i117: i1, in_$p118: ref, in_$p119: ref, in_$p120: ref, in_$i121: i32, in_$i122: i32, in_$i123: i1, in_$i124: i32, in_$i125: i32, in_$i126: i1, in_$i127: i32, in_$i128: i32, in_$p130: ref, in_$p131: ref, in_$p132: ref, in_$p133: ref, in_$p134: ref, in_$i135: i64, in_$i136: i1, in_$p65: ref, in_$i66: i32, in_$i67: i32, in_vslice_dummy_var_54: i64) returns (out_$p68: ref, out_$i69: i32, out_$i70: i1, out_$p71: ref, out_$i72: i32, out_$i73: i1, out_$i74: i32, out_$i75: i1, out_$i76: i32, out_$i77: i64, out_$i78: i64, out_$i79: i1, out_$i80: i1, out_$i81: i32, out_$i82: i64, out_$p84: ref, out_$i85: i64, out_$i86: i1, out_$p87: ref, out_$i88: i32, out_$i89: i1, out_$p90: ref, out_$i91: i64, out_$i92: i1, out_$p93: ref, out_$i94: i8, out_$i95: i32, out_$i96: i1, out_$p97: ref, out_$i98: i8, out_$i99: i32, out_$i100: i1, out_$p101: ref, out_$p102: ref, out_$p103: ref, out_$i104: i32, out_$p105: ref, out_$p106: ref, out_$p107: ref, out_$p108: ref, out_$i109: i64, out_$i110: i32, out_$p111: ref, out_$p112: ref, out_$p113: ref, out_$i114: i32, out_$i115: i1, out_$i116: i1, out_$i117: i1, out_$p118: ref, out_$p119: ref, out_$p120: ref, out_$i121: i32, out_$i122: i32, out_$i123: i1, out_$i124: i32, out_$i125: i32, out_$i126: i1, out_$i127: i32, out_$i128: i32, out_$p130: ref, out_$p131: ref, out_$p132: ref, out_$p133: ref, out_$p134: ref, out_$i135: i64, out_$i136: i1, out_$p65: ref, out_$i66: i32, out_$i67: i32, out_vslice_dummy_var_54: i64);
  modifies $M.36, $M.0, $M.1, $M.32, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.30, $M.38, $M.40, $M.23, $M.22, $M.25, $M.24, $M.27, $M.26, $M.29, $M.28, $CurrAddr, $M.2, $M.4, $M.6, $M.8, $M.3, $M.5, $M.7, $M.9, assertsPassed;



implementation mem_writes8_loop_$bb15(in_$i34: i32, in_$p35: ref, in_$i36: i32, in_$p37: ref, in_$p38: ref, in_$i39: i1, in_$p31: ref, in_$i32: i32, in_$p33: ref, in_$p40: ref, in_$i41: i32, in_$p42: ref) returns (out_$i34: i32, out_$p35: ref, out_$i36: i32, out_$p37: ref, out_$p38: ref, out_$i39: i1, out_$p31: ref, out_$i32: i32, out_$p33: ref, out_$p40: ref, out_$i41: i32, out_$p42: ref)
{

  entry:
    out_$i34, out_$p35, out_$i36, out_$p37, out_$p38, out_$i39, out_$p31, out_$i32, out_$p33, out_$p40, out_$i41, out_$p42 := in_$i34, in_$p35, in_$i36, in_$p37, in_$p38, in_$i39, in_$p31, in_$i32, in_$p33, in_$p40, in_$i41, in_$p42;
    goto $bb15, exit;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6328;

  $bb17:
    assume out_$i39 == 1;
    assume {:verifier.code 0} true;
    out_$p31, out_$i32, out_$p33 := out_$p38, out_$i36, out_$p37;
    goto $bb17_dummy;

  corral_source_split_6336:
    assume {:verifier.code 0} true;
    out_$p40, out_$i41, out_$p42 := out_$p37, out_$i36, out_$p38;
    assume true;
    goto $bb17;

  corral_source_split_6335:
    assume {:verifier.code 0} true;
    out_$i39 := $ugt.i32(out_$i36, 3);
    goto corral_source_split_6336;

  corral_source_split_6334:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref(out_$p31, $mul.ref(1, 4));
    goto corral_source_split_6335;

  corral_source_split_6333:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref(out_$p33, $mul.ref(1, 4));
    goto corral_source_split_6334;

  corral_source_split_6332:
    assume {:verifier.code 0} true;
    out_$i36 := $sub.i32(out_$i32, 4);
    call {:si_unique_call 849} {:cexpr "bytes"} boogie_si_record_i32(out_$i36);
    goto corral_source_split_6333;

  corral_source_split_6331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 848} __writel(out_$i34, out_$p35);
    goto corral_source_split_6332;

  corral_source_split_6330:
    assume {:verifier.code 0} true;
    out_$p35 := $bitcast.ref.ref(out_$p31);
    goto corral_source_split_6331;

  $bb16:
    assume {:verifier.code 0} true;
    out_$i34 := $load.i32($M.0, out_$p33);
    goto corral_source_split_6330;

  corral_source_split_6328:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb17_dummy:
    call {:si_unique_call 1} out_$i34, out_$p35, out_$i36, out_$p37, out_$p38, out_$i39, out_$p31, out_$i32, out_$p33, out_$p40, out_$i41, out_$p42 := mem_writes8_loop_$bb15(out_$i34, out_$p35, out_$i36, out_$p37, out_$p38, out_$i39, out_$p31, out_$i32, out_$p33, out_$p40, out_$i41, out_$p42);
    return;

  exit:
    return;
}



procedure mem_writes8_loop_$bb15(in_$i34: i32, in_$p35: ref, in_$i36: i32, in_$p37: ref, in_$p38: ref, in_$i39: i1, in_$p31: ref, in_$i32: i32, in_$p33: ref, in_$p40: ref, in_$i41: i32, in_$p42: ref) returns (out_$i34: i32, out_$p35: ref, out_$i36: i32, out_$p37: ref, out_$p38: ref, out_$i39: i1, out_$p31: ref, out_$i32: i32, out_$p33: ref, out_$p40: ref, out_$i41: i32, out_$p42: ref);



implementation mem_writes8_loop_$bb6(in_$i15: i32, in_$p16: ref, in_$i17: i32, in_$p18: ref, in_$p19: ref, in_$i20: i1, in_$p12: ref, in_$i13: i32, in_$p14: ref, in_$p21: ref, in_$i22: i32, in_$p23: ref) returns (out_$i15: i32, out_$p16: ref, out_$i17: i32, out_$p18: ref, out_$p19: ref, out_$i20: i1, out_$p12: ref, out_$i13: i32, out_$p14: ref, out_$p21: ref, out_$i22: i32, out_$p23: ref)
{

  entry:
    out_$i15, out_$p16, out_$i17, out_$p18, out_$p19, out_$i20, out_$p12, out_$i13, out_$p14, out_$p21, out_$i22, out_$p23 := in_$i15, in_$p16, in_$i17, in_$p18, in_$p19, in_$i20, in_$p12, in_$i13, in_$p14, in_$p21, in_$i22, in_$p23;
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6311;

  $bb8:
    assume out_$i20 == 1;
    assume {:verifier.code 0} true;
    out_$p12, out_$i13, out_$p14 := out_$p19, out_$i17, out_$p18;
    goto $bb8_dummy;

  corral_source_split_6319:
    assume {:verifier.code 0} true;
    out_$p21, out_$i22, out_$p23 := out_$p18, out_$i17, out_$p19;
    assume true;
    goto $bb8;

  corral_source_split_6318:
    assume {:verifier.code 0} true;
    out_$i20 := $ugt.i32(out_$i17, 3);
    goto corral_source_split_6319;

  corral_source_split_6317:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref(out_$p12, $mul.ref(1, 4));
    goto corral_source_split_6318;

  corral_source_split_6316:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref(out_$p14, $mul.ref(1, 4));
    goto corral_source_split_6317;

  corral_source_split_6315:
    assume {:verifier.code 0} true;
    out_$i17 := $sub.i32(out_$i13, 4);
    call {:si_unique_call 847} {:cexpr "bytes"} boogie_si_record_i32(out_$i17);
    goto corral_source_split_6316;

  corral_source_split_6314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 846} __writel(out_$i15, out_$p16);
    goto corral_source_split_6315;

  corral_source_split_6313:
    assume {:verifier.code 0} true;
    out_$p16 := $bitcast.ref.ref(out_$p12);
    goto corral_source_split_6314;

  $bb7:
    assume {:verifier.code 0} true;
    out_$i15 := $load.i32($M.0, out_$p14);
    goto corral_source_split_6313;

  corral_source_split_6311:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb8_dummy:
    call {:si_unique_call 1} out_$i15, out_$p16, out_$i17, out_$p18, out_$p19, out_$i20, out_$p12, out_$i13, out_$p14, out_$p21, out_$i22, out_$p23 := mem_writes8_loop_$bb6(out_$i15, out_$p16, out_$i17, out_$p18, out_$p19, out_$i20, out_$p12, out_$i13, out_$p14, out_$p21, out_$i22, out_$p23);
    return;

  exit:
    return;
}



procedure mem_writes8_loop_$bb6(in_$i15: i32, in_$p16: ref, in_$i17: i32, in_$p18: ref, in_$p19: ref, in_$i20: i1, in_$p12: ref, in_$i13: i32, in_$p14: ref, in_$p21: ref, in_$i22: i32, in_$p23: ref) returns (out_$i15: i32, out_$p16: ref, out_$i17: i32, out_$p18: ref, out_$p19: ref, out_$i20: i1, out_$p12: ref, out_$i13: i32, out_$p14: ref, out_$p21: ref, out_$i22: i32, out_$p23: ref);



implementation bank_reads8_loop_$bb30(in_$i58: i8, in_$p59: ref, in_$p60: ref, in_$i61: i32, in_$i62: i1, in_$p55: ref, in_$p56: ref, in_$i57: i32) returns (out_$i58: i8, out_$p59: ref, out_$p60: ref, out_$i61: i32, out_$i62: i1, out_$p55: ref, out_$p56: ref, out_$i57: i32)
{

  entry:
    out_$i58, out_$p59, out_$p60, out_$i61, out_$i62, out_$p55, out_$p56, out_$i57 := in_$i58, in_$p59, in_$p60, in_$i61, in_$i62, in_$p55, in_$p56, in_$i57;
    goto $bb30, exit;

  $bb30:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7526;

  $bb32:
    assume out_$i62 == 1;
    assume {:verifier.code 0} true;
    out_$p55, out_$p56, out_$i57 := out_$p59, out_$p60, out_$i61;
    goto $bb32_dummy;

  corral_source_split_7533:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32;

  corral_source_split_7532:
    assume {:verifier.code 0} true;
    out_$i62 := $ne.i32(out_$i61, 0);
    goto corral_source_split_7533;

  corral_source_split_7531:
    assume {:verifier.code 0} true;
    out_$i61 := $sub.i32(out_$i57, 1);
    call {:si_unique_call 976} {:cexpr "bytes"} boogie_si_record_i32(out_$i61);
    goto corral_source_split_7532;

  corral_source_split_7530:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref(out_$p56, $mul.ref(1, 1));
    goto corral_source_split_7531;

  corral_source_split_7529:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref(out_$p55, $mul.ref(1, 1));
    goto corral_source_split_7530;

  corral_source_split_7528:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p55, out_$i58);
    goto corral_source_split_7529;

  $bb31:
    assume {:verifier.code 0} true;
    out_$i58 := $load.i8($M.38, out_$p56);
    goto corral_source_split_7528;

  corral_source_split_7526:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb32_dummy:
    call {:si_unique_call 1} out_$i58, out_$p59, out_$p60, out_$i61, out_$i62, out_$p55, out_$p56, out_$i57 := bank_reads8_loop_$bb30(out_$i58, out_$p59, out_$p60, out_$i61, out_$i62, out_$p55, out_$p56, out_$i57);
    return;

  exit:
    return;
}



procedure bank_reads8_loop_$bb30(in_$i58: i8, in_$p59: ref, in_$p60: ref, in_$i61: i32, in_$i62: i1, in_$p55: ref, in_$p56: ref, in_$i57: i32) returns (out_$i58: i8, out_$p59: ref, out_$p60: ref, out_$i61: i32, out_$i62: i1, out_$p55: ref, out_$p56: ref, out_$i57: i32);
  modifies $M.0;



implementation bank_reads8_loop_$bb15(in_$p37: ref, in_$i38: i32, in_$i39: i32, in_$p40: ref, in_$p41: ref, in_$i42: i1, in_$p34: ref, in_$p35: ref, in_$i36: i32, in_$i43: i32, in_$p44: ref, in_$p45: ref) returns (out_$p37: ref, out_$i38: i32, out_$i39: i32, out_$p40: ref, out_$p41: ref, out_$i42: i1, out_$p34: ref, out_$p35: ref, out_$i36: i32, out_$i43: i32, out_$p44: ref, out_$p45: ref)
{

  entry:
    out_$p37, out_$i38, out_$i39, out_$p40, out_$p41, out_$i42, out_$p34, out_$p35, out_$i36, out_$i43, out_$p44, out_$p45 := in_$p37, in_$i38, in_$i39, in_$p40, in_$p41, in_$i42, in_$p34, in_$p35, in_$i36, in_$i43, in_$p44, in_$p45;
    goto $bb15, exit;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7495;

  $bb17:
    assume out_$i42 == 1;
    assume {:verifier.code 0} true;
    out_$p34, out_$p35, out_$i36 := out_$p40, out_$p41, out_$i39;
    goto $bb17_dummy;

  corral_source_split_7503:
    assume {:verifier.code 0} true;
    out_$i43, out_$p44, out_$p45 := out_$i39, out_$p41, out_$p40;
    assume true;
    goto $bb17;

  corral_source_split_7502:
    assume {:verifier.code 0} true;
    out_$i42 := $ugt.i32(out_$i39, 3);
    goto corral_source_split_7503;

  corral_source_split_7501:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref(out_$p35, $mul.ref(1, 4));
    goto corral_source_split_7502;

  corral_source_split_7500:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref(out_$p34, $mul.ref(1, 4));
    goto corral_source_split_7501;

  corral_source_split_7499:
    assume {:verifier.code 0} true;
    out_$i39 := $sub.i32(out_$i36, 4);
    call {:si_unique_call 973} {:cexpr "bytes"} boogie_si_record_i32(out_$i39);
    goto corral_source_split_7500;

  corral_source_split_7498:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p35, out_$i38);
    goto corral_source_split_7499;

  SeqInstr_219:
    goto corral_source_split_7498;

  SeqInstr_218:
    assume assertsPassed;
    goto SeqInstr_219;

  corral_source_split_7497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 972} out_$i38 := __readl(out_$p37);
    goto SeqInstr_218;

  $bb16:
    assume {:verifier.code 0} true;
    out_$p37 := $bitcast.ref.ref(out_$p34);
    goto corral_source_split_7497;

  corral_source_split_7495:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb17_dummy:
    call {:si_unique_call 1} out_$p37, out_$i38, out_$i39, out_$p40, out_$p41, out_$i42, out_$p34, out_$p35, out_$i36, out_$i43, out_$p44, out_$p45 := bank_reads8_loop_$bb15(out_$p37, out_$i38, out_$i39, out_$p40, out_$p41, out_$i42, out_$p34, out_$p35, out_$i36, out_$i43, out_$p44, out_$p45);
    return;

  exit:
    return;
}



procedure bank_reads8_loop_$bb15(in_$p37: ref, in_$i38: i32, in_$i39: i32, in_$p40: ref, in_$p41: ref, in_$i42: i1, in_$p34: ref, in_$p35: ref, in_$i36: i32, in_$i43: i32, in_$p44: ref, in_$p45: ref) returns (out_$p37: ref, out_$i38: i32, out_$i39: i32, out_$p40: ref, out_$p41: ref, out_$i42: i1, out_$p34: ref, out_$p35: ref, out_$i36: i32, out_$i43: i32, out_$p44: ref, out_$p45: ref);
  modifies $M.0, $M.1, $M.32, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.30, $M.38, $M.36, $M.40, $M.23, $M.22, $M.25, $M.24, $M.27, $M.26, $M.29, $M.28, $CurrAddr, $M.2, $M.4, $M.6, $M.8, $M.3, $M.5, $M.7, $M.9, assertsPassed;



implementation bank_reads8_loop_$bb6(in_$p18: ref, in_$i19: i32, in_$i20: i32, in_$p21: ref, in_$p22: ref, in_$i23: i1, in_$p15: ref, in_$p16: ref, in_$i17: i32, in_$i24: i32, in_$p25: ref, in_$p26: ref) returns (out_$p18: ref, out_$i19: i32, out_$i20: i32, out_$p21: ref, out_$p22: ref, out_$i23: i1, out_$p15: ref, out_$p16: ref, out_$i17: i32, out_$i24: i32, out_$p25: ref, out_$p26: ref)
{

  entry:
    out_$p18, out_$i19, out_$i20, out_$p21, out_$p22, out_$i23, out_$p15, out_$p16, out_$i17, out_$i24, out_$p25, out_$p26 := in_$p18, in_$i19, in_$i20, in_$p21, in_$p22, in_$i23, in_$p15, in_$p16, in_$i17, in_$i24, in_$p25, in_$p26;
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7478;

  $bb8:
    assume out_$i23 == 1;
    assume {:verifier.code 0} true;
    out_$p15, out_$p16, out_$i17 := out_$p21, out_$p22, out_$i20;
    goto $bb8_dummy;

  corral_source_split_7486:
    assume {:verifier.code 0} true;
    out_$i24, out_$p25, out_$p26 := out_$i20, out_$p22, out_$p21;
    assume true;
    goto $bb8;

  corral_source_split_7485:
    assume {:verifier.code 0} true;
    out_$i23 := $ugt.i32(out_$i20, 3);
    goto corral_source_split_7486;

  corral_source_split_7484:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref(out_$p16, $mul.ref(1, 4));
    goto corral_source_split_7485;

  corral_source_split_7483:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref(out_$p15, $mul.ref(1, 4));
    goto corral_source_split_7484;

  corral_source_split_7482:
    assume {:verifier.code 0} true;
    out_$i20 := $sub.i32(out_$i17, 4);
    call {:si_unique_call 971} {:cexpr "bytes"} boogie_si_record_i32(out_$i20);
    goto corral_source_split_7483;

  corral_source_split_7481:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p16, out_$i19);
    goto corral_source_split_7482;

  SeqInstr_216:
    goto corral_source_split_7481;

  SeqInstr_215:
    assume assertsPassed;
    goto SeqInstr_216;

  corral_source_split_7480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 970} out_$i19 := __readl(out_$p18);
    goto SeqInstr_215;

  $bb7:
    assume {:verifier.code 0} true;
    out_$p18 := $bitcast.ref.ref(out_$p15);
    goto corral_source_split_7480;

  corral_source_split_7478:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb8_dummy:
    call {:si_unique_call 1} out_$p18, out_$i19, out_$i20, out_$p21, out_$p22, out_$i23, out_$p15, out_$p16, out_$i17, out_$i24, out_$p25, out_$p26 := bank_reads8_loop_$bb6(out_$p18, out_$i19, out_$i20, out_$p21, out_$p22, out_$i23, out_$p15, out_$p16, out_$i17, out_$i24, out_$p25, out_$p26);
    return;

  exit:
    return;
}



procedure bank_reads8_loop_$bb6(in_$p18: ref, in_$i19: i32, in_$i20: i32, in_$p21: ref, in_$p22: ref, in_$i23: i1, in_$p15: ref, in_$p16: ref, in_$i17: i32, in_$i24: i32, in_$p25: ref, in_$p26: ref) returns (out_$p18: ref, out_$i19: i32, out_$i20: i32, out_$p21: ref, out_$p22: ref, out_$i23: i1, out_$p15: ref, out_$p16: ref, out_$i17: i32, out_$i24: i32, out_$p25: ref, out_$p26: ref);
  modifies $M.0, $M.1, $M.32, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.30, $M.38, $M.36, $M.40, $M.23, $M.22, $M.25, $M.24, $M.27, $M.26, $M.29, $M.28, $CurrAddr, $M.2, $M.4, $M.6, $M.8, $M.3, $M.5, $M.7, $M.9, assertsPassed;



implementation handshake_loop_$bb4(in_$i1: i32, in_$i2: i32, in_$i3: i32, in_$p5: ref, in_$i11: i32, in_$p12: ref, in_$i13: i32, in_$i14: i1, in_$i9: i32, in_$i10: i32, in_$i16: i32, in_$i17: i1, in_$i18: i32, in_$i19: i1) returns (out_$i11: i32, out_$p12: ref, out_$i13: i32, out_$i14: i1, out_$i9: i32, out_$i10: i32, out_$i16: i32, out_$i17: i1, out_$i18: i32, out_$i19: i1)
{

  entry:
    out_$i11, out_$p12, out_$i13, out_$i14, out_$i9, out_$i10, out_$i16, out_$i17, out_$i18, out_$i19 := in_$i11, in_$p12, in_$i13, in_$i14, in_$i9, in_$i10, in_$i16, in_$i17, in_$i18, in_$i19;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb7:
    assume !(out_$i14 == 1);
    assume {:verifier.code 0} true;
    out_$i9, out_$i10 := out_$i13, out_$i11;
    goto $bb7_dummy;

  corral_source_split_7612:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7;

  corral_source_split_7611:
    assume {:verifier.code 0} true;
    out_$i14 := $eq.i32(out_$i13, $sub.i32(0, 1));
    goto corral_source_split_7612;

  SeqInstr_234:
    call {:si_unique_call 996} {:cexpr "result"} boogie_si_record_i32(out_$i13);
    goto corral_source_split_7611;

  SeqInstr_233:
    assume assertsPassed;
    goto SeqInstr_234;

  corral_source_split_7610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 995} out_$i13 := reg_read32(out_$p12, in_$i1);
    goto SeqInstr_233;

  corral_source_split_7609:
    assume {:verifier.code 0} true;
    out_$p12 := $load.ref($M.0, in_$p5);
    goto corral_source_split_7610;

  $bb5:
    assume out_$i19 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_7609;

  corral_source_split_7625:
    assume {:verifier.code 0} true;
    out_$i11 := out_$i18;
    assume true;
    goto $bb5;

  corral_source_split_7624:
    assume {:verifier.code 0} true;
    out_$i19 := $sgt.i32(out_$i18, 0);
    goto corral_source_split_7625;

  corral_source_split_7623:
    assume {:verifier.code 0} true;
    out_$i18 := $sub.i32(out_$i10, 1);
    call {:si_unique_call 999} {:cexpr "usec"} boogie_si_record_i32(out_$i18);
    goto corral_source_split_7624;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 998} __const_udelay(4295);
    goto corral_source_split_7623;

  $bb11:
    assume !(out_$i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_7619:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_7618:
    assume {:verifier.code 0} true;
    out_$i17 := $eq.i32(out_$i16, in_$i3);
    goto corral_source_split_7619;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i16 := $and.i32(out_$i9, in_$i2);
    call {:si_unique_call 997} {:cexpr "result"} boogie_si_record_i32(out_$i16);
    goto corral_source_split_7618;

  $bb7_dummy:
    call {:si_unique_call 1} out_$i11, out_$p12, out_$i13, out_$i14, out_$i9, out_$i10, out_$i16, out_$i17, out_$i18, out_$i19 := handshake_loop_$bb4(in_$i1, in_$i2, in_$i3, in_$p5, out_$i11, out_$p12, out_$i13, out_$i14, out_$i9, out_$i10, out_$i16, out_$i17, out_$i18, out_$i19);
    return;

  exit:
    return;
}



procedure handshake_loop_$bb4(in_$i1: i32, in_$i2: i32, in_$i3: i32, in_$p5: ref, in_$i11: i32, in_$p12: ref, in_$i13: i32, in_$i14: i1, in_$i9: i32, in_$i10: i32, in_$i16: i32, in_$i17: i1, in_$i18: i32, in_$i19: i1) returns (out_$i11: i32, out_$p12: ref, out_$i13: i32, out_$i14: i1, out_$i9: i32, out_$i10: i32, out_$i16: i32, out_$i17: i1, out_$i18: i32, out_$i19: i1);
  modifies $M.1, $M.0, $M.32, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.30, $M.38, $M.36, $M.40, $M.23, $M.22, $M.25, $M.24, $M.27, $M.26, $M.29, $M.28, $CurrAddr, $M.2, $M.4, $M.6, $M.8, $M.3, $M.5, $M.7, $M.9, assertsPassed;



implementation dequeue_urb_from_qtd_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p4: ref, in_$i8: i64, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$i16: i64, in_$i17: i1, in_$i18: i32, in_$p20: ref, in_$i21: i32, in_$i22: i1, in_$i23: i32, in_$i24: i32, in_$i25: i1, in_$p26: ref, in_$i27: i32, in_$i28: i1, in_$i29: i32, in_$p30: ref, in_$i31: i32, in_$i32: i1, in_$p33: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$i40: i64, in_$i41: i1, in_$i11: i32, in_$p12: ref, in_$i42: i32) returns (out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$i16: i64, out_$i17: i1, out_$i18: i32, out_$p20: ref, out_$i21: i32, out_$i22: i1, out_$i23: i32, out_$i24: i32, out_$i25: i1, out_$p26: ref, out_$i27: i32, out_$i28: i1, out_$i29: i32, out_$p30: ref, out_$i31: i32, out_$i32: i1, out_$p33: ref, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$i40: i64, out_$i41: i1, out_$i11: i32, out_$p12: ref, out_$i42: i32)
{

  entry:
    out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$i18, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29, out_$p30, out_$i31, out_$i32, out_$p33, out_$p35, out_$p36, out_$p37, out_$p38, out_$p39, out_$i40, out_$i41, out_$i11, out_$p12, out_$i42 := in_$p13, in_$p14, in_$i15, in_$i16, in_$i17, in_$i18, in_$p20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$p26, in_$i27, in_$i28, in_$i29, in_$p30, in_$i31, in_$i32, in_$p33, in_$p35, in_$p36, in_$p37, in_$p38, in_$p39, in_$i40, in_$i41, in_$i11, in_$p12, in_$i42;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7713;

  $bb22:
    assume out_$i41 == 1;
    assume {:verifier.code 0} true;
    out_$i11, out_$p12 := out_$i29, out_$p38;
    goto $bb22_dummy;

  corral_source_split_7763:
    assume {:verifier.code 0} true;
    out_$i42 := out_$i29;
    assume true;
    goto $bb22;

  corral_source_split_7762:
    assume {:verifier.code 0} true;
    out_$i41 := $ne.i64(out_$i40, in_$i8);
    goto corral_source_split_7763;

  corral_source_split_7761:
    assume {:verifier.code 0} true;
    out_$i40 := $p2i.ref.i64(out_$p39);
    goto corral_source_split_7762;

  corral_source_split_7760:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(out_$p37, $mul.ref($sub.ref(0, 24), 72)), $mul.ref(24, 1));
    goto corral_source_split_7761;

  corral_source_split_7759:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref(out_$p37, $mul.ref($sub.ref(0, 24), 72));
    goto corral_source_split_7760;

  corral_source_split_7758:
    assume {:verifier.code 0} true;
    out_$p37 := $bitcast.ref.ref(out_$p36);
    goto corral_source_split_7759;

  corral_source_split_7757:
    assume {:verifier.code 0} true;
    out_$p36 := $load.ref($M.0, out_$p35);
    goto corral_source_split_7758;

  corral_source_split_7756:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_7757;

  corral_source_split_7755:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p33, 4);
    goto corral_source_split_7756;

  $bb21:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(out_$p12, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_7755;

  $bb20:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_7753:
    assume {:verifier.code 0} true;
    goto $bb21;

  SeqInstr_237:
    goto corral_source_split_7753;

  SeqInstr_236:
    assume assertsPassed;
    goto SeqInstr_237;

  corral_source_split_7752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1026} kill_transfer(in_$p0, in_$p4, in_$p1);
    goto SeqInstr_236;

  $bb19:
    assume out_$i32 == 1;
    goto corral_source_split_7752;

  corral_source_split_7750:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_7749:
    assume {:verifier.code 0} true;
    out_$i32 := $eq.i32(out_$i31, 2);
    goto corral_source_split_7750;

  corral_source_split_7748:
    assume {:verifier.code 0} true;
    out_$i31 := $load.i32($M.0, out_$p30);
    goto corral_source_split_7749;

  corral_source_split_7747:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(out_$p12, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_7748;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_7747;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i29 := out_$i23;
    goto $bb18;

  corral_source_split_7745:
    assume {:verifier.code 0} true;
    out_$i29 := 0;
    goto $bb18;

  $bb16:
    assume out_$i28 == 1;
    goto corral_source_split_7745;

  corral_source_split_7743:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_7742:
    assume {:verifier.code 0} true;
    out_$i28 := $ugt.i32(out_$i27, 2);
    goto corral_source_split_7743;

  corral_source_split_7741:
    assume {:verifier.code 0} true;
    out_$i27 := $load.i32($M.0, out_$p26);
    goto corral_source_split_7742;

  corral_source_split_7740:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(out_$p12, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_7741;

  $bb13:
    assume out_$i25 == 1;
    goto corral_source_split_7740;

  corral_source_split_7738:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_7737:
    assume {:verifier.code 0} true;
    out_$i25 := $ne.i32(out_$i24, 0);
    goto corral_source_split_7738;

  corral_source_split_7736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1024} out_$i24 := last_qtd_of_urb(out_$p12, in_$p1);
    call {:si_unique_call 1025} {:cexpr "tmp"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_7737;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_7736;

  $bb11:
    assume !(out_$i22 == 1);
    assume {:verifier.code 0} true;
    out_$i23 := out_$i11;
    goto $bb12;

  corral_source_split_7734:
    assume {:verifier.code 0} true;
    out_$i23 := 1;
    goto $bb12;

  $bb10:
    assume out_$i22 == 1;
    goto corral_source_split_7734;

  corral_source_split_7732:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_7731:
    assume {:verifier.code 0} true;
    out_$i22 := $ugt.i32(out_$i21, 1);
    goto corral_source_split_7732;

  corral_source_split_7730:
    assume {:verifier.code 0} true;
    out_$i21 := $load.i32($M.0, out_$p20);
    goto corral_source_split_7731;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(out_$p12, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_7730;

  $bb7:
    assume !(out_$i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_7719:
    assume {:verifier.code 0} true;
    out_$i18 := out_$i11;
    assume true;
    goto $bb7;

  corral_source_split_7718:
    assume {:verifier.code 0} true;
    out_$i17 := $ne.i64(out_$i15, out_$i16);
    goto corral_source_split_7719;

  corral_source_split_7717:
    assume {:verifier.code 0} true;
    out_$i16 := $p2i.ref.i64(in_$p4);
    goto corral_source_split_7718;

  corral_source_split_7716:
    assume {:verifier.code 0} true;
    out_$i15 := $p2i.ref.i64(out_$p14);
    goto corral_source_split_7717;

  corral_source_split_7715:
    assume {:verifier.code 0} true;
    out_$p14 := $load.ref($M.0, out_$p13);
    goto corral_source_split_7716;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(out_$p12, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_7715;

  corral_source_split_7713:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb14:
    assume {:verifier.code 0} true;
    assume !(out_$i25 == 1);
    goto $bb15;

  $bb17:
    assume {:verifier.code 0} true;
    assume !(out_$i28 == 1);
    goto $bb15;

  $bb22_dummy:
    call {:si_unique_call 1} out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$i18, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29, out_$p30, out_$i31, out_$i32, out_$p33, out_$p35, out_$p36, out_$p37, out_$p38, out_$p39, out_$i40, out_$i41, out_$i11, out_$p12, out_$i42 := dequeue_urb_from_qtd_loop_$bb4(in_$p0, in_$p1, in_$p4, in_$i8, out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$i18, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29, out_$p30, out_$i31, out_$i32, out_$p33, out_$p35, out_$p36, out_$p37, out_$p38, out_$p39, out_$i40, out_$i41, out_$i11, out_$p12, out_$i42);
    return;

  exit:
    return;
}



procedure dequeue_urb_from_qtd_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p4: ref, in_$i8: i64, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$i16: i64, in_$i17: i1, in_$i18: i32, in_$p20: ref, in_$i21: i32, in_$i22: i1, in_$i23: i32, in_$i24: i32, in_$i25: i1, in_$p26: ref, in_$i27: i32, in_$i28: i1, in_$i29: i32, in_$p30: ref, in_$i31: i32, in_$i32: i1, in_$p33: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$i40: i64, in_$i41: i1, in_$i11: i32, in_$p12: ref, in_$i42: i32) returns (out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$i16: i64, out_$i17: i1, out_$i18: i32, out_$p20: ref, out_$i21: i32, out_$i22: i1, out_$i23: i32, out_$i24: i32, out_$i25: i1, out_$p26: ref, out_$i27: i32, out_$i28: i1, out_$i29: i32, out_$p30: ref, out_$i31: i32, out_$i32: i1, out_$p33: ref, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$i40: i64, out_$i41: i1, out_$i11: i32, out_$p12: ref, out_$i42: i32);
  modifies $M.0, $M.1, $M.32, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.30, $M.38, $M.36, $M.40, $M.23, $M.22, $M.25, $M.24, $M.27, $M.26, $M.29, $M.28, $CurrAddr, $M.2, $M.4, $M.6, $M.8, $M.3, $M.5, $M.7, $M.9, assertsPassed;



implementation packetize_urb_loop_$bb26(in_$p1: ref, in_$p2: ref, in_$i3: i32, in_$i65: i8, in_$p69: ref, in_$i70: i32, in_$p71: ref, in_$i72: i64, in_$i73: i32, in_$p74: ref, in_$i75: i32, in_$i76: i64, in_$p77: ref, in_$i78: i1, in_$p79: ref, in_$i80: i64, in_$i81: i1) returns (out_$p69: ref, out_$i70: i32, out_$p71: ref, out_$i72: i64, out_$i73: i32, out_$p74: ref, out_$i75: i32, out_$i76: i64, out_$p77: ref, out_$i78: i1, out_$p79: ref, out_$i80: i64, out_$i81: i1)
{

  entry:
    out_$p69, out_$i70, out_$p71, out_$i72, out_$i73, out_$p74, out_$i75, out_$i76, out_$p77, out_$i78, out_$p79, out_$i80, out_$i81 := in_$p69, in_$i70, in_$p71, in_$i72, in_$i73, in_$p74, in_$i75, in_$i76, in_$p77, in_$i78, in_$p79, in_$i80, in_$i81;
    goto $bb26, exit;

  $bb26:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb33:
    assume !(out_$i81 == 1);
    assume {:verifier.code 0} true;
    out_$p69, out_$i70, out_$p71 := out_$p79, out_$i75, out_$p77;
    goto $bb33_dummy;

  corral_source_split_7981:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33;

  corral_source_split_7980:
    assume {:verifier.code 0} true;
    out_$i81 := $eq.i64(out_$i80, 0);
    goto corral_source_split_7981;

  corral_source_split_7979:
    assume {:verifier.code 0} true;
    out_$i80 := $p2i.ref.i64(out_$p79);
    goto corral_source_split_7980;

  SeqInstr_252:
    goto corral_source_split_7979;

  SeqInstr_251:
    assume assertsPassed;
    goto SeqInstr_252;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1067} out_$p79 := qtd_alloc(in_$i3, in_$p1, in_$i65);
    goto SeqInstr_251;

  $bb30:
    assume !(out_$i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_7971:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30;

  corral_source_split_7970:
    assume {:verifier.code 0} true;
    out_$i78 := $sle.i32(out_$i75, 0);
    goto corral_source_split_7971;

  corral_source_split_7969:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref(out_$p71, $mul.ref(out_$i76, 1));
    goto corral_source_split_7970;

  corral_source_split_7968:
    assume {:verifier.code 0} true;
    out_$i76 := $sext.i32.i64(out_$i73);
    goto corral_source_split_7969;

  corral_source_split_7967:
    assume {:verifier.code 0} true;
    out_$i75 := $sub.i32(out_$i70, out_$i73);
    call {:si_unique_call 1066} {:cexpr "len"} boogie_si_record_i32(out_$i75);
    goto corral_source_split_7968;

  corral_source_split_7966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1065} list_add_tail(out_$p74, in_$p2);
    goto corral_source_split_7967;

  corral_source_split_7965:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref(out_$p69, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_7966;

  corral_source_split_7964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1063} out_$i73 := qtd_fill(out_$p69, out_$p71, out_$i72);
    call {:si_unique_call 1064} {:cexpr "this_qtd_len"} boogie_si_record_i32(out_$i73);
    goto corral_source_split_7965;

  $bb28:
    assume {:verifier.code 0} true;
    out_$i72 := $sext.i32.i64(out_$i70);
    goto corral_source_split_7964;

  $bb33_dummy:
    call {:si_unique_call 1} out_$p69, out_$i70, out_$p71, out_$i72, out_$i73, out_$p74, out_$i75, out_$i76, out_$p77, out_$i78, out_$p79, out_$i80, out_$i81 := packetize_urb_loop_$bb26(in_$p1, in_$p2, in_$i3, in_$i65, out_$p69, out_$i70, out_$p71, out_$i72, out_$i73, out_$p74, out_$i75, out_$i76, out_$p77, out_$i78, out_$p79, out_$i80, out_$i81);
    return;

  exit:
    return;
}



procedure packetize_urb_loop_$bb26(in_$p1: ref, in_$p2: ref, in_$i3: i32, in_$i65: i8, in_$p69: ref, in_$i70: i32, in_$p71: ref, in_$i72: i64, in_$i73: i32, in_$p74: ref, in_$i75: i32, in_$i76: i64, in_$p77: ref, in_$i78: i1, in_$p79: ref, in_$i80: i64, in_$i81: i1) returns (out_$p69: ref, out_$i70: i32, out_$p71: ref, out_$i72: i64, out_$i73: i32, out_$p74: ref, out_$i75: i32, out_$i76: i64, out_$p77: ref, out_$i78: i1, out_$p79: ref, out_$i80: i64, out_$i81: i1);
  modifies $M.0, assertsPassed;



implementation qtd_list_free_loop_$bb4(in_$i12: i64, in_$p16: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$i24: i1, in_$p14: ref, in_$p15: ref) returns (out_$p16: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$i24: i1, out_$p14: ref, out_$p15: ref)
{

  entry:
    out_$p16, out_$p18, out_$p19, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$p14, out_$p15 := in_$p16, in_$p18, in_$p19, in_$p20, in_$p21, in_$p22, in_$i23, in_$i24, in_$p14, in_$p15;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8060;

  $bb6:
    assume out_$i24 == 1;
    assume {:verifier.code 0} true;
    out_$p14, out_$p15 := out_$p21, out_$p14;
    goto $bb6_dummy;

  corral_source_split_8071:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_8070:
    assume {:verifier.code 0} true;
    out_$i24 := $ne.i64(out_$i23, in_$i12);
    goto corral_source_split_8071;

  corral_source_split_8069:
    assume {:verifier.code 0} true;
    out_$i23 := $p2i.ref.i64(out_$p22);
    goto corral_source_split_8070;

  corral_source_split_8068:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(out_$p14, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_8069;

  corral_source_split_8067:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref(out_$p20, $mul.ref($sub.ref(0, 24), 72));
    goto corral_source_split_8068;

  corral_source_split_8066:
    assume {:verifier.code 0} true;
    out_$p20 := $bitcast.ref.ref(out_$p19);
    goto corral_source_split_8067;

  corral_source_split_8065:
    assume {:verifier.code 0} true;
    out_$p19 := $load.ref($M.0, out_$p18);
    goto corral_source_split_8066;

  corral_source_split_8064:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref($add.ref(out_$p14, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_8065;

  corral_source_split_8063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1073} qtd_free(out_$p15);
    goto corral_source_split_8064;

  corral_source_split_8062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1072} list_del(out_$p16);
    goto corral_source_split_8063;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(out_$p15, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_8062;

  corral_source_split_8060:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p16, out_$p18, out_$p19, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$p14, out_$p15 := qtd_list_free_loop_$bb4(in_$i12, out_$p16, out_$p18, out_$p19, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$p14, out_$p15);
    return;

  exit:
    return;
}



procedure qtd_list_free_loop_$bb4(in_$i12: i64, in_$p16: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$i24: i1, in_$p14: ref, in_$p15: ref) returns (out_$p16: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$i24: i1, out_$p14: ref, out_$p15: ref);



implementation handle_done_ptds_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p27: ref, in_$p28: ref, in_$i29: i32, in_$i30: i1, in_$p31: ref, in_$i32: i32, in_$i33: i64, in_$i34: i64, in_$i35: i32, in_$p36: ref, in_$i37: i32, in_$i38: i32, in_$i39: i32, in_$i40: i32, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$i44: i64, in_$p46: ref, in_$p47: ref, in_$i48: i64, in_$i49: i1, in_$i50: i1, in_$i51: i32, in_$i52: i64, in_$i53: i64, in_$i54: i1, in_$i55: i1, in_$i56: i32, in_$i57: i64, in_$p59: ref, in_$p60: ref, in_$i61: i64, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$i67: i32, in_$p72: ref, in_$i73: i32, in_$i74: i64, in_$i75: i64, in_$i76: i32, in_$p77: ref, in_$i78: i32, in_$i79: i32, in_$i80: i32, in_$i81: i32, in_$p82: ref, in_$p83: ref, in_$p84: ref, in_$i85: i64, in_$p87: ref, in_$p88: ref, in_$i89: i64, in_$i90: i1, in_$i91: i1, in_$i92: i32, in_$i93: i64, in_$i94: i64, in_$i95: i1, in_$i96: i1, in_$i97: i32, in_$i98: i64, in_$p100: ref, in_$p101: ref, in_$i102: i64, in_$p104: ref, in_$p105: ref, in_$p106: ref, in_$p107: ref, in_$i108: i32, in_$i68: i32, in_$i69: i32, in_$p70: ref, in_$i71: i32, in_$i109: i64, in_$p111: ref, in_$p112: ref, in_$i113: i64, in_$p115: ref, in_$i116: i64, in_$p118: ref, in_$p119: ref, in_$i120: i64, in_$p122: ref, in_$p123: ref, in_$p124: ref, in_$i125: i32, in_$i126: i1, in_$i127: i32, in_$i128: i1, in_$i129: i32, in_$i130: i64, in_$i131: i64, in_$i132: i1, in_$i133: i1, in_$i134: i32, in_$i135: i64, in_$i137: i1, in_$i138: i1, in_$i139: i1, in_$i140: i1, in_$p141: ref, in_$p142: ref, in_$p143: ref, in_$i144: i32, in_$i145: i32, in_$i146: i1, in_$p147: ref, in_$p148: ref, in_$p149: ref, in_$p150: ref, in_$p151: ref, in_$i152: i32, in_$i153: i1, in_$p154: ref, in_$i155: i32, in_$i156: i64, in_$i157: i64, in_$p158: ref, in_$p159: ref, in_$i160: i32, in_$i161: i64, in_$i162: i64, in_$p163: ref, in_$p164: ref, in_$p165: ref, in_$p166: ref, in_$i167: i32, in_$i168: i1, in_$i170: i32, in_$i171: i1, in_$p174: ref, in_$p175: ref, in_$p176: ref, in_$p177: ref, in_$p172: ref, in_$p169: ref, in_$p178: ref, in_$i179: i32, in_$i180: i32, in_$i181: i32, in_$p182: ref, in_$p183: ref, in_$i184: i32, in_$i185: i32, in_$i186: i32, in_$p187: ref, in_$p189: ref, in_$p190: ref, in_$i191: i32, in_$i192: i32, in_$p193: ref, in_$p194: ref, in_$i195: i32, in_$i196: i32, in_$p197: ref, in_$p198: ref, in_$i199: i32, in_$p200: ref, in_$i201: i32, in_$i202: i32, in_$i203: i32, in_$i204: i32, in_$i205: i32, in_$p206: ref, in_$p207: ref, in_$i208: i32, in_$i209: i32, in_$p210: ref, in_$p211: ref, in_$i212: i32, in_$i213: i32, in_$p214: ref, in_$p215: ref, in_$i216: i32, in_$i217: i32, in_$i218: i32, in_$p219: ref, in_$p220: ref, in_$i221: i32, in_$i222: i32, in_$i223: i32, in_$p224: ref, in_$p225: ref, in_$p226: ref, in_$p227: ref, in_$p228: ref, in_$p229: ref, in_$p230: ref, in_$i231: i32, in_$i232: i1, in_$p233: ref, in_$p234: ref, in_$p235: ref, in_$i236: i32, in_$i237: i1, in_$p238: ref, in_$p239: ref, in_$p240: ref, in_$i241: i32, in_$i242: i1, in_$p243: ref, in_$p244: ref, in_$p245: ref, in_$i246: i32, in_$i247: i1, in_$p248: ref, in_$p249: ref, in_$p250: ref, in_$i251: i1, in_$i252: i32, in_$i253: i64, in_$i254: i64, in_$i255: i1, in_$i256: i1, in_$i257: i32, in_$i258: i64, in_$p188: ref, in_$i260: i64, in_$i261: i1, in_$p262: ref, in_$i263: i32, in_$i264: i1, in_$p265: ref, in_$p266: ref, in_$i267: i64, in_$i268: i64, in_$i269: i1, in_$i270: i1, in_$p272: ref, in_$p273: ref, in_$i274: i1, in_$i275: i1, in_$p276: ref, in_$i277: i32, in_$i278: i1, in_$i279: i32, in_$i280: i1, in_vslice_dummy_var_72: i64, in_vslice_dummy_var_73: i64, in_vslice_dummy_var_74: i64, in_vslice_dummy_var_75: i64) returns (out_$p28: ref, out_$i29: i32, out_$i30: i1, out_$p31: ref, out_$i32: i32, out_$i33: i64, out_$i34: i64, out_$i35: i32, out_$p36: ref, out_$i37: i32, out_$i38: i32, out_$i39: i32, out_$i40: i32, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$i44: i64, out_$p46: ref, out_$p47: ref, out_$i48: i64, out_$i49: i1, out_$i50: i1, out_$i51: i32, out_$i52: i64, out_$i53: i64, out_$i54: i1, out_$i55: i1, out_$i56: i32, out_$i57: i64, out_$p59: ref, out_$p60: ref, out_$i61: i64, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$i67: i32, out_$p72: ref, out_$i73: i32, out_$i74: i64, out_$i75: i64, out_$i76: i32, out_$p77: ref, out_$i78: i32, out_$i79: i32, out_$i80: i32, out_$i81: i32, out_$p82: ref, out_$p83: ref, out_$p84: ref, out_$i85: i64, out_$p87: ref, out_$p88: ref, out_$i89: i64, out_$i90: i1, out_$i91: i1, out_$i92: i32, out_$i93: i64, out_$i94: i64, out_$i95: i1, out_$i96: i1, out_$i97: i32, out_$i98: i64, out_$p100: ref, out_$p101: ref, out_$i102: i64, out_$p104: ref, out_$p105: ref, out_$p106: ref, out_$p107: ref, out_$i108: i32, out_$i68: i32, out_$i69: i32, out_$p70: ref, out_$i71: i32, out_$i109: i64, out_$p111: ref, out_$p112: ref, out_$i113: i64, out_$p115: ref, out_$i116: i64, out_$p118: ref, out_$p119: ref, out_$i120: i64, out_$p122: ref, out_$p123: ref, out_$p124: ref, out_$i125: i32, out_$i126: i1, out_$i127: i32, out_$i128: i1, out_$i129: i32, out_$i130: i64, out_$i131: i64, out_$i132: i1, out_$i133: i1, out_$i134: i32, out_$i135: i64, out_$i137: i1, out_$i138: i1, out_$i139: i1, out_$i140: i1, out_$p141: ref, out_$p142: ref, out_$p143: ref, out_$i144: i32, out_$i145: i32, out_$i146: i1, out_$p147: ref, out_$p148: ref, out_$p149: ref, out_$p150: ref, out_$p151: ref, out_$i152: i32, out_$i153: i1, out_$p154: ref, out_$i155: i32, out_$i156: i64, out_$i157: i64, out_$p158: ref, out_$p159: ref, out_$i160: i32, out_$i161: i64, out_$i162: i64, out_$p163: ref, out_$p164: ref, out_$p165: ref, out_$p166: ref, out_$i167: i32, out_$i168: i1, out_$i170: i32, out_$i171: i1, out_$p174: ref, out_$p175: ref, out_$p176: ref, out_$p177: ref, out_$p172: ref, out_$p169: ref, out_$p178: ref, out_$i179: i32, out_$i180: i32, out_$i181: i32, out_$p182: ref, out_$p183: ref, out_$i184: i32, out_$i185: i32, out_$i186: i32, out_$p187: ref, out_$p189: ref, out_$p190: ref, out_$i191: i32, out_$i192: i32, out_$p193: ref, out_$p194: ref, out_$i195: i32, out_$i196: i32, out_$p197: ref, out_$p198: ref, out_$i199: i32, out_$p200: ref, out_$i201: i32, out_$i202: i32, out_$i203: i32, out_$i204: i32, out_$i205: i32, out_$p206: ref, out_$p207: ref, out_$i208: i32, out_$i209: i32, out_$p210: ref, out_$p211: ref, out_$i212: i32, out_$i213: i32, out_$p214: ref, out_$p215: ref, out_$i216: i32, out_$i217: i32, out_$i218: i32, out_$p219: ref, out_$p220: ref, out_$i221: i32, out_$i222: i32, out_$i223: i32, out_$p224: ref, out_$p225: ref, out_$p226: ref, out_$p227: ref, out_$p228: ref, out_$p229: ref, out_$p230: ref, out_$i231: i32, out_$i232: i1, out_$p233: ref, out_$p234: ref, out_$p235: ref, out_$i236: i32, out_$i237: i1, out_$p238: ref, out_$p239: ref, out_$p240: ref, out_$i241: i32, out_$i242: i1, out_$p243: ref, out_$p244: ref, out_$p245: ref, out_$i246: i32, out_$i247: i1, out_$p248: ref, out_$p249: ref, out_$p250: ref, out_$i251: i1, out_$i252: i32, out_$i253: i64, out_$i254: i64, out_$i255: i1, out_$i256: i1, out_$i257: i32, out_$i258: i64, out_$p188: ref, out_$i260: i64, out_$i261: i1, out_$p262: ref, out_$i263: i32, out_$i264: i1, out_$p265: ref, out_$p266: ref, out_$i267: i64, out_$i268: i64, out_$i269: i1, out_$i270: i1, out_$p272: ref, out_$p273: ref, out_$i274: i1, out_$i275: i1, out_$p276: ref, out_$i277: i32, out_$i278: i1, out_$i279: i32, out_$i280: i1, out_vslice_dummy_var_72: i64, out_vslice_dummy_var_73: i64, out_vslice_dummy_var_74: i64, out_vslice_dummy_var_75: i64)
{

  entry:
    out_$p28, out_$i29, out_$i30, out_$p31, out_$i32, out_$i33, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$p41, out_$p42, out_$p43, out_$i44, out_$p46, out_$p47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$p59, out_$p60, out_$i61, out_$p63, out_$p64, out_$p65, out_$p66, out_$i67, out_$p72, out_$i73, out_$i74, out_$i75, out_$i76, out_$p77, out_$i78, out_$i79, out_$i80, out_$i81, out_$p82, out_$p83, out_$p84, out_$i85, out_$p87, out_$p88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$p100, out_$p101, out_$i102, out_$p104, out_$p105, out_$p106, out_$p107, out_$i108, out_$i68, out_$i69, out_$p70, out_$i71, out_$i109, out_$p111, out_$p112, out_$i113, out_$p115, out_$i116, out_$p118, out_$p119, out_$i120, out_$p122, out_$p123, out_$p124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i137, out_$i138, out_$i139, out_$i140, out_$p141, out_$p142, out_$p143, out_$i144, out_$i145, out_$i146, out_$p147, out_$p148, out_$p149, out_$p150, out_$p151, out_$i152, out_$i153, out_$p154, out_$i155, out_$i156, out_$i157, out_$p158, out_$p159, out_$i160, out_$i161, out_$i162, out_$p163, out_$p164, out_$p165, out_$p166, out_$i167, out_$i168, out_$i170, out_$i171, out_$p174, out_$p175, out_$p176, out_$p177, out_$p172, out_$p169, out_$p178, out_$i179, out_$i180, out_$i181, out_$p182, out_$p183, out_$i184, out_$i185, out_$i186, out_$p187, out_$p189, out_$p190, out_$i191, out_$i192, out_$p193, out_$p194, out_$i195, out_$i196, out_$p197, out_$p198, out_$i199, out_$p200, out_$i201, out_$i202, out_$i203, out_$i204, out_$i205, out_$p206, out_$p207, out_$i208, out_$i209, out_$p210, out_$p211, out_$i212, out_$i213, out_$p214, out_$p215, out_$i216, out_$i217, out_$i218, out_$p219, out_$p220, out_$i221, out_$i222, out_$i223, out_$p224, out_$p225, out_$p226, out_$p227, out_$p228, out_$p229, out_$p230, out_$i231, out_$i232, out_$p233, out_$p234, out_$p235, out_$i236, out_$i237, out_$p238, out_$p239, out_$p240, out_$i241, out_$i242, out_$p243, out_$p244, out_$p245, out_$i246, out_$i247, out_$p248, out_$p249, out_$p250, out_$i251, out_$i252, out_$i253, out_$i254, out_$i255, out_$i256, out_$i257, out_$i258, out_$p188, out_$i260, out_$i261, out_$p262, out_$i263, out_$i264, out_$p265, out_$p266, out_$i267, out_$i268, out_$i269, out_$i270, out_$p272, out_$p273, out_$i274, out_$i275, out_$p276, out_$i277, out_$i278, out_$i279, out_$i280, out_vslice_dummy_var_72, out_vslice_dummy_var_73, out_vslice_dummy_var_74, out_vslice_dummy_var_75 := in_$p28, in_$i29, in_$i30, in_$p31, in_$i32, in_$i33, in_$i34, in_$i35, in_$p36, in_$i37, in_$i38, in_$i39, in_$i40, in_$p41, in_$p42, in_$p43, in_$i44, in_$p46, in_$p47, in_$i48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i57, in_$p59, in_$p60, in_$i61, in_$p63, in_$p64, in_$p65, in_$p66, in_$i67, in_$p72, in_$i73, in_$i74, in_$i75, in_$i76, in_$p77, in_$i78, in_$i79, in_$i80, in_$i81, in_$p82, in_$p83, in_$p84, in_$i85, in_$p87, in_$p88, in_$i89, in_$i90, in_$i91, in_$i92, in_$i93, in_$i94, in_$i95, in_$i96, in_$i97, in_$i98, in_$p100, in_$p101, in_$i102, in_$p104, in_$p105, in_$p106, in_$p107, in_$i108, in_$i68, in_$i69, in_$p70, in_$i71, in_$i109, in_$p111, in_$p112, in_$i113, in_$p115, in_$i116, in_$p118, in_$p119, in_$i120, in_$p122, in_$p123, in_$p124, in_$i125, in_$i126, in_$i127, in_$i128, in_$i129, in_$i130, in_$i131, in_$i132, in_$i133, in_$i134, in_$i135, in_$i137, in_$i138, in_$i139, in_$i140, in_$p141, in_$p142, in_$p143, in_$i144, in_$i145, in_$i146, in_$p147, in_$p148, in_$p149, in_$p150, in_$p151, in_$i152, in_$i153, in_$p154, in_$i155, in_$i156, in_$i157, in_$p158, in_$p159, in_$i160, in_$i161, in_$i162, in_$p163, in_$p164, in_$p165, in_$p166, in_$i167, in_$i168, in_$i170, in_$i171, in_$p174, in_$p175, in_$p176, in_$p177, in_$p172, in_$p169, in_$p178, in_$i179, in_$i180, in_$i181, in_$p182, in_$p183, in_$i184, in_$i185, in_$i186, in_$p187, in_$p189, in_$p190, in_$i191, in_$i192, in_$p193, in_$p194, in_$i195, in_$i196, in_$p197, in_$p198, in_$i199, in_$p200, in_$i201, in_$i202, in_$i203, in_$i204, in_$i205, in_$p206, in_$p207, in_$i208, in_$i209, in_$p210, in_$p211, in_$i212, in_$i213, in_$p214, in_$p215, in_$i216, in_$i217, in_$i218, in_$p219, in_$p220, in_$i221, in_$i222, in_$i223, in_$p224, in_$p225, in_$p226, in_$p227, in_$p228, in_$p229, in_$p230, in_$i231, in_$i232, in_$p233, in_$p234, in_$p235, in_$i236, in_$i237, in_$p238, in_$p239, in_$p240, in_$i241, in_$i242, in_$p243, in_$p244, in_$p245, in_$i246, in_$i247, in_$p248, in_$p249, in_$p250, in_$i251, in_$i252, in_$i253, in_$i254, in_$i255, in_$i256, in_$i257, in_$i258, in_$p188, in_$i260, in_$i261, in_$p262, in_$i263, in_$i264, in_$p265, in_$p266, in_$i267, in_$i268, in_$i269, in_$i270, in_$p272, in_$p273, in_$i274, in_$i275, in_$p276, in_$i277, in_$i278, in_$i279, in_$i280, in_vslice_dummy_var_72, in_vslice_dummy_var_73, in_vslice_dummy_var_74, in_vslice_dummy_var_75;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    out_$p276 := $add.ref($add.ref(in_$p2, $mul.ref(0, 2384)), $mul.ref(1632, 1));
    goto corral_source_split_8246;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb13_dummy;

  corral_source_split_8554:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_8366:
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_8311:
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_8310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1125} out_vslice_dummy_var_72 := ldv__builtin_expect(out_$i57, 0);
    goto corral_source_split_8311;

  corral_source_split_8309:
    assume {:verifier.code 0} true;
    out_$i57 := $sext.i32.i64(out_$i56);
    goto corral_source_split_8310;

  corral_source_split_8308:
    assume {:verifier.code 0} true;
    out_$i56 := $zext.i1.i32(out_$i55);
    goto corral_source_split_8309;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i55 := $ne.i32(1, 0);
    goto corral_source_split_8308;

  $bb11:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_8306:
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_8305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1124} warn_slowpath_null(.str.29, 1098);
    goto corral_source_split_8306;

  $bb10:
    assume out_$i54 == 1;
    goto corral_source_split_8305;

  corral_source_split_8303:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_8302:
    assume {:verifier.code 0} true;
    out_$i54 := $ne.i64(out_$i53, 0);
    goto corral_source_split_8303;

  corral_source_split_8301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1122} out_$i53 := ldv__builtin_expect(out_$i52, 0);
    call {:si_unique_call 1123} {:cexpr "tmp___3"} boogie_si_record_i64(out_$i53);
    goto corral_source_split_8302;

  corral_source_split_8300:
    assume {:verifier.code 0} true;
    out_$i52 := $sext.i32.i64(out_$i51);
    goto corral_source_split_8301;

  corral_source_split_8299:
    assume {:verifier.code 0} true;
    out_$i51 := $zext.i1.i32(out_$i50);
    goto corral_source_split_8300;

  corral_source_split_8298:
    assume {:verifier.code 0} true;
    out_$i50 := $ne.i32(1, 0);
    goto corral_source_split_8299;

  $bb8:
    assume out_$i49 == 1;
    goto corral_source_split_8298;

  corral_source_split_8274:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_8273:
    assume {:verifier.code 0} true;
    out_$i49 := $eq.i64(out_$i48, 0);
    goto corral_source_split_8274;

  corral_source_split_8272:
    assume {:verifier.code 0} true;
    out_$i48 := $p2i.ref.i64(out_$p47);
    goto corral_source_split_8273;

  corral_source_split_8271:
    assume {:verifier.code 0} true;
    out_$p47 := $load.ref($M.0, out_$p46);
    goto corral_source_split_8272;

  corral_source_split_8270:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(out_$p43, $mul.ref(out_$i44, 24)), $mul.ref(0, 1));
    goto corral_source_split_8271;

  corral_source_split_8269:
    assume {:verifier.code 0} true;
    goto corral_source_split_8270;

  corral_source_split_8268:
    assume {:verifier.code 0} true;
    out_$i44 := $sext.i32.i64(out_$i35);
    goto corral_source_split_8269;

  corral_source_split_8267:
    assume {:verifier.code 0} true;
    out_$p43 := $bitcast.ref.ref(out_$p42);
    goto corral_source_split_8268;

  corral_source_split_8266:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(in_$p2, $mul.ref(0, 2384)), $mul.ref(864, 1));
    goto corral_source_split_8267;

  corral_source_split_8265:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p41, out_$i40);
    goto corral_source_split_8266;

  corral_source_split_8264:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(in_$p2, $mul.ref(0, 2384)), $mul.ref(1632, 1));
    goto corral_source_split_8265;

  corral_source_split_8263:
    assume {:verifier.code 0} true;
    out_$i40 := $and.i32(out_$i37, out_$i39);
    goto corral_source_split_8264;

  corral_source_split_8262:
    assume {:verifier.code 0} true;
    out_$i39 := $xor.i32(out_$i38, $sub.i32(0, 1));
    goto corral_source_split_8263;

  corral_source_split_8261:
    assume {:verifier.code 0} true;
    out_$i38 := $shl.i32(1, out_$i35);
    goto corral_source_split_8262;

  corral_source_split_8260:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i32($M.0, out_$p36);
    goto corral_source_split_8261;

  corral_source_split_8259:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(in_$p2, $mul.ref(0, 2384)), $mul.ref(1632, 1));
    goto corral_source_split_8260;

  corral_source_split_8258:
    assume {:verifier.code 0} true;
    out_$i35 := $trunc.i64.i32(out_$i34);
    call {:si_unique_call 1118} {:cexpr "slot"} boogie_si_record_i32(out_$i35);
    goto corral_source_split_8259;

  corral_source_split_8257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1116} out_$i34 := __ffs(out_$i33);
    call {:si_unique_call 1117} {:cexpr "tmp___2"} boogie_si_record_i64(out_$i34);
    goto corral_source_split_8258;

  corral_source_split_8256:
    assume {:verifier.code 0} true;
    out_$i33 := $sext.i32.i64(out_$i32);
    goto corral_source_split_8257;

  corral_source_split_8255:
    assume {:verifier.code 0} true;
    out_$i32 := $load.i32($M.0, out_$p31);
    goto corral_source_split_8256;

  corral_source_split_8254:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(in_$p2, $mul.ref(0, 2384)), $mul.ref(1632, 1));
    goto corral_source_split_8255;

  $bb6:
    assume out_$i30 == 1;
    goto corral_source_split_8254;

  corral_source_split_8252:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_8251:
    assume {:verifier.code 0} true;
    out_$i30 := $ne.i32(out_$i29, 0);
    goto corral_source_split_8252;

  corral_source_split_8250:
    assume {:verifier.code 0} true;
    out_$i29 := $load.i32($M.0, out_$p28);
    goto corral_source_split_8251;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(in_$p2, $mul.ref(0, 2384)), $mul.ref(1632, 1));
    goto corral_source_split_8250;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb84:
    assume {:verifier.code 0} true;
    assume out_$i280 == 1;
    goto $bb82;

  $bb81:
    assume {:verifier.code 0} true;
    assume out_$i278 == 1;
    goto $bb82;

  corral_source_split_8248:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb83;

  corral_source_split_8247:
    assume {:verifier.code 0} true;
    out_$i278 := $ne.i32(out_$i277, 0);
    goto corral_source_split_8248;

  corral_source_split_8246:
    assume {:verifier.code 0} true;
    out_$i277 := $load.i32($M.0, out_$p276);
    goto corral_source_split_8247;

  corral_source_split_8591:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84;

  corral_source_split_8590:
    assume {:verifier.code 0} true;
    out_$i280 := $ne.i32(out_$i279, 0);
    goto corral_source_split_8591;

  corral_source_split_8589:
    assume {:verifier.code 0} true;
    out_$i279 := $load.i32($M.0, in_$p27);
    goto corral_source_split_8590;

  $bb83:
    assume !(out_$i278 == 1);
    goto corral_source_split_8589;

  corral_source_split_8365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1135} out_vslice_dummy_var_73 := ldv__builtin_expect(out_$i98, 0);
    goto corral_source_split_8366;

  corral_source_split_8364:
    assume {:verifier.code 0} true;
    out_$i98 := $sext.i32.i64(out_$i97);
    goto corral_source_split_8365;

  corral_source_split_8363:
    assume {:verifier.code 0} true;
    out_$i97 := $zext.i1.i32(out_$i96);
    goto corral_source_split_8364;

  $bb20:
    assume {:verifier.code 0} true;
    out_$i96 := $ne.i32(1, 0);
    goto corral_source_split_8363;

  $bb19:
    assume !(out_$i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_8361:
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_8360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1134} warn_slowpath_null(.str.29, 1113);
    goto corral_source_split_8361;

  $bb18:
    assume out_$i95 == 1;
    goto corral_source_split_8360;

  corral_source_split_8358:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_8357:
    assume {:verifier.code 0} true;
    out_$i95 := $ne.i64(out_$i94, 0);
    goto corral_source_split_8358;

  corral_source_split_8356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1132} out_$i94 := ldv__builtin_expect(out_$i93, 0);
    call {:si_unique_call 1133} {:cexpr "tmp___5"} boogie_si_record_i64(out_$i94);
    goto corral_source_split_8357;

  corral_source_split_8355:
    assume {:verifier.code 0} true;
    out_$i93 := $sext.i32.i64(out_$i92);
    goto corral_source_split_8356;

  corral_source_split_8354:
    assume {:verifier.code 0} true;
    out_$i92 := $zext.i1.i32(out_$i91);
    goto corral_source_split_8355;

  corral_source_split_8353:
    assume {:verifier.code 0} true;
    out_$i91 := $ne.i32(1, 0);
    goto corral_source_split_8354;

  $bb16:
    assume out_$i90 == 1;
    goto corral_source_split_8353;

  corral_source_split_8296:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_8295:
    assume {:verifier.code 0} true;
    out_$i90 := $eq.i64(out_$i89, 0);
    goto corral_source_split_8296;

  corral_source_split_8294:
    assume {:verifier.code 0} true;
    out_$i89 := $p2i.ref.i64(out_$p88);
    goto corral_source_split_8295;

  corral_source_split_8293:
    assume {:verifier.code 0} true;
    out_$p88 := $load.ref($M.0, out_$p87);
    goto corral_source_split_8294;

  corral_source_split_8292:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref($add.ref(out_$p84, $mul.ref(out_$i85, 24)), $mul.ref(0, 1));
    goto corral_source_split_8293;

  corral_source_split_8291:
    assume {:verifier.code 0} true;
    goto corral_source_split_8292;

  corral_source_split_8290:
    assume {:verifier.code 0} true;
    out_$i85 := $sext.i32.i64(out_$i76);
    goto corral_source_split_8291;

  corral_source_split_8289:
    assume {:verifier.code 0} true;
    out_$p84 := $bitcast.ref.ref(out_$p83);
    goto corral_source_split_8290;

  corral_source_split_8288:
    assume {:verifier.code 0} true;
    out_$p83 := $add.ref($add.ref(in_$p2, $mul.ref(0, 2384)), $mul.ref(88, 1));
    goto corral_source_split_8289;

  corral_source_split_8287:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p82, out_$i81);
    goto corral_source_split_8288;

  corral_source_split_8286:
    assume {:verifier.code 0} true;
    out_$p82 := $add.ref($add.ref(in_$p2, $mul.ref(0, 2384)), $mul.ref(856, 1));
    goto corral_source_split_8287;

  corral_source_split_8285:
    assume {:verifier.code 0} true;
    out_$i81 := $and.i32(out_$i78, out_$i80);
    goto corral_source_split_8286;

  corral_source_split_8284:
    assume {:verifier.code 0} true;
    out_$i80 := $xor.i32(out_$i79, $sub.i32(0, 1));
    goto corral_source_split_8285;

  corral_source_split_8283:
    assume {:verifier.code 0} true;
    out_$i79 := $shl.i32(1, out_$i76);
    goto corral_source_split_8284;

  corral_source_split_8282:
    assume {:verifier.code 0} true;
    out_$i78 := $load.i32($M.0, out_$p77);
    goto corral_source_split_8283;

  corral_source_split_8281:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref($add.ref(in_$p2, $mul.ref(0, 2384)), $mul.ref(856, 1));
    goto corral_source_split_8282;

  corral_source_split_8280:
    assume {:verifier.code 0} true;
    out_$i76 := $trunc.i64.i32(out_$i75);
    call {:si_unique_call 1121} {:cexpr "slot"} boogie_si_record_i32(out_$i76);
    goto corral_source_split_8281;

  corral_source_split_8279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1119} out_$i75 := __ffs(out_$i74);
    call {:si_unique_call 1120} {:cexpr "tmp___4"} boogie_si_record_i64(out_$i75);
    goto corral_source_split_8280;

  corral_source_split_8278:
    assume {:verifier.code 0} true;
    out_$i74 := $sext.i32.i64(out_$i73);
    goto corral_source_split_8279;

  corral_source_split_8277:
    assume {:verifier.code 0} true;
    out_$i73 := $load.i32($M.0, out_$p72);
    goto corral_source_split_8278;

  corral_source_split_8276:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref(in_$p2, $mul.ref(0, 2384)), $mul.ref(856, 1));
    goto corral_source_split_8277;

  $bb7:
    assume !(out_$i30 == 1);
    goto corral_source_split_8276;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb80;

  corral_source_split_8584:
    assume {:verifier.code 0} true;
    goto $bb80;

  SeqInstr_285:
    goto corral_source_split_8584;

  SeqInstr_284:
    assume assertsPassed;
    goto SeqInstr_285;

  $bb76:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1153} start_bus_transfer(in_$p0, out_$i71, out_$i68, out_$p70, out_$p188, out_$p119, in_$p1);
    goto SeqInstr_284;

  $bb79:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb74:
    assume !(out_$i274 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  corral_source_split_8582:
    assume {:verifier.code 0} true;
    goto $bb75;

  corral_source_split_8581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1152} create_ptd_int(out_$p119, out_$p188, in_$p1);
    goto corral_source_split_8582;

  $bb73:
    assume out_$i274 == 1;
    goto corral_source_split_8581;

  corral_source_split_8579:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb72:
    assume {:verifier.code 0} true;
    out_$i274 := $ne.i32(out_$i69, 2);
    goto corral_source_split_8579;

  $bb71:
    assume !(out_$i270 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  corral_source_split_8577:
    assume {:verifier.code 0} true;
    goto $bb72;

  corral_source_split_8576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1151} dev_err.ref.ref.ref(out_$p273, .str.30, .str.31);
    goto corral_source_split_8577;

  corral_source_split_8575:
    assume {:verifier.code 0} true;
    out_$p273 := $load.ref($M.0, out_$p272);
    goto corral_source_split_8576;

  corral_source_split_8574:
    assume {:verifier.code 0} true;
    out_$p272 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 968)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_8575;

  $bb70:
    assume out_$i270 == 1;
    goto corral_source_split_8574;

  corral_source_split_8569:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  corral_source_split_8568:
    assume {:verifier.code 0} true;
    out_$i270 := $eq.i32(out_$i69, 2);
    goto corral_source_split_8569;

  $bb68:
    assume out_$i269 == 1;
    goto corral_source_split_8568;

  corral_source_split_8566:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  corral_source_split_8565:
    assume {:verifier.code 0} true;
    out_$i269 := $eq.i64(out_$i267, out_$i268);
    goto corral_source_split_8566;

  corral_source_split_8564:
    assume {:verifier.code 0} true;
    out_$i268 := $p2i.ref.i64(out_$p70);
    goto corral_source_split_8565;

  corral_source_split_8563:
    assume {:verifier.code 0} true;
    out_$i267 := $p2i.ref.i64(out_$p266);
    goto corral_source_split_8564;

  corral_source_split_8562:
    assume {:verifier.code 0} true;
    out_$p266 := $bitcast.ref.ref(out_$p265);
    goto corral_source_split_8563;

  corral_source_split_8561:
    assume {:verifier.code 0} true;
    out_$p265 := $add.ref($add.ref(in_$p2, $mul.ref(0, 2384)), $mul.ref(864, 1));
    goto corral_source_split_8562;

  $bb66:
    assume out_$i264 == 1;
    goto corral_source_split_8561;

  corral_source_split_8559:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  corral_source_split_8558:
    assume {:verifier.code 0} true;
    out_$i264 := $eq.i32(out_$i263, 1);
    goto corral_source_split_8559;

  corral_source_split_8557:
    assume {:verifier.code 0} true;
    out_$i263 := $load.i32($M.0, out_$p262);
    goto corral_source_split_8558;

  corral_source_split_8556:
    assume {:verifier.code 0} true;
    out_$p262 := $add.ref($add.ref(out_$p188, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_8557;

  $bb63:
    assume out_$i261 == 1;
    goto corral_source_split_8556;

  corral_source_split_8509:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  corral_source_split_8508:
    assume {:verifier.code 0} true;
    out_$i261 := $ne.i64(out_$i260, 0);
    goto corral_source_split_8509;

  corral_source_split_8507:
    assume {:verifier.code 0} true;
    out_$i260 := $p2i.ref.i64(out_$p188);
    goto corral_source_split_8508;

  $bb47:
    assume {:verifier.code 0} true;
    goto corral_source_split_8507;

  corral_source_split_8540:
    assume {:verifier.code 0} true;
    out_$p188 := $0.ref;
    goto $bb47;

  corral_source_split_8429:
    assume {:verifier.code 0} true;
    out_$p188 := out_$p112;
    goto $bb47;

  corral_source_split_8498:
    assume {:verifier.code 0} true;
    out_$p188 := out_$p169;
    goto $bb47;

  corral_source_split_8497:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p187, out_$i186);
    goto corral_source_split_8498;

  corral_source_split_8496:
    assume {:verifier.code 0} true;
    out_$p187 := $add.ref($add.ref(out_$p119, $mul.ref(0, 48)), $mul.ref(36, 1));
    goto corral_source_split_8497;

  corral_source_split_8495:
    assume {:verifier.code 0} true;
    out_$i186 := $and.i32(out_$i185, 1);
    goto corral_source_split_8496;

  corral_source_split_8494:
    assume {:verifier.code 0} true;
    out_$i185 := $lshr.i32(out_$i184, 26);
    goto corral_source_split_8495;

  corral_source_split_8493:
    assume {:verifier.code 0} true;
    out_$i184 := $load.i32($M.0, out_$p183);
    goto corral_source_split_8494;

  corral_source_split_8492:
    assume {:verifier.code 0} true;
    out_$p183 := $add.ref($add.ref(in_$p1, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_8493;

  corral_source_split_8491:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p182, out_$i181);
    goto corral_source_split_8492;

  corral_source_split_8490:
    assume {:verifier.code 0} true;
    out_$p182 := $add.ref($add.ref(out_$p119, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_8491;

  corral_source_split_8489:
    assume {:verifier.code 0} true;
    out_$i181 := $and.i32(out_$i180, 1);
    goto corral_source_split_8490;

  corral_source_split_8488:
    assume {:verifier.code 0} true;
    out_$i180 := $lshr.i32(out_$i179, 25);
    goto corral_source_split_8489;

  corral_source_split_8487:
    assume {:verifier.code 0} true;
    out_$i179 := $load.i32($M.0, out_$p178);
    goto corral_source_split_8488;

  corral_source_split_8486:
    assume {:verifier.code 0} true;
    out_$p178 := $add.ref($add.ref(in_$p1, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_8487;

  $bb43:
    assume {:verifier.code 0} true;
    goto corral_source_split_8486;

  $bb46:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$p169 := out_$p172;
    goto $bb43;

  corral_source_split_8480:
    assume {:verifier.code 0} true;
    out_$p169 := $0.ref;
    goto $bb43;

  $bb41:
    assume out_$i168 == 1;
    goto corral_source_split_8480;

  corral_source_split_8478:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  corral_source_split_8477:
    assume {:verifier.code 0} true;
    out_$i168 := $ne.i32(out_$i167, 0);
    goto corral_source_split_8478;

  corral_source_split_8476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1141} out_$i167 := list_is_last(out_$p165, out_$p166);
    call {:si_unique_call 1142} {:cexpr "tmp___7"} boogie_si_record_i32(out_$i167);
    goto corral_source_split_8477;

  corral_source_split_8475:
    assume {:verifier.code 0} true;
    out_$p166 := $add.ref($add.ref(out_$p119, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_8476;

  corral_source_split_8474:
    assume {:verifier.code 0} true;
    out_$p165 := $add.ref($add.ref(out_$p112, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_8475;

  corral_source_split_8473:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p164, 3);
    goto corral_source_split_8474;

  $bb40:
    assume {:verifier.code 0} true;
    out_$p164 := $add.ref($add.ref(out_$p112, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_8473;

  corral_source_split_8463:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p163, out_$i162);
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_8471:
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_8470:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p158, out_$i157);
    goto corral_source_split_8471;

  corral_source_split_8469:
    assume {:verifier.code 0} true;
    out_$p158 := $add.ref($add.ref(out_$p112, $mul.ref(0, 72)), $mul.ref(56, 1));
    goto corral_source_split_8470;

  corral_source_split_8468:
    assume {:verifier.code 0} true;
    out_$i157 := $and.i64(out_$i156, 2047);
    goto corral_source_split_8469;

  corral_source_split_8467:
    assume {:verifier.code 0} true;
    out_$i156 := $zext.i32.i64(out_$i155);
    goto corral_source_split_8468;

  corral_source_split_8466:
    assume {:verifier.code 0} true;
    out_$i155 := $load.i32($M.0, out_$p154);
    goto corral_source_split_8467;

  corral_source_split_8465:
    assume {:verifier.code 0} true;
    out_$p154 := $add.ref($add.ref(in_$p1, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_8466;

  $bb38:
    assume out_$i153 == 1;
    goto corral_source_split_8465;

  corral_source_split_8457:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  corral_source_split_8456:
    assume {:verifier.code 0} true;
    out_$i153 := $ne.i32(out_$i152, 3);
    goto corral_source_split_8457;

  corral_source_split_8455:
    assume {:verifier.code 0} true;
    out_$i152 := $load.i32($M.0, out_$p151);
    goto corral_source_split_8456;

  corral_source_split_8454:
    assume {:verifier.code 0} true;
    out_$p151 := $add.ref($add.ref(out_$p150, $mul.ref(0, 2040)), $mul.ref(28, 1));
    goto corral_source_split_8455;

  corral_source_split_8453:
    assume {:verifier.code 0} true;
    out_$p150 := $load.ref($M.0, out_$p149);
    goto corral_source_split_8454;

  corral_source_split_8452:
    assume {:verifier.code 0} true;
    out_$p149 := $add.ref($add.ref(out_$p148, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_8453;

  corral_source_split_8451:
    assume {:verifier.code 0} true;
    out_$p148 := $load.ref($M.0, out_$p147);
    goto corral_source_split_8452;

  corral_source_split_8450:
    assume {:verifier.code 0} true;
    out_$p147 := $add.ref($add.ref(out_$p112, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_8451;

  $bb35:
    assume out_$i146 == 1;
    goto corral_source_split_8450;

  corral_source_split_8448:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  corral_source_split_8447:
    assume {:verifier.code 0} true;
    out_$i146 := $eq.i32(out_$i145, 1);
    goto corral_source_split_8448;

  corral_source_split_8446:
    assume {:verifier.code 0} true;
    out_$i145 := $lshr.i32(out_$i144, 30);
    goto corral_source_split_8447;

  corral_source_split_8445:
    assume {:verifier.code 0} true;
    out_$i144 := $load.i32($M.0, out_$p143);
    goto corral_source_split_8446;

  corral_source_split_8444:
    assume {:verifier.code 0} true;
    out_$p143 := $add.ref($add.ref(out_$p142, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_8445;

  corral_source_split_8443:
    assume {:verifier.code 0} true;
    out_$p142 := $load.ref($M.0, out_$p141);
    goto corral_source_split_8444;

  corral_source_split_8442:
    assume {:verifier.code 0} true;
    out_$p141 := $add.ref($add.ref(out_$p112, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_8443;

  $bb33:
    assume out_$i140 == 1;
    goto corral_source_split_8442;

  $bb26:
    assume out_$i137 == 1;
    assume {:verifier.code 0} true;
    out_$i140 := $eq.i32(out_$i69, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb25:
    assume {:verifier.code 0} true;
    out_$i137 := $slt.i32(out_$i69, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_8383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1140} out_vslice_dummy_var_74 := ldv__builtin_expect(out_$i135, 0);
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_8382:
    assume {:verifier.code 0} true;
    out_$i135 := $sext.i32.i64(out_$i134);
    goto corral_source_split_8383;

  corral_source_split_8381:
    assume {:verifier.code 0} true;
    out_$i134 := $zext.i1.i32(out_$i133);
    goto corral_source_split_8382;

  $bb24:
    assume {:verifier.code 0} true;
    out_$i133 := $ne.i32(out_$i127, 0);
    goto corral_source_split_8381;

  $bb23:
    assume !(out_$i132 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_8379:
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_8378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1139} warn_slowpath_null(.str.29, 1128);
    goto corral_source_split_8379;

  $bb22:
    assume out_$i132 == 1;
    goto corral_source_split_8378;

  corral_source_split_8351:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_8350:
    assume {:verifier.code 0} true;
    out_$i132 := $ne.i64(out_$i131, 0);
    goto corral_source_split_8351;

  corral_source_split_8349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1130} out_$i131 := ldv__builtin_expect(out_$i130, 0);
    call {:si_unique_call 1131} {:cexpr "tmp___6"} boogie_si_record_i64(out_$i131);
    goto corral_source_split_8350;

  corral_source_split_8348:
    assume {:verifier.code 0} true;
    out_$i130 := $sext.i32.i64(out_$i129);
    goto corral_source_split_8349;

  corral_source_split_8347:
    assume {:verifier.code 0} true;
    out_$i129 := $zext.i1.i32(out_$i128);
    goto corral_source_split_8348;

  corral_source_split_8346:
    assume {:verifier.code 0} true;
    out_$i128 := $ne.i32(out_$i127, 0);
    goto corral_source_split_8347;

  corral_source_split_8345:
    assume {:verifier.code 0} true;
    out_$i127 := $zext.i1.i32(out_$i126);
    call {:si_unique_call 1129} {:cexpr "__ret_warn_on___1"} boogie_si_record_i32(out_$i127);
    goto corral_source_split_8346;

  corral_source_split_8344:
    assume {:verifier.code 0} true;
    out_$i126 := $ne.i32(out_$i125, 2);
    goto corral_source_split_8345;

  corral_source_split_8343:
    assume {:verifier.code 0} true;
    out_$i125 := $load.i32($M.0, out_$p124);
    goto corral_source_split_8344;

  corral_source_split_8342:
    assume {:verifier.code 0} true;
    out_$p124 := $add.ref($add.ref(out_$p112, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_8343;

  corral_source_split_8341:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p123, $sub.i32(0, 1));
    goto corral_source_split_8342;

  corral_source_split_8340:
    assume {:verifier.code 0} true;
    out_$p123 := $add.ref($add.ref(out_$p119, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_8341;

  corral_source_split_8339:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p122, $0.ref);
    goto corral_source_split_8340;

  corral_source_split_8338:
    assume {:verifier.code 0} true;
    out_$p122 := $add.ref($add.ref(out_$p70, $mul.ref(out_$i120, 24)), $mul.ref(0, 1));
    goto corral_source_split_8339;

  corral_source_split_8337:
    assume {:verifier.code 0} true;
    goto corral_source_split_8338;

  corral_source_split_8336:
    assume {:verifier.code 0} true;
    out_$i120 := $sext.i32.i64(out_$i68);
    goto corral_source_split_8337;

  corral_source_split_8335:
    assume {:verifier.code 0} true;
    out_$p119 := $load.ref($M.0, out_$p118);
    goto corral_source_split_8336;

  corral_source_split_8334:
    assume {:verifier.code 0} true;
    out_$p118 := $add.ref($add.ref(out_$p70, $mul.ref(out_$i116, 24)), $mul.ref(0, 1));
    goto corral_source_split_8335;

  corral_source_split_8333:
    assume {:verifier.code 0} true;
    goto corral_source_split_8334;

  corral_source_split_8332:
    assume {:verifier.code 0} true;
    out_$i116 := $sext.i32.i64(out_$i68);
    goto corral_source_split_8333;

  corral_source_split_8331:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p115, $0.ref);
    goto corral_source_split_8332;

  corral_source_split_8330:
    assume {:verifier.code 0} true;
    out_$p115 := $add.ref($add.ref(out_$p70, $mul.ref(out_$i113, 24)), $mul.ref(8, 1));
    goto corral_source_split_8331;

  corral_source_split_8329:
    assume {:verifier.code 0} true;
    goto corral_source_split_8330;

  corral_source_split_8328:
    assume {:verifier.code 0} true;
    out_$i113 := $sext.i32.i64(out_$i68);
    goto corral_source_split_8329;

  corral_source_split_8327:
    assume {:verifier.code 0} true;
    out_$p112 := $load.ref($M.0, out_$p111);
    goto corral_source_split_8328;

  corral_source_split_8326:
    assume {:verifier.code 0} true;
    out_$p111 := $add.ref($add.ref(out_$p70, $mul.ref(out_$i109, 24)), $mul.ref(8, 1));
    goto corral_source_split_8327;

  corral_source_split_8325:
    assume {:verifier.code 0} true;
    goto corral_source_split_8326;

  corral_source_split_8324:
    assume {:verifier.code 0} true;
    out_$i109 := $sext.i32.i64(out_$i68);
    goto corral_source_split_8325;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8324;

  corral_source_split_8376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1137} out_$i108 := check_atl_transfer(in_$p0, in_$p1, out_$p107);
    call {:si_unique_call 1138} {:cexpr "state"} boogie_si_record_i32(out_$i108);
    assume {:verifier.code 0} true;
    out_$i68, out_$i69, out_$p70, out_$i71 := out_$i76, out_$i108, out_$p83, 3072;
    goto $bb15;

  corral_source_split_8322:
    assume {:verifier.code 0} true;
    out_$i68, out_$i69, out_$p70, out_$i71 := out_$i35, out_$i67, out_$p42, 2048;
    goto $bb15;

  corral_source_split_8321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1127} out_$i67 := check_int_transfer(in_$p0, in_$p1, out_$p66);
    call {:si_unique_call 1128} {:cexpr "state"} boogie_si_record_i32(out_$i67);
    goto corral_source_split_8322;

  corral_source_split_8320:
    assume {:verifier.code 0} true;
    out_$p66 := $load.ref($M.0, out_$p65);
    goto corral_source_split_8321;

  corral_source_split_8319:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(out_$p64, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_8320;

  corral_source_split_8318:
    assume {:verifier.code 0} true;
    out_$p64 := $load.ref($M.0, out_$p63);
    goto corral_source_split_8319;

  corral_source_split_8317:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref(out_$p43, $mul.ref(out_$i61, 24)), $mul.ref(8, 1));
    goto corral_source_split_8318;

  corral_source_split_8316:
    assume {:verifier.code 0} true;
    goto corral_source_split_8317;

  corral_source_split_8315:
    assume {:verifier.code 0} true;
    out_$i61 := $sext.i32.i64(out_$i35);
    goto corral_source_split_8316;

  SeqInstr_279:
    goto corral_source_split_8315;

  SeqInstr_278:
    assume assertsPassed;
    goto SeqInstr_279;

  corral_source_split_8314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1126} ptd_read(out_$p60, 2048, out_$i35, in_$p1);
    goto SeqInstr_278;

  corral_source_split_8313:
    assume {:verifier.code 0} true;
    out_$p60 := $load.ref($M.0, out_$p59);
    goto corral_source_split_8314;

  $bb14:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref(in_$p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_8313;

  $bb9:
    assume !(out_$i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_8375:
    assume {:verifier.code 0} true;
    out_$p107 := $load.ref($M.0, out_$p106);
    goto corral_source_split_8376;

  corral_source_split_8374:
    assume {:verifier.code 0} true;
    out_$p106 := $add.ref($add.ref(out_$p105, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_8375;

  corral_source_split_8373:
    assume {:verifier.code 0} true;
    out_$p105 := $load.ref($M.0, out_$p104);
    goto corral_source_split_8374;

  corral_source_split_8372:
    assume {:verifier.code 0} true;
    out_$p104 := $add.ref($add.ref(out_$p84, $mul.ref(out_$i102, 24)), $mul.ref(8, 1));
    goto corral_source_split_8373;

  corral_source_split_8371:
    assume {:verifier.code 0} true;
    goto corral_source_split_8372;

  corral_source_split_8370:
    assume {:verifier.code 0} true;
    out_$i102 := $sext.i32.i64(out_$i76);
    goto corral_source_split_8371;

  SeqInstr_282:
    goto corral_source_split_8370;

  SeqInstr_281:
    assume assertsPassed;
    goto SeqInstr_282;

  corral_source_split_8369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1136} ptd_read(out_$p101, 3072, out_$i76, in_$p1);
    goto SeqInstr_281;

  corral_source_split_8368:
    assume {:verifier.code 0} true;
    out_$p101 := $load.ref($M.0, out_$p100);
    goto corral_source_split_8369;

  $bb21:
    assume {:verifier.code 0} true;
    out_$p100 := $add.ref($add.ref(in_$p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_8368;

  $bb17:
    assume !(out_$i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_8462:
    assume {:verifier.code 0} true;
    out_$p163 := $add.ref($add.ref(out_$p112, $mul.ref(0, 72)), $mul.ref(56, 1));
    goto corral_source_split_8463;

  corral_source_split_8461:
    assume {:verifier.code 0} true;
    out_$i162 := $and.i64(out_$i161, 32767);
    goto corral_source_split_8462;

  corral_source_split_8460:
    assume {:verifier.code 0} true;
    out_$i161 := $zext.i32.i64(out_$i160);
    goto corral_source_split_8461;

  corral_source_split_8459:
    assume {:verifier.code 0} true;
    out_$i160 := $load.i32($M.0, out_$p159);
    goto corral_source_split_8460;

  $bb37:
    assume {:verifier.code 0} true;
    out_$p159 := $add.ref($add.ref(in_$p1, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_8459;

  $bb36:
    assume {:verifier.code 0} true;
    assume !(out_$i146 == 1);
    goto $bb37;

  $bb39:
    assume {:verifier.code 0} true;
    assume !(out_$i153 == 1);
    goto $bb37;

  corral_source_split_8505:
    assume {:verifier.code 0} true;
    out_$p177 := $add.ref(out_$p176, $mul.ref($sub.ref(0, 24), 72));
    assume {:verifier.code 0} true;
    out_$p172 := out_$p177;
    goto $bb46;

  corral_source_split_8500:
    assume {:verifier.code 0} true;
    out_$p172 := $0.ref;
    goto $bb46;

  $bb44:
    assume out_$i171 == 1;
    goto corral_source_split_8500;

  corral_source_split_8484:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  corral_source_split_8483:
    assume {:verifier.code 0} true;
    out_$i171 := $ne.i32(out_$i170, 0);
    goto corral_source_split_8484;

  corral_source_split_8482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1143} out_$i170 := is_short_bulk(out_$p112);
    call {:si_unique_call 1144} {:cexpr "tmp___8"} boogie_si_record_i32(out_$i170);
    goto corral_source_split_8483;

  $bb42:
    assume !(out_$i168 == 1);
    goto corral_source_split_8482;

  corral_source_split_8504:
    assume {:verifier.code 0} true;
    out_$p176 := $bitcast.ref.ref(out_$p175);
    goto corral_source_split_8505;

  corral_source_split_8503:
    assume {:verifier.code 0} true;
    out_$p175 := $load.ref($M.0, out_$p174);
    goto corral_source_split_8504;

  corral_source_split_8502:
    assume {:verifier.code 0} true;
    out_$p174 := $add.ref($add.ref($add.ref(out_$p112, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_8503;

  $bb45:
    assume !(out_$i171 == 1);
    goto corral_source_split_8502;

  corral_source_split_8428:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p224, out_$i223);
    goto corral_source_split_8429;

  corral_source_split_8427:
    assume {:verifier.code 0} true;
    out_$p224 := $add.ref($add.ref(out_$p119, $mul.ref(0, 48)), $mul.ref(36, 1));
    goto corral_source_split_8428;

  corral_source_split_8426:
    assume {:verifier.code 0} true;
    out_$i223 := $and.i32(out_$i222, 1);
    goto corral_source_split_8427;

  corral_source_split_8425:
    assume {:verifier.code 0} true;
    out_$i222 := $lshr.i32(out_$i221, 26);
    goto corral_source_split_8426;

  corral_source_split_8424:
    assume {:verifier.code 0} true;
    out_$i221 := $load.i32($M.0, out_$p220);
    goto corral_source_split_8425;

  corral_source_split_8423:
    assume {:verifier.code 0} true;
    out_$p220 := $add.ref($add.ref(in_$p1, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_8424;

  corral_source_split_8422:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p219, out_$i218);
    goto corral_source_split_8423;

  corral_source_split_8421:
    assume {:verifier.code 0} true;
    out_$p219 := $add.ref($add.ref(out_$p119, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_8422;

  corral_source_split_8420:
    assume {:verifier.code 0} true;
    out_$i218 := $and.i32(out_$i217, 1);
    goto corral_source_split_8421;

  corral_source_split_8419:
    assume {:verifier.code 0} true;
    out_$i217 := $lshr.i32(out_$i216, 25);
    goto corral_source_split_8420;

  corral_source_split_8418:
    assume {:verifier.code 0} true;
    out_$i216 := $load.i32($M.0, out_$p215);
    goto corral_source_split_8419;

  corral_source_split_8417:
    assume {:verifier.code 0} true;
    out_$p215 := $add.ref($add.ref(in_$p1, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_8418;

  corral_source_split_8416:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p214, out_$i213);
    goto corral_source_split_8417;

  corral_source_split_8415:
    assume {:verifier.code 0} true;
    out_$p214 := $add.ref($add.ref(in_$p1, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_8416;

  corral_source_split_8414:
    assume {:verifier.code 0} true;
    out_$i213 := $or.i32(out_$i212, 16777216);
    goto corral_source_split_8415;

  corral_source_split_8413:
    assume {:verifier.code 0} true;
    out_$i212 := $load.i32($M.0, out_$p211);
    goto corral_source_split_8414;

  corral_source_split_8412:
    assume {:verifier.code 0} true;
    out_$p211 := $add.ref($add.ref(in_$p1, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_8413;

  corral_source_split_8411:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p210, out_$i209);
    goto corral_source_split_8412;

  corral_source_split_8410:
    assume {:verifier.code 0} true;
    out_$p210 := $add.ref($add.ref(in_$p1, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_8411;

  corral_source_split_8409:
    assume {:verifier.code 0} true;
    out_$i209 := $and.i32(out_$i208, $sub.i32(0, 25165825));
    goto corral_source_split_8410;

  corral_source_split_8408:
    assume {:verifier.code 0} true;
    out_$i208 := $load.i32($M.0, out_$p207);
    goto corral_source_split_8409;

  corral_source_split_8407:
    assume {:verifier.code 0} true;
    out_$p207 := $add.ref($add.ref(in_$p1, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_8408;

  corral_source_split_8406:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p206, out_$i205);
    goto corral_source_split_8407;

  corral_source_split_8405:
    assume {:verifier.code 0} true;
    out_$p206 := $add.ref($add.ref(in_$p1, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_8406;

  corral_source_split_8404:
    assume {:verifier.code 0} true;
    out_$i205 := $or.i32(out_$i199, out_$i204);
    goto corral_source_split_8405;

  corral_source_split_8403:
    assume {:verifier.code 0} true;
    out_$i204 := $shl.i32(out_$i203, 19);
    goto corral_source_split_8404;

  corral_source_split_8402:
    assume {:verifier.code 0} true;
    out_$i203 := $and.i32(out_$i202, 15);
    goto corral_source_split_8403;

  corral_source_split_8401:
    assume {:verifier.code 0} true;
    out_$i202 := $lshr.i32(out_$i201, 25);
    goto corral_source_split_8402;

  corral_source_split_8400:
    assume {:verifier.code 0} true;
    out_$i201 := $load.i32($M.0, out_$p200);
    goto corral_source_split_8401;

  corral_source_split_8399:
    assume {:verifier.code 0} true;
    out_$p200 := $add.ref($add.ref(in_$p1, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_8400;

  corral_source_split_8398:
    assume {:verifier.code 0} true;
    out_$i199 := $load.i32($M.0, out_$p198);
    goto corral_source_split_8399;

  corral_source_split_8397:
    assume {:verifier.code 0} true;
    out_$p198 := $add.ref($add.ref(in_$p1, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_8398;

  corral_source_split_8396:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p197, out_$i196);
    goto corral_source_split_8397;

  corral_source_split_8395:
    assume {:verifier.code 0} true;
    out_$p197 := $add.ref($add.ref(in_$p1, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_8396;

  corral_source_split_8394:
    assume {:verifier.code 0} true;
    out_$i196 := $and.i32(out_$i195, $sub.i32(0, 7864321));
    goto corral_source_split_8395;

  corral_source_split_8393:
    assume {:verifier.code 0} true;
    out_$i195 := $load.i32($M.0, out_$p194);
    goto corral_source_split_8394;

  corral_source_split_8392:
    assume {:verifier.code 0} true;
    out_$p194 := $add.ref($add.ref(in_$p1, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_8393;

  corral_source_split_8391:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p193, out_$i192);
    goto corral_source_split_8392;

  corral_source_split_8390:
    assume {:verifier.code 0} true;
    out_$p193 := $add.ref($add.ref(in_$p1, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_8391;

  corral_source_split_8389:
    assume {:verifier.code 0} true;
    out_$i192 := $or.i32(out_$i191, 1);
    goto corral_source_split_8390;

  corral_source_split_8388:
    assume {:verifier.code 0} true;
    out_$i191 := $load.i32($M.0, out_$p190);
    goto corral_source_split_8389;

  corral_source_split_8387:
    assume {:verifier.code 0} true;
    out_$p190 := $add.ref($add.ref(in_$p1, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_8388;

  corral_source_split_8386:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p189, 1);
    goto corral_source_split_8387;

  corral_source_split_8385:
    assume {:verifier.code 0} true;
    out_$p189 := $add.ref($add.ref(out_$p112, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_8386;

  $bb28:
    assume out_$i138 == 1;
    goto corral_source_split_8385;

  $bb27:
    assume !(out_$i137 == 1);
    assume {:verifier.code 0} true;
    out_$i138 := $slt.i32(out_$i69, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  corral_source_split_8539:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p250, 0);
    goto corral_source_split_8540;

  corral_source_split_8538:
    assume {:verifier.code 0} true;
    out_$p250 := $add.ref($add.ref(out_$p119, $mul.ref(0, 48)), $mul.ref(36, 1));
    goto corral_source_split_8539;

  corral_source_split_8537:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p249, 0);
    goto corral_source_split_8538;

  $bb58:
    assume {:verifier.code 0} true;
    out_$p249 := $add.ref($add.ref(out_$p119, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_8537;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb56:
    assume !(out_$i247 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  corral_source_split_8535:
    assume {:verifier.code 0} true;
    goto $bb57;

  corral_source_split_8534:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p248, 0);
    goto corral_source_split_8535;

  corral_source_split_8533:
    assume {:verifier.code 0} true;
    out_$p248 := $add.ref($add.ref(out_$p119, $mul.ref(0, 48)), $mul.ref(44, 1));
    goto corral_source_split_8534;

  $bb55:
    assume out_$i247 == 1;
    goto corral_source_split_8533;

  corral_source_split_8531:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  corral_source_split_8530:
    assume {:verifier.code 0} true;
    out_$i247 := $ne.i32(out_$i246, 0);
    goto corral_source_split_8531;

  corral_source_split_8529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1145} out_$i246 := usb_hub_clear_tt_buffer(out_$p245);
    call {:si_unique_call 1146} {:cexpr "tmp___9"} boogie_si_record_i32(out_$i246);
    goto corral_source_split_8530;

  corral_source_split_8528:
    assume {:verifier.code 0} true;
    out_$p245 := $load.ref($M.0, out_$p244);
    goto corral_source_split_8529;

  corral_source_split_8527:
    assume {:verifier.code 0} true;
    out_$p244 := $add.ref($add.ref(out_$p112, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_8528;

  corral_source_split_8526:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p243, 1);
    goto corral_source_split_8527;

  corral_source_split_8525:
    assume {:verifier.code 0} true;
    out_$p243 := $add.ref($add.ref(out_$p119, $mul.ref(0, 48)), $mul.ref(44, 1));
    goto corral_source_split_8526;

  $bb53:
    assume out_$i242 == 1;
    goto corral_source_split_8525;

  corral_source_split_8523:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  corral_source_split_8522:
    assume {:verifier.code 0} true;
    out_$i242 := $ne.i32(out_$i241, $sub.i32(0, 121));
    goto corral_source_split_8523;

  corral_source_split_8521:
    assume {:verifier.code 0} true;
    out_$i241 := $load.i32($M.0, out_$p240);
    goto corral_source_split_8522;

  corral_source_split_8520:
    assume {:verifier.code 0} true;
    out_$p240 := $add.ref($add.ref(out_$p239, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_8521;

  corral_source_split_8519:
    assume {:verifier.code 0} true;
    out_$p239 := $load.ref($M.0, out_$p238);
    goto corral_source_split_8520;

  corral_source_split_8518:
    assume {:verifier.code 0} true;
    out_$p238 := $add.ref($add.ref(out_$p112, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_8519;

  $bb51:
    assume out_$i237 == 1;
    goto corral_source_split_8518;

  corral_source_split_8516:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  corral_source_split_8515:
    assume {:verifier.code 0} true;
    out_$i237 := $ne.i32(out_$i236, $sub.i32(0, 32));
    goto corral_source_split_8516;

  corral_source_split_8514:
    assume {:verifier.code 0} true;
    out_$i236 := $load.i32($M.0, out_$p235);
    goto corral_source_split_8515;

  corral_source_split_8513:
    assume {:verifier.code 0} true;
    out_$p235 := $add.ref($add.ref(out_$p234, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_8514;

  corral_source_split_8512:
    assume {:verifier.code 0} true;
    out_$p234 := $load.ref($M.0, out_$p233);
    goto corral_source_split_8513;

  corral_source_split_8511:
    assume {:verifier.code 0} true;
    out_$p233 := $add.ref($add.ref(out_$p112, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_8512;

  $bb48:
    assume out_$i232 == 1;
    goto corral_source_split_8511;

  corral_source_split_8440:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  corral_source_split_8439:
    assume {:verifier.code 0} true;
    out_$i232 := $ne.i32(out_$i231, 3);
    goto corral_source_split_8440;

  corral_source_split_8438:
    assume {:verifier.code 0} true;
    out_$i231 := $load.i32($M.0, out_$p230);
    goto corral_source_split_8439;

  corral_source_split_8437:
    assume {:verifier.code 0} true;
    out_$p230 := $add.ref($add.ref(out_$p229, $mul.ref(0, 2040)), $mul.ref(28, 1));
    goto corral_source_split_8438;

  corral_source_split_8436:
    assume {:verifier.code 0} true;
    out_$p229 := $load.ref($M.0, out_$p228);
    goto corral_source_split_8437;

  corral_source_split_8435:
    assume {:verifier.code 0} true;
    out_$p228 := $add.ref($add.ref(out_$p227, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_8436;

  corral_source_split_8434:
    assume {:verifier.code 0} true;
    out_$p227 := $load.ref($M.0, out_$p226);
    goto corral_source_split_8435;

  corral_source_split_8433:
    assume {:verifier.code 0} true;
    out_$p226 := $add.ref($add.ref(out_$p112, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_8434;

  corral_source_split_8432:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p225, 4);
    goto corral_source_split_8433;

  corral_source_split_8431:
    assume {:verifier.code 0} true;
    out_$p225 := $add.ref($add.ref(out_$p112, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_8432;

  $bb30:
    assume out_$i139 == 1;
    goto corral_source_split_8431;

  $bb29:
    assume !(out_$i138 == 1);
    assume {:verifier.code 0} true;
    out_$i139 := $eq.i32(out_$i69, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb49:
    assume {:verifier.code 0} true;
    assume !(out_$i232 == 1);
    goto $bb50;

  $bb52:
    assume {:verifier.code 0} true;
    assume !(out_$i237 == 1);
    goto $bb50;

  $bb54:
    assume {:verifier.code 0} true;
    assume !(out_$i242 == 1);
    goto $bb50;

  $bb78:
    assume !(out_$i275 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  corral_source_split_8587:
    assume {:verifier.code 0} true;
    goto $bb79;

  corral_source_split_8586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1154} create_ptd_atl(out_$p119, out_$p188, in_$p1);
    goto corral_source_split_8587;

  $bb77:
    assume out_$i275 == 1;
    goto corral_source_split_8586;

  corral_source_split_8572:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  corral_source_split_8571:
    assume {:verifier.code 0} true;
    out_$i275 := $ne.i32(out_$i69, 2);
    goto corral_source_split_8572;

  $bb69:
    assume !(out_$i269 == 1);
    goto corral_source_split_8571;

  $bb64:
    assume {:verifier.code 0} true;
    assume !(out_$i261 == 1);
    goto $bb65;

  $bb67:
    assume {:verifier.code 0} true;
    assume !(out_$i264 == 1);
    goto $bb65;

  corral_source_split_8553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1150} out_vslice_dummy_var_75 := ldv__builtin_expect(out_$i258, 0);
    goto corral_source_split_8554;

  corral_source_split_8552:
    assume {:verifier.code 0} true;
    out_$i258 := $sext.i32.i64(out_$i257);
    goto corral_source_split_8553;

  corral_source_split_8551:
    assume {:verifier.code 0} true;
    out_$i257 := $zext.i1.i32(out_$i256);
    goto corral_source_split_8552;

  $bb62:
    assume {:verifier.code 0} true;
    out_$i256 := $ne.i32(1, 0);
    goto corral_source_split_8551;

  $bb61:
    assume !(out_$i255 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  corral_source_split_8549:
    assume {:verifier.code 0} true;
    goto $bb62;

  corral_source_split_8548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1149} warn_slowpath_null(.str.29, 1181);
    goto corral_source_split_8549;

  $bb60:
    assume out_$i255 == 1;
    goto corral_source_split_8548;

  corral_source_split_8546:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  corral_source_split_8545:
    assume {:verifier.code 0} true;
    out_$i255 := $ne.i64(out_$i254, 0);
    goto corral_source_split_8546;

  corral_source_split_8544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1147} out_$i254 := ldv__builtin_expect(out_$i253, 0);
    call {:si_unique_call 1148} {:cexpr "tmp___10"} boogie_si_record_i64(out_$i254);
    goto corral_source_split_8545;

  corral_source_split_8543:
    assume {:verifier.code 0} true;
    out_$i253 := $sext.i32.i64(out_$i252);
    goto corral_source_split_8544;

  corral_source_split_8542:
    assume {:verifier.code 0} true;
    out_$i252 := $zext.i1.i32(out_$i251);
    goto corral_source_split_8543;

  $bb59:
    assume {:verifier.code 0} true;
    out_$i251 := $ne.i32(1, 0);
    goto corral_source_split_8542;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb31:
    assume {:verifier.code 0} true;
    assume !(out_$i139 == 1);
    goto $bb32;

  $bb34:
    assume {:verifier.code 0} true;
    assume !(out_$i140 == 1);
    goto $bb32;

  $bb13_dummy:
    call {:si_unique_call 1} out_$p28, out_$i29, out_$i30, out_$p31, out_$i32, out_$i33, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$p41, out_$p42, out_$p43, out_$i44, out_$p46, out_$p47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$p59, out_$p60, out_$i61, out_$p63, out_$p64, out_$p65, out_$p66, out_$i67, out_$p72, out_$i73, out_$i74, out_$i75, out_$i76, out_$p77, out_$i78, out_$i79, out_$i80, out_$i81, out_$p82, out_$p83, out_$p84, out_$i85, out_$p87, out_$p88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$p100, out_$p101, out_$i102, out_$p104, out_$p105, out_$p106, out_$p107, out_$i108, out_$i68, out_$i69, out_$p70, out_$i71, out_$i109, out_$p111, out_$p112, out_$i113, out_$p115, out_$i116, out_$p118, out_$p119, out_$i120, out_$p122, out_$p123, out_$p124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i137, out_$i138, out_$i139, out_$i140, out_$p141, out_$p142, out_$p143, out_$i144, out_$i145, out_$i146, out_$p147, out_$p148, out_$p149, out_$p150, out_$p151, out_$i152, out_$i153, out_$p154, out_$i155, out_$i156, out_$i157, out_$p158, out_$p159, out_$i160, out_$i161, out_$i162, out_$p163, out_$p164, out_$p165, out_$p166, out_$i167, out_$i168, out_$i170, out_$i171, out_$p174, out_$p175, out_$p176, out_$p177, out_$p172, out_$p169, out_$p178, out_$i179, out_$i180, out_$i181, out_$p182, out_$p183, out_$i184, out_$i185, out_$i186, out_$p187, out_$p189, out_$p190, out_$i191, out_$i192, out_$p193, out_$p194, out_$i195, out_$i196, out_$p197, out_$p198, out_$i199, out_$p200, out_$i201, out_$i202, out_$i203, out_$i204, out_$i205, out_$p206, out_$p207, out_$i208, out_$i209, out_$p210, out_$p211, out_$i212, out_$i213, out_$p214, out_$p215, out_$i216, out_$i217, out_$i218, out_$p219, out_$p220, out_$i221, out_$i222, out_$i223, out_$p224, out_$p225, out_$p226, out_$p227, out_$p228, out_$p229, out_$p230, out_$i231, out_$i232, out_$p233, out_$p234, out_$p235, out_$i236, out_$i237, out_$p238, out_$p239, out_$p240, out_$i241, out_$i242, out_$p243, out_$p244, out_$p245, out_$i246, out_$i247, out_$p248, out_$p249, out_$p250, out_$i251, out_$i252, out_$i253, out_$i254, out_$i255, out_$i256, out_$i257, out_$i258, out_$p188, out_$i260, out_$i261, out_$p262, out_$i263, out_$i264, out_$p265, out_$p266, out_$i267, out_$i268, out_$i269, out_$i270, out_$p272, out_$p273, out_$i274, out_$i275, out_$p276, out_$i277, out_$i278, out_$i279, out_$i280, out_vslice_dummy_var_72, out_vslice_dummy_var_73, out_vslice_dummy_var_74, out_vslice_dummy_var_75 := handle_done_ptds_loop_$bb4(in_$p0, in_$p1, in_$p2, in_$p27, out_$p28, out_$i29, out_$i30, out_$p31, out_$i32, out_$i33, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$p41, out_$p42, out_$p43, out_$i44, out_$p46, out_$p47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$p59, out_$p60, out_$i61, out_$p63, out_$p64, out_$p65, out_$p66, out_$i67, out_$p72, out_$i73, out_$i74, out_$i75, out_$i76, out_$p77, out_$i78, out_$i79, out_$i80, out_$i81, out_$p82, out_$p83, out_$p84, out_$i85, out_$p87, out_$p88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$p100, out_$p101, out_$i102, out_$p104, out_$p105, out_$p106, out_$p107, out_$i108, out_$i68, out_$i69, out_$p70, out_$i71, out_$i109, out_$p111, out_$p112, out_$i113, out_$p115, out_$i116, out_$p118, out_$p119, out_$i120, out_$p122, out_$p123, out_$p124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i137, out_$i138, out_$i139, out_$i140, out_$p141, out_$p142, out_$p143, out_$i144, out_$i145, out_$i146, out_$p147, out_$p148, out_$p149, out_$p150, out_$p151, out_$i152, out_$i153, out_$p154, out_$i155, out_$i156, out_$i157, out_$p158, out_$p159, out_$i160, out_$i161, out_$i162, out_$p163, out_$p164, out_$p165, out_$p166, out_$i167, out_$i168, out_$i170, out_$i171, out_$p174, out_$p175, out_$p176, out_$p177, out_$p172, out_$p169, out_$p178, out_$i179, out_$i180, out_$i181, out_$p182, out_$p183, out_$i184, out_$i185, out_$i186, out_$p187, out_$p189, out_$p190, out_$i191, out_$i192, out_$p193, out_$p194, out_$i195, out_$i196, out_$p197, out_$p198, out_$i199, out_$p200, out_$i201, out_$i202, out_$i203, out_$i204, out_$i205, out_$p206, out_$p207, out_$i208, out_$i209, out_$p210, out_$p211, out_$i212, out_$i213, out_$p214, out_$p215, out_$i216, out_$i217, out_$i218, out_$p219, out_$p220, out_$i221, out_$i222, out_$i223, out_$p224, out_$p225, out_$p226, out_$p227, out_$p228, out_$p229, out_$p230, out_$i231, out_$i232, out_$p233, out_$p234, out_$p235, out_$i236, out_$i237, out_$p238, out_$p239, out_$p240, out_$i241, out_$i242, out_$p243, out_$p244, out_$p245, out_$i246, out_$i247, out_$p248, out_$p249, out_$p250, out_$i251, out_$i252, out_$i253, out_$i254, out_$i255, out_$i256, out_$i257, out_$i258, out_$p188, out_$i260, out_$i261, out_$p262, out_$i263, out_$i264, out_$p265, out_$p266, out_$i267, out_$i268, out_$i269, out_$i270, out_$p272, out_$p273, out_$i274, out_$i275, out_$p276, out_$i277, out_$i278, out_$i279, out_$i280, out_vslice_dummy_var_72, out_vslice_dummy_var_73, out_vslice_dummy_var_74, out_vslice_dummy_var_75);
    return;

  exit:
    return;
}



procedure handle_done_ptds_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p27: ref, in_$p28: ref, in_$i29: i32, in_$i30: i1, in_$p31: ref, in_$i32: i32, in_$i33: i64, in_$i34: i64, in_$i35: i32, in_$p36: ref, in_$i37: i32, in_$i38: i32, in_$i39: i32, in_$i40: i32, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$i44: i64, in_$p46: ref, in_$p47: ref, in_$i48: i64, in_$i49: i1, in_$i50: i1, in_$i51: i32, in_$i52: i64, in_$i53: i64, in_$i54: i1, in_$i55: i1, in_$i56: i32, in_$i57: i64, in_$p59: ref, in_$p60: ref, in_$i61: i64, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$i67: i32, in_$p72: ref, in_$i73: i32, in_$i74: i64, in_$i75: i64, in_$i76: i32, in_$p77: ref, in_$i78: i32, in_$i79: i32, in_$i80: i32, in_$i81: i32, in_$p82: ref, in_$p83: ref, in_$p84: ref, in_$i85: i64, in_$p87: ref, in_$p88: ref, in_$i89: i64, in_$i90: i1, in_$i91: i1, in_$i92: i32, in_$i93: i64, in_$i94: i64, in_$i95: i1, in_$i96: i1, in_$i97: i32, in_$i98: i64, in_$p100: ref, in_$p101: ref, in_$i102: i64, in_$p104: ref, in_$p105: ref, in_$p106: ref, in_$p107: ref, in_$i108: i32, in_$i68: i32, in_$i69: i32, in_$p70: ref, in_$i71: i32, in_$i109: i64, in_$p111: ref, in_$p112: ref, in_$i113: i64, in_$p115: ref, in_$i116: i64, in_$p118: ref, in_$p119: ref, in_$i120: i64, in_$p122: ref, in_$p123: ref, in_$p124: ref, in_$i125: i32, in_$i126: i1, in_$i127: i32, in_$i128: i1, in_$i129: i32, in_$i130: i64, in_$i131: i64, in_$i132: i1, in_$i133: i1, in_$i134: i32, in_$i135: i64, in_$i137: i1, in_$i138: i1, in_$i139: i1, in_$i140: i1, in_$p141: ref, in_$p142: ref, in_$p143: ref, in_$i144: i32, in_$i145: i32, in_$i146: i1, in_$p147: ref, in_$p148: ref, in_$p149: ref, in_$p150: ref, in_$p151: ref, in_$i152: i32, in_$i153: i1, in_$p154: ref, in_$i155: i32, in_$i156: i64, in_$i157: i64, in_$p158: ref, in_$p159: ref, in_$i160: i32, in_$i161: i64, in_$i162: i64, in_$p163: ref, in_$p164: ref, in_$p165: ref, in_$p166: ref, in_$i167: i32, in_$i168: i1, in_$i170: i32, in_$i171: i1, in_$p174: ref, in_$p175: ref, in_$p176: ref, in_$p177: ref, in_$p172: ref, in_$p169: ref, in_$p178: ref, in_$i179: i32, in_$i180: i32, in_$i181: i32, in_$p182: ref, in_$p183: ref, in_$i184: i32, in_$i185: i32, in_$i186: i32, in_$p187: ref, in_$p189: ref, in_$p190: ref, in_$i191: i32, in_$i192: i32, in_$p193: ref, in_$p194: ref, in_$i195: i32, in_$i196: i32, in_$p197: ref, in_$p198: ref, in_$i199: i32, in_$p200: ref, in_$i201: i32, in_$i202: i32, in_$i203: i32, in_$i204: i32, in_$i205: i32, in_$p206: ref, in_$p207: ref, in_$i208: i32, in_$i209: i32, in_$p210: ref, in_$p211: ref, in_$i212: i32, in_$i213: i32, in_$p214: ref, in_$p215: ref, in_$i216: i32, in_$i217: i32, in_$i218: i32, in_$p219: ref, in_$p220: ref, in_$i221: i32, in_$i222: i32, in_$i223: i32, in_$p224: ref, in_$p225: ref, in_$p226: ref, in_$p227: ref, in_$p228: ref, in_$p229: ref, in_$p230: ref, in_$i231: i32, in_$i232: i1, in_$p233: ref, in_$p234: ref, in_$p235: ref, in_$i236: i32, in_$i237: i1, in_$p238: ref, in_$p239: ref, in_$p240: ref, in_$i241: i32, in_$i242: i1, in_$p243: ref, in_$p244: ref, in_$p245: ref, in_$i246: i32, in_$i247: i1, in_$p248: ref, in_$p249: ref, in_$p250: ref, in_$i251: i1, in_$i252: i32, in_$i253: i64, in_$i254: i64, in_$i255: i1, in_$i256: i1, in_$i257: i32, in_$i258: i64, in_$p188: ref, in_$i260: i64, in_$i261: i1, in_$p262: ref, in_$i263: i32, in_$i264: i1, in_$p265: ref, in_$p266: ref, in_$i267: i64, in_$i268: i64, in_$i269: i1, in_$i270: i1, in_$p272: ref, in_$p273: ref, in_$i274: i1, in_$i275: i1, in_$p276: ref, in_$i277: i32, in_$i278: i1, in_$i279: i32, in_$i280: i1, in_vslice_dummy_var_72: i64, in_vslice_dummy_var_73: i64, in_vslice_dummy_var_74: i64, in_vslice_dummy_var_75: i64) returns (out_$p28: ref, out_$i29: i32, out_$i30: i1, out_$p31: ref, out_$i32: i32, out_$i33: i64, out_$i34: i64, out_$i35: i32, out_$p36: ref, out_$i37: i32, out_$i38: i32, out_$i39: i32, out_$i40: i32, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$i44: i64, out_$p46: ref, out_$p47: ref, out_$i48: i64, out_$i49: i1, out_$i50: i1, out_$i51: i32, out_$i52: i64, out_$i53: i64, out_$i54: i1, out_$i55: i1, out_$i56: i32, out_$i57: i64, out_$p59: ref, out_$p60: ref, out_$i61: i64, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$i67: i32, out_$p72: ref, out_$i73: i32, out_$i74: i64, out_$i75: i64, out_$i76: i32, out_$p77: ref, out_$i78: i32, out_$i79: i32, out_$i80: i32, out_$i81: i32, out_$p82: ref, out_$p83: ref, out_$p84: ref, out_$i85: i64, out_$p87: ref, out_$p88: ref, out_$i89: i64, out_$i90: i1, out_$i91: i1, out_$i92: i32, out_$i93: i64, out_$i94: i64, out_$i95: i1, out_$i96: i1, out_$i97: i32, out_$i98: i64, out_$p100: ref, out_$p101: ref, out_$i102: i64, out_$p104: ref, out_$p105: ref, out_$p106: ref, out_$p107: ref, out_$i108: i32, out_$i68: i32, out_$i69: i32, out_$p70: ref, out_$i71: i32, out_$i109: i64, out_$p111: ref, out_$p112: ref, out_$i113: i64, out_$p115: ref, out_$i116: i64, out_$p118: ref, out_$p119: ref, out_$i120: i64, out_$p122: ref, out_$p123: ref, out_$p124: ref, out_$i125: i32, out_$i126: i1, out_$i127: i32, out_$i128: i1, out_$i129: i32, out_$i130: i64, out_$i131: i64, out_$i132: i1, out_$i133: i1, out_$i134: i32, out_$i135: i64, out_$i137: i1, out_$i138: i1, out_$i139: i1, out_$i140: i1, out_$p141: ref, out_$p142: ref, out_$p143: ref, out_$i144: i32, out_$i145: i32, out_$i146: i1, out_$p147: ref, out_$p148: ref, out_$p149: ref, out_$p150: ref, out_$p151: ref, out_$i152: i32, out_$i153: i1, out_$p154: ref, out_$i155: i32, out_$i156: i64, out_$i157: i64, out_$p158: ref, out_$p159: ref, out_$i160: i32, out_$i161: i64, out_$i162: i64, out_$p163: ref, out_$p164: ref, out_$p165: ref, out_$p166: ref, out_$i167: i32, out_$i168: i1, out_$i170: i32, out_$i171: i1, out_$p174: ref, out_$p175: ref, out_$p176: ref, out_$p177: ref, out_$p172: ref, out_$p169: ref, out_$p178: ref, out_$i179: i32, out_$i180: i32, out_$i181: i32, out_$p182: ref, out_$p183: ref, out_$i184: i32, out_$i185: i32, out_$i186: i32, out_$p187: ref, out_$p189: ref, out_$p190: ref, out_$i191: i32, out_$i192: i32, out_$p193: ref, out_$p194: ref, out_$i195: i32, out_$i196: i32, out_$p197: ref, out_$p198: ref, out_$i199: i32, out_$p200: ref, out_$i201: i32, out_$i202: i32, out_$i203: i32, out_$i204: i32, out_$i205: i32, out_$p206: ref, out_$p207: ref, out_$i208: i32, out_$i209: i32, out_$p210: ref, out_$p211: ref, out_$i212: i32, out_$i213: i32, out_$p214: ref, out_$p215: ref, out_$i216: i32, out_$i217: i32, out_$i218: i32, out_$p219: ref, out_$p220: ref, out_$i221: i32, out_$i222: i32, out_$i223: i32, out_$p224: ref, out_$p225: ref, out_$p226: ref, out_$p227: ref, out_$p228: ref, out_$p229: ref, out_$p230: ref, out_$i231: i32, out_$i232: i1, out_$p233: ref, out_$p234: ref, out_$p235: ref, out_$i236: i32, out_$i237: i1, out_$p238: ref, out_$p239: ref, out_$p240: ref, out_$i241: i32, out_$i242: i1, out_$p243: ref, out_$p244: ref, out_$p245: ref, out_$i246: i32, out_$i247: i1, out_$p248: ref, out_$p249: ref, out_$p250: ref, out_$i251: i1, out_$i252: i32, out_$i253: i64, out_$i254: i64, out_$i255: i1, out_$i256: i1, out_$i257: i32, out_$i258: i64, out_$p188: ref, out_$i260: i64, out_$i261: i1, out_$p262: ref, out_$i263: i32, out_$i264: i1, out_$p265: ref, out_$p266: ref, out_$i267: i64, out_$i268: i64, out_$i269: i1, out_$i270: i1, out_$p272: ref, out_$p273: ref, out_$i274: i1, out_$i275: i1, out_$p276: ref, out_$i277: i32, out_$i278: i1, out_$i279: i32, out_$i280: i1, out_vslice_dummy_var_72: i64, out_vslice_dummy_var_73: i64, out_vslice_dummy_var_74: i64, out_vslice_dummy_var_75: i64);
  modifies $M.0, $M.36, $M.1, $M.32, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.30, $M.38, $M.40, $M.23, $M.22, $M.25, $M.24, $M.27, $M.26, $M.29, $M.28, $CurrAddr, $M.2, $M.4, $M.6, $M.8, $M.3, $M.5, $M.7, $M.9, assertsPassed;



implementation isp1760_ep_disable_loop_$bb14(in_$p4: ref, in_$i70: i64, in_$p74: ref, in_$p76: ref, in_$p77: ref, in_$p78: ref, in_$p79: ref, in_$p80: ref, in_$i81: i64, in_$i82: i1, in_$p72: ref, in_$p73: ref) returns (out_$p74: ref, out_$p76: ref, out_$p77: ref, out_$p78: ref, out_$p79: ref, out_$p80: ref, out_$i81: i64, out_$i82: i1, out_$p72: ref, out_$p73: ref)
{

  entry:
    out_$p74, out_$p76, out_$p77, out_$p78, out_$p79, out_$p80, out_$i81, out_$i82, out_$p72, out_$p73 := in_$p74, in_$p76, in_$p77, in_$p78, in_$p79, in_$p80, in_$i81, in_$i82, in_$p72, in_$p73;
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_10049;

  $bb16:
    assume out_$i82 == 1;
    assume {:verifier.code 0} true;
    out_$p72, out_$p73 := out_$p79, out_$p72;
    goto $bb16_dummy;

  corral_source_split_10060:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_10059:
    assume {:verifier.code 0} true;
    out_$i82 := $ne.i64(out_$i81, in_$i70);
    goto corral_source_split_10060;

  corral_source_split_10058:
    assume {:verifier.code 0} true;
    out_$i81 := $p2i.ref.i64(out_$p80);
    goto corral_source_split_10059;

  corral_source_split_10057:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref($add.ref(out_$p72, $mul.ref(0, 120)), $mul.ref(88, 1));
    goto corral_source_split_10058;

  corral_source_split_10056:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref(out_$p78, $mul.ref($sub.ref(0, 88), 120));
    goto corral_source_split_10057;

  corral_source_split_10055:
    assume {:verifier.code 0} true;
    out_$p78 := $bitcast.ref.ref(out_$p77);
    goto corral_source_split_10056;

  corral_source_split_10054:
    assume {:verifier.code 0} true;
    out_$p77 := $load.ref($M.0, out_$p76);
    goto corral_source_split_10055;

  corral_source_split_10053:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref($add.ref(out_$p72, $mul.ref(0, 120)), $mul.ref(88, 1)), $mul.ref(0, 1));
    goto corral_source_split_10054;

  SeqInstr_297:
    goto corral_source_split_10053;

  SeqInstr_296:
    assume assertsPassed;
    goto SeqInstr_297;

  corral_source_split_10052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1316} isp1760_udc_request_complete(in_$p4, out_$p73, $sub.i32(0, 108));
    goto SeqInstr_296;

  corral_source_split_10051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1315} list_del(out_$p74);
    goto corral_source_split_10052;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref(out_$p73, $mul.ref(0, 120)), $mul.ref(88, 1));
    goto corral_source_split_10051;

  corral_source_split_10049:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb16_dummy:
    call {:si_unique_call 1} out_$p74, out_$p76, out_$p77, out_$p78, out_$p79, out_$p80, out_$i81, out_$i82, out_$p72, out_$p73 := isp1760_ep_disable_loop_$bb14(in_$p4, in_$i70, out_$p74, out_$p76, out_$p77, out_$p78, out_$p79, out_$p80, out_$i81, out_$i82, out_$p72, out_$p73);
    return;

  exit:
    return;
}



procedure isp1760_ep_disable_loop_$bb14(in_$p4: ref, in_$i70: i64, in_$p74: ref, in_$p76: ref, in_$p77: ref, in_$p78: ref, in_$p79: ref, in_$p80: ref, in_$i81: i64, in_$i82: i1, in_$p72: ref, in_$p73: ref) returns (out_$p74: ref, out_$p76: ref, out_$p77: ref, out_$p78: ref, out_$p79: ref, out_$p80: ref, out_$i81: i64, out_$i82: i1, out_$p72: ref, out_$p73: ref);
  modifies $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.0, $M.30, $CurrAddr, $M.36, $M.38, assertsPassed, $M.1, $M.32, $M.40, $M.23, $M.22, $M.25, $M.24, $M.27, $M.26, $M.29, $M.28, $M.2, $M.4, $M.6, $M.8, $M.3, $M.5, $M.7, $M.9;



implementation main_loop_$bb1(in_$p1: ref, in_$i2: i32, in_$i3: i1, in_$i4: i1, in_$i5: i1, in_$i6: i1, in_$i7: i1, in_$i8: i1, in_$i9: i1, in_$i10: i1, in_$i11: i1, in_$i12: i1, in_$i13: i32, in_$i14: i1, in_$i15: i32, in_$i16: i1, in_$i17: i32, in_$i18: i1, in_$i19: i1, in_$i20: i1, in_$i21: i32, in_$i22: i1, in_$p23: ref, in_$i24: i32, in_$i25: i32, in_$i26: i1, in_$i27: i32, in_$i28: i32, in_$i29: i32, in_$i30: i1, in_$i31: i32, in_$i32: i1, in_$p33: ref, in_$i34: i32, in_$i35: i32, in_$i36: i1, in_$i37: i32, in_$i38: i32, in_$i39: i32, in_$i40: i1, in_$i41: i32, in_$i42: i1, in_$p43: ref, in_$i44: i32, in_$i45: i32, in_$i46: i1, in_$i47: i32, in_$i48: i32, in_$i49: i32, in_$i50: i1, in_$i51: i32, in_$i52: i1, in_$i53: i1, in_$i54: i1, in_$i55: i1, in_$i56: i32, in_$i57: i1, in_$p58: ref, in_$i59: i32, in_$i60: i32, in_$i61: i1, in_$i62: i32, in_$i63: i32, in_$i64: i32, in_$i65: i1, in_$p66: ref, in_$i67: i32, in_$i68: i1, in_$p69: ref, in_$i70: i32, in_$i71: i1, in_$i72: i32, in_$i73: i1, in_$i74: i32, in_$i75: i1, in_$i76: i1, in_$i77: i1, in_$i78: i32, in_$i79: i1, in_$i80: i32, in_$i81: i1, in_$i82: i32, in_$i83: i1, in_$i84: i32, in_$i85: i32, in_$i86: i1, in_$i87: i32, in_$i88: i1, in_$i89: i32, in_$i90: i1) returns (out_$i2: i32, out_$i3: i1, out_$i4: i1, out_$i5: i1, out_$i6: i1, out_$i7: i1, out_$i8: i1, out_$i9: i1, out_$i10: i1, out_$i11: i1, out_$i12: i1, out_$i13: i32, out_$i14: i1, out_$i15: i32, out_$i16: i1, out_$i17: i32, out_$i18: i1, out_$i19: i1, out_$i20: i1, out_$i21: i32, out_$i22: i1, out_$p23: ref, out_$i24: i32, out_$i25: i32, out_$i26: i1, out_$i27: i32, out_$i28: i32, out_$i29: i32, out_$i30: i1, out_$i31: i32, out_$i32: i1, out_$p33: ref, out_$i34: i32, out_$i35: i32, out_$i36: i1, out_$i37: i32, out_$i38: i32, out_$i39: i32, out_$i40: i1, out_$i41: i32, out_$i42: i1, out_$p43: ref, out_$i44: i32, out_$i45: i32, out_$i46: i1, out_$i47: i32, out_$i48: i32, out_$i49: i32, out_$i50: i1, out_$i51: i32, out_$i52: i1, out_$i53: i1, out_$i54: i1, out_$i55: i1, out_$i56: i32, out_$i57: i1, out_$p58: ref, out_$i59: i32, out_$i60: i32, out_$i61: i1, out_$i62: i32, out_$i63: i32, out_$i64: i32, out_$i65: i1, out_$p66: ref, out_$i67: i32, out_$i68: i1, out_$p69: ref, out_$i70: i32, out_$i71: i1, out_$i72: i32, out_$i73: i1, out_$i74: i32, out_$i75: i1, out_$i76: i1, out_$i77: i1, out_$i78: i32, out_$i79: i1, out_$i80: i32, out_$i81: i1, out_$i82: i32, out_$i83: i1, out_$i84: i32, out_$i85: i32, out_$i86: i1, out_$i87: i32, out_$i88: i1, out_$i89: i32, out_$i90: i1)
{

  entry:
    out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$p43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$p58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$p66, out_$i67, out_$i68, out_$p69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90 := in_$i2, in_$i3, in_$i4, in_$i5, in_$i6, in_$i7, in_$i8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$p23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$p33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$p43, in_$i44, in_$i45, in_$i46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i57, in_$p58, in_$i59, in_$i60, in_$i61, in_$i62, in_$i63, in_$i64, in_$i65, in_$p66, in_$i67, in_$i68, in_$p69, in_$i70, in_$i71, in_$i72, in_$i73, in_$i74, in_$i75, in_$i76, in_$i77, in_$i78, in_$i79, in_$i80, in_$i81, in_$i82, in_$i83, in_$i84, in_$i85, in_$i86, in_$i87, in_$i88, in_$i89, in_$i90;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1442} out_$i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1443} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i2);
    call {:si_unique_call 1444} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i2);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb27_dummy;

  $bb131:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb129:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb126:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_10750:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb93:
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_10756:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_10758:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb25:
    assume !(out_$i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_10765:
    assume {:verifier.code 0} true;
    goto $bb26;

  SeqInstr_321:
    goto corral_source_split_10765;

  SeqInstr_320:
    assume assertsPassed;
    goto SeqInstr_321;

  corral_source_split_10764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1445} ldv_main_exported_6();
    goto SeqInstr_320;

  $bb24:
    assume out_$i14 == 1;
    goto corral_source_split_10764;

  corral_source_split_10762:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  corral_source_split_10761:
    assume {:verifier.code 0} true;
    out_$i14 := $ne.i32(out_$i13, 0);
    goto corral_source_split_10762;

  corral_source_split_10760:
    assume {:verifier.code 0} true;
    out_$i13 := $M.47;
    goto corral_source_split_10761;

  $bb22:
    assume out_$i12 == 1;
    goto corral_source_split_10760;

  $bb20:
    assume out_$i11 == 1;
    assume {:verifier.code 0} true;
    out_$i12 := $eq.i32(out_$i2, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb16:
    assume out_$i9 == 1;
    assume {:verifier.code 0} true;
    out_$i11 := $slt.i32(out_$i2, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb3:
    assume out_$i3 == 1;
    assume {:verifier.code 0} true;
    out_$i9 := $slt.i32(out_$i2, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i3 := $slt.i32(out_$i2, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb21:
    assume !(out_$i11 == 1);
    goto corral_source_split_10758;

  $bb29:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb39:
    assume !(out_$i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb41:
    assume !(out_$i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  corral_source_split_10789:
    assume {:verifier.code 0} true;
    goto $bb42;

  corral_source_split_10788:
    assume {:verifier.code 0} true;
    $M.58 := 1;
    call {:si_unique_call 1453} {:cexpr "probed_7"} boogie_si_record_i32(1);
    goto corral_source_split_10789;

  corral_source_split_10787:
    assume {:verifier.code 0} true;
    $M.54 := out_$i28;
    call {:si_unique_call 1452} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i28);
    goto corral_source_split_10788;

  corral_source_split_10786:
    assume {:verifier.code 0} true;
    out_$i28 := $add.i32(out_$i27, 1);
    goto corral_source_split_10787;

  corral_source_split_10785:
    assume {:verifier.code 0} true;
    out_$i27 := $M.54;
    goto corral_source_split_10786;

  corral_source_split_10784:
    assume {:verifier.code 0} true;
    $M.49 := 2;
    call {:si_unique_call 1451} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_10785;

  $bb40:
    assume out_$i26 == 1;
    goto corral_source_split_10784;

  corral_source_split_10782:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  corral_source_split_10781:
    assume {:verifier.code 0} true;
    out_$i26 := $eq.i32(out_$i25, 0);
    goto corral_source_split_10782;

  corral_source_split_10780:
    assume {:verifier.code 0} true;
    out_$i25 := $M.57;
    goto corral_source_split_10781;

  corral_source_split_10779:
    assume {:verifier.code 0} true;
    $M.57 := out_$i24;
    call {:si_unique_call 1450} {:cexpr "ldv_retval_2"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_10780;

  SeqInstr_324:
    goto corral_source_split_10779;

  SeqInstr_323:
    assume assertsPassed;
    goto SeqInstr_324;

  corral_source_split_10778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1449} out_$i24 := isp1760_plat_probe(out_$p23);
    goto SeqInstr_323;

  corral_source_split_10777:
    assume {:verifier.code 0} true;
    out_$p23 := $M.45;
    goto corral_source_split_10778;

  $bb38:
    assume out_$i22 == 1;
    goto corral_source_split_10777;

  corral_source_split_10775:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  corral_source_split_10774:
    assume {:verifier.code 0} true;
    out_$i22 := $eq.i32(out_$i21, 1);
    goto corral_source_split_10775;

  corral_source_split_10773:
    assume {:verifier.code 0} true;
    out_$i21 := $M.49;
    goto corral_source_split_10774;

  $bb36:
    assume out_$i20 == 1;
    goto corral_source_split_10773;

  $bb31:
    assume out_$i18 == 1;
    assume {:verifier.code 0} true;
    out_$i20 := $eq.i32(out_$i17, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb30:
    assume {:verifier.code 0} true;
    out_$i18 := $slt.i32(out_$i17, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  corral_source_split_10767:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1446} out_$i17 := __VERIFIER_nondet_int();
    call {:si_unique_call 1447} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i17);
    call {:si_unique_call 1448} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i17);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb28:
    assume out_$i16 == 1;
    goto corral_source_split_10767;

  corral_source_split_10754:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  corral_source_split_10753:
    assume {:verifier.code 0} true;
    out_$i16 := $ne.i32(out_$i15, 0);
    goto corral_source_split_10754;

  corral_source_split_10752:
    assume {:verifier.code 0} true;
    out_$i15 := $M.49;
    goto corral_source_split_10753;

  $bb18:
    assume out_$i10 == 1;
    goto corral_source_split_10752;

  $bb17:
    assume !(out_$i9 == 1);
    assume {:verifier.code 0} true;
    out_$i10 := $slt.i32(out_$i2, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb60:
    assume !(out_$i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  corral_source_split_10828:
    assume {:verifier.code 0} true;
    goto $bb61;

  corral_source_split_10827:
    assume {:verifier.code 0} true;
    $M.58 := 0;
    call {:si_unique_call 1463} {:cexpr "probed_7"} boogie_si_record_i32(0);
    goto corral_source_split_10828;

  corral_source_split_10826:
    assume {:verifier.code 0} true;
    $M.54 := out_$i48;
    call {:si_unique_call 1462} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i48);
    goto corral_source_split_10827;

  corral_source_split_10825:
    assume {:verifier.code 0} true;
    out_$i48 := $sub.i32(out_$i47, 1);
    goto corral_source_split_10826;

  corral_source_split_10824:
    assume {:verifier.code 0} true;
    out_$i47 := $M.54;
    goto corral_source_split_10825;

  corral_source_split_10823:
    assume {:verifier.code 0} true;
    $M.49 := 1;
    call {:si_unique_call 1461} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_10824;

  $bb59:
    assume out_$i46 == 1;
    goto corral_source_split_10823;

  corral_source_split_10821:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  corral_source_split_10820:
    assume {:verifier.code 0} true;
    out_$i46 := $eq.i32(out_$i45, 0);
    goto corral_source_split_10821;

  corral_source_split_10819:
    assume {:verifier.code 0} true;
    out_$i45 := $M.59;
    goto corral_source_split_10820;

  corral_source_split_10818:
    assume {:verifier.code 0} true;
    $M.59 := out_$i44;
    call {:si_unique_call 1460} {:cexpr "ldv_retval_1"} boogie_si_record_i32(out_$i44);
    goto corral_source_split_10819;

  corral_source_split_10817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1459} out_$i44 := isp1760_plat_remove(out_$p43);
    goto corral_source_split_10818;

  corral_source_split_10816:
    assume {:verifier.code 0} true;
    out_$p43 := $M.45;
    goto corral_source_split_10817;

  $bb57:
    assume out_$i42 == 1;
    goto corral_source_split_10816;

  corral_source_split_10814:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  corral_source_split_10813:
    assume {:verifier.code 0} true;
    out_$i42 := $eq.i32(out_$i41, 1);
    goto corral_source_split_10814;

  corral_source_split_10812:
    assume {:verifier.code 0} true;
    out_$i41 := $M.58;
    goto corral_source_split_10813;

  $bb54:
    assume out_$i40 == 1;
    goto corral_source_split_10812;

  corral_source_split_10810:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  corral_source_split_10809:
    assume {:verifier.code 0} true;
    out_$i40 := $eq.i32(out_$i39, 2);
    goto corral_source_split_10810;

  $bb53:
    assume {:verifier.code 0} true;
    out_$i39 := $M.49;
    goto corral_source_split_10809;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb51:
    assume !(out_$i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_10807:
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_10806:
    assume {:verifier.code 0} true;
    $M.58 := 0;
    call {:si_unique_call 1458} {:cexpr "probed_7"} boogie_si_record_i32(0);
    goto corral_source_split_10807;

  corral_source_split_10805:
    assume {:verifier.code 0} true;
    $M.54 := out_$i38;
    call {:si_unique_call 1457} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i38);
    goto corral_source_split_10806;

  corral_source_split_10804:
    assume {:verifier.code 0} true;
    out_$i38 := $sub.i32(out_$i37, 1);
    goto corral_source_split_10805;

  corral_source_split_10803:
    assume {:verifier.code 0} true;
    out_$i37 := $M.54;
    goto corral_source_split_10804;

  corral_source_split_10802:
    assume {:verifier.code 0} true;
    $M.49 := 1;
    call {:si_unique_call 1456} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_10803;

  $bb50:
    assume out_$i36 == 1;
    goto corral_source_split_10802;

  corral_source_split_10800:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  corral_source_split_10799:
    assume {:verifier.code 0} true;
    out_$i36 := $eq.i32(out_$i35, 0);
    goto corral_source_split_10800;

  corral_source_split_10798:
    assume {:verifier.code 0} true;
    out_$i35 := $M.59;
    goto corral_source_split_10799;

  corral_source_split_10797:
    assume {:verifier.code 0} true;
    $M.59 := out_$i34;
    call {:si_unique_call 1455} {:cexpr "ldv_retval_1"} boogie_si_record_i32(out_$i34);
    goto corral_source_split_10798;

  corral_source_split_10796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1454} out_$i34 := isp1760_plat_remove(out_$p33);
    goto corral_source_split_10797;

  corral_source_split_10795:
    assume {:verifier.code 0} true;
    out_$p33 := $M.45;
    goto corral_source_split_10796;

  $bb48:
    assume out_$i32 == 1;
    goto corral_source_split_10795;

  corral_source_split_10793:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  corral_source_split_10792:
    assume {:verifier.code 0} true;
    out_$i32 := $eq.i32(out_$i31, 1);
    goto corral_source_split_10793;

  corral_source_split_10791:
    assume {:verifier.code 0} true;
    out_$i31 := $M.58;
    goto corral_source_split_10792;

  $bb45:
    assume out_$i30 == 1;
    goto corral_source_split_10791;

  corral_source_split_10771:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  corral_source_split_10770:
    assume {:verifier.code 0} true;
    out_$i30 := $eq.i32(out_$i29, 1);
    goto corral_source_split_10771;

  corral_source_split_10769:
    assume {:verifier.code 0} true;
    out_$i29 := $M.49;
    goto corral_source_split_10770;

  $bb33:
    assume out_$i19 == 1;
    goto corral_source_split_10769;

  $bb32:
    assume !(out_$i18 == 1);
    assume {:verifier.code 0} true;
    out_$i19 := $eq.i32(out_$i17, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb46:
    assume {:verifier.code 0} true;
    assume !(out_$i30 == 1);
    goto $bb47;

  $bb49:
    assume {:verifier.code 0} true;
    assume !(out_$i32 == 1);
    goto $bb47;

  $bb55:
    assume {:verifier.code 0} true;
    assume !(out_$i40 == 1);
    goto $bb56;

  $bb58:
    assume {:verifier.code 0} true;
    assume !(out_$i42 == 1);
    goto $bb56;

  corral_source_split_10830:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb63:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1464} ldv_stop();
    goto corral_source_split_10830;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb34:
    assume {:verifier.code 0} true;
    assume !(out_$i19 == 1);
    goto $bb35;

  $bb37:
    assume {:verifier.code 0} true;
    assume !(out_$i20 == 1);
    goto $bb35;

  $bb19:
    assume !(out_$i10 == 1);
    goto corral_source_split_10756;

  $bb67:
    assume !(out_$i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb92:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb87:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb83:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb79:
    assume !(out_$i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb81:
    assume !(out_$i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  corral_source_split_10857:
    assume {:verifier.code 0} true;
    goto $bb82;

  corral_source_split_10856:
    assume {:verifier.code 0} true;
    $M.54 := out_$i63;
    call {:si_unique_call 1471} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i63);
    goto corral_source_split_10857;

  corral_source_split_10855:
    assume {:verifier.code 0} true;
    out_$i63 := $add.i32(out_$i62, 1);
    goto corral_source_split_10856;

  corral_source_split_10854:
    assume {:verifier.code 0} true;
    out_$i62 := $M.54;
    goto corral_source_split_10855;

  corral_source_split_10853:
    assume {:verifier.code 0} true;
    $M.51 := 2;
    call {:si_unique_call 1470} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_10854;

  $bb80:
    assume out_$i61 == 1;
    goto corral_source_split_10853;

  corral_source_split_10851:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  corral_source_split_10850:
    assume {:verifier.code 0} true;
    out_$i61 := $eq.i32(out_$i60, 0);
    goto corral_source_split_10851;

  corral_source_split_10849:
    assume {:verifier.code 0} true;
    out_$i60 := $M.60;
    goto corral_source_split_10850;

  corral_source_split_10848:
    assume {:verifier.code 0} true;
    $M.60 := out_$i59;
    call {:si_unique_call 1469} {:cexpr "ldv_retval_3"} boogie_si_record_i32(out_$i59);
    goto corral_source_split_10849;

  SeqInstr_327:
    goto corral_source_split_10848;

  SeqInstr_326:
    assume assertsPassed;
    goto SeqInstr_327;

  corral_source_split_10847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1468} out_$i59 := isp1761_pci_probe(out_$p58, in_$p1);
    goto SeqInstr_326;

  corral_source_split_10846:
    assume {:verifier.code 0} true;
    out_$p58 := $M.46;
    goto corral_source_split_10847;

  $bb78:
    assume out_$i57 == 1;
    goto corral_source_split_10846;

  corral_source_split_10844:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  corral_source_split_10843:
    assume {:verifier.code 0} true;
    out_$i57 := $eq.i32(out_$i56, 1);
    goto corral_source_split_10844;

  corral_source_split_10842:
    assume {:verifier.code 0} true;
    out_$i56 := $M.51;
    goto corral_source_split_10843;

  $bb76:
    assume out_$i55 == 1;
    goto corral_source_split_10842;

  $bb69:
    assume out_$i52 == 1;
    assume {:verifier.code 0} true;
    out_$i55 := $eq.i32(out_$i51, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb68:
    assume {:verifier.code 0} true;
    out_$i52 := $slt.i32(out_$i51, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  corral_source_split_10832:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1465} out_$i51 := __VERIFIER_nondet_int();
    call {:si_unique_call 1466} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i51);
    call {:si_unique_call 1467} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i51);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb66:
    assume out_$i50 == 1;
    goto corral_source_split_10832;

  corral_source_split_10748:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  corral_source_split_10747:
    assume {:verifier.code 0} true;
    out_$i50 := $ne.i32(out_$i49, 0);
    goto corral_source_split_10748;

  corral_source_split_10746:
    assume {:verifier.code 0} true;
    out_$i49 := $M.51;
    goto corral_source_split_10747;

  $bb14:
    assume out_$i8 == 1;
    goto corral_source_split_10746;

  $bb5:
    assume out_$i4 == 1;
    assume {:verifier.code 0} true;
    out_$i8 := $slt.i32(out_$i2, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb4:
    assume !(out_$i3 == 1);
    assume {:verifier.code 0} true;
    out_$i4 := $slt.i32(out_$i2, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb86:
    assume !(out_$i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  corral_source_split_10862:
    assume {:verifier.code 0} true;
    goto $bb87;

  corral_source_split_10861:
    assume {:verifier.code 0} true;
    $M.51 := 2;
    call {:si_unique_call 1473} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_10862;

  corral_source_split_10860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1472} isp1761_pci_shutdown(out_$p66);
    goto corral_source_split_10861;

  corral_source_split_10859:
    assume {:verifier.code 0} true;
    out_$p66 := $M.46;
    goto corral_source_split_10860;

  $bb85:
    assume out_$i65 == 1;
    goto corral_source_split_10859;

  corral_source_split_10836:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  corral_source_split_10835:
    assume {:verifier.code 0} true;
    out_$i65 := $eq.i32(out_$i64, 2);
    goto corral_source_split_10836;

  corral_source_split_10834:
    assume {:verifier.code 0} true;
    out_$i64 := $M.51;
    goto corral_source_split_10835;

  $bb71:
    assume out_$i53 == 1;
    goto corral_source_split_10834;

  $bb70:
    assume !(out_$i52 == 1);
    assume {:verifier.code 0} true;
    out_$i53 := $slt.i32(out_$i51, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb89:
    assume !(out_$i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  corral_source_split_10867:
    assume {:verifier.code 0} true;
    goto $bb90;

  corral_source_split_10866:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1475} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_10867;

  corral_source_split_10865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1474} isp1761_pci_remove(out_$p69);
    goto corral_source_split_10866;

  corral_source_split_10864:
    assume {:verifier.code 0} true;
    out_$p69 := $M.46;
    goto corral_source_split_10865;

  $bb88:
    assume out_$i68 == 1;
    goto corral_source_split_10864;

  corral_source_split_10840:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  corral_source_split_10839:
    assume {:verifier.code 0} true;
    out_$i68 := $eq.i32(out_$i67, 2);
    goto corral_source_split_10840;

  corral_source_split_10838:
    assume {:verifier.code 0} true;
    out_$i67 := $M.51;
    goto corral_source_split_10839;

  $bb73:
    assume out_$i54 == 1;
    goto corral_source_split_10838;

  $bb72:
    assume !(out_$i53 == 1);
    assume {:verifier.code 0} true;
    out_$i54 := $eq.i32(out_$i51, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  corral_source_split_10869:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb91:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1476} ldv_stop();
    goto corral_source_split_10869;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb74:
    assume {:verifier.code 0} true;
    assume !(out_$i54 == 1);
    goto $bb75;

  $bb77:
    assume {:verifier.code 0} true;
    assume !(out_$i55 == 1);
    goto $bb75;

  $bb15:
    assume !(out_$i8 == 1);
    goto corral_source_split_10750;

  $bb95:
    assume !(out_$i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  corral_source_split_10872:
    assume {:verifier.code 0} true;
    goto $bb96;

  SeqInstr_330:
    goto corral_source_split_10872;

  SeqInstr_329:
    assume assertsPassed;
    goto SeqInstr_330;

  corral_source_split_10871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1477} ldv_main_exported_4();
    goto SeqInstr_329;

  $bb94:
    assume out_$i71 == 1;
    goto corral_source_split_10871;

  corral_source_split_10736:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  corral_source_split_10735:
    assume {:verifier.code 0} true;
    out_$i71 := $ne.i32(out_$i70, 0);
    goto corral_source_split_10736;

  corral_source_split_10734:
    assume {:verifier.code 0} true;
    out_$i70 := $M.53;
    goto corral_source_split_10735;

  $bb7:
    assume out_$i5 == 1;
    goto corral_source_split_10734;

  $bb6:
    assume !(out_$i4 == 1);
    assume {:verifier.code 0} true;
    out_$i5 := $slt.i32(out_$i2, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb98:
    assume !(out_$i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb114:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb125:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb123:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb113:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb109:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb108:
    assume {:verifier.code 0} true;
    assume !(out_$i79 == 1);
    goto $bb109;

  $bb111:
    assume {:verifier.code 0} true;
    assume !(out_$i81 == 1);
    goto $bb109;

  corral_source_split_10886:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb111;

  corral_source_split_10885:
    assume {:verifier.code 0} true;
    out_$i81 := $eq.i32(out_$i80, 0);
    goto corral_source_split_10886;

  corral_source_split_10884:
    assume {:verifier.code 0} true;
    out_$i80 := $M.54;
    goto corral_source_split_10885;

  $bb107:
    assume out_$i79 == 1;
    goto corral_source_split_10884;

  corral_source_split_10882:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  corral_source_split_10881:
    assume {:verifier.code 0} true;
    out_$i79 := $eq.i32(out_$i78, 3);
    goto corral_source_split_10882;

  corral_source_split_10880:
    assume {:verifier.code 0} true;
    out_$i78 := $M.55;
    goto corral_source_split_10881;

  $bb105:
    assume out_$i77 == 1;
    goto corral_source_split_10880;

  $bb100:
    assume out_$i75 == 1;
    assume {:verifier.code 0} true;
    out_$i77 := $eq.i32(out_$i74, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105, $bb106;

  $bb99:
    assume {:verifier.code 0} true;
    out_$i75 := $slt.i32(out_$i74, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  corral_source_split_10874:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1478} out_$i74 := __VERIFIER_nondet_int();
    call {:si_unique_call 1479} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i74);
    call {:si_unique_call 1480} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i74);
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb97:
    assume out_$i73 == 1;
    goto corral_source_split_10874;

  corral_source_split_10740:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  corral_source_split_10739:
    assume {:verifier.code 0} true;
    out_$i73 := $ne.i32(out_$i72, 0);
    goto corral_source_split_10740;

  corral_source_split_10738:
    assume {:verifier.code 0} true;
    out_$i72 := $M.55;
    goto corral_source_split_10739;

  $bb9:
    assume out_$i6 == 1;
    goto corral_source_split_10738;

  $bb8:
    assume !(out_$i5 == 1);
    assume {:verifier.code 0} true;
    out_$i6 := $slt.i32(out_$i2, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb116:
    assume !(out_$i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb122:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb121:
    assume !(out_$i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb122;

  corral_source_split_10910:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb121;

  corral_source_split_10909:
    assume {:verifier.code 0} true;
    out_$i88 := $ne.i32(out_$i87, 0);
    goto corral_source_split_10910;

  $bb119:
    assume {:verifier.code 0} true;
    out_$i87 := $M.61;
    goto corral_source_split_10909;

  $bb118:
    assume !(out_$i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb119;

  corral_source_split_10907:
    assume {:verifier.code 0} true;
    goto $bb119;

  corral_source_split_10906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1492} ldv_initialize_hc_driver_6();
    goto corral_source_split_10907;

  corral_source_split_10905:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 1491} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_10906;

  corral_source_split_10904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1490} ldv_initialize_usb_gadget_ops_4();
    goto corral_source_split_10905;

  corral_source_split_10903:
    assume {:verifier.code 0} true;
    $M.53 := 1;
    call {:si_unique_call 1489} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_10904;

  corral_source_split_10902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1488} ldv_initialize_usb_ep_ops_5();
    goto corral_source_split_10903;

  corral_source_split_10901:
    assume {:verifier.code 0} true;
    $M.56 := 1;
    call {:si_unique_call 1487} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_10902;

  corral_source_split_10900:
    assume {:verifier.code 0} true;
    $M.55 := 3;
    call {:si_unique_call 1486} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_10901;

  $bb117:
    assume out_$i86 == 1;
    goto corral_source_split_10900;

  corral_source_split_10898:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb117, $bb118;

  corral_source_split_10897:
    assume {:verifier.code 0} true;
    out_$i86 := $eq.i32(out_$i85, 0);
    goto corral_source_split_10898;

  corral_source_split_10896:
    assume {:verifier.code 0} true;
    out_$i85 := $M.61;
    goto corral_source_split_10897;

  corral_source_split_10895:
    assume {:verifier.code 0} true;
    $M.61 := out_$i84;
    call {:si_unique_call 1485} {:cexpr "ldv_retval_4"} boogie_si_record_i32(out_$i84);
    goto corral_source_split_10896;

  corral_source_split_10894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1484} out_$i84 := isp1760_init();
    goto corral_source_split_10895;

  $bb115:
    assume out_$i83 == 1;
    goto corral_source_split_10894;

  corral_source_split_10878:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb115, $bb116;

  corral_source_split_10877:
    assume {:verifier.code 0} true;
    out_$i83 := $eq.i32(out_$i82, 1);
    goto corral_source_split_10878;

  corral_source_split_10876:
    assume {:verifier.code 0} true;
    out_$i82 := $M.55;
    goto corral_source_split_10877;

  $bb102:
    assume out_$i76 == 1;
    goto corral_source_split_10876;

  $bb101:
    assume !(out_$i75 == 1);
    assume {:verifier.code 0} true;
    out_$i76 := $eq.i32(out_$i74, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb102, $bb103;

  corral_source_split_10915:
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1494} ldv_stop();
    goto corral_source_split_10915;

  $bb104:
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb103:
    assume {:verifier.code 0} true;
    assume !(out_$i76 == 1);
    goto $bb104;

  $bb106:
    assume {:verifier.code 0} true;
    assume !(out_$i77 == 1);
    goto $bb104;

  $bb128:
    assume !(out_$i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb129;

  corral_source_split_10918:
    assume {:verifier.code 0} true;
    goto $bb129;

  SeqInstr_333:
    goto corral_source_split_10918;

  SeqInstr_332:
    assume assertsPassed;
    goto SeqInstr_333;

  corral_source_split_10917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1495} ldv_main_exported_5();
    goto SeqInstr_332;

  $bb127:
    assume out_$i90 == 1;
    goto corral_source_split_10917;

  corral_source_split_10744:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb127, $bb128;

  corral_source_split_10743:
    assume {:verifier.code 0} true;
    out_$i90 := $ne.i32(out_$i89, 0);
    goto corral_source_split_10744;

  corral_source_split_10742:
    assume {:verifier.code 0} true;
    out_$i89 := $M.56;
    goto corral_source_split_10743;

  $bb11:
    assume out_$i7 == 1;
    goto corral_source_split_10742;

  $bb10:
    assume !(out_$i6 == 1);
    assume {:verifier.code 0} true;
    out_$i7 := $eq.i32(out_$i2, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_10920:
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1496} ldv_stop();
    goto corral_source_split_10920;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb12:
    assume {:verifier.code 0} true;
    assume !(out_$i7 == 1);
    goto $bb13;

  $bb23:
    assume {:verifier.code 0} true;
    assume !(out_$i12 == 1);
    goto $bb13;

  $bb27_dummy:
    call {:si_unique_call 1} out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$p43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$p58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$p66, out_$i67, out_$i68, out_$p69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90 := main_loop_$bb1(in_$p1, out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$p43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$p58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$p66, out_$i67, out_$i68, out_$p69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$p1: ref, in_$i2: i32, in_$i3: i1, in_$i4: i1, in_$i5: i1, in_$i6: i1, in_$i7: i1, in_$i8: i1, in_$i9: i1, in_$i10: i1, in_$i11: i1, in_$i12: i1, in_$i13: i32, in_$i14: i1, in_$i15: i32, in_$i16: i1, in_$i17: i32, in_$i18: i1, in_$i19: i1, in_$i20: i1, in_$i21: i32, in_$i22: i1, in_$p23: ref, in_$i24: i32, in_$i25: i32, in_$i26: i1, in_$i27: i32, in_$i28: i32, in_$i29: i32, in_$i30: i1, in_$i31: i32, in_$i32: i1, in_$p33: ref, in_$i34: i32, in_$i35: i32, in_$i36: i1, in_$i37: i32, in_$i38: i32, in_$i39: i32, in_$i40: i1, in_$i41: i32, in_$i42: i1, in_$p43: ref, in_$i44: i32, in_$i45: i32, in_$i46: i1, in_$i47: i32, in_$i48: i32, in_$i49: i32, in_$i50: i1, in_$i51: i32, in_$i52: i1, in_$i53: i1, in_$i54: i1, in_$i55: i1, in_$i56: i32, in_$i57: i1, in_$p58: ref, in_$i59: i32, in_$i60: i32, in_$i61: i1, in_$i62: i32, in_$i63: i32, in_$i64: i32, in_$i65: i1, in_$p66: ref, in_$i67: i32, in_$i68: i1, in_$p69: ref, in_$i70: i32, in_$i71: i1, in_$i72: i32, in_$i73: i1, in_$i74: i32, in_$i75: i1, in_$i76: i1, in_$i77: i1, in_$i78: i32, in_$i79: i1, in_$i80: i32, in_$i81: i1, in_$i82: i32, in_$i83: i1, in_$i84: i32, in_$i85: i32, in_$i86: i1, in_$i87: i32, in_$i88: i1, in_$i89: i32, in_$i90: i1) returns (out_$i2: i32, out_$i3: i1, out_$i4: i1, out_$i5: i1, out_$i6: i1, out_$i7: i1, out_$i8: i1, out_$i9: i1, out_$i10: i1, out_$i11: i1, out_$i12: i1, out_$i13: i32, out_$i14: i1, out_$i15: i32, out_$i16: i1, out_$i17: i32, out_$i18: i1, out_$i19: i1, out_$i20: i1, out_$i21: i32, out_$i22: i1, out_$p23: ref, out_$i24: i32, out_$i25: i32, out_$i26: i1, out_$i27: i32, out_$i28: i32, out_$i29: i32, out_$i30: i1, out_$i31: i32, out_$i32: i1, out_$p33: ref, out_$i34: i32, out_$i35: i32, out_$i36: i1, out_$i37: i32, out_$i38: i32, out_$i39: i32, out_$i40: i1, out_$i41: i32, out_$i42: i1, out_$p43: ref, out_$i44: i32, out_$i45: i32, out_$i46: i1, out_$i47: i32, out_$i48: i32, out_$i49: i32, out_$i50: i1, out_$i51: i32, out_$i52: i1, out_$i53: i1, out_$i54: i1, out_$i55: i1, out_$i56: i32, out_$i57: i1, out_$p58: ref, out_$i59: i32, out_$i60: i32, out_$i61: i1, out_$i62: i32, out_$i63: i32, out_$i64: i32, out_$i65: i1, out_$p66: ref, out_$i67: i32, out_$i68: i1, out_$p69: ref, out_$i70: i32, out_$i71: i1, out_$i72: i32, out_$i73: i1, out_$i74: i32, out_$i75: i1, out_$i76: i1, out_$i77: i1, out_$i78: i32, out_$i79: i1, out_$i80: i32, out_$i81: i1, out_$i82: i32, out_$i83: i1, out_$i84: i32, out_$i85: i32, out_$i86: i1, out_$i87: i32, out_$i88: i1, out_$i89: i32, out_$i90: i1);
  modifies $M.44, $M.0, $M.67, $M.47, $M.54, $M.30, $M.32, $M.23, $M.22, $M.25, $M.24, $M.27, $M.26, $M.29, $M.28, $M.40, $M.38, $M.36, $CurrAddr, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.1, assertsPassed, $M.2, $M.4, $M.6, $M.8, $M.3, $M.5, $M.7, $M.9, $M.58, $M.49, $M.57, $M.59, $M.51, $M.60, $M.53, $M.68, $M.66, $M.69, $M.70, $M.71, $M.72, $M.56, $M.55, $M.61, $M.35, $M.37, $M.39, $M.45, $M.46;



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();


